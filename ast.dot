digraph G{
rankdir="LR";
"MODULE"[shape="box",fillcolor="white",style=filled];
"# type: ignore,type='comment'"[shape="box",fillcolor="#f0c929",style=filled];
"MODULE"->"# type: ignore,type='comment'";
"import asyncio,type='import_statement'"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"import asyncio,type='import_statement'";
"from typing import Any,type='import_from_statement'"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"from typing import Any,type='import_from_statement'";
"from unittest import mock,type='import_from_statement'"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"from unittest import mock,type='import_from_statement'";
"import aiosignal,type='import_statement'"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"import aiosignal,type='import_statement'";
"import pytest,type='import_statement'"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"import pytest,type='import_statement'";
"from multidict import CIMultiDict,type='import_from_statement'"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"from multidict import CIMultiDict,type='import_from_statement'";
"from aiohttp import WSMsgType,type='import_from_statement'"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"from aiohttp import WSMsgType,type='import_from_statement'";
"from aiohttp.streams import EofStream,type='import_from_statement'"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"from aiohttp.streams import EofStream,type='import_from_statement'";
"from aiohttp.test_utils import make_mocked_coro, make_mocked_request,type='import_from_statement'"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"from aiohttp.test_utils import make_mocked_coro, make_mocked_request,type='import_from_statement'";
"from aiohttp.web import HTTPBadRequest, WebSocketResponse,type='import_from_statement'"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"from aiohttp.web import HTTPBadRequest, WebSocketResponse,type='import_from_statement'";
"from aiohttp.web_ws import WS_CLOSED_MESSAGE, WebSocketReady,type='import_from_statement'"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"from aiohttp.web_ws import WS_CLOSED_MESSAGE, WebSocketReady,type='import_from_statement'";
"@pytest.fixture\ndef app(loop: Any):\n    ret = mock.Mock()\n    ret.loop = loop\n    ret._debug = False\n    ret.on_response_prepare = aiosignal.Signal(ret)\n    ret.on_response_prepare.freeze()\n    return ret,type='decorated_definition'"[shape="box",fillcolor="white",style=filled];
"MODULE"->"@pytest.fixture\ndef app(loop: Any):\n    ret = mock.Mock()\n    ret.loop = loop\n    ret._debug = False\n    ret.on_response_prepare = aiosignal.Signal(ret)\n    ret.on_response_prepare.freeze()\n    return ret,type='decorated_definition'";
"@pytest.fixture,type='decorator'"[shape="box",fillcolor="white",style=filled];
"@pytest.fixture\ndef app(loop: Any):\n    ret = mock.Mock()\n    ret.loop = loop\n    ret._debug = False\n    ret.on_response_prepare = aiosignal.Signal(ret)\n    ret.on_response_prepare.freeze()\n    return ret,type='decorated_definition'"->"@pytest.fixture,type='decorator'";
"def app(loop: Any):\n    ret = mock.Mock()\n    ret.loop = loop\n    ret._debug = False\n    ret.on_response_prepare = aiosignal.Signal(ret)\n    ret.on_response_prepare.freeze()\n    return ret,type='function_definition'"[shape="box",fillcolor="#cee6b4",style=filled];
"@pytest.fixture\ndef app(loop: Any):\n    ret = mock.Mock()\n    ret.loop = loop\n    ret._debug = False\n    ret.on_response_prepare = aiosignal.Signal(ret)\n    ret.on_response_prepare.freeze()\n    return ret,type='decorated_definition'"->"def app(loop: Any):\n    ret = mock.Mock()\n    ret.loop = loop\n    ret._debug = False\n    ret.on_response_prepare = aiosignal.Signal(ret)\n    ret.on_response_prepare.freeze()\n    return ret,type='function_definition'";
"[BLOCK]18,23|4,14|"[shape="box",fillcolor="white",style=filled];
"def app(loop: Any):\n    ret = mock.Mock()\n    ret.loop = loop\n    ret._debug = False\n    ret.on_response_prepare = aiosignal.Signal(ret)\n    ret.on_response_prepare.freeze()\n    return ret,type='function_definition'"->"[BLOCK]18,23|4,14|";
"return ret,type='return_statement'"[shape="box",fillcolor="#f0c929",style=filled];
"[BLOCK]18,23|4,14|"->"return ret,type='return_statement'";
"@pytest.fixture\ndef protocol():\n    ret = mock.Mock()\n    ret.set_parser.return_value = ret\n    return ret,type='decorated_definition'"[shape="box",fillcolor="white",style=filled];
"MODULE"->"@pytest.fixture\ndef protocol():\n    ret = mock.Mock()\n    ret.set_parser.return_value = ret\n    return ret,type='decorated_definition'";
"@pytest.fixture,type='decorator'"[shape="box",fillcolor="white",style=filled];
"@pytest.fixture\ndef protocol():\n    ret = mock.Mock()\n    ret.set_parser.return_value = ret\n    return ret,type='decorated_definition'"->"@pytest.fixture,type='decorator'";
"def protocol():\n    ret = mock.Mock()\n    ret.set_parser.return_value = ret\n    return ret,type='function_definition'"[shape="box",fillcolor="#cee6b4",style=filled];
"@pytest.fixture\ndef protocol():\n    ret = mock.Mock()\n    ret.set_parser.return_value = ret\n    return ret,type='decorated_definition'"->"def protocol():\n    ret = mock.Mock()\n    ret.set_parser.return_value = ret\n    return ret,type='function_definition'";
"[BLOCK]28,30|4,14|"[shape="box",fillcolor="white",style=filled];
"def protocol():\n    ret = mock.Mock()\n    ret.set_parser.return_value = ret\n    return ret,type='function_definition'"->"[BLOCK]28,30|4,14|";
"return ret,type='return_statement'"[shape="box",fillcolor="#f0c929",style=filled];
"[BLOCK]28,30|4,14|"->"return ret,type='return_statement'";
"@pytest.fixture\ndef make_request(app: Any, protocol: Any):\n    def maker(method, path, headers=None, protocols=False):\n        if headers is None:\n            headers = CIMultiDict(\n                {\n                    'HOST': 'server.example.com',\n                    'UPGRADE': 'websocket',\n                    'CONNECTION': 'Upgrade',\n                    'SEC-WEBSOCKET-KEY': 'dGhlIHNhbXBsZSBub25jZQ==',\n                    'ORIGIN': 'http://example.com',\n                    'SEC-WEBSOCKET-VERSION': '13',\n                }\n            )\n        if protocols:\n            headers['SEC-WEBSOCKET-PROTOCOL'] = 'chat, superchat'\n\n        return make_mocked_request(\n            method, path, headers, app=app, protocol=protocol, loop=app.loop\n        )\n\n    return maker,type='decorated_definition'"[shape="box",fillcolor="white",style=filled];
"MODULE"->"@pytest.fixture\ndef make_request(app: Any, protocol: Any):\n    def maker(method, path, headers=None, protocols=False):\n        if headers is None:\n            headers = CIMultiDict(\n                {\n                    'HOST': 'server.example.com',\n                    'UPGRADE': 'websocket',\n                    'CONNECTION': 'Upgrade',\n                    'SEC-WEBSOCKET-KEY': 'dGhlIHNhbXBsZSBub25jZQ==',\n                    'ORIGIN': 'http://example.com',\n                    'SEC-WEBSOCKET-VERSION': '13',\n                }\n            )\n        if protocols:\n            headers['SEC-WEBSOCKET-PROTOCOL'] = 'chat, superchat'\n\n        return make_mocked_request(\n            method, path, headers, app=app, protocol=protocol, loop=app.loop\n        )\n\n    return maker,type='decorated_definition'";
"@pytest.fixture,type='decorator'"[shape="box",fillcolor="white",style=filled];
"@pytest.fixture\ndef make_request(app: Any, protocol: Any):\n    def maker(method, path, headers=None, protocols=False):\n        if headers is None:\n            headers = CIMultiDict(\n                {\n                    'HOST': 'server.example.com',\n                    'UPGRADE': 'websocket',\n                    'CONNECTION': 'Upgrade',\n                    'SEC-WEBSOCKET-KEY': 'dGhlIHNhbXBsZSBub25jZQ==',\n                    'ORIGIN': 'http://example.com',\n                    'SEC-WEBSOCKET-VERSION': '13',\n                }\n            )\n        if protocols:\n            headers['SEC-WEBSOCKET-PROTOCOL'] = 'chat, superchat'\n\n        return make_mocked_request(\n            method, path, headers, app=app, protocol=protocol, loop=app.loop\n        )\n\n    return maker,type='decorated_definition'"->"@pytest.fixture,type='decorator'";
"def make_request(app: Any, protocol: Any):\n    def maker(method, path, headers=None, protocols=False):\n        if headers is None:\n            headers = CIMultiDict(\n                {\n                    'HOST': 'server.example.com',\n                    'UPGRADE': 'websocket',\n                    'CONNECTION': 'Upgrade',\n                    'SEC-WEBSOCKET-KEY': 'dGhlIHNhbXBsZSBub25jZQ==',\n                    'ORIGIN': 'http://example.com',\n                    'SEC-WEBSOCKET-VERSION': '13',\n                }\n            )\n        if protocols:\n            headers['SEC-WEBSOCKET-PROTOCOL'] = 'chat, superchat'\n\n        return make_mocked_request(\n            method, path, headers, app=app, protocol=protocol, loop=app.loop\n        )\n\n    return maker,type='function_definition'"[shape="box",fillcolor="#cee6b4",style=filled];
"@pytest.fixture\ndef make_request(app: Any, protocol: Any):\n    def maker(method, path, headers=None, protocols=False):\n        if headers is None:\n            headers = CIMultiDict(\n                {\n                    'HOST': 'server.example.com',\n                    'UPGRADE': 'websocket',\n                    'CONNECTION': 'Upgrade',\n                    'SEC-WEBSOCKET-KEY': 'dGhlIHNhbXBsZSBub25jZQ==',\n                    'ORIGIN': 'http://example.com',\n                    'SEC-WEBSOCKET-VERSION': '13',\n                }\n            )\n        if protocols:\n            headers['SEC-WEBSOCKET-PROTOCOL'] = 'chat, superchat'\n\n        return make_mocked_request(\n            method, path, headers, app=app, protocol=protocol, loop=app.loop\n        )\n\n    return maker,type='decorated_definition'"->"def make_request(app: Any, protocol: Any):\n    def maker(method, path, headers=None, protocols=False):\n        if headers is None:\n            headers = CIMultiDict(\n                {\n                    'HOST': 'server.example.com',\n                    'UPGRADE': 'websocket',\n                    'CONNECTION': 'Upgrade',\n                    'SEC-WEBSOCKET-KEY': 'dGhlIHNhbXBsZSBub25jZQ==',\n                    'ORIGIN': 'http://example.com',\n                    'SEC-WEBSOCKET-VERSION': '13',\n                }\n            )\n        if protocols:\n            headers['SEC-WEBSOCKET-PROTOCOL'] = 'chat, superchat'\n\n        return make_mocked_request(\n            method, path, headers, app=app, protocol=protocol, loop=app.loop\n        )\n\n    return maker,type='function_definition'";
"[BLOCK]35,54|4,16|"[shape="box",fillcolor="white",style=filled];
"def make_request(app: Any, protocol: Any):\n    def maker(method, path, headers=None, protocols=False):\n        if headers is None:\n            headers = CIMultiDict(\n                {\n                    'HOST': 'server.example.com',\n                    'UPGRADE': 'websocket',\n                    'CONNECTION': 'Upgrade',\n                    'SEC-WEBSOCKET-KEY': 'dGhlIHNhbXBsZSBub25jZQ==',\n                    'ORIGIN': 'http://example.com',\n                    'SEC-WEBSOCKET-VERSION': '13',\n                }\n            )\n        if protocols:\n            headers['SEC-WEBSOCKET-PROTOCOL'] = 'chat, superchat'\n\n        return make_mocked_request(\n            method, path, headers, app=app, protocol=protocol, loop=app.loop\n        )\n\n    return maker,type='function_definition'"->"[BLOCK]35,54|4,16|";
"def maker(method, path, headers=None, protocols=False):\n        if headers is None:\n            headers = CIMultiDict(\n                {\n                    'HOST': 'server.example.com',\n                    'UPGRADE': 'websocket',\n                    'CONNECTION': 'Upgrade',\n                    'SEC-WEBSOCKET-KEY': 'dGhlIHNhbXBsZSBub25jZQ==',\n                    'ORIGIN': 'http://example.com',\n                    'SEC-WEBSOCKET-VERSION': '13',\n                }\n            )\n        if protocols:\n            headers['SEC-WEBSOCKET-PROTOCOL'] = 'chat, superchat'\n\n        return make_mocked_request(\n            method, path, headers, app=app, protocol=protocol, loop=app.loop\n        ),type='function_definition'"[shape="box",fillcolor="#cee6b4",style=filled];
"[BLOCK]35,54|4,16|"->"def maker(method, path, headers=None, protocols=False):\n        if headers is None:\n            headers = CIMultiDict(\n                {\n                    'HOST': 'server.example.com',\n                    'UPGRADE': 'websocket',\n                    'CONNECTION': 'Upgrade',\n                    'SEC-WEBSOCKET-KEY': 'dGhlIHNhbXBsZSBub25jZQ==',\n                    'ORIGIN': 'http://example.com',\n                    'SEC-WEBSOCKET-VERSION': '13',\n                }\n            )\n        if protocols:\n            headers['SEC-WEBSOCKET-PROTOCOL'] = 'chat, superchat'\n\n        return make_mocked_request(\n            method, path, headers, app=app, protocol=protocol, loop=app.loop\n        ),type='function_definition'";
"[BLOCK]36,52|8,9|"[shape="box",fillcolor="white",style=filled];
"def maker(method, path, headers=None, protocols=False):\n        if headers is None:\n            headers = CIMultiDict(\n                {\n                    'HOST': 'server.example.com',\n                    'UPGRADE': 'websocket',\n                    'CONNECTION': 'Upgrade',\n                    'SEC-WEBSOCKET-KEY': 'dGhlIHNhbXBsZSBub25jZQ==',\n                    'ORIGIN': 'http://example.com',\n                    'SEC-WEBSOCKET-VERSION': '13',\n                }\n            )\n        if protocols:\n            headers['SEC-WEBSOCKET-PROTOCOL'] = 'chat, superchat'\n\n        return make_mocked_request(\n            method, path, headers, app=app, protocol=protocol, loop=app.loop\n        ),type='function_definition'"->"[BLOCK]36,52|8,9|";
"if headers is None:\n            headers = CIMultiDict(\n                {\n                    'HOST': 'server.example.com',\n                    'UPGRADE': 'websocket',\n                    'CONNECTION': 'Upgrade',\n                    'SEC-WEBSOCKET-KEY': 'dGhlIHNhbXBsZSBub25jZQ==',\n                    'ORIGIN': 'http://example.com',\n                    'SEC-WEBSOCKET-VERSION': '13',\n                }\n            ),type='if_statement'"[shape="box",fillcolor="#9ecca4",style=filled];
"[BLOCK]36,52|8,9|"->"if headers is None:\n            headers = CIMultiDict(\n                {\n                    'HOST': 'server.example.com',\n                    'UPGRADE': 'websocket',\n                    'CONNECTION': 'Upgrade',\n                    'SEC-WEBSOCKET-KEY': 'dGhlIHNhbXBsZSBub25jZQ==',\n                    'ORIGIN': 'http://example.com',\n                    'SEC-WEBSOCKET-VERSION': '13',\n                }\n            ),type='if_statement'";
"if protocols:\n            headers['SEC-WEBSOCKET-PROTOCOL'] = 'chat, superchat',type='if_statement'"[shape="box",fillcolor="#9ecca4",style=filled];
"[BLOCK]36,52|8,9|"->"if protocols:\n            headers['SEC-WEBSOCKET-PROTOCOL'] = 'chat, superchat',type='if_statement'";
"return make_mocked_request(\n            method, path, headers, app=app, protocol=protocol, loop=app.loop\n        ),type='return_statement'"[shape="box",fillcolor="#f0c929",style=filled];
"[BLOCK]36,52|8,9|"->"return make_mocked_request(\n            method, path, headers, app=app, protocol=protocol, loop=app.loop\n        ),type='return_statement'";
"return maker,type='return_statement'"[shape="box",fillcolor="#f0c929",style=filled];
"[BLOCK]35,54|4,16|"->"return maker,type='return_statement'";
"async def test_nonstarted_ping() -> None:\n    ws = WebSocketResponse()\n    with pytest.raises(RuntimeError):\n        await ws.ping(),type='function_definition'"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"async def test_nonstarted_ping() -> None:\n    ws = WebSocketResponse()\n    with pytest.raises(RuntimeError):\n        await ws.ping(),type='function_definition'";
"[BLOCK]58,60|4,23|"[shape="box",fillcolor="white",style=filled];
"async def test_nonstarted_ping() -> None:\n    ws = WebSocketResponse()\n    with pytest.raises(RuntimeError):\n        await ws.ping(),type='function_definition'"->"[BLOCK]58,60|4,23|";
"with pytest.raises(RuntimeError):\n        await ws.ping(),type='with_statement'"[shape="box",fillcolor="white",style=filled];
"[BLOCK]58,60|4,23|"->"with pytest.raises(RuntimeError):\n        await ws.ping(),type='with_statement'";
"pytest.raises(RuntimeError),type='with_clause'"[shape="box",fillcolor="white",style=filled];
"with pytest.raises(RuntimeError):\n        await ws.ping(),type='with_statement'"->"pytest.raises(RuntimeError),type='with_clause'";
"await ws.ping(),type='block'"[shape="box",fillcolor="white",style=filled];
"with pytest.raises(RuntimeError):\n        await ws.ping(),type='with_statement'"->"await ws.ping(),type='block'";
"async def test_nonstarted_pong() -> None:\n    ws = WebSocketResponse()\n    with pytest.raises(RuntimeError):\n        await ws.pong(),type='function_definition'"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"async def test_nonstarted_pong() -> None:\n    ws = WebSocketResponse()\n    with pytest.raises(RuntimeError):\n        await ws.pong(),type='function_definition'";
"[BLOCK]64,66|4,23|"[shape="box",fillcolor="white",style=filled];
"async def test_nonstarted_pong() -> None:\n    ws = WebSocketResponse()\n    with pytest.raises(RuntimeError):\n        await ws.pong(),type='function_definition'"->"[BLOCK]64,66|4,23|";
"with pytest.raises(RuntimeError):\n        await ws.pong(),type='with_statement'"[shape="box",fillcolor="white",style=filled];
"[BLOCK]64,66|4,23|"->"with pytest.raises(RuntimeError):\n        await ws.pong(),type='with_statement'";
"pytest.raises(RuntimeError),type='with_clause'"[shape="box",fillcolor="white",style=filled];
"with pytest.raises(RuntimeError):\n        await ws.pong(),type='with_statement'"->"pytest.raises(RuntimeError),type='with_clause'";
"await ws.pong(),type='block'"[shape="box",fillcolor="white",style=filled];
"with pytest.raises(RuntimeError):\n        await ws.pong(),type='with_statement'"->"await ws.pong(),type='block'";
"async def test_nonstarted_send_str() -> None:\n    ws = WebSocketResponse()\n    with pytest.raises(RuntimeError):\n        await ws.send_str('string'),type='function_definition'"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"async def test_nonstarted_send_str() -> None:\n    ws = WebSocketResponse()\n    with pytest.raises(RuntimeError):\n        await ws.send_str('string'),type='function_definition'";
"[BLOCK]70,72|4,35|"[shape="box",fillcolor="white",style=filled];
"async def test_nonstarted_send_str() -> None:\n    ws = WebSocketResponse()\n    with pytest.raises(RuntimeError):\n        await ws.send_str('string'),type='function_definition'"->"[BLOCK]70,72|4,35|";
"with pytest.raises(RuntimeError):\n        await ws.send_str('string'),type='with_statement'"[shape="box",fillcolor="white",style=filled];
"[BLOCK]70,72|4,35|"->"with pytest.raises(RuntimeError):\n        await ws.send_str('string'),type='with_statement'";
"pytest.raises(RuntimeError),type='with_clause'"[shape="box",fillcolor="white",style=filled];
"with pytest.raises(RuntimeError):\n        await ws.send_str('string'),type='with_statement'"->"pytest.raises(RuntimeError),type='with_clause'";
"await ws.send_str('string'),type='block'"[shape="box",fillcolor="white",style=filled];
"with pytest.raises(RuntimeError):\n        await ws.send_str('string'),type='with_statement'"->"await ws.send_str('string'),type='block'";
"async def test_nonstarted_send_bytes() -> None:\n    ws = WebSocketResponse()\n    with pytest.raises(RuntimeError):\n        await ws.send_bytes(b'bytes'),type='function_definition'"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"async def test_nonstarted_send_bytes() -> None:\n    ws = WebSocketResponse()\n    with pytest.raises(RuntimeError):\n        await ws.send_bytes(b'bytes'),type='function_definition'";
"[BLOCK]76,78|4,37|"[shape="box",fillcolor="white",style=filled];
"async def test_nonstarted_send_bytes() -> None:\n    ws = WebSocketResponse()\n    with pytest.raises(RuntimeError):\n        await ws.send_bytes(b'bytes'),type='function_definition'"->"[BLOCK]76,78|4,37|";
"with pytest.raises(RuntimeError):\n        await ws.send_bytes(b'bytes'),type='with_statement'"[shape="box",fillcolor="white",style=filled];
"[BLOCK]76,78|4,37|"->"with pytest.raises(RuntimeError):\n        await ws.send_bytes(b'bytes'),type='with_statement'";
"pytest.raises(RuntimeError),type='with_clause'"[shape="box",fillcolor="white",style=filled];
"with pytest.raises(RuntimeError):\n        await ws.send_bytes(b'bytes'),type='with_statement'"->"pytest.raises(RuntimeError),type='with_clause'";
"await ws.send_bytes(b'bytes'),type='block'"[shape="box",fillcolor="white",style=filled];
"with pytest.raises(RuntimeError):\n        await ws.send_bytes(b'bytes'),type='with_statement'"->"await ws.send_bytes(b'bytes'),type='block'";
"async def test_nonstarted_send_json() -> None:\n    ws = WebSocketResponse()\n    with pytest.raises(RuntimeError):\n        await ws.send_json({'type': 'json'}),type='function_definition'"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"async def test_nonstarted_send_json() -> None:\n    ws = WebSocketResponse()\n    with pytest.raises(RuntimeError):\n        await ws.send_json({'type': 'json'}),type='function_definition'";
"[BLOCK]82,84|4,44|"[shape="box",fillcolor="white",style=filled];
"async def test_nonstarted_send_json() -> None:\n    ws = WebSocketResponse()\n    with pytest.raises(RuntimeError):\n        await ws.send_json({'type': 'json'}),type='function_definition'"->"[BLOCK]82,84|4,44|";
"with pytest.raises(RuntimeError):\n        await ws.send_json({'type': 'json'}),type='with_statement'"[shape="box",fillcolor="white",style=filled];
"[BLOCK]82,84|4,44|"->"with pytest.raises(RuntimeError):\n        await ws.send_json({'type': 'json'}),type='with_statement'";
"pytest.raises(RuntimeError),type='with_clause'"[shape="box",fillcolor="white",style=filled];
"with pytest.raises(RuntimeError):\n        await ws.send_json({'type': 'json'}),type='with_statement'"->"pytest.raises(RuntimeError),type='with_clause'";
"await ws.send_json({'type': 'json'}),type='block'"[shape="box",fillcolor="white",style=filled];
"with pytest.raises(RuntimeError):\n        await ws.send_json({'type': 'json'}),type='with_statement'"->"await ws.send_json({'type': 'json'}),type='block'";
"async def test_nonstarted_close() -> None:\n    ws = WebSocketResponse()\n    with pytest.raises(RuntimeError):\n        await ws.close(),type='function_definition'"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"async def test_nonstarted_close() -> None:\n    ws = WebSocketResponse()\n    with pytest.raises(RuntimeError):\n        await ws.close(),type='function_definition'";
"[BLOCK]88,90|4,24|"[shape="box",fillcolor="white",style=filled];
"async def test_nonstarted_close() -> None:\n    ws = WebSocketResponse()\n    with pytest.raises(RuntimeError):\n        await ws.close(),type='function_definition'"->"[BLOCK]88,90|4,24|";
"with pytest.raises(RuntimeError):\n        await ws.close(),type='with_statement'"[shape="box",fillcolor="white",style=filled];
"[BLOCK]88,90|4,24|"->"with pytest.raises(RuntimeError):\n        await ws.close(),type='with_statement'";
"pytest.raises(RuntimeError),type='with_clause'"[shape="box",fillcolor="white",style=filled];
"with pytest.raises(RuntimeError):\n        await ws.close(),type='with_statement'"->"pytest.raises(RuntimeError),type='with_clause'";
"await ws.close(),type='block'"[shape="box",fillcolor="white",style=filled];
"with pytest.raises(RuntimeError):\n        await ws.close(),type='with_statement'"->"await ws.close(),type='block'";
"async def test_nonstarted_receive_str() -> None:\n    ws = WebSocketResponse()\n    with pytest.raises(RuntimeError):\n        await ws.receive_str(),type='function_definition'"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"async def test_nonstarted_receive_str() -> None:\n    ws = WebSocketResponse()\n    with pytest.raises(RuntimeError):\n        await ws.receive_str(),type='function_definition'";
"[BLOCK]94,96|4,30|"[shape="box",fillcolor="white",style=filled];
"async def test_nonstarted_receive_str() -> None:\n    ws = WebSocketResponse()\n    with pytest.raises(RuntimeError):\n        await ws.receive_str(),type='function_definition'"->"[BLOCK]94,96|4,30|";
"with pytest.raises(RuntimeError):\n        await ws.receive_str(),type='with_statement'"[shape="box",fillcolor="white",style=filled];
"[BLOCK]94,96|4,30|"->"with pytest.raises(RuntimeError):\n        await ws.receive_str(),type='with_statement'";
"pytest.raises(RuntimeError),type='with_clause'"[shape="box",fillcolor="white",style=filled];
"with pytest.raises(RuntimeError):\n        await ws.receive_str(),type='with_statement'"->"pytest.raises(RuntimeError),type='with_clause'";
"await ws.receive_str(),type='block'"[shape="box",fillcolor="white",style=filled];
"with pytest.raises(RuntimeError):\n        await ws.receive_str(),type='with_statement'"->"await ws.receive_str(),type='block'";
"async def test_nonstarted_receive_bytes() -> None:\n    ws = WebSocketResponse()\n    with pytest.raises(RuntimeError):\n        await ws.receive_bytes(),type='function_definition'"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"async def test_nonstarted_receive_bytes() -> None:\n    ws = WebSocketResponse()\n    with pytest.raises(RuntimeError):\n        await ws.receive_bytes(),type='function_definition'";
"[BLOCK]100,102|4,32|"[shape="box",fillcolor="white",style=filled];
"async def test_nonstarted_receive_bytes() -> None:\n    ws = WebSocketResponse()\n    with pytest.raises(RuntimeError):\n        await ws.receive_bytes(),type='function_definition'"->"[BLOCK]100,102|4,32|";
"with pytest.raises(RuntimeError):\n        await ws.receive_bytes(),type='with_statement'"[shape="box",fillcolor="white",style=filled];
"[BLOCK]100,102|4,32|"->"with pytest.raises(RuntimeError):\n        await ws.receive_bytes(),type='with_statement'";
"pytest.raises(RuntimeError),type='with_clause'"[shape="box",fillcolor="white",style=filled];
"with pytest.raises(RuntimeError):\n        await ws.receive_bytes(),type='with_statement'"->"pytest.raises(RuntimeError),type='with_clause'";
"await ws.receive_bytes(),type='block'"[shape="box",fillcolor="white",style=filled];
"with pytest.raises(RuntimeError):\n        await ws.receive_bytes(),type='with_statement'"->"await ws.receive_bytes(),type='block'";
"async def test_nonstarted_receive_json() -> None:\n    ws = WebSocketResponse()\n    with pytest.raises(RuntimeError):\n        await ws.receive_json(),type='function_definition'"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"async def test_nonstarted_receive_json() -> None:\n    ws = WebSocketResponse()\n    with pytest.raises(RuntimeError):\n        await ws.receive_json(),type='function_definition'";
"[BLOCK]106,108|4,31|"[shape="box",fillcolor="white",style=filled];
"async def test_nonstarted_receive_json() -> None:\n    ws = WebSocketResponse()\n    with pytest.raises(RuntimeError):\n        await ws.receive_json(),type='function_definition'"->"[BLOCK]106,108|4,31|";
"with pytest.raises(RuntimeError):\n        await ws.receive_json(),type='with_statement'"[shape="box",fillcolor="white",style=filled];
"[BLOCK]106,108|4,31|"->"with pytest.raises(RuntimeError):\n        await ws.receive_json(),type='with_statement'";
"pytest.raises(RuntimeError),type='with_clause'"[shape="box",fillcolor="white",style=filled];
"with pytest.raises(RuntimeError):\n        await ws.receive_json(),type='with_statement'"->"pytest.raises(RuntimeError),type='with_clause'";
"await ws.receive_json(),type='block'"[shape="box",fillcolor="white",style=filled];
"with pytest.raises(RuntimeError):\n        await ws.receive_json(),type='with_statement'"->"await ws.receive_json(),type='block'";
"async def test_send_str_nonstring(make_request: Any) -> None:\n    req = make_request('GET', '/')\n    ws = WebSocketResponse()\n    await ws.prepare(req)\n    with pytest.raises(TypeError):\n        await ws.send_str(b'bytes'),type='function_definition'"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"async def test_send_str_nonstring(make_request: Any) -> None:\n    req = make_request('GET', '/')\n    ws = WebSocketResponse()\n    await ws.prepare(req)\n    with pytest.raises(TypeError):\n        await ws.send_str(b'bytes'),type='function_definition'";
"[BLOCK]112,116|4,35|"[shape="box",fillcolor="white",style=filled];
"async def test_send_str_nonstring(make_request: Any) -> None:\n    req = make_request('GET', '/')\n    ws = WebSocketResponse()\n    await ws.prepare(req)\n    with pytest.raises(TypeError):\n        await ws.send_str(b'bytes'),type='function_definition'"->"[BLOCK]112,116|4,35|";
"with pytest.raises(TypeError):\n        await ws.send_str(b'bytes'),type='with_statement'"[shape="box",fillcolor="white",style=filled];
"[BLOCK]112,116|4,35|"->"with pytest.raises(TypeError):\n        await ws.send_str(b'bytes'),type='with_statement'";
"pytest.raises(TypeError),type='with_clause'"[shape="box",fillcolor="white",style=filled];
"with pytest.raises(TypeError):\n        await ws.send_str(b'bytes'),type='with_statement'"->"pytest.raises(TypeError),type='with_clause'";
"await ws.send_str(b'bytes'),type='block'"[shape="box",fillcolor="white",style=filled];
"with pytest.raises(TypeError):\n        await ws.send_str(b'bytes'),type='with_statement'"->"await ws.send_str(b'bytes'),type='block'";
"async def test_send_bytes_nonbytes(make_request: Any) -> None:\n    req = make_request('GET', '/')\n    ws = WebSocketResponse()\n    await ws.prepare(req)\n    with pytest.raises(TypeError):\n        await ws.send_bytes('string'),type='function_definition'"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"async def test_send_bytes_nonbytes(make_request: Any) -> None:\n    req = make_request('GET', '/')\n    ws = WebSocketResponse()\n    await ws.prepare(req)\n    with pytest.raises(TypeError):\n        await ws.send_bytes('string'),type='function_definition'";
"[BLOCK]120,124|4,37|"[shape="box",fillcolor="white",style=filled];
"async def test_send_bytes_nonbytes(make_request: Any) -> None:\n    req = make_request('GET', '/')\n    ws = WebSocketResponse()\n    await ws.prepare(req)\n    with pytest.raises(TypeError):\n        await ws.send_bytes('string'),type='function_definition'"->"[BLOCK]120,124|4,37|";
"with pytest.raises(TypeError):\n        await ws.send_bytes('string'),type='with_statement'"[shape="box",fillcolor="white",style=filled];
"[BLOCK]120,124|4,37|"->"with pytest.raises(TypeError):\n        await ws.send_bytes('string'),type='with_statement'";
"pytest.raises(TypeError),type='with_clause'"[shape="box",fillcolor="white",style=filled];
"with pytest.raises(TypeError):\n        await ws.send_bytes('string'),type='with_statement'"->"pytest.raises(TypeError),type='with_clause'";
"await ws.send_bytes('string'),type='block'"[shape="box",fillcolor="white",style=filled];
"with pytest.raises(TypeError):\n        await ws.send_bytes('string'),type='with_statement'"->"await ws.send_bytes('string'),type='block'";
"async def test_send_json_nonjson(make_request: Any) -> None:\n    req = make_request('GET', '/')\n    ws = WebSocketResponse()\n    await ws.prepare(req)\n    with pytest.raises(TypeError):\n        await ws.send_json(set()),type='function_definition'"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"async def test_send_json_nonjson(make_request: Any) -> None:\n    req = make_request('GET', '/')\n    ws = WebSocketResponse()\n    await ws.prepare(req)\n    with pytest.raises(TypeError):\n        await ws.send_json(set()),type='function_definition'";
"[BLOCK]128,132|4,33|"[shape="box",fillcolor="white",style=filled];
"async def test_send_json_nonjson(make_request: Any) -> None:\n    req = make_request('GET', '/')\n    ws = WebSocketResponse()\n    await ws.prepare(req)\n    with pytest.raises(TypeError):\n        await ws.send_json(set()),type='function_definition'"->"[BLOCK]128,132|4,33|";
"with pytest.raises(TypeError):\n        await ws.send_json(set()),type='with_statement'"[shape="box",fillcolor="white",style=filled];
"[BLOCK]128,132|4,33|"->"with pytest.raises(TypeError):\n        await ws.send_json(set()),type='with_statement'";
"pytest.raises(TypeError),type='with_clause'"[shape="box",fillcolor="white",style=filled];
"with pytest.raises(TypeError):\n        await ws.send_json(set()),type='with_statement'"->"pytest.raises(TypeError),type='with_clause'";
"await ws.send_json(set()),type='block'"[shape="box",fillcolor="white",style=filled];
"with pytest.raises(TypeError):\n        await ws.send_json(set()),type='with_statement'"->"await ws.send_json(set()),type='block'";
"async def test_write_non_prepared() -> None:\n    ws = WebSocketResponse()\n    with pytest.raises(RuntimeError):\n        await ws.write(b'data'),type='function_definition'"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"async def test_write_non_prepared() -> None:\n    ws = WebSocketResponse()\n    with pytest.raises(RuntimeError):\n        await ws.write(b'data'),type='function_definition'";
"[BLOCK]136,138|4,31|"[shape="box",fillcolor="white",style=filled];
"async def test_write_non_prepared() -> None:\n    ws = WebSocketResponse()\n    with pytest.raises(RuntimeError):\n        await ws.write(b'data'),type='function_definition'"->"[BLOCK]136,138|4,31|";
"with pytest.raises(RuntimeError):\n        await ws.write(b'data'),type='with_statement'"[shape="box",fillcolor="white",style=filled];
"[BLOCK]136,138|4,31|"->"with pytest.raises(RuntimeError):\n        await ws.write(b'data'),type='with_statement'";
"pytest.raises(RuntimeError),type='with_clause'"[shape="box",fillcolor="white",style=filled];
"with pytest.raises(RuntimeError):\n        await ws.write(b'data'),type='with_statement'"->"pytest.raises(RuntimeError),type='with_clause'";
"await ws.write(b'data'),type='block'"[shape="box",fillcolor="white",style=filled];
"with pytest.raises(RuntimeError):\n        await ws.write(b'data'),type='with_statement'"->"await ws.write(b'data'),type='block'";
"def test_websocket_ready() -> None:\n    websocket_ready = WebSocketReady(True, 'chat')\n    assert websocket_ready.ok is True\n    assert websocket_ready.protocol == 'chat',type='function_definition'"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_websocket_ready() -> None:\n    websocket_ready = WebSocketReady(True, 'chat')\n    assert websocket_ready.ok is True\n    assert websocket_ready.protocol == 'chat',type='function_definition'";
"[BLOCK]142,144|4,45|"[shape="box",fillcolor="white",style=filled];
"def test_websocket_ready() -> None:\n    websocket_ready = WebSocketReady(True, 'chat')\n    assert websocket_ready.ok is True\n    assert websocket_ready.protocol == 'chat',type='function_definition'"->"[BLOCK]142,144|4,45|";
"assert websocket_ready.ok is True,type='assert_statement'"[shape="box",fillcolor="white",style=filled];
"[BLOCK]142,144|4,45|"->"assert websocket_ready.ok is True,type='assert_statement'";
"websocket_ready.ok is True,type='comparison_operator'"[shape="box",fillcolor="white",style=filled];
"assert websocket_ready.ok is True,type='assert_statement'"->"websocket_ready.ok is True,type='comparison_operator'";
"websocket_ready.ok,type='attribute'"[shape="box",fillcolor="white",style=filled];
"websocket_ready.ok is True,type='comparison_operator'"->"websocket_ready.ok,type='attribute'";
"websocket_ready,type='identifier'"[shape="box",fillcolor="white",style=filled];
"websocket_ready.ok,type='attribute'"->"websocket_ready,type='identifier'";
"ok,type='identifier'"[shape="box",fillcolor="white",style=filled];
"websocket_ready.ok,type='attribute'"->"ok,type='identifier'";
"assert websocket_ready.protocol == 'chat',type='assert_statement'"[shape="box",fillcolor="white",style=filled];
"[BLOCK]142,144|4,45|"->"assert websocket_ready.protocol == 'chat',type='assert_statement'";
"websocket_ready.protocol == 'chat',type='comparison_operator'"[shape="box",fillcolor="white",style=filled];
"assert websocket_ready.protocol == 'chat',type='assert_statement'"->"websocket_ready.protocol == 'chat',type='comparison_operator'";
"websocket_ready.protocol,type='attribute'"[shape="box",fillcolor="white",style=filled];
"websocket_ready.protocol == 'chat',type='comparison_operator'"->"websocket_ready.protocol,type='attribute'";
"websocket_ready,type='identifier'"[shape="box",fillcolor="white",style=filled];
"websocket_ready.protocol,type='attribute'"->"websocket_ready,type='identifier'";
"protocol,type='identifier'"[shape="box",fillcolor="white",style=filled];
"websocket_ready.protocol,type='attribute'"->"protocol,type='identifier'";
"==,type='=='"[shape="box",fillcolor="white",style=filled];
"websocket_ready.protocol == 'chat',type='comparison_operator'"->"==,type='=='";
"def test_websocket_not_ready() -> None:\n    websocket_ready = WebSocketReady(False, None)\n    assert websocket_ready.ok is False\n    assert websocket_ready.protocol is None,type='function_definition'"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_websocket_not_ready() -> None:\n    websocket_ready = WebSocketReady(False, None)\n    assert websocket_ready.ok is False\n    assert websocket_ready.protocol is None,type='function_definition'";
"[BLOCK]148,150|4,43|"[shape="box",fillcolor="white",style=filled];
"def test_websocket_not_ready() -> None:\n    websocket_ready = WebSocketReady(False, None)\n    assert websocket_ready.ok is False\n    assert websocket_ready.protocol is None,type='function_definition'"->"[BLOCK]148,150|4,43|";
"assert websocket_ready.ok is False,type='assert_statement'"[shape="box",fillcolor="white",style=filled];
"[BLOCK]148,150|4,43|"->"assert websocket_ready.ok is False,type='assert_statement'";
"websocket_ready.ok is False,type='comparison_operator'"[shape="box",fillcolor="white",style=filled];
"assert websocket_ready.ok is False,type='assert_statement'"->"websocket_ready.ok is False,type='comparison_operator'";
"websocket_ready.ok,type='attribute'"[shape="box",fillcolor="white",style=filled];
"websocket_ready.ok is False,type='comparison_operator'"->"websocket_ready.ok,type='attribute'";
"websocket_ready,type='identifier'"[shape="box",fillcolor="white",style=filled];
"websocket_ready.ok,type='attribute'"->"websocket_ready,type='identifier'";
"ok,type='identifier'"[shape="box",fillcolor="white",style=filled];
"websocket_ready.ok,type='attribute'"->"ok,type='identifier'";
"assert websocket_ready.protocol is None,type='assert_statement'"[shape="box",fillcolor="white",style=filled];
"[BLOCK]148,150|4,43|"->"assert websocket_ready.protocol is None,type='assert_statement'";
"websocket_ready.protocol is None,type='comparison_operator'"[shape="box",fillcolor="white",style=filled];
"assert websocket_ready.protocol is None,type='assert_statement'"->"websocket_ready.protocol is None,type='comparison_operator'";
"websocket_ready.protocol,type='attribute'"[shape="box",fillcolor="white",style=filled];
"websocket_ready.protocol is None,type='comparison_operator'"->"websocket_ready.protocol,type='attribute'";
"websocket_ready,type='identifier'"[shape="box",fillcolor="white",style=filled];
"websocket_ready.protocol,type='attribute'"->"websocket_ready,type='identifier'";
"protocol,type='identifier'"[shape="box",fillcolor="white",style=filled];
"websocket_ready.protocol,type='attribute'"->"protocol,type='identifier'";
"def test_websocket_ready_unknown_protocol() -> None:\n    websocket_ready = WebSocketReady(True, None)\n    assert websocket_ready.ok is True\n    assert websocket_ready.protocol is None,type='function_definition'"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_websocket_ready_unknown_protocol() -> None:\n    websocket_ready = WebSocketReady(True, None)\n    assert websocket_ready.ok is True\n    assert websocket_ready.protocol is None,type='function_definition'";
"[BLOCK]154,156|4,43|"[shape="box",fillcolor="white",style=filled];
"def test_websocket_ready_unknown_protocol() -> None:\n    websocket_ready = WebSocketReady(True, None)\n    assert websocket_ready.ok is True\n    assert websocket_ready.protocol is None,type='function_definition'"->"[BLOCK]154,156|4,43|";
"assert websocket_ready.ok is True,type='assert_statement'"[shape="box",fillcolor="white",style=filled];
"[BLOCK]154,156|4,43|"->"assert websocket_ready.ok is True,type='assert_statement'";
"websocket_ready.ok is True,type='comparison_operator'"[shape="box",fillcolor="white",style=filled];
"assert websocket_ready.ok is True,type='assert_statement'"->"websocket_ready.ok is True,type='comparison_operator'";
"websocket_ready.ok,type='attribute'"[shape="box",fillcolor="white",style=filled];
"websocket_ready.ok is True,type='comparison_operator'"->"websocket_ready.ok,type='attribute'";
"websocket_ready,type='identifier'"[shape="box",fillcolor="white",style=filled];
"websocket_ready.ok,type='attribute'"->"websocket_ready,type='identifier'";
"ok,type='identifier'"[shape="box",fillcolor="white",style=filled];
"websocket_ready.ok,type='attribute'"->"ok,type='identifier'";
"assert websocket_ready.protocol is None,type='assert_statement'"[shape="box",fillcolor="white",style=filled];
"[BLOCK]154,156|4,43|"->"assert websocket_ready.protocol is None,type='assert_statement'";
"websocket_ready.protocol is None,type='comparison_operator'"[shape="box",fillcolor="white",style=filled];
"assert websocket_ready.protocol is None,type='assert_statement'"->"websocket_ready.protocol is None,type='comparison_operator'";
"websocket_ready.protocol,type='attribute'"[shape="box",fillcolor="white",style=filled];
"websocket_ready.protocol is None,type='comparison_operator'"->"websocket_ready.protocol,type='attribute'";
"websocket_ready,type='identifier'"[shape="box",fillcolor="white",style=filled];
"websocket_ready.protocol,type='attribute'"->"websocket_ready,type='identifier'";
"protocol,type='identifier'"[shape="box",fillcolor="white",style=filled];
"websocket_ready.protocol,type='attribute'"->"protocol,type='identifier'";
"def test_bool_websocket_ready() -> None:\n    websocket_ready = WebSocketReady(True, None)\n    assert bool(websocket_ready) is True,type='function_definition'"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_bool_websocket_ready() -> None:\n    websocket_ready = WebSocketReady(True, None)\n    assert bool(websocket_ready) is True,type='function_definition'";
"[BLOCK]160,161|4,40|"[shape="box",fillcolor="white",style=filled];
"def test_bool_websocket_ready() -> None:\n    websocket_ready = WebSocketReady(True, None)\n    assert bool(websocket_ready) is True,type='function_definition'"->"[BLOCK]160,161|4,40|";
"assert bool(websocket_ready) is True,type='assert_statement'"[shape="box",fillcolor="white",style=filled];
"[BLOCK]160,161|4,40|"->"assert bool(websocket_ready) is True,type='assert_statement'";
"bool(websocket_ready) is True,type='comparison_operator'"[shape="box",fillcolor="white",style=filled];
"assert bool(websocket_ready) is True,type='assert_statement'"->"bool(websocket_ready) is True,type='comparison_operator'";
"bool(websocket_ready),type='call'"[shape="box",fillcolor="white",style=filled];
"bool(websocket_ready) is True,type='comparison_operator'"->"bool(websocket_ready),type='call'";
"bool,type='identifier'"[shape="box",fillcolor="white",style=filled];
"bool(websocket_ready),type='call'"->"bool,type='identifier'";
"(websocket_ready),type='argument_list'"[shape="box",fillcolor="white",style=filled];
"bool(websocket_ready),type='call'"->"(websocket_ready),type='argument_list'";
"websocket_ready,type='identifier'"[shape="box",fillcolor="white",style=filled];
"(websocket_ready),type='argument_list'"->"websocket_ready,type='identifier'";
"def test_bool_websocket_not_ready() -> None:\n    websocket_ready = WebSocketReady(False, None)\n    assert bool(websocket_ready) is False,type='function_definition'"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_bool_websocket_not_ready() -> None:\n    websocket_ready = WebSocketReady(False, None)\n    assert bool(websocket_ready) is False,type='function_definition'";
"[BLOCK]165,166|4,41|"[shape="box",fillcolor="white",style=filled];
"def test_bool_websocket_not_ready() -> None:\n    websocket_ready = WebSocketReady(False, None)\n    assert bool(websocket_ready) is False,type='function_definition'"->"[BLOCK]165,166|4,41|";
"assert bool(websocket_ready) is False,type='assert_statement'"[shape="box",fillcolor="white",style=filled];
"[BLOCK]165,166|4,41|"->"assert bool(websocket_ready) is False,type='assert_statement'";
"bool(websocket_ready) is False,type='comparison_operator'"[shape="box",fillcolor="white",style=filled];
"assert bool(websocket_ready) is False,type='assert_statement'"->"bool(websocket_ready) is False,type='comparison_operator'";
"bool(websocket_ready),type='call'"[shape="box",fillcolor="white",style=filled];
"bool(websocket_ready) is False,type='comparison_operator'"->"bool(websocket_ready),type='call'";
"bool,type='identifier'"[shape="box",fillcolor="white",style=filled];
"bool(websocket_ready),type='call'"->"bool,type='identifier'";
"(websocket_ready),type='argument_list'"[shape="box",fillcolor="white",style=filled];
"bool(websocket_ready),type='call'"->"(websocket_ready),type='argument_list'";
"websocket_ready,type='identifier'"[shape="box",fillcolor="white",style=filled];
"(websocket_ready),type='argument_list'"->"websocket_ready,type='identifier'";
"def test_can_prepare_ok(make_request: Any) -> None:\n    req = make_request('GET', '/', protocols=True)\n    ws = WebSocketResponse(protocols=('chat',))\n    assert WebSocketReady(True, 'chat') == ws.can_prepare(req),type='function_definition'"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_can_prepare_ok(make_request: Any) -> None:\n    req = make_request('GET', '/', protocols=True)\n    ws = WebSocketResponse(protocols=('chat',))\n    assert WebSocketReady(True, 'chat') == ws.can_prepare(req),type='function_definition'";
"[BLOCK]170,172|4,62|"[shape="box",fillcolor="white",style=filled];
"def test_can_prepare_ok(make_request: Any) -> None:\n    req = make_request('GET', '/', protocols=True)\n    ws = WebSocketResponse(protocols=('chat',))\n    assert WebSocketReady(True, 'chat') == ws.can_prepare(req),type='function_definition'"->"[BLOCK]170,172|4,62|";
"assert WebSocketReady(True, 'chat') == ws.can_prepare(req),type='assert_statement'"[shape="box",fillcolor="white",style=filled];
"[BLOCK]170,172|4,62|"->"assert WebSocketReady(True, 'chat') == ws.can_prepare(req),type='assert_statement'";
"WebSocketReady(True, 'chat') == ws.can_prepare(req),type='comparison_operator'"[shape="box",fillcolor="white",style=filled];
"assert WebSocketReady(True, 'chat') == ws.can_prepare(req),type='assert_statement'"->"WebSocketReady(True, 'chat') == ws.can_prepare(req),type='comparison_operator'";
"WebSocketReady(True, 'chat'),type='call'"[shape="box",fillcolor="white",style=filled];
"WebSocketReady(True, 'chat') == ws.can_prepare(req),type='comparison_operator'"->"WebSocketReady(True, 'chat'),type='call'";
"WebSocketReady,type='identifier'"[shape="box",fillcolor="white",style=filled];
"WebSocketReady(True, 'chat'),type='call'"->"WebSocketReady,type='identifier'";
"(True, 'chat'),type='argument_list'"[shape="box",fillcolor="white",style=filled];
"WebSocketReady(True, 'chat'),type='call'"->"(True, 'chat'),type='argument_list'";
"==,type='=='"[shape="box",fillcolor="white",style=filled];
"WebSocketReady(True, 'chat') == ws.can_prepare(req),type='comparison_operator'"->"==,type='=='";
"ws.can_prepare(req),type='call'"[shape="box",fillcolor="white",style=filled];
"WebSocketReady(True, 'chat') == ws.can_prepare(req),type='comparison_operator'"->"ws.can_prepare(req),type='call'";
"ws.can_prepare,type='attribute'"[shape="box",fillcolor="white",style=filled];
"ws.can_prepare(req),type='call'"->"ws.can_prepare,type='attribute'";
"ws,type='identifier'"[shape="box",fillcolor="white",style=filled];
"ws.can_prepare,type='attribute'"->"ws,type='identifier'";
"can_prepare,type='identifier'"[shape="box",fillcolor="white",style=filled];
"ws.can_prepare,type='attribute'"->"can_prepare,type='identifier'";
"(req),type='argument_list'"[shape="box",fillcolor="white",style=filled];
"ws.can_prepare(req),type='call'"->"(req),type='argument_list'";
"req,type='identifier'"[shape="box",fillcolor="white",style=filled];
"(req),type='argument_list'"->"req,type='identifier'";
"def test_can_prepare_unknown_protocol(make_request: Any) -> None:\n    req = make_request('GET', '/')\n    ws = WebSocketResponse()\n    assert WebSocketReady(True, None) == ws.can_prepare(req),type='function_definition'"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_can_prepare_unknown_protocol(make_request: Any) -> None:\n    req = make_request('GET', '/')\n    ws = WebSocketResponse()\n    assert WebSocketReady(True, None) == ws.can_prepare(req),type='function_definition'";
"[BLOCK]176,178|4,60|"[shape="box",fillcolor="white",style=filled];
"def test_can_prepare_unknown_protocol(make_request: Any) -> None:\n    req = make_request('GET', '/')\n    ws = WebSocketResponse()\n    assert WebSocketReady(True, None) == ws.can_prepare(req),type='function_definition'"->"[BLOCK]176,178|4,60|";
"assert WebSocketReady(True, None) == ws.can_prepare(req),type='assert_statement'"[shape="box",fillcolor="white",style=filled];
"[BLOCK]176,178|4,60|"->"assert WebSocketReady(True, None) == ws.can_prepare(req),type='assert_statement'";
"WebSocketReady(True, None) == ws.can_prepare(req),type='comparison_operator'"[shape="box",fillcolor="white",style=filled];
"assert WebSocketReady(True, None) == ws.can_prepare(req),type='assert_statement'"->"WebSocketReady(True, None) == ws.can_prepare(req),type='comparison_operator'";
"WebSocketReady(True, None),type='call'"[shape="box",fillcolor="white",style=filled];
"WebSocketReady(True, None) == ws.can_prepare(req),type='comparison_operator'"->"WebSocketReady(True, None),type='call'";
"WebSocketReady,type='identifier'"[shape="box",fillcolor="white",style=filled];
"WebSocketReady(True, None),type='call'"->"WebSocketReady,type='identifier'";
"(True, None),type='argument_list'"[shape="box",fillcolor="white",style=filled];
"WebSocketReady(True, None),type='call'"->"(True, None),type='argument_list'";
"==,type='=='"[shape="box",fillcolor="white",style=filled];
"WebSocketReady(True, None) == ws.can_prepare(req),type='comparison_operator'"->"==,type='=='";
"ws.can_prepare(req),type='call'"[shape="box",fillcolor="white",style=filled];
"WebSocketReady(True, None) == ws.can_prepare(req),type='comparison_operator'"->"ws.can_prepare(req),type='call'";
"ws.can_prepare,type='attribute'"[shape="box",fillcolor="white",style=filled];
"ws.can_prepare(req),type='call'"->"ws.can_prepare,type='attribute'";
"ws,type='identifier'"[shape="box",fillcolor="white",style=filled];
"ws.can_prepare,type='attribute'"->"ws,type='identifier'";
"can_prepare,type='identifier'"[shape="box",fillcolor="white",style=filled];
"ws.can_prepare,type='attribute'"->"can_prepare,type='identifier'";
"(req),type='argument_list'"[shape="box",fillcolor="white",style=filled];
"ws.can_prepare(req),type='call'"->"(req),type='argument_list'";
"req,type='identifier'"[shape="box",fillcolor="white",style=filled];
"(req),type='argument_list'"->"req,type='identifier'";
"def test_can_prepare_without_upgrade(make_request: Any) -> None:\n    req = make_request('GET', '/', headers=CIMultiDict({}))\n    ws = WebSocketResponse()\n    assert WebSocketReady(False, None) == ws.can_prepare(req),type='function_definition'"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_can_prepare_without_upgrade(make_request: Any) -> None:\n    req = make_request('GET', '/', headers=CIMultiDict({}))\n    ws = WebSocketResponse()\n    assert WebSocketReady(False, None) == ws.can_prepare(req),type='function_definition'";
"[BLOCK]182,184|4,61|"[shape="box",fillcolor="white",style=filled];
"def test_can_prepare_without_upgrade(make_request: Any) -> None:\n    req = make_request('GET', '/', headers=CIMultiDict({}))\n    ws = WebSocketResponse()\n    assert WebSocketReady(False, None) == ws.can_prepare(req),type='function_definition'"->"[BLOCK]182,184|4,61|";
"assert WebSocketReady(False, None) == ws.can_prepare(req),type='assert_statement'"[shape="box",fillcolor="white",style=filled];
"[BLOCK]182,184|4,61|"->"assert WebSocketReady(False, None) == ws.can_prepare(req),type='assert_statement'";
"WebSocketReady(False, None) == ws.can_prepare(req),type='comparison_operator'"[shape="box",fillcolor="white",style=filled];
"assert WebSocketReady(False, None) == ws.can_prepare(req),type='assert_statement'"->"WebSocketReady(False, None) == ws.can_prepare(req),type='comparison_operator'";
"WebSocketReady(False, None),type='call'"[shape="box",fillcolor="white",style=filled];
"WebSocketReady(False, None) == ws.can_prepare(req),type='comparison_operator'"->"WebSocketReady(False, None),type='call'";
"WebSocketReady,type='identifier'"[shape="box",fillcolor="white",style=filled];
"WebSocketReady(False, None),type='call'"->"WebSocketReady,type='identifier'";
"(False, None),type='argument_list'"[shape="box",fillcolor="white",style=filled];
"WebSocketReady(False, None),type='call'"->"(False, None),type='argument_list'";
"==,type='=='"[shape="box",fillcolor="white",style=filled];
"WebSocketReady(False, None) == ws.can_prepare(req),type='comparison_operator'"->"==,type='=='";
"ws.can_prepare(req),type='call'"[shape="box",fillcolor="white",style=filled];
"WebSocketReady(False, None) == ws.can_prepare(req),type='comparison_operator'"->"ws.can_prepare(req),type='call'";
"ws.can_prepare,type='attribute'"[shape="box",fillcolor="white",style=filled];
"ws.can_prepare(req),type='call'"->"ws.can_prepare,type='attribute'";
"ws,type='identifier'"[shape="box",fillcolor="white",style=filled];
"ws.can_prepare,type='attribute'"->"ws,type='identifier'";
"can_prepare,type='identifier'"[shape="box",fillcolor="white",style=filled];
"ws.can_prepare,type='attribute'"->"can_prepare,type='identifier'";
"(req),type='argument_list'"[shape="box",fillcolor="white",style=filled];
"ws.can_prepare(req),type='call'"->"(req),type='argument_list'";
"req,type='identifier'"[shape="box",fillcolor="white",style=filled];
"(req),type='argument_list'"->"req,type='identifier'";
"async def test_can_prepare_started(make_request: Any) -> None:\n    req = make_request('GET', '/')\n    ws = WebSocketResponse()\n    await ws.prepare(req)\n    with pytest.raises(RuntimeError) as ctx:\n        ws.can_prepare(req)\n\n    assert 'Already started' in str(ctx.value),type='function_definition'"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"async def test_can_prepare_started(make_request: Any) -> None:\n    req = make_request('GET', '/')\n    ws = WebSocketResponse()\n    await ws.prepare(req)\n    with pytest.raises(RuntimeError) as ctx:\n        ws.can_prepare(req)\n\n    assert 'Already started' in str(ctx.value),type='function_definition'";
"[BLOCK]188,194|4,46|"[shape="box",fillcolor="white",style=filled];
"async def test_can_prepare_started(make_request: Any) -> None:\n    req = make_request('GET', '/')\n    ws = WebSocketResponse()\n    await ws.prepare(req)\n    with pytest.raises(RuntimeError) as ctx:\n        ws.can_prepare(req)\n\n    assert 'Already started' in str(ctx.value),type='function_definition'"->"[BLOCK]188,194|4,46|";
"with pytest.raises(RuntimeError) as ctx:\n        ws.can_prepare(req),type='with_statement'"[shape="box",fillcolor="white",style=filled];
"[BLOCK]188,194|4,46|"->"with pytest.raises(RuntimeError) as ctx:\n        ws.can_prepare(req),type='with_statement'";
"pytest.raises(RuntimeError) as ctx,type='with_clause'"[shape="box",fillcolor="white",style=filled];
"with pytest.raises(RuntimeError) as ctx:\n        ws.can_prepare(req),type='with_statement'"->"pytest.raises(RuntimeError) as ctx,type='with_clause'";
"ws.can_prepare(req),type='block'"[shape="box",fillcolor="white",style=filled];
"with pytest.raises(RuntimeError) as ctx:\n        ws.can_prepare(req),type='with_statement'"->"ws.can_prepare(req),type='block'";
"assert 'Already started' in str(ctx.value),type='assert_statement'"[shape="box",fillcolor="white",style=filled];
"[BLOCK]188,194|4,46|"->"assert 'Already started' in str(ctx.value),type='assert_statement'";
"'Already started' in str(ctx.value),type='comparison_operator'"[shape="box",fillcolor="white",style=filled];
"assert 'Already started' in str(ctx.value),type='assert_statement'"->"'Already started' in str(ctx.value),type='comparison_operator'";
"str(ctx.value),type='call'"[shape="box",fillcolor="white",style=filled];
"'Already started' in str(ctx.value),type='comparison_operator'"->"str(ctx.value),type='call'";
"str,type='identifier'"[shape="box",fillcolor="white",style=filled];
"str(ctx.value),type='call'"->"str,type='identifier'";
"(ctx.value),type='argument_list'"[shape="box",fillcolor="white",style=filled];
"str(ctx.value),type='call'"->"(ctx.value),type='argument_list'";
"ctx.value,type='attribute'"[shape="box",fillcolor="white",style=filled];
"(ctx.value),type='argument_list'"->"ctx.value,type='attribute'";
"ctx,type='identifier'"[shape="box",fillcolor="white",style=filled];
"ctx.value,type='attribute'"->"ctx,type='identifier'";
"value,type='identifier'"[shape="box",fillcolor="white",style=filled];
"ctx.value,type='attribute'"->"value,type='identifier'";
"def test_closed_after_ctor() -> None:\n    ws = WebSocketResponse()\n    assert not ws.closed\n    assert ws.close_code is None,type='function_definition'"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_closed_after_ctor() -> None:\n    ws = WebSocketResponse()\n    assert not ws.closed\n    assert ws.close_code is None,type='function_definition'";
"[BLOCK]198,200|4,32|"[shape="box",fillcolor="white",style=filled];
"def test_closed_after_ctor() -> None:\n    ws = WebSocketResponse()\n    assert not ws.closed\n    assert ws.close_code is None,type='function_definition'"->"[BLOCK]198,200|4,32|";
"assert not ws.closed,type='assert_statement'"[shape="box",fillcolor="white",style=filled];
"[BLOCK]198,200|4,32|"->"assert not ws.closed,type='assert_statement'";
"not ws.closed,type='not_operator'"[shape="box",fillcolor="white",style=filled];
"assert not ws.closed,type='assert_statement'"->"not ws.closed,type='not_operator'";
"not,type='not'"[shape="box",fillcolor="white",style=filled];
"not ws.closed,type='not_operator'"->"not,type='not'";
"ws.closed,type='attribute'"[shape="box",fillcolor="white",style=filled];
"not ws.closed,type='not_operator'"->"ws.closed,type='attribute'";
"ws,type='identifier'"[shape="box",fillcolor="white",style=filled];
"ws.closed,type='attribute'"->"ws,type='identifier'";
"closed,type='identifier'"[shape="box",fillcolor="white",style=filled];
"ws.closed,type='attribute'"->"closed,type='identifier'";
"assert ws.close_code is None,type='assert_statement'"[shape="box",fillcolor="white",style=filled];
"[BLOCK]198,200|4,32|"->"assert ws.close_code is None,type='assert_statement'";
"ws.close_code is None,type='comparison_operator'"[shape="box",fillcolor="white",style=filled];
"assert ws.close_code is None,type='assert_statement'"->"ws.close_code is None,type='comparison_operator'";
"ws.close_code,type='attribute'"[shape="box",fillcolor="white",style=filled];
"ws.close_code is None,type='comparison_operator'"->"ws.close_code,type='attribute'";
"ws,type='identifier'"[shape="box",fillcolor="white",style=filled];
"ws.close_code,type='attribute'"->"ws,type='identifier'";
"close_code,type='identifier'"[shape="box",fillcolor="white",style=filled];
"ws.close_code,type='attribute'"->"close_code,type='identifier'";
"async def test_send_str_closed(make_request: Any) -> None:\n    req = make_request('GET', '/')\n    ws = WebSocketResponse()\n    await ws.prepare(req)\n    ws._reader.feed_data(WS_CLOSED_MESSAGE, 0)\n    await ws.close()\n\n    with pytest.raises(ConnectionError):\n        await ws.send_str('string'),type='function_definition'"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"async def test_send_str_closed(make_request: Any) -> None:\n    req = make_request('GET', '/')\n    ws = WebSocketResponse()\n    await ws.prepare(req)\n    ws._reader.feed_data(WS_CLOSED_MESSAGE, 0)\n    await ws.close()\n\n    with pytest.raises(ConnectionError):\n        await ws.send_str('string'),type='function_definition'";
"[BLOCK]204,211|4,35|"[shape="box",fillcolor="white",style=filled];
"async def test_send_str_closed(make_request: Any) -> None:\n    req = make_request('GET', '/')\n    ws = WebSocketResponse()\n    await ws.prepare(req)\n    ws._reader.feed_data(WS_CLOSED_MESSAGE, 0)\n    await ws.close()\n\n    with pytest.raises(ConnectionError):\n        await ws.send_str('string'),type='function_definition'"->"[BLOCK]204,211|4,35|";
"with pytest.raises(ConnectionError):\n        await ws.send_str('string'),type='with_statement'"[shape="box",fillcolor="white",style=filled];
"[BLOCK]204,211|4,35|"->"with pytest.raises(ConnectionError):\n        await ws.send_str('string'),type='with_statement'";
"pytest.raises(ConnectionError),type='with_clause'"[shape="box",fillcolor="white",style=filled];
"with pytest.raises(ConnectionError):\n        await ws.send_str('string'),type='with_statement'"->"pytest.raises(ConnectionError),type='with_clause'";
"await ws.send_str('string'),type='block'"[shape="box",fillcolor="white",style=filled];
"with pytest.raises(ConnectionError):\n        await ws.send_str('string'),type='with_statement'"->"await ws.send_str('string'),type='block'";
"async def test_send_bytes_closed(make_request: Any) -> None:\n    req = make_request('GET', '/')\n    ws = WebSocketResponse()\n    await ws.prepare(req)\n    ws._reader.feed_data(WS_CLOSED_MESSAGE, 0)\n    await ws.close()\n\n    with pytest.raises(ConnectionError):\n        await ws.send_bytes(b'bytes'),type='function_definition'"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"async def test_send_bytes_closed(make_request: Any) -> None:\n    req = make_request('GET', '/')\n    ws = WebSocketResponse()\n    await ws.prepare(req)\n    ws._reader.feed_data(WS_CLOSED_MESSAGE, 0)\n    await ws.close()\n\n    with pytest.raises(ConnectionError):\n        await ws.send_bytes(b'bytes'),type='function_definition'";
"[BLOCK]215,222|4,37|"[shape="box",fillcolor="white",style=filled];
"async def test_send_bytes_closed(make_request: Any) -> None:\n    req = make_request('GET', '/')\n    ws = WebSocketResponse()\n    await ws.prepare(req)\n    ws._reader.feed_data(WS_CLOSED_MESSAGE, 0)\n    await ws.close()\n\n    with pytest.raises(ConnectionError):\n        await ws.send_bytes(b'bytes'),type='function_definition'"->"[BLOCK]215,222|4,37|";
"with pytest.raises(ConnectionError):\n        await ws.send_bytes(b'bytes'),type='with_statement'"[shape="box",fillcolor="white",style=filled];
"[BLOCK]215,222|4,37|"->"with pytest.raises(ConnectionError):\n        await ws.send_bytes(b'bytes'),type='with_statement'";
"pytest.raises(ConnectionError),type='with_clause'"[shape="box",fillcolor="white",style=filled];
"with pytest.raises(ConnectionError):\n        await ws.send_bytes(b'bytes'),type='with_statement'"->"pytest.raises(ConnectionError),type='with_clause'";
"await ws.send_bytes(b'bytes'),type='block'"[shape="box",fillcolor="white",style=filled];
"with pytest.raises(ConnectionError):\n        await ws.send_bytes(b'bytes'),type='with_statement'"->"await ws.send_bytes(b'bytes'),type='block'";
"async def test_send_json_closed(make_request: Any) -> None:\n    req = make_request('GET', '/')\n    ws = WebSocketResponse()\n    await ws.prepare(req)\n    ws._reader.feed_data(WS_CLOSED_MESSAGE, 0)\n    await ws.close()\n\n    with pytest.raises(ConnectionError):\n        await ws.send_json({'type': 'json'}),type='function_definition'"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"async def test_send_json_closed(make_request: Any) -> None:\n    req = make_request('GET', '/')\n    ws = WebSocketResponse()\n    await ws.prepare(req)\n    ws._reader.feed_data(WS_CLOSED_MESSAGE, 0)\n    await ws.close()\n\n    with pytest.raises(ConnectionError):\n        await ws.send_json({'type': 'json'}),type='function_definition'";
"[BLOCK]226,233|4,44|"[shape="box",fillcolor="white",style=filled];
"async def test_send_json_closed(make_request: Any) -> None:\n    req = make_request('GET', '/')\n    ws = WebSocketResponse()\n    await ws.prepare(req)\n    ws._reader.feed_data(WS_CLOSED_MESSAGE, 0)\n    await ws.close()\n\n    with pytest.raises(ConnectionError):\n        await ws.send_json({'type': 'json'}),type='function_definition'"->"[BLOCK]226,233|4,44|";
"with pytest.raises(ConnectionError):\n        await ws.send_json({'type': 'json'}),type='with_statement'"[shape="box",fillcolor="white",style=filled];
"[BLOCK]226,233|4,44|"->"with pytest.raises(ConnectionError):\n        await ws.send_json({'type': 'json'}),type='with_statement'";
"pytest.raises(ConnectionError),type='with_clause'"[shape="box",fillcolor="white",style=filled];
"with pytest.raises(ConnectionError):\n        await ws.send_json({'type': 'json'}),type='with_statement'"->"pytest.raises(ConnectionError),type='with_clause'";
"await ws.send_json({'type': 'json'}),type='block'"[shape="box",fillcolor="white",style=filled];
"with pytest.raises(ConnectionError):\n        await ws.send_json({'type': 'json'}),type='with_statement'"->"await ws.send_json({'type': 'json'}),type='block'";
"async def test_ping_closed(make_request: Any) -> None:\n    req = make_request('GET', '/')\n    ws = WebSocketResponse()\n    await ws.prepare(req)\n    ws._reader.feed_data(WS_CLOSED_MESSAGE, 0)\n    await ws.close()\n\n    with pytest.raises(ConnectionError):\n        await ws.ping(),type='function_definition'"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"async def test_ping_closed(make_request: Any) -> None:\n    req = make_request('GET', '/')\n    ws = WebSocketResponse()\n    await ws.prepare(req)\n    ws._reader.feed_data(WS_CLOSED_MESSAGE, 0)\n    await ws.close()\n\n    with pytest.raises(ConnectionError):\n        await ws.ping(),type='function_definition'";
"[BLOCK]237,244|4,23|"[shape="box",fillcolor="white",style=filled];
"async def test_ping_closed(make_request: Any) -> None:\n    req = make_request('GET', '/')\n    ws = WebSocketResponse()\n    await ws.prepare(req)\n    ws._reader.feed_data(WS_CLOSED_MESSAGE, 0)\n    await ws.close()\n\n    with pytest.raises(ConnectionError):\n        await ws.ping(),type='function_definition'"->"[BLOCK]237,244|4,23|";
"with pytest.raises(ConnectionError):\n        await ws.ping(),type='with_statement'"[shape="box",fillcolor="white",style=filled];
"[BLOCK]237,244|4,23|"->"with pytest.raises(ConnectionError):\n        await ws.ping(),type='with_statement'";
"pytest.raises(ConnectionError),type='with_clause'"[shape="box",fillcolor="white",style=filled];
"with pytest.raises(ConnectionError):\n        await ws.ping(),type='with_statement'"->"pytest.raises(ConnectionError),type='with_clause'";
"await ws.ping(),type='block'"[shape="box",fillcolor="white",style=filled];
"with pytest.raises(ConnectionError):\n        await ws.ping(),type='with_statement'"->"await ws.ping(),type='block'";
"async def test_pong_closed(make_request: Any, mocker: Any) -> None:\n    req = make_request('GET', '/')\n    ws = WebSocketResponse()\n    await ws.prepare(req)\n    ws._reader.feed_data(WS_CLOSED_MESSAGE, 0)\n    await ws.close()\n\n    with pytest.raises(ConnectionError):\n        await ws.pong(),type='function_definition'"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"async def test_pong_closed(make_request: Any, mocker: Any) -> None:\n    req = make_request('GET', '/')\n    ws = WebSocketResponse()\n    await ws.prepare(req)\n    ws._reader.feed_data(WS_CLOSED_MESSAGE, 0)\n    await ws.close()\n\n    with pytest.raises(ConnectionError):\n        await ws.pong(),type='function_definition'";
"[BLOCK]248,255|4,23|"[shape="box",fillcolor="white",style=filled];
"async def test_pong_closed(make_request: Any, mocker: Any) -> None:\n    req = make_request('GET', '/')\n    ws = WebSocketResponse()\n    await ws.prepare(req)\n    ws._reader.feed_data(WS_CLOSED_MESSAGE, 0)\n    await ws.close()\n\n    with pytest.raises(ConnectionError):\n        await ws.pong(),type='function_definition'"->"[BLOCK]248,255|4,23|";
"with pytest.raises(ConnectionError):\n        await ws.pong(),type='with_statement'"[shape="box",fillcolor="white",style=filled];
"[BLOCK]248,255|4,23|"->"with pytest.raises(ConnectionError):\n        await ws.pong(),type='with_statement'";
"pytest.raises(ConnectionError),type='with_clause'"[shape="box",fillcolor="white",style=filled];
"with pytest.raises(ConnectionError):\n        await ws.pong(),type='with_statement'"->"pytest.raises(ConnectionError),type='with_clause'";
"await ws.pong(),type='block'"[shape="box",fillcolor="white",style=filled];
"with pytest.raises(ConnectionError):\n        await ws.pong(),type='with_statement'"->"await ws.pong(),type='block'";
"async def test_close_idempotent(make_request: Any) -> None:\n    req = make_request('GET', '/')\n    ws = WebSocketResponse()\n    await ws.prepare(req)\n    ws._reader.feed_data(WS_CLOSED_MESSAGE, 0)\n    assert await ws.close(code=1, message='message1')\n    assert ws.closed\n    assert not (await ws.close(code=2, message='message2')),type='function_definition'"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"async def test_close_idempotent(make_request: Any) -> None:\n    req = make_request('GET', '/')\n    ws = WebSocketResponse()\n    await ws.prepare(req)\n    ws._reader.feed_data(WS_CLOSED_MESSAGE, 0)\n    assert await ws.close(code=1, message='message1')\n    assert ws.closed\n    assert not (await ws.close(code=2, message='message2')),type='function_definition'";
"[BLOCK]259,265|4,59|"[shape="box",fillcolor="white",style=filled];
"async def test_close_idempotent(make_request: Any) -> None:\n    req = make_request('GET', '/')\n    ws = WebSocketResponse()\n    await ws.prepare(req)\n    ws._reader.feed_data(WS_CLOSED_MESSAGE, 0)\n    assert await ws.close(code=1, message='message1')\n    assert ws.closed\n    assert not (await ws.close(code=2, message='message2')),type='function_definition'"->"[BLOCK]259,265|4,59|";
"assert await ws.close(code=1, message='message1'),type='assert_statement'"[shape="box",fillcolor="white",style=filled];
"[BLOCK]259,265|4,59|"->"assert await ws.close(code=1, message='message1'),type='assert_statement'";
"await ws.close(code=1, message='message1'),type='await'"[shape="box",fillcolor="white",style=filled];
"assert await ws.close(code=1, message='message1'),type='assert_statement'"->"await ws.close(code=1, message='message1'),type='await'";
"await,type='await'"[shape="box",fillcolor="white",style=filled];
"await ws.close(code=1, message='message1'),type='await'"->"await,type='await'";
"ws.close(code=1, message='message1'),type='call'"[shape="box",fillcolor="white",style=filled];
"await ws.close(code=1, message='message1'),type='await'"->"ws.close(code=1, message='message1'),type='call'";
"ws.close,type='attribute'"[shape="box",fillcolor="white",style=filled];
"ws.close(code=1, message='message1'),type='call'"->"ws.close,type='attribute'";
"ws,type='identifier'"[shape="box",fillcolor="white",style=filled];
"ws.close,type='attribute'"->"ws,type='identifier'";
"close,type='identifier'"[shape="box",fillcolor="white",style=filled];
"ws.close,type='attribute'"->"close,type='identifier'";
"(code=1, message='message1'),type='argument_list'"[shape="box",fillcolor="white",style=filled];
"ws.close(code=1, message='message1'),type='call'"->"(code=1, message='message1'),type='argument_list'";
"code=1,type='keyword_argument'"[shape="box",fillcolor="white",style=filled];
"(code=1, message='message1'),type='argument_list'"->"code=1,type='keyword_argument'";
"code,type='identifier'"[shape="box",fillcolor="white",style=filled];
"code=1,type='keyword_argument'"->"code,type='identifier'";
"message='message1',type='keyword_argument'"[shape="box",fillcolor="white",style=filled];
"(code=1, message='message1'),type='argument_list'"->"message='message1',type='keyword_argument'";
"message,type='identifier'"[shape="box",fillcolor="white",style=filled];
"message='message1',type='keyword_argument'"->"message,type='identifier'";
"assert ws.closed,type='assert_statement'"[shape="box",fillcolor="white",style=filled];
"[BLOCK]259,265|4,59|"->"assert ws.closed,type='assert_statement'";
"ws.closed,type='attribute'"[shape="box",fillcolor="white",style=filled];
"assert ws.closed,type='assert_statement'"->"ws.closed,type='attribute'";
"ws,type='identifier'"[shape="box",fillcolor="white",style=filled];
"ws.closed,type='attribute'"->"ws,type='identifier'";
"closed,type='identifier'"[shape="box",fillcolor="white",style=filled];
"ws.closed,type='attribute'"->"closed,type='identifier'";
"assert not (await ws.close(code=2, message='message2')),type='assert_statement'"[shape="box",fillcolor="white",style=filled];
"[BLOCK]259,265|4,59|"->"assert not (await ws.close(code=2, message='message2')),type='assert_statement'";
"not (await ws.close(code=2, message='message2')),type='not_operator'"[shape="box",fillcolor="white",style=filled];
"assert not (await ws.close(code=2, message='message2')),type='assert_statement'"->"not (await ws.close(code=2, message='message2')),type='not_operator'";
"not,type='not'"[shape="box",fillcolor="white",style=filled];
"not (await ws.close(code=2, message='message2')),type='not_operator'"->"not,type='not'";
"(await ws.close(code=2, message='message2')),type='parenthesized_expression'"[shape="box",fillcolor="white",style=filled];
"not (await ws.close(code=2, message='message2')),type='not_operator'"->"(await ws.close(code=2, message='message2')),type='parenthesized_expression'";
"await ws.close(code=2, message='message2'),type='await'"[shape="box",fillcolor="white",style=filled];
"(await ws.close(code=2, message='message2')),type='parenthesized_expression'"->"await ws.close(code=2, message='message2'),type='await'";
"await,type='await'"[shape="box",fillcolor="white",style=filled];
"await ws.close(code=2, message='message2'),type='await'"->"await,type='await'";
"ws.close(code=2, message='message2'),type='call'"[shape="box",fillcolor="white",style=filled];
"await ws.close(code=2, message='message2'),type='await'"->"ws.close(code=2, message='message2'),type='call'";
"ws.close,type='attribute'"[shape="box",fillcolor="white",style=filled];
"ws.close(code=2, message='message2'),type='call'"->"ws.close,type='attribute'";
"ws,type='identifier'"[shape="box",fillcolor="white",style=filled];
"ws.close,type='attribute'"->"ws,type='identifier'";
"close,type='identifier'"[shape="box",fillcolor="white",style=filled];
"ws.close,type='attribute'"->"close,type='identifier'";
"(code=2, message='message2'),type='argument_list'"[shape="box",fillcolor="white",style=filled];
"ws.close(code=2, message='message2'),type='call'"->"(code=2, message='message2'),type='argument_list'";
"code=2,type='keyword_argument'"[shape="box",fillcolor="white",style=filled];
"(code=2, message='message2'),type='argument_list'"->"code=2,type='keyword_argument'";
"code,type='identifier'"[shape="box",fillcolor="white",style=filled];
"code=2,type='keyword_argument'"->"code,type='identifier'";
"message='message2',type='keyword_argument'"[shape="box",fillcolor="white",style=filled];
"(code=2, message='message2'),type='argument_list'"->"message='message2',type='keyword_argument'";
"message,type='identifier'"[shape="box",fillcolor="white",style=filled];
"message='message2',type='keyword_argument'"->"message,type='identifier'";
"async def test_prepare_post_method_ok(make_request: Any) -> None:\n    req = make_request('POST', '/')\n    ws = WebSocketResponse()\n    await ws.prepare(req)\n    assert ws.prepared,type='function_definition'"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"async def test_prepare_post_method_ok(make_request: Any) -> None:\n    req = make_request('POST', '/')\n    ws = WebSocketResponse()\n    await ws.prepare(req)\n    assert ws.prepared,type='function_definition'";
"[BLOCK]269,272|4,22|"[shape="box",fillcolor="white",style=filled];
"async def test_prepare_post_method_ok(make_request: Any) -> None:\n    req = make_request('POST', '/')\n    ws = WebSocketResponse()\n    await ws.prepare(req)\n    assert ws.prepared,type='function_definition'"->"[BLOCK]269,272|4,22|";
"assert ws.prepared,type='assert_statement'"[shape="box",fillcolor="white",style=filled];
"[BLOCK]269,272|4,22|"->"assert ws.prepared,type='assert_statement'";
"ws.prepared,type='attribute'"[shape="box",fillcolor="white",style=filled];
"assert ws.prepared,type='assert_statement'"->"ws.prepared,type='attribute'";
"ws,type='identifier'"[shape="box",fillcolor="white",style=filled];
"ws.prepared,type='attribute'"->"ws,type='identifier'";
"prepared,type='identifier'"[shape="box",fillcolor="white",style=filled];
"ws.prepared,type='attribute'"->"prepared,type='identifier'";
"async def test_prepare_without_upgrade(make_request: Any) -> None:\n    req = make_request('GET', '/', headers=CIMultiDict({}))\n    ws = WebSocketResponse()\n    with pytest.raises(HTTPBadRequest):\n        await ws.prepare(req),type='function_definition'"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"async def test_prepare_without_upgrade(make_request: Any) -> None:\n    req = make_request('GET', '/', headers=CIMultiDict({}))\n    ws = WebSocketResponse()\n    with pytest.raises(HTTPBadRequest):\n        await ws.prepare(req),type='function_definition'";
"[BLOCK]276,279|4,29|"[shape="box",fillcolor="white",style=filled];
"async def test_prepare_without_upgrade(make_request: Any) -> None:\n    req = make_request('GET', '/', headers=CIMultiDict({}))\n    ws = WebSocketResponse()\n    with pytest.raises(HTTPBadRequest):\n        await ws.prepare(req),type='function_definition'"->"[BLOCK]276,279|4,29|";
"with pytest.raises(HTTPBadRequest):\n        await ws.prepare(req),type='with_statement'"[shape="box",fillcolor="white",style=filled];
"[BLOCK]276,279|4,29|"->"with pytest.raises(HTTPBadRequest):\n        await ws.prepare(req),type='with_statement'";
"pytest.raises(HTTPBadRequest),type='with_clause'"[shape="box",fillcolor="white",style=filled];
"with pytest.raises(HTTPBadRequest):\n        await ws.prepare(req),type='with_statement'"->"pytest.raises(HTTPBadRequest),type='with_clause'";
"await ws.prepare(req),type='block'"[shape="box",fillcolor="white",style=filled];
"with pytest.raises(HTTPBadRequest):\n        await ws.prepare(req),type='with_statement'"->"await ws.prepare(req),type='block'";
"async def test_wait_closed_before_start() -> None:\n    ws = WebSocketResponse()\n    with pytest.raises(RuntimeError):\n        await ws.close(),type='function_definition'"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"async def test_wait_closed_before_start() -> None:\n    ws = WebSocketResponse()\n    with pytest.raises(RuntimeError):\n        await ws.close(),type='function_definition'";
"[BLOCK]283,285|4,24|"[shape="box",fillcolor="white",style=filled];
"async def test_wait_closed_before_start() -> None:\n    ws = WebSocketResponse()\n    with pytest.raises(RuntimeError):\n        await ws.close(),type='function_definition'"->"[BLOCK]283,285|4,24|";
"with pytest.raises(RuntimeError):\n        await ws.close(),type='with_statement'"[shape="box",fillcolor="white",style=filled];
"[BLOCK]283,285|4,24|"->"with pytest.raises(RuntimeError):\n        await ws.close(),type='with_statement'";
"pytest.raises(RuntimeError),type='with_clause'"[shape="box",fillcolor="white",style=filled];
"with pytest.raises(RuntimeError):\n        await ws.close(),type='with_statement'"->"pytest.raises(RuntimeError),type='with_clause'";
"await ws.close(),type='block'"[shape="box",fillcolor="white",style=filled];
"with pytest.raises(RuntimeError):\n        await ws.close(),type='with_statement'"->"await ws.close(),type='block'";
"async def test_write_eof_not_started() -> None:\n    ws = WebSocketResponse()\n    with pytest.raises(RuntimeError):\n        await ws.write_eof(),type='function_definition'"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"async def test_write_eof_not_started() -> None:\n    ws = WebSocketResponse()\n    with pytest.raises(RuntimeError):\n        await ws.write_eof(),type='function_definition'";
"[BLOCK]289,291|4,28|"[shape="box",fillcolor="white",style=filled];
"async def test_write_eof_not_started() -> None:\n    ws = WebSocketResponse()\n    with pytest.raises(RuntimeError):\n        await ws.write_eof(),type='function_definition'"->"[BLOCK]289,291|4,28|";
"with pytest.raises(RuntimeError):\n        await ws.write_eof(),type='with_statement'"[shape="box",fillcolor="white",style=filled];
"[BLOCK]289,291|4,28|"->"with pytest.raises(RuntimeError):\n        await ws.write_eof(),type='with_statement'";
"pytest.raises(RuntimeError),type='with_clause'"[shape="box",fillcolor="white",style=filled];
"with pytest.raises(RuntimeError):\n        await ws.write_eof(),type='with_statement'"->"pytest.raises(RuntimeError),type='with_clause'";
"await ws.write_eof(),type='block'"[shape="box",fillcolor="white",style=filled];
"with pytest.raises(RuntimeError):\n        await ws.write_eof(),type='with_statement'"->"await ws.write_eof(),type='block'";
"async def test_write_eof_idempotent(make_request: Any) -> None:\n    req = make_request('GET', '/')\n    ws = WebSocketResponse()\n    await ws.prepare(req)\n    ws._reader.feed_data(WS_CLOSED_MESSAGE, 0)\n    await ws.close()\n\n    await ws.write_eof()\n    await ws.write_eof()\n    await ws.write_eof(),type='function_definition'"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"async def test_write_eof_idempotent(make_request: Any) -> None:\n    req = make_request('GET', '/')\n    ws = WebSocketResponse()\n    await ws.prepare(req)\n    ws._reader.feed_data(WS_CLOSED_MESSAGE, 0)\n    await ws.close()\n\n    await ws.write_eof()\n    await ws.write_eof()\n    await ws.write_eof(),type='function_definition'";
"[BLOCK]295,303|4,24|"[shape="box",fillcolor="white",style=filled];
"async def test_write_eof_idempotent(make_request: Any) -> None:\n    req = make_request('GET', '/')\n    ws = WebSocketResponse()\n    await ws.prepare(req)\n    ws._reader.feed_data(WS_CLOSED_MESSAGE, 0)\n    await ws.close()\n\n    await ws.write_eof()\n    await ws.write_eof()\n    await ws.write_eof(),type='function_definition'"->"[BLOCK]295,303|4,24|";
"async def test_receive_eofstream_in_reader(make_request: Any, loop: Any) -> None:\n    req = make_request('GET', '/')\n    ws = WebSocketResponse()\n    await ws.prepare(req)\n\n    ws._reader = mock.Mock()\n    exc = EofStream()\n    res = loop.create_future()\n    res.set_exception(exc)\n    ws._reader.read = make_mocked_coro(res)\n    ws._payload_writer.drain = mock.Mock()\n    ws._payload_writer.drain.return_value = loop.create_future()\n    ws._payload_writer.drain.return_value.set_result(True)\n\n    msg = await ws.receive()\n    assert msg.type == WSMsgType.CLOSED\n    assert ws.closed,type='function_definition'"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"async def test_receive_eofstream_in_reader(make_request: Any, loop: Any) -> None:\n    req = make_request('GET', '/')\n    ws = WebSocketResponse()\n    await ws.prepare(req)\n\n    ws._reader = mock.Mock()\n    exc = EofStream()\n    res = loop.create_future()\n    res.set_exception(exc)\n    ws._reader.read = make_mocked_coro(res)\n    ws._payload_writer.drain = mock.Mock()\n    ws._payload_writer.drain.return_value = loop.create_future()\n    ws._payload_writer.drain.return_value.set_result(True)\n\n    msg = await ws.receive()\n    assert msg.type == WSMsgType.CLOSED\n    assert ws.closed,type='function_definition'";
"[BLOCK]307,322|4,20|"[shape="box",fillcolor="white",style=filled];
"async def test_receive_eofstream_in_reader(make_request: Any, loop: Any) -> None:\n    req = make_request('GET', '/')\n    ws = WebSocketResponse()\n    await ws.prepare(req)\n\n    ws._reader = mock.Mock()\n    exc = EofStream()\n    res = loop.create_future()\n    res.set_exception(exc)\n    ws._reader.read = make_mocked_coro(res)\n    ws._payload_writer.drain = mock.Mock()\n    ws._payload_writer.drain.return_value = loop.create_future()\n    ws._payload_writer.drain.return_value.set_result(True)\n\n    msg = await ws.receive()\n    assert msg.type == WSMsgType.CLOSED\n    assert ws.closed,type='function_definition'"->"[BLOCK]307,322|4,20|";
"assert msg.type == WSMsgType.CLOSED,type='assert_statement'"[shape="box",fillcolor="white",style=filled];
"[BLOCK]307,322|4,20|"->"assert msg.type == WSMsgType.CLOSED,type='assert_statement'";
"msg.type == WSMsgType.CLOSED,type='comparison_operator'"[shape="box",fillcolor="white",style=filled];
"assert msg.type == WSMsgType.CLOSED,type='assert_statement'"->"msg.type == WSMsgType.CLOSED,type='comparison_operator'";
"msg.type,type='attribute'"[shape="box",fillcolor="white",style=filled];
"msg.type == WSMsgType.CLOSED,type='comparison_operator'"->"msg.type,type='attribute'";
"msg,type='identifier'"[shape="box",fillcolor="white",style=filled];
"msg.type,type='attribute'"->"msg,type='identifier'";
"type,type='identifier'"[shape="box",fillcolor="white",style=filled];
"msg.type,type='attribute'"->"type,type='identifier'";
"==,type='=='"[shape="box",fillcolor="white",style=filled];
"msg.type == WSMsgType.CLOSED,type='comparison_operator'"->"==,type='=='";
"WSMsgType.CLOSED,type='attribute'"[shape="box",fillcolor="white",style=filled];
"msg.type == WSMsgType.CLOSED,type='comparison_operator'"->"WSMsgType.CLOSED,type='attribute'";
"WSMsgType,type='identifier'"[shape="box",fillcolor="white",style=filled];
"WSMsgType.CLOSED,type='attribute'"->"WSMsgType,type='identifier'";
"CLOSED,type='identifier'"[shape="box",fillcolor="white",style=filled];
"WSMsgType.CLOSED,type='attribute'"->"CLOSED,type='identifier'";
"assert ws.closed,type='assert_statement'"[shape="box",fillcolor="white",style=filled];
"[BLOCK]307,322|4,20|"->"assert ws.closed,type='assert_statement'";
"ws.closed,type='attribute'"[shape="box",fillcolor="white",style=filled];
"assert ws.closed,type='assert_statement'"->"ws.closed,type='attribute'";
"ws,type='identifier'"[shape="box",fillcolor="white",style=filled];
"ws.closed,type='attribute'"->"ws,type='identifier'";
"closed,type='identifier'"[shape="box",fillcolor="white",style=filled];
"ws.closed,type='attribute'"->"closed,type='identifier'";
"async def test_receive_timeouterror(make_request: Any, loop: Any) -> None:\n    req = make_request('GET', '/')\n    ws = WebSocketResponse()\n    await ws.prepare(req)\n\n    ws._reader = mock.Mock()\n    res = loop.create_future()\n    res.set_exception(asyncio.TimeoutError())\n    ws._reader.read = make_mocked_coro(res)\n\n    with pytest.raises(asyncio.TimeoutError):\n        await ws.receive(),type='function_definition'"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"async def test_receive_timeouterror(make_request: Any, loop: Any) -> None:\n    req = make_request('GET', '/')\n    ws = WebSocketResponse()\n    await ws.prepare(req)\n\n    ws._reader = mock.Mock()\n    res = loop.create_future()\n    res.set_exception(asyncio.TimeoutError())\n    ws._reader.read = make_mocked_coro(res)\n\n    with pytest.raises(asyncio.TimeoutError):\n        await ws.receive(),type='function_definition'";
"[BLOCK]326,336|4,26|"[shape="box",fillcolor="white",style=filled];
"async def test_receive_timeouterror(make_request: Any, loop: Any) -> None:\n    req = make_request('GET', '/')\n    ws = WebSocketResponse()\n    await ws.prepare(req)\n\n    ws._reader = mock.Mock()\n    res = loop.create_future()\n    res.set_exception(asyncio.TimeoutError())\n    ws._reader.read = make_mocked_coro(res)\n\n    with pytest.raises(asyncio.TimeoutError):\n        await ws.receive(),type='function_definition'"->"[BLOCK]326,336|4,26|";
"with pytest.raises(asyncio.TimeoutError):\n        await ws.receive(),type='with_statement'"[shape="box",fillcolor="white",style=filled];
"[BLOCK]326,336|4,26|"->"with pytest.raises(asyncio.TimeoutError):\n        await ws.receive(),type='with_statement'";
"pytest.raises(asyncio.TimeoutError),type='with_clause'"[shape="box",fillcolor="white",style=filled];
"with pytest.raises(asyncio.TimeoutError):\n        await ws.receive(),type='with_statement'"->"pytest.raises(asyncio.TimeoutError),type='with_clause'";
"await ws.receive(),type='block'"[shape="box",fillcolor="white",style=filled];
"with pytest.raises(asyncio.TimeoutError):\n        await ws.receive(),type='with_statement'"->"await ws.receive(),type='block'";
"async def test_multiple_receive_on_close_connection(make_request: Any) -> None:\n    req = make_request('GET', '/')\n    ws = WebSocketResponse()\n    await ws.prepare(req)\n    ws._reader.feed_data(WS_CLOSED_MESSAGE, 0)\n    await ws.close()\n\n    await ws.receive()\n    await ws.receive()\n    await ws.receive()\n    await ws.receive()\n\n    with pytest.raises(RuntimeError):\n        await ws.receive(),type='function_definition'"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"async def test_multiple_receive_on_close_connection(make_request: Any) -> None:\n    req = make_request('GET', '/')\n    ws = WebSocketResponse()\n    await ws.prepare(req)\n    ws._reader.feed_data(WS_CLOSED_MESSAGE, 0)\n    await ws.close()\n\n    await ws.receive()\n    await ws.receive()\n    await ws.receive()\n    await ws.receive()\n\n    with pytest.raises(RuntimeError):\n        await ws.receive(),type='function_definition'";
"[BLOCK]340,352|4,26|"[shape="box",fillcolor="white",style=filled];
"async def test_multiple_receive_on_close_connection(make_request: Any) -> None:\n    req = make_request('GET', '/')\n    ws = WebSocketResponse()\n    await ws.prepare(req)\n    ws._reader.feed_data(WS_CLOSED_MESSAGE, 0)\n    await ws.close()\n\n    await ws.receive()\n    await ws.receive()\n    await ws.receive()\n    await ws.receive()\n\n    with pytest.raises(RuntimeError):\n        await ws.receive(),type='function_definition'"->"[BLOCK]340,352|4,26|";
"with pytest.raises(RuntimeError):\n        await ws.receive(),type='with_statement'"[shape="box",fillcolor="white",style=filled];
"[BLOCK]340,352|4,26|"->"with pytest.raises(RuntimeError):\n        await ws.receive(),type='with_statement'";
"pytest.raises(RuntimeError),type='with_clause'"[shape="box",fillcolor="white",style=filled];
"with pytest.raises(RuntimeError):\n        await ws.receive(),type='with_statement'"->"pytest.raises(RuntimeError),type='with_clause'";
"await ws.receive(),type='block'"[shape="box",fillcolor="white",style=filled];
"with pytest.raises(RuntimeError):\n        await ws.receive(),type='with_statement'"->"await ws.receive(),type='block'";
"async def test_concurrent_receive(make_request: Any) -> None:\n    req = make_request('GET', '/')\n    ws = WebSocketResponse()\n    await ws.prepare(req)\n    ws._waiting = True\n\n    with pytest.raises(RuntimeError):\n        await ws.receive(),type='function_definition'"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"async def test_concurrent_receive(make_request: Any) -> None:\n    req = make_request('GET', '/')\n    ws = WebSocketResponse()\n    await ws.prepare(req)\n    ws._waiting = True\n\n    with pytest.raises(RuntimeError):\n        await ws.receive(),type='function_definition'";
"[BLOCK]356,362|4,26|"[shape="box",fillcolor="white",style=filled];
"async def test_concurrent_receive(make_request: Any) -> None:\n    req = make_request('GET', '/')\n    ws = WebSocketResponse()\n    await ws.prepare(req)\n    ws._waiting = True\n\n    with pytest.raises(RuntimeError):\n        await ws.receive(),type='function_definition'"->"[BLOCK]356,362|4,26|";
"with pytest.raises(RuntimeError):\n        await ws.receive(),type='with_statement'"[shape="box",fillcolor="white",style=filled];
"[BLOCK]356,362|4,26|"->"with pytest.raises(RuntimeError):\n        await ws.receive(),type='with_statement'";
"pytest.raises(RuntimeError),type='with_clause'"[shape="box",fillcolor="white",style=filled];
"with pytest.raises(RuntimeError):\n        await ws.receive(),type='with_statement'"->"pytest.raises(RuntimeError),type='with_clause'";
"await ws.receive(),type='block'"[shape="box",fillcolor="white",style=filled];
"with pytest.raises(RuntimeError):\n        await ws.receive(),type='with_statement'"->"await ws.receive(),type='block'";
"async def test_close_exc(make_request: Any) -> None:\n\n    req = make_request('GET', '/')\n    ws = WebSocketResponse()\n    await ws.prepare(req)\n\n    exc = ValueError()\n    ws._writer = mock.Mock()\n    ws._writer.close.side_effect = exc\n    await ws.close()\n    assert ws.closed\n    assert ws.exception() is exc\n\n    ws._closed = False\n    ws._writer.close.side_effect = asyncio.CancelledError()\n    with pytest.raises(asyncio.CancelledError):\n        await ws.close(),type='function_definition'"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"async def test_close_exc(make_request: Any) -> None:\n\n    req = make_request('GET', '/')\n    ws = WebSocketResponse()\n    await ws.prepare(req)\n\n    exc = ValueError()\n    ws._writer = mock.Mock()\n    ws._writer.close.side_effect = exc\n    await ws.close()\n    assert ws.closed\n    assert ws.exception() is exc\n\n    ws._closed = False\n    ws._writer.close.side_effect = asyncio.CancelledError()\n    with pytest.raises(asyncio.CancelledError):\n        await ws.close(),type='function_definition'";
"[BLOCK]367,381|4,24|"[shape="box",fillcolor="white",style=filled];
"async def test_close_exc(make_request: Any) -> None:\n\n    req = make_request('GET', '/')\n    ws = WebSocketResponse()\n    await ws.prepare(req)\n\n    exc = ValueError()\n    ws._writer = mock.Mock()\n    ws._writer.close.side_effect = exc\n    await ws.close()\n    assert ws.closed\n    assert ws.exception() is exc\n\n    ws._closed = False\n    ws._writer.close.side_effect = asyncio.CancelledError()\n    with pytest.raises(asyncio.CancelledError):\n        await ws.close(),type='function_definition'"->"[BLOCK]367,381|4,24|";
"assert ws.closed,type='assert_statement'"[shape="box",fillcolor="white",style=filled];
"[BLOCK]367,381|4,24|"->"assert ws.closed,type='assert_statement'";
"ws.closed,type='attribute'"[shape="box",fillcolor="white",style=filled];
"assert ws.closed,type='assert_statement'"->"ws.closed,type='attribute'";
"ws,type='identifier'"[shape="box",fillcolor="white",style=filled];
"ws.closed,type='attribute'"->"ws,type='identifier'";
"closed,type='identifier'"[shape="box",fillcolor="white",style=filled];
"ws.closed,type='attribute'"->"closed,type='identifier'";
"assert ws.exception() is exc,type='assert_statement'"[shape="box",fillcolor="white",style=filled];
"[BLOCK]367,381|4,24|"->"assert ws.exception() is exc,type='assert_statement'";
"ws.exception() is exc,type='comparison_operator'"[shape="box",fillcolor="white",style=filled];
"assert ws.exception() is exc,type='assert_statement'"->"ws.exception() is exc,type='comparison_operator'";
"ws.exception(),type='call'"[shape="box",fillcolor="white",style=filled];
"ws.exception() is exc,type='comparison_operator'"->"ws.exception(),type='call'";
"ws.exception,type='attribute'"[shape="box",fillcolor="white",style=filled];
"ws.exception(),type='call'"->"ws.exception,type='attribute'";
"ws,type='identifier'"[shape="box",fillcolor="white",style=filled];
"ws.exception,type='attribute'"->"ws,type='identifier'";
"exception,type='identifier'"[shape="box",fillcolor="white",style=filled];
"ws.exception,type='attribute'"->"exception,type='identifier'";
"(),type='argument_list'"[shape="box",fillcolor="white",style=filled];
"ws.exception(),type='call'"->"(),type='argument_list'";
"exc,type='identifier'"[shape="box",fillcolor="white",style=filled];
"ws.exception() is exc,type='comparison_operator'"->"exc,type='identifier'";
"with pytest.raises(asyncio.CancelledError):\n        await ws.close(),type='with_statement'"[shape="box",fillcolor="white",style=filled];
"[BLOCK]367,381|4,24|"->"with pytest.raises(asyncio.CancelledError):\n        await ws.close(),type='with_statement'";
"pytest.raises(asyncio.CancelledError),type='with_clause'"[shape="box",fillcolor="white",style=filled];
"with pytest.raises(asyncio.CancelledError):\n        await ws.close(),type='with_statement'"->"pytest.raises(asyncio.CancelledError),type='with_clause'";
"await ws.close(),type='block'"[shape="box",fillcolor="white",style=filled];
"with pytest.raises(asyncio.CancelledError):\n        await ws.close(),type='with_statement'"->"await ws.close(),type='block'";
"async def test_prepare_twice_idempotent(make_request: Any) -> None:\n    req = make_request('GET', '/')\n    ws = WebSocketResponse()\n\n    impl1 = await ws.prepare(req)\n    impl2 = await ws.prepare(req)\n    assert impl1 is impl2,type='function_definition'"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"async def test_prepare_twice_idempotent(make_request: Any) -> None:\n    req = make_request('GET', '/')\n    ws = WebSocketResponse()\n\n    impl1 = await ws.prepare(req)\n    impl2 = await ws.prepare(req)\n    assert impl1 is impl2,type='function_definition'";
"[BLOCK]385,390|4,25|"[shape="box",fillcolor="white",style=filled];
"async def test_prepare_twice_idempotent(make_request: Any) -> None:\n    req = make_request('GET', '/')\n    ws = WebSocketResponse()\n\n    impl1 = await ws.prepare(req)\n    impl2 = await ws.prepare(req)\n    assert impl1 is impl2,type='function_definition'"->"[BLOCK]385,390|4,25|";
"assert impl1 is impl2,type='assert_statement'"[shape="box",fillcolor="white",style=filled];
"[BLOCK]385,390|4,25|"->"assert impl1 is impl2,type='assert_statement'";
"impl1 is impl2,type='comparison_operator'"[shape="box",fillcolor="white",style=filled];
"assert impl1 is impl2,type='assert_statement'"->"impl1 is impl2,type='comparison_operator'";
"impl1,type='identifier'"[shape="box",fillcolor="white",style=filled];
"impl1 is impl2,type='comparison_operator'"->"impl1,type='identifier'";
"impl2,type='identifier'"[shape="box",fillcolor="white",style=filled];
"impl1 is impl2,type='comparison_operator'"->"impl2,type='identifier'";
"async def test_send_with_per_message_deflate(make_request: Any, mocker: Any) -> None:\n    req = make_request('GET', '/')\n    ws = WebSocketResponse()\n    await ws.prepare(req)\n    writer_send = ws._writer.send = make_mocked_coro()\n\n    await ws.send_str('string', compress=15)\n    writer_send.assert_called_with('string', binary=False, compress=15)\n\n    await ws.send_bytes(b'bytes', compress=0)\n    writer_send.assert_called_with(b'bytes', binary=True, compress=0)\n\n    await ws.send_json('[{}]', compress=9)\n    writer_send.assert_called_with(''[{}]'', binary=False, compress=9),type='function_definition'"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"async def test_send_with_per_message_deflate(make_request: Any, mocker: Any) -> None:\n    req = make_request('GET', '/')\n    ws = WebSocketResponse()\n    await ws.prepare(req)\n    writer_send = ws._writer.send = make_mocked_coro()\n\n    await ws.send_str('string', compress=15)\n    writer_send.assert_called_with('string', binary=False, compress=15)\n\n    await ws.send_bytes(b'bytes', compress=0)\n    writer_send.assert_called_with(b'bytes', binary=True, compress=0)\n\n    await ws.send_json('[{}]', compress=9)\n    writer_send.assert_called_with(''[{}]'', binary=False, compress=9),type='function_definition'";
"[BLOCK]394,406|4,70|"[shape="box",fillcolor="white",style=filled];
"async def test_send_with_per_message_deflate(make_request: Any, mocker: Any) -> None:\n    req = make_request('GET', '/')\n    ws = WebSocketResponse()\n    await ws.prepare(req)\n    writer_send = ws._writer.send = make_mocked_coro()\n\n    await ws.send_str('string', compress=15)\n    writer_send.assert_called_with('string', binary=False, compress=15)\n\n    await ws.send_bytes(b'bytes', compress=0)\n    writer_send.assert_called_with(b'bytes', binary=True, compress=0)\n\n    await ws.send_json('[{}]', compress=9)\n    writer_send.assert_called_with(''[{}]'', binary=False, compress=9),type='function_definition'"->"[BLOCK]394,406|4,70|";
"async def test_no_transfer_encoding_header(make_request: Any, mocker: Any) -> None:\n    req = make_request('GET', '/')\n    ws = WebSocketResponse()\n    await ws._start(req)\n\n    assert 'Transfer-Encoding' not in ws.headers,type='function_definition'"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"async def test_no_transfer_encoding_header(make_request: Any, mocker: Any) -> None:\n    req = make_request('GET', '/')\n    ws = WebSocketResponse()\n    await ws._start(req)\n\n    assert 'Transfer-Encoding' not in ws.headers,type='function_definition'";
"[BLOCK]410,414|4,48|"[shape="box",fillcolor="white",style=filled];
"async def test_no_transfer_encoding_header(make_request: Any, mocker: Any) -> None:\n    req = make_request('GET', '/')\n    ws = WebSocketResponse()\n    await ws._start(req)\n\n    assert 'Transfer-Encoding' not in ws.headers,type='function_definition'"->"[BLOCK]410,414|4,48|";
"assert 'Transfer-Encoding' not in ws.headers,type='assert_statement'"[shape="box",fillcolor="white",style=filled];
"[BLOCK]410,414|4,48|"->"assert 'Transfer-Encoding' not in ws.headers,type='assert_statement'";
"'Transfer-Encoding' not in ws.headers,type='comparison_operator'"[shape="box",fillcolor="white",style=filled];
"assert 'Transfer-Encoding' not in ws.headers,type='assert_statement'"->"'Transfer-Encoding' not in ws.headers,type='comparison_operator'";
"not,type='not'"[shape="box",fillcolor="white",style=filled];
"'Transfer-Encoding' not in ws.headers,type='comparison_operator'"->"not,type='not'";
"ws.headers,type='attribute'"[shape="box",fillcolor="white",style=filled];
"'Transfer-Encoding' not in ws.headers,type='comparison_operator'"->"ws.headers,type='attribute'";
"ws,type='identifier'"[shape="box",fillcolor="white",style=filled];
"ws.headers,type='attribute'"->"ws,type='identifier'";
"headers,type='identifier'"[shape="box",fillcolor="white",style=filled];
"ws.headers,type='attribute'"->"headers,type='identifier'";
"import asyncio\nfrom typing import Any\nfrom unittest import mock\nimport aiosignal\nimport pytest\nfrom multidict import CIMultiDict\nfrom aiohttp import WSMsgType\nfrom aiohttp.streams import EofStream\nfrom aiohttp.test_utils import make_mocked_coro, make_mocked_request\nfrom aiohttp.web import HTTPBadRequest, WebSocketResponse\nfrom aiohttp.web_ws import WS_CLOSED_MESSAGE, WebSocketRead"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"import asyncio\nfrom typing import Any\nfrom unittest import mock\nimport aiosignal\nimport pytest\nfrom multidict import CIMultiDict\nfrom aiohttp import WSMsgType\nfrom aiohttp.streams import EofStream\nfrom aiohttp.test_utils import make_mocked_coro, make_mocked_request\nfrom aiohttp.web import HTTPBadRequest, WebSocketResponse\nfrom aiohttp.web_ws import WS_CLOSED_MESSAGE, WebSocketRead"
}