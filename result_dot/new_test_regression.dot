digraph G{
rankdir="LR";
"MODULE"[shape="box",fillcolor="white",style=filled];
"import gc,type='import_statement'\nline_star:0,line_end:0|char_star:0,char_end:9"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"import gc,type='import_statement'\nline_star:0,line_end:0|char_star:0,char_end:9";
"import platform,type='import_statement'\nline_star:1,line_end:1|char_star:0,char_end:15"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"import platform,type='import_statement'\nline_star:1,line_end:1|char_star:0,char_end:15";
"import threading,type='import_statement'\nline_star:2,line_end:2|char_star:0,char_end:16"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"import threading,type='import_statement'\nline_star:2,line_end:2|char_star:0,char_end:16";
"import pytest,type='import_statement'\nline_star:4,line_end:4|char_star:0,char_end:13"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"import pytest,type='import_statement'\nline_star:4,line_end:4|char_star:0,char_end:13";
"import flask,type='import_statement'\nline_star:6,line_end:6|char_star:0,char_end:12"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"import flask,type='import_statement'\nline_star:6,line_end:6|char_star:0,char_end:12";
"class assert_no_leak:\n    def __enter__(self):\n        gc.disable()\n        _gc_lock.acquire()\n        loc = flask._request_ctx_stack._local\n\n        # Force Python to track this dictionary at all times.\n        # This is necessary since Python only starts tracking\n        # dicts if they contain mutable objects.  It's a horrible,\n        # horrible hack but makes this kinda testable.\n        loc.__storage__['FOOO'] = [1, 2, 3]\n\n        gc.collect()\n        self.old_objects = len(gc.get_objects())\n\n    def __exit__(self, exc_type, exc_value, tb):\n        gc.collect()\n        new_objects = len(gc.get_objects())\n        if new_objects > self.old_objects:\n            pytest.fail('Example code leaked')\n        _gc_lock.release()\n        gc.enable(),type='class_definition'\nline_star:11,line_end:32|char_star:0,char_end:19"[shape="box",fillcolor="#ffdf91",style=filled];
"MODULE"->"class assert_no_leak:\n    def __enter__(self):\n        gc.disable()\n        _gc_lock.acquire()\n        loc = flask._request_ctx_stack._local\n\n        # Force Python to track this dictionary at all times.\n        # This is necessary since Python only starts tracking\n        # dicts if they contain mutable objects.  It's a horrible,\n        # horrible hack but makes this kinda testable.\n        loc.__storage__['FOOO'] = [1, 2, 3]\n\n        gc.collect()\n        self.old_objects = len(gc.get_objects())\n\n    def __exit__(self, exc_type, exc_value, tb):\n        gc.collect()\n        new_objects = len(gc.get_objects())\n        if new_objects > self.old_objects:\n            pytest.fail('Example code leaked')\n        _gc_lock.release()\n        gc.enable(),type='class_definition'\nline_star:11,line_end:32|char_star:0,char_end:19";
"assert_no_leak,type='identifier'\nline_star:11,line_end:11|char_star:6,char_end:20"[shape="point",fillcolor="#121013",style=filled];
"class assert_no_leak:\n    def __enter__(self):\n        gc.disable()\n        _gc_lock.acquire()\n        loc = flask._request_ctx_stack._local\n\n        # Force Python to track this dictionary at all times.\n        # This is necessary since Python only starts tracking\n        # dicts if they contain mutable objects.  It's a horrible,\n        # horrible hack but makes this kinda testable.\n        loc.__storage__['FOOO'] = [1, 2, 3]\n\n        gc.collect()\n        self.old_objects = len(gc.get_objects())\n\n    def __exit__(self, exc_type, exc_value, tb):\n        gc.collect()\n        new_objects = len(gc.get_objects())\n        if new_objects > self.old_objects:\n            pytest.fail('Example code leaked')\n        _gc_lock.release()\n        gc.enable(),type='class_definition'\nline_star:11,line_end:32|char_star:0,char_end:19"->"assert_no_leak,type='identifier'\nline_star:11,line_end:11|char_star:6,char_end:20";
"type='INFORMATION BLOCK'\nline_star:12,line_end:32|char_star:4,char_end:19"[shape="point",fillcolor="#121013",style=filled];
"class assert_no_leak:\n    def __enter__(self):\n        gc.disable()\n        _gc_lock.acquire()\n        loc = flask._request_ctx_stack._local\n\n        # Force Python to track this dictionary at all times.\n        # This is necessary since Python only starts tracking\n        # dicts if they contain mutable objects.  It's a horrible,\n        # horrible hack but makes this kinda testable.\n        loc.__storage__['FOOO'] = [1, 2, 3]\n\n        gc.collect()\n        self.old_objects = len(gc.get_objects())\n\n    def __exit__(self, exc_type, exc_value, tb):\n        gc.collect()\n        new_objects = len(gc.get_objects())\n        if new_objects > self.old_objects:\n            pytest.fail('Example code leaked')\n        _gc_lock.release()\n        gc.enable(),type='class_definition'\nline_star:11,line_end:32|char_star:0,char_end:19"->"type='INFORMATION BLOCK'\nline_star:12,line_end:32|char_star:4,char_end:19";
"def __enter__(self):\n        gc.disable()\n        _gc_lock.acquire()\n        loc = flask._request_ctx_stack._local\n\n        # Force Python to track this dictionary at all times.\n        # This is necessary since Python only starts tracking\n        # dicts if they contain mutable objects.  It's a horrible,\n        # horrible hack but makes this kinda testable.\n        loc.__storage__['FOOO'] = [1, 2, 3]\n\n        gc.collect()\n        self.old_objects = len(gc.get_objects()),type='function_definition'\nline_star:12,line_end:24|char_star:4,char_end:48"[shape="box",fillcolor="#cee6b4",style=filled];
"type='INFORMATION BLOCK'\nline_star:12,line_end:32|char_star:4,char_end:19"->"def __enter__(self):\n        gc.disable()\n        _gc_lock.acquire()\n        loc = flask._request_ctx_stack._local\n\n        # Force Python to track this dictionary at all times.\n        # This is necessary since Python only starts tracking\n        # dicts if they contain mutable objects.  It's a horrible,\n        # horrible hack but makes this kinda testable.\n        loc.__storage__['FOOO'] = [1, 2, 3]\n\n        gc.collect()\n        self.old_objects = len(gc.get_objects()),type='function_definition'\nline_star:12,line_end:24|char_star:4,char_end:48";
"__enter__,type='identifier'\nline_star:12,line_end:12|char_star:8,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"def __enter__(self):\n        gc.disable()\n        _gc_lock.acquire()\n        loc = flask._request_ctx_stack._local\n\n        # Force Python to track this dictionary at all times.\n        # This is necessary since Python only starts tracking\n        # dicts if they contain mutable objects.  It's a horrible,\n        # horrible hack but makes this kinda testable.\n        loc.__storage__['FOOO'] = [1, 2, 3]\n\n        gc.collect()\n        self.old_objects = len(gc.get_objects()),type='function_definition'\nline_star:12,line_end:24|char_star:4,char_end:48"->"__enter__,type='identifier'\nline_star:12,line_end:12|char_star:8,char_end:17";
"(self),type='parameters'\nline_star:12,line_end:12|char_star:17,char_end:23"[shape="box",fillcolor="white",style=filled];
"def __enter__(self):\n        gc.disable()\n        _gc_lock.acquire()\n        loc = flask._request_ctx_stack._local\n\n        # Force Python to track this dictionary at all times.\n        # This is necessary since Python only starts tracking\n        # dicts if they contain mutable objects.  It's a horrible,\n        # horrible hack but makes this kinda testable.\n        loc.__storage__['FOOO'] = [1, 2, 3]\n\n        gc.collect()\n        self.old_objects = len(gc.get_objects()),type='function_definition'\nline_star:12,line_end:24|char_star:4,char_end:48"->"(self),type='parameters'\nline_star:12,line_end:12|char_star:17,char_end:23";
"self,type='identifier'\nline_star:12,line_end:12|char_star:18,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"(self),type='parameters'\nline_star:12,line_end:12|char_star:17,char_end:23"->"self,type='identifier'\nline_star:12,line_end:12|char_star:18,char_end:22";
"type='INFORMATION BLOCK'\nline_star:13,line_end:24|char_star:8,char_end:48"[shape="point",fillcolor="#121013",style=filled];
"def __enter__(self):\n        gc.disable()\n        _gc_lock.acquire()\n        loc = flask._request_ctx_stack._local\n\n        # Force Python to track this dictionary at all times.\n        # This is necessary since Python only starts tracking\n        # dicts if they contain mutable objects.  It's a horrible,\n        # horrible hack but makes this kinda testable.\n        loc.__storage__['FOOO'] = [1, 2, 3]\n\n        gc.collect()\n        self.old_objects = len(gc.get_objects()),type='function_definition'\nline_star:12,line_end:24|char_star:4,char_end:48"->"type='INFORMATION BLOCK'\nline_star:13,line_end:24|char_star:8,char_end:48";
"# Force Python to track this dictionary at all times.,type='comment'\nline_star:17,line_end:17|char_star:8,char_end:61"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:13,line_end:24|char_star:8,char_end:48"->"# Force Python to track this dictionary at all times.,type='comment'\nline_star:17,line_end:17|char_star:8,char_end:61";
"# This is necessary since Python only starts tracking,type='comment'\nline_star:18,line_end:18|char_star:8,char_end:61"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:13,line_end:24|char_star:8,char_end:48"->"# This is necessary since Python only starts tracking,type='comment'\nline_star:18,line_end:18|char_star:8,char_end:61";
"# dicts if they contain mutable objects.  It's a horrible,,type='comment'\nline_star:19,line_end:19|char_star:8,char_end:66"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:13,line_end:24|char_star:8,char_end:48"->"# dicts if they contain mutable objects.  It's a horrible,,type='comment'\nline_star:19,line_end:19|char_star:8,char_end:66";
"# horrible hack but makes this kinda testable.,type='comment'\nline_star:20,line_end:20|char_star:8,char_end:54"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:13,line_end:24|char_star:8,char_end:48"->"# horrible hack but makes this kinda testable.,type='comment'\nline_star:20,line_end:20|char_star:8,char_end:54";
"def __exit__(self, exc_type, exc_value, tb):\n        gc.collect()\n        new_objects = len(gc.get_objects())\n        if new_objects > self.old_objects:\n            pytest.fail('Example code leaked')\n        _gc_lock.release()\n        gc.enable(),type='function_definition'\nline_star:26,line_end:32|char_star:4,char_end:19"[shape="box",fillcolor="#cee6b4",style=filled];
"type='INFORMATION BLOCK'\nline_star:12,line_end:32|char_star:4,char_end:19"->"def __exit__(self, exc_type, exc_value, tb):\n        gc.collect()\n        new_objects = len(gc.get_objects())\n        if new_objects > self.old_objects:\n            pytest.fail('Example code leaked')\n        _gc_lock.release()\n        gc.enable(),type='function_definition'\nline_star:26,line_end:32|char_star:4,char_end:19";
"__exit__,type='identifier'\nline_star:26,line_end:26|char_star:8,char_end:16"[shape="point",fillcolor="#121013",style=filled];
"def __exit__(self, exc_type, exc_value, tb):\n        gc.collect()\n        new_objects = len(gc.get_objects())\n        if new_objects > self.old_objects:\n            pytest.fail('Example code leaked')\n        _gc_lock.release()\n        gc.enable(),type='function_definition'\nline_star:26,line_end:32|char_star:4,char_end:19"->"__exit__,type='identifier'\nline_star:26,line_end:26|char_star:8,char_end:16";
"(self, exc_type, exc_value, tb),type='parameters'\nline_star:26,line_end:26|char_star:16,char_end:47"[shape="box",fillcolor="white",style=filled];
"def __exit__(self, exc_type, exc_value, tb):\n        gc.collect()\n        new_objects = len(gc.get_objects())\n        if new_objects > self.old_objects:\n            pytest.fail('Example code leaked')\n        _gc_lock.release()\n        gc.enable(),type='function_definition'\nline_star:26,line_end:32|char_star:4,char_end:19"->"(self, exc_type, exc_value, tb),type='parameters'\nline_star:26,line_end:26|char_star:16,char_end:47";
"self,type='identifier'\nline_star:26,line_end:26|char_star:17,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"(self, exc_type, exc_value, tb),type='parameters'\nline_star:26,line_end:26|char_star:16,char_end:47"->"self,type='identifier'\nline_star:26,line_end:26|char_star:17,char_end:21";
"exc_type,type='identifier'\nline_star:26,line_end:26|char_star:23,char_end:31"[shape="point",fillcolor="#121013",style=filled];
"(self, exc_type, exc_value, tb),type='parameters'\nline_star:26,line_end:26|char_star:16,char_end:47"->"exc_type,type='identifier'\nline_star:26,line_end:26|char_star:23,char_end:31";
"exc_value,type='identifier'\nline_star:26,line_end:26|char_star:33,char_end:42"[shape="point",fillcolor="#121013",style=filled];
"(self, exc_type, exc_value, tb),type='parameters'\nline_star:26,line_end:26|char_star:16,char_end:47"->"exc_value,type='identifier'\nline_star:26,line_end:26|char_star:33,char_end:42";
"tb,type='identifier'\nline_star:26,line_end:26|char_star:44,char_end:46"[shape="point",fillcolor="#121013",style=filled];
"(self, exc_type, exc_value, tb),type='parameters'\nline_star:26,line_end:26|char_star:16,char_end:47"->"tb,type='identifier'\nline_star:26,line_end:26|char_star:44,char_end:46";
"type='INFORMATION BLOCK'\nline_star:27,line_end:32|char_star:8,char_end:19"[shape="point",fillcolor="#121013",style=filled];
"def __exit__(self, exc_type, exc_value, tb):\n        gc.collect()\n        new_objects = len(gc.get_objects())\n        if new_objects > self.old_objects:\n            pytest.fail('Example code leaked')\n        _gc_lock.release()\n        gc.enable(),type='function_definition'\nline_star:26,line_end:32|char_star:4,char_end:19"->"type='INFORMATION BLOCK'\nline_star:27,line_end:32|char_star:8,char_end:19";
"if new_objects > self.old_objects:\n            pytest.fail('Example code leaked'),type='if_statement'\nline_star:29,line_end:30|char_star:8,char_end:46"[shape="box",fillcolor="#9ecca4",style=filled];
"type='INFORMATION BLOCK'\nline_star:27,line_end:32|char_star:8,char_end:19"->"if new_objects > self.old_objects:\n            pytest.fail('Example code leaked'),type='if_statement'\nline_star:29,line_end:30|char_star:8,char_end:46";
"@pytest.mark.skipif(platform.python_implementation() == 'PyPy', reason='CPython only')\ndef test_memory_consumption():\n    app = flask.Flask(__name__)\n\n    @app.route('/')\n    def index():\n        return flask.render_template('simple_template.html', whiskey=42)\n\n    def fire():\n        with app.test_client() as c:\n            rv = c.get('/')\n            assert rv.status_code == 200\n            assert rv.data == b'<h1>42</h1>'\n\n    # Trigger caches\n    fire()\n\n    with assert_no_leak():\n        for _x in range(10):\n            fire(),type='decorated_definition'\nline_star:35,line_end:54|char_star:0,char_end:18"[shape="box",fillcolor="#c8c6a7",style=filled];
"MODULE"->"@pytest.mark.skipif(platform.python_implementation() == 'PyPy', reason='CPython only')\ndef test_memory_consumption():\n    app = flask.Flask(__name__)\n\n    @app.route('/')\n    def index():\n        return flask.render_template('simple_template.html', whiskey=42)\n\n    def fire():\n        with app.test_client() as c:\n            rv = c.get('/')\n            assert rv.status_code == 200\n            assert rv.data == b'<h1>42</h1>'\n\n    # Trigger caches\n    fire()\n\n    with assert_no_leak():\n        for _x in range(10):\n            fire(),type='decorated_definition'\nline_star:35,line_end:54|char_star:0,char_end:18";
"@pytest.mark.skipif(platform.python_implementation() == 'PyPy', reason='CPython only'),type='decorator'\nline_star:35,line_end:35|char_star:0,char_end:86"[shape="box",fillcolor="white",style=filled];
"@pytest.mark.skipif(platform.python_implementation() == 'PyPy', reason='CPython only')\ndef test_memory_consumption():\n    app = flask.Flask(__name__)\n\n    @app.route('/')\n    def index():\n        return flask.render_template('simple_template.html', whiskey=42)\n\n    def fire():\n        with app.test_client() as c:\n            rv = c.get('/')\n            assert rv.status_code == 200\n            assert rv.data == b'<h1>42</h1>'\n\n    # Trigger caches\n    fire()\n\n    with assert_no_leak():\n        for _x in range(10):\n            fire(),type='decorated_definition'\nline_star:35,line_end:54|char_star:0,char_end:18"->"@pytest.mark.skipif(platform.python_implementation() == 'PyPy', reason='CPython only'),type='decorator'\nline_star:35,line_end:35|char_star:0,char_end:86";
"def test_memory_consumption():\n    app = flask.Flask(__name__)\n\n    @app.route('/')\n    def index():\n        return flask.render_template('simple_template.html', whiskey=42)\n\n    def fire():\n        with app.test_client() as c:\n            rv = c.get('/')\n            assert rv.status_code == 200\n            assert rv.data == b'<h1>42</h1>'\n\n    # Trigger caches\n    fire()\n\n    with assert_no_leak():\n        for _x in range(10):\n            fire(),type='function_definition'\nline_star:36,line_end:54|char_star:0,char_end:18"[shape="box",fillcolor="#cee6b4",style=filled];
"@pytest.mark.skipif(platform.python_implementation() == 'PyPy', reason='CPython only')\ndef test_memory_consumption():\n    app = flask.Flask(__name__)\n\n    @app.route('/')\n    def index():\n        return flask.render_template('simple_template.html', whiskey=42)\n\n    def fire():\n        with app.test_client() as c:\n            rv = c.get('/')\n            assert rv.status_code == 200\n            assert rv.data == b'<h1>42</h1>'\n\n    # Trigger caches\n    fire()\n\n    with assert_no_leak():\n        for _x in range(10):\n            fire(),type='decorated_definition'\nline_star:35,line_end:54|char_star:0,char_end:18"->"def test_memory_consumption():\n    app = flask.Flask(__name__)\n\n    @app.route('/')\n    def index():\n        return flask.render_template('simple_template.html', whiskey=42)\n\n    def fire():\n        with app.test_client() as c:\n            rv = c.get('/')\n            assert rv.status_code == 200\n            assert rv.data == b'<h1>42</h1>'\n\n    # Trigger caches\n    fire()\n\n    with assert_no_leak():\n        for _x in range(10):\n            fire(),type='function_definition'\nline_star:36,line_end:54|char_star:0,char_end:18";
"test_memory_consumption,type='identifier'\nline_star:36,line_end:36|char_star:4,char_end:27"[shape="point",fillcolor="#121013",style=filled];
"def test_memory_consumption():\n    app = flask.Flask(__name__)\n\n    @app.route('/')\n    def index():\n        return flask.render_template('simple_template.html', whiskey=42)\n\n    def fire():\n        with app.test_client() as c:\n            rv = c.get('/')\n            assert rv.status_code == 200\n            assert rv.data == b'<h1>42</h1>'\n\n    # Trigger caches\n    fire()\n\n    with assert_no_leak():\n        for _x in range(10):\n            fire(),type='function_definition'\nline_star:36,line_end:54|char_star:0,char_end:18"->"test_memory_consumption,type='identifier'\nline_star:36,line_end:36|char_star:4,char_end:27";
"type='INFORMATION BLOCK'\nline_star:37,line_end:54|char_star:4,char_end:18"[shape="point",fillcolor="#121013",style=filled];
"def test_memory_consumption():\n    app = flask.Flask(__name__)\n\n    @app.route('/')\n    def index():\n        return flask.render_template('simple_template.html', whiskey=42)\n\n    def fire():\n        with app.test_client() as c:\n            rv = c.get('/')\n            assert rv.status_code == 200\n            assert rv.data == b'<h1>42</h1>'\n\n    # Trigger caches\n    fire()\n\n    with assert_no_leak():\n        for _x in range(10):\n            fire(),type='function_definition'\nline_star:36,line_end:54|char_star:0,char_end:18"->"type='INFORMATION BLOCK'\nline_star:37,line_end:54|char_star:4,char_end:18";
"@app.route('/')\n    def index():\n        return flask.render_template('simple_template.html', whiskey=42),type='decorated_definition'\nline_star:39,line_end:41|char_star:4,char_end:72"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:37,line_end:54|char_star:4,char_end:18"->"@app.route('/')\n    def index():\n        return flask.render_template('simple_template.html', whiskey=42),type='decorated_definition'\nline_star:39,line_end:41|char_star:4,char_end:72";
"@app.route('/'),type='decorator'\nline_star:39,line_end:39|char_star:4,char_end:19"[shape="box",fillcolor="white",style=filled];
"@app.route('/')\n    def index():\n        return flask.render_template('simple_template.html', whiskey=42),type='decorated_definition'\nline_star:39,line_end:41|char_star:4,char_end:72"->"@app.route('/'),type='decorator'\nline_star:39,line_end:39|char_star:4,char_end:19";
"def index():\n        return flask.render_template('simple_template.html', whiskey=42),type='function_definition'\nline_star:40,line_end:41|char_star:4,char_end:72"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.route('/')\n    def index():\n        return flask.render_template('simple_template.html', whiskey=42),type='decorated_definition'\nline_star:39,line_end:41|char_star:4,char_end:72"->"def index():\n        return flask.render_template('simple_template.html', whiskey=42),type='function_definition'\nline_star:40,line_end:41|char_star:4,char_end:72";
"index,type='identifier'\nline_star:40,line_end:40|char_star:8,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"def index():\n        return flask.render_template('simple_template.html', whiskey=42),type='function_definition'\nline_star:40,line_end:41|char_star:4,char_end:72"->"index,type='identifier'\nline_star:40,line_end:40|char_star:8,char_end:13";
"type='INFORMATION BLOCK'\nline_star:41,line_end:41|char_star:8,char_end:72"[shape="point",fillcolor="#121013",style=filled];
"def index():\n        return flask.render_template('simple_template.html', whiskey=42),type='function_definition'\nline_star:40,line_end:41|char_star:4,char_end:72"->"type='INFORMATION BLOCK'\nline_star:41,line_end:41|char_star:8,char_end:72";
"return flask.render_template('simple_template.html', whiskey=42),type='return_statement'\nline_star:41,line_end:41|char_star:8,char_end:72"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:41,line_end:41|char_star:8,char_end:72"->"return flask.render_template('simple_template.html', whiskey=42),type='return_statement'\nline_star:41,line_end:41|char_star:8,char_end:72";
"def fire():\n        with app.test_client() as c:\n            rv = c.get('/')\n            assert rv.status_code == 200\n            assert rv.data == b'<h1>42</h1>',type='function_definition'\nline_star:43,line_end:47|char_star:4,char_end:44"[shape="box",fillcolor="#cee6b4",style=filled];
"type='INFORMATION BLOCK'\nline_star:37,line_end:54|char_star:4,char_end:18"->"def fire():\n        with app.test_client() as c:\n            rv = c.get('/')\n            assert rv.status_code == 200\n            assert rv.data == b'<h1>42</h1>',type='function_definition'\nline_star:43,line_end:47|char_star:4,char_end:44";
"fire,type='identifier'\nline_star:43,line_end:43|char_star:8,char_end:12"[shape="point",fillcolor="#121013",style=filled];
"def fire():\n        with app.test_client() as c:\n            rv = c.get('/')\n            assert rv.status_code == 200\n            assert rv.data == b'<h1>42</h1>',type='function_definition'\nline_star:43,line_end:47|char_star:4,char_end:44"->"fire,type='identifier'\nline_star:43,line_end:43|char_star:8,char_end:12";
"type='INFORMATION BLOCK'\nline_star:44,line_end:47|char_star:8,char_end:44"[shape="point",fillcolor="#121013",style=filled];
"def fire():\n        with app.test_client() as c:\n            rv = c.get('/')\n            assert rv.status_code == 200\n            assert rv.data == b'<h1>42</h1>',type='function_definition'\nline_star:43,line_end:47|char_star:4,char_end:44"->"type='INFORMATION BLOCK'\nline_star:44,line_end:47|char_star:8,char_end:44";
"with app.test_client() as c:\n            rv = c.get('/')\n            assert rv.status_code == 200\n            assert rv.data == b'<h1>42</h1>',type='with_statement'\nline_star:44,line_end:47|char_star:8,char_end:44"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:44,line_end:47|char_star:8,char_end:44"->"with app.test_client() as c:\n            rv = c.get('/')\n            assert rv.status_code == 200\n            assert rv.data == b'<h1>42</h1>',type='with_statement'\nline_star:44,line_end:47|char_star:8,char_end:44";
"app.test_client() as c,type='with_clause'\nline_star:44,line_end:44|char_star:13,char_end:35"[shape="box",fillcolor="white",style=filled];
"with app.test_client() as c:\n            rv = c.get('/')\n            assert rv.status_code == 200\n            assert rv.data == b'<h1>42</h1>',type='with_statement'\nline_star:44,line_end:47|char_star:8,char_end:44"->"app.test_client() as c,type='with_clause'\nline_star:44,line_end:44|char_star:13,char_end:35";
"type='INFORMATION BLOCK'\nline_star:45,line_end:47|char_star:12,char_end:44"[shape="point",fillcolor="#121013",style=filled];
"with app.test_client() as c:\n            rv = c.get('/')\n            assert rv.status_code == 200\n            assert rv.data == b'<h1>42</h1>',type='with_statement'\nline_star:44,line_end:47|char_star:8,char_end:44"->"type='INFORMATION BLOCK'\nline_star:45,line_end:47|char_star:12,char_end:44";
"assert rv.status_code == 200,type='assert_statement'\nline_star:46,line_end:46|char_star:12,char_end:40"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:45,line_end:47|char_star:12,char_end:44"->"assert rv.status_code == 200,type='assert_statement'\nline_star:46,line_end:46|char_star:12,char_end:40";
"rv.status_code == 200,type='comparison_operator'\nline_star:46,line_end:46|char_star:19,char_end:40"[shape="box",fillcolor="white",style=filled];
"assert rv.status_code == 200,type='assert_statement'\nline_star:46,line_end:46|char_star:12,char_end:40"->"rv.status_code == 200,type='comparison_operator'\nline_star:46,line_end:46|char_star:19,char_end:40";
"rv.status_code,type='attribute'\nline_star:46,line_end:46|char_star:19,char_end:33"[shape="box",fillcolor="white",style=filled];
"rv.status_code == 200,type='comparison_operator'\nline_star:46,line_end:46|char_star:19,char_end:40"->"rv.status_code,type='attribute'\nline_star:46,line_end:46|char_star:19,char_end:33";
"rv,type='identifier'\nline_star:46,line_end:46|char_star:19,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"rv.status_code,type='attribute'\nline_star:46,line_end:46|char_star:19,char_end:33"->"rv,type='identifier'\nline_star:46,line_end:46|char_star:19,char_end:21";
"status_code,type='identifier'\nline_star:46,line_end:46|char_star:22,char_end:33"[shape="point",fillcolor="#121013",style=filled];
"rv.status_code,type='attribute'\nline_star:46,line_end:46|char_star:19,char_end:33"->"status_code,type='identifier'\nline_star:46,line_end:46|char_star:22,char_end:33";
"assert rv.data == b'<h1>42</h1>',type='assert_statement'\nline_star:47,line_end:47|char_star:12,char_end:44"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:45,line_end:47|char_star:12,char_end:44"->"assert rv.data == b'<h1>42</h1>',type='assert_statement'\nline_star:47,line_end:47|char_star:12,char_end:44";
"rv.data == b'<h1>42</h1>',type='comparison_operator'\nline_star:47,line_end:47|char_star:19,char_end:44"[shape="box",fillcolor="white",style=filled];
"assert rv.data == b'<h1>42</h1>',type='assert_statement'\nline_star:47,line_end:47|char_star:12,char_end:44"->"rv.data == b'<h1>42</h1>',type='comparison_operator'\nline_star:47,line_end:47|char_star:19,char_end:44";
"rv.data,type='attribute'\nline_star:47,line_end:47|char_star:19,char_end:26"[shape="box",fillcolor="white",style=filled];
"rv.data == b'<h1>42</h1>',type='comparison_operator'\nline_star:47,line_end:47|char_star:19,char_end:44"->"rv.data,type='attribute'\nline_star:47,line_end:47|char_star:19,char_end:26";
"rv,type='identifier'\nline_star:47,line_end:47|char_star:19,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"rv.data,type='attribute'\nline_star:47,line_end:47|char_star:19,char_end:26"->"rv,type='identifier'\nline_star:47,line_end:47|char_star:19,char_end:21";
"data,type='identifier'\nline_star:47,line_end:47|char_star:22,char_end:26"[shape="point",fillcolor="#121013",style=filled];
"rv.data,type='attribute'\nline_star:47,line_end:47|char_star:19,char_end:26"->"data,type='identifier'\nline_star:47,line_end:47|char_star:22,char_end:26";
"# Trigger caches,type='comment'\nline_star:49,line_end:49|char_star:4,char_end:20"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:37,line_end:54|char_star:4,char_end:18"->"# Trigger caches,type='comment'\nline_star:49,line_end:49|char_star:4,char_end:20";
"with assert_no_leak():\n        for _x in range(10):\n            fire(),type='with_statement'\nline_star:52,line_end:54|char_star:4,char_end:18"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:37,line_end:54|char_star:4,char_end:18"->"with assert_no_leak():\n        for _x in range(10):\n            fire(),type='with_statement'\nline_star:52,line_end:54|char_star:4,char_end:18";
"assert_no_leak(),type='with_clause'\nline_star:52,line_end:52|char_star:9,char_end:25"[shape="box",fillcolor="white",style=filled];
"with assert_no_leak():\n        for _x in range(10):\n            fire(),type='with_statement'\nline_star:52,line_end:54|char_star:4,char_end:18"->"assert_no_leak(),type='with_clause'\nline_star:52,line_end:52|char_star:9,char_end:25";
"type='INFORMATION BLOCK'\nline_star:53,line_end:54|char_star:8,char_end:18"[shape="point",fillcolor="#121013",style=filled];
"with assert_no_leak():\n        for _x in range(10):\n            fire(),type='with_statement'\nline_star:52,line_end:54|char_star:4,char_end:18"->"type='INFORMATION BLOCK'\nline_star:53,line_end:54|char_star:8,char_end:18";
"for _x in range(10):\n            fire(),type='for_statement'\nline_star:53,line_end:54|char_star:8,char_end:18"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:53,line_end:54|char_star:8,char_end:18"->"for _x in range(10):\n            fire(),type='for_statement'\nline_star:53,line_end:54|char_star:8,char_end:18";
"def test_aborting(app):\n    class Foo(Exception):\n        whatever = 42\n\n    @app.errorhandler(Foo)\n    def handle_foo(e):\n        return str(e.whatever)\n\n    @app.route('/')\n    def index():\n        raise flask.abort(flask.redirect(flask.url_for('test')))\n\n    @app.route('/test')\n    def test():\n        raise Foo()\n\n    with app.test_client() as c:\n        rv = c.get('/')\n        assert rv.headers['Location'] == 'http://localhost/test'\n        rv = c.get('/test')\n        assert rv.data == b'42',type='function_definition'\nline_star:57,line_end:77|char_star:0,char_end:31"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_aborting(app):\n    class Foo(Exception):\n        whatever = 42\n\n    @app.errorhandler(Foo)\n    def handle_foo(e):\n        return str(e.whatever)\n\n    @app.route('/')\n    def index():\n        raise flask.abort(flask.redirect(flask.url_for('test')))\n\n    @app.route('/test')\n    def test():\n        raise Foo()\n\n    with app.test_client() as c:\n        rv = c.get('/')\n        assert rv.headers['Location'] == 'http://localhost/test'\n        rv = c.get('/test')\n        assert rv.data == b'42',type='function_definition'\nline_star:57,line_end:77|char_star:0,char_end:31";
"test_aborting,type='identifier'\nline_star:57,line_end:57|char_star:4,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"def test_aborting(app):\n    class Foo(Exception):\n        whatever = 42\n\n    @app.errorhandler(Foo)\n    def handle_foo(e):\n        return str(e.whatever)\n\n    @app.route('/')\n    def index():\n        raise flask.abort(flask.redirect(flask.url_for('test')))\n\n    @app.route('/test')\n    def test():\n        raise Foo()\n\n    with app.test_client() as c:\n        rv = c.get('/')\n        assert rv.headers['Location'] == 'http://localhost/test'\n        rv = c.get('/test')\n        assert rv.data == b'42',type='function_definition'\nline_star:57,line_end:77|char_star:0,char_end:31"->"test_aborting,type='identifier'\nline_star:57,line_end:57|char_star:4,char_end:17";
"(app),type='parameters'\nline_star:57,line_end:57|char_star:17,char_end:22"[shape="box",fillcolor="white",style=filled];
"def test_aborting(app):\n    class Foo(Exception):\n        whatever = 42\n\n    @app.errorhandler(Foo)\n    def handle_foo(e):\n        return str(e.whatever)\n\n    @app.route('/')\n    def index():\n        raise flask.abort(flask.redirect(flask.url_for('test')))\n\n    @app.route('/test')\n    def test():\n        raise Foo()\n\n    with app.test_client() as c:\n        rv = c.get('/')\n        assert rv.headers['Location'] == 'http://localhost/test'\n        rv = c.get('/test')\n        assert rv.data == b'42',type='function_definition'\nline_star:57,line_end:77|char_star:0,char_end:31"->"(app),type='parameters'\nline_star:57,line_end:57|char_star:17,char_end:22";
"app,type='identifier'\nline_star:57,line_end:57|char_star:18,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"(app),type='parameters'\nline_star:57,line_end:57|char_star:17,char_end:22"->"app,type='identifier'\nline_star:57,line_end:57|char_star:18,char_end:21";
"type='INFORMATION BLOCK'\nline_star:58,line_end:77|char_star:4,char_end:31"[shape="point",fillcolor="#121013",style=filled];
"def test_aborting(app):\n    class Foo(Exception):\n        whatever = 42\n\n    @app.errorhandler(Foo)\n    def handle_foo(e):\n        return str(e.whatever)\n\n    @app.route('/')\n    def index():\n        raise flask.abort(flask.redirect(flask.url_for('test')))\n\n    @app.route('/test')\n    def test():\n        raise Foo()\n\n    with app.test_client() as c:\n        rv = c.get('/')\n        assert rv.headers['Location'] == 'http://localhost/test'\n        rv = c.get('/test')\n        assert rv.data == b'42',type='function_definition'\nline_star:57,line_end:77|char_star:0,char_end:31"->"type='INFORMATION BLOCK'\nline_star:58,line_end:77|char_star:4,char_end:31";
"class Foo(Exception):\n        whatever = 42,type='class_definition'\nline_star:58,line_end:59|char_star:4,char_end:21"[shape="box",fillcolor="#ffdf91",style=filled];
"type='INFORMATION BLOCK'\nline_star:58,line_end:77|char_star:4,char_end:31"->"class Foo(Exception):\n        whatever = 42,type='class_definition'\nline_star:58,line_end:59|char_star:4,char_end:21";
"Foo,type='identifier'\nline_star:58,line_end:58|char_star:10,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"class Foo(Exception):\n        whatever = 42,type='class_definition'\nline_star:58,line_end:59|char_star:4,char_end:21"->"Foo,type='identifier'\nline_star:58,line_end:58|char_star:10,char_end:13";
"(Exception),type='argument_list'\nline_star:58,line_end:58|char_star:13,char_end:24"[shape="box",fillcolor="white",style=filled];
"class Foo(Exception):\n        whatever = 42,type='class_definition'\nline_star:58,line_end:59|char_star:4,char_end:21"->"(Exception),type='argument_list'\nline_star:58,line_end:58|char_star:13,char_end:24";
"Exception,type='identifier'\nline_star:58,line_end:58|char_star:14,char_end:23"[shape="point",fillcolor="#121013",style=filled];
"(Exception),type='argument_list'\nline_star:58,line_end:58|char_star:13,char_end:24"->"Exception,type='identifier'\nline_star:58,line_end:58|char_star:14,char_end:23";
"type='INFORMATION BLOCK'\nline_star:59,line_end:59|char_star:8,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"class Foo(Exception):\n        whatever = 42,type='class_definition'\nline_star:58,line_end:59|char_star:4,char_end:21"->"type='INFORMATION BLOCK'\nline_star:59,line_end:59|char_star:8,char_end:21";
"@app.errorhandler(Foo)\n    def handle_foo(e):\n        return str(e.whatever),type='decorated_definition'\nline_star:61,line_end:63|char_star:4,char_end:30"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:58,line_end:77|char_star:4,char_end:31"->"@app.errorhandler(Foo)\n    def handle_foo(e):\n        return str(e.whatever),type='decorated_definition'\nline_star:61,line_end:63|char_star:4,char_end:30";
"@app.errorhandler(Foo),type='decorator'\nline_star:61,line_end:61|char_star:4,char_end:26"[shape="box",fillcolor="white",style=filled];
"@app.errorhandler(Foo)\n    def handle_foo(e):\n        return str(e.whatever),type='decorated_definition'\nline_star:61,line_end:63|char_star:4,char_end:30"->"@app.errorhandler(Foo),type='decorator'\nline_star:61,line_end:61|char_star:4,char_end:26";
"def handle_foo(e):\n        return str(e.whatever),type='function_definition'\nline_star:62,line_end:63|char_star:4,char_end:30"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.errorhandler(Foo)\n    def handle_foo(e):\n        return str(e.whatever),type='decorated_definition'\nline_star:61,line_end:63|char_star:4,char_end:30"->"def handle_foo(e):\n        return str(e.whatever),type='function_definition'\nline_star:62,line_end:63|char_star:4,char_end:30";
"handle_foo,type='identifier'\nline_star:62,line_end:62|char_star:8,char_end:18"[shape="point",fillcolor="#121013",style=filled];
"def handle_foo(e):\n        return str(e.whatever),type='function_definition'\nline_star:62,line_end:63|char_star:4,char_end:30"->"handle_foo,type='identifier'\nline_star:62,line_end:62|char_star:8,char_end:18";
"(e),type='parameters'\nline_star:62,line_end:62|char_star:18,char_end:21"[shape="box",fillcolor="white",style=filled];
"def handle_foo(e):\n        return str(e.whatever),type='function_definition'\nline_star:62,line_end:63|char_star:4,char_end:30"->"(e),type='parameters'\nline_star:62,line_end:62|char_star:18,char_end:21";
"e,type='identifier'\nline_star:62,line_end:62|char_star:19,char_end:20"[shape="point",fillcolor="#121013",style=filled];
"(e),type='parameters'\nline_star:62,line_end:62|char_star:18,char_end:21"->"e,type='identifier'\nline_star:62,line_end:62|char_star:19,char_end:20";
"type='INFORMATION BLOCK'\nline_star:63,line_end:63|char_star:8,char_end:30"[shape="point",fillcolor="#121013",style=filled];
"def handle_foo(e):\n        return str(e.whatever),type='function_definition'\nline_star:62,line_end:63|char_star:4,char_end:30"->"type='INFORMATION BLOCK'\nline_star:63,line_end:63|char_star:8,char_end:30";
"return str(e.whatever),type='return_statement'\nline_star:63,line_end:63|char_star:8,char_end:30"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:63,line_end:63|char_star:8,char_end:30"->"return str(e.whatever),type='return_statement'\nline_star:63,line_end:63|char_star:8,char_end:30";
"@app.route('/')\n    def index():\n        raise flask.abort(flask.redirect(flask.url_for('test'))),type='decorated_definition'\nline_star:65,line_end:67|char_star:4,char_end:64"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:58,line_end:77|char_star:4,char_end:31"->"@app.route('/')\n    def index():\n        raise flask.abort(flask.redirect(flask.url_for('test'))),type='decorated_definition'\nline_star:65,line_end:67|char_star:4,char_end:64";
"@app.route('/'),type='decorator'\nline_star:65,line_end:65|char_star:4,char_end:19"[shape="box",fillcolor="white",style=filled];
"@app.route('/')\n    def index():\n        raise flask.abort(flask.redirect(flask.url_for('test'))),type='decorated_definition'\nline_star:65,line_end:67|char_star:4,char_end:64"->"@app.route('/'),type='decorator'\nline_star:65,line_end:65|char_star:4,char_end:19";
"def index():\n        raise flask.abort(flask.redirect(flask.url_for('test'))),type='function_definition'\nline_star:66,line_end:67|char_star:4,char_end:64"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.route('/')\n    def index():\n        raise flask.abort(flask.redirect(flask.url_for('test'))),type='decorated_definition'\nline_star:65,line_end:67|char_star:4,char_end:64"->"def index():\n        raise flask.abort(flask.redirect(flask.url_for('test'))),type='function_definition'\nline_star:66,line_end:67|char_star:4,char_end:64";
"index,type='identifier'\nline_star:66,line_end:66|char_star:8,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"def index():\n        raise flask.abort(flask.redirect(flask.url_for('test'))),type='function_definition'\nline_star:66,line_end:67|char_star:4,char_end:64"->"index,type='identifier'\nline_star:66,line_end:66|char_star:8,char_end:13";
"type='INFORMATION BLOCK'\nline_star:67,line_end:67|char_star:8,char_end:64"[shape="point",fillcolor="#121013",style=filled];
"def index():\n        raise flask.abort(flask.redirect(flask.url_for('test'))),type='function_definition'\nline_star:66,line_end:67|char_star:4,char_end:64"->"type='INFORMATION BLOCK'\nline_star:67,line_end:67|char_star:8,char_end:64";
"raise flask.abort(flask.redirect(flask.url_for('test'))),type='raise_statement'\nline_star:67,line_end:67|char_star:8,char_end:64"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:67,line_end:67|char_star:8,char_end:64"->"raise flask.abort(flask.redirect(flask.url_for('test'))),type='raise_statement'\nline_star:67,line_end:67|char_star:8,char_end:64";
"raise,type='raise'\nline_star:67,line_end:67|char_star:8,char_end:13"[shape="box",fillcolor="white",style=filled];
"raise flask.abort(flask.redirect(flask.url_for('test'))),type='raise_statement'\nline_star:67,line_end:67|char_star:8,char_end:64"->"raise,type='raise'\nline_star:67,line_end:67|char_star:8,char_end:13";
"flask.abort(flask.redirect(flask.url_for('test'))),type='call'\nline_star:67,line_end:67|char_star:14,char_end:64"[shape="box",fillcolor="white",style=filled];
"raise flask.abort(flask.redirect(flask.url_for('test'))),type='raise_statement'\nline_star:67,line_end:67|char_star:8,char_end:64"->"flask.abort(flask.redirect(flask.url_for('test'))),type='call'\nline_star:67,line_end:67|char_star:14,char_end:64";
"flask.abort,type='attribute'\nline_star:67,line_end:67|char_star:14,char_end:25"[shape="box",fillcolor="white",style=filled];
"flask.abort(flask.redirect(flask.url_for('test'))),type='call'\nline_star:67,line_end:67|char_star:14,char_end:64"->"flask.abort,type='attribute'\nline_star:67,line_end:67|char_star:14,char_end:25";
"flask,type='identifier'\nline_star:67,line_end:67|char_star:14,char_end:19"[shape="point",fillcolor="#121013",style=filled];
"flask.abort,type='attribute'\nline_star:67,line_end:67|char_star:14,char_end:25"->"flask,type='identifier'\nline_star:67,line_end:67|char_star:14,char_end:19";
"abort,type='identifier'\nline_star:67,line_end:67|char_star:20,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"flask.abort,type='attribute'\nline_star:67,line_end:67|char_star:14,char_end:25"->"abort,type='identifier'\nline_star:67,line_end:67|char_star:20,char_end:25";
"(flask.redirect(flask.url_for('test'))),type='argument_list'\nline_star:67,line_end:67|char_star:25,char_end:64"[shape="box",fillcolor="white",style=filled];
"flask.abort(flask.redirect(flask.url_for('test'))),type='call'\nline_star:67,line_end:67|char_star:14,char_end:64"->"(flask.redirect(flask.url_for('test'))),type='argument_list'\nline_star:67,line_end:67|char_star:25,char_end:64";
"flask.redirect(flask.url_for('test')),type='call'\nline_star:67,line_end:67|char_star:26,char_end:63"[shape="box",fillcolor="white",style=filled];
"(flask.redirect(flask.url_for('test'))),type='argument_list'\nline_star:67,line_end:67|char_star:25,char_end:64"->"flask.redirect(flask.url_for('test')),type='call'\nline_star:67,line_end:67|char_star:26,char_end:63";
"flask.redirect,type='attribute'\nline_star:67,line_end:67|char_star:26,char_end:40"[shape="box",fillcolor="white",style=filled];
"flask.redirect(flask.url_for('test')),type='call'\nline_star:67,line_end:67|char_star:26,char_end:63"->"flask.redirect,type='attribute'\nline_star:67,line_end:67|char_star:26,char_end:40";
"flask,type='identifier'\nline_star:67,line_end:67|char_star:26,char_end:31"[shape="point",fillcolor="#121013",style=filled];
"flask.redirect,type='attribute'\nline_star:67,line_end:67|char_star:26,char_end:40"->"flask,type='identifier'\nline_star:67,line_end:67|char_star:26,char_end:31";
"redirect,type='identifier'\nline_star:67,line_end:67|char_star:32,char_end:40"[shape="point",fillcolor="#121013",style=filled];
"flask.redirect,type='attribute'\nline_star:67,line_end:67|char_star:26,char_end:40"->"redirect,type='identifier'\nline_star:67,line_end:67|char_star:32,char_end:40";
"(flask.url_for('test')),type='argument_list'\nline_star:67,line_end:67|char_star:40,char_end:63"[shape="box",fillcolor="white",style=filled];
"flask.redirect(flask.url_for('test')),type='call'\nline_star:67,line_end:67|char_star:26,char_end:63"->"(flask.url_for('test')),type='argument_list'\nline_star:67,line_end:67|char_star:40,char_end:63";
"flask.url_for('test'),type='call'\nline_star:67,line_end:67|char_star:41,char_end:62"[shape="box",fillcolor="white",style=filled];
"(flask.url_for('test')),type='argument_list'\nline_star:67,line_end:67|char_star:40,char_end:63"->"flask.url_for('test'),type='call'\nline_star:67,line_end:67|char_star:41,char_end:62";
"flask.url_for,type='attribute'\nline_star:67,line_end:67|char_star:41,char_end:54"[shape="box",fillcolor="white",style=filled];
"flask.url_for('test'),type='call'\nline_star:67,line_end:67|char_star:41,char_end:62"->"flask.url_for,type='attribute'\nline_star:67,line_end:67|char_star:41,char_end:54";
"flask,type='identifier'\nline_star:67,line_end:67|char_star:41,char_end:46"[shape="point",fillcolor="#121013",style=filled];
"flask.url_for,type='attribute'\nline_star:67,line_end:67|char_star:41,char_end:54"->"flask,type='identifier'\nline_star:67,line_end:67|char_star:41,char_end:46";
"url_for,type='identifier'\nline_star:67,line_end:67|char_star:47,char_end:54"[shape="point",fillcolor="#121013",style=filled];
"flask.url_for,type='attribute'\nline_star:67,line_end:67|char_star:41,char_end:54"->"url_for,type='identifier'\nline_star:67,line_end:67|char_star:47,char_end:54";
"('test'),type='argument_list'\nline_star:67,line_end:67|char_star:54,char_end:62"[shape="box",fillcolor="white",style=filled];
"flask.url_for('test'),type='call'\nline_star:67,line_end:67|char_star:41,char_end:62"->"('test'),type='argument_list'\nline_star:67,line_end:67|char_star:54,char_end:62";
"@app.route('/test')\n    def test():\n        raise Foo(),type='decorated_definition'\nline_star:69,line_end:71|char_star:4,char_end:19"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:58,line_end:77|char_star:4,char_end:31"->"@app.route('/test')\n    def test():\n        raise Foo(),type='decorated_definition'\nline_star:69,line_end:71|char_star:4,char_end:19";
"@app.route('/test'),type='decorator'\nline_star:69,line_end:69|char_star:4,char_end:23"[shape="box",fillcolor="white",style=filled];
"@app.route('/test')\n    def test():\n        raise Foo(),type='decorated_definition'\nline_star:69,line_end:71|char_star:4,char_end:19"->"@app.route('/test'),type='decorator'\nline_star:69,line_end:69|char_star:4,char_end:23";
"def test():\n        raise Foo(),type='function_definition'\nline_star:70,line_end:71|char_star:4,char_end:19"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.route('/test')\n    def test():\n        raise Foo(),type='decorated_definition'\nline_star:69,line_end:71|char_star:4,char_end:19"->"def test():\n        raise Foo(),type='function_definition'\nline_star:70,line_end:71|char_star:4,char_end:19";
"test,type='identifier'\nline_star:70,line_end:70|char_star:8,char_end:12"[shape="point",fillcolor="#121013",style=filled];
"def test():\n        raise Foo(),type='function_definition'\nline_star:70,line_end:71|char_star:4,char_end:19"->"test,type='identifier'\nline_star:70,line_end:70|char_star:8,char_end:12";
"type='INFORMATION BLOCK'\nline_star:71,line_end:71|char_star:8,char_end:19"[shape="point",fillcolor="#121013",style=filled];
"def test():\n        raise Foo(),type='function_definition'\nline_star:70,line_end:71|char_star:4,char_end:19"->"type='INFORMATION BLOCK'\nline_star:71,line_end:71|char_star:8,char_end:19";
"raise Foo(),type='raise_statement'\nline_star:71,line_end:71|char_star:8,char_end:19"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:71,line_end:71|char_star:8,char_end:19"->"raise Foo(),type='raise_statement'\nline_star:71,line_end:71|char_star:8,char_end:19";
"raise,type='raise'\nline_star:71,line_end:71|char_star:8,char_end:13"[shape="box",fillcolor="white",style=filled];
"raise Foo(),type='raise_statement'\nline_star:71,line_end:71|char_star:8,char_end:19"->"raise,type='raise'\nline_star:71,line_end:71|char_star:8,char_end:13";
"Foo(),type='call'\nline_star:71,line_end:71|char_star:14,char_end:19"[shape="box",fillcolor="white",style=filled];
"raise Foo(),type='raise_statement'\nline_star:71,line_end:71|char_star:8,char_end:19"->"Foo(),type='call'\nline_star:71,line_end:71|char_star:14,char_end:19";
"Foo,type='identifier'\nline_star:71,line_end:71|char_star:14,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"Foo(),type='call'\nline_star:71,line_end:71|char_star:14,char_end:19"->"Foo,type='identifier'\nline_star:71,line_end:71|char_star:14,char_end:17";
"with app.test_client() as c:\n        rv = c.get('/')\n        assert rv.headers['Location'] == 'http://localhost/test'\n        rv = c.get('/test')\n        assert rv.data == b'42',type='with_statement'\nline_star:73,line_end:77|char_star:4,char_end:31"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:58,line_end:77|char_star:4,char_end:31"->"with app.test_client() as c:\n        rv = c.get('/')\n        assert rv.headers['Location'] == 'http://localhost/test'\n        rv = c.get('/test')\n        assert rv.data == b'42',type='with_statement'\nline_star:73,line_end:77|char_star:4,char_end:31";
"app.test_client() as c,type='with_clause'\nline_star:73,line_end:73|char_star:9,char_end:31"[shape="box",fillcolor="white",style=filled];
"with app.test_client() as c:\n        rv = c.get('/')\n        assert rv.headers['Location'] == 'http://localhost/test'\n        rv = c.get('/test')\n        assert rv.data == b'42',type='with_statement'\nline_star:73,line_end:77|char_star:4,char_end:31"->"app.test_client() as c,type='with_clause'\nline_star:73,line_end:73|char_star:9,char_end:31";
"type='INFORMATION BLOCK'\nline_star:74,line_end:77|char_star:8,char_end:31"[shape="point",fillcolor="#121013",style=filled];
"with app.test_client() as c:\n        rv = c.get('/')\n        assert rv.headers['Location'] == 'http://localhost/test'\n        rv = c.get('/test')\n        assert rv.data == b'42',type='with_statement'\nline_star:73,line_end:77|char_star:4,char_end:31"->"type='INFORMATION BLOCK'\nline_star:74,line_end:77|char_star:8,char_end:31";
"assert rv.headers['Location'] == 'http://localhost/test',type='assert_statement'\nline_star:75,line_end:75|char_star:8,char_end:64"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:74,line_end:77|char_star:8,char_end:31"->"assert rv.headers['Location'] == 'http://localhost/test',type='assert_statement'\nline_star:75,line_end:75|char_star:8,char_end:64";
"rv.headers['Location'] == 'http://localhost/test',type='comparison_operator'\nline_star:75,line_end:75|char_star:15,char_end:64"[shape="box",fillcolor="white",style=filled];
"assert rv.headers['Location'] == 'http://localhost/test',type='assert_statement'\nline_star:75,line_end:75|char_star:8,char_end:64"->"rv.headers['Location'] == 'http://localhost/test',type='comparison_operator'\nline_star:75,line_end:75|char_star:15,char_end:64";
"rv.headers['Location'],type='subscript'\nline_star:75,line_end:75|char_star:15,char_end:37"[shape="box",fillcolor="white",style=filled];
"rv.headers['Location'] == 'http://localhost/test',type='comparison_operator'\nline_star:75,line_end:75|char_star:15,char_end:64"->"rv.headers['Location'],type='subscript'\nline_star:75,line_end:75|char_star:15,char_end:37";
"rv.headers,type='attribute'\nline_star:75,line_end:75|char_star:15,char_end:25"[shape="box",fillcolor="white",style=filled];
"rv.headers['Location'],type='subscript'\nline_star:75,line_end:75|char_star:15,char_end:37"->"rv.headers,type='attribute'\nline_star:75,line_end:75|char_star:15,char_end:25";
"rv,type='identifier'\nline_star:75,line_end:75|char_star:15,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"rv.headers,type='attribute'\nline_star:75,line_end:75|char_star:15,char_end:25"->"rv,type='identifier'\nline_star:75,line_end:75|char_star:15,char_end:17";
"headers,type='identifier'\nline_star:75,line_end:75|char_star:18,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"rv.headers,type='attribute'\nline_star:75,line_end:75|char_star:15,char_end:25"->"headers,type='identifier'\nline_star:75,line_end:75|char_star:18,char_end:25";
"assert rv.data == b'42',type='assert_statement'\nline_star:77,line_end:77|char_star:8,char_end:31"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:74,line_end:77|char_star:8,char_end:31"->"assert rv.data == b'42',type='assert_statement'\nline_star:77,line_end:77|char_star:8,char_end:31";
"rv.data == b'42',type='comparison_operator'\nline_star:77,line_end:77|char_star:15,char_end:31"[shape="box",fillcolor="white",style=filled];
"assert rv.data == b'42',type='assert_statement'\nline_star:77,line_end:77|char_star:8,char_end:31"->"rv.data == b'42',type='comparison_operator'\nline_star:77,line_end:77|char_star:15,char_end:31";
"rv.data,type='attribute'\nline_star:77,line_end:77|char_star:15,char_end:22"[shape="box",fillcolor="white",style=filled];
"rv.data == b'42',type='comparison_operator'\nline_star:77,line_end:77|char_star:15,char_end:31"->"rv.data,type='attribute'\nline_star:77,line_end:77|char_star:15,char_end:22";
"rv,type='identifier'\nline_star:77,line_end:77|char_star:15,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"rv.data,type='attribute'\nline_star:77,line_end:77|char_star:15,char_end:22"->"rv,type='identifier'\nline_star:77,line_end:77|char_star:15,char_end:17";
"data,type='identifier'\nline_star:77,line_end:77|char_star:18,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"rv.data,type='attribute'\nline_star:77,line_end:77|char_star:15,char_end:22"->"data,type='identifier'\nline_star:77,line_end:77|char_star:18,char_end:22";
"import gc\nimport platform\nimport threading\nimport pytest\nimport flas"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"import gc\nimport platform\nimport threading\nimport pytest\nimport flas"
}
