digraph G{
rankdir="LR";
"MODULE"[shape="box",fillcolor="white",style=filled];
"# This file was part of Flask-CLI and was modified under the terms of,type='comment'\nline_star:0,line_end:0|char_star:0,char_end:69"[shape="box",fillcolor="#f0c929",style=filled];
"MODULE"->"# This file was part of Flask-CLI and was modified under the terms of,type='comment'\nline_star:0,line_end:0|char_star:0,char_end:69";
"# its Revised BSD License. Copyright © 2015 CERN.,type='comment'\nline_star:1,line_end:1|char_star:0,char_end:50"[shape="box",fillcolor="#f0c929",style=filled];
"MODULE"->"# its Revised BSD License. Copyright © 2015 CERN.,type='comment'\nline_star:1,line_end:1|char_star:0,char_end:50";
"import os,type='import_statement'\nline_star:2,line_end:2|char_star:0,char_end:9"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"import os,type='import_statement'\nline_star:2,line_end:2|char_star:0,char_end:9";
"import ssl,type='import_statement'\nline_star:3,line_end:3|char_star:0,char_end:10"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"import ssl,type='import_statement'\nline_star:3,line_end:3|char_star:0,char_end:10";
"import sys,type='import_statement'\nline_star:4,line_end:4|char_star:0,char_end:10"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"import sys,type='import_statement'\nline_star:4,line_end:4|char_star:0,char_end:10";
"import types,type='import_statement'\nline_star:5,line_end:5|char_star:0,char_end:12"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"import types,type='import_statement'\nline_star:5,line_end:5|char_star:0,char_end:12";
"from functools import partial,type='import_from_statement'\nline_star:6,line_end:6|char_star:0,char_end:29"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"from functools import partial,type='import_from_statement'\nline_star:6,line_end:6|char_star:0,char_end:29";
"import click,type='import_statement'\nline_star:8,line_end:8|char_star:0,char_end:12"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"import click,type='import_statement'\nline_star:8,line_end:8|char_star:0,char_end:12";
"import pytest,type='import_statement'\nline_star:9,line_end:9|char_star:0,char_end:13"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"import pytest,type='import_statement'\nline_star:9,line_end:9|char_star:0,char_end:13";
"from _pytest.monkeypatch import notset,type='import_from_statement'\nline_star:10,line_end:10|char_star:0,char_end:38"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"from _pytest.monkeypatch import notset,type='import_from_statement'\nline_star:10,line_end:10|char_star:0,char_end:38";
"from click.testing import CliRunner,type='import_from_statement'\nline_star:11,line_end:11|char_star:0,char_end:35"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"from click.testing import CliRunner,type='import_from_statement'\nline_star:11,line_end:11|char_star:0,char_end:35";
"from flask import Blueprint,type='import_from_statement'\nline_star:13,line_end:13|char_star:0,char_end:27"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"from flask import Blueprint,type='import_from_statement'\nline_star:13,line_end:13|char_star:0,char_end:27";
"from flask import current_app,type='import_from_statement'\nline_star:14,line_end:14|char_star:0,char_end:29"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"from flask import current_app,type='import_from_statement'\nline_star:14,line_end:14|char_star:0,char_end:29";
"from flask import Flask,type='import_from_statement'\nline_star:15,line_end:15|char_star:0,char_end:23"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"from flask import Flask,type='import_from_statement'\nline_star:15,line_end:15|char_star:0,char_end:23";
"from flask.cli import AppGroup,type='import_from_statement'\nline_star:16,line_end:16|char_star:0,char_end:30"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"from flask.cli import AppGroup,type='import_from_statement'\nline_star:16,line_end:16|char_star:0,char_end:30";
"from flask.cli import dotenv,type='import_from_statement'\nline_star:17,line_end:17|char_star:0,char_end:28"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"from flask.cli import dotenv,type='import_from_statement'\nline_star:17,line_end:17|char_star:0,char_end:28";
"from flask.cli import find_best_app,type='import_from_statement'\nline_star:18,line_end:18|char_star:0,char_end:35"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"from flask.cli import find_best_app,type='import_from_statement'\nline_star:18,line_end:18|char_star:0,char_end:35";
"from flask.cli import FlaskGroup,type='import_from_statement'\nline_star:19,line_end:19|char_star:0,char_end:32"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"from flask.cli import FlaskGroup,type='import_from_statement'\nline_star:19,line_end:19|char_star:0,char_end:32";
"from flask.cli import get_version,type='import_from_statement'\nline_star:20,line_end:20|char_star:0,char_end:33"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"from flask.cli import get_version,type='import_from_statement'\nline_star:20,line_end:20|char_star:0,char_end:33";
"from flask.cli import load_dotenv,type='import_from_statement'\nline_star:21,line_end:21|char_star:0,char_end:33"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"from flask.cli import load_dotenv,type='import_from_statement'\nline_star:21,line_end:21|char_star:0,char_end:33";
"from flask.cli import locate_app,type='import_from_statement'\nline_star:22,line_end:22|char_star:0,char_end:32"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"from flask.cli import locate_app,type='import_from_statement'\nline_star:22,line_end:22|char_star:0,char_end:32";
"from flask.cli import NoAppException,type='import_from_statement'\nline_star:23,line_end:23|char_star:0,char_end:36"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"from flask.cli import NoAppException,type='import_from_statement'\nline_star:23,line_end:23|char_star:0,char_end:36";
"from flask.cli import prepare_import,type='import_from_statement'\nline_star:24,line_end:24|char_star:0,char_end:36"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"from flask.cli import prepare_import,type='import_from_statement'\nline_star:24,line_end:24|char_star:0,char_end:36";
"from flask.cli import run_command,type='import_from_statement'\nline_star:25,line_end:25|char_star:0,char_end:33"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"from flask.cli import run_command,type='import_from_statement'\nline_star:25,line_end:25|char_star:0,char_end:33";
"from flask.cli import ScriptInfo,type='import_from_statement'\nline_star:26,line_end:26|char_star:0,char_end:32"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"from flask.cli import ScriptInfo,type='import_from_statement'\nline_star:26,line_end:26|char_star:0,char_end:32";
"from flask.cli import with_appcontext,type='import_from_statement'\nline_star:27,line_end:27|char_star:0,char_end:37"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"from flask.cli import with_appcontext,type='import_from_statement'\nline_star:27,line_end:27|char_star:0,char_end:37";
"@pytest.fixture\ndef runner():\n    return CliRunner(),type='decorated_definition'\nline_star:33,line_end:35|char_star:0,char_end:22"[shape="box",fillcolor="#c8c6a7",style=filled];
"MODULE"->"@pytest.fixture\ndef runner():\n    return CliRunner(),type='decorated_definition'\nline_star:33,line_end:35|char_star:0,char_end:22";
"@pytest.fixture,type='decorator'\nline_star:33,line_end:33|char_star:0,char_end:15"[shape="box",fillcolor="white",style=filled];
"@pytest.fixture\ndef runner():\n    return CliRunner(),type='decorated_definition'\nline_star:33,line_end:35|char_star:0,char_end:22"->"@pytest.fixture,type='decorator'\nline_star:33,line_end:33|char_star:0,char_end:15";
"def runner():\n    return CliRunner(),type='function_definition'\nline_star:34,line_end:35|char_star:0,char_end:22"[shape="box",fillcolor="#cee6b4",style=filled];
"@pytest.fixture\ndef runner():\n    return CliRunner(),type='decorated_definition'\nline_star:33,line_end:35|char_star:0,char_end:22"->"def runner():\n    return CliRunner(),type='function_definition'\nline_star:34,line_end:35|char_star:0,char_end:22";
"runner,type='identifier'\nline_star:34,line_end:34|char_star:4,char_end:10"[shape="point",fillcolor="#121013",style=filled];
"def runner():\n    return CliRunner(),type='function_definition'\nline_star:34,line_end:35|char_star:0,char_end:22"->"runner,type='identifier'\nline_star:34,line_end:34|char_star:4,char_end:10";
"type='INFORMATION BLOCK'\nline_star:35,line_end:35|char_star:4,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"def runner():\n    return CliRunner(),type='function_definition'\nline_star:34,line_end:35|char_star:0,char_end:22"->"type='INFORMATION BLOCK'\nline_star:35,line_end:35|char_star:4,char_end:22";
"return CliRunner(),type='return_statement'\nline_star:35,line_end:35|char_star:4,char_end:22"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:35,line_end:35|char_star:4,char_end:22"->"return CliRunner(),type='return_statement'\nline_star:35,line_end:35|char_star:4,char_end:22";
"def test_cli_name(test_apps):\n    '''Make sure the CLI object's name is the app's name and not the app itself'''\n    from cliapp.app import testapp\n\n    assert testapp.cli.name == testapp.name,type='function_definition'\nline_star:38,line_end:42|char_star:0,char_end:43"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_cli_name(test_apps):\n    '''Make sure the CLI object's name is the app's name and not the app itself'''\n    from cliapp.app import testapp\n\n    assert testapp.cli.name == testapp.name,type='function_definition'\nline_star:38,line_end:42|char_star:0,char_end:43";
"test_cli_name,type='identifier'\nline_star:38,line_end:38|char_star:4,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"def test_cli_name(test_apps):\n    '''Make sure the CLI object's name is the app's name and not the app itself'''\n    from cliapp.app import testapp\n\n    assert testapp.cli.name == testapp.name,type='function_definition'\nline_star:38,line_end:42|char_star:0,char_end:43"->"test_cli_name,type='identifier'\nline_star:38,line_end:38|char_star:4,char_end:17";
"(test_apps),type='parameters'\nline_star:38,line_end:38|char_star:17,char_end:28"[shape="box",fillcolor="white",style=filled];
"def test_cli_name(test_apps):\n    '''Make sure the CLI object's name is the app's name and not the app itself'''\n    from cliapp.app import testapp\n\n    assert testapp.cli.name == testapp.name,type='function_definition'\nline_star:38,line_end:42|char_star:0,char_end:43"->"(test_apps),type='parameters'\nline_star:38,line_end:38|char_star:17,char_end:28";
"test_apps,type='identifier'\nline_star:38,line_end:38|char_star:18,char_end:27"[shape="point",fillcolor="#121013",style=filled];
"(test_apps),type='parameters'\nline_star:38,line_end:38|char_star:17,char_end:28"->"test_apps,type='identifier'\nline_star:38,line_end:38|char_star:18,char_end:27";
"type='INFORMATION BLOCK'\nline_star:39,line_end:42|char_star:4,char_end:43"[shape="point",fillcolor="#121013",style=filled];
"def test_cli_name(test_apps):\n    '''Make sure the CLI object's name is the app's name and not the app itself'''\n    from cliapp.app import testapp\n\n    assert testapp.cli.name == testapp.name,type='function_definition'\nline_star:38,line_end:42|char_star:0,char_end:43"->"type='INFORMATION BLOCK'\nline_star:39,line_end:42|char_star:4,char_end:43";
"from cliapp.app import testapp,type='import_from_statement'\nline_star:40,line_end:40|char_star:4,char_end:34"[shape="box",fillcolor="#f48b29",style=filled];
"type='INFORMATION BLOCK'\nline_star:39,line_end:42|char_star:4,char_end:43"->"from cliapp.app import testapp,type='import_from_statement'\nline_star:40,line_end:40|char_star:4,char_end:34";
"assert testapp.cli.name == testapp.name,type='assert_statement'\nline_star:42,line_end:42|char_star:4,char_end:43"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:39,line_end:42|char_star:4,char_end:43"->"assert testapp.cli.name == testapp.name,type='assert_statement'\nline_star:42,line_end:42|char_star:4,char_end:43";
"testapp.cli.name == testapp.name,type='comparison_operator'\nline_star:42,line_end:42|char_star:11,char_end:43"[shape="box",fillcolor="white",style=filled];
"assert testapp.cli.name == testapp.name,type='assert_statement'\nline_star:42,line_end:42|char_star:4,char_end:43"->"testapp.cli.name == testapp.name,type='comparison_operator'\nline_star:42,line_end:42|char_star:11,char_end:43";
"testapp.cli.name,type='attribute'\nline_star:42,line_end:42|char_star:11,char_end:27"[shape="box",fillcolor="white",style=filled];
"testapp.cli.name == testapp.name,type='comparison_operator'\nline_star:42,line_end:42|char_star:11,char_end:43"->"testapp.cli.name,type='attribute'\nline_star:42,line_end:42|char_star:11,char_end:27";
"testapp.cli,type='attribute'\nline_star:42,line_end:42|char_star:11,char_end:22"[shape="box",fillcolor="white",style=filled];
"testapp.cli.name,type='attribute'\nline_star:42,line_end:42|char_star:11,char_end:27"->"testapp.cli,type='attribute'\nline_star:42,line_end:42|char_star:11,char_end:22";
"testapp,type='identifier'\nline_star:42,line_end:42|char_star:11,char_end:18"[shape="point",fillcolor="#121013",style=filled];
"testapp.cli,type='attribute'\nline_star:42,line_end:42|char_star:11,char_end:22"->"testapp,type='identifier'\nline_star:42,line_end:42|char_star:11,char_end:18";
"cli,type='identifier'\nline_star:42,line_end:42|char_star:19,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"testapp.cli,type='attribute'\nline_star:42,line_end:42|char_star:11,char_end:22"->"cli,type='identifier'\nline_star:42,line_end:42|char_star:19,char_end:22";
"name,type='identifier'\nline_star:42,line_end:42|char_star:23,char_end:27"[shape="point",fillcolor="#121013",style=filled];
"testapp.cli.name,type='attribute'\nline_star:42,line_end:42|char_star:11,char_end:27"->"name,type='identifier'\nline_star:42,line_end:42|char_star:23,char_end:27";
"testapp.name,type='attribute'\nline_star:42,line_end:42|char_star:31,char_end:43"[shape="box",fillcolor="white",style=filled];
"testapp.cli.name == testapp.name,type='comparison_operator'\nline_star:42,line_end:42|char_star:11,char_end:43"->"testapp.name,type='attribute'\nline_star:42,line_end:42|char_star:31,char_end:43";
"testapp,type='identifier'\nline_star:42,line_end:42|char_star:31,char_end:38"[shape="point",fillcolor="#121013",style=filled];
"testapp.name,type='attribute'\nline_star:42,line_end:42|char_star:31,char_end:43"->"testapp,type='identifier'\nline_star:42,line_end:42|char_star:31,char_end:38";
"name,type='identifier'\nline_star:42,line_end:42|char_star:39,char_end:43"[shape="point",fillcolor="#121013",style=filled];
"testapp.name,type='attribute'\nline_star:42,line_end:42|char_star:31,char_end:43"->"name,type='identifier'\nline_star:42,line_end:42|char_star:39,char_end:43";
"def test_find_best_app(test_apps):\n    script_info = ScriptInfo()\n\n    class Module:\n        app = Flask('appname')\n\n    assert find_best_app(script_info, Module) == Module.app\n\n    class Module:\n        application = Flask('appname')\n\n    assert find_best_app(script_info, Module) == Module.application\n\n    class Module:\n        myapp = Flask('appname')\n\n    assert find_best_app(script_info, Module) == Module.myapp\n\n    class Module:\n        @staticmethod\n        def create_app():\n            return Flask('appname')\n\n    app = find_best_app(script_info, Module)\n    assert isinstance(app, Flask)\n    assert app.name == 'appname'\n\n    class Module:\n        @staticmethod\n        def create_app(foo):\n            return Flask('appname')\n\n    with pytest.deprecated_call(match='Script info'):\n        app = find_best_app(script_info, Module)\n\n    assert isinstance(app, Flask)\n    assert app.name == 'appname'\n\n    class Module:\n        @staticmethod\n        def create_app(foo=None, script_info=None):\n            return Flask('appname')\n\n    with pytest.deprecated_call(match='script_info'):\n        app = find_best_app(script_info, Module)\n\n    assert isinstance(app, Flask)\n    assert app.name == 'appname'\n\n    class Module:\n        @staticmethod\n        def make_app():\n            return Flask('appname')\n\n    app = find_best_app(script_info, Module)\n    assert isinstance(app, Flask)\n    assert app.name == 'appname'\n\n    class Module:\n        myapp = Flask('appname1')\n\n        @staticmethod\n        def create_app():\n            return Flask('appname2')\n\n    assert find_best_app(script_info, Module) == Module.myapp\n\n    class Module:\n        myapp = Flask('appname1')\n\n        @staticmethod\n        def create_app():\n            return Flask('appname2')\n\n    assert find_best_app(script_info, Module) == Module.myapp\n\n    class Module:\n        pass\n\n    pytest.raises(NoAppException, find_best_app, script_info, Module)\n\n    class Module:\n        myapp1 = Flask('appname1')\n        myapp2 = Flask('appname2')\n\n    pytest.raises(NoAppException, find_best_app, script_info, Module)\n\n    class Module:\n        @staticmethod\n        def create_app(foo, bar):\n            return Flask('appname2')\n\n    pytest.raises(NoAppException, find_best_app, script_info, Module)\n\n    class Module:\n        @staticmethod\n        def create_app():\n            raise TypeError('bad bad factory!')\n\n    pytest.raises(TypeError, find_best_app, script_info, Module),type='function_definition'\nline_star:45,line_end:144|char_star:0,char_end:64"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_find_best_app(test_apps):\n    script_info = ScriptInfo()\n\n    class Module:\n        app = Flask('appname')\n\n    assert find_best_app(script_info, Module) == Module.app\n\n    class Module:\n        application = Flask('appname')\n\n    assert find_best_app(script_info, Module) == Module.application\n\n    class Module:\n        myapp = Flask('appname')\n\n    assert find_best_app(script_info, Module) == Module.myapp\n\n    class Module:\n        @staticmethod\n        def create_app():\n            return Flask('appname')\n\n    app = find_best_app(script_info, Module)\n    assert isinstance(app, Flask)\n    assert app.name == 'appname'\n\n    class Module:\n        @staticmethod\n        def create_app(foo):\n            return Flask('appname')\n\n    with pytest.deprecated_call(match='Script info'):\n        app = find_best_app(script_info, Module)\n\n    assert isinstance(app, Flask)\n    assert app.name == 'appname'\n\n    class Module:\n        @staticmethod\n        def create_app(foo=None, script_info=None):\n            return Flask('appname')\n\n    with pytest.deprecated_call(match='script_info'):\n        app = find_best_app(script_info, Module)\n\n    assert isinstance(app, Flask)\n    assert app.name == 'appname'\n\n    class Module:\n        @staticmethod\n        def make_app():\n            return Flask('appname')\n\n    app = find_best_app(script_info, Module)\n    assert isinstance(app, Flask)\n    assert app.name == 'appname'\n\n    class Module:\n        myapp = Flask('appname1')\n\n        @staticmethod\n        def create_app():\n            return Flask('appname2')\n\n    assert find_best_app(script_info, Module) == Module.myapp\n\n    class Module:\n        myapp = Flask('appname1')\n\n        @staticmethod\n        def create_app():\n            return Flask('appname2')\n\n    assert find_best_app(script_info, Module) == Module.myapp\n\n    class Module:\n        pass\n\n    pytest.raises(NoAppException, find_best_app, script_info, Module)\n\n    class Module:\n        myapp1 = Flask('appname1')\n        myapp2 = Flask('appname2')\n\n    pytest.raises(NoAppException, find_best_app, script_info, Module)\n\n    class Module:\n        @staticmethod\n        def create_app(foo, bar):\n            return Flask('appname2')\n\n    pytest.raises(NoAppException, find_best_app, script_info, Module)\n\n    class Module:\n        @staticmethod\n        def create_app():\n            raise TypeError('bad bad factory!')\n\n    pytest.raises(TypeError, find_best_app, script_info, Module),type='function_definition'\nline_star:45,line_end:144|char_star:0,char_end:64";
"test_find_best_app,type='identifier'\nline_star:45,line_end:45|char_star:4,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"def test_find_best_app(test_apps):\n    script_info = ScriptInfo()\n\n    class Module:\n        app = Flask('appname')\n\n    assert find_best_app(script_info, Module) == Module.app\n\n    class Module:\n        application = Flask('appname')\n\n    assert find_best_app(script_info, Module) == Module.application\n\n    class Module:\n        myapp = Flask('appname')\n\n    assert find_best_app(script_info, Module) == Module.myapp\n\n    class Module:\n        @staticmethod\n        def create_app():\n            return Flask('appname')\n\n    app = find_best_app(script_info, Module)\n    assert isinstance(app, Flask)\n    assert app.name == 'appname'\n\n    class Module:\n        @staticmethod\n        def create_app(foo):\n            return Flask('appname')\n\n    with pytest.deprecated_call(match='Script info'):\n        app = find_best_app(script_info, Module)\n\n    assert isinstance(app, Flask)\n    assert app.name == 'appname'\n\n    class Module:\n        @staticmethod\n        def create_app(foo=None, script_info=None):\n            return Flask('appname')\n\n    with pytest.deprecated_call(match='script_info'):\n        app = find_best_app(script_info, Module)\n\n    assert isinstance(app, Flask)\n    assert app.name == 'appname'\n\n    class Module:\n        @staticmethod\n        def make_app():\n            return Flask('appname')\n\n    app = find_best_app(script_info, Module)\n    assert isinstance(app, Flask)\n    assert app.name == 'appname'\n\n    class Module:\n        myapp = Flask('appname1')\n\n        @staticmethod\n        def create_app():\n            return Flask('appname2')\n\n    assert find_best_app(script_info, Module) == Module.myapp\n\n    class Module:\n        myapp = Flask('appname1')\n\n        @staticmethod\n        def create_app():\n            return Flask('appname2')\n\n    assert find_best_app(script_info, Module) == Module.myapp\n\n    class Module:\n        pass\n\n    pytest.raises(NoAppException, find_best_app, script_info, Module)\n\n    class Module:\n        myapp1 = Flask('appname1')\n        myapp2 = Flask('appname2')\n\n    pytest.raises(NoAppException, find_best_app, script_info, Module)\n\n    class Module:\n        @staticmethod\n        def create_app(foo, bar):\n            return Flask('appname2')\n\n    pytest.raises(NoAppException, find_best_app, script_info, Module)\n\n    class Module:\n        @staticmethod\n        def create_app():\n            raise TypeError('bad bad factory!')\n\n    pytest.raises(TypeError, find_best_app, script_info, Module),type='function_definition'\nline_star:45,line_end:144|char_star:0,char_end:64"->"test_find_best_app,type='identifier'\nline_star:45,line_end:45|char_star:4,char_end:22";
"(test_apps),type='parameters'\nline_star:45,line_end:45|char_star:22,char_end:33"[shape="box",fillcolor="white",style=filled];
"def test_find_best_app(test_apps):\n    script_info = ScriptInfo()\n\n    class Module:\n        app = Flask('appname')\n\n    assert find_best_app(script_info, Module) == Module.app\n\n    class Module:\n        application = Flask('appname')\n\n    assert find_best_app(script_info, Module) == Module.application\n\n    class Module:\n        myapp = Flask('appname')\n\n    assert find_best_app(script_info, Module) == Module.myapp\n\n    class Module:\n        @staticmethod\n        def create_app():\n            return Flask('appname')\n\n    app = find_best_app(script_info, Module)\n    assert isinstance(app, Flask)\n    assert app.name == 'appname'\n\n    class Module:\n        @staticmethod\n        def create_app(foo):\n            return Flask('appname')\n\n    with pytest.deprecated_call(match='Script info'):\n        app = find_best_app(script_info, Module)\n\n    assert isinstance(app, Flask)\n    assert app.name == 'appname'\n\n    class Module:\n        @staticmethod\n        def create_app(foo=None, script_info=None):\n            return Flask('appname')\n\n    with pytest.deprecated_call(match='script_info'):\n        app = find_best_app(script_info, Module)\n\n    assert isinstance(app, Flask)\n    assert app.name == 'appname'\n\n    class Module:\n        @staticmethod\n        def make_app():\n            return Flask('appname')\n\n    app = find_best_app(script_info, Module)\n    assert isinstance(app, Flask)\n    assert app.name == 'appname'\n\n    class Module:\n        myapp = Flask('appname1')\n\n        @staticmethod\n        def create_app():\n            return Flask('appname2')\n\n    assert find_best_app(script_info, Module) == Module.myapp\n\n    class Module:\n        myapp = Flask('appname1')\n\n        @staticmethod\n        def create_app():\n            return Flask('appname2')\n\n    assert find_best_app(script_info, Module) == Module.myapp\n\n    class Module:\n        pass\n\n    pytest.raises(NoAppException, find_best_app, script_info, Module)\n\n    class Module:\n        myapp1 = Flask('appname1')\n        myapp2 = Flask('appname2')\n\n    pytest.raises(NoAppException, find_best_app, script_info, Module)\n\n    class Module:\n        @staticmethod\n        def create_app(foo, bar):\n            return Flask('appname2')\n\n    pytest.raises(NoAppException, find_best_app, script_info, Module)\n\n    class Module:\n        @staticmethod\n        def create_app():\n            raise TypeError('bad bad factory!')\n\n    pytest.raises(TypeError, find_best_app, script_info, Module),type='function_definition'\nline_star:45,line_end:144|char_star:0,char_end:64"->"(test_apps),type='parameters'\nline_star:45,line_end:45|char_star:22,char_end:33";
"test_apps,type='identifier'\nline_star:45,line_end:45|char_star:23,char_end:32"[shape="point",fillcolor="#121013",style=filled];
"(test_apps),type='parameters'\nline_star:45,line_end:45|char_star:22,char_end:33"->"test_apps,type='identifier'\nline_star:45,line_end:45|char_star:23,char_end:32";
"type='INFORMATION BLOCK'\nline_star:46,line_end:144|char_star:4,char_end:64"[shape="point",fillcolor="#121013",style=filled];
"def test_find_best_app(test_apps):\n    script_info = ScriptInfo()\n\n    class Module:\n        app = Flask('appname')\n\n    assert find_best_app(script_info, Module) == Module.app\n\n    class Module:\n        application = Flask('appname')\n\n    assert find_best_app(script_info, Module) == Module.application\n\n    class Module:\n        myapp = Flask('appname')\n\n    assert find_best_app(script_info, Module) == Module.myapp\n\n    class Module:\n        @staticmethod\n        def create_app():\n            return Flask('appname')\n\n    app = find_best_app(script_info, Module)\n    assert isinstance(app, Flask)\n    assert app.name == 'appname'\n\n    class Module:\n        @staticmethod\n        def create_app(foo):\n            return Flask('appname')\n\n    with pytest.deprecated_call(match='Script info'):\n        app = find_best_app(script_info, Module)\n\n    assert isinstance(app, Flask)\n    assert app.name == 'appname'\n\n    class Module:\n        @staticmethod\n        def create_app(foo=None, script_info=None):\n            return Flask('appname')\n\n    with pytest.deprecated_call(match='script_info'):\n        app = find_best_app(script_info, Module)\n\n    assert isinstance(app, Flask)\n    assert app.name == 'appname'\n\n    class Module:\n        @staticmethod\n        def make_app():\n            return Flask('appname')\n\n    app = find_best_app(script_info, Module)\n    assert isinstance(app, Flask)\n    assert app.name == 'appname'\n\n    class Module:\n        myapp = Flask('appname1')\n\n        @staticmethod\n        def create_app():\n            return Flask('appname2')\n\n    assert find_best_app(script_info, Module) == Module.myapp\n\n    class Module:\n        myapp = Flask('appname1')\n\n        @staticmethod\n        def create_app():\n            return Flask('appname2')\n\n    assert find_best_app(script_info, Module) == Module.myapp\n\n    class Module:\n        pass\n\n    pytest.raises(NoAppException, find_best_app, script_info, Module)\n\n    class Module:\n        myapp1 = Flask('appname1')\n        myapp2 = Flask('appname2')\n\n    pytest.raises(NoAppException, find_best_app, script_info, Module)\n\n    class Module:\n        @staticmethod\n        def create_app(foo, bar):\n            return Flask('appname2')\n\n    pytest.raises(NoAppException, find_best_app, script_info, Module)\n\n    class Module:\n        @staticmethod\n        def create_app():\n            raise TypeError('bad bad factory!')\n\n    pytest.raises(TypeError, find_best_app, script_info, Module),type='function_definition'\nline_star:45,line_end:144|char_star:0,char_end:64"->"type='INFORMATION BLOCK'\nline_star:46,line_end:144|char_star:4,char_end:64";
"class Module:\n        app = Flask('appname'),type='class_definition'\nline_star:48,line_end:49|char_star:4,char_end:30"[shape="box",fillcolor="#ffdf91",style=filled];
"type='INFORMATION BLOCK'\nline_star:46,line_end:144|char_star:4,char_end:64"->"class Module:\n        app = Flask('appname'),type='class_definition'\nline_star:48,line_end:49|char_star:4,char_end:30";
"Module,type='identifier'\nline_star:48,line_end:48|char_star:10,char_end:16"[shape="point",fillcolor="#121013",style=filled];
"class Module:\n        app = Flask('appname'),type='class_definition'\nline_star:48,line_end:49|char_star:4,char_end:30"->"Module,type='identifier'\nline_star:48,line_end:48|char_star:10,char_end:16";
"type='INFORMATION BLOCK'\nline_star:49,line_end:49|char_star:8,char_end:30"[shape="point",fillcolor="#121013",style=filled];
"class Module:\n        app = Flask('appname'),type='class_definition'\nline_star:48,line_end:49|char_star:4,char_end:30"->"type='INFORMATION BLOCK'\nline_star:49,line_end:49|char_star:8,char_end:30";
"assert find_best_app(script_info, Module) == Module.app,type='assert_statement'\nline_star:51,line_end:51|char_star:4,char_end:59"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:46,line_end:144|char_star:4,char_end:64"->"assert find_best_app(script_info, Module) == Module.app,type='assert_statement'\nline_star:51,line_end:51|char_star:4,char_end:59";
"find_best_app(script_info, Module) == Module.app,type='comparison_operator'\nline_star:51,line_end:51|char_star:11,char_end:59"[shape="box",fillcolor="white",style=filled];
"assert find_best_app(script_info, Module) == Module.app,type='assert_statement'\nline_star:51,line_end:51|char_star:4,char_end:59"->"find_best_app(script_info, Module) == Module.app,type='comparison_operator'\nline_star:51,line_end:51|char_star:11,char_end:59";
"find_best_app(script_info, Module),type='call'\nline_star:51,line_end:51|char_star:11,char_end:45"[shape="box",fillcolor="white",style=filled];
"find_best_app(script_info, Module) == Module.app,type='comparison_operator'\nline_star:51,line_end:51|char_star:11,char_end:59"->"find_best_app(script_info, Module),type='call'\nline_star:51,line_end:51|char_star:11,char_end:45";
"find_best_app,type='identifier'\nline_star:51,line_end:51|char_star:11,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"find_best_app(script_info, Module),type='call'\nline_star:51,line_end:51|char_star:11,char_end:45"->"find_best_app,type='identifier'\nline_star:51,line_end:51|char_star:11,char_end:24";
"(script_info, Module),type='argument_list'\nline_star:51,line_end:51|char_star:24,char_end:45"[shape="box",fillcolor="white",style=filled];
"find_best_app(script_info, Module),type='call'\nline_star:51,line_end:51|char_star:11,char_end:45"->"(script_info, Module),type='argument_list'\nline_star:51,line_end:51|char_star:24,char_end:45";
"script_info,type='identifier'\nline_star:51,line_end:51|char_star:25,char_end:36"[shape="point",fillcolor="#121013",style=filled];
"(script_info, Module),type='argument_list'\nline_star:51,line_end:51|char_star:24,char_end:45"->"script_info,type='identifier'\nline_star:51,line_end:51|char_star:25,char_end:36";
"Module,type='identifier'\nline_star:51,line_end:51|char_star:38,char_end:44"[shape="point",fillcolor="#121013",style=filled];
"(script_info, Module),type='argument_list'\nline_star:51,line_end:51|char_star:24,char_end:45"->"Module,type='identifier'\nline_star:51,line_end:51|char_star:38,char_end:44";
"Module.app,type='attribute'\nline_star:51,line_end:51|char_star:49,char_end:59"[shape="box",fillcolor="white",style=filled];
"find_best_app(script_info, Module) == Module.app,type='comparison_operator'\nline_star:51,line_end:51|char_star:11,char_end:59"->"Module.app,type='attribute'\nline_star:51,line_end:51|char_star:49,char_end:59";
"Module,type='identifier'\nline_star:51,line_end:51|char_star:49,char_end:55"[shape="point",fillcolor="#121013",style=filled];
"Module.app,type='attribute'\nline_star:51,line_end:51|char_star:49,char_end:59"->"Module,type='identifier'\nline_star:51,line_end:51|char_star:49,char_end:55";
"app,type='identifier'\nline_star:51,line_end:51|char_star:56,char_end:59"[shape="point",fillcolor="#121013",style=filled];
"Module.app,type='attribute'\nline_star:51,line_end:51|char_star:49,char_end:59"->"app,type='identifier'\nline_star:51,line_end:51|char_star:56,char_end:59";
"class Module:\n        application = Flask('appname'),type='class_definition'\nline_star:53,line_end:54|char_star:4,char_end:38"[shape="box",fillcolor="#ffdf91",style=filled];
"type='INFORMATION BLOCK'\nline_star:46,line_end:144|char_star:4,char_end:64"->"class Module:\n        application = Flask('appname'),type='class_definition'\nline_star:53,line_end:54|char_star:4,char_end:38";
"Module,type='identifier'\nline_star:53,line_end:53|char_star:10,char_end:16"[shape="point",fillcolor="#121013",style=filled];
"class Module:\n        application = Flask('appname'),type='class_definition'\nline_star:53,line_end:54|char_star:4,char_end:38"->"Module,type='identifier'\nline_star:53,line_end:53|char_star:10,char_end:16";
"type='INFORMATION BLOCK'\nline_star:54,line_end:54|char_star:8,char_end:38"[shape="point",fillcolor="#121013",style=filled];
"class Module:\n        application = Flask('appname'),type='class_definition'\nline_star:53,line_end:54|char_star:4,char_end:38"->"type='INFORMATION BLOCK'\nline_star:54,line_end:54|char_star:8,char_end:38";
"assert find_best_app(script_info, Module) == Module.application,type='assert_statement'\nline_star:56,line_end:56|char_star:4,char_end:67"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:46,line_end:144|char_star:4,char_end:64"->"assert find_best_app(script_info, Module) == Module.application,type='assert_statement'\nline_star:56,line_end:56|char_star:4,char_end:67";
"find_best_app(script_info, Module) == Module.application,type='comparison_operator'\nline_star:56,line_end:56|char_star:11,char_end:67"[shape="box",fillcolor="white",style=filled];
"assert find_best_app(script_info, Module) == Module.application,type='assert_statement'\nline_star:56,line_end:56|char_star:4,char_end:67"->"find_best_app(script_info, Module) == Module.application,type='comparison_operator'\nline_star:56,line_end:56|char_star:11,char_end:67";
"find_best_app(script_info, Module),type='call'\nline_star:56,line_end:56|char_star:11,char_end:45"[shape="box",fillcolor="white",style=filled];
"find_best_app(script_info, Module) == Module.application,type='comparison_operator'\nline_star:56,line_end:56|char_star:11,char_end:67"->"find_best_app(script_info, Module),type='call'\nline_star:56,line_end:56|char_star:11,char_end:45";
"find_best_app,type='identifier'\nline_star:56,line_end:56|char_star:11,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"find_best_app(script_info, Module),type='call'\nline_star:56,line_end:56|char_star:11,char_end:45"->"find_best_app,type='identifier'\nline_star:56,line_end:56|char_star:11,char_end:24";
"(script_info, Module),type='argument_list'\nline_star:56,line_end:56|char_star:24,char_end:45"[shape="box",fillcolor="white",style=filled];
"find_best_app(script_info, Module),type='call'\nline_star:56,line_end:56|char_star:11,char_end:45"->"(script_info, Module),type='argument_list'\nline_star:56,line_end:56|char_star:24,char_end:45";
"script_info,type='identifier'\nline_star:56,line_end:56|char_star:25,char_end:36"[shape="point",fillcolor="#121013",style=filled];
"(script_info, Module),type='argument_list'\nline_star:56,line_end:56|char_star:24,char_end:45"->"script_info,type='identifier'\nline_star:56,line_end:56|char_star:25,char_end:36";
"Module,type='identifier'\nline_star:56,line_end:56|char_star:38,char_end:44"[shape="point",fillcolor="#121013",style=filled];
"(script_info, Module),type='argument_list'\nline_star:56,line_end:56|char_star:24,char_end:45"->"Module,type='identifier'\nline_star:56,line_end:56|char_star:38,char_end:44";
"Module.application,type='attribute'\nline_star:56,line_end:56|char_star:49,char_end:67"[shape="box",fillcolor="white",style=filled];
"find_best_app(script_info, Module) == Module.application,type='comparison_operator'\nline_star:56,line_end:56|char_star:11,char_end:67"->"Module.application,type='attribute'\nline_star:56,line_end:56|char_star:49,char_end:67";
"Module,type='identifier'\nline_star:56,line_end:56|char_star:49,char_end:55"[shape="point",fillcolor="#121013",style=filled];
"Module.application,type='attribute'\nline_star:56,line_end:56|char_star:49,char_end:67"->"Module,type='identifier'\nline_star:56,line_end:56|char_star:49,char_end:55";
"application,type='identifier'\nline_star:56,line_end:56|char_star:56,char_end:67"[shape="point",fillcolor="#121013",style=filled];
"Module.application,type='attribute'\nline_star:56,line_end:56|char_star:49,char_end:67"->"application,type='identifier'\nline_star:56,line_end:56|char_star:56,char_end:67";
"class Module:\n        myapp = Flask('appname'),type='class_definition'\nline_star:58,line_end:59|char_star:4,char_end:32"[shape="box",fillcolor="#ffdf91",style=filled];
"type='INFORMATION BLOCK'\nline_star:46,line_end:144|char_star:4,char_end:64"->"class Module:\n        myapp = Flask('appname'),type='class_definition'\nline_star:58,line_end:59|char_star:4,char_end:32";
"Module,type='identifier'\nline_star:58,line_end:58|char_star:10,char_end:16"[shape="point",fillcolor="#121013",style=filled];
"class Module:\n        myapp = Flask('appname'),type='class_definition'\nline_star:58,line_end:59|char_star:4,char_end:32"->"Module,type='identifier'\nline_star:58,line_end:58|char_star:10,char_end:16";
"type='INFORMATION BLOCK'\nline_star:59,line_end:59|char_star:8,char_end:32"[shape="point",fillcolor="#121013",style=filled];
"class Module:\n        myapp = Flask('appname'),type='class_definition'\nline_star:58,line_end:59|char_star:4,char_end:32"->"type='INFORMATION BLOCK'\nline_star:59,line_end:59|char_star:8,char_end:32";
"assert find_best_app(script_info, Module) == Module.myapp,type='assert_statement'\nline_star:61,line_end:61|char_star:4,char_end:61"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:46,line_end:144|char_star:4,char_end:64"->"assert find_best_app(script_info, Module) == Module.myapp,type='assert_statement'\nline_star:61,line_end:61|char_star:4,char_end:61";
"find_best_app(script_info, Module) == Module.myapp,type='comparison_operator'\nline_star:61,line_end:61|char_star:11,char_end:61"[shape="box",fillcolor="white",style=filled];
"assert find_best_app(script_info, Module) == Module.myapp,type='assert_statement'\nline_star:61,line_end:61|char_star:4,char_end:61"->"find_best_app(script_info, Module) == Module.myapp,type='comparison_operator'\nline_star:61,line_end:61|char_star:11,char_end:61";
"find_best_app(script_info, Module),type='call'\nline_star:61,line_end:61|char_star:11,char_end:45"[shape="box",fillcolor="white",style=filled];
"find_best_app(script_info, Module) == Module.myapp,type='comparison_operator'\nline_star:61,line_end:61|char_star:11,char_end:61"->"find_best_app(script_info, Module),type='call'\nline_star:61,line_end:61|char_star:11,char_end:45";
"find_best_app,type='identifier'\nline_star:61,line_end:61|char_star:11,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"find_best_app(script_info, Module),type='call'\nline_star:61,line_end:61|char_star:11,char_end:45"->"find_best_app,type='identifier'\nline_star:61,line_end:61|char_star:11,char_end:24";
"(script_info, Module),type='argument_list'\nline_star:61,line_end:61|char_star:24,char_end:45"[shape="box",fillcolor="white",style=filled];
"find_best_app(script_info, Module),type='call'\nline_star:61,line_end:61|char_star:11,char_end:45"->"(script_info, Module),type='argument_list'\nline_star:61,line_end:61|char_star:24,char_end:45";
"script_info,type='identifier'\nline_star:61,line_end:61|char_star:25,char_end:36"[shape="point",fillcolor="#121013",style=filled];
"(script_info, Module),type='argument_list'\nline_star:61,line_end:61|char_star:24,char_end:45"->"script_info,type='identifier'\nline_star:61,line_end:61|char_star:25,char_end:36";
"Module,type='identifier'\nline_star:61,line_end:61|char_star:38,char_end:44"[shape="point",fillcolor="#121013",style=filled];
"(script_info, Module),type='argument_list'\nline_star:61,line_end:61|char_star:24,char_end:45"->"Module,type='identifier'\nline_star:61,line_end:61|char_star:38,char_end:44";
"Module.myapp,type='attribute'\nline_star:61,line_end:61|char_star:49,char_end:61"[shape="box",fillcolor="white",style=filled];
"find_best_app(script_info, Module) == Module.myapp,type='comparison_operator'\nline_star:61,line_end:61|char_star:11,char_end:61"->"Module.myapp,type='attribute'\nline_star:61,line_end:61|char_star:49,char_end:61";
"Module,type='identifier'\nline_star:61,line_end:61|char_star:49,char_end:55"[shape="point",fillcolor="#121013",style=filled];
"Module.myapp,type='attribute'\nline_star:61,line_end:61|char_star:49,char_end:61"->"Module,type='identifier'\nline_star:61,line_end:61|char_star:49,char_end:55";
"myapp,type='identifier'\nline_star:61,line_end:61|char_star:56,char_end:61"[shape="point",fillcolor="#121013",style=filled];
"Module.myapp,type='attribute'\nline_star:61,line_end:61|char_star:49,char_end:61"->"myapp,type='identifier'\nline_star:61,line_end:61|char_star:56,char_end:61";
"class Module:\n        @staticmethod\n        def create_app():\n            return Flask('appname'),type='class_definition'\nline_star:63,line_end:66|char_star:4,char_end:35"[shape="box",fillcolor="#ffdf91",style=filled];
"type='INFORMATION BLOCK'\nline_star:46,line_end:144|char_star:4,char_end:64"->"class Module:\n        @staticmethod\n        def create_app():\n            return Flask('appname'),type='class_definition'\nline_star:63,line_end:66|char_star:4,char_end:35";
"Module,type='identifier'\nline_star:63,line_end:63|char_star:10,char_end:16"[shape="point",fillcolor="#121013",style=filled];
"class Module:\n        @staticmethod\n        def create_app():\n            return Flask('appname'),type='class_definition'\nline_star:63,line_end:66|char_star:4,char_end:35"->"Module,type='identifier'\nline_star:63,line_end:63|char_star:10,char_end:16";
"type='INFORMATION BLOCK'\nline_star:64,line_end:66|char_star:8,char_end:35"[shape="point",fillcolor="#121013",style=filled];
"class Module:\n        @staticmethod\n        def create_app():\n            return Flask('appname'),type='class_definition'\nline_star:63,line_end:66|char_star:4,char_end:35"->"type='INFORMATION BLOCK'\nline_star:64,line_end:66|char_star:8,char_end:35";
"@staticmethod\n        def create_app():\n            return Flask('appname'),type='decorated_definition'\nline_star:64,line_end:66|char_star:8,char_end:35"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:64,line_end:66|char_star:8,char_end:35"->"@staticmethod\n        def create_app():\n            return Flask('appname'),type='decorated_definition'\nline_star:64,line_end:66|char_star:8,char_end:35";
"@staticmethod,type='decorator'\nline_star:64,line_end:64|char_star:8,char_end:21"[shape="box",fillcolor="white",style=filled];
"@staticmethod\n        def create_app():\n            return Flask('appname'),type='decorated_definition'\nline_star:64,line_end:66|char_star:8,char_end:35"->"@staticmethod,type='decorator'\nline_star:64,line_end:64|char_star:8,char_end:21";
"def create_app():\n            return Flask('appname'),type='function_definition'\nline_star:65,line_end:66|char_star:8,char_end:35"[shape="box",fillcolor="#cee6b4",style=filled];
"@staticmethod\n        def create_app():\n            return Flask('appname'),type='decorated_definition'\nline_star:64,line_end:66|char_star:8,char_end:35"->"def create_app():\n            return Flask('appname'),type='function_definition'\nline_star:65,line_end:66|char_star:8,char_end:35";
"create_app,type='identifier'\nline_star:65,line_end:65|char_star:12,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"def create_app():\n            return Flask('appname'),type='function_definition'\nline_star:65,line_end:66|char_star:8,char_end:35"->"create_app,type='identifier'\nline_star:65,line_end:65|char_star:12,char_end:22";
"type='INFORMATION BLOCK'\nline_star:66,line_end:66|char_star:12,char_end:35"[shape="point",fillcolor="#121013",style=filled];
"def create_app():\n            return Flask('appname'),type='function_definition'\nline_star:65,line_end:66|char_star:8,char_end:35"->"type='INFORMATION BLOCK'\nline_star:66,line_end:66|char_star:12,char_end:35";
"return Flask('appname'),type='return_statement'\nline_star:66,line_end:66|char_star:12,char_end:35"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:66,line_end:66|char_star:12,char_end:35"->"return Flask('appname'),type='return_statement'\nline_star:66,line_end:66|char_star:12,char_end:35";
"assert isinstance(app, Flask),type='assert_statement'\nline_star:69,line_end:69|char_star:4,char_end:33"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:46,line_end:144|char_star:4,char_end:64"->"assert isinstance(app, Flask),type='assert_statement'\nline_star:69,line_end:69|char_star:4,char_end:33";
"isinstance(app, Flask),type='call'\nline_star:69,line_end:69|char_star:11,char_end:33"[shape="box",fillcolor="white",style=filled];
"assert isinstance(app, Flask),type='assert_statement'\nline_star:69,line_end:69|char_star:4,char_end:33"->"isinstance(app, Flask),type='call'\nline_star:69,line_end:69|char_star:11,char_end:33";
"isinstance,type='identifier'\nline_star:69,line_end:69|char_star:11,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"isinstance(app, Flask),type='call'\nline_star:69,line_end:69|char_star:11,char_end:33"->"isinstance,type='identifier'\nline_star:69,line_end:69|char_star:11,char_end:21";
"(app, Flask),type='argument_list'\nline_star:69,line_end:69|char_star:21,char_end:33"[shape="box",fillcolor="white",style=filled];
"isinstance(app, Flask),type='call'\nline_star:69,line_end:69|char_star:11,char_end:33"->"(app, Flask),type='argument_list'\nline_star:69,line_end:69|char_star:21,char_end:33";
"app,type='identifier'\nline_star:69,line_end:69|char_star:22,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"(app, Flask),type='argument_list'\nline_star:69,line_end:69|char_star:21,char_end:33"->"app,type='identifier'\nline_star:69,line_end:69|char_star:22,char_end:25";
"Flask,type='identifier'\nline_star:69,line_end:69|char_star:27,char_end:32"[shape="point",fillcolor="#121013",style=filled];
"(app, Flask),type='argument_list'\nline_star:69,line_end:69|char_star:21,char_end:33"->"Flask,type='identifier'\nline_star:69,line_end:69|char_star:27,char_end:32";
"assert app.name == 'appname',type='assert_statement'\nline_star:70,line_end:70|char_star:4,char_end:32"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:46,line_end:144|char_star:4,char_end:64"->"assert app.name == 'appname',type='assert_statement'\nline_star:70,line_end:70|char_star:4,char_end:32";
"app.name == 'appname',type='comparison_operator'\nline_star:70,line_end:70|char_star:11,char_end:32"[shape="box",fillcolor="white",style=filled];
"assert app.name == 'appname',type='assert_statement'\nline_star:70,line_end:70|char_star:4,char_end:32"->"app.name == 'appname',type='comparison_operator'\nline_star:70,line_end:70|char_star:11,char_end:32";
"app.name,type='attribute'\nline_star:70,line_end:70|char_star:11,char_end:19"[shape="box",fillcolor="white",style=filled];
"app.name == 'appname',type='comparison_operator'\nline_star:70,line_end:70|char_star:11,char_end:32"->"app.name,type='attribute'\nline_star:70,line_end:70|char_star:11,char_end:19";
"app,type='identifier'\nline_star:70,line_end:70|char_star:11,char_end:14"[shape="point",fillcolor="#121013",style=filled];
"app.name,type='attribute'\nline_star:70,line_end:70|char_star:11,char_end:19"->"app,type='identifier'\nline_star:70,line_end:70|char_star:11,char_end:14";
"name,type='identifier'\nline_star:70,line_end:70|char_star:15,char_end:19"[shape="point",fillcolor="#121013",style=filled];
"app.name,type='attribute'\nline_star:70,line_end:70|char_star:11,char_end:19"->"name,type='identifier'\nline_star:70,line_end:70|char_star:15,char_end:19";
"class Module:\n        @staticmethod\n        def create_app(foo):\n            return Flask('appname'),type='class_definition'\nline_star:72,line_end:75|char_star:4,char_end:35"[shape="box",fillcolor="#ffdf91",style=filled];
"type='INFORMATION BLOCK'\nline_star:46,line_end:144|char_star:4,char_end:64"->"class Module:\n        @staticmethod\n        def create_app(foo):\n            return Flask('appname'),type='class_definition'\nline_star:72,line_end:75|char_star:4,char_end:35";
"Module,type='identifier'\nline_star:72,line_end:72|char_star:10,char_end:16"[shape="point",fillcolor="#121013",style=filled];
"class Module:\n        @staticmethod\n        def create_app(foo):\n            return Flask('appname'),type='class_definition'\nline_star:72,line_end:75|char_star:4,char_end:35"->"Module,type='identifier'\nline_star:72,line_end:72|char_star:10,char_end:16";
"type='INFORMATION BLOCK'\nline_star:73,line_end:75|char_star:8,char_end:35"[shape="point",fillcolor="#121013",style=filled];
"class Module:\n        @staticmethod\n        def create_app(foo):\n            return Flask('appname'),type='class_definition'\nline_star:72,line_end:75|char_star:4,char_end:35"->"type='INFORMATION BLOCK'\nline_star:73,line_end:75|char_star:8,char_end:35";
"@staticmethod\n        def create_app(foo):\n            return Flask('appname'),type='decorated_definition'\nline_star:73,line_end:75|char_star:8,char_end:35"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:73,line_end:75|char_star:8,char_end:35"->"@staticmethod\n        def create_app(foo):\n            return Flask('appname'),type='decorated_definition'\nline_star:73,line_end:75|char_star:8,char_end:35";
"@staticmethod,type='decorator'\nline_star:73,line_end:73|char_star:8,char_end:21"[shape="box",fillcolor="white",style=filled];
"@staticmethod\n        def create_app(foo):\n            return Flask('appname'),type='decorated_definition'\nline_star:73,line_end:75|char_star:8,char_end:35"->"@staticmethod,type='decorator'\nline_star:73,line_end:73|char_star:8,char_end:21";
"def create_app(foo):\n            return Flask('appname'),type='function_definition'\nline_star:74,line_end:75|char_star:8,char_end:35"[shape="box",fillcolor="#cee6b4",style=filled];
"@staticmethod\n        def create_app(foo):\n            return Flask('appname'),type='decorated_definition'\nline_star:73,line_end:75|char_star:8,char_end:35"->"def create_app(foo):\n            return Flask('appname'),type='function_definition'\nline_star:74,line_end:75|char_star:8,char_end:35";
"create_app,type='identifier'\nline_star:74,line_end:74|char_star:12,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"def create_app(foo):\n            return Flask('appname'),type='function_definition'\nline_star:74,line_end:75|char_star:8,char_end:35"->"create_app,type='identifier'\nline_star:74,line_end:74|char_star:12,char_end:22";
"(foo),type='parameters'\nline_star:74,line_end:74|char_star:22,char_end:27"[shape="box",fillcolor="white",style=filled];
"def create_app(foo):\n            return Flask('appname'),type='function_definition'\nline_star:74,line_end:75|char_star:8,char_end:35"->"(foo),type='parameters'\nline_star:74,line_end:74|char_star:22,char_end:27";
"foo,type='identifier'\nline_star:74,line_end:74|char_star:23,char_end:26"[shape="point",fillcolor="#121013",style=filled];
"(foo),type='parameters'\nline_star:74,line_end:74|char_star:22,char_end:27"->"foo,type='identifier'\nline_star:74,line_end:74|char_star:23,char_end:26";
"type='INFORMATION BLOCK'\nline_star:75,line_end:75|char_star:12,char_end:35"[shape="point",fillcolor="#121013",style=filled];
"def create_app(foo):\n            return Flask('appname'),type='function_definition'\nline_star:74,line_end:75|char_star:8,char_end:35"->"type='INFORMATION BLOCK'\nline_star:75,line_end:75|char_star:12,char_end:35";
"return Flask('appname'),type='return_statement'\nline_star:75,line_end:75|char_star:12,char_end:35"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:75,line_end:75|char_star:12,char_end:35"->"return Flask('appname'),type='return_statement'\nline_star:75,line_end:75|char_star:12,char_end:35";
"with pytest.deprecated_call(match='Script info'):\n        app = find_best_app(script_info, Module),type='with_statement'\nline_star:77,line_end:78|char_star:4,char_end:48"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:46,line_end:144|char_star:4,char_end:64"->"with pytest.deprecated_call(match='Script info'):\n        app = find_best_app(script_info, Module),type='with_statement'\nline_star:77,line_end:78|char_star:4,char_end:48";
"pytest.deprecated_call(match='Script info'),type='with_clause'\nline_star:77,line_end:77|char_star:9,char_end:52"[shape="box",fillcolor="white",style=filled];
"with pytest.deprecated_call(match='Script info'):\n        app = find_best_app(script_info, Module),type='with_statement'\nline_star:77,line_end:78|char_star:4,char_end:48"->"pytest.deprecated_call(match='Script info'),type='with_clause'\nline_star:77,line_end:77|char_star:9,char_end:52";
"type='INFORMATION BLOCK'\nline_star:78,line_end:78|char_star:8,char_end:48"[shape="point",fillcolor="#121013",style=filled];
"with pytest.deprecated_call(match='Script info'):\n        app = find_best_app(script_info, Module),type='with_statement'\nline_star:77,line_end:78|char_star:4,char_end:48"->"type='INFORMATION BLOCK'\nline_star:78,line_end:78|char_star:8,char_end:48";
"assert isinstance(app, Flask),type='assert_statement'\nline_star:80,line_end:80|char_star:4,char_end:33"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:46,line_end:144|char_star:4,char_end:64"->"assert isinstance(app, Flask),type='assert_statement'\nline_star:80,line_end:80|char_star:4,char_end:33";
"isinstance(app, Flask),type='call'\nline_star:80,line_end:80|char_star:11,char_end:33"[shape="box",fillcolor="white",style=filled];
"assert isinstance(app, Flask),type='assert_statement'\nline_star:80,line_end:80|char_star:4,char_end:33"->"isinstance(app, Flask),type='call'\nline_star:80,line_end:80|char_star:11,char_end:33";
"isinstance,type='identifier'\nline_star:80,line_end:80|char_star:11,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"isinstance(app, Flask),type='call'\nline_star:80,line_end:80|char_star:11,char_end:33"->"isinstance,type='identifier'\nline_star:80,line_end:80|char_star:11,char_end:21";
"(app, Flask),type='argument_list'\nline_star:80,line_end:80|char_star:21,char_end:33"[shape="box",fillcolor="white",style=filled];
"isinstance(app, Flask),type='call'\nline_star:80,line_end:80|char_star:11,char_end:33"->"(app, Flask),type='argument_list'\nline_star:80,line_end:80|char_star:21,char_end:33";
"app,type='identifier'\nline_star:80,line_end:80|char_star:22,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"(app, Flask),type='argument_list'\nline_star:80,line_end:80|char_star:21,char_end:33"->"app,type='identifier'\nline_star:80,line_end:80|char_star:22,char_end:25";
"Flask,type='identifier'\nline_star:80,line_end:80|char_star:27,char_end:32"[shape="point",fillcolor="#121013",style=filled];
"(app, Flask),type='argument_list'\nline_star:80,line_end:80|char_star:21,char_end:33"->"Flask,type='identifier'\nline_star:80,line_end:80|char_star:27,char_end:32";
"assert app.name == 'appname',type='assert_statement'\nline_star:81,line_end:81|char_star:4,char_end:32"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:46,line_end:144|char_star:4,char_end:64"->"assert app.name == 'appname',type='assert_statement'\nline_star:81,line_end:81|char_star:4,char_end:32";
"app.name == 'appname',type='comparison_operator'\nline_star:81,line_end:81|char_star:11,char_end:32"[shape="box",fillcolor="white",style=filled];
"assert app.name == 'appname',type='assert_statement'\nline_star:81,line_end:81|char_star:4,char_end:32"->"app.name == 'appname',type='comparison_operator'\nline_star:81,line_end:81|char_star:11,char_end:32";
"app.name,type='attribute'\nline_star:81,line_end:81|char_star:11,char_end:19"[shape="box",fillcolor="white",style=filled];
"app.name == 'appname',type='comparison_operator'\nline_star:81,line_end:81|char_star:11,char_end:32"->"app.name,type='attribute'\nline_star:81,line_end:81|char_star:11,char_end:19";
"app,type='identifier'\nline_star:81,line_end:81|char_star:11,char_end:14"[shape="point",fillcolor="#121013",style=filled];
"app.name,type='attribute'\nline_star:81,line_end:81|char_star:11,char_end:19"->"app,type='identifier'\nline_star:81,line_end:81|char_star:11,char_end:14";
"name,type='identifier'\nline_star:81,line_end:81|char_star:15,char_end:19"[shape="point",fillcolor="#121013",style=filled];
"app.name,type='attribute'\nline_star:81,line_end:81|char_star:11,char_end:19"->"name,type='identifier'\nline_star:81,line_end:81|char_star:15,char_end:19";
"class Module:\n        @staticmethod\n        def create_app(foo=None, script_info=None):\n            return Flask('appname'),type='class_definition'\nline_star:83,line_end:86|char_star:4,char_end:35"[shape="box",fillcolor="#ffdf91",style=filled];
"type='INFORMATION BLOCK'\nline_star:46,line_end:144|char_star:4,char_end:64"->"class Module:\n        @staticmethod\n        def create_app(foo=None, script_info=None):\n            return Flask('appname'),type='class_definition'\nline_star:83,line_end:86|char_star:4,char_end:35";
"Module,type='identifier'\nline_star:83,line_end:83|char_star:10,char_end:16"[shape="point",fillcolor="#121013",style=filled];
"class Module:\n        @staticmethod\n        def create_app(foo=None, script_info=None):\n            return Flask('appname'),type='class_definition'\nline_star:83,line_end:86|char_star:4,char_end:35"->"Module,type='identifier'\nline_star:83,line_end:83|char_star:10,char_end:16";
"type='INFORMATION BLOCK'\nline_star:84,line_end:86|char_star:8,char_end:35"[shape="point",fillcolor="#121013",style=filled];
"class Module:\n        @staticmethod\n        def create_app(foo=None, script_info=None):\n            return Flask('appname'),type='class_definition'\nline_star:83,line_end:86|char_star:4,char_end:35"->"type='INFORMATION BLOCK'\nline_star:84,line_end:86|char_star:8,char_end:35";
"@staticmethod\n        def create_app(foo=None, script_info=None):\n            return Flask('appname'),type='decorated_definition'\nline_star:84,line_end:86|char_star:8,char_end:35"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:84,line_end:86|char_star:8,char_end:35"->"@staticmethod\n        def create_app(foo=None, script_info=None):\n            return Flask('appname'),type='decorated_definition'\nline_star:84,line_end:86|char_star:8,char_end:35";
"@staticmethod,type='decorator'\nline_star:84,line_end:84|char_star:8,char_end:21"[shape="box",fillcolor="white",style=filled];
"@staticmethod\n        def create_app(foo=None, script_info=None):\n            return Flask('appname'),type='decorated_definition'\nline_star:84,line_end:86|char_star:8,char_end:35"->"@staticmethod,type='decorator'\nline_star:84,line_end:84|char_star:8,char_end:21";
"def create_app(foo=None, script_info=None):\n            return Flask('appname'),type='function_definition'\nline_star:85,line_end:86|char_star:8,char_end:35"[shape="box",fillcolor="#cee6b4",style=filled];
"@staticmethod\n        def create_app(foo=None, script_info=None):\n            return Flask('appname'),type='decorated_definition'\nline_star:84,line_end:86|char_star:8,char_end:35"->"def create_app(foo=None, script_info=None):\n            return Flask('appname'),type='function_definition'\nline_star:85,line_end:86|char_star:8,char_end:35";
"create_app,type='identifier'\nline_star:85,line_end:85|char_star:12,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"def create_app(foo=None, script_info=None):\n            return Flask('appname'),type='function_definition'\nline_star:85,line_end:86|char_star:8,char_end:35"->"create_app,type='identifier'\nline_star:85,line_end:85|char_star:12,char_end:22";
"(foo=None, script_info=None),type='parameters'\nline_star:85,line_end:85|char_star:22,char_end:50"[shape="box",fillcolor="white",style=filled];
"def create_app(foo=None, script_info=None):\n            return Flask('appname'),type='function_definition'\nline_star:85,line_end:86|char_star:8,char_end:35"->"(foo=None, script_info=None),type='parameters'\nline_star:85,line_end:85|char_star:22,char_end:50";
"foo=None,type='default_parameter'\nline_star:85,line_end:85|char_star:23,char_end:31"[shape="box",fillcolor="white",style=filled];
"(foo=None, script_info=None),type='parameters'\nline_star:85,line_end:85|char_star:22,char_end:50"->"foo=None,type='default_parameter'\nline_star:85,line_end:85|char_star:23,char_end:31";
"foo,type='identifier'\nline_star:85,line_end:85|char_star:23,char_end:26"[shape="point",fillcolor="#121013",style=filled];
"foo=None,type='default_parameter'\nline_star:85,line_end:85|char_star:23,char_end:31"->"foo,type='identifier'\nline_star:85,line_end:85|char_star:23,char_end:26";
"script_info=None,type='default_parameter'\nline_star:85,line_end:85|char_star:33,char_end:49"[shape="box",fillcolor="white",style=filled];
"(foo=None, script_info=None),type='parameters'\nline_star:85,line_end:85|char_star:22,char_end:50"->"script_info=None,type='default_parameter'\nline_star:85,line_end:85|char_star:33,char_end:49";
"script_info,type='identifier'\nline_star:85,line_end:85|char_star:33,char_end:44"[shape="point",fillcolor="#121013",style=filled];
"script_info=None,type='default_parameter'\nline_star:85,line_end:85|char_star:33,char_end:49"->"script_info,type='identifier'\nline_star:85,line_end:85|char_star:33,char_end:44";
"type='INFORMATION BLOCK'\nline_star:86,line_end:86|char_star:12,char_end:35"[shape="point",fillcolor="#121013",style=filled];
"def create_app(foo=None, script_info=None):\n            return Flask('appname'),type='function_definition'\nline_star:85,line_end:86|char_star:8,char_end:35"->"type='INFORMATION BLOCK'\nline_star:86,line_end:86|char_star:12,char_end:35";
"return Flask('appname'),type='return_statement'\nline_star:86,line_end:86|char_star:12,char_end:35"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:86,line_end:86|char_star:12,char_end:35"->"return Flask('appname'),type='return_statement'\nline_star:86,line_end:86|char_star:12,char_end:35";
"with pytest.deprecated_call(match='script_info'):\n        app = find_best_app(script_info, Module),type='with_statement'\nline_star:88,line_end:89|char_star:4,char_end:48"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:46,line_end:144|char_star:4,char_end:64"->"with pytest.deprecated_call(match='script_info'):\n        app = find_best_app(script_info, Module),type='with_statement'\nline_star:88,line_end:89|char_star:4,char_end:48";
"pytest.deprecated_call(match='script_info'),type='with_clause'\nline_star:88,line_end:88|char_star:9,char_end:52"[shape="box",fillcolor="white",style=filled];
"with pytest.deprecated_call(match='script_info'):\n        app = find_best_app(script_info, Module),type='with_statement'\nline_star:88,line_end:89|char_star:4,char_end:48"->"pytest.deprecated_call(match='script_info'),type='with_clause'\nline_star:88,line_end:88|char_star:9,char_end:52";
"type='INFORMATION BLOCK'\nline_star:89,line_end:89|char_star:8,char_end:48"[shape="point",fillcolor="#121013",style=filled];
"with pytest.deprecated_call(match='script_info'):\n        app = find_best_app(script_info, Module),type='with_statement'\nline_star:88,line_end:89|char_star:4,char_end:48"->"type='INFORMATION BLOCK'\nline_star:89,line_end:89|char_star:8,char_end:48";
"assert isinstance(app, Flask),type='assert_statement'\nline_star:91,line_end:91|char_star:4,char_end:33"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:46,line_end:144|char_star:4,char_end:64"->"assert isinstance(app, Flask),type='assert_statement'\nline_star:91,line_end:91|char_star:4,char_end:33";
"isinstance(app, Flask),type='call'\nline_star:91,line_end:91|char_star:11,char_end:33"[shape="box",fillcolor="white",style=filled];
"assert isinstance(app, Flask),type='assert_statement'\nline_star:91,line_end:91|char_star:4,char_end:33"->"isinstance(app, Flask),type='call'\nline_star:91,line_end:91|char_star:11,char_end:33";
"isinstance,type='identifier'\nline_star:91,line_end:91|char_star:11,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"isinstance(app, Flask),type='call'\nline_star:91,line_end:91|char_star:11,char_end:33"->"isinstance,type='identifier'\nline_star:91,line_end:91|char_star:11,char_end:21";
"(app, Flask),type='argument_list'\nline_star:91,line_end:91|char_star:21,char_end:33"[shape="box",fillcolor="white",style=filled];
"isinstance(app, Flask),type='call'\nline_star:91,line_end:91|char_star:11,char_end:33"->"(app, Flask),type='argument_list'\nline_star:91,line_end:91|char_star:21,char_end:33";
"app,type='identifier'\nline_star:91,line_end:91|char_star:22,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"(app, Flask),type='argument_list'\nline_star:91,line_end:91|char_star:21,char_end:33"->"app,type='identifier'\nline_star:91,line_end:91|char_star:22,char_end:25";
"Flask,type='identifier'\nline_star:91,line_end:91|char_star:27,char_end:32"[shape="point",fillcolor="#121013",style=filled];
"(app, Flask),type='argument_list'\nline_star:91,line_end:91|char_star:21,char_end:33"->"Flask,type='identifier'\nline_star:91,line_end:91|char_star:27,char_end:32";
"assert app.name == 'appname',type='assert_statement'\nline_star:92,line_end:92|char_star:4,char_end:32"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:46,line_end:144|char_star:4,char_end:64"->"assert app.name == 'appname',type='assert_statement'\nline_star:92,line_end:92|char_star:4,char_end:32";
"app.name == 'appname',type='comparison_operator'\nline_star:92,line_end:92|char_star:11,char_end:32"[shape="box",fillcolor="white",style=filled];
"assert app.name == 'appname',type='assert_statement'\nline_star:92,line_end:92|char_star:4,char_end:32"->"app.name == 'appname',type='comparison_operator'\nline_star:92,line_end:92|char_star:11,char_end:32";
"app.name,type='attribute'\nline_star:92,line_end:92|char_star:11,char_end:19"[shape="box",fillcolor="white",style=filled];
"app.name == 'appname',type='comparison_operator'\nline_star:92,line_end:92|char_star:11,char_end:32"->"app.name,type='attribute'\nline_star:92,line_end:92|char_star:11,char_end:19";
"app,type='identifier'\nline_star:92,line_end:92|char_star:11,char_end:14"[shape="point",fillcolor="#121013",style=filled];
"app.name,type='attribute'\nline_star:92,line_end:92|char_star:11,char_end:19"->"app,type='identifier'\nline_star:92,line_end:92|char_star:11,char_end:14";
"name,type='identifier'\nline_star:92,line_end:92|char_star:15,char_end:19"[shape="point",fillcolor="#121013",style=filled];
"app.name,type='attribute'\nline_star:92,line_end:92|char_star:11,char_end:19"->"name,type='identifier'\nline_star:92,line_end:92|char_star:15,char_end:19";
"class Module:\n        @staticmethod\n        def make_app():\n            return Flask('appname'),type='class_definition'\nline_star:94,line_end:97|char_star:4,char_end:35"[shape="box",fillcolor="#ffdf91",style=filled];
"type='INFORMATION BLOCK'\nline_star:46,line_end:144|char_star:4,char_end:64"->"class Module:\n        @staticmethod\n        def make_app():\n            return Flask('appname'),type='class_definition'\nline_star:94,line_end:97|char_star:4,char_end:35";
"Module,type='identifier'\nline_star:94,line_end:94|char_star:10,char_end:16"[shape="point",fillcolor="#121013",style=filled];
"class Module:\n        @staticmethod\n        def make_app():\n            return Flask('appname'),type='class_definition'\nline_star:94,line_end:97|char_star:4,char_end:35"->"Module,type='identifier'\nline_star:94,line_end:94|char_star:10,char_end:16";
"type='INFORMATION BLOCK'\nline_star:95,line_end:97|char_star:8,char_end:35"[shape="point",fillcolor="#121013",style=filled];
"class Module:\n        @staticmethod\n        def make_app():\n            return Flask('appname'),type='class_definition'\nline_star:94,line_end:97|char_star:4,char_end:35"->"type='INFORMATION BLOCK'\nline_star:95,line_end:97|char_star:8,char_end:35";
"@staticmethod\n        def make_app():\n            return Flask('appname'),type='decorated_definition'\nline_star:95,line_end:97|char_star:8,char_end:35"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:95,line_end:97|char_star:8,char_end:35"->"@staticmethod\n        def make_app():\n            return Flask('appname'),type='decorated_definition'\nline_star:95,line_end:97|char_star:8,char_end:35";
"@staticmethod,type='decorator'\nline_star:95,line_end:95|char_star:8,char_end:21"[shape="box",fillcolor="white",style=filled];
"@staticmethod\n        def make_app():\n            return Flask('appname'),type='decorated_definition'\nline_star:95,line_end:97|char_star:8,char_end:35"->"@staticmethod,type='decorator'\nline_star:95,line_end:95|char_star:8,char_end:21";
"def make_app():\n            return Flask('appname'),type='function_definition'\nline_star:96,line_end:97|char_star:8,char_end:35"[shape="box",fillcolor="#cee6b4",style=filled];
"@staticmethod\n        def make_app():\n            return Flask('appname'),type='decorated_definition'\nline_star:95,line_end:97|char_star:8,char_end:35"->"def make_app():\n            return Flask('appname'),type='function_definition'\nline_star:96,line_end:97|char_star:8,char_end:35";
"make_app,type='identifier'\nline_star:96,line_end:96|char_star:12,char_end:20"[shape="point",fillcolor="#121013",style=filled];
"def make_app():\n            return Flask('appname'),type='function_definition'\nline_star:96,line_end:97|char_star:8,char_end:35"->"make_app,type='identifier'\nline_star:96,line_end:96|char_star:12,char_end:20";
"type='INFORMATION BLOCK'\nline_star:97,line_end:97|char_star:12,char_end:35"[shape="point",fillcolor="#121013",style=filled];
"def make_app():\n            return Flask('appname'),type='function_definition'\nline_star:96,line_end:97|char_star:8,char_end:35"->"type='INFORMATION BLOCK'\nline_star:97,line_end:97|char_star:12,char_end:35";
"return Flask('appname'),type='return_statement'\nline_star:97,line_end:97|char_star:12,char_end:35"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:97,line_end:97|char_star:12,char_end:35"->"return Flask('appname'),type='return_statement'\nline_star:97,line_end:97|char_star:12,char_end:35";
"assert isinstance(app, Flask),type='assert_statement'\nline_star:100,line_end:100|char_star:4,char_end:33"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:46,line_end:144|char_star:4,char_end:64"->"assert isinstance(app, Flask),type='assert_statement'\nline_star:100,line_end:100|char_star:4,char_end:33";
"isinstance(app, Flask),type='call'\nline_star:100,line_end:100|char_star:11,char_end:33"[shape="box",fillcolor="white",style=filled];
"assert isinstance(app, Flask),type='assert_statement'\nline_star:100,line_end:100|char_star:4,char_end:33"->"isinstance(app, Flask),type='call'\nline_star:100,line_end:100|char_star:11,char_end:33";
"isinstance,type='identifier'\nline_star:100,line_end:100|char_star:11,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"isinstance(app, Flask),type='call'\nline_star:100,line_end:100|char_star:11,char_end:33"->"isinstance,type='identifier'\nline_star:100,line_end:100|char_star:11,char_end:21";
"(app, Flask),type='argument_list'\nline_star:100,line_end:100|char_star:21,char_end:33"[shape="box",fillcolor="white",style=filled];
"isinstance(app, Flask),type='call'\nline_star:100,line_end:100|char_star:11,char_end:33"->"(app, Flask),type='argument_list'\nline_star:100,line_end:100|char_star:21,char_end:33";
"app,type='identifier'\nline_star:100,line_end:100|char_star:22,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"(app, Flask),type='argument_list'\nline_star:100,line_end:100|char_star:21,char_end:33"->"app,type='identifier'\nline_star:100,line_end:100|char_star:22,char_end:25";
"Flask,type='identifier'\nline_star:100,line_end:100|char_star:27,char_end:32"[shape="point",fillcolor="#121013",style=filled];
"(app, Flask),type='argument_list'\nline_star:100,line_end:100|char_star:21,char_end:33"->"Flask,type='identifier'\nline_star:100,line_end:100|char_star:27,char_end:32";
"assert app.name == 'appname',type='assert_statement'\nline_star:101,line_end:101|char_star:4,char_end:32"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:46,line_end:144|char_star:4,char_end:64"->"assert app.name == 'appname',type='assert_statement'\nline_star:101,line_end:101|char_star:4,char_end:32";
"app.name == 'appname',type='comparison_operator'\nline_star:101,line_end:101|char_star:11,char_end:32"[shape="box",fillcolor="white",style=filled];
"assert app.name == 'appname',type='assert_statement'\nline_star:101,line_end:101|char_star:4,char_end:32"->"app.name == 'appname',type='comparison_operator'\nline_star:101,line_end:101|char_star:11,char_end:32";
"app.name,type='attribute'\nline_star:101,line_end:101|char_star:11,char_end:19"[shape="box",fillcolor="white",style=filled];
"app.name == 'appname',type='comparison_operator'\nline_star:101,line_end:101|char_star:11,char_end:32"->"app.name,type='attribute'\nline_star:101,line_end:101|char_star:11,char_end:19";
"app,type='identifier'\nline_star:101,line_end:101|char_star:11,char_end:14"[shape="point",fillcolor="#121013",style=filled];
"app.name,type='attribute'\nline_star:101,line_end:101|char_star:11,char_end:19"->"app,type='identifier'\nline_star:101,line_end:101|char_star:11,char_end:14";
"name,type='identifier'\nline_star:101,line_end:101|char_star:15,char_end:19"[shape="point",fillcolor="#121013",style=filled];
"app.name,type='attribute'\nline_star:101,line_end:101|char_star:11,char_end:19"->"name,type='identifier'\nline_star:101,line_end:101|char_star:15,char_end:19";
"class Module:\n        myapp = Flask('appname1')\n\n        @staticmethod\n        def create_app():\n            return Flask('appname2'),type='class_definition'\nline_star:103,line_end:108|char_star:4,char_end:36"[shape="box",fillcolor="#ffdf91",style=filled];
"type='INFORMATION BLOCK'\nline_star:46,line_end:144|char_star:4,char_end:64"->"class Module:\n        myapp = Flask('appname1')\n\n        @staticmethod\n        def create_app():\n            return Flask('appname2'),type='class_definition'\nline_star:103,line_end:108|char_star:4,char_end:36";
"Module,type='identifier'\nline_star:103,line_end:103|char_star:10,char_end:16"[shape="point",fillcolor="#121013",style=filled];
"class Module:\n        myapp = Flask('appname1')\n\n        @staticmethod\n        def create_app():\n            return Flask('appname2'),type='class_definition'\nline_star:103,line_end:108|char_star:4,char_end:36"->"Module,type='identifier'\nline_star:103,line_end:103|char_star:10,char_end:16";
"type='INFORMATION BLOCK'\nline_star:104,line_end:108|char_star:8,char_end:36"[shape="point",fillcolor="#121013",style=filled];
"class Module:\n        myapp = Flask('appname1')\n\n        @staticmethod\n        def create_app():\n            return Flask('appname2'),type='class_definition'\nline_star:103,line_end:108|char_star:4,char_end:36"->"type='INFORMATION BLOCK'\nline_star:104,line_end:108|char_star:8,char_end:36";
"@staticmethod\n        def create_app():\n            return Flask('appname2'),type='decorated_definition'\nline_star:106,line_end:108|char_star:8,char_end:36"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:104,line_end:108|char_star:8,char_end:36"->"@staticmethod\n        def create_app():\n            return Flask('appname2'),type='decorated_definition'\nline_star:106,line_end:108|char_star:8,char_end:36";
"@staticmethod,type='decorator'\nline_star:106,line_end:106|char_star:8,char_end:21"[shape="box",fillcolor="white",style=filled];
"@staticmethod\n        def create_app():\n            return Flask('appname2'),type='decorated_definition'\nline_star:106,line_end:108|char_star:8,char_end:36"->"@staticmethod,type='decorator'\nline_star:106,line_end:106|char_star:8,char_end:21";
"def create_app():\n            return Flask('appname2'),type='function_definition'\nline_star:107,line_end:108|char_star:8,char_end:36"[shape="box",fillcolor="#cee6b4",style=filled];
"@staticmethod\n        def create_app():\n            return Flask('appname2'),type='decorated_definition'\nline_star:106,line_end:108|char_star:8,char_end:36"->"def create_app():\n            return Flask('appname2'),type='function_definition'\nline_star:107,line_end:108|char_star:8,char_end:36";
"create_app,type='identifier'\nline_star:107,line_end:107|char_star:12,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"def create_app():\n            return Flask('appname2'),type='function_definition'\nline_star:107,line_end:108|char_star:8,char_end:36"->"create_app,type='identifier'\nline_star:107,line_end:107|char_star:12,char_end:22";
"type='INFORMATION BLOCK'\nline_star:108,line_end:108|char_star:12,char_end:36"[shape="point",fillcolor="#121013",style=filled];
"def create_app():\n            return Flask('appname2'),type='function_definition'\nline_star:107,line_end:108|char_star:8,char_end:36"->"type='INFORMATION BLOCK'\nline_star:108,line_end:108|char_star:12,char_end:36";
"return Flask('appname2'),type='return_statement'\nline_star:108,line_end:108|char_star:12,char_end:36"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:108,line_end:108|char_star:12,char_end:36"->"return Flask('appname2'),type='return_statement'\nline_star:108,line_end:108|char_star:12,char_end:36";
"assert find_best_app(script_info, Module) == Module.myapp,type='assert_statement'\nline_star:110,line_end:110|char_star:4,char_end:61"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:46,line_end:144|char_star:4,char_end:64"->"assert find_best_app(script_info, Module) == Module.myapp,type='assert_statement'\nline_star:110,line_end:110|char_star:4,char_end:61";
"find_best_app(script_info, Module) == Module.myapp,type='comparison_operator'\nline_star:110,line_end:110|char_star:11,char_end:61"[shape="box",fillcolor="white",style=filled];
"assert find_best_app(script_info, Module) == Module.myapp,type='assert_statement'\nline_star:110,line_end:110|char_star:4,char_end:61"->"find_best_app(script_info, Module) == Module.myapp,type='comparison_operator'\nline_star:110,line_end:110|char_star:11,char_end:61";
"find_best_app(script_info, Module),type='call'\nline_star:110,line_end:110|char_star:11,char_end:45"[shape="box",fillcolor="white",style=filled];
"find_best_app(script_info, Module) == Module.myapp,type='comparison_operator'\nline_star:110,line_end:110|char_star:11,char_end:61"->"find_best_app(script_info, Module),type='call'\nline_star:110,line_end:110|char_star:11,char_end:45";
"find_best_app,type='identifier'\nline_star:110,line_end:110|char_star:11,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"find_best_app(script_info, Module),type='call'\nline_star:110,line_end:110|char_star:11,char_end:45"->"find_best_app,type='identifier'\nline_star:110,line_end:110|char_star:11,char_end:24";
"(script_info, Module),type='argument_list'\nline_star:110,line_end:110|char_star:24,char_end:45"[shape="box",fillcolor="white",style=filled];
"find_best_app(script_info, Module),type='call'\nline_star:110,line_end:110|char_star:11,char_end:45"->"(script_info, Module),type='argument_list'\nline_star:110,line_end:110|char_star:24,char_end:45";
"script_info,type='identifier'\nline_star:110,line_end:110|char_star:25,char_end:36"[shape="point",fillcolor="#121013",style=filled];
"(script_info, Module),type='argument_list'\nline_star:110,line_end:110|char_star:24,char_end:45"->"script_info,type='identifier'\nline_star:110,line_end:110|char_star:25,char_end:36";
"Module,type='identifier'\nline_star:110,line_end:110|char_star:38,char_end:44"[shape="point",fillcolor="#121013",style=filled];
"(script_info, Module),type='argument_list'\nline_star:110,line_end:110|char_star:24,char_end:45"->"Module,type='identifier'\nline_star:110,line_end:110|char_star:38,char_end:44";
"Module.myapp,type='attribute'\nline_star:110,line_end:110|char_star:49,char_end:61"[shape="box",fillcolor="white",style=filled];
"find_best_app(script_info, Module) == Module.myapp,type='comparison_operator'\nline_star:110,line_end:110|char_star:11,char_end:61"->"Module.myapp,type='attribute'\nline_star:110,line_end:110|char_star:49,char_end:61";
"Module,type='identifier'\nline_star:110,line_end:110|char_star:49,char_end:55"[shape="point",fillcolor="#121013",style=filled];
"Module.myapp,type='attribute'\nline_star:110,line_end:110|char_star:49,char_end:61"->"Module,type='identifier'\nline_star:110,line_end:110|char_star:49,char_end:55";
"myapp,type='identifier'\nline_star:110,line_end:110|char_star:56,char_end:61"[shape="point",fillcolor="#121013",style=filled];
"Module.myapp,type='attribute'\nline_star:110,line_end:110|char_star:49,char_end:61"->"myapp,type='identifier'\nline_star:110,line_end:110|char_star:56,char_end:61";
"class Module:\n        myapp = Flask('appname1')\n\n        @staticmethod\n        def create_app():\n            return Flask('appname2'),type='class_definition'\nline_star:112,line_end:117|char_star:4,char_end:36"[shape="box",fillcolor="#ffdf91",style=filled];
"type='INFORMATION BLOCK'\nline_star:46,line_end:144|char_star:4,char_end:64"->"class Module:\n        myapp = Flask('appname1')\n\n        @staticmethod\n        def create_app():\n            return Flask('appname2'),type='class_definition'\nline_star:112,line_end:117|char_star:4,char_end:36";
"Module,type='identifier'\nline_star:112,line_end:112|char_star:10,char_end:16"[shape="point",fillcolor="#121013",style=filled];
"class Module:\n        myapp = Flask('appname1')\n\n        @staticmethod\n        def create_app():\n            return Flask('appname2'),type='class_definition'\nline_star:112,line_end:117|char_star:4,char_end:36"->"Module,type='identifier'\nline_star:112,line_end:112|char_star:10,char_end:16";
"type='INFORMATION BLOCK'\nline_star:113,line_end:117|char_star:8,char_end:36"[shape="point",fillcolor="#121013",style=filled];
"class Module:\n        myapp = Flask('appname1')\n\n        @staticmethod\n        def create_app():\n            return Flask('appname2'),type='class_definition'\nline_star:112,line_end:117|char_star:4,char_end:36"->"type='INFORMATION BLOCK'\nline_star:113,line_end:117|char_star:8,char_end:36";
"@staticmethod\n        def create_app():\n            return Flask('appname2'),type='decorated_definition'\nline_star:115,line_end:117|char_star:8,char_end:36"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:113,line_end:117|char_star:8,char_end:36"->"@staticmethod\n        def create_app():\n            return Flask('appname2'),type='decorated_definition'\nline_star:115,line_end:117|char_star:8,char_end:36";
"@staticmethod,type='decorator'\nline_star:115,line_end:115|char_star:8,char_end:21"[shape="box",fillcolor="white",style=filled];
"@staticmethod\n        def create_app():\n            return Flask('appname2'),type='decorated_definition'\nline_star:115,line_end:117|char_star:8,char_end:36"->"@staticmethod,type='decorator'\nline_star:115,line_end:115|char_star:8,char_end:21";
"def create_app():\n            return Flask('appname2'),type='function_definition'\nline_star:116,line_end:117|char_star:8,char_end:36"[shape="box",fillcolor="#cee6b4",style=filled];
"@staticmethod\n        def create_app():\n            return Flask('appname2'),type='decorated_definition'\nline_star:115,line_end:117|char_star:8,char_end:36"->"def create_app():\n            return Flask('appname2'),type='function_definition'\nline_star:116,line_end:117|char_star:8,char_end:36";
"create_app,type='identifier'\nline_star:116,line_end:116|char_star:12,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"def create_app():\n            return Flask('appname2'),type='function_definition'\nline_star:116,line_end:117|char_star:8,char_end:36"->"create_app,type='identifier'\nline_star:116,line_end:116|char_star:12,char_end:22";
"type='INFORMATION BLOCK'\nline_star:117,line_end:117|char_star:12,char_end:36"[shape="point",fillcolor="#121013",style=filled];
"def create_app():\n            return Flask('appname2'),type='function_definition'\nline_star:116,line_end:117|char_star:8,char_end:36"->"type='INFORMATION BLOCK'\nline_star:117,line_end:117|char_star:12,char_end:36";
"return Flask('appname2'),type='return_statement'\nline_star:117,line_end:117|char_star:12,char_end:36"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:117,line_end:117|char_star:12,char_end:36"->"return Flask('appname2'),type='return_statement'\nline_star:117,line_end:117|char_star:12,char_end:36";
"assert find_best_app(script_info, Module) == Module.myapp,type='assert_statement'\nline_star:119,line_end:119|char_star:4,char_end:61"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:46,line_end:144|char_star:4,char_end:64"->"assert find_best_app(script_info, Module) == Module.myapp,type='assert_statement'\nline_star:119,line_end:119|char_star:4,char_end:61";
"find_best_app(script_info, Module) == Module.myapp,type='comparison_operator'\nline_star:119,line_end:119|char_star:11,char_end:61"[shape="box",fillcolor="white",style=filled];
"assert find_best_app(script_info, Module) == Module.myapp,type='assert_statement'\nline_star:119,line_end:119|char_star:4,char_end:61"->"find_best_app(script_info, Module) == Module.myapp,type='comparison_operator'\nline_star:119,line_end:119|char_star:11,char_end:61";
"find_best_app(script_info, Module),type='call'\nline_star:119,line_end:119|char_star:11,char_end:45"[shape="box",fillcolor="white",style=filled];
"find_best_app(script_info, Module) == Module.myapp,type='comparison_operator'\nline_star:119,line_end:119|char_star:11,char_end:61"->"find_best_app(script_info, Module),type='call'\nline_star:119,line_end:119|char_star:11,char_end:45";
"find_best_app,type='identifier'\nline_star:119,line_end:119|char_star:11,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"find_best_app(script_info, Module),type='call'\nline_star:119,line_end:119|char_star:11,char_end:45"->"find_best_app,type='identifier'\nline_star:119,line_end:119|char_star:11,char_end:24";
"(script_info, Module),type='argument_list'\nline_star:119,line_end:119|char_star:24,char_end:45"[shape="box",fillcolor="white",style=filled];
"find_best_app(script_info, Module),type='call'\nline_star:119,line_end:119|char_star:11,char_end:45"->"(script_info, Module),type='argument_list'\nline_star:119,line_end:119|char_star:24,char_end:45";
"script_info,type='identifier'\nline_star:119,line_end:119|char_star:25,char_end:36"[shape="point",fillcolor="#121013",style=filled];
"(script_info, Module),type='argument_list'\nline_star:119,line_end:119|char_star:24,char_end:45"->"script_info,type='identifier'\nline_star:119,line_end:119|char_star:25,char_end:36";
"Module,type='identifier'\nline_star:119,line_end:119|char_star:38,char_end:44"[shape="point",fillcolor="#121013",style=filled];
"(script_info, Module),type='argument_list'\nline_star:119,line_end:119|char_star:24,char_end:45"->"Module,type='identifier'\nline_star:119,line_end:119|char_star:38,char_end:44";
"Module.myapp,type='attribute'\nline_star:119,line_end:119|char_star:49,char_end:61"[shape="box",fillcolor="white",style=filled];
"find_best_app(script_info, Module) == Module.myapp,type='comparison_operator'\nline_star:119,line_end:119|char_star:11,char_end:61"->"Module.myapp,type='attribute'\nline_star:119,line_end:119|char_star:49,char_end:61";
"Module,type='identifier'\nline_star:119,line_end:119|char_star:49,char_end:55"[shape="point",fillcolor="#121013",style=filled];
"Module.myapp,type='attribute'\nline_star:119,line_end:119|char_star:49,char_end:61"->"Module,type='identifier'\nline_star:119,line_end:119|char_star:49,char_end:55";
"myapp,type='identifier'\nline_star:119,line_end:119|char_star:56,char_end:61"[shape="point",fillcolor="#121013",style=filled];
"Module.myapp,type='attribute'\nline_star:119,line_end:119|char_star:49,char_end:61"->"myapp,type='identifier'\nline_star:119,line_end:119|char_star:56,char_end:61";
"class Module:\n        pass,type='class_definition'\nline_star:121,line_end:122|char_star:4,char_end:12"[shape="box",fillcolor="#ffdf91",style=filled];
"type='INFORMATION BLOCK'\nline_star:46,line_end:144|char_star:4,char_end:64"->"class Module:\n        pass,type='class_definition'\nline_star:121,line_end:122|char_star:4,char_end:12";
"Module,type='identifier'\nline_star:121,line_end:121|char_star:10,char_end:16"[shape="point",fillcolor="#121013",style=filled];
"class Module:\n        pass,type='class_definition'\nline_star:121,line_end:122|char_star:4,char_end:12"->"Module,type='identifier'\nline_star:121,line_end:121|char_star:10,char_end:16";
"type='INFORMATION BLOCK'\nline_star:122,line_end:122|char_star:8,char_end:12"[shape="point",fillcolor="#121013",style=filled];
"class Module:\n        pass,type='class_definition'\nline_star:121,line_end:122|char_star:4,char_end:12"->"type='INFORMATION BLOCK'\nline_star:122,line_end:122|char_star:8,char_end:12";
"pass,type='pass_statement'\nline_star:122,line_end:122|char_star:8,char_end:12"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:122,line_end:122|char_star:8,char_end:12"->"pass,type='pass_statement'\nline_star:122,line_end:122|char_star:8,char_end:12";
"pass,type='pass'\nline_star:122,line_end:122|char_star:8,char_end:12"[shape="box",fillcolor="white",style=filled];
"pass,type='pass_statement'\nline_star:122,line_end:122|char_star:8,char_end:12"->"pass,type='pass'\nline_star:122,line_end:122|char_star:8,char_end:12";
"class Module:\n        myapp1 = Flask('appname1')\n        myapp2 = Flask('appname2'),type='class_definition'\nline_star:126,line_end:128|char_star:4,char_end:34"[shape="box",fillcolor="#ffdf91",style=filled];
"type='INFORMATION BLOCK'\nline_star:46,line_end:144|char_star:4,char_end:64"->"class Module:\n        myapp1 = Flask('appname1')\n        myapp2 = Flask('appname2'),type='class_definition'\nline_star:126,line_end:128|char_star:4,char_end:34";
"Module,type='identifier'\nline_star:126,line_end:126|char_star:10,char_end:16"[shape="point",fillcolor="#121013",style=filled];
"class Module:\n        myapp1 = Flask('appname1')\n        myapp2 = Flask('appname2'),type='class_definition'\nline_star:126,line_end:128|char_star:4,char_end:34"->"Module,type='identifier'\nline_star:126,line_end:126|char_star:10,char_end:16";
"type='INFORMATION BLOCK'\nline_star:127,line_end:128|char_star:8,char_end:34"[shape="point",fillcolor="#121013",style=filled];
"class Module:\n        myapp1 = Flask('appname1')\n        myapp2 = Flask('appname2'),type='class_definition'\nline_star:126,line_end:128|char_star:4,char_end:34"->"type='INFORMATION BLOCK'\nline_star:127,line_end:128|char_star:8,char_end:34";
"class Module:\n        @staticmethod\n        def create_app(foo, bar):\n            return Flask('appname2'),type='class_definition'\nline_star:132,line_end:135|char_star:4,char_end:36"[shape="box",fillcolor="#ffdf91",style=filled];
"type='INFORMATION BLOCK'\nline_star:46,line_end:144|char_star:4,char_end:64"->"class Module:\n        @staticmethod\n        def create_app(foo, bar):\n            return Flask('appname2'),type='class_definition'\nline_star:132,line_end:135|char_star:4,char_end:36";
"Module,type='identifier'\nline_star:132,line_end:132|char_star:10,char_end:16"[shape="point",fillcolor="#121013",style=filled];
"class Module:\n        @staticmethod\n        def create_app(foo, bar):\n            return Flask('appname2'),type='class_definition'\nline_star:132,line_end:135|char_star:4,char_end:36"->"Module,type='identifier'\nline_star:132,line_end:132|char_star:10,char_end:16";
"type='INFORMATION BLOCK'\nline_star:133,line_end:135|char_star:8,char_end:36"[shape="point",fillcolor="#121013",style=filled];
"class Module:\n        @staticmethod\n        def create_app(foo, bar):\n            return Flask('appname2'),type='class_definition'\nline_star:132,line_end:135|char_star:4,char_end:36"->"type='INFORMATION BLOCK'\nline_star:133,line_end:135|char_star:8,char_end:36";
"@staticmethod\n        def create_app(foo, bar):\n            return Flask('appname2'),type='decorated_definition'\nline_star:133,line_end:135|char_star:8,char_end:36"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:133,line_end:135|char_star:8,char_end:36"->"@staticmethod\n        def create_app(foo, bar):\n            return Flask('appname2'),type='decorated_definition'\nline_star:133,line_end:135|char_star:8,char_end:36";
"@staticmethod,type='decorator'\nline_star:133,line_end:133|char_star:8,char_end:21"[shape="box",fillcolor="white",style=filled];
"@staticmethod\n        def create_app(foo, bar):\n            return Flask('appname2'),type='decorated_definition'\nline_star:133,line_end:135|char_star:8,char_end:36"->"@staticmethod,type='decorator'\nline_star:133,line_end:133|char_star:8,char_end:21";
"def create_app(foo, bar):\n            return Flask('appname2'),type='function_definition'\nline_star:134,line_end:135|char_star:8,char_end:36"[shape="box",fillcolor="#cee6b4",style=filled];
"@staticmethod\n        def create_app(foo, bar):\n            return Flask('appname2'),type='decorated_definition'\nline_star:133,line_end:135|char_star:8,char_end:36"->"def create_app(foo, bar):\n            return Flask('appname2'),type='function_definition'\nline_star:134,line_end:135|char_star:8,char_end:36";
"create_app,type='identifier'\nline_star:134,line_end:134|char_star:12,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"def create_app(foo, bar):\n            return Flask('appname2'),type='function_definition'\nline_star:134,line_end:135|char_star:8,char_end:36"->"create_app,type='identifier'\nline_star:134,line_end:134|char_star:12,char_end:22";
"(foo, bar),type='parameters'\nline_star:134,line_end:134|char_star:22,char_end:32"[shape="box",fillcolor="white",style=filled];
"def create_app(foo, bar):\n            return Flask('appname2'),type='function_definition'\nline_star:134,line_end:135|char_star:8,char_end:36"->"(foo, bar),type='parameters'\nline_star:134,line_end:134|char_star:22,char_end:32";
"foo,type='identifier'\nline_star:134,line_end:134|char_star:23,char_end:26"[shape="point",fillcolor="#121013",style=filled];
"(foo, bar),type='parameters'\nline_star:134,line_end:134|char_star:22,char_end:32"->"foo,type='identifier'\nline_star:134,line_end:134|char_star:23,char_end:26";
"bar,type='identifier'\nline_star:134,line_end:134|char_star:28,char_end:31"[shape="point",fillcolor="#121013",style=filled];
"(foo, bar),type='parameters'\nline_star:134,line_end:134|char_star:22,char_end:32"->"bar,type='identifier'\nline_star:134,line_end:134|char_star:28,char_end:31";
"type='INFORMATION BLOCK'\nline_star:135,line_end:135|char_star:12,char_end:36"[shape="point",fillcolor="#121013",style=filled];
"def create_app(foo, bar):\n            return Flask('appname2'),type='function_definition'\nline_star:134,line_end:135|char_star:8,char_end:36"->"type='INFORMATION BLOCK'\nline_star:135,line_end:135|char_star:12,char_end:36";
"return Flask('appname2'),type='return_statement'\nline_star:135,line_end:135|char_star:12,char_end:36"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:135,line_end:135|char_star:12,char_end:36"->"return Flask('appname2'),type='return_statement'\nline_star:135,line_end:135|char_star:12,char_end:36";
"class Module:\n        @staticmethod\n        def create_app():\n            raise TypeError('bad bad factory!'),type='class_definition'\nline_star:139,line_end:142|char_star:4,char_end:47"[shape="box",fillcolor="#ffdf91",style=filled];
"type='INFORMATION BLOCK'\nline_star:46,line_end:144|char_star:4,char_end:64"->"class Module:\n        @staticmethod\n        def create_app():\n            raise TypeError('bad bad factory!'),type='class_definition'\nline_star:139,line_end:142|char_star:4,char_end:47";
"Module,type='identifier'\nline_star:139,line_end:139|char_star:10,char_end:16"[shape="point",fillcolor="#121013",style=filled];
"class Module:\n        @staticmethod\n        def create_app():\n            raise TypeError('bad bad factory!'),type='class_definition'\nline_star:139,line_end:142|char_star:4,char_end:47"->"Module,type='identifier'\nline_star:139,line_end:139|char_star:10,char_end:16";
"type='INFORMATION BLOCK'\nline_star:140,line_end:142|char_star:8,char_end:47"[shape="point",fillcolor="#121013",style=filled];
"class Module:\n        @staticmethod\n        def create_app():\n            raise TypeError('bad bad factory!'),type='class_definition'\nline_star:139,line_end:142|char_star:4,char_end:47"->"type='INFORMATION BLOCK'\nline_star:140,line_end:142|char_star:8,char_end:47";
"@staticmethod\n        def create_app():\n            raise TypeError('bad bad factory!'),type='decorated_definition'\nline_star:140,line_end:142|char_star:8,char_end:47"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:140,line_end:142|char_star:8,char_end:47"->"@staticmethod\n        def create_app():\n            raise TypeError('bad bad factory!'),type='decorated_definition'\nline_star:140,line_end:142|char_star:8,char_end:47";
"@staticmethod,type='decorator'\nline_star:140,line_end:140|char_star:8,char_end:21"[shape="box",fillcolor="white",style=filled];
"@staticmethod\n        def create_app():\n            raise TypeError('bad bad factory!'),type='decorated_definition'\nline_star:140,line_end:142|char_star:8,char_end:47"->"@staticmethod,type='decorator'\nline_star:140,line_end:140|char_star:8,char_end:21";
"def create_app():\n            raise TypeError('bad bad factory!'),type='function_definition'\nline_star:141,line_end:142|char_star:8,char_end:47"[shape="box",fillcolor="#cee6b4",style=filled];
"@staticmethod\n        def create_app():\n            raise TypeError('bad bad factory!'),type='decorated_definition'\nline_star:140,line_end:142|char_star:8,char_end:47"->"def create_app():\n            raise TypeError('bad bad factory!'),type='function_definition'\nline_star:141,line_end:142|char_star:8,char_end:47";
"create_app,type='identifier'\nline_star:141,line_end:141|char_star:12,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"def create_app():\n            raise TypeError('bad bad factory!'),type='function_definition'\nline_star:141,line_end:142|char_star:8,char_end:47"->"create_app,type='identifier'\nline_star:141,line_end:141|char_star:12,char_end:22";
"type='INFORMATION BLOCK'\nline_star:142,line_end:142|char_star:12,char_end:47"[shape="point",fillcolor="#121013",style=filled];
"def create_app():\n            raise TypeError('bad bad factory!'),type='function_definition'\nline_star:141,line_end:142|char_star:8,char_end:47"->"type='INFORMATION BLOCK'\nline_star:142,line_end:142|char_star:12,char_end:47";
"raise TypeError('bad bad factory!'),type='raise_statement'\nline_star:142,line_end:142|char_star:12,char_end:47"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:142,line_end:142|char_star:12,char_end:47"->"raise TypeError('bad bad factory!'),type='raise_statement'\nline_star:142,line_end:142|char_star:12,char_end:47";
"raise,type='raise'\nline_star:142,line_end:142|char_star:12,char_end:17"[shape="box",fillcolor="white",style=filled];
"raise TypeError('bad bad factory!'),type='raise_statement'\nline_star:142,line_end:142|char_star:12,char_end:47"->"raise,type='raise'\nline_star:142,line_end:142|char_star:12,char_end:17";
"TypeError('bad bad factory!'),type='call'\nline_star:142,line_end:142|char_star:18,char_end:47"[shape="box",fillcolor="white",style=filled];
"raise TypeError('bad bad factory!'),type='raise_statement'\nline_star:142,line_end:142|char_star:12,char_end:47"->"TypeError('bad bad factory!'),type='call'\nline_star:142,line_end:142|char_star:18,char_end:47";
"TypeError,type='identifier'\nline_star:142,line_end:142|char_star:18,char_end:27"[shape="point",fillcolor="#121013",style=filled];
"TypeError('bad bad factory!'),type='call'\nline_star:142,line_end:142|char_star:18,char_end:47"->"TypeError,type='identifier'\nline_star:142,line_end:142|char_star:18,char_end:27";
"('bad bad factory!'),type='argument_list'\nline_star:142,line_end:142|char_star:27,char_end:47"[shape="box",fillcolor="white",style=filled];
"TypeError('bad bad factory!'),type='call'\nline_star:142,line_end:142|char_star:18,char_end:47"->"('bad bad factory!'),type='argument_list'\nline_star:142,line_end:142|char_star:27,char_end:47";
"@pytest.mark.parametrize(\n    'value,path,result',\n    (\n        ('test', cwd, 'test'),\n        ('test.py', cwd, 'test'),\n        ('a/test', os.path.join(cwd, 'a'), 'test'),\n        ('test/__init__.py', cwd, 'test'),\n        ('test/__init__', cwd, 'test'),\n        # nested package\n        (\n            os.path.join(test_path, 'cliapp', 'inner1', '__init__'),\n            test_path,\n            'cliapp.inner1',\n        ),\n        (\n            os.path.join(test_path, 'cliapp', 'inner1', 'inner2'),\n            test_path,\n            'cliapp.inner1.inner2',\n        ),\n        # dotted name\n        ('test.a.b', cwd, 'test.a.b'),\n        (os.path.join(test_path, 'cliapp.app'), test_path, 'cliapp.app'),\n        # not a Python file, will be caught during import\n        (\n            os.path.join(test_path, 'cliapp', 'message.txt'),\n            test_path,\n            'cliapp.message.txt',\n        ),\n    ),\n)\ndef test_prepare_import(request, value, path, result):\n    '''Expect the correct path to be set and the correct import and app names\n    to be returned.\n\n    :func:`prepare_exec_for_file` has a side effect where the parent directory\n    of the given import is added to :data:`sys.path`. This is reset after the\n    test runs.\n    '''\n    original_path = sys.path[:]\n\n    def reset_path():\n        sys.path[:] = original_path\n\n    request.addfinalizer(reset_path)\n\n    assert prepare_import(value) == result\n    assert sys.path[0] == path,type='decorated_definition'\nline_star:147,line_end:193|char_star:0,char_end:30"[shape="box",fillcolor="#c8c6a7",style=filled];
"MODULE"->"@pytest.mark.parametrize(\n    'value,path,result',\n    (\n        ('test', cwd, 'test'),\n        ('test.py', cwd, 'test'),\n        ('a/test', os.path.join(cwd, 'a'), 'test'),\n        ('test/__init__.py', cwd, 'test'),\n        ('test/__init__', cwd, 'test'),\n        # nested package\n        (\n            os.path.join(test_path, 'cliapp', 'inner1', '__init__'),\n            test_path,\n            'cliapp.inner1',\n        ),\n        (\n            os.path.join(test_path, 'cliapp', 'inner1', 'inner2'),\n            test_path,\n            'cliapp.inner1.inner2',\n        ),\n        # dotted name\n        ('test.a.b', cwd, 'test.a.b'),\n        (os.path.join(test_path, 'cliapp.app'), test_path, 'cliapp.app'),\n        # not a Python file, will be caught during import\n        (\n            os.path.join(test_path, 'cliapp', 'message.txt'),\n            test_path,\n            'cliapp.message.txt',\n        ),\n    ),\n)\ndef test_prepare_import(request, value, path, result):\n    '''Expect the correct path to be set and the correct import and app names\n    to be returned.\n\n    :func:`prepare_exec_for_file` has a side effect where the parent directory\n    of the given import is added to :data:`sys.path`. This is reset after the\n    test runs.\n    '''\n    original_path = sys.path[:]\n\n    def reset_path():\n        sys.path[:] = original_path\n\n    request.addfinalizer(reset_path)\n\n    assert prepare_import(value) == result\n    assert sys.path[0] == path,type='decorated_definition'\nline_star:147,line_end:193|char_star:0,char_end:30";
"@pytest.mark.parametrize(\n    'value,path,result',\n    (\n        ('test', cwd, 'test'),\n        ('test.py', cwd, 'test'),\n        ('a/test', os.path.join(cwd, 'a'), 'test'),\n        ('test/__init__.py', cwd, 'test'),\n        ('test/__init__', cwd, 'test'),\n        # nested package\n        (\n            os.path.join(test_path, 'cliapp', 'inner1', '__init__'),\n            test_path,\n            'cliapp.inner1',\n        ),\n        (\n            os.path.join(test_path, 'cliapp', 'inner1', 'inner2'),\n            test_path,\n            'cliapp.inner1.inner2',\n        ),\n        # dotted name\n        ('test.a.b', cwd, 'test.a.b'),\n        (os.path.join(test_path, 'cliapp.app'), test_path, 'cliapp.app'),\n        # not a Python file, will be caught during import\n        (\n            os.path.join(test_path, 'cliapp', 'message.txt'),\n            test_path,\n            'cliapp.message.txt',\n        ),\n    ),\n),type='decorator'\nline_star:147,line_end:176|char_star:0,char_end:1"[shape="box",fillcolor="white",style=filled];
"@pytest.mark.parametrize(\n    'value,path,result',\n    (\n        ('test', cwd, 'test'),\n        ('test.py', cwd, 'test'),\n        ('a/test', os.path.join(cwd, 'a'), 'test'),\n        ('test/__init__.py', cwd, 'test'),\n        ('test/__init__', cwd, 'test'),\n        # nested package\n        (\n            os.path.join(test_path, 'cliapp', 'inner1', '__init__'),\n            test_path,\n            'cliapp.inner1',\n        ),\n        (\n            os.path.join(test_path, 'cliapp', 'inner1', 'inner2'),\n            test_path,\n            'cliapp.inner1.inner2',\n        ),\n        # dotted name\n        ('test.a.b', cwd, 'test.a.b'),\n        (os.path.join(test_path, 'cliapp.app'), test_path, 'cliapp.app'),\n        # not a Python file, will be caught during import\n        (\n            os.path.join(test_path, 'cliapp', 'message.txt'),\n            test_path,\n            'cliapp.message.txt',\n        ),\n    ),\n)\ndef test_prepare_import(request, value, path, result):\n    '''Expect the correct path to be set and the correct import and app names\n    to be returned.\n\n    :func:`prepare_exec_for_file` has a side effect where the parent directory\n    of the given import is added to :data:`sys.path`. This is reset after the\n    test runs.\n    '''\n    original_path = sys.path[:]\n\n    def reset_path():\n        sys.path[:] = original_path\n\n    request.addfinalizer(reset_path)\n\n    assert prepare_import(value) == result\n    assert sys.path[0] == path,type='decorated_definition'\nline_star:147,line_end:193|char_star:0,char_end:30"->"@pytest.mark.parametrize(\n    'value,path,result',\n    (\n        ('test', cwd, 'test'),\n        ('test.py', cwd, 'test'),\n        ('a/test', os.path.join(cwd, 'a'), 'test'),\n        ('test/__init__.py', cwd, 'test'),\n        ('test/__init__', cwd, 'test'),\n        # nested package\n        (\n            os.path.join(test_path, 'cliapp', 'inner1', '__init__'),\n            test_path,\n            'cliapp.inner1',\n        ),\n        (\n            os.path.join(test_path, 'cliapp', 'inner1', 'inner2'),\n            test_path,\n            'cliapp.inner1.inner2',\n        ),\n        # dotted name\n        ('test.a.b', cwd, 'test.a.b'),\n        (os.path.join(test_path, 'cliapp.app'), test_path, 'cliapp.app'),\n        # not a Python file, will be caught during import\n        (\n            os.path.join(test_path, 'cliapp', 'message.txt'),\n            test_path,\n            'cliapp.message.txt',\n        ),\n    ),\n),type='decorator'\nline_star:147,line_end:176|char_star:0,char_end:1";
"def test_prepare_import(request, value, path, result):\n    '''Expect the correct path to be set and the correct import and app names\n    to be returned.\n\n    :func:`prepare_exec_for_file` has a side effect where the parent directory\n    of the given import is added to :data:`sys.path`. This is reset after the\n    test runs.\n    '''\n    original_path = sys.path[:]\n\n    def reset_path():\n        sys.path[:] = original_path\n\n    request.addfinalizer(reset_path)\n\n    assert prepare_import(value) == result\n    assert sys.path[0] == path,type='function_definition'\nline_star:177,line_end:193|char_star:0,char_end:30"[shape="box",fillcolor="#cee6b4",style=filled];
"@pytest.mark.parametrize(\n    'value,path,result',\n    (\n        ('test', cwd, 'test'),\n        ('test.py', cwd, 'test'),\n        ('a/test', os.path.join(cwd, 'a'), 'test'),\n        ('test/__init__.py', cwd, 'test'),\n        ('test/__init__', cwd, 'test'),\n        # nested package\n        (\n            os.path.join(test_path, 'cliapp', 'inner1', '__init__'),\n            test_path,\n            'cliapp.inner1',\n        ),\n        (\n            os.path.join(test_path, 'cliapp', 'inner1', 'inner2'),\n            test_path,\n            'cliapp.inner1.inner2',\n        ),\n        # dotted name\n        ('test.a.b', cwd, 'test.a.b'),\n        (os.path.join(test_path, 'cliapp.app'), test_path, 'cliapp.app'),\n        # not a Python file, will be caught during import\n        (\n            os.path.join(test_path, 'cliapp', 'message.txt'),\n            test_path,\n            'cliapp.message.txt',\n        ),\n    ),\n)\ndef test_prepare_import(request, value, path, result):\n    '''Expect the correct path to be set and the correct import and app names\n    to be returned.\n\n    :func:`prepare_exec_for_file` has a side effect where the parent directory\n    of the given import is added to :data:`sys.path`. This is reset after the\n    test runs.\n    '''\n    original_path = sys.path[:]\n\n    def reset_path():\n        sys.path[:] = original_path\n\n    request.addfinalizer(reset_path)\n\n    assert prepare_import(value) == result\n    assert sys.path[0] == path,type='decorated_definition'\nline_star:147,line_end:193|char_star:0,char_end:30"->"def test_prepare_import(request, value, path, result):\n    '''Expect the correct path to be set and the correct import and app names\n    to be returned.\n\n    :func:`prepare_exec_for_file` has a side effect where the parent directory\n    of the given import is added to :data:`sys.path`. This is reset after the\n    test runs.\n    '''\n    original_path = sys.path[:]\n\n    def reset_path():\n        sys.path[:] = original_path\n\n    request.addfinalizer(reset_path)\n\n    assert prepare_import(value) == result\n    assert sys.path[0] == path,type='function_definition'\nline_star:177,line_end:193|char_star:0,char_end:30";
"test_prepare_import,type='identifier'\nline_star:177,line_end:177|char_star:4,char_end:23"[shape="point",fillcolor="#121013",style=filled];
"def test_prepare_import(request, value, path, result):\n    '''Expect the correct path to be set and the correct import and app names\n    to be returned.\n\n    :func:`prepare_exec_for_file` has a side effect where the parent directory\n    of the given import is added to :data:`sys.path`. This is reset after the\n    test runs.\n    '''\n    original_path = sys.path[:]\n\n    def reset_path():\n        sys.path[:] = original_path\n\n    request.addfinalizer(reset_path)\n\n    assert prepare_import(value) == result\n    assert sys.path[0] == path,type='function_definition'\nline_star:177,line_end:193|char_star:0,char_end:30"->"test_prepare_import,type='identifier'\nline_star:177,line_end:177|char_star:4,char_end:23";
"(request, value, path, result),type='parameters'\nline_star:177,line_end:177|char_star:23,char_end:53"[shape="box",fillcolor="white",style=filled];
"def test_prepare_import(request, value, path, result):\n    '''Expect the correct path to be set and the correct import and app names\n    to be returned.\n\n    :func:`prepare_exec_for_file` has a side effect where the parent directory\n    of the given import is added to :data:`sys.path`. This is reset after the\n    test runs.\n    '''\n    original_path = sys.path[:]\n\n    def reset_path():\n        sys.path[:] = original_path\n\n    request.addfinalizer(reset_path)\n\n    assert prepare_import(value) == result\n    assert sys.path[0] == path,type='function_definition'\nline_star:177,line_end:193|char_star:0,char_end:30"->"(request, value, path, result),type='parameters'\nline_star:177,line_end:177|char_star:23,char_end:53";
"request,type='identifier'\nline_star:177,line_end:177|char_star:24,char_end:31"[shape="point",fillcolor="#121013",style=filled];
"(request, value, path, result),type='parameters'\nline_star:177,line_end:177|char_star:23,char_end:53"->"request,type='identifier'\nline_star:177,line_end:177|char_star:24,char_end:31";
"value,type='identifier'\nline_star:177,line_end:177|char_star:33,char_end:38"[shape="point",fillcolor="#121013",style=filled];
"(request, value, path, result),type='parameters'\nline_star:177,line_end:177|char_star:23,char_end:53"->"value,type='identifier'\nline_star:177,line_end:177|char_star:33,char_end:38";
"path,type='identifier'\nline_star:177,line_end:177|char_star:40,char_end:44"[shape="point",fillcolor="#121013",style=filled];
"(request, value, path, result),type='parameters'\nline_star:177,line_end:177|char_star:23,char_end:53"->"path,type='identifier'\nline_star:177,line_end:177|char_star:40,char_end:44";
"result,type='identifier'\nline_star:177,line_end:177|char_star:46,char_end:52"[shape="point",fillcolor="#121013",style=filled];
"(request, value, path, result),type='parameters'\nline_star:177,line_end:177|char_star:23,char_end:53"->"result,type='identifier'\nline_star:177,line_end:177|char_star:46,char_end:52";
"type='INFORMATION BLOCK'\nline_star:178,line_end:193|char_star:4,char_end:30"[shape="point",fillcolor="#121013",style=filled];
"def test_prepare_import(request, value, path, result):\n    '''Expect the correct path to be set and the correct import and app names\n    to be returned.\n\n    :func:`prepare_exec_for_file` has a side effect where the parent directory\n    of the given import is added to :data:`sys.path`. This is reset after the\n    test runs.\n    '''\n    original_path = sys.path[:]\n\n    def reset_path():\n        sys.path[:] = original_path\n\n    request.addfinalizer(reset_path)\n\n    assert prepare_import(value) == result\n    assert sys.path[0] == path,type='function_definition'\nline_star:177,line_end:193|char_star:0,char_end:30"->"type='INFORMATION BLOCK'\nline_star:178,line_end:193|char_star:4,char_end:30";
"def reset_path():\n        sys.path[:] = original_path,type='function_definition'\nline_star:187,line_end:188|char_star:4,char_end:35"[shape="box",fillcolor="#cee6b4",style=filled];
"type='INFORMATION BLOCK'\nline_star:178,line_end:193|char_star:4,char_end:30"->"def reset_path():\n        sys.path[:] = original_path,type='function_definition'\nline_star:187,line_end:188|char_star:4,char_end:35";
"reset_path,type='identifier'\nline_star:187,line_end:187|char_star:8,char_end:18"[shape="point",fillcolor="#121013",style=filled];
"def reset_path():\n        sys.path[:] = original_path,type='function_definition'\nline_star:187,line_end:188|char_star:4,char_end:35"->"reset_path,type='identifier'\nline_star:187,line_end:187|char_star:8,char_end:18";
"type='INFORMATION BLOCK'\nline_star:188,line_end:188|char_star:8,char_end:35"[shape="point",fillcolor="#121013",style=filled];
"def reset_path():\n        sys.path[:] = original_path,type='function_definition'\nline_star:187,line_end:188|char_star:4,char_end:35"->"type='INFORMATION BLOCK'\nline_star:188,line_end:188|char_star:8,char_end:35";
"assert prepare_import(value) == result,type='assert_statement'\nline_star:192,line_end:192|char_star:4,char_end:42"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:178,line_end:193|char_star:4,char_end:30"->"assert prepare_import(value) == result,type='assert_statement'\nline_star:192,line_end:192|char_star:4,char_end:42";
"prepare_import(value) == result,type='comparison_operator'\nline_star:192,line_end:192|char_star:11,char_end:42"[shape="box",fillcolor="white",style=filled];
"assert prepare_import(value) == result,type='assert_statement'\nline_star:192,line_end:192|char_star:4,char_end:42"->"prepare_import(value) == result,type='comparison_operator'\nline_star:192,line_end:192|char_star:11,char_end:42";
"prepare_import(value),type='call'\nline_star:192,line_end:192|char_star:11,char_end:32"[shape="box",fillcolor="white",style=filled];
"prepare_import(value) == result,type='comparison_operator'\nline_star:192,line_end:192|char_star:11,char_end:42"->"prepare_import(value),type='call'\nline_star:192,line_end:192|char_star:11,char_end:32";
"prepare_import,type='identifier'\nline_star:192,line_end:192|char_star:11,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"prepare_import(value),type='call'\nline_star:192,line_end:192|char_star:11,char_end:32"->"prepare_import,type='identifier'\nline_star:192,line_end:192|char_star:11,char_end:25";
"(value),type='argument_list'\nline_star:192,line_end:192|char_star:25,char_end:32"[shape="box",fillcolor="white",style=filled];
"prepare_import(value),type='call'\nline_star:192,line_end:192|char_star:11,char_end:32"->"(value),type='argument_list'\nline_star:192,line_end:192|char_star:25,char_end:32";
"value,type='identifier'\nline_star:192,line_end:192|char_star:26,char_end:31"[shape="point",fillcolor="#121013",style=filled];
"(value),type='argument_list'\nline_star:192,line_end:192|char_star:25,char_end:32"->"value,type='identifier'\nline_star:192,line_end:192|char_star:26,char_end:31";
"result,type='identifier'\nline_star:192,line_end:192|char_star:36,char_end:42"[shape="point",fillcolor="#121013",style=filled];
"prepare_import(value) == result,type='comparison_operator'\nline_star:192,line_end:192|char_star:11,char_end:42"->"result,type='identifier'\nline_star:192,line_end:192|char_star:36,char_end:42";
"assert sys.path[0] == path,type='assert_statement'\nline_star:193,line_end:193|char_star:4,char_end:30"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:178,line_end:193|char_star:4,char_end:30"->"assert sys.path[0] == path,type='assert_statement'\nline_star:193,line_end:193|char_star:4,char_end:30";
"sys.path[0] == path,type='comparison_operator'\nline_star:193,line_end:193|char_star:11,char_end:30"[shape="box",fillcolor="white",style=filled];
"assert sys.path[0] == path,type='assert_statement'\nline_star:193,line_end:193|char_star:4,char_end:30"->"sys.path[0] == path,type='comparison_operator'\nline_star:193,line_end:193|char_star:11,char_end:30";
"sys.path[0],type='subscript'\nline_star:193,line_end:193|char_star:11,char_end:22"[shape="box",fillcolor="white",style=filled];
"sys.path[0] == path,type='comparison_operator'\nline_star:193,line_end:193|char_star:11,char_end:30"->"sys.path[0],type='subscript'\nline_star:193,line_end:193|char_star:11,char_end:22";
"sys.path,type='attribute'\nline_star:193,line_end:193|char_star:11,char_end:19"[shape="box",fillcolor="white",style=filled];
"sys.path[0],type='subscript'\nline_star:193,line_end:193|char_star:11,char_end:22"->"sys.path,type='attribute'\nline_star:193,line_end:193|char_star:11,char_end:19";
"sys,type='identifier'\nline_star:193,line_end:193|char_star:11,char_end:14"[shape="point",fillcolor="#121013",style=filled];
"sys.path,type='attribute'\nline_star:193,line_end:193|char_star:11,char_end:19"->"sys,type='identifier'\nline_star:193,line_end:193|char_star:11,char_end:14";
"path,type='identifier'\nline_star:193,line_end:193|char_star:15,char_end:19"[shape="point",fillcolor="#121013",style=filled];
"sys.path,type='attribute'\nline_star:193,line_end:193|char_star:11,char_end:19"->"path,type='identifier'\nline_star:193,line_end:193|char_star:15,char_end:19";
"path,type='identifier'\nline_star:193,line_end:193|char_star:26,char_end:30"[shape="point",fillcolor="#121013",style=filled];
"sys.path[0] == path,type='comparison_operator'\nline_star:193,line_end:193|char_star:11,char_end:30"->"path,type='identifier'\nline_star:193,line_end:193|char_star:26,char_end:30";
"@pytest.mark.parametrize(\n    'iname,aname,result',\n    (\n        ('cliapp.app', None, 'testapp'),\n        ('cliapp.app', 'testapp', 'testapp'),\n        ('cliapp.factory', None, 'app'),\n        ('cliapp.factory', 'create_app', 'app'),\n        ('cliapp.factory', 'create_app()', 'app'),\n        ('cliapp.factory', 'create_app2('foo', 'bar')', 'app2_foo_bar'),\n        # trailing comma space\n        ('cliapp.factory', 'create_app2('foo', 'bar', )', 'app2_foo_bar'),\n        # strip whitespace\n        ('cliapp.factory', ' create_app () ', 'app'),\n    ),\n)\ndef test_locate_app(test_apps, iname, aname, result):\n    info = ScriptInfo()\n    assert locate_app(info, iname, aname).name == result,type='decorated_definition'\nline_star:196,line_end:213|char_star:0,char_end:56"[shape="box",fillcolor="#c8c6a7",style=filled];
"MODULE"->"@pytest.mark.parametrize(\n    'iname,aname,result',\n    (\n        ('cliapp.app', None, 'testapp'),\n        ('cliapp.app', 'testapp', 'testapp'),\n        ('cliapp.factory', None, 'app'),\n        ('cliapp.factory', 'create_app', 'app'),\n        ('cliapp.factory', 'create_app()', 'app'),\n        ('cliapp.factory', 'create_app2('foo', 'bar')', 'app2_foo_bar'),\n        # trailing comma space\n        ('cliapp.factory', 'create_app2('foo', 'bar', )', 'app2_foo_bar'),\n        # strip whitespace\n        ('cliapp.factory', ' create_app () ', 'app'),\n    ),\n)\ndef test_locate_app(test_apps, iname, aname, result):\n    info = ScriptInfo()\n    assert locate_app(info, iname, aname).name == result,type='decorated_definition'\nline_star:196,line_end:213|char_star:0,char_end:56";
"@pytest.mark.parametrize(\n    'iname,aname,result',\n    (\n        ('cliapp.app', None, 'testapp'),\n        ('cliapp.app', 'testapp', 'testapp'),\n        ('cliapp.factory', None, 'app'),\n        ('cliapp.factory', 'create_app', 'app'),\n        ('cliapp.factory', 'create_app()', 'app'),\n        ('cliapp.factory', 'create_app2('foo', 'bar')', 'app2_foo_bar'),\n        # trailing comma space\n        ('cliapp.factory', 'create_app2('foo', 'bar', )', 'app2_foo_bar'),\n        # strip whitespace\n        ('cliapp.factory', ' create_app () ', 'app'),\n    ),\n),type='decorator'\nline_star:196,line_end:210|char_star:0,char_end:1"[shape="box",fillcolor="white",style=filled];
"@pytest.mark.parametrize(\n    'iname,aname,result',\n    (\n        ('cliapp.app', None, 'testapp'),\n        ('cliapp.app', 'testapp', 'testapp'),\n        ('cliapp.factory', None, 'app'),\n        ('cliapp.factory', 'create_app', 'app'),\n        ('cliapp.factory', 'create_app()', 'app'),\n        ('cliapp.factory', 'create_app2('foo', 'bar')', 'app2_foo_bar'),\n        # trailing comma space\n        ('cliapp.factory', 'create_app2('foo', 'bar', )', 'app2_foo_bar'),\n        # strip whitespace\n        ('cliapp.factory', ' create_app () ', 'app'),\n    ),\n)\ndef test_locate_app(test_apps, iname, aname, result):\n    info = ScriptInfo()\n    assert locate_app(info, iname, aname).name == result,type='decorated_definition'\nline_star:196,line_end:213|char_star:0,char_end:56"->"@pytest.mark.parametrize(\n    'iname,aname,result',\n    (\n        ('cliapp.app', None, 'testapp'),\n        ('cliapp.app', 'testapp', 'testapp'),\n        ('cliapp.factory', None, 'app'),\n        ('cliapp.factory', 'create_app', 'app'),\n        ('cliapp.factory', 'create_app()', 'app'),\n        ('cliapp.factory', 'create_app2('foo', 'bar')', 'app2_foo_bar'),\n        # trailing comma space\n        ('cliapp.factory', 'create_app2('foo', 'bar', )', 'app2_foo_bar'),\n        # strip whitespace\n        ('cliapp.factory', ' create_app () ', 'app'),\n    ),\n),type='decorator'\nline_star:196,line_end:210|char_star:0,char_end:1";
"def test_locate_app(test_apps, iname, aname, result):\n    info = ScriptInfo()\n    assert locate_app(info, iname, aname).name == result,type='function_definition'\nline_star:211,line_end:213|char_star:0,char_end:56"[shape="box",fillcolor="#cee6b4",style=filled];
"@pytest.mark.parametrize(\n    'iname,aname,result',\n    (\n        ('cliapp.app', None, 'testapp'),\n        ('cliapp.app', 'testapp', 'testapp'),\n        ('cliapp.factory', None, 'app'),\n        ('cliapp.factory', 'create_app', 'app'),\n        ('cliapp.factory', 'create_app()', 'app'),\n        ('cliapp.factory', 'create_app2('foo', 'bar')', 'app2_foo_bar'),\n        # trailing comma space\n        ('cliapp.factory', 'create_app2('foo', 'bar', )', 'app2_foo_bar'),\n        # strip whitespace\n        ('cliapp.factory', ' create_app () ', 'app'),\n    ),\n)\ndef test_locate_app(test_apps, iname, aname, result):\n    info = ScriptInfo()\n    assert locate_app(info, iname, aname).name == result,type='decorated_definition'\nline_star:196,line_end:213|char_star:0,char_end:56"->"def test_locate_app(test_apps, iname, aname, result):\n    info = ScriptInfo()\n    assert locate_app(info, iname, aname).name == result,type='function_definition'\nline_star:211,line_end:213|char_star:0,char_end:56";
"test_locate_app,type='identifier'\nline_star:211,line_end:211|char_star:4,char_end:19"[shape="point",fillcolor="#121013",style=filled];
"def test_locate_app(test_apps, iname, aname, result):\n    info = ScriptInfo()\n    assert locate_app(info, iname, aname).name == result,type='function_definition'\nline_star:211,line_end:213|char_star:0,char_end:56"->"test_locate_app,type='identifier'\nline_star:211,line_end:211|char_star:4,char_end:19";
"(test_apps, iname, aname, result),type='parameters'\nline_star:211,line_end:211|char_star:19,char_end:52"[shape="box",fillcolor="white",style=filled];
"def test_locate_app(test_apps, iname, aname, result):\n    info = ScriptInfo()\n    assert locate_app(info, iname, aname).name == result,type='function_definition'\nline_star:211,line_end:213|char_star:0,char_end:56"->"(test_apps, iname, aname, result),type='parameters'\nline_star:211,line_end:211|char_star:19,char_end:52";
"test_apps,type='identifier'\nline_star:211,line_end:211|char_star:20,char_end:29"[shape="point",fillcolor="#121013",style=filled];
"(test_apps, iname, aname, result),type='parameters'\nline_star:211,line_end:211|char_star:19,char_end:52"->"test_apps,type='identifier'\nline_star:211,line_end:211|char_star:20,char_end:29";
"iname,type='identifier'\nline_star:211,line_end:211|char_star:31,char_end:36"[shape="point",fillcolor="#121013",style=filled];
"(test_apps, iname, aname, result),type='parameters'\nline_star:211,line_end:211|char_star:19,char_end:52"->"iname,type='identifier'\nline_star:211,line_end:211|char_star:31,char_end:36";
"aname,type='identifier'\nline_star:211,line_end:211|char_star:38,char_end:43"[shape="point",fillcolor="#121013",style=filled];
"(test_apps, iname, aname, result),type='parameters'\nline_star:211,line_end:211|char_star:19,char_end:52"->"aname,type='identifier'\nline_star:211,line_end:211|char_star:38,char_end:43";
"result,type='identifier'\nline_star:211,line_end:211|char_star:45,char_end:51"[shape="point",fillcolor="#121013",style=filled];
"(test_apps, iname, aname, result),type='parameters'\nline_star:211,line_end:211|char_star:19,char_end:52"->"result,type='identifier'\nline_star:211,line_end:211|char_star:45,char_end:51";
"type='INFORMATION BLOCK'\nline_star:212,line_end:213|char_star:4,char_end:56"[shape="point",fillcolor="#121013",style=filled];
"def test_locate_app(test_apps, iname, aname, result):\n    info = ScriptInfo()\n    assert locate_app(info, iname, aname).name == result,type='function_definition'\nline_star:211,line_end:213|char_star:0,char_end:56"->"type='INFORMATION BLOCK'\nline_star:212,line_end:213|char_star:4,char_end:56";
"assert locate_app(info, iname, aname).name == result,type='assert_statement'\nline_star:213,line_end:213|char_star:4,char_end:56"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:212,line_end:213|char_star:4,char_end:56"->"assert locate_app(info, iname, aname).name == result,type='assert_statement'\nline_star:213,line_end:213|char_star:4,char_end:56";
"locate_app(info, iname, aname).name == result,type='comparison_operator'\nline_star:213,line_end:213|char_star:11,char_end:56"[shape="box",fillcolor="white",style=filled];
"assert locate_app(info, iname, aname).name == result,type='assert_statement'\nline_star:213,line_end:213|char_star:4,char_end:56"->"locate_app(info, iname, aname).name == result,type='comparison_operator'\nline_star:213,line_end:213|char_star:11,char_end:56";
"locate_app(info, iname, aname).name,type='attribute'\nline_star:213,line_end:213|char_star:11,char_end:46"[shape="box",fillcolor="white",style=filled];
"locate_app(info, iname, aname).name == result,type='comparison_operator'\nline_star:213,line_end:213|char_star:11,char_end:56"->"locate_app(info, iname, aname).name,type='attribute'\nline_star:213,line_end:213|char_star:11,char_end:46";
"locate_app(info, iname, aname),type='call'\nline_star:213,line_end:213|char_star:11,char_end:41"[shape="box",fillcolor="white",style=filled];
"locate_app(info, iname, aname).name,type='attribute'\nline_star:213,line_end:213|char_star:11,char_end:46"->"locate_app(info, iname, aname),type='call'\nline_star:213,line_end:213|char_star:11,char_end:41";
"locate_app,type='identifier'\nline_star:213,line_end:213|char_star:11,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"locate_app(info, iname, aname),type='call'\nline_star:213,line_end:213|char_star:11,char_end:41"->"locate_app,type='identifier'\nline_star:213,line_end:213|char_star:11,char_end:21";
"(info, iname, aname),type='argument_list'\nline_star:213,line_end:213|char_star:21,char_end:41"[shape="box",fillcolor="white",style=filled];
"locate_app(info, iname, aname),type='call'\nline_star:213,line_end:213|char_star:11,char_end:41"->"(info, iname, aname),type='argument_list'\nline_star:213,line_end:213|char_star:21,char_end:41";
"info,type='identifier'\nline_star:213,line_end:213|char_star:22,char_end:26"[shape="point",fillcolor="#121013",style=filled];
"(info, iname, aname),type='argument_list'\nline_star:213,line_end:213|char_star:21,char_end:41"->"info,type='identifier'\nline_star:213,line_end:213|char_star:22,char_end:26";
"iname,type='identifier'\nline_star:213,line_end:213|char_star:28,char_end:33"[shape="point",fillcolor="#121013",style=filled];
"(info, iname, aname),type='argument_list'\nline_star:213,line_end:213|char_star:21,char_end:41"->"iname,type='identifier'\nline_star:213,line_end:213|char_star:28,char_end:33";
"aname,type='identifier'\nline_star:213,line_end:213|char_star:35,char_end:40"[shape="point",fillcolor="#121013",style=filled];
"(info, iname, aname),type='argument_list'\nline_star:213,line_end:213|char_star:21,char_end:41"->"aname,type='identifier'\nline_star:213,line_end:213|char_star:35,char_end:40";
"name,type='identifier'\nline_star:213,line_end:213|char_star:42,char_end:46"[shape="point",fillcolor="#121013",style=filled];
"locate_app(info, iname, aname).name,type='attribute'\nline_star:213,line_end:213|char_star:11,char_end:46"->"name,type='identifier'\nline_star:213,line_end:213|char_star:42,char_end:46";
"result,type='identifier'\nline_star:213,line_end:213|char_star:50,char_end:56"[shape="point",fillcolor="#121013",style=filled];
"locate_app(info, iname, aname).name == result,type='comparison_operator'\nline_star:213,line_end:213|char_star:11,char_end:56"->"result,type='identifier'\nline_star:213,line_end:213|char_star:50,char_end:56";
"@pytest.mark.parametrize(\n    'iname,aname',\n    (\n        ('notanapp.py', None),\n        ('cliapp/app', None),\n        ('cliapp.app', 'notanapp'),\n        # not enough arguments\n        ('cliapp.factory', 'create_app2('foo')'),\n        # invalid identifier\n        ('cliapp.factory', 'create_app('),\n        # no app returned\n        ('cliapp.factory', 'no_app'),\n        # nested import error\n        ('cliapp.importerrorapp', None),\n        # not a Python file\n        ('cliapp.message.txt', None),\n    ),\n)\ndef test_locate_app_raises(test_apps, iname, aname):\n    info = ScriptInfo()\n\n    with pytest.raises(NoAppException):\n        locate_app(info, iname, aname),type='decorated_definition'\nline_star:216,line_end:238|char_star:0,char_end:38"[shape="box",fillcolor="#c8c6a7",style=filled];
"MODULE"->"@pytest.mark.parametrize(\n    'iname,aname',\n    (\n        ('notanapp.py', None),\n        ('cliapp/app', None),\n        ('cliapp.app', 'notanapp'),\n        # not enough arguments\n        ('cliapp.factory', 'create_app2('foo')'),\n        # invalid identifier\n        ('cliapp.factory', 'create_app('),\n        # no app returned\n        ('cliapp.factory', 'no_app'),\n        # nested import error\n        ('cliapp.importerrorapp', None),\n        # not a Python file\n        ('cliapp.message.txt', None),\n    ),\n)\ndef test_locate_app_raises(test_apps, iname, aname):\n    info = ScriptInfo()\n\n    with pytest.raises(NoAppException):\n        locate_app(info, iname, aname),type='decorated_definition'\nline_star:216,line_end:238|char_star:0,char_end:38";
"@pytest.mark.parametrize(\n    'iname,aname',\n    (\n        ('notanapp.py', None),\n        ('cliapp/app', None),\n        ('cliapp.app', 'notanapp'),\n        # not enough arguments\n        ('cliapp.factory', 'create_app2('foo')'),\n        # invalid identifier\n        ('cliapp.factory', 'create_app('),\n        # no app returned\n        ('cliapp.factory', 'no_app'),\n        # nested import error\n        ('cliapp.importerrorapp', None),\n        # not a Python file\n        ('cliapp.message.txt', None),\n    ),\n),type='decorator'\nline_star:216,line_end:233|char_star:0,char_end:1"[shape="box",fillcolor="white",style=filled];
"@pytest.mark.parametrize(\n    'iname,aname',\n    (\n        ('notanapp.py', None),\n        ('cliapp/app', None),\n        ('cliapp.app', 'notanapp'),\n        # not enough arguments\n        ('cliapp.factory', 'create_app2('foo')'),\n        # invalid identifier\n        ('cliapp.factory', 'create_app('),\n        # no app returned\n        ('cliapp.factory', 'no_app'),\n        # nested import error\n        ('cliapp.importerrorapp', None),\n        # not a Python file\n        ('cliapp.message.txt', None),\n    ),\n)\ndef test_locate_app_raises(test_apps, iname, aname):\n    info = ScriptInfo()\n\n    with pytest.raises(NoAppException):\n        locate_app(info, iname, aname),type='decorated_definition'\nline_star:216,line_end:238|char_star:0,char_end:38"->"@pytest.mark.parametrize(\n    'iname,aname',\n    (\n        ('notanapp.py', None),\n        ('cliapp/app', None),\n        ('cliapp.app', 'notanapp'),\n        # not enough arguments\n        ('cliapp.factory', 'create_app2('foo')'),\n        # invalid identifier\n        ('cliapp.factory', 'create_app('),\n        # no app returned\n        ('cliapp.factory', 'no_app'),\n        # nested import error\n        ('cliapp.importerrorapp', None),\n        # not a Python file\n        ('cliapp.message.txt', None),\n    ),\n),type='decorator'\nline_star:216,line_end:233|char_star:0,char_end:1";
"def test_locate_app_raises(test_apps, iname, aname):\n    info = ScriptInfo()\n\n    with pytest.raises(NoAppException):\n        locate_app(info, iname, aname),type='function_definition'\nline_star:234,line_end:238|char_star:0,char_end:38"[shape="box",fillcolor="#cee6b4",style=filled];
"@pytest.mark.parametrize(\n    'iname,aname',\n    (\n        ('notanapp.py', None),\n        ('cliapp/app', None),\n        ('cliapp.app', 'notanapp'),\n        # not enough arguments\n        ('cliapp.factory', 'create_app2('foo')'),\n        # invalid identifier\n        ('cliapp.factory', 'create_app('),\n        # no app returned\n        ('cliapp.factory', 'no_app'),\n        # nested import error\n        ('cliapp.importerrorapp', None),\n        # not a Python file\n        ('cliapp.message.txt', None),\n    ),\n)\ndef test_locate_app_raises(test_apps, iname, aname):\n    info = ScriptInfo()\n\n    with pytest.raises(NoAppException):\n        locate_app(info, iname, aname),type='decorated_definition'\nline_star:216,line_end:238|char_star:0,char_end:38"->"def test_locate_app_raises(test_apps, iname, aname):\n    info = ScriptInfo()\n\n    with pytest.raises(NoAppException):\n        locate_app(info, iname, aname),type='function_definition'\nline_star:234,line_end:238|char_star:0,char_end:38";
"test_locate_app_raises,type='identifier'\nline_star:234,line_end:234|char_star:4,char_end:26"[shape="point",fillcolor="#121013",style=filled];
"def test_locate_app_raises(test_apps, iname, aname):\n    info = ScriptInfo()\n\n    with pytest.raises(NoAppException):\n        locate_app(info, iname, aname),type='function_definition'\nline_star:234,line_end:238|char_star:0,char_end:38"->"test_locate_app_raises,type='identifier'\nline_star:234,line_end:234|char_star:4,char_end:26";
"(test_apps, iname, aname),type='parameters'\nline_star:234,line_end:234|char_star:26,char_end:51"[shape="box",fillcolor="white",style=filled];
"def test_locate_app_raises(test_apps, iname, aname):\n    info = ScriptInfo()\n\n    with pytest.raises(NoAppException):\n        locate_app(info, iname, aname),type='function_definition'\nline_star:234,line_end:238|char_star:0,char_end:38"->"(test_apps, iname, aname),type='parameters'\nline_star:234,line_end:234|char_star:26,char_end:51";
"test_apps,type='identifier'\nline_star:234,line_end:234|char_star:27,char_end:36"[shape="point",fillcolor="#121013",style=filled];
"(test_apps, iname, aname),type='parameters'\nline_star:234,line_end:234|char_star:26,char_end:51"->"test_apps,type='identifier'\nline_star:234,line_end:234|char_star:27,char_end:36";
"iname,type='identifier'\nline_star:234,line_end:234|char_star:38,char_end:43"[shape="point",fillcolor="#121013",style=filled];
"(test_apps, iname, aname),type='parameters'\nline_star:234,line_end:234|char_star:26,char_end:51"->"iname,type='identifier'\nline_star:234,line_end:234|char_star:38,char_end:43";
"aname,type='identifier'\nline_star:234,line_end:234|char_star:45,char_end:50"[shape="point",fillcolor="#121013",style=filled];
"(test_apps, iname, aname),type='parameters'\nline_star:234,line_end:234|char_star:26,char_end:51"->"aname,type='identifier'\nline_star:234,line_end:234|char_star:45,char_end:50";
"type='INFORMATION BLOCK'\nline_star:235,line_end:238|char_star:4,char_end:38"[shape="point",fillcolor="#121013",style=filled];
"def test_locate_app_raises(test_apps, iname, aname):\n    info = ScriptInfo()\n\n    with pytest.raises(NoAppException):\n        locate_app(info, iname, aname),type='function_definition'\nline_star:234,line_end:238|char_star:0,char_end:38"->"type='INFORMATION BLOCK'\nline_star:235,line_end:238|char_star:4,char_end:38";
"with pytest.raises(NoAppException):\n        locate_app(info, iname, aname),type='with_statement'\nline_star:237,line_end:238|char_star:4,char_end:38"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:235,line_end:238|char_star:4,char_end:38"->"with pytest.raises(NoAppException):\n        locate_app(info, iname, aname),type='with_statement'\nline_star:237,line_end:238|char_star:4,char_end:38";
"pytest.raises(NoAppException),type='with_clause'\nline_star:237,line_end:237|char_star:9,char_end:38"[shape="box",fillcolor="white",style=filled];
"with pytest.raises(NoAppException):\n        locate_app(info, iname, aname),type='with_statement'\nline_star:237,line_end:238|char_star:4,char_end:38"->"pytest.raises(NoAppException),type='with_clause'\nline_star:237,line_end:237|char_star:9,char_end:38";
"type='INFORMATION BLOCK'\nline_star:238,line_end:238|char_star:8,char_end:38"[shape="point",fillcolor="#121013",style=filled];
"with pytest.raises(NoAppException):\n        locate_app(info, iname, aname),type='with_statement'\nline_star:237,line_end:238|char_star:4,char_end:38"->"type='INFORMATION BLOCK'\nline_star:238,line_end:238|char_star:8,char_end:38";
"def test_locate_app_suppress_raise(test_apps):\n    info = ScriptInfo()\n    app = locate_app(info, 'notanapp.py', None, raise_if_not_found=False)\n    assert app is None\n\n    # only direct import error is suppressed\n    with pytest.raises(NoAppException):\n        locate_app(info, 'cliapp.importerrorapp', None, raise_if_not_found=False),type='function_definition'\nline_star:241,line_end:248|char_star:0,char_end:81"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_locate_app_suppress_raise(test_apps):\n    info = ScriptInfo()\n    app = locate_app(info, 'notanapp.py', None, raise_if_not_found=False)\n    assert app is None\n\n    # only direct import error is suppressed\n    with pytest.raises(NoAppException):\n        locate_app(info, 'cliapp.importerrorapp', None, raise_if_not_found=False),type='function_definition'\nline_star:241,line_end:248|char_star:0,char_end:81";
"test_locate_app_suppress_raise,type='identifier'\nline_star:241,line_end:241|char_star:4,char_end:34"[shape="point",fillcolor="#121013",style=filled];
"def test_locate_app_suppress_raise(test_apps):\n    info = ScriptInfo()\n    app = locate_app(info, 'notanapp.py', None, raise_if_not_found=False)\n    assert app is None\n\n    # only direct import error is suppressed\n    with pytest.raises(NoAppException):\n        locate_app(info, 'cliapp.importerrorapp', None, raise_if_not_found=False),type='function_definition'\nline_star:241,line_end:248|char_star:0,char_end:81"->"test_locate_app_suppress_raise,type='identifier'\nline_star:241,line_end:241|char_star:4,char_end:34";
"(test_apps),type='parameters'\nline_star:241,line_end:241|char_star:34,char_end:45"[shape="box",fillcolor="white",style=filled];
"def test_locate_app_suppress_raise(test_apps):\n    info = ScriptInfo()\n    app = locate_app(info, 'notanapp.py', None, raise_if_not_found=False)\n    assert app is None\n\n    # only direct import error is suppressed\n    with pytest.raises(NoAppException):\n        locate_app(info, 'cliapp.importerrorapp', None, raise_if_not_found=False),type='function_definition'\nline_star:241,line_end:248|char_star:0,char_end:81"->"(test_apps),type='parameters'\nline_star:241,line_end:241|char_star:34,char_end:45";
"test_apps,type='identifier'\nline_star:241,line_end:241|char_star:35,char_end:44"[shape="point",fillcolor="#121013",style=filled];
"(test_apps),type='parameters'\nline_star:241,line_end:241|char_star:34,char_end:45"->"test_apps,type='identifier'\nline_star:241,line_end:241|char_star:35,char_end:44";
"type='INFORMATION BLOCK'\nline_star:242,line_end:248|char_star:4,char_end:81"[shape="point",fillcolor="#121013",style=filled];
"def test_locate_app_suppress_raise(test_apps):\n    info = ScriptInfo()\n    app = locate_app(info, 'notanapp.py', None, raise_if_not_found=False)\n    assert app is None\n\n    # only direct import error is suppressed\n    with pytest.raises(NoAppException):\n        locate_app(info, 'cliapp.importerrorapp', None, raise_if_not_found=False),type='function_definition'\nline_star:241,line_end:248|char_star:0,char_end:81"->"type='INFORMATION BLOCK'\nline_star:242,line_end:248|char_star:4,char_end:81";
"assert app is None,type='assert_statement'\nline_star:244,line_end:244|char_star:4,char_end:22"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:242,line_end:248|char_star:4,char_end:81"->"assert app is None,type='assert_statement'\nline_star:244,line_end:244|char_star:4,char_end:22";
"app is None,type='comparison_operator'\nline_star:244,line_end:244|char_star:11,char_end:22"[shape="box",fillcolor="white",style=filled];
"assert app is None,type='assert_statement'\nline_star:244,line_end:244|char_star:4,char_end:22"->"app is None,type='comparison_operator'\nline_star:244,line_end:244|char_star:11,char_end:22";
"app,type='identifier'\nline_star:244,line_end:244|char_star:11,char_end:14"[shape="point",fillcolor="#121013",style=filled];
"app is None,type='comparison_operator'\nline_star:244,line_end:244|char_star:11,char_end:22"->"app,type='identifier'\nline_star:244,line_end:244|char_star:11,char_end:14";
"# only direct import error is suppressed,type='comment'\nline_star:246,line_end:246|char_star:4,char_end:44"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:242,line_end:248|char_star:4,char_end:81"->"# only direct import error is suppressed,type='comment'\nline_star:246,line_end:246|char_star:4,char_end:44";
"with pytest.raises(NoAppException):\n        locate_app(info, 'cliapp.importerrorapp', None, raise_if_not_found=False),type='with_statement'\nline_star:247,line_end:248|char_star:4,char_end:81"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:242,line_end:248|char_star:4,char_end:81"->"with pytest.raises(NoAppException):\n        locate_app(info, 'cliapp.importerrorapp', None, raise_if_not_found=False),type='with_statement'\nline_star:247,line_end:248|char_star:4,char_end:81";
"pytest.raises(NoAppException),type='with_clause'\nline_star:247,line_end:247|char_star:9,char_end:38"[shape="box",fillcolor="white",style=filled];
"with pytest.raises(NoAppException):\n        locate_app(info, 'cliapp.importerrorapp', None, raise_if_not_found=False),type='with_statement'\nline_star:247,line_end:248|char_star:4,char_end:81"->"pytest.raises(NoAppException),type='with_clause'\nline_star:247,line_end:247|char_star:9,char_end:38";
"type='INFORMATION BLOCK'\nline_star:248,line_end:248|char_star:8,char_end:81"[shape="point",fillcolor="#121013",style=filled];
"with pytest.raises(NoAppException):\n        locate_app(info, 'cliapp.importerrorapp', None, raise_if_not_found=False),type='with_statement'\nline_star:247,line_end:248|char_star:4,char_end:81"->"type='INFORMATION BLOCK'\nline_star:248,line_end:248|char_star:8,char_end:81";
"def test_get_version(test_apps, capsys):\n    from flask import __version__ as flask_version\n    from werkzeug import __version__ as werkzeug_version\n    from platform import python_version\n\n    class MockCtx:\n        resilient_parsing = False\n        color = None\n\n        def exit(self):\n            return\n\n    ctx = MockCtx()\n    get_version(ctx, None, 'test')\n    out, err = capsys.readouterr()\n    assert f'Python {python_version()}' in out\n    assert f'Flask {flask_version}' in out\n    assert f'Werkzeug {werkzeug_version}' in out,type='function_definition'\nline_star:251,line_end:268|char_star:0,char_end:48"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_get_version(test_apps, capsys):\n    from flask import __version__ as flask_version\n    from werkzeug import __version__ as werkzeug_version\n    from platform import python_version\n\n    class MockCtx:\n        resilient_parsing = False\n        color = None\n\n        def exit(self):\n            return\n\n    ctx = MockCtx()\n    get_version(ctx, None, 'test')\n    out, err = capsys.readouterr()\n    assert f'Python {python_version()}' in out\n    assert f'Flask {flask_version}' in out\n    assert f'Werkzeug {werkzeug_version}' in out,type='function_definition'\nline_star:251,line_end:268|char_star:0,char_end:48";
"test_get_version,type='identifier'\nline_star:251,line_end:251|char_star:4,char_end:20"[shape="point",fillcolor="#121013",style=filled];
"def test_get_version(test_apps, capsys):\n    from flask import __version__ as flask_version\n    from werkzeug import __version__ as werkzeug_version\n    from platform import python_version\n\n    class MockCtx:\n        resilient_parsing = False\n        color = None\n\n        def exit(self):\n            return\n\n    ctx = MockCtx()\n    get_version(ctx, None, 'test')\n    out, err = capsys.readouterr()\n    assert f'Python {python_version()}' in out\n    assert f'Flask {flask_version}' in out\n    assert f'Werkzeug {werkzeug_version}' in out,type='function_definition'\nline_star:251,line_end:268|char_star:0,char_end:48"->"test_get_version,type='identifier'\nline_star:251,line_end:251|char_star:4,char_end:20";
"(test_apps, capsys),type='parameters'\nline_star:251,line_end:251|char_star:20,char_end:39"[shape="box",fillcolor="white",style=filled];
"def test_get_version(test_apps, capsys):\n    from flask import __version__ as flask_version\n    from werkzeug import __version__ as werkzeug_version\n    from platform import python_version\n\n    class MockCtx:\n        resilient_parsing = False\n        color = None\n\n        def exit(self):\n            return\n\n    ctx = MockCtx()\n    get_version(ctx, None, 'test')\n    out, err = capsys.readouterr()\n    assert f'Python {python_version()}' in out\n    assert f'Flask {flask_version}' in out\n    assert f'Werkzeug {werkzeug_version}' in out,type='function_definition'\nline_star:251,line_end:268|char_star:0,char_end:48"->"(test_apps, capsys),type='parameters'\nline_star:251,line_end:251|char_star:20,char_end:39";
"test_apps,type='identifier'\nline_star:251,line_end:251|char_star:21,char_end:30"[shape="point",fillcolor="#121013",style=filled];
"(test_apps, capsys),type='parameters'\nline_star:251,line_end:251|char_star:20,char_end:39"->"test_apps,type='identifier'\nline_star:251,line_end:251|char_star:21,char_end:30";
"capsys,type='identifier'\nline_star:251,line_end:251|char_star:32,char_end:38"[shape="point",fillcolor="#121013",style=filled];
"(test_apps, capsys),type='parameters'\nline_star:251,line_end:251|char_star:20,char_end:39"->"capsys,type='identifier'\nline_star:251,line_end:251|char_star:32,char_end:38";
"type='INFORMATION BLOCK'\nline_star:252,line_end:268|char_star:4,char_end:48"[shape="point",fillcolor="#121013",style=filled];
"def test_get_version(test_apps, capsys):\n    from flask import __version__ as flask_version\n    from werkzeug import __version__ as werkzeug_version\n    from platform import python_version\n\n    class MockCtx:\n        resilient_parsing = False\n        color = None\n\n        def exit(self):\n            return\n\n    ctx = MockCtx()\n    get_version(ctx, None, 'test')\n    out, err = capsys.readouterr()\n    assert f'Python {python_version()}' in out\n    assert f'Flask {flask_version}' in out\n    assert f'Werkzeug {werkzeug_version}' in out,type='function_definition'\nline_star:251,line_end:268|char_star:0,char_end:48"->"type='INFORMATION BLOCK'\nline_star:252,line_end:268|char_star:4,char_end:48";
"from flask import __version__ as flask_version,type='import_from_statement'\nline_star:252,line_end:252|char_star:4,char_end:50"[shape="box",fillcolor="#f48b29",style=filled];
"type='INFORMATION BLOCK'\nline_star:252,line_end:268|char_star:4,char_end:48"->"from flask import __version__ as flask_version,type='import_from_statement'\nline_star:252,line_end:252|char_star:4,char_end:50";
"from werkzeug import __version__ as werkzeug_version,type='import_from_statement'\nline_star:253,line_end:253|char_star:4,char_end:56"[shape="box",fillcolor="#f48b29",style=filled];
"type='INFORMATION BLOCK'\nline_star:252,line_end:268|char_star:4,char_end:48"->"from werkzeug import __version__ as werkzeug_version,type='import_from_statement'\nline_star:253,line_end:253|char_star:4,char_end:56";
"from platform import python_version,type='import_from_statement'\nline_star:254,line_end:254|char_star:4,char_end:39"[shape="box",fillcolor="#f48b29",style=filled];
"type='INFORMATION BLOCK'\nline_star:252,line_end:268|char_star:4,char_end:48"->"from platform import python_version,type='import_from_statement'\nline_star:254,line_end:254|char_star:4,char_end:39";
"class MockCtx:\n        resilient_parsing = False\n        color = None\n\n        def exit(self):\n            return,type='class_definition'\nline_star:256,line_end:261|char_star:4,char_end:18"[shape="box",fillcolor="#ffdf91",style=filled];
"type='INFORMATION BLOCK'\nline_star:252,line_end:268|char_star:4,char_end:48"->"class MockCtx:\n        resilient_parsing = False\n        color = None\n\n        def exit(self):\n            return,type='class_definition'\nline_star:256,line_end:261|char_star:4,char_end:18";
"MockCtx,type='identifier'\nline_star:256,line_end:256|char_star:10,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"class MockCtx:\n        resilient_parsing = False\n        color = None\n\n        def exit(self):\n            return,type='class_definition'\nline_star:256,line_end:261|char_star:4,char_end:18"->"MockCtx,type='identifier'\nline_star:256,line_end:256|char_star:10,char_end:17";
"type='INFORMATION BLOCK'\nline_star:257,line_end:261|char_star:8,char_end:18"[shape="point",fillcolor="#121013",style=filled];
"class MockCtx:\n        resilient_parsing = False\n        color = None\n\n        def exit(self):\n            return,type='class_definition'\nline_star:256,line_end:261|char_star:4,char_end:18"->"type='INFORMATION BLOCK'\nline_star:257,line_end:261|char_star:8,char_end:18";
"def exit(self):\n            return,type='function_definition'\nline_star:260,line_end:261|char_star:8,char_end:18"[shape="box",fillcolor="#cee6b4",style=filled];
"type='INFORMATION BLOCK'\nline_star:257,line_end:261|char_star:8,char_end:18"->"def exit(self):\n            return,type='function_definition'\nline_star:260,line_end:261|char_star:8,char_end:18";
"exit,type='identifier'\nline_star:260,line_end:260|char_star:12,char_end:16"[shape="point",fillcolor="#121013",style=filled];
"def exit(self):\n            return,type='function_definition'\nline_star:260,line_end:261|char_star:8,char_end:18"->"exit,type='identifier'\nline_star:260,line_end:260|char_star:12,char_end:16";
"(self),type='parameters'\nline_star:260,line_end:260|char_star:16,char_end:22"[shape="box",fillcolor="white",style=filled];
"def exit(self):\n            return,type='function_definition'\nline_star:260,line_end:261|char_star:8,char_end:18"->"(self),type='parameters'\nline_star:260,line_end:260|char_star:16,char_end:22";
"self,type='identifier'\nline_star:260,line_end:260|char_star:17,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"(self),type='parameters'\nline_star:260,line_end:260|char_star:16,char_end:22"->"self,type='identifier'\nline_star:260,line_end:260|char_star:17,char_end:21";
"type='INFORMATION BLOCK'\nline_star:261,line_end:261|char_star:12,char_end:18"[shape="point",fillcolor="#121013",style=filled];
"def exit(self):\n            return,type='function_definition'\nline_star:260,line_end:261|char_star:8,char_end:18"->"type='INFORMATION BLOCK'\nline_star:261,line_end:261|char_star:12,char_end:18";
"return,type='return_statement'\nline_star:261,line_end:261|char_star:12,char_end:18"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:261,line_end:261|char_star:12,char_end:18"->"return,type='return_statement'\nline_star:261,line_end:261|char_star:12,char_end:18";
"assert f'Python {python_version()}' in out,type='assert_statement'\nline_star:266,line_end:266|char_star:4,char_end:46"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:252,line_end:268|char_star:4,char_end:48"->"assert f'Python {python_version()}' in out,type='assert_statement'\nline_star:266,line_end:266|char_star:4,char_end:46";
"f'Python {python_version()}' in out,type='comparison_operator'\nline_star:266,line_end:266|char_star:11,char_end:46"[shape="box",fillcolor="white",style=filled];
"assert f'Python {python_version()}' in out,type='assert_statement'\nline_star:266,line_end:266|char_star:4,char_end:46"->"f'Python {python_version()}' in out,type='comparison_operator'\nline_star:266,line_end:266|char_star:11,char_end:46";
"out,type='identifier'\nline_star:266,line_end:266|char_star:43,char_end:46"[shape="point",fillcolor="#121013",style=filled];
"f'Python {python_version()}' in out,type='comparison_operator'\nline_star:266,line_end:266|char_star:11,char_end:46"->"out,type='identifier'\nline_star:266,line_end:266|char_star:43,char_end:46";
"assert f'Flask {flask_version}' in out,type='assert_statement'\nline_star:267,line_end:267|char_star:4,char_end:42"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:252,line_end:268|char_star:4,char_end:48"->"assert f'Flask {flask_version}' in out,type='assert_statement'\nline_star:267,line_end:267|char_star:4,char_end:42";
"f'Flask {flask_version}' in out,type='comparison_operator'\nline_star:267,line_end:267|char_star:11,char_end:42"[shape="box",fillcolor="white",style=filled];
"assert f'Flask {flask_version}' in out,type='assert_statement'\nline_star:267,line_end:267|char_star:4,char_end:42"->"f'Flask {flask_version}' in out,type='comparison_operator'\nline_star:267,line_end:267|char_star:11,char_end:42";
"out,type='identifier'\nline_star:267,line_end:267|char_star:39,char_end:42"[shape="point",fillcolor="#121013",style=filled];
"f'Flask {flask_version}' in out,type='comparison_operator'\nline_star:267,line_end:267|char_star:11,char_end:42"->"out,type='identifier'\nline_star:267,line_end:267|char_star:39,char_end:42";
"assert f'Werkzeug {werkzeug_version}' in out,type='assert_statement'\nline_star:268,line_end:268|char_star:4,char_end:48"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:252,line_end:268|char_star:4,char_end:48"->"assert f'Werkzeug {werkzeug_version}' in out,type='assert_statement'\nline_star:268,line_end:268|char_star:4,char_end:48";
"f'Werkzeug {werkzeug_version}' in out,type='comparison_operator'\nline_star:268,line_end:268|char_star:11,char_end:48"[shape="box",fillcolor="white",style=filled];
"assert f'Werkzeug {werkzeug_version}' in out,type='assert_statement'\nline_star:268,line_end:268|char_star:4,char_end:48"->"f'Werkzeug {werkzeug_version}' in out,type='comparison_operator'\nline_star:268,line_end:268|char_star:11,char_end:48";
"out,type='identifier'\nline_star:268,line_end:268|char_star:45,char_end:48"[shape="point",fillcolor="#121013",style=filled];
"f'Werkzeug {werkzeug_version}' in out,type='comparison_operator'\nline_star:268,line_end:268|char_star:11,char_end:48"->"out,type='identifier'\nline_star:268,line_end:268|char_star:45,char_end:48";
"def test_scriptinfo(test_apps, monkeypatch):\n    obj = ScriptInfo(app_import_path='cliapp.app:testapp')\n    app = obj.load_app()\n    assert app.name == 'testapp'\n    assert obj.load_app() is app\n\n    # import app with module's absolute path\n    cli_app_path = os.path.abspath(\n        os.path.join(os.path.dirname(__file__), 'test_apps', 'cliapp', 'app.py')\n    )\n    obj = ScriptInfo(app_import_path=cli_app_path)\n    app = obj.load_app()\n    assert app.name == 'testapp'\n    assert obj.load_app() is app\n    obj = ScriptInfo(app_import_path=f'{cli_app_path}:testapp')\n    app = obj.load_app()\n    assert app.name == 'testapp'\n    assert obj.load_app() is app\n\n    def create_app():\n        return Flask('createapp')\n\n    obj = ScriptInfo(create_app=create_app)\n    app = obj.load_app()\n    assert app.name == 'createapp'\n    assert obj.load_app() is app\n\n    obj = ScriptInfo()\n    pytest.raises(NoAppException, obj.load_app)\n\n    # import app from wsgi.py in current directory\n    monkeypatch.chdir(\n        os.path.abspath(\n            os.path.join(os.path.dirname(__file__), 'test_apps', 'helloworld')\n        )\n    )\n    obj = ScriptInfo()\n    app = obj.load_app()\n    assert app.name == 'hello'\n\n    # import app from app.py in current directory\n    monkeypatch.chdir(\n        os.path.abspath(os.path.join(os.path.dirname(__file__), 'test_apps', 'cliapp'))\n    )\n    obj = ScriptInfo()\n    app = obj.load_app()\n    assert app.name == 'testapp',type='function_definition'\nline_star:271,line_end:317|char_star:0,char_end:32"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_scriptinfo(test_apps, monkeypatch):\n    obj = ScriptInfo(app_import_path='cliapp.app:testapp')\n    app = obj.load_app()\n    assert app.name == 'testapp'\n    assert obj.load_app() is app\n\n    # import app with module's absolute path\n    cli_app_path = os.path.abspath(\n        os.path.join(os.path.dirname(__file__), 'test_apps', 'cliapp', 'app.py')\n    )\n    obj = ScriptInfo(app_import_path=cli_app_path)\n    app = obj.load_app()\n    assert app.name == 'testapp'\n    assert obj.load_app() is app\n    obj = ScriptInfo(app_import_path=f'{cli_app_path}:testapp')\n    app = obj.load_app()\n    assert app.name == 'testapp'\n    assert obj.load_app() is app\n\n    def create_app():\n        return Flask('createapp')\n\n    obj = ScriptInfo(create_app=create_app)\n    app = obj.load_app()\n    assert app.name == 'createapp'\n    assert obj.load_app() is app\n\n    obj = ScriptInfo()\n    pytest.raises(NoAppException, obj.load_app)\n\n    # import app from wsgi.py in current directory\n    monkeypatch.chdir(\n        os.path.abspath(\n            os.path.join(os.path.dirname(__file__), 'test_apps', 'helloworld')\n        )\n    )\n    obj = ScriptInfo()\n    app = obj.load_app()\n    assert app.name == 'hello'\n\n    # import app from app.py in current directory\n    monkeypatch.chdir(\n        os.path.abspath(os.path.join(os.path.dirname(__file__), 'test_apps', 'cliapp'))\n    )\n    obj = ScriptInfo()\n    app = obj.load_app()\n    assert app.name == 'testapp',type='function_definition'\nline_star:271,line_end:317|char_star:0,char_end:32";
"test_scriptinfo,type='identifier'\nline_star:271,line_end:271|char_star:4,char_end:19"[shape="point",fillcolor="#121013",style=filled];
"def test_scriptinfo(test_apps, monkeypatch):\n    obj = ScriptInfo(app_import_path='cliapp.app:testapp')\n    app = obj.load_app()\n    assert app.name == 'testapp'\n    assert obj.load_app() is app\n\n    # import app with module's absolute path\n    cli_app_path = os.path.abspath(\n        os.path.join(os.path.dirname(__file__), 'test_apps', 'cliapp', 'app.py')\n    )\n    obj = ScriptInfo(app_import_path=cli_app_path)\n    app = obj.load_app()\n    assert app.name == 'testapp'\n    assert obj.load_app() is app\n    obj = ScriptInfo(app_import_path=f'{cli_app_path}:testapp')\n    app = obj.load_app()\n    assert app.name == 'testapp'\n    assert obj.load_app() is app\n\n    def create_app():\n        return Flask('createapp')\n\n    obj = ScriptInfo(create_app=create_app)\n    app = obj.load_app()\n    assert app.name == 'createapp'\n    assert obj.load_app() is app\n\n    obj = ScriptInfo()\n    pytest.raises(NoAppException, obj.load_app)\n\n    # import app from wsgi.py in current directory\n    monkeypatch.chdir(\n        os.path.abspath(\n            os.path.join(os.path.dirname(__file__), 'test_apps', 'helloworld')\n        )\n    )\n    obj = ScriptInfo()\n    app = obj.load_app()\n    assert app.name == 'hello'\n\n    # import app from app.py in current directory\n    monkeypatch.chdir(\n        os.path.abspath(os.path.join(os.path.dirname(__file__), 'test_apps', 'cliapp'))\n    )\n    obj = ScriptInfo()\n    app = obj.load_app()\n    assert app.name == 'testapp',type='function_definition'\nline_star:271,line_end:317|char_star:0,char_end:32"->"test_scriptinfo,type='identifier'\nline_star:271,line_end:271|char_star:4,char_end:19";
"(test_apps, monkeypatch),type='parameters'\nline_star:271,line_end:271|char_star:19,char_end:43"[shape="box",fillcolor="white",style=filled];
"def test_scriptinfo(test_apps, monkeypatch):\n    obj = ScriptInfo(app_import_path='cliapp.app:testapp')\n    app = obj.load_app()\n    assert app.name == 'testapp'\n    assert obj.load_app() is app\n\n    # import app with module's absolute path\n    cli_app_path = os.path.abspath(\n        os.path.join(os.path.dirname(__file__), 'test_apps', 'cliapp', 'app.py')\n    )\n    obj = ScriptInfo(app_import_path=cli_app_path)\n    app = obj.load_app()\n    assert app.name == 'testapp'\n    assert obj.load_app() is app\n    obj = ScriptInfo(app_import_path=f'{cli_app_path}:testapp')\n    app = obj.load_app()\n    assert app.name == 'testapp'\n    assert obj.load_app() is app\n\n    def create_app():\n        return Flask('createapp')\n\n    obj = ScriptInfo(create_app=create_app)\n    app = obj.load_app()\n    assert app.name == 'createapp'\n    assert obj.load_app() is app\n\n    obj = ScriptInfo()\n    pytest.raises(NoAppException, obj.load_app)\n\n    # import app from wsgi.py in current directory\n    monkeypatch.chdir(\n        os.path.abspath(\n            os.path.join(os.path.dirname(__file__), 'test_apps', 'helloworld')\n        )\n    )\n    obj = ScriptInfo()\n    app = obj.load_app()\n    assert app.name == 'hello'\n\n    # import app from app.py in current directory\n    monkeypatch.chdir(\n        os.path.abspath(os.path.join(os.path.dirname(__file__), 'test_apps', 'cliapp'))\n    )\n    obj = ScriptInfo()\n    app = obj.load_app()\n    assert app.name == 'testapp',type='function_definition'\nline_star:271,line_end:317|char_star:0,char_end:32"->"(test_apps, monkeypatch),type='parameters'\nline_star:271,line_end:271|char_star:19,char_end:43";
"test_apps,type='identifier'\nline_star:271,line_end:271|char_star:20,char_end:29"[shape="point",fillcolor="#121013",style=filled];
"(test_apps, monkeypatch),type='parameters'\nline_star:271,line_end:271|char_star:19,char_end:43"->"test_apps,type='identifier'\nline_star:271,line_end:271|char_star:20,char_end:29";
"monkeypatch,type='identifier'\nline_star:271,line_end:271|char_star:31,char_end:42"[shape="point",fillcolor="#121013",style=filled];
"(test_apps, monkeypatch),type='parameters'\nline_star:271,line_end:271|char_star:19,char_end:43"->"monkeypatch,type='identifier'\nline_star:271,line_end:271|char_star:31,char_end:42";
"type='INFORMATION BLOCK'\nline_star:272,line_end:317|char_star:4,char_end:32"[shape="point",fillcolor="#121013",style=filled];
"def test_scriptinfo(test_apps, monkeypatch):\n    obj = ScriptInfo(app_import_path='cliapp.app:testapp')\n    app = obj.load_app()\n    assert app.name == 'testapp'\n    assert obj.load_app() is app\n\n    # import app with module's absolute path\n    cli_app_path = os.path.abspath(\n        os.path.join(os.path.dirname(__file__), 'test_apps', 'cliapp', 'app.py')\n    )\n    obj = ScriptInfo(app_import_path=cli_app_path)\n    app = obj.load_app()\n    assert app.name == 'testapp'\n    assert obj.load_app() is app\n    obj = ScriptInfo(app_import_path=f'{cli_app_path}:testapp')\n    app = obj.load_app()\n    assert app.name == 'testapp'\n    assert obj.load_app() is app\n\n    def create_app():\n        return Flask('createapp')\n\n    obj = ScriptInfo(create_app=create_app)\n    app = obj.load_app()\n    assert app.name == 'createapp'\n    assert obj.load_app() is app\n\n    obj = ScriptInfo()\n    pytest.raises(NoAppException, obj.load_app)\n\n    # import app from wsgi.py in current directory\n    monkeypatch.chdir(\n        os.path.abspath(\n            os.path.join(os.path.dirname(__file__), 'test_apps', 'helloworld')\n        )\n    )\n    obj = ScriptInfo()\n    app = obj.load_app()\n    assert app.name == 'hello'\n\n    # import app from app.py in current directory\n    monkeypatch.chdir(\n        os.path.abspath(os.path.join(os.path.dirname(__file__), 'test_apps', 'cliapp'))\n    )\n    obj = ScriptInfo()\n    app = obj.load_app()\n    assert app.name == 'testapp',type='function_definition'\nline_star:271,line_end:317|char_star:0,char_end:32"->"type='INFORMATION BLOCK'\nline_star:272,line_end:317|char_star:4,char_end:32";
"assert app.name == 'testapp',type='assert_statement'\nline_star:274,line_end:274|char_star:4,char_end:32"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:272,line_end:317|char_star:4,char_end:32"->"assert app.name == 'testapp',type='assert_statement'\nline_star:274,line_end:274|char_star:4,char_end:32";
"app.name == 'testapp',type='comparison_operator'\nline_star:274,line_end:274|char_star:11,char_end:32"[shape="box",fillcolor="white",style=filled];
"assert app.name == 'testapp',type='assert_statement'\nline_star:274,line_end:274|char_star:4,char_end:32"->"app.name == 'testapp',type='comparison_operator'\nline_star:274,line_end:274|char_star:11,char_end:32";
"app.name,type='attribute'\nline_star:274,line_end:274|char_star:11,char_end:19"[shape="box",fillcolor="white",style=filled];
"app.name == 'testapp',type='comparison_operator'\nline_star:274,line_end:274|char_star:11,char_end:32"->"app.name,type='attribute'\nline_star:274,line_end:274|char_star:11,char_end:19";
"app,type='identifier'\nline_star:274,line_end:274|char_star:11,char_end:14"[shape="point",fillcolor="#121013",style=filled];
"app.name,type='attribute'\nline_star:274,line_end:274|char_star:11,char_end:19"->"app,type='identifier'\nline_star:274,line_end:274|char_star:11,char_end:14";
"name,type='identifier'\nline_star:274,line_end:274|char_star:15,char_end:19"[shape="point",fillcolor="#121013",style=filled];
"app.name,type='attribute'\nline_star:274,line_end:274|char_star:11,char_end:19"->"name,type='identifier'\nline_star:274,line_end:274|char_star:15,char_end:19";
"assert obj.load_app() is app,type='assert_statement'\nline_star:275,line_end:275|char_star:4,char_end:32"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:272,line_end:317|char_star:4,char_end:32"->"assert obj.load_app() is app,type='assert_statement'\nline_star:275,line_end:275|char_star:4,char_end:32";
"obj.load_app() is app,type='comparison_operator'\nline_star:275,line_end:275|char_star:11,char_end:32"[shape="box",fillcolor="white",style=filled];
"assert obj.load_app() is app,type='assert_statement'\nline_star:275,line_end:275|char_star:4,char_end:32"->"obj.load_app() is app,type='comparison_operator'\nline_star:275,line_end:275|char_star:11,char_end:32";
"obj.load_app(),type='call'\nline_star:275,line_end:275|char_star:11,char_end:25"[shape="box",fillcolor="white",style=filled];
"obj.load_app() is app,type='comparison_operator'\nline_star:275,line_end:275|char_star:11,char_end:32"->"obj.load_app(),type='call'\nline_star:275,line_end:275|char_star:11,char_end:25";
"obj.load_app,type='attribute'\nline_star:275,line_end:275|char_star:11,char_end:23"[shape="box",fillcolor="white",style=filled];
"obj.load_app(),type='call'\nline_star:275,line_end:275|char_star:11,char_end:25"->"obj.load_app,type='attribute'\nline_star:275,line_end:275|char_star:11,char_end:23";
"obj,type='identifier'\nline_star:275,line_end:275|char_star:11,char_end:14"[shape="point",fillcolor="#121013",style=filled];
"obj.load_app,type='attribute'\nline_star:275,line_end:275|char_star:11,char_end:23"->"obj,type='identifier'\nline_star:275,line_end:275|char_star:11,char_end:14";
"load_app,type='identifier'\nline_star:275,line_end:275|char_star:15,char_end:23"[shape="point",fillcolor="#121013",style=filled];
"obj.load_app,type='attribute'\nline_star:275,line_end:275|char_star:11,char_end:23"->"load_app,type='identifier'\nline_star:275,line_end:275|char_star:15,char_end:23";
"app,type='identifier'\nline_star:275,line_end:275|char_star:29,char_end:32"[shape="point",fillcolor="#121013",style=filled];
"obj.load_app() is app,type='comparison_operator'\nline_star:275,line_end:275|char_star:11,char_end:32"->"app,type='identifier'\nline_star:275,line_end:275|char_star:29,char_end:32";
"# import app with module's absolute path,type='comment'\nline_star:277,line_end:277|char_star:4,char_end:44"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:272,line_end:317|char_star:4,char_end:32"->"# import app with module's absolute path,type='comment'\nline_star:277,line_end:277|char_star:4,char_end:44";
"assert app.name == 'testapp',type='assert_statement'\nline_star:283,line_end:283|char_star:4,char_end:32"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:272,line_end:317|char_star:4,char_end:32"->"assert app.name == 'testapp',type='assert_statement'\nline_star:283,line_end:283|char_star:4,char_end:32";
"app.name == 'testapp',type='comparison_operator'\nline_star:283,line_end:283|char_star:11,char_end:32"[shape="box",fillcolor="white",style=filled];
"assert app.name == 'testapp',type='assert_statement'\nline_star:283,line_end:283|char_star:4,char_end:32"->"app.name == 'testapp',type='comparison_operator'\nline_star:283,line_end:283|char_star:11,char_end:32";
"app.name,type='attribute'\nline_star:283,line_end:283|char_star:11,char_end:19"[shape="box",fillcolor="white",style=filled];
"app.name == 'testapp',type='comparison_operator'\nline_star:283,line_end:283|char_star:11,char_end:32"->"app.name,type='attribute'\nline_star:283,line_end:283|char_star:11,char_end:19";
"app,type='identifier'\nline_star:283,line_end:283|char_star:11,char_end:14"[shape="point",fillcolor="#121013",style=filled];
"app.name,type='attribute'\nline_star:283,line_end:283|char_star:11,char_end:19"->"app,type='identifier'\nline_star:283,line_end:283|char_star:11,char_end:14";
"name,type='identifier'\nline_star:283,line_end:283|char_star:15,char_end:19"[shape="point",fillcolor="#121013",style=filled];
"app.name,type='attribute'\nline_star:283,line_end:283|char_star:11,char_end:19"->"name,type='identifier'\nline_star:283,line_end:283|char_star:15,char_end:19";
"assert obj.load_app() is app,type='assert_statement'\nline_star:284,line_end:284|char_star:4,char_end:32"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:272,line_end:317|char_star:4,char_end:32"->"assert obj.load_app() is app,type='assert_statement'\nline_star:284,line_end:284|char_star:4,char_end:32";
"obj.load_app() is app,type='comparison_operator'\nline_star:284,line_end:284|char_star:11,char_end:32"[shape="box",fillcolor="white",style=filled];
"assert obj.load_app() is app,type='assert_statement'\nline_star:284,line_end:284|char_star:4,char_end:32"->"obj.load_app() is app,type='comparison_operator'\nline_star:284,line_end:284|char_star:11,char_end:32";
"obj.load_app(),type='call'\nline_star:284,line_end:284|char_star:11,char_end:25"[shape="box",fillcolor="white",style=filled];
"obj.load_app() is app,type='comparison_operator'\nline_star:284,line_end:284|char_star:11,char_end:32"->"obj.load_app(),type='call'\nline_star:284,line_end:284|char_star:11,char_end:25";
"obj.load_app,type='attribute'\nline_star:284,line_end:284|char_star:11,char_end:23"[shape="box",fillcolor="white",style=filled];
"obj.load_app(),type='call'\nline_star:284,line_end:284|char_star:11,char_end:25"->"obj.load_app,type='attribute'\nline_star:284,line_end:284|char_star:11,char_end:23";
"obj,type='identifier'\nline_star:284,line_end:284|char_star:11,char_end:14"[shape="point",fillcolor="#121013",style=filled];
"obj.load_app,type='attribute'\nline_star:284,line_end:284|char_star:11,char_end:23"->"obj,type='identifier'\nline_star:284,line_end:284|char_star:11,char_end:14";
"load_app,type='identifier'\nline_star:284,line_end:284|char_star:15,char_end:23"[shape="point",fillcolor="#121013",style=filled];
"obj.load_app,type='attribute'\nline_star:284,line_end:284|char_star:11,char_end:23"->"load_app,type='identifier'\nline_star:284,line_end:284|char_star:15,char_end:23";
"app,type='identifier'\nline_star:284,line_end:284|char_star:29,char_end:32"[shape="point",fillcolor="#121013",style=filled];
"obj.load_app() is app,type='comparison_operator'\nline_star:284,line_end:284|char_star:11,char_end:32"->"app,type='identifier'\nline_star:284,line_end:284|char_star:29,char_end:32";
"assert app.name == 'testapp',type='assert_statement'\nline_star:287,line_end:287|char_star:4,char_end:32"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:272,line_end:317|char_star:4,char_end:32"->"assert app.name == 'testapp',type='assert_statement'\nline_star:287,line_end:287|char_star:4,char_end:32";
"app.name == 'testapp',type='comparison_operator'\nline_star:287,line_end:287|char_star:11,char_end:32"[shape="box",fillcolor="white",style=filled];
"assert app.name == 'testapp',type='assert_statement'\nline_star:287,line_end:287|char_star:4,char_end:32"->"app.name == 'testapp',type='comparison_operator'\nline_star:287,line_end:287|char_star:11,char_end:32";
"app.name,type='attribute'\nline_star:287,line_end:287|char_star:11,char_end:19"[shape="box",fillcolor="white",style=filled];
"app.name == 'testapp',type='comparison_operator'\nline_star:287,line_end:287|char_star:11,char_end:32"->"app.name,type='attribute'\nline_star:287,line_end:287|char_star:11,char_end:19";
"app,type='identifier'\nline_star:287,line_end:287|char_star:11,char_end:14"[shape="point",fillcolor="#121013",style=filled];
"app.name,type='attribute'\nline_star:287,line_end:287|char_star:11,char_end:19"->"app,type='identifier'\nline_star:287,line_end:287|char_star:11,char_end:14";
"name,type='identifier'\nline_star:287,line_end:287|char_star:15,char_end:19"[shape="point",fillcolor="#121013",style=filled];
"app.name,type='attribute'\nline_star:287,line_end:287|char_star:11,char_end:19"->"name,type='identifier'\nline_star:287,line_end:287|char_star:15,char_end:19";
"assert obj.load_app() is app,type='assert_statement'\nline_star:288,line_end:288|char_star:4,char_end:32"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:272,line_end:317|char_star:4,char_end:32"->"assert obj.load_app() is app,type='assert_statement'\nline_star:288,line_end:288|char_star:4,char_end:32";
"obj.load_app() is app,type='comparison_operator'\nline_star:288,line_end:288|char_star:11,char_end:32"[shape="box",fillcolor="white",style=filled];
"assert obj.load_app() is app,type='assert_statement'\nline_star:288,line_end:288|char_star:4,char_end:32"->"obj.load_app() is app,type='comparison_operator'\nline_star:288,line_end:288|char_star:11,char_end:32";
"obj.load_app(),type='call'\nline_star:288,line_end:288|char_star:11,char_end:25"[shape="box",fillcolor="white",style=filled];
"obj.load_app() is app,type='comparison_operator'\nline_star:288,line_end:288|char_star:11,char_end:32"->"obj.load_app(),type='call'\nline_star:288,line_end:288|char_star:11,char_end:25";
"obj.load_app,type='attribute'\nline_star:288,line_end:288|char_star:11,char_end:23"[shape="box",fillcolor="white",style=filled];
"obj.load_app(),type='call'\nline_star:288,line_end:288|char_star:11,char_end:25"->"obj.load_app,type='attribute'\nline_star:288,line_end:288|char_star:11,char_end:23";
"obj,type='identifier'\nline_star:288,line_end:288|char_star:11,char_end:14"[shape="point",fillcolor="#121013",style=filled];
"obj.load_app,type='attribute'\nline_star:288,line_end:288|char_star:11,char_end:23"->"obj,type='identifier'\nline_star:288,line_end:288|char_star:11,char_end:14";
"load_app,type='identifier'\nline_star:288,line_end:288|char_star:15,char_end:23"[shape="point",fillcolor="#121013",style=filled];
"obj.load_app,type='attribute'\nline_star:288,line_end:288|char_star:11,char_end:23"->"load_app,type='identifier'\nline_star:288,line_end:288|char_star:15,char_end:23";
"app,type='identifier'\nline_star:288,line_end:288|char_star:29,char_end:32"[shape="point",fillcolor="#121013",style=filled];
"obj.load_app() is app,type='comparison_operator'\nline_star:288,line_end:288|char_star:11,char_end:32"->"app,type='identifier'\nline_star:288,line_end:288|char_star:29,char_end:32";
"def create_app():\n        return Flask('createapp'),type='function_definition'\nline_star:290,line_end:291|char_star:4,char_end:33"[shape="box",fillcolor="#cee6b4",style=filled];
"type='INFORMATION BLOCK'\nline_star:272,line_end:317|char_star:4,char_end:32"->"def create_app():\n        return Flask('createapp'),type='function_definition'\nline_star:290,line_end:291|char_star:4,char_end:33";
"create_app,type='identifier'\nline_star:290,line_end:290|char_star:8,char_end:18"[shape="point",fillcolor="#121013",style=filled];
"def create_app():\n        return Flask('createapp'),type='function_definition'\nline_star:290,line_end:291|char_star:4,char_end:33"->"create_app,type='identifier'\nline_star:290,line_end:290|char_star:8,char_end:18";
"type='INFORMATION BLOCK'\nline_star:291,line_end:291|char_star:8,char_end:33"[shape="point",fillcolor="#121013",style=filled];
"def create_app():\n        return Flask('createapp'),type='function_definition'\nline_star:290,line_end:291|char_star:4,char_end:33"->"type='INFORMATION BLOCK'\nline_star:291,line_end:291|char_star:8,char_end:33";
"return Flask('createapp'),type='return_statement'\nline_star:291,line_end:291|char_star:8,char_end:33"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:291,line_end:291|char_star:8,char_end:33"->"return Flask('createapp'),type='return_statement'\nline_star:291,line_end:291|char_star:8,char_end:33";
"assert app.name == 'createapp',type='assert_statement'\nline_star:295,line_end:295|char_star:4,char_end:34"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:272,line_end:317|char_star:4,char_end:32"->"assert app.name == 'createapp',type='assert_statement'\nline_star:295,line_end:295|char_star:4,char_end:34";
"app.name == 'createapp',type='comparison_operator'\nline_star:295,line_end:295|char_star:11,char_end:34"[shape="box",fillcolor="white",style=filled];
"assert app.name == 'createapp',type='assert_statement'\nline_star:295,line_end:295|char_star:4,char_end:34"->"app.name == 'createapp',type='comparison_operator'\nline_star:295,line_end:295|char_star:11,char_end:34";
"app.name,type='attribute'\nline_star:295,line_end:295|char_star:11,char_end:19"[shape="box",fillcolor="white",style=filled];
"app.name == 'createapp',type='comparison_operator'\nline_star:295,line_end:295|char_star:11,char_end:34"->"app.name,type='attribute'\nline_star:295,line_end:295|char_star:11,char_end:19";
"app,type='identifier'\nline_star:295,line_end:295|char_star:11,char_end:14"[shape="point",fillcolor="#121013",style=filled];
"app.name,type='attribute'\nline_star:295,line_end:295|char_star:11,char_end:19"->"app,type='identifier'\nline_star:295,line_end:295|char_star:11,char_end:14";
"name,type='identifier'\nline_star:295,line_end:295|char_star:15,char_end:19"[shape="point",fillcolor="#121013",style=filled];
"app.name,type='attribute'\nline_star:295,line_end:295|char_star:11,char_end:19"->"name,type='identifier'\nline_star:295,line_end:295|char_star:15,char_end:19";
"assert obj.load_app() is app,type='assert_statement'\nline_star:296,line_end:296|char_star:4,char_end:32"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:272,line_end:317|char_star:4,char_end:32"->"assert obj.load_app() is app,type='assert_statement'\nline_star:296,line_end:296|char_star:4,char_end:32";
"obj.load_app() is app,type='comparison_operator'\nline_star:296,line_end:296|char_star:11,char_end:32"[shape="box",fillcolor="white",style=filled];
"assert obj.load_app() is app,type='assert_statement'\nline_star:296,line_end:296|char_star:4,char_end:32"->"obj.load_app() is app,type='comparison_operator'\nline_star:296,line_end:296|char_star:11,char_end:32";
"obj.load_app(),type='call'\nline_star:296,line_end:296|char_star:11,char_end:25"[shape="box",fillcolor="white",style=filled];
"obj.load_app() is app,type='comparison_operator'\nline_star:296,line_end:296|char_star:11,char_end:32"->"obj.load_app(),type='call'\nline_star:296,line_end:296|char_star:11,char_end:25";
"obj.load_app,type='attribute'\nline_star:296,line_end:296|char_star:11,char_end:23"[shape="box",fillcolor="white",style=filled];
"obj.load_app(),type='call'\nline_star:296,line_end:296|char_star:11,char_end:25"->"obj.load_app,type='attribute'\nline_star:296,line_end:296|char_star:11,char_end:23";
"obj,type='identifier'\nline_star:296,line_end:296|char_star:11,char_end:14"[shape="point",fillcolor="#121013",style=filled];
"obj.load_app,type='attribute'\nline_star:296,line_end:296|char_star:11,char_end:23"->"obj,type='identifier'\nline_star:296,line_end:296|char_star:11,char_end:14";
"load_app,type='identifier'\nline_star:296,line_end:296|char_star:15,char_end:23"[shape="point",fillcolor="#121013",style=filled];
"obj.load_app,type='attribute'\nline_star:296,line_end:296|char_star:11,char_end:23"->"load_app,type='identifier'\nline_star:296,line_end:296|char_star:15,char_end:23";
"app,type='identifier'\nline_star:296,line_end:296|char_star:29,char_end:32"[shape="point",fillcolor="#121013",style=filled];
"obj.load_app() is app,type='comparison_operator'\nline_star:296,line_end:296|char_star:11,char_end:32"->"app,type='identifier'\nline_star:296,line_end:296|char_star:29,char_end:32";
"# import app from wsgi.py in current directory,type='comment'\nline_star:301,line_end:301|char_star:4,char_end:50"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:272,line_end:317|char_star:4,char_end:32"->"# import app from wsgi.py in current directory,type='comment'\nline_star:301,line_end:301|char_star:4,char_end:50";
"assert app.name == 'hello',type='assert_statement'\nline_star:309,line_end:309|char_star:4,char_end:30"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:272,line_end:317|char_star:4,char_end:32"->"assert app.name == 'hello',type='assert_statement'\nline_star:309,line_end:309|char_star:4,char_end:30";
"app.name == 'hello',type='comparison_operator'\nline_star:309,line_end:309|char_star:11,char_end:30"[shape="box",fillcolor="white",style=filled];
"assert app.name == 'hello',type='assert_statement'\nline_star:309,line_end:309|char_star:4,char_end:30"->"app.name == 'hello',type='comparison_operator'\nline_star:309,line_end:309|char_star:11,char_end:30";
"app.name,type='attribute'\nline_star:309,line_end:309|char_star:11,char_end:19"[shape="box",fillcolor="white",style=filled];
"app.name == 'hello',type='comparison_operator'\nline_star:309,line_end:309|char_star:11,char_end:30"->"app.name,type='attribute'\nline_star:309,line_end:309|char_star:11,char_end:19";
"app,type='identifier'\nline_star:309,line_end:309|char_star:11,char_end:14"[shape="point",fillcolor="#121013",style=filled];
"app.name,type='attribute'\nline_star:309,line_end:309|char_star:11,char_end:19"->"app,type='identifier'\nline_star:309,line_end:309|char_star:11,char_end:14";
"name,type='identifier'\nline_star:309,line_end:309|char_star:15,char_end:19"[shape="point",fillcolor="#121013",style=filled];
"app.name,type='attribute'\nline_star:309,line_end:309|char_star:11,char_end:19"->"name,type='identifier'\nline_star:309,line_end:309|char_star:15,char_end:19";
"# import app from app.py in current directory,type='comment'\nline_star:311,line_end:311|char_star:4,char_end:49"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:272,line_end:317|char_star:4,char_end:32"->"# import app from app.py in current directory,type='comment'\nline_star:311,line_end:311|char_star:4,char_end:49";
"assert app.name == 'testapp',type='assert_statement'\nline_star:317,line_end:317|char_star:4,char_end:32"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:272,line_end:317|char_star:4,char_end:32"->"assert app.name == 'testapp',type='assert_statement'\nline_star:317,line_end:317|char_star:4,char_end:32";
"app.name == 'testapp',type='comparison_operator'\nline_star:317,line_end:317|char_star:11,char_end:32"[shape="box",fillcolor="white",style=filled];
"assert app.name == 'testapp',type='assert_statement'\nline_star:317,line_end:317|char_star:4,char_end:32"->"app.name == 'testapp',type='comparison_operator'\nline_star:317,line_end:317|char_star:11,char_end:32";
"app.name,type='attribute'\nline_star:317,line_end:317|char_star:11,char_end:19"[shape="box",fillcolor="white",style=filled];
"app.name == 'testapp',type='comparison_operator'\nline_star:317,line_end:317|char_star:11,char_end:32"->"app.name,type='attribute'\nline_star:317,line_end:317|char_star:11,char_end:19";
"app,type='identifier'\nline_star:317,line_end:317|char_star:11,char_end:14"[shape="point",fillcolor="#121013",style=filled];
"app.name,type='attribute'\nline_star:317,line_end:317|char_star:11,char_end:19"->"app,type='identifier'\nline_star:317,line_end:317|char_star:11,char_end:14";
"name,type='identifier'\nline_star:317,line_end:317|char_star:15,char_end:19"[shape="point",fillcolor="#121013",style=filled];
"app.name,type='attribute'\nline_star:317,line_end:317|char_star:11,char_end:19"->"name,type='identifier'\nline_star:317,line_end:317|char_star:15,char_end:19";
"def test_with_appcontext(runner):\n    @click.command()\n    @with_appcontext\n    def testcmd():\n        click.echo(current_app.name)\n\n    obj = ScriptInfo(create_app=lambda: Flask('testapp'))\n\n    result = runner.invoke(testcmd, obj=obj)\n    assert result.exit_code == 0\n    assert result.output == 'testapp\n',type='function_definition'\nline_star:320,line_end:330|char_star:0,char_end:39"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_with_appcontext(runner):\n    @click.command()\n    @with_appcontext\n    def testcmd():\n        click.echo(current_app.name)\n\n    obj = ScriptInfo(create_app=lambda: Flask('testapp'))\n\n    result = runner.invoke(testcmd, obj=obj)\n    assert result.exit_code == 0\n    assert result.output == 'testapp\n',type='function_definition'\nline_star:320,line_end:330|char_star:0,char_end:39";
"test_with_appcontext,type='identifier'\nline_star:320,line_end:320|char_star:4,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"def test_with_appcontext(runner):\n    @click.command()\n    @with_appcontext\n    def testcmd():\n        click.echo(current_app.name)\n\n    obj = ScriptInfo(create_app=lambda: Flask('testapp'))\n\n    result = runner.invoke(testcmd, obj=obj)\n    assert result.exit_code == 0\n    assert result.output == 'testapp\n',type='function_definition'\nline_star:320,line_end:330|char_star:0,char_end:39"->"test_with_appcontext,type='identifier'\nline_star:320,line_end:320|char_star:4,char_end:24";
"(runner),type='parameters'\nline_star:320,line_end:320|char_star:24,char_end:32"[shape="box",fillcolor="white",style=filled];
"def test_with_appcontext(runner):\n    @click.command()\n    @with_appcontext\n    def testcmd():\n        click.echo(current_app.name)\n\n    obj = ScriptInfo(create_app=lambda: Flask('testapp'))\n\n    result = runner.invoke(testcmd, obj=obj)\n    assert result.exit_code == 0\n    assert result.output == 'testapp\n',type='function_definition'\nline_star:320,line_end:330|char_star:0,char_end:39"->"(runner),type='parameters'\nline_star:320,line_end:320|char_star:24,char_end:32";
"runner,type='identifier'\nline_star:320,line_end:320|char_star:25,char_end:31"[shape="point",fillcolor="#121013",style=filled];
"(runner),type='parameters'\nline_star:320,line_end:320|char_star:24,char_end:32"->"runner,type='identifier'\nline_star:320,line_end:320|char_star:25,char_end:31";
"type='INFORMATION BLOCK'\nline_star:321,line_end:330|char_star:4,char_end:39"[shape="point",fillcolor="#121013",style=filled];
"def test_with_appcontext(runner):\n    @click.command()\n    @with_appcontext\n    def testcmd():\n        click.echo(current_app.name)\n\n    obj = ScriptInfo(create_app=lambda: Flask('testapp'))\n\n    result = runner.invoke(testcmd, obj=obj)\n    assert result.exit_code == 0\n    assert result.output == 'testapp\n',type='function_definition'\nline_star:320,line_end:330|char_star:0,char_end:39"->"type='INFORMATION BLOCK'\nline_star:321,line_end:330|char_star:4,char_end:39";
"@click.command()\n    @with_appcontext\n    def testcmd():\n        click.echo(current_app.name),type='decorated_definition'\nline_star:321,line_end:324|char_star:4,char_end:36"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:321,line_end:330|char_star:4,char_end:39"->"@click.command()\n    @with_appcontext\n    def testcmd():\n        click.echo(current_app.name),type='decorated_definition'\nline_star:321,line_end:324|char_star:4,char_end:36";
"@click.command(),type='decorator'\nline_star:321,line_end:321|char_star:4,char_end:20"[shape="box",fillcolor="white",style=filled];
"@click.command()\n    @with_appcontext\n    def testcmd():\n        click.echo(current_app.name),type='decorated_definition'\nline_star:321,line_end:324|char_star:4,char_end:36"->"@click.command(),type='decorator'\nline_star:321,line_end:321|char_star:4,char_end:20";
"@with_appcontext,type='decorator'\nline_star:322,line_end:322|char_star:4,char_end:20"[shape="box",fillcolor="white",style=filled];
"@click.command()\n    @with_appcontext\n    def testcmd():\n        click.echo(current_app.name),type='decorated_definition'\nline_star:321,line_end:324|char_star:4,char_end:36"->"@with_appcontext,type='decorator'\nline_star:322,line_end:322|char_star:4,char_end:20";
"def testcmd():\n        click.echo(current_app.name),type='function_definition'\nline_star:323,line_end:324|char_star:4,char_end:36"[shape="box",fillcolor="#cee6b4",style=filled];
"@click.command()\n    @with_appcontext\n    def testcmd():\n        click.echo(current_app.name),type='decorated_definition'\nline_star:321,line_end:324|char_star:4,char_end:36"->"def testcmd():\n        click.echo(current_app.name),type='function_definition'\nline_star:323,line_end:324|char_star:4,char_end:36";
"testcmd,type='identifier'\nline_star:323,line_end:323|char_star:8,char_end:15"[shape="point",fillcolor="#121013",style=filled];
"def testcmd():\n        click.echo(current_app.name),type='function_definition'\nline_star:323,line_end:324|char_star:4,char_end:36"->"testcmd,type='identifier'\nline_star:323,line_end:323|char_star:8,char_end:15";
"type='INFORMATION BLOCK'\nline_star:324,line_end:324|char_star:8,char_end:36"[shape="point",fillcolor="#121013",style=filled];
"def testcmd():\n        click.echo(current_app.name),type='function_definition'\nline_star:323,line_end:324|char_star:4,char_end:36"->"type='INFORMATION BLOCK'\nline_star:324,line_end:324|char_star:8,char_end:36";
"assert result.exit_code == 0,type='assert_statement'\nline_star:329,line_end:329|char_star:4,char_end:32"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:321,line_end:330|char_star:4,char_end:39"->"assert result.exit_code == 0,type='assert_statement'\nline_star:329,line_end:329|char_star:4,char_end:32";
"result.exit_code == 0,type='comparison_operator'\nline_star:329,line_end:329|char_star:11,char_end:32"[shape="box",fillcolor="white",style=filled];
"assert result.exit_code == 0,type='assert_statement'\nline_star:329,line_end:329|char_star:4,char_end:32"->"result.exit_code == 0,type='comparison_operator'\nline_star:329,line_end:329|char_star:11,char_end:32";
"result.exit_code,type='attribute'\nline_star:329,line_end:329|char_star:11,char_end:27"[shape="box",fillcolor="white",style=filled];
"result.exit_code == 0,type='comparison_operator'\nline_star:329,line_end:329|char_star:11,char_end:32"->"result.exit_code,type='attribute'\nline_star:329,line_end:329|char_star:11,char_end:27";
"result,type='identifier'\nline_star:329,line_end:329|char_star:11,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"result.exit_code,type='attribute'\nline_star:329,line_end:329|char_star:11,char_end:27"->"result,type='identifier'\nline_star:329,line_end:329|char_star:11,char_end:17";
"exit_code,type='identifier'\nline_star:329,line_end:329|char_star:18,char_end:27"[shape="point",fillcolor="#121013",style=filled];
"result.exit_code,type='attribute'\nline_star:329,line_end:329|char_star:11,char_end:27"->"exit_code,type='identifier'\nline_star:329,line_end:329|char_star:18,char_end:27";
"assert result.output == 'testapp\n',type='assert_statement'\nline_star:330,line_end:330|char_star:4,char_end:39"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:321,line_end:330|char_star:4,char_end:39"->"assert result.output == 'testapp\n',type='assert_statement'\nline_star:330,line_end:330|char_star:4,char_end:39";
"result.output == 'testapp\n',type='comparison_operator'\nline_star:330,line_end:330|char_star:11,char_end:39"[shape="box",fillcolor="white",style=filled];
"assert result.output == 'testapp\n',type='assert_statement'\nline_star:330,line_end:330|char_star:4,char_end:39"->"result.output == 'testapp\n',type='comparison_operator'\nline_star:330,line_end:330|char_star:11,char_end:39";
"result.output,type='attribute'\nline_star:330,line_end:330|char_star:11,char_end:24"[shape="box",fillcolor="white",style=filled];
"result.output == 'testapp\n',type='comparison_operator'\nline_star:330,line_end:330|char_star:11,char_end:39"->"result.output,type='attribute'\nline_star:330,line_end:330|char_star:11,char_end:24";
"result,type='identifier'\nline_star:330,line_end:330|char_star:11,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"result.output,type='attribute'\nline_star:330,line_end:330|char_star:11,char_end:24"->"result,type='identifier'\nline_star:330,line_end:330|char_star:11,char_end:17";
"output,type='identifier'\nline_star:330,line_end:330|char_star:18,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"result.output,type='attribute'\nline_star:330,line_end:330|char_star:11,char_end:24"->"output,type='identifier'\nline_star:330,line_end:330|char_star:18,char_end:24";
"def test_appgroup(runner):\n    @click.group(cls=AppGroup)\n    def cli():\n        pass\n\n    @cli.command(with_appcontext=True)\n    def test():\n        click.echo(current_app.name)\n\n    @cli.group()\n    def subgroup():\n        pass\n\n    @subgroup.command(with_appcontext=True)\n    def test2():\n        click.echo(current_app.name)\n\n    obj = ScriptInfo(create_app=lambda: Flask('testappgroup'))\n\n    result = runner.invoke(cli, ['test'], obj=obj)\n    assert result.exit_code == 0\n    assert result.output == 'testappgroup\n'\n\n    result = runner.invoke(cli, ['subgroup', 'test2'], obj=obj)\n    assert result.exit_code == 0\n    assert result.output == 'testappgroup\n',type='function_definition'\nline_star:333,line_end:358|char_star:0,char_end:44"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_appgroup(runner):\n    @click.group(cls=AppGroup)\n    def cli():\n        pass\n\n    @cli.command(with_appcontext=True)\n    def test():\n        click.echo(current_app.name)\n\n    @cli.group()\n    def subgroup():\n        pass\n\n    @subgroup.command(with_appcontext=True)\n    def test2():\n        click.echo(current_app.name)\n\n    obj = ScriptInfo(create_app=lambda: Flask('testappgroup'))\n\n    result = runner.invoke(cli, ['test'], obj=obj)\n    assert result.exit_code == 0\n    assert result.output == 'testappgroup\n'\n\n    result = runner.invoke(cli, ['subgroup', 'test2'], obj=obj)\n    assert result.exit_code == 0\n    assert result.output == 'testappgroup\n',type='function_definition'\nline_star:333,line_end:358|char_star:0,char_end:44";
"test_appgroup,type='identifier'\nline_star:333,line_end:333|char_star:4,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"def test_appgroup(runner):\n    @click.group(cls=AppGroup)\n    def cli():\n        pass\n\n    @cli.command(with_appcontext=True)\n    def test():\n        click.echo(current_app.name)\n\n    @cli.group()\n    def subgroup():\n        pass\n\n    @subgroup.command(with_appcontext=True)\n    def test2():\n        click.echo(current_app.name)\n\n    obj = ScriptInfo(create_app=lambda: Flask('testappgroup'))\n\n    result = runner.invoke(cli, ['test'], obj=obj)\n    assert result.exit_code == 0\n    assert result.output == 'testappgroup\n'\n\n    result = runner.invoke(cli, ['subgroup', 'test2'], obj=obj)\n    assert result.exit_code == 0\n    assert result.output == 'testappgroup\n',type='function_definition'\nline_star:333,line_end:358|char_star:0,char_end:44"->"test_appgroup,type='identifier'\nline_star:333,line_end:333|char_star:4,char_end:17";
"(runner),type='parameters'\nline_star:333,line_end:333|char_star:17,char_end:25"[shape="box",fillcolor="white",style=filled];
"def test_appgroup(runner):\n    @click.group(cls=AppGroup)\n    def cli():\n        pass\n\n    @cli.command(with_appcontext=True)\n    def test():\n        click.echo(current_app.name)\n\n    @cli.group()\n    def subgroup():\n        pass\n\n    @subgroup.command(with_appcontext=True)\n    def test2():\n        click.echo(current_app.name)\n\n    obj = ScriptInfo(create_app=lambda: Flask('testappgroup'))\n\n    result = runner.invoke(cli, ['test'], obj=obj)\n    assert result.exit_code == 0\n    assert result.output == 'testappgroup\n'\n\n    result = runner.invoke(cli, ['subgroup', 'test2'], obj=obj)\n    assert result.exit_code == 0\n    assert result.output == 'testappgroup\n',type='function_definition'\nline_star:333,line_end:358|char_star:0,char_end:44"->"(runner),type='parameters'\nline_star:333,line_end:333|char_star:17,char_end:25";
"runner,type='identifier'\nline_star:333,line_end:333|char_star:18,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"(runner),type='parameters'\nline_star:333,line_end:333|char_star:17,char_end:25"->"runner,type='identifier'\nline_star:333,line_end:333|char_star:18,char_end:24";
"type='INFORMATION BLOCK'\nline_star:334,line_end:358|char_star:4,char_end:44"[shape="point",fillcolor="#121013",style=filled];
"def test_appgroup(runner):\n    @click.group(cls=AppGroup)\n    def cli():\n        pass\n\n    @cli.command(with_appcontext=True)\n    def test():\n        click.echo(current_app.name)\n\n    @cli.group()\n    def subgroup():\n        pass\n\n    @subgroup.command(with_appcontext=True)\n    def test2():\n        click.echo(current_app.name)\n\n    obj = ScriptInfo(create_app=lambda: Flask('testappgroup'))\n\n    result = runner.invoke(cli, ['test'], obj=obj)\n    assert result.exit_code == 0\n    assert result.output == 'testappgroup\n'\n\n    result = runner.invoke(cli, ['subgroup', 'test2'], obj=obj)\n    assert result.exit_code == 0\n    assert result.output == 'testappgroup\n',type='function_definition'\nline_star:333,line_end:358|char_star:0,char_end:44"->"type='INFORMATION BLOCK'\nline_star:334,line_end:358|char_star:4,char_end:44";
"@click.group(cls=AppGroup)\n    def cli():\n        pass,type='decorated_definition'\nline_star:334,line_end:336|char_star:4,char_end:12"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:334,line_end:358|char_star:4,char_end:44"->"@click.group(cls=AppGroup)\n    def cli():\n        pass,type='decorated_definition'\nline_star:334,line_end:336|char_star:4,char_end:12";
"@click.group(cls=AppGroup),type='decorator'\nline_star:334,line_end:334|char_star:4,char_end:30"[shape="box",fillcolor="white",style=filled];
"@click.group(cls=AppGroup)\n    def cli():\n        pass,type='decorated_definition'\nline_star:334,line_end:336|char_star:4,char_end:12"->"@click.group(cls=AppGroup),type='decorator'\nline_star:334,line_end:334|char_star:4,char_end:30";
"def cli():\n        pass,type='function_definition'\nline_star:335,line_end:336|char_star:4,char_end:12"[shape="box",fillcolor="#cee6b4",style=filled];
"@click.group(cls=AppGroup)\n    def cli():\n        pass,type='decorated_definition'\nline_star:334,line_end:336|char_star:4,char_end:12"->"def cli():\n        pass,type='function_definition'\nline_star:335,line_end:336|char_star:4,char_end:12";
"cli,type='identifier'\nline_star:335,line_end:335|char_star:8,char_end:11"[shape="point",fillcolor="#121013",style=filled];
"def cli():\n        pass,type='function_definition'\nline_star:335,line_end:336|char_star:4,char_end:12"->"cli,type='identifier'\nline_star:335,line_end:335|char_star:8,char_end:11";
"type='INFORMATION BLOCK'\nline_star:336,line_end:336|char_star:8,char_end:12"[shape="point",fillcolor="#121013",style=filled];
"def cli():\n        pass,type='function_definition'\nline_star:335,line_end:336|char_star:4,char_end:12"->"type='INFORMATION BLOCK'\nline_star:336,line_end:336|char_star:8,char_end:12";
"pass,type='pass_statement'\nline_star:336,line_end:336|char_star:8,char_end:12"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:336,line_end:336|char_star:8,char_end:12"->"pass,type='pass_statement'\nline_star:336,line_end:336|char_star:8,char_end:12";
"pass,type='pass'\nline_star:336,line_end:336|char_star:8,char_end:12"[shape="box",fillcolor="white",style=filled];
"pass,type='pass_statement'\nline_star:336,line_end:336|char_star:8,char_end:12"->"pass,type='pass'\nline_star:336,line_end:336|char_star:8,char_end:12";
"@cli.command(with_appcontext=True)\n    def test():\n        click.echo(current_app.name),type='decorated_definition'\nline_star:338,line_end:340|char_star:4,char_end:36"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:334,line_end:358|char_star:4,char_end:44"->"@cli.command(with_appcontext=True)\n    def test():\n        click.echo(current_app.name),type='decorated_definition'\nline_star:338,line_end:340|char_star:4,char_end:36";
"@cli.command(with_appcontext=True),type='decorator'\nline_star:338,line_end:338|char_star:4,char_end:38"[shape="box",fillcolor="white",style=filled];
"@cli.command(with_appcontext=True)\n    def test():\n        click.echo(current_app.name),type='decorated_definition'\nline_star:338,line_end:340|char_star:4,char_end:36"->"@cli.command(with_appcontext=True),type='decorator'\nline_star:338,line_end:338|char_star:4,char_end:38";
"def test():\n        click.echo(current_app.name),type='function_definition'\nline_star:339,line_end:340|char_star:4,char_end:36"[shape="box",fillcolor="#cee6b4",style=filled];
"@cli.command(with_appcontext=True)\n    def test():\n        click.echo(current_app.name),type='decorated_definition'\nline_star:338,line_end:340|char_star:4,char_end:36"->"def test():\n        click.echo(current_app.name),type='function_definition'\nline_star:339,line_end:340|char_star:4,char_end:36";
"test,type='identifier'\nline_star:339,line_end:339|char_star:8,char_end:12"[shape="point",fillcolor="#121013",style=filled];
"def test():\n        click.echo(current_app.name),type='function_definition'\nline_star:339,line_end:340|char_star:4,char_end:36"->"test,type='identifier'\nline_star:339,line_end:339|char_star:8,char_end:12";
"type='INFORMATION BLOCK'\nline_star:340,line_end:340|char_star:8,char_end:36"[shape="point",fillcolor="#121013",style=filled];
"def test():\n        click.echo(current_app.name),type='function_definition'\nline_star:339,line_end:340|char_star:4,char_end:36"->"type='INFORMATION BLOCK'\nline_star:340,line_end:340|char_star:8,char_end:36";
"@cli.group()\n    def subgroup():\n        pass,type='decorated_definition'\nline_star:342,line_end:344|char_star:4,char_end:12"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:334,line_end:358|char_star:4,char_end:44"->"@cli.group()\n    def subgroup():\n        pass,type='decorated_definition'\nline_star:342,line_end:344|char_star:4,char_end:12";
"@cli.group(),type='decorator'\nline_star:342,line_end:342|char_star:4,char_end:16"[shape="box",fillcolor="white",style=filled];
"@cli.group()\n    def subgroup():\n        pass,type='decorated_definition'\nline_star:342,line_end:344|char_star:4,char_end:12"->"@cli.group(),type='decorator'\nline_star:342,line_end:342|char_star:4,char_end:16";
"def subgroup():\n        pass,type='function_definition'\nline_star:343,line_end:344|char_star:4,char_end:12"[shape="box",fillcolor="#cee6b4",style=filled];
"@cli.group()\n    def subgroup():\n        pass,type='decorated_definition'\nline_star:342,line_end:344|char_star:4,char_end:12"->"def subgroup():\n        pass,type='function_definition'\nline_star:343,line_end:344|char_star:4,char_end:12";
"subgroup,type='identifier'\nline_star:343,line_end:343|char_star:8,char_end:16"[shape="point",fillcolor="#121013",style=filled];
"def subgroup():\n        pass,type='function_definition'\nline_star:343,line_end:344|char_star:4,char_end:12"->"subgroup,type='identifier'\nline_star:343,line_end:343|char_star:8,char_end:16";
"type='INFORMATION BLOCK'\nline_star:344,line_end:344|char_star:8,char_end:12"[shape="point",fillcolor="#121013",style=filled];
"def subgroup():\n        pass,type='function_definition'\nline_star:343,line_end:344|char_star:4,char_end:12"->"type='INFORMATION BLOCK'\nline_star:344,line_end:344|char_star:8,char_end:12";
"pass,type='pass_statement'\nline_star:344,line_end:344|char_star:8,char_end:12"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:344,line_end:344|char_star:8,char_end:12"->"pass,type='pass_statement'\nline_star:344,line_end:344|char_star:8,char_end:12";
"pass,type='pass'\nline_star:344,line_end:344|char_star:8,char_end:12"[shape="box",fillcolor="white",style=filled];
"pass,type='pass_statement'\nline_star:344,line_end:344|char_star:8,char_end:12"->"pass,type='pass'\nline_star:344,line_end:344|char_star:8,char_end:12";
"@subgroup.command(with_appcontext=True)\n    def test2():\n        click.echo(current_app.name),type='decorated_definition'\nline_star:346,line_end:348|char_star:4,char_end:36"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:334,line_end:358|char_star:4,char_end:44"->"@subgroup.command(with_appcontext=True)\n    def test2():\n        click.echo(current_app.name),type='decorated_definition'\nline_star:346,line_end:348|char_star:4,char_end:36";
"@subgroup.command(with_appcontext=True),type='decorator'\nline_star:346,line_end:346|char_star:4,char_end:43"[shape="box",fillcolor="white",style=filled];
"@subgroup.command(with_appcontext=True)\n    def test2():\n        click.echo(current_app.name),type='decorated_definition'\nline_star:346,line_end:348|char_star:4,char_end:36"->"@subgroup.command(with_appcontext=True),type='decorator'\nline_star:346,line_end:346|char_star:4,char_end:43";
"def test2():\n        click.echo(current_app.name),type='function_definition'\nline_star:347,line_end:348|char_star:4,char_end:36"[shape="box",fillcolor="#cee6b4",style=filled];
"@subgroup.command(with_appcontext=True)\n    def test2():\n        click.echo(current_app.name),type='decorated_definition'\nline_star:346,line_end:348|char_star:4,char_end:36"->"def test2():\n        click.echo(current_app.name),type='function_definition'\nline_star:347,line_end:348|char_star:4,char_end:36";
"test2,type='identifier'\nline_star:347,line_end:347|char_star:8,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"def test2():\n        click.echo(current_app.name),type='function_definition'\nline_star:347,line_end:348|char_star:4,char_end:36"->"test2,type='identifier'\nline_star:347,line_end:347|char_star:8,char_end:13";
"type='INFORMATION BLOCK'\nline_star:348,line_end:348|char_star:8,char_end:36"[shape="point",fillcolor="#121013",style=filled];
"def test2():\n        click.echo(current_app.name),type='function_definition'\nline_star:347,line_end:348|char_star:4,char_end:36"->"type='INFORMATION BLOCK'\nline_star:348,line_end:348|char_star:8,char_end:36";
"assert result.exit_code == 0,type='assert_statement'\nline_star:353,line_end:353|char_star:4,char_end:32"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:334,line_end:358|char_star:4,char_end:44"->"assert result.exit_code == 0,type='assert_statement'\nline_star:353,line_end:353|char_star:4,char_end:32";
"result.exit_code == 0,type='comparison_operator'\nline_star:353,line_end:353|char_star:11,char_end:32"[shape="box",fillcolor="white",style=filled];
"assert result.exit_code == 0,type='assert_statement'\nline_star:353,line_end:353|char_star:4,char_end:32"->"result.exit_code == 0,type='comparison_operator'\nline_star:353,line_end:353|char_star:11,char_end:32";
"result.exit_code,type='attribute'\nline_star:353,line_end:353|char_star:11,char_end:27"[shape="box",fillcolor="white",style=filled];
"result.exit_code == 0,type='comparison_operator'\nline_star:353,line_end:353|char_star:11,char_end:32"->"result.exit_code,type='attribute'\nline_star:353,line_end:353|char_star:11,char_end:27";
"result,type='identifier'\nline_star:353,line_end:353|char_star:11,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"result.exit_code,type='attribute'\nline_star:353,line_end:353|char_star:11,char_end:27"->"result,type='identifier'\nline_star:353,line_end:353|char_star:11,char_end:17";
"exit_code,type='identifier'\nline_star:353,line_end:353|char_star:18,char_end:27"[shape="point",fillcolor="#121013",style=filled];
"result.exit_code,type='attribute'\nline_star:353,line_end:353|char_star:11,char_end:27"->"exit_code,type='identifier'\nline_star:353,line_end:353|char_star:18,char_end:27";
"assert result.output == 'testappgroup\n',type='assert_statement'\nline_star:354,line_end:354|char_star:4,char_end:44"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:334,line_end:358|char_star:4,char_end:44"->"assert result.output == 'testappgroup\n',type='assert_statement'\nline_star:354,line_end:354|char_star:4,char_end:44";
"result.output == 'testappgroup\n',type='comparison_operator'\nline_star:354,line_end:354|char_star:11,char_end:44"[shape="box",fillcolor="white",style=filled];
"assert result.output == 'testappgroup\n',type='assert_statement'\nline_star:354,line_end:354|char_star:4,char_end:44"->"result.output == 'testappgroup\n',type='comparison_operator'\nline_star:354,line_end:354|char_star:11,char_end:44";
"result.output,type='attribute'\nline_star:354,line_end:354|char_star:11,char_end:24"[shape="box",fillcolor="white",style=filled];
"result.output == 'testappgroup\n',type='comparison_operator'\nline_star:354,line_end:354|char_star:11,char_end:44"->"result.output,type='attribute'\nline_star:354,line_end:354|char_star:11,char_end:24";
"result,type='identifier'\nline_star:354,line_end:354|char_star:11,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"result.output,type='attribute'\nline_star:354,line_end:354|char_star:11,char_end:24"->"result,type='identifier'\nline_star:354,line_end:354|char_star:11,char_end:17";
"output,type='identifier'\nline_star:354,line_end:354|char_star:18,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"result.output,type='attribute'\nline_star:354,line_end:354|char_star:11,char_end:24"->"output,type='identifier'\nline_star:354,line_end:354|char_star:18,char_end:24";
"assert result.exit_code == 0,type='assert_statement'\nline_star:357,line_end:357|char_star:4,char_end:32"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:334,line_end:358|char_star:4,char_end:44"->"assert result.exit_code == 0,type='assert_statement'\nline_star:357,line_end:357|char_star:4,char_end:32";
"result.exit_code == 0,type='comparison_operator'\nline_star:357,line_end:357|char_star:11,char_end:32"[shape="box",fillcolor="white",style=filled];
"assert result.exit_code == 0,type='assert_statement'\nline_star:357,line_end:357|char_star:4,char_end:32"->"result.exit_code == 0,type='comparison_operator'\nline_star:357,line_end:357|char_star:11,char_end:32";
"result.exit_code,type='attribute'\nline_star:357,line_end:357|char_star:11,char_end:27"[shape="box",fillcolor="white",style=filled];
"result.exit_code == 0,type='comparison_operator'\nline_star:357,line_end:357|char_star:11,char_end:32"->"result.exit_code,type='attribute'\nline_star:357,line_end:357|char_star:11,char_end:27";
"result,type='identifier'\nline_star:357,line_end:357|char_star:11,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"result.exit_code,type='attribute'\nline_star:357,line_end:357|char_star:11,char_end:27"->"result,type='identifier'\nline_star:357,line_end:357|char_star:11,char_end:17";
"exit_code,type='identifier'\nline_star:357,line_end:357|char_star:18,char_end:27"[shape="point",fillcolor="#121013",style=filled];
"result.exit_code,type='attribute'\nline_star:357,line_end:357|char_star:11,char_end:27"->"exit_code,type='identifier'\nline_star:357,line_end:357|char_star:18,char_end:27";
"assert result.output == 'testappgroup\n',type='assert_statement'\nline_star:358,line_end:358|char_star:4,char_end:44"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:334,line_end:358|char_star:4,char_end:44"->"assert result.output == 'testappgroup\n',type='assert_statement'\nline_star:358,line_end:358|char_star:4,char_end:44";
"result.output == 'testappgroup\n',type='comparison_operator'\nline_star:358,line_end:358|char_star:11,char_end:44"[shape="box",fillcolor="white",style=filled];
"assert result.output == 'testappgroup\n',type='assert_statement'\nline_star:358,line_end:358|char_star:4,char_end:44"->"result.output == 'testappgroup\n',type='comparison_operator'\nline_star:358,line_end:358|char_star:11,char_end:44";
"result.output,type='attribute'\nline_star:358,line_end:358|char_star:11,char_end:24"[shape="box",fillcolor="white",style=filled];
"result.output == 'testappgroup\n',type='comparison_operator'\nline_star:358,line_end:358|char_star:11,char_end:44"->"result.output,type='attribute'\nline_star:358,line_end:358|char_star:11,char_end:24";
"result,type='identifier'\nline_star:358,line_end:358|char_star:11,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"result.output,type='attribute'\nline_star:358,line_end:358|char_star:11,char_end:24"->"result,type='identifier'\nline_star:358,line_end:358|char_star:11,char_end:17";
"output,type='identifier'\nline_star:358,line_end:358|char_star:18,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"result.output,type='attribute'\nline_star:358,line_end:358|char_star:11,char_end:24"->"output,type='identifier'\nline_star:358,line_end:358|char_star:18,char_end:24";
"def test_flaskgroup(runner):\n    def create_app():\n        return Flask('flaskgroup')\n\n    @click.group(cls=FlaskGroup, create_app=create_app)\n    def cli(**params):\n        pass\n\n    @cli.command()\n    def test():\n        click.echo(current_app.name)\n\n    result = runner.invoke(cli, ['test'])\n    assert result.exit_code == 0\n    assert result.output == 'flaskgroup\n',type='function_definition'\nline_star:361,line_end:375|char_star:0,char_end:42"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_flaskgroup(runner):\n    def create_app():\n        return Flask('flaskgroup')\n\n    @click.group(cls=FlaskGroup, create_app=create_app)\n    def cli(**params):\n        pass\n\n    @cli.command()\n    def test():\n        click.echo(current_app.name)\n\n    result = runner.invoke(cli, ['test'])\n    assert result.exit_code == 0\n    assert result.output == 'flaskgroup\n',type='function_definition'\nline_star:361,line_end:375|char_star:0,char_end:42";
"test_flaskgroup,type='identifier'\nline_star:361,line_end:361|char_star:4,char_end:19"[shape="point",fillcolor="#121013",style=filled];
"def test_flaskgroup(runner):\n    def create_app():\n        return Flask('flaskgroup')\n\n    @click.group(cls=FlaskGroup, create_app=create_app)\n    def cli(**params):\n        pass\n\n    @cli.command()\n    def test():\n        click.echo(current_app.name)\n\n    result = runner.invoke(cli, ['test'])\n    assert result.exit_code == 0\n    assert result.output == 'flaskgroup\n',type='function_definition'\nline_star:361,line_end:375|char_star:0,char_end:42"->"test_flaskgroup,type='identifier'\nline_star:361,line_end:361|char_star:4,char_end:19";
"(runner),type='parameters'\nline_star:361,line_end:361|char_star:19,char_end:27"[shape="box",fillcolor="white",style=filled];
"def test_flaskgroup(runner):\n    def create_app():\n        return Flask('flaskgroup')\n\n    @click.group(cls=FlaskGroup, create_app=create_app)\n    def cli(**params):\n        pass\n\n    @cli.command()\n    def test():\n        click.echo(current_app.name)\n\n    result = runner.invoke(cli, ['test'])\n    assert result.exit_code == 0\n    assert result.output == 'flaskgroup\n',type='function_definition'\nline_star:361,line_end:375|char_star:0,char_end:42"->"(runner),type='parameters'\nline_star:361,line_end:361|char_star:19,char_end:27";
"runner,type='identifier'\nline_star:361,line_end:361|char_star:20,char_end:26"[shape="point",fillcolor="#121013",style=filled];
"(runner),type='parameters'\nline_star:361,line_end:361|char_star:19,char_end:27"->"runner,type='identifier'\nline_star:361,line_end:361|char_star:20,char_end:26";
"type='INFORMATION BLOCK'\nline_star:362,line_end:375|char_star:4,char_end:42"[shape="point",fillcolor="#121013",style=filled];
"def test_flaskgroup(runner):\n    def create_app():\n        return Flask('flaskgroup')\n\n    @click.group(cls=FlaskGroup, create_app=create_app)\n    def cli(**params):\n        pass\n\n    @cli.command()\n    def test():\n        click.echo(current_app.name)\n\n    result = runner.invoke(cli, ['test'])\n    assert result.exit_code == 0\n    assert result.output == 'flaskgroup\n',type='function_definition'\nline_star:361,line_end:375|char_star:0,char_end:42"->"type='INFORMATION BLOCK'\nline_star:362,line_end:375|char_star:4,char_end:42";
"def create_app():\n        return Flask('flaskgroup'),type='function_definition'\nline_star:362,line_end:363|char_star:4,char_end:34"[shape="box",fillcolor="#cee6b4",style=filled];
"type='INFORMATION BLOCK'\nline_star:362,line_end:375|char_star:4,char_end:42"->"def create_app():\n        return Flask('flaskgroup'),type='function_definition'\nline_star:362,line_end:363|char_star:4,char_end:34";
"create_app,type='identifier'\nline_star:362,line_end:362|char_star:8,char_end:18"[shape="point",fillcolor="#121013",style=filled];
"def create_app():\n        return Flask('flaskgroup'),type='function_definition'\nline_star:362,line_end:363|char_star:4,char_end:34"->"create_app,type='identifier'\nline_star:362,line_end:362|char_star:8,char_end:18";
"type='INFORMATION BLOCK'\nline_star:363,line_end:363|char_star:8,char_end:34"[shape="point",fillcolor="#121013",style=filled];
"def create_app():\n        return Flask('flaskgroup'),type='function_definition'\nline_star:362,line_end:363|char_star:4,char_end:34"->"type='INFORMATION BLOCK'\nline_star:363,line_end:363|char_star:8,char_end:34";
"return Flask('flaskgroup'),type='return_statement'\nline_star:363,line_end:363|char_star:8,char_end:34"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:363,line_end:363|char_star:8,char_end:34"->"return Flask('flaskgroup'),type='return_statement'\nline_star:363,line_end:363|char_star:8,char_end:34";
"@click.group(cls=FlaskGroup, create_app=create_app)\n    def cli(**params):\n        pass,type='decorated_definition'\nline_star:365,line_end:367|char_star:4,char_end:12"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:362,line_end:375|char_star:4,char_end:42"->"@click.group(cls=FlaskGroup, create_app=create_app)\n    def cli(**params):\n        pass,type='decorated_definition'\nline_star:365,line_end:367|char_star:4,char_end:12";
"@click.group(cls=FlaskGroup, create_app=create_app),type='decorator'\nline_star:365,line_end:365|char_star:4,char_end:55"[shape="box",fillcolor="white",style=filled];
"@click.group(cls=FlaskGroup, create_app=create_app)\n    def cli(**params):\n        pass,type='decorated_definition'\nline_star:365,line_end:367|char_star:4,char_end:12"->"@click.group(cls=FlaskGroup, create_app=create_app),type='decorator'\nline_star:365,line_end:365|char_star:4,char_end:55";
"def cli(**params):\n        pass,type='function_definition'\nline_star:366,line_end:367|char_star:4,char_end:12"[shape="box",fillcolor="#cee6b4",style=filled];
"@click.group(cls=FlaskGroup, create_app=create_app)\n    def cli(**params):\n        pass,type='decorated_definition'\nline_star:365,line_end:367|char_star:4,char_end:12"->"def cli(**params):\n        pass,type='function_definition'\nline_star:366,line_end:367|char_star:4,char_end:12";
"cli,type='identifier'\nline_star:366,line_end:366|char_star:8,char_end:11"[shape="point",fillcolor="#121013",style=filled];
"def cli(**params):\n        pass,type='function_definition'\nline_star:366,line_end:367|char_star:4,char_end:12"->"cli,type='identifier'\nline_star:366,line_end:366|char_star:8,char_end:11";
"(**params),type='parameters'\nline_star:366,line_end:366|char_star:11,char_end:21"[shape="box",fillcolor="white",style=filled];
"def cli(**params):\n        pass,type='function_definition'\nline_star:366,line_end:367|char_star:4,char_end:12"->"(**params),type='parameters'\nline_star:366,line_end:366|char_star:11,char_end:21";
"**params,type='dictionary_splat_pattern'\nline_star:366,line_end:366|char_star:12,char_end:20"[shape="box",fillcolor="white",style=filled];
"(**params),type='parameters'\nline_star:366,line_end:366|char_star:11,char_end:21"->"**params,type='dictionary_splat_pattern'\nline_star:366,line_end:366|char_star:12,char_end:20";
"**,type='**'\nline_star:366,line_end:366|char_star:12,char_end:14"[shape="box",fillcolor="white",style=filled];
"**params,type='dictionary_splat_pattern'\nline_star:366,line_end:366|char_star:12,char_end:20"->"**,type='**'\nline_star:366,line_end:366|char_star:12,char_end:14";
"params,type='identifier'\nline_star:366,line_end:366|char_star:14,char_end:20"[shape="point",fillcolor="#121013",style=filled];
"**params,type='dictionary_splat_pattern'\nline_star:366,line_end:366|char_star:12,char_end:20"->"params,type='identifier'\nline_star:366,line_end:366|char_star:14,char_end:20";
"type='INFORMATION BLOCK'\nline_star:367,line_end:367|char_star:8,char_end:12"[shape="point",fillcolor="#121013",style=filled];
"def cli(**params):\n        pass,type='function_definition'\nline_star:366,line_end:367|char_star:4,char_end:12"->"type='INFORMATION BLOCK'\nline_star:367,line_end:367|char_star:8,char_end:12";
"pass,type='pass_statement'\nline_star:367,line_end:367|char_star:8,char_end:12"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:367,line_end:367|char_star:8,char_end:12"->"pass,type='pass_statement'\nline_star:367,line_end:367|char_star:8,char_end:12";
"pass,type='pass'\nline_star:367,line_end:367|char_star:8,char_end:12"[shape="box",fillcolor="white",style=filled];
"pass,type='pass_statement'\nline_star:367,line_end:367|char_star:8,char_end:12"->"pass,type='pass'\nline_star:367,line_end:367|char_star:8,char_end:12";
"@cli.command()\n    def test():\n        click.echo(current_app.name),type='decorated_definition'\nline_star:369,line_end:371|char_star:4,char_end:36"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:362,line_end:375|char_star:4,char_end:42"->"@cli.command()\n    def test():\n        click.echo(current_app.name),type='decorated_definition'\nline_star:369,line_end:371|char_star:4,char_end:36";
"@cli.command(),type='decorator'\nline_star:369,line_end:369|char_star:4,char_end:18"[shape="box",fillcolor="white",style=filled];
"@cli.command()\n    def test():\n        click.echo(current_app.name),type='decorated_definition'\nline_star:369,line_end:371|char_star:4,char_end:36"->"@cli.command(),type='decorator'\nline_star:369,line_end:369|char_star:4,char_end:18";
"def test():\n        click.echo(current_app.name),type='function_definition'\nline_star:370,line_end:371|char_star:4,char_end:36"[shape="box",fillcolor="#cee6b4",style=filled];
"@cli.command()\n    def test():\n        click.echo(current_app.name),type='decorated_definition'\nline_star:369,line_end:371|char_star:4,char_end:36"->"def test():\n        click.echo(current_app.name),type='function_definition'\nline_star:370,line_end:371|char_star:4,char_end:36";
"test,type='identifier'\nline_star:370,line_end:370|char_star:8,char_end:12"[shape="point",fillcolor="#121013",style=filled];
"def test():\n        click.echo(current_app.name),type='function_definition'\nline_star:370,line_end:371|char_star:4,char_end:36"->"test,type='identifier'\nline_star:370,line_end:370|char_star:8,char_end:12";
"type='INFORMATION BLOCK'\nline_star:371,line_end:371|char_star:8,char_end:36"[shape="point",fillcolor="#121013",style=filled];
"def test():\n        click.echo(current_app.name),type='function_definition'\nline_star:370,line_end:371|char_star:4,char_end:36"->"type='INFORMATION BLOCK'\nline_star:371,line_end:371|char_star:8,char_end:36";
"assert result.exit_code == 0,type='assert_statement'\nline_star:374,line_end:374|char_star:4,char_end:32"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:362,line_end:375|char_star:4,char_end:42"->"assert result.exit_code == 0,type='assert_statement'\nline_star:374,line_end:374|char_star:4,char_end:32";
"result.exit_code == 0,type='comparison_operator'\nline_star:374,line_end:374|char_star:11,char_end:32"[shape="box",fillcolor="white",style=filled];
"assert result.exit_code == 0,type='assert_statement'\nline_star:374,line_end:374|char_star:4,char_end:32"->"result.exit_code == 0,type='comparison_operator'\nline_star:374,line_end:374|char_star:11,char_end:32";
"result.exit_code,type='attribute'\nline_star:374,line_end:374|char_star:11,char_end:27"[shape="box",fillcolor="white",style=filled];
"result.exit_code == 0,type='comparison_operator'\nline_star:374,line_end:374|char_star:11,char_end:32"->"result.exit_code,type='attribute'\nline_star:374,line_end:374|char_star:11,char_end:27";
"result,type='identifier'\nline_star:374,line_end:374|char_star:11,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"result.exit_code,type='attribute'\nline_star:374,line_end:374|char_star:11,char_end:27"->"result,type='identifier'\nline_star:374,line_end:374|char_star:11,char_end:17";
"exit_code,type='identifier'\nline_star:374,line_end:374|char_star:18,char_end:27"[shape="point",fillcolor="#121013",style=filled];
"result.exit_code,type='attribute'\nline_star:374,line_end:374|char_star:11,char_end:27"->"exit_code,type='identifier'\nline_star:374,line_end:374|char_star:18,char_end:27";
"assert result.output == 'flaskgroup\n',type='assert_statement'\nline_star:375,line_end:375|char_star:4,char_end:42"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:362,line_end:375|char_star:4,char_end:42"->"assert result.output == 'flaskgroup\n',type='assert_statement'\nline_star:375,line_end:375|char_star:4,char_end:42";
"result.output == 'flaskgroup\n',type='comparison_operator'\nline_star:375,line_end:375|char_star:11,char_end:42"[shape="box",fillcolor="white",style=filled];
"assert result.output == 'flaskgroup\n',type='assert_statement'\nline_star:375,line_end:375|char_star:4,char_end:42"->"result.output == 'flaskgroup\n',type='comparison_operator'\nline_star:375,line_end:375|char_star:11,char_end:42";
"result.output,type='attribute'\nline_star:375,line_end:375|char_star:11,char_end:24"[shape="box",fillcolor="white",style=filled];
"result.output == 'flaskgroup\n',type='comparison_operator'\nline_star:375,line_end:375|char_star:11,char_end:42"->"result.output,type='attribute'\nline_star:375,line_end:375|char_star:11,char_end:24";
"result,type='identifier'\nline_star:375,line_end:375|char_star:11,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"result.output,type='attribute'\nline_star:375,line_end:375|char_star:11,char_end:24"->"result,type='identifier'\nline_star:375,line_end:375|char_star:11,char_end:17";
"output,type='identifier'\nline_star:375,line_end:375|char_star:18,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"result.output,type='attribute'\nline_star:375,line_end:375|char_star:11,char_end:24"->"output,type='identifier'\nline_star:375,line_end:375|char_star:18,char_end:24";
"@pytest.mark.parametrize('set_debug_flag', (True, False))\ndef test_flaskgroup_debug(runner, set_debug_flag):\n    def create_app():\n        app = Flask('flaskgroup')\n        app.debug = True\n        return app\n\n    @click.group(cls=FlaskGroup, create_app=create_app, set_debug_flag=set_debug_flag)\n    def cli(**params):\n        pass\n\n    @cli.command()\n    def test():\n        click.echo(str(current_app.debug))\n\n    result = runner.invoke(cli, ['test'])\n    assert result.exit_code == 0\n    assert result.output == f'{not set_debug_flag}\n',type='decorated_definition'\nline_star:378,line_end:395|char_star:0,char_end:53"[shape="box",fillcolor="#c8c6a7",style=filled];
"MODULE"->"@pytest.mark.parametrize('set_debug_flag', (True, False))\ndef test_flaskgroup_debug(runner, set_debug_flag):\n    def create_app():\n        app = Flask('flaskgroup')\n        app.debug = True\n        return app\n\n    @click.group(cls=FlaskGroup, create_app=create_app, set_debug_flag=set_debug_flag)\n    def cli(**params):\n        pass\n\n    @cli.command()\n    def test():\n        click.echo(str(current_app.debug))\n\n    result = runner.invoke(cli, ['test'])\n    assert result.exit_code == 0\n    assert result.output == f'{not set_debug_flag}\n',type='decorated_definition'\nline_star:378,line_end:395|char_star:0,char_end:53";
"@pytest.mark.parametrize('set_debug_flag', (True, False)),type='decorator'\nline_star:378,line_end:378|char_star:0,char_end:57"[shape="box",fillcolor="white",style=filled];
"@pytest.mark.parametrize('set_debug_flag', (True, False))\ndef test_flaskgroup_debug(runner, set_debug_flag):\n    def create_app():\n        app = Flask('flaskgroup')\n        app.debug = True\n        return app\n\n    @click.group(cls=FlaskGroup, create_app=create_app, set_debug_flag=set_debug_flag)\n    def cli(**params):\n        pass\n\n    @cli.command()\n    def test():\n        click.echo(str(current_app.debug))\n\n    result = runner.invoke(cli, ['test'])\n    assert result.exit_code == 0\n    assert result.output == f'{not set_debug_flag}\n',type='decorated_definition'\nline_star:378,line_end:395|char_star:0,char_end:53"->"@pytest.mark.parametrize('set_debug_flag', (True, False)),type='decorator'\nline_star:378,line_end:378|char_star:0,char_end:57";
"def test_flaskgroup_debug(runner, set_debug_flag):\n    def create_app():\n        app = Flask('flaskgroup')\n        app.debug = True\n        return app\n\n    @click.group(cls=FlaskGroup, create_app=create_app, set_debug_flag=set_debug_flag)\n    def cli(**params):\n        pass\n\n    @cli.command()\n    def test():\n        click.echo(str(current_app.debug))\n\n    result = runner.invoke(cli, ['test'])\n    assert result.exit_code == 0\n    assert result.output == f'{not set_debug_flag}\n',type='function_definition'\nline_star:379,line_end:395|char_star:0,char_end:53"[shape="box",fillcolor="#cee6b4",style=filled];
"@pytest.mark.parametrize('set_debug_flag', (True, False))\ndef test_flaskgroup_debug(runner, set_debug_flag):\n    def create_app():\n        app = Flask('flaskgroup')\n        app.debug = True\n        return app\n\n    @click.group(cls=FlaskGroup, create_app=create_app, set_debug_flag=set_debug_flag)\n    def cli(**params):\n        pass\n\n    @cli.command()\n    def test():\n        click.echo(str(current_app.debug))\n\n    result = runner.invoke(cli, ['test'])\n    assert result.exit_code == 0\n    assert result.output == f'{not set_debug_flag}\n',type='decorated_definition'\nline_star:378,line_end:395|char_star:0,char_end:53"->"def test_flaskgroup_debug(runner, set_debug_flag):\n    def create_app():\n        app = Flask('flaskgroup')\n        app.debug = True\n        return app\n\n    @click.group(cls=FlaskGroup, create_app=create_app, set_debug_flag=set_debug_flag)\n    def cli(**params):\n        pass\n\n    @cli.command()\n    def test():\n        click.echo(str(current_app.debug))\n\n    result = runner.invoke(cli, ['test'])\n    assert result.exit_code == 0\n    assert result.output == f'{not set_debug_flag}\n',type='function_definition'\nline_star:379,line_end:395|char_star:0,char_end:53";
"test_flaskgroup_debug,type='identifier'\nline_star:379,line_end:379|char_star:4,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"def test_flaskgroup_debug(runner, set_debug_flag):\n    def create_app():\n        app = Flask('flaskgroup')\n        app.debug = True\n        return app\n\n    @click.group(cls=FlaskGroup, create_app=create_app, set_debug_flag=set_debug_flag)\n    def cli(**params):\n        pass\n\n    @cli.command()\n    def test():\n        click.echo(str(current_app.debug))\n\n    result = runner.invoke(cli, ['test'])\n    assert result.exit_code == 0\n    assert result.output == f'{not set_debug_flag}\n',type='function_definition'\nline_star:379,line_end:395|char_star:0,char_end:53"->"test_flaskgroup_debug,type='identifier'\nline_star:379,line_end:379|char_star:4,char_end:25";
"(runner, set_debug_flag),type='parameters'\nline_star:379,line_end:379|char_star:25,char_end:49"[shape="box",fillcolor="white",style=filled];
"def test_flaskgroup_debug(runner, set_debug_flag):\n    def create_app():\n        app = Flask('flaskgroup')\n        app.debug = True\n        return app\n\n    @click.group(cls=FlaskGroup, create_app=create_app, set_debug_flag=set_debug_flag)\n    def cli(**params):\n        pass\n\n    @cli.command()\n    def test():\n        click.echo(str(current_app.debug))\n\n    result = runner.invoke(cli, ['test'])\n    assert result.exit_code == 0\n    assert result.output == f'{not set_debug_flag}\n',type='function_definition'\nline_star:379,line_end:395|char_star:0,char_end:53"->"(runner, set_debug_flag),type='parameters'\nline_star:379,line_end:379|char_star:25,char_end:49";
"runner,type='identifier'\nline_star:379,line_end:379|char_star:26,char_end:32"[shape="point",fillcolor="#121013",style=filled];
"(runner, set_debug_flag),type='parameters'\nline_star:379,line_end:379|char_star:25,char_end:49"->"runner,type='identifier'\nline_star:379,line_end:379|char_star:26,char_end:32";
"set_debug_flag,type='identifier'\nline_star:379,line_end:379|char_star:34,char_end:48"[shape="point",fillcolor="#121013",style=filled];
"(runner, set_debug_flag),type='parameters'\nline_star:379,line_end:379|char_star:25,char_end:49"->"set_debug_flag,type='identifier'\nline_star:379,line_end:379|char_star:34,char_end:48";
"type='INFORMATION BLOCK'\nline_star:380,line_end:395|char_star:4,char_end:53"[shape="point",fillcolor="#121013",style=filled];
"def test_flaskgroup_debug(runner, set_debug_flag):\n    def create_app():\n        app = Flask('flaskgroup')\n        app.debug = True\n        return app\n\n    @click.group(cls=FlaskGroup, create_app=create_app, set_debug_flag=set_debug_flag)\n    def cli(**params):\n        pass\n\n    @cli.command()\n    def test():\n        click.echo(str(current_app.debug))\n\n    result = runner.invoke(cli, ['test'])\n    assert result.exit_code == 0\n    assert result.output == f'{not set_debug_flag}\n',type='function_definition'\nline_star:379,line_end:395|char_star:0,char_end:53"->"type='INFORMATION BLOCK'\nline_star:380,line_end:395|char_star:4,char_end:53";
"def create_app():\n        app = Flask('flaskgroup')\n        app.debug = True\n        return app,type='function_definition'\nline_star:380,line_end:383|char_star:4,char_end:18"[shape="box",fillcolor="#cee6b4",style=filled];
"type='INFORMATION BLOCK'\nline_star:380,line_end:395|char_star:4,char_end:53"->"def create_app():\n        app = Flask('flaskgroup')\n        app.debug = True\n        return app,type='function_definition'\nline_star:380,line_end:383|char_star:4,char_end:18";
"create_app,type='identifier'\nline_star:380,line_end:380|char_star:8,char_end:18"[shape="point",fillcolor="#121013",style=filled];
"def create_app():\n        app = Flask('flaskgroup')\n        app.debug = True\n        return app,type='function_definition'\nline_star:380,line_end:383|char_star:4,char_end:18"->"create_app,type='identifier'\nline_star:380,line_end:380|char_star:8,char_end:18";
"type='INFORMATION BLOCK'\nline_star:381,line_end:383|char_star:8,char_end:18"[shape="point",fillcolor="#121013",style=filled];
"def create_app():\n        app = Flask('flaskgroup')\n        app.debug = True\n        return app,type='function_definition'\nline_star:380,line_end:383|char_star:4,char_end:18"->"type='INFORMATION BLOCK'\nline_star:381,line_end:383|char_star:8,char_end:18";
"return app,type='return_statement'\nline_star:383,line_end:383|char_star:8,char_end:18"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:381,line_end:383|char_star:8,char_end:18"->"return app,type='return_statement'\nline_star:383,line_end:383|char_star:8,char_end:18";
"@click.group(cls=FlaskGroup, create_app=create_app, set_debug_flag=set_debug_flag)\n    def cli(**params):\n        pass,type='decorated_definition'\nline_star:385,line_end:387|char_star:4,char_end:12"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:380,line_end:395|char_star:4,char_end:53"->"@click.group(cls=FlaskGroup, create_app=create_app, set_debug_flag=set_debug_flag)\n    def cli(**params):\n        pass,type='decorated_definition'\nline_star:385,line_end:387|char_star:4,char_end:12";
"@click.group(cls=FlaskGroup, create_app=create_app, set_debug_flag=set_debug_flag),type='decorator'\nline_star:385,line_end:385|char_star:4,char_end:86"[shape="box",fillcolor="white",style=filled];
"@click.group(cls=FlaskGroup, create_app=create_app, set_debug_flag=set_debug_flag)\n    def cli(**params):\n        pass,type='decorated_definition'\nline_star:385,line_end:387|char_star:4,char_end:12"->"@click.group(cls=FlaskGroup, create_app=create_app, set_debug_flag=set_debug_flag),type='decorator'\nline_star:385,line_end:385|char_star:4,char_end:86";
"def cli(**params):\n        pass,type='function_definition'\nline_star:386,line_end:387|char_star:4,char_end:12"[shape="box",fillcolor="#cee6b4",style=filled];
"@click.group(cls=FlaskGroup, create_app=create_app, set_debug_flag=set_debug_flag)\n    def cli(**params):\n        pass,type='decorated_definition'\nline_star:385,line_end:387|char_star:4,char_end:12"->"def cli(**params):\n        pass,type='function_definition'\nline_star:386,line_end:387|char_star:4,char_end:12";
"cli,type='identifier'\nline_star:386,line_end:386|char_star:8,char_end:11"[shape="point",fillcolor="#121013",style=filled];
"def cli(**params):\n        pass,type='function_definition'\nline_star:386,line_end:387|char_star:4,char_end:12"->"cli,type='identifier'\nline_star:386,line_end:386|char_star:8,char_end:11";
"(**params),type='parameters'\nline_star:386,line_end:386|char_star:11,char_end:21"[shape="box",fillcolor="white",style=filled];
"def cli(**params):\n        pass,type='function_definition'\nline_star:386,line_end:387|char_star:4,char_end:12"->"(**params),type='parameters'\nline_star:386,line_end:386|char_star:11,char_end:21";
"**params,type='dictionary_splat_pattern'\nline_star:386,line_end:386|char_star:12,char_end:20"[shape="box",fillcolor="white",style=filled];
"(**params),type='parameters'\nline_star:386,line_end:386|char_star:11,char_end:21"->"**params,type='dictionary_splat_pattern'\nline_star:386,line_end:386|char_star:12,char_end:20";
"**,type='**'\nline_star:386,line_end:386|char_star:12,char_end:14"[shape="box",fillcolor="white",style=filled];
"**params,type='dictionary_splat_pattern'\nline_star:386,line_end:386|char_star:12,char_end:20"->"**,type='**'\nline_star:386,line_end:386|char_star:12,char_end:14";
"params,type='identifier'\nline_star:386,line_end:386|char_star:14,char_end:20"[shape="point",fillcolor="#121013",style=filled];
"**params,type='dictionary_splat_pattern'\nline_star:386,line_end:386|char_star:12,char_end:20"->"params,type='identifier'\nline_star:386,line_end:386|char_star:14,char_end:20";
"type='INFORMATION BLOCK'\nline_star:387,line_end:387|char_star:8,char_end:12"[shape="point",fillcolor="#121013",style=filled];
"def cli(**params):\n        pass,type='function_definition'\nline_star:386,line_end:387|char_star:4,char_end:12"->"type='INFORMATION BLOCK'\nline_star:387,line_end:387|char_star:8,char_end:12";
"pass,type='pass_statement'\nline_star:387,line_end:387|char_star:8,char_end:12"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:387,line_end:387|char_star:8,char_end:12"->"pass,type='pass_statement'\nline_star:387,line_end:387|char_star:8,char_end:12";
"pass,type='pass'\nline_star:387,line_end:387|char_star:8,char_end:12"[shape="box",fillcolor="white",style=filled];
"pass,type='pass_statement'\nline_star:387,line_end:387|char_star:8,char_end:12"->"pass,type='pass'\nline_star:387,line_end:387|char_star:8,char_end:12";
"@cli.command()\n    def test():\n        click.echo(str(current_app.debug)),type='decorated_definition'\nline_star:389,line_end:391|char_star:4,char_end:42"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:380,line_end:395|char_star:4,char_end:53"->"@cli.command()\n    def test():\n        click.echo(str(current_app.debug)),type='decorated_definition'\nline_star:389,line_end:391|char_star:4,char_end:42";
"@cli.command(),type='decorator'\nline_star:389,line_end:389|char_star:4,char_end:18"[shape="box",fillcolor="white",style=filled];
"@cli.command()\n    def test():\n        click.echo(str(current_app.debug)),type='decorated_definition'\nline_star:389,line_end:391|char_star:4,char_end:42"->"@cli.command(),type='decorator'\nline_star:389,line_end:389|char_star:4,char_end:18";
"def test():\n        click.echo(str(current_app.debug)),type='function_definition'\nline_star:390,line_end:391|char_star:4,char_end:42"[shape="box",fillcolor="#cee6b4",style=filled];
"@cli.command()\n    def test():\n        click.echo(str(current_app.debug)),type='decorated_definition'\nline_star:389,line_end:391|char_star:4,char_end:42"->"def test():\n        click.echo(str(current_app.debug)),type='function_definition'\nline_star:390,line_end:391|char_star:4,char_end:42";
"test,type='identifier'\nline_star:390,line_end:390|char_star:8,char_end:12"[shape="point",fillcolor="#121013",style=filled];
"def test():\n        click.echo(str(current_app.debug)),type='function_definition'\nline_star:390,line_end:391|char_star:4,char_end:42"->"test,type='identifier'\nline_star:390,line_end:390|char_star:8,char_end:12";
"type='INFORMATION BLOCK'\nline_star:391,line_end:391|char_star:8,char_end:42"[shape="point",fillcolor="#121013",style=filled];
"def test():\n        click.echo(str(current_app.debug)),type='function_definition'\nline_star:390,line_end:391|char_star:4,char_end:42"->"type='INFORMATION BLOCK'\nline_star:391,line_end:391|char_star:8,char_end:42";
"assert result.exit_code == 0,type='assert_statement'\nline_star:394,line_end:394|char_star:4,char_end:32"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:380,line_end:395|char_star:4,char_end:53"->"assert result.exit_code == 0,type='assert_statement'\nline_star:394,line_end:394|char_star:4,char_end:32";
"result.exit_code == 0,type='comparison_operator'\nline_star:394,line_end:394|char_star:11,char_end:32"[shape="box",fillcolor="white",style=filled];
"assert result.exit_code == 0,type='assert_statement'\nline_star:394,line_end:394|char_star:4,char_end:32"->"result.exit_code == 0,type='comparison_operator'\nline_star:394,line_end:394|char_star:11,char_end:32";
"result.exit_code,type='attribute'\nline_star:394,line_end:394|char_star:11,char_end:27"[shape="box",fillcolor="white",style=filled];
"result.exit_code == 0,type='comparison_operator'\nline_star:394,line_end:394|char_star:11,char_end:32"->"result.exit_code,type='attribute'\nline_star:394,line_end:394|char_star:11,char_end:27";
"result,type='identifier'\nline_star:394,line_end:394|char_star:11,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"result.exit_code,type='attribute'\nline_star:394,line_end:394|char_star:11,char_end:27"->"result,type='identifier'\nline_star:394,line_end:394|char_star:11,char_end:17";
"exit_code,type='identifier'\nline_star:394,line_end:394|char_star:18,char_end:27"[shape="point",fillcolor="#121013",style=filled];
"result.exit_code,type='attribute'\nline_star:394,line_end:394|char_star:11,char_end:27"->"exit_code,type='identifier'\nline_star:394,line_end:394|char_star:18,char_end:27";
"assert result.output == f'{not set_debug_flag}\n',type='assert_statement'\nline_star:395,line_end:395|char_star:4,char_end:53"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:380,line_end:395|char_star:4,char_end:53"->"assert result.output == f'{not set_debug_flag}\n',type='assert_statement'\nline_star:395,line_end:395|char_star:4,char_end:53";
"result.output == f'{not set_debug_flag}\n',type='comparison_operator'\nline_star:395,line_end:395|char_star:11,char_end:53"[shape="box",fillcolor="white",style=filled];
"assert result.output == f'{not set_debug_flag}\n',type='assert_statement'\nline_star:395,line_end:395|char_star:4,char_end:53"->"result.output == f'{not set_debug_flag}\n',type='comparison_operator'\nline_star:395,line_end:395|char_star:11,char_end:53";
"result.output,type='attribute'\nline_star:395,line_end:395|char_star:11,char_end:24"[shape="box",fillcolor="white",style=filled];
"result.output == f'{not set_debug_flag}\n',type='comparison_operator'\nline_star:395,line_end:395|char_star:11,char_end:53"->"result.output,type='attribute'\nline_star:395,line_end:395|char_star:11,char_end:24";
"result,type='identifier'\nline_star:395,line_end:395|char_star:11,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"result.output,type='attribute'\nline_star:395,line_end:395|char_star:11,char_end:24"->"result,type='identifier'\nline_star:395,line_end:395|char_star:11,char_end:17";
"output,type='identifier'\nline_star:395,line_end:395|char_star:18,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"result.output,type='attribute'\nline_star:395,line_end:395|char_star:11,char_end:24"->"output,type='identifier'\nline_star:395,line_end:395|char_star:18,char_end:24";
"def test_no_command_echo_loading_error():\n    from flask.cli import cli\n\n    runner = CliRunner(mix_stderr=False)\n    result = runner.invoke(cli, ['missing'])\n    assert result.exit_code == 2\n    assert 'FLASK_APP' in result.stderr\n    assert 'Usage:' in result.stderr,type='function_definition'\nline_star:398,line_end:405|char_star:0,char_end:36"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_no_command_echo_loading_error():\n    from flask.cli import cli\n\n    runner = CliRunner(mix_stderr=False)\n    result = runner.invoke(cli, ['missing'])\n    assert result.exit_code == 2\n    assert 'FLASK_APP' in result.stderr\n    assert 'Usage:' in result.stderr,type='function_definition'\nline_star:398,line_end:405|char_star:0,char_end:36";
"test_no_command_echo_loading_error,type='identifier'\nline_star:398,line_end:398|char_star:4,char_end:38"[shape="point",fillcolor="#121013",style=filled];
"def test_no_command_echo_loading_error():\n    from flask.cli import cli\n\n    runner = CliRunner(mix_stderr=False)\n    result = runner.invoke(cli, ['missing'])\n    assert result.exit_code == 2\n    assert 'FLASK_APP' in result.stderr\n    assert 'Usage:' in result.stderr,type='function_definition'\nline_star:398,line_end:405|char_star:0,char_end:36"->"test_no_command_echo_loading_error,type='identifier'\nline_star:398,line_end:398|char_star:4,char_end:38";
"type='INFORMATION BLOCK'\nline_star:399,line_end:405|char_star:4,char_end:36"[shape="point",fillcolor="#121013",style=filled];
"def test_no_command_echo_loading_error():\n    from flask.cli import cli\n\n    runner = CliRunner(mix_stderr=False)\n    result = runner.invoke(cli, ['missing'])\n    assert result.exit_code == 2\n    assert 'FLASK_APP' in result.stderr\n    assert 'Usage:' in result.stderr,type='function_definition'\nline_star:398,line_end:405|char_star:0,char_end:36"->"type='INFORMATION BLOCK'\nline_star:399,line_end:405|char_star:4,char_end:36";
"from flask.cli import cli,type='import_from_statement'\nline_star:399,line_end:399|char_star:4,char_end:29"[shape="box",fillcolor="#f48b29",style=filled];
"type='INFORMATION BLOCK'\nline_star:399,line_end:405|char_star:4,char_end:36"->"from flask.cli import cli,type='import_from_statement'\nline_star:399,line_end:399|char_star:4,char_end:29";
"assert result.exit_code == 2,type='assert_statement'\nline_star:403,line_end:403|char_star:4,char_end:32"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:399,line_end:405|char_star:4,char_end:36"->"assert result.exit_code == 2,type='assert_statement'\nline_star:403,line_end:403|char_star:4,char_end:32";
"result.exit_code == 2,type='comparison_operator'\nline_star:403,line_end:403|char_star:11,char_end:32"[shape="box",fillcolor="white",style=filled];
"assert result.exit_code == 2,type='assert_statement'\nline_star:403,line_end:403|char_star:4,char_end:32"->"result.exit_code == 2,type='comparison_operator'\nline_star:403,line_end:403|char_star:11,char_end:32";
"result.exit_code,type='attribute'\nline_star:403,line_end:403|char_star:11,char_end:27"[shape="box",fillcolor="white",style=filled];
"result.exit_code == 2,type='comparison_operator'\nline_star:403,line_end:403|char_star:11,char_end:32"->"result.exit_code,type='attribute'\nline_star:403,line_end:403|char_star:11,char_end:27";
"result,type='identifier'\nline_star:403,line_end:403|char_star:11,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"result.exit_code,type='attribute'\nline_star:403,line_end:403|char_star:11,char_end:27"->"result,type='identifier'\nline_star:403,line_end:403|char_star:11,char_end:17";
"exit_code,type='identifier'\nline_star:403,line_end:403|char_star:18,char_end:27"[shape="point",fillcolor="#121013",style=filled];
"result.exit_code,type='attribute'\nline_star:403,line_end:403|char_star:11,char_end:27"->"exit_code,type='identifier'\nline_star:403,line_end:403|char_star:18,char_end:27";
"assert 'FLASK_APP' in result.stderr,type='assert_statement'\nline_star:404,line_end:404|char_star:4,char_end:39"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:399,line_end:405|char_star:4,char_end:36"->"assert 'FLASK_APP' in result.stderr,type='assert_statement'\nline_star:404,line_end:404|char_star:4,char_end:39";
"'FLASK_APP' in result.stderr,type='comparison_operator'\nline_star:404,line_end:404|char_star:11,char_end:39"[shape="box",fillcolor="white",style=filled];
"assert 'FLASK_APP' in result.stderr,type='assert_statement'\nline_star:404,line_end:404|char_star:4,char_end:39"->"'FLASK_APP' in result.stderr,type='comparison_operator'\nline_star:404,line_end:404|char_star:11,char_end:39";
"result.stderr,type='attribute'\nline_star:404,line_end:404|char_star:26,char_end:39"[shape="box",fillcolor="white",style=filled];
"'FLASK_APP' in result.stderr,type='comparison_operator'\nline_star:404,line_end:404|char_star:11,char_end:39"->"result.stderr,type='attribute'\nline_star:404,line_end:404|char_star:26,char_end:39";
"result,type='identifier'\nline_star:404,line_end:404|char_star:26,char_end:32"[shape="point",fillcolor="#121013",style=filled];
"result.stderr,type='attribute'\nline_star:404,line_end:404|char_star:26,char_end:39"->"result,type='identifier'\nline_star:404,line_end:404|char_star:26,char_end:32";
"stderr,type='identifier'\nline_star:404,line_end:404|char_star:33,char_end:39"[shape="point",fillcolor="#121013",style=filled];
"result.stderr,type='attribute'\nline_star:404,line_end:404|char_star:26,char_end:39"->"stderr,type='identifier'\nline_star:404,line_end:404|char_star:33,char_end:39";
"assert 'Usage:' in result.stderr,type='assert_statement'\nline_star:405,line_end:405|char_star:4,char_end:36"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:399,line_end:405|char_star:4,char_end:36"->"assert 'Usage:' in result.stderr,type='assert_statement'\nline_star:405,line_end:405|char_star:4,char_end:36";
"'Usage:' in result.stderr,type='comparison_operator'\nline_star:405,line_end:405|char_star:11,char_end:36"[shape="box",fillcolor="white",style=filled];
"assert 'Usage:' in result.stderr,type='assert_statement'\nline_star:405,line_end:405|char_star:4,char_end:36"->"'Usage:' in result.stderr,type='comparison_operator'\nline_star:405,line_end:405|char_star:11,char_end:36";
"result.stderr,type='attribute'\nline_star:405,line_end:405|char_star:23,char_end:36"[shape="box",fillcolor="white",style=filled];
"'Usage:' in result.stderr,type='comparison_operator'\nline_star:405,line_end:405|char_star:11,char_end:36"->"result.stderr,type='attribute'\nline_star:405,line_end:405|char_star:23,char_end:36";
"result,type='identifier'\nline_star:405,line_end:405|char_star:23,char_end:29"[shape="point",fillcolor="#121013",style=filled];
"result.stderr,type='attribute'\nline_star:405,line_end:405|char_star:23,char_end:36"->"result,type='identifier'\nline_star:405,line_end:405|char_star:23,char_end:29";
"stderr,type='identifier'\nline_star:405,line_end:405|char_star:30,char_end:36"[shape="point",fillcolor="#121013",style=filled];
"result.stderr,type='attribute'\nline_star:405,line_end:405|char_star:23,char_end:36"->"stderr,type='identifier'\nline_star:405,line_end:405|char_star:30,char_end:36";
"def test_help_echo_loading_error():\n    from flask.cli import cli\n\n    runner = CliRunner(mix_stderr=False)\n    result = runner.invoke(cli, ['--help'])\n    assert result.exit_code == 0\n    assert 'FLASK_APP' in result.stderr\n    assert 'Usage:' in result.stdout,type='function_definition'\nline_star:408,line_end:415|char_star:0,char_end:36"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_help_echo_loading_error():\n    from flask.cli import cli\n\n    runner = CliRunner(mix_stderr=False)\n    result = runner.invoke(cli, ['--help'])\n    assert result.exit_code == 0\n    assert 'FLASK_APP' in result.stderr\n    assert 'Usage:' in result.stdout,type='function_definition'\nline_star:408,line_end:415|char_star:0,char_end:36";
"test_help_echo_loading_error,type='identifier'\nline_star:408,line_end:408|char_star:4,char_end:32"[shape="point",fillcolor="#121013",style=filled];
"def test_help_echo_loading_error():\n    from flask.cli import cli\n\n    runner = CliRunner(mix_stderr=False)\n    result = runner.invoke(cli, ['--help'])\n    assert result.exit_code == 0\n    assert 'FLASK_APP' in result.stderr\n    assert 'Usage:' in result.stdout,type='function_definition'\nline_star:408,line_end:415|char_star:0,char_end:36"->"test_help_echo_loading_error,type='identifier'\nline_star:408,line_end:408|char_star:4,char_end:32";
"type='INFORMATION BLOCK'\nline_star:409,line_end:415|char_star:4,char_end:36"[shape="point",fillcolor="#121013",style=filled];
"def test_help_echo_loading_error():\n    from flask.cli import cli\n\n    runner = CliRunner(mix_stderr=False)\n    result = runner.invoke(cli, ['--help'])\n    assert result.exit_code == 0\n    assert 'FLASK_APP' in result.stderr\n    assert 'Usage:' in result.stdout,type='function_definition'\nline_star:408,line_end:415|char_star:0,char_end:36"->"type='INFORMATION BLOCK'\nline_star:409,line_end:415|char_star:4,char_end:36";
"from flask.cli import cli,type='import_from_statement'\nline_star:409,line_end:409|char_star:4,char_end:29"[shape="box",fillcolor="#f48b29",style=filled];
"type='INFORMATION BLOCK'\nline_star:409,line_end:415|char_star:4,char_end:36"->"from flask.cli import cli,type='import_from_statement'\nline_star:409,line_end:409|char_star:4,char_end:29";
"assert result.exit_code == 0,type='assert_statement'\nline_star:413,line_end:413|char_star:4,char_end:32"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:409,line_end:415|char_star:4,char_end:36"->"assert result.exit_code == 0,type='assert_statement'\nline_star:413,line_end:413|char_star:4,char_end:32";
"result.exit_code == 0,type='comparison_operator'\nline_star:413,line_end:413|char_star:11,char_end:32"[shape="box",fillcolor="white",style=filled];
"assert result.exit_code == 0,type='assert_statement'\nline_star:413,line_end:413|char_star:4,char_end:32"->"result.exit_code == 0,type='comparison_operator'\nline_star:413,line_end:413|char_star:11,char_end:32";
"result.exit_code,type='attribute'\nline_star:413,line_end:413|char_star:11,char_end:27"[shape="box",fillcolor="white",style=filled];
"result.exit_code == 0,type='comparison_operator'\nline_star:413,line_end:413|char_star:11,char_end:32"->"result.exit_code,type='attribute'\nline_star:413,line_end:413|char_star:11,char_end:27";
"result,type='identifier'\nline_star:413,line_end:413|char_star:11,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"result.exit_code,type='attribute'\nline_star:413,line_end:413|char_star:11,char_end:27"->"result,type='identifier'\nline_star:413,line_end:413|char_star:11,char_end:17";
"exit_code,type='identifier'\nline_star:413,line_end:413|char_star:18,char_end:27"[shape="point",fillcolor="#121013",style=filled];
"result.exit_code,type='attribute'\nline_star:413,line_end:413|char_star:11,char_end:27"->"exit_code,type='identifier'\nline_star:413,line_end:413|char_star:18,char_end:27";
"assert 'FLASK_APP' in result.stderr,type='assert_statement'\nline_star:414,line_end:414|char_star:4,char_end:39"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:409,line_end:415|char_star:4,char_end:36"->"assert 'FLASK_APP' in result.stderr,type='assert_statement'\nline_star:414,line_end:414|char_star:4,char_end:39";
"'FLASK_APP' in result.stderr,type='comparison_operator'\nline_star:414,line_end:414|char_star:11,char_end:39"[shape="box",fillcolor="white",style=filled];
"assert 'FLASK_APP' in result.stderr,type='assert_statement'\nline_star:414,line_end:414|char_star:4,char_end:39"->"'FLASK_APP' in result.stderr,type='comparison_operator'\nline_star:414,line_end:414|char_star:11,char_end:39";
"result.stderr,type='attribute'\nline_star:414,line_end:414|char_star:26,char_end:39"[shape="box",fillcolor="white",style=filled];
"'FLASK_APP' in result.stderr,type='comparison_operator'\nline_star:414,line_end:414|char_star:11,char_end:39"->"result.stderr,type='attribute'\nline_star:414,line_end:414|char_star:26,char_end:39";
"result,type='identifier'\nline_star:414,line_end:414|char_star:26,char_end:32"[shape="point",fillcolor="#121013",style=filled];
"result.stderr,type='attribute'\nline_star:414,line_end:414|char_star:26,char_end:39"->"result,type='identifier'\nline_star:414,line_end:414|char_star:26,char_end:32";
"stderr,type='identifier'\nline_star:414,line_end:414|char_star:33,char_end:39"[shape="point",fillcolor="#121013",style=filled];
"result.stderr,type='attribute'\nline_star:414,line_end:414|char_star:26,char_end:39"->"stderr,type='identifier'\nline_star:414,line_end:414|char_star:33,char_end:39";
"assert 'Usage:' in result.stdout,type='assert_statement'\nline_star:415,line_end:415|char_star:4,char_end:36"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:409,line_end:415|char_star:4,char_end:36"->"assert 'Usage:' in result.stdout,type='assert_statement'\nline_star:415,line_end:415|char_star:4,char_end:36";
"'Usage:' in result.stdout,type='comparison_operator'\nline_star:415,line_end:415|char_star:11,char_end:36"[shape="box",fillcolor="white",style=filled];
"assert 'Usage:' in result.stdout,type='assert_statement'\nline_star:415,line_end:415|char_star:4,char_end:36"->"'Usage:' in result.stdout,type='comparison_operator'\nline_star:415,line_end:415|char_star:11,char_end:36";
"result.stdout,type='attribute'\nline_star:415,line_end:415|char_star:23,char_end:36"[shape="box",fillcolor="white",style=filled];
"'Usage:' in result.stdout,type='comparison_operator'\nline_star:415,line_end:415|char_star:11,char_end:36"->"result.stdout,type='attribute'\nline_star:415,line_end:415|char_star:23,char_end:36";
"result,type='identifier'\nline_star:415,line_end:415|char_star:23,char_end:29"[shape="point",fillcolor="#121013",style=filled];
"result.stdout,type='attribute'\nline_star:415,line_end:415|char_star:23,char_end:36"->"result,type='identifier'\nline_star:415,line_end:415|char_star:23,char_end:29";
"stdout,type='identifier'\nline_star:415,line_end:415|char_star:30,char_end:36"[shape="point",fillcolor="#121013",style=filled];
"result.stdout,type='attribute'\nline_star:415,line_end:415|char_star:23,char_end:36"->"stdout,type='identifier'\nline_star:415,line_end:415|char_star:30,char_end:36";
"def test_help_echo_exception():\n    def create_app():\n        raise Exception('oh no')\n\n    cli = FlaskGroup(create_app=create_app)\n    runner = CliRunner(mix_stderr=False)\n    result = runner.invoke(cli, ['--help'])\n    assert result.exit_code == 0\n    assert 'Exception: oh no' in result.stderr\n    assert 'Usage:' in result.stdout,type='function_definition'\nline_star:418,line_end:427|char_star:0,char_end:36"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_help_echo_exception():\n    def create_app():\n        raise Exception('oh no')\n\n    cli = FlaskGroup(create_app=create_app)\n    runner = CliRunner(mix_stderr=False)\n    result = runner.invoke(cli, ['--help'])\n    assert result.exit_code == 0\n    assert 'Exception: oh no' in result.stderr\n    assert 'Usage:' in result.stdout,type='function_definition'\nline_star:418,line_end:427|char_star:0,char_end:36";
"test_help_echo_exception,type='identifier'\nline_star:418,line_end:418|char_star:4,char_end:28"[shape="point",fillcolor="#121013",style=filled];
"def test_help_echo_exception():\n    def create_app():\n        raise Exception('oh no')\n\n    cli = FlaskGroup(create_app=create_app)\n    runner = CliRunner(mix_stderr=False)\n    result = runner.invoke(cli, ['--help'])\n    assert result.exit_code == 0\n    assert 'Exception: oh no' in result.stderr\n    assert 'Usage:' in result.stdout,type='function_definition'\nline_star:418,line_end:427|char_star:0,char_end:36"->"test_help_echo_exception,type='identifier'\nline_star:418,line_end:418|char_star:4,char_end:28";
"type='INFORMATION BLOCK'\nline_star:419,line_end:427|char_star:4,char_end:36"[shape="point",fillcolor="#121013",style=filled];
"def test_help_echo_exception():\n    def create_app():\n        raise Exception('oh no')\n\n    cli = FlaskGroup(create_app=create_app)\n    runner = CliRunner(mix_stderr=False)\n    result = runner.invoke(cli, ['--help'])\n    assert result.exit_code == 0\n    assert 'Exception: oh no' in result.stderr\n    assert 'Usage:' in result.stdout,type='function_definition'\nline_star:418,line_end:427|char_star:0,char_end:36"->"type='INFORMATION BLOCK'\nline_star:419,line_end:427|char_star:4,char_end:36";
"def create_app():\n        raise Exception('oh no'),type='function_definition'\nline_star:419,line_end:420|char_star:4,char_end:32"[shape="box",fillcolor="#cee6b4",style=filled];
"type='INFORMATION BLOCK'\nline_star:419,line_end:427|char_star:4,char_end:36"->"def create_app():\n        raise Exception('oh no'),type='function_definition'\nline_star:419,line_end:420|char_star:4,char_end:32";
"create_app,type='identifier'\nline_star:419,line_end:419|char_star:8,char_end:18"[shape="point",fillcolor="#121013",style=filled];
"def create_app():\n        raise Exception('oh no'),type='function_definition'\nline_star:419,line_end:420|char_star:4,char_end:32"->"create_app,type='identifier'\nline_star:419,line_end:419|char_star:8,char_end:18";
"type='INFORMATION BLOCK'\nline_star:420,line_end:420|char_star:8,char_end:32"[shape="point",fillcolor="#121013",style=filled];
"def create_app():\n        raise Exception('oh no'),type='function_definition'\nline_star:419,line_end:420|char_star:4,char_end:32"->"type='INFORMATION BLOCK'\nline_star:420,line_end:420|char_star:8,char_end:32";
"raise Exception('oh no'),type='raise_statement'\nline_star:420,line_end:420|char_star:8,char_end:32"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:420,line_end:420|char_star:8,char_end:32"->"raise Exception('oh no'),type='raise_statement'\nline_star:420,line_end:420|char_star:8,char_end:32";
"raise,type='raise'\nline_star:420,line_end:420|char_star:8,char_end:13"[shape="box",fillcolor="white",style=filled];
"raise Exception('oh no'),type='raise_statement'\nline_star:420,line_end:420|char_star:8,char_end:32"->"raise,type='raise'\nline_star:420,line_end:420|char_star:8,char_end:13";
"Exception('oh no'),type='call'\nline_star:420,line_end:420|char_star:14,char_end:32"[shape="box",fillcolor="white",style=filled];
"raise Exception('oh no'),type='raise_statement'\nline_star:420,line_end:420|char_star:8,char_end:32"->"Exception('oh no'),type='call'\nline_star:420,line_end:420|char_star:14,char_end:32";
"Exception,type='identifier'\nline_star:420,line_end:420|char_star:14,char_end:23"[shape="point",fillcolor="#121013",style=filled];
"Exception('oh no'),type='call'\nline_star:420,line_end:420|char_star:14,char_end:32"->"Exception,type='identifier'\nline_star:420,line_end:420|char_star:14,char_end:23";
"('oh no'),type='argument_list'\nline_star:420,line_end:420|char_star:23,char_end:32"[shape="box",fillcolor="white",style=filled];
"Exception('oh no'),type='call'\nline_star:420,line_end:420|char_star:14,char_end:32"->"('oh no'),type='argument_list'\nline_star:420,line_end:420|char_star:23,char_end:32";
"assert result.exit_code == 0,type='assert_statement'\nline_star:425,line_end:425|char_star:4,char_end:32"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:419,line_end:427|char_star:4,char_end:36"->"assert result.exit_code == 0,type='assert_statement'\nline_star:425,line_end:425|char_star:4,char_end:32";
"result.exit_code == 0,type='comparison_operator'\nline_star:425,line_end:425|char_star:11,char_end:32"[shape="box",fillcolor="white",style=filled];
"assert result.exit_code == 0,type='assert_statement'\nline_star:425,line_end:425|char_star:4,char_end:32"->"result.exit_code == 0,type='comparison_operator'\nline_star:425,line_end:425|char_star:11,char_end:32";
"result.exit_code,type='attribute'\nline_star:425,line_end:425|char_star:11,char_end:27"[shape="box",fillcolor="white",style=filled];
"result.exit_code == 0,type='comparison_operator'\nline_star:425,line_end:425|char_star:11,char_end:32"->"result.exit_code,type='attribute'\nline_star:425,line_end:425|char_star:11,char_end:27";
"result,type='identifier'\nline_star:425,line_end:425|char_star:11,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"result.exit_code,type='attribute'\nline_star:425,line_end:425|char_star:11,char_end:27"->"result,type='identifier'\nline_star:425,line_end:425|char_star:11,char_end:17";
"exit_code,type='identifier'\nline_star:425,line_end:425|char_star:18,char_end:27"[shape="point",fillcolor="#121013",style=filled];
"result.exit_code,type='attribute'\nline_star:425,line_end:425|char_star:11,char_end:27"->"exit_code,type='identifier'\nline_star:425,line_end:425|char_star:18,char_end:27";
"assert 'Exception: oh no' in result.stderr,type='assert_statement'\nline_star:426,line_end:426|char_star:4,char_end:46"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:419,line_end:427|char_star:4,char_end:36"->"assert 'Exception: oh no' in result.stderr,type='assert_statement'\nline_star:426,line_end:426|char_star:4,char_end:46";
"'Exception: oh no' in result.stderr,type='comparison_operator'\nline_star:426,line_end:426|char_star:11,char_end:46"[shape="box",fillcolor="white",style=filled];
"assert 'Exception: oh no' in result.stderr,type='assert_statement'\nline_star:426,line_end:426|char_star:4,char_end:46"->"'Exception: oh no' in result.stderr,type='comparison_operator'\nline_star:426,line_end:426|char_star:11,char_end:46";
"result.stderr,type='attribute'\nline_star:426,line_end:426|char_star:33,char_end:46"[shape="box",fillcolor="white",style=filled];
"'Exception: oh no' in result.stderr,type='comparison_operator'\nline_star:426,line_end:426|char_star:11,char_end:46"->"result.stderr,type='attribute'\nline_star:426,line_end:426|char_star:33,char_end:46";
"result,type='identifier'\nline_star:426,line_end:426|char_star:33,char_end:39"[shape="point",fillcolor="#121013",style=filled];
"result.stderr,type='attribute'\nline_star:426,line_end:426|char_star:33,char_end:46"->"result,type='identifier'\nline_star:426,line_end:426|char_star:33,char_end:39";
"stderr,type='identifier'\nline_star:426,line_end:426|char_star:40,char_end:46"[shape="point",fillcolor="#121013",style=filled];
"result.stderr,type='attribute'\nline_star:426,line_end:426|char_star:33,char_end:46"->"stderr,type='identifier'\nline_star:426,line_end:426|char_star:40,char_end:46";
"assert 'Usage:' in result.stdout,type='assert_statement'\nline_star:427,line_end:427|char_star:4,char_end:36"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:419,line_end:427|char_star:4,char_end:36"->"assert 'Usage:' in result.stdout,type='assert_statement'\nline_star:427,line_end:427|char_star:4,char_end:36";
"'Usage:' in result.stdout,type='comparison_operator'\nline_star:427,line_end:427|char_star:11,char_end:36"[shape="box",fillcolor="white",style=filled];
"assert 'Usage:' in result.stdout,type='assert_statement'\nline_star:427,line_end:427|char_star:4,char_end:36"->"'Usage:' in result.stdout,type='comparison_operator'\nline_star:427,line_end:427|char_star:11,char_end:36";
"result.stdout,type='attribute'\nline_star:427,line_end:427|char_star:23,char_end:36"[shape="box",fillcolor="white",style=filled];
"'Usage:' in result.stdout,type='comparison_operator'\nline_star:427,line_end:427|char_star:11,char_end:36"->"result.stdout,type='attribute'\nline_star:427,line_end:427|char_star:23,char_end:36";
"result,type='identifier'\nline_star:427,line_end:427|char_star:23,char_end:29"[shape="point",fillcolor="#121013",style=filled];
"result.stdout,type='attribute'\nline_star:427,line_end:427|char_star:23,char_end:36"->"result,type='identifier'\nline_star:427,line_end:427|char_star:23,char_end:29";
"stdout,type='identifier'\nline_star:427,line_end:427|char_star:30,char_end:36"[shape="point",fillcolor="#121013",style=filled];
"result.stdout,type='attribute'\nline_star:427,line_end:427|char_star:23,char_end:36"->"stdout,type='identifier'\nline_star:427,line_end:427|char_star:30,char_end:36";
"class TestRoutes:\n    @pytest.fixture\n    def invoke(self, runner):\n        def create_app():\n            app = Flask(__name__)\n            app.testing = True\n\n            @app.route('/get_post/<int:x>/<int:y>', methods=['GET', 'POST'])\n            def yyy_get_post(x, y):\n                pass\n\n            @app.route('/zzz_post', methods=['POST'])\n            def aaa_post():\n                pass\n\n            return app\n\n        cli = FlaskGroup(create_app=create_app)\n        return partial(runner.invoke, cli)\n\n    @pytest.fixture\n    def invoke_no_routes(self, runner):\n        def create_app():\n            app = Flask(__name__, static_folder=None)\n            app.testing = True\n\n            return app\n\n        cli = FlaskGroup(create_app=create_app)\n        return partial(runner.invoke, cli)\n\n    def expect_order(self, order, output):\n        # skip the header and match the start of each row\n        for expect, line in zip(order, output.splitlines()[2:]):\n            # do this instead of startswith for nicer pytest output\n            assert line[: len(expect)] == expect\n\n    def test_simple(self, invoke):\n        result = invoke(['routes'])\n        assert result.exit_code == 0\n        self.expect_order(['aaa_post', 'static', 'yyy_get_post'], result.output)\n\n    def test_sort(self, invoke):\n        default_output = invoke(['routes']).output\n        endpoint_output = invoke(['routes', '-s', 'endpoint']).output\n        assert default_output == endpoint_output\n        self.expect_order(\n            ['static', 'yyy_get_post', 'aaa_post'],\n            invoke(['routes', '-s', 'methods']).output,\n        )\n        self.expect_order(\n            ['yyy_get_post', 'static', 'aaa_post'],\n            invoke(['routes', '-s', 'rule']).output,\n        )\n        self.expect_order(\n            ['aaa_post', 'yyy_get_post', 'static'],\n            invoke(['routes', '-s', 'match']).output,\n        )\n\n    def test_all_methods(self, invoke):\n        output = invoke(['routes']).output\n        assert 'GET, HEAD, OPTIONS, POST' not in output\n        output = invoke(['routes', '--all-methods']).output\n        assert 'GET, HEAD, OPTIONS, POST' in output\n\n    def test_no_routes(self, invoke_no_routes):\n        result = invoke_no_routes(['routes'])\n        assert result.exit_code == 0\n        assert 'No routes were registered.' in result.output,type='class_definition'\nline_star:430,line_end:498|char_star:0,char_end:60"[shape="box",fillcolor="#ffdf91",style=filled];
"MODULE"->"class TestRoutes:\n    @pytest.fixture\n    def invoke(self, runner):\n        def create_app():\n            app = Flask(__name__)\n            app.testing = True\n\n            @app.route('/get_post/<int:x>/<int:y>', methods=['GET', 'POST'])\n            def yyy_get_post(x, y):\n                pass\n\n            @app.route('/zzz_post', methods=['POST'])\n            def aaa_post():\n                pass\n\n            return app\n\n        cli = FlaskGroup(create_app=create_app)\n        return partial(runner.invoke, cli)\n\n    @pytest.fixture\n    def invoke_no_routes(self, runner):\n        def create_app():\n            app = Flask(__name__, static_folder=None)\n            app.testing = True\n\n            return app\n\n        cli = FlaskGroup(create_app=create_app)\n        return partial(runner.invoke, cli)\n\n    def expect_order(self, order, output):\n        # skip the header and match the start of each row\n        for expect, line in zip(order, output.splitlines()[2:]):\n            # do this instead of startswith for nicer pytest output\n            assert line[: len(expect)] == expect\n\n    def test_simple(self, invoke):\n        result = invoke(['routes'])\n        assert result.exit_code == 0\n        self.expect_order(['aaa_post', 'static', 'yyy_get_post'], result.output)\n\n    def test_sort(self, invoke):\n        default_output = invoke(['routes']).output\n        endpoint_output = invoke(['routes', '-s', 'endpoint']).output\n        assert default_output == endpoint_output\n        self.expect_order(\n            ['static', 'yyy_get_post', 'aaa_post'],\n            invoke(['routes', '-s', 'methods']).output,\n        )\n        self.expect_order(\n            ['yyy_get_post', 'static', 'aaa_post'],\n            invoke(['routes', '-s', 'rule']).output,\n        )\n        self.expect_order(\n            ['aaa_post', 'yyy_get_post', 'static'],\n            invoke(['routes', '-s', 'match']).output,\n        )\n\n    def test_all_methods(self, invoke):\n        output = invoke(['routes']).output\n        assert 'GET, HEAD, OPTIONS, POST' not in output\n        output = invoke(['routes', '--all-methods']).output\n        assert 'GET, HEAD, OPTIONS, POST' in output\n\n    def test_no_routes(self, invoke_no_routes):\n        result = invoke_no_routes(['routes'])\n        assert result.exit_code == 0\n        assert 'No routes were registered.' in result.output,type='class_definition'\nline_star:430,line_end:498|char_star:0,char_end:60";
"TestRoutes,type='identifier'\nline_star:430,line_end:430|char_star:6,char_end:16"[shape="point",fillcolor="#121013",style=filled];
"class TestRoutes:\n    @pytest.fixture\n    def invoke(self, runner):\n        def create_app():\n            app = Flask(__name__)\n            app.testing = True\n\n            @app.route('/get_post/<int:x>/<int:y>', methods=['GET', 'POST'])\n            def yyy_get_post(x, y):\n                pass\n\n            @app.route('/zzz_post', methods=['POST'])\n            def aaa_post():\n                pass\n\n            return app\n\n        cli = FlaskGroup(create_app=create_app)\n        return partial(runner.invoke, cli)\n\n    @pytest.fixture\n    def invoke_no_routes(self, runner):\n        def create_app():\n            app = Flask(__name__, static_folder=None)\n            app.testing = True\n\n            return app\n\n        cli = FlaskGroup(create_app=create_app)\n        return partial(runner.invoke, cli)\n\n    def expect_order(self, order, output):\n        # skip the header and match the start of each row\n        for expect, line in zip(order, output.splitlines()[2:]):\n            # do this instead of startswith for nicer pytest output\n            assert line[: len(expect)] == expect\n\n    def test_simple(self, invoke):\n        result = invoke(['routes'])\n        assert result.exit_code == 0\n        self.expect_order(['aaa_post', 'static', 'yyy_get_post'], result.output)\n\n    def test_sort(self, invoke):\n        default_output = invoke(['routes']).output\n        endpoint_output = invoke(['routes', '-s', 'endpoint']).output\n        assert default_output == endpoint_output\n        self.expect_order(\n            ['static', 'yyy_get_post', 'aaa_post'],\n            invoke(['routes', '-s', 'methods']).output,\n        )\n        self.expect_order(\n            ['yyy_get_post', 'static', 'aaa_post'],\n            invoke(['routes', '-s', 'rule']).output,\n        )\n        self.expect_order(\n            ['aaa_post', 'yyy_get_post', 'static'],\n            invoke(['routes', '-s', 'match']).output,\n        )\n\n    def test_all_methods(self, invoke):\n        output = invoke(['routes']).output\n        assert 'GET, HEAD, OPTIONS, POST' not in output\n        output = invoke(['routes', '--all-methods']).output\n        assert 'GET, HEAD, OPTIONS, POST' in output\n\n    def test_no_routes(self, invoke_no_routes):\n        result = invoke_no_routes(['routes'])\n        assert result.exit_code == 0\n        assert 'No routes were registered.' in result.output,type='class_definition'\nline_star:430,line_end:498|char_star:0,char_end:60"->"TestRoutes,type='identifier'\nline_star:430,line_end:430|char_star:6,char_end:16";
"type='INFORMATION BLOCK'\nline_star:431,line_end:498|char_star:4,char_end:60"[shape="point",fillcolor="#121013",style=filled];
"class TestRoutes:\n    @pytest.fixture\n    def invoke(self, runner):\n        def create_app():\n            app = Flask(__name__)\n            app.testing = True\n\n            @app.route('/get_post/<int:x>/<int:y>', methods=['GET', 'POST'])\n            def yyy_get_post(x, y):\n                pass\n\n            @app.route('/zzz_post', methods=['POST'])\n            def aaa_post():\n                pass\n\n            return app\n\n        cli = FlaskGroup(create_app=create_app)\n        return partial(runner.invoke, cli)\n\n    @pytest.fixture\n    def invoke_no_routes(self, runner):\n        def create_app():\n            app = Flask(__name__, static_folder=None)\n            app.testing = True\n\n            return app\n\n        cli = FlaskGroup(create_app=create_app)\n        return partial(runner.invoke, cli)\n\n    def expect_order(self, order, output):\n        # skip the header and match the start of each row\n        for expect, line in zip(order, output.splitlines()[2:]):\n            # do this instead of startswith for nicer pytest output\n            assert line[: len(expect)] == expect\n\n    def test_simple(self, invoke):\n        result = invoke(['routes'])\n        assert result.exit_code == 0\n        self.expect_order(['aaa_post', 'static', 'yyy_get_post'], result.output)\n\n    def test_sort(self, invoke):\n        default_output = invoke(['routes']).output\n        endpoint_output = invoke(['routes', '-s', 'endpoint']).output\n        assert default_output == endpoint_output\n        self.expect_order(\n            ['static', 'yyy_get_post', 'aaa_post'],\n            invoke(['routes', '-s', 'methods']).output,\n        )\n        self.expect_order(\n            ['yyy_get_post', 'static', 'aaa_post'],\n            invoke(['routes', '-s', 'rule']).output,\n        )\n        self.expect_order(\n            ['aaa_post', 'yyy_get_post', 'static'],\n            invoke(['routes', '-s', 'match']).output,\n        )\n\n    def test_all_methods(self, invoke):\n        output = invoke(['routes']).output\n        assert 'GET, HEAD, OPTIONS, POST' not in output\n        output = invoke(['routes', '--all-methods']).output\n        assert 'GET, HEAD, OPTIONS, POST' in output\n\n    def test_no_routes(self, invoke_no_routes):\n        result = invoke_no_routes(['routes'])\n        assert result.exit_code == 0\n        assert 'No routes were registered.' in result.output,type='class_definition'\nline_star:430,line_end:498|char_star:0,char_end:60"->"type='INFORMATION BLOCK'\nline_star:431,line_end:498|char_star:4,char_end:60";
"@pytest.fixture\n    def invoke(self, runner):\n        def create_app():\n            app = Flask(__name__)\n            app.testing = True\n\n            @app.route('/get_post/<int:x>/<int:y>', methods=['GET', 'POST'])\n            def yyy_get_post(x, y):\n                pass\n\n            @app.route('/zzz_post', methods=['POST'])\n            def aaa_post():\n                pass\n\n            return app\n\n        cli = FlaskGroup(create_app=create_app)\n        return partial(runner.invoke, cli),type='decorated_definition'\nline_star:431,line_end:448|char_star:4,char_end:42"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:431,line_end:498|char_star:4,char_end:60"->"@pytest.fixture\n    def invoke(self, runner):\n        def create_app():\n            app = Flask(__name__)\n            app.testing = True\n\n            @app.route('/get_post/<int:x>/<int:y>', methods=['GET', 'POST'])\n            def yyy_get_post(x, y):\n                pass\n\n            @app.route('/zzz_post', methods=['POST'])\n            def aaa_post():\n                pass\n\n            return app\n\n        cli = FlaskGroup(create_app=create_app)\n        return partial(runner.invoke, cli),type='decorated_definition'\nline_star:431,line_end:448|char_star:4,char_end:42";
"@pytest.fixture,type='decorator'\nline_star:431,line_end:431|char_star:4,char_end:19"[shape="box",fillcolor="white",style=filled];
"@pytest.fixture\n    def invoke(self, runner):\n        def create_app():\n            app = Flask(__name__)\n            app.testing = True\n\n            @app.route('/get_post/<int:x>/<int:y>', methods=['GET', 'POST'])\n            def yyy_get_post(x, y):\n                pass\n\n            @app.route('/zzz_post', methods=['POST'])\n            def aaa_post():\n                pass\n\n            return app\n\n        cli = FlaskGroup(create_app=create_app)\n        return partial(runner.invoke, cli),type='decorated_definition'\nline_star:431,line_end:448|char_star:4,char_end:42"->"@pytest.fixture,type='decorator'\nline_star:431,line_end:431|char_star:4,char_end:19";
"def invoke(self, runner):\n        def create_app():\n            app = Flask(__name__)\n            app.testing = True\n\n            @app.route('/get_post/<int:x>/<int:y>', methods=['GET', 'POST'])\n            def yyy_get_post(x, y):\n                pass\n\n            @app.route('/zzz_post', methods=['POST'])\n            def aaa_post():\n                pass\n\n            return app\n\n        cli = FlaskGroup(create_app=create_app)\n        return partial(runner.invoke, cli),type='function_definition'\nline_star:432,line_end:448|char_star:4,char_end:42"[shape="box",fillcolor="#cee6b4",style=filled];
"@pytest.fixture\n    def invoke(self, runner):\n        def create_app():\n            app = Flask(__name__)\n            app.testing = True\n\n            @app.route('/get_post/<int:x>/<int:y>', methods=['GET', 'POST'])\n            def yyy_get_post(x, y):\n                pass\n\n            @app.route('/zzz_post', methods=['POST'])\n            def aaa_post():\n                pass\n\n            return app\n\n        cli = FlaskGroup(create_app=create_app)\n        return partial(runner.invoke, cli),type='decorated_definition'\nline_star:431,line_end:448|char_star:4,char_end:42"->"def invoke(self, runner):\n        def create_app():\n            app = Flask(__name__)\n            app.testing = True\n\n            @app.route('/get_post/<int:x>/<int:y>', methods=['GET', 'POST'])\n            def yyy_get_post(x, y):\n                pass\n\n            @app.route('/zzz_post', methods=['POST'])\n            def aaa_post():\n                pass\n\n            return app\n\n        cli = FlaskGroup(create_app=create_app)\n        return partial(runner.invoke, cli),type='function_definition'\nline_star:432,line_end:448|char_star:4,char_end:42";
"invoke,type='identifier'\nline_star:432,line_end:432|char_star:8,char_end:14"[shape="point",fillcolor="#121013",style=filled];
"def invoke(self, runner):\n        def create_app():\n            app = Flask(__name__)\n            app.testing = True\n\n            @app.route('/get_post/<int:x>/<int:y>', methods=['GET', 'POST'])\n            def yyy_get_post(x, y):\n                pass\n\n            @app.route('/zzz_post', methods=['POST'])\n            def aaa_post():\n                pass\n\n            return app\n\n        cli = FlaskGroup(create_app=create_app)\n        return partial(runner.invoke, cli),type='function_definition'\nline_star:432,line_end:448|char_star:4,char_end:42"->"invoke,type='identifier'\nline_star:432,line_end:432|char_star:8,char_end:14";
"(self, runner),type='parameters'\nline_star:432,line_end:432|char_star:14,char_end:28"[shape="box",fillcolor="white",style=filled];
"def invoke(self, runner):\n        def create_app():\n            app = Flask(__name__)\n            app.testing = True\n\n            @app.route('/get_post/<int:x>/<int:y>', methods=['GET', 'POST'])\n            def yyy_get_post(x, y):\n                pass\n\n            @app.route('/zzz_post', methods=['POST'])\n            def aaa_post():\n                pass\n\n            return app\n\n        cli = FlaskGroup(create_app=create_app)\n        return partial(runner.invoke, cli),type='function_definition'\nline_star:432,line_end:448|char_star:4,char_end:42"->"(self, runner),type='parameters'\nline_star:432,line_end:432|char_star:14,char_end:28";
"self,type='identifier'\nline_star:432,line_end:432|char_star:15,char_end:19"[shape="point",fillcolor="#121013",style=filled];
"(self, runner),type='parameters'\nline_star:432,line_end:432|char_star:14,char_end:28"->"self,type='identifier'\nline_star:432,line_end:432|char_star:15,char_end:19";
"runner,type='identifier'\nline_star:432,line_end:432|char_star:21,char_end:27"[shape="point",fillcolor="#121013",style=filled];
"(self, runner),type='parameters'\nline_star:432,line_end:432|char_star:14,char_end:28"->"runner,type='identifier'\nline_star:432,line_end:432|char_star:21,char_end:27";
"type='INFORMATION BLOCK'\nline_star:433,line_end:448|char_star:8,char_end:42"[shape="point",fillcolor="#121013",style=filled];
"def invoke(self, runner):\n        def create_app():\n            app = Flask(__name__)\n            app.testing = True\n\n            @app.route('/get_post/<int:x>/<int:y>', methods=['GET', 'POST'])\n            def yyy_get_post(x, y):\n                pass\n\n            @app.route('/zzz_post', methods=['POST'])\n            def aaa_post():\n                pass\n\n            return app\n\n        cli = FlaskGroup(create_app=create_app)\n        return partial(runner.invoke, cli),type='function_definition'\nline_star:432,line_end:448|char_star:4,char_end:42"->"type='INFORMATION BLOCK'\nline_star:433,line_end:448|char_star:8,char_end:42";
"def create_app():\n            app = Flask(__name__)\n            app.testing = True\n\n            @app.route('/get_post/<int:x>/<int:y>', methods=['GET', 'POST'])\n            def yyy_get_post(x, y):\n                pass\n\n            @app.route('/zzz_post', methods=['POST'])\n            def aaa_post():\n                pass\n\n            return app,type='function_definition'\nline_star:433,line_end:445|char_star:8,char_end:22"[shape="box",fillcolor="#cee6b4",style=filled];
"type='INFORMATION BLOCK'\nline_star:433,line_end:448|char_star:8,char_end:42"->"def create_app():\n            app = Flask(__name__)\n            app.testing = True\n\n            @app.route('/get_post/<int:x>/<int:y>', methods=['GET', 'POST'])\n            def yyy_get_post(x, y):\n                pass\n\n            @app.route('/zzz_post', methods=['POST'])\n            def aaa_post():\n                pass\n\n            return app,type='function_definition'\nline_star:433,line_end:445|char_star:8,char_end:22";
"create_app,type='identifier'\nline_star:433,line_end:433|char_star:12,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"def create_app():\n            app = Flask(__name__)\n            app.testing = True\n\n            @app.route('/get_post/<int:x>/<int:y>', methods=['GET', 'POST'])\n            def yyy_get_post(x, y):\n                pass\n\n            @app.route('/zzz_post', methods=['POST'])\n            def aaa_post():\n                pass\n\n            return app,type='function_definition'\nline_star:433,line_end:445|char_star:8,char_end:22"->"create_app,type='identifier'\nline_star:433,line_end:433|char_star:12,char_end:22";
"type='INFORMATION BLOCK'\nline_star:434,line_end:445|char_star:12,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"def create_app():\n            app = Flask(__name__)\n            app.testing = True\n\n            @app.route('/get_post/<int:x>/<int:y>', methods=['GET', 'POST'])\n            def yyy_get_post(x, y):\n                pass\n\n            @app.route('/zzz_post', methods=['POST'])\n            def aaa_post():\n                pass\n\n            return app,type='function_definition'\nline_star:433,line_end:445|char_star:8,char_end:22"->"type='INFORMATION BLOCK'\nline_star:434,line_end:445|char_star:12,char_end:22";
"@app.route('/get_post/<int:x>/<int:y>', methods=['GET', 'POST'])\n            def yyy_get_post(x, y):\n                pass,type='decorated_definition'\nline_star:437,line_end:439|char_star:12,char_end:20"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:434,line_end:445|char_star:12,char_end:22"->"@app.route('/get_post/<int:x>/<int:y>', methods=['GET', 'POST'])\n            def yyy_get_post(x, y):\n                pass,type='decorated_definition'\nline_star:437,line_end:439|char_star:12,char_end:20";
"@app.route('/get_post/<int:x>/<int:y>', methods=['GET', 'POST']),type='decorator'\nline_star:437,line_end:437|char_star:12,char_end:76"[shape="box",fillcolor="white",style=filled];
"@app.route('/get_post/<int:x>/<int:y>', methods=['GET', 'POST'])\n            def yyy_get_post(x, y):\n                pass,type='decorated_definition'\nline_star:437,line_end:439|char_star:12,char_end:20"->"@app.route('/get_post/<int:x>/<int:y>', methods=['GET', 'POST']),type='decorator'\nline_star:437,line_end:437|char_star:12,char_end:76";
"def yyy_get_post(x, y):\n                pass,type='function_definition'\nline_star:438,line_end:439|char_star:12,char_end:20"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.route('/get_post/<int:x>/<int:y>', methods=['GET', 'POST'])\n            def yyy_get_post(x, y):\n                pass,type='decorated_definition'\nline_star:437,line_end:439|char_star:12,char_end:20"->"def yyy_get_post(x, y):\n                pass,type='function_definition'\nline_star:438,line_end:439|char_star:12,char_end:20";
"yyy_get_post,type='identifier'\nline_star:438,line_end:438|char_star:16,char_end:28"[shape="point",fillcolor="#121013",style=filled];
"def yyy_get_post(x, y):\n                pass,type='function_definition'\nline_star:438,line_end:439|char_star:12,char_end:20"->"yyy_get_post,type='identifier'\nline_star:438,line_end:438|char_star:16,char_end:28";
"(x, y),type='parameters'\nline_star:438,line_end:438|char_star:28,char_end:34"[shape="box",fillcolor="white",style=filled];
"def yyy_get_post(x, y):\n                pass,type='function_definition'\nline_star:438,line_end:439|char_star:12,char_end:20"->"(x, y),type='parameters'\nline_star:438,line_end:438|char_star:28,char_end:34";
"x,type='identifier'\nline_star:438,line_end:438|char_star:29,char_end:30"[shape="point",fillcolor="#121013",style=filled];
"(x, y),type='parameters'\nline_star:438,line_end:438|char_star:28,char_end:34"->"x,type='identifier'\nline_star:438,line_end:438|char_star:29,char_end:30";
"y,type='identifier'\nline_star:438,line_end:438|char_star:32,char_end:33"[shape="point",fillcolor="#121013",style=filled];
"(x, y),type='parameters'\nline_star:438,line_end:438|char_star:28,char_end:34"->"y,type='identifier'\nline_star:438,line_end:438|char_star:32,char_end:33";
"type='INFORMATION BLOCK'\nline_star:439,line_end:439|char_star:16,char_end:20"[shape="point",fillcolor="#121013",style=filled];
"def yyy_get_post(x, y):\n                pass,type='function_definition'\nline_star:438,line_end:439|char_star:12,char_end:20"->"type='INFORMATION BLOCK'\nline_star:439,line_end:439|char_star:16,char_end:20";
"pass,type='pass_statement'\nline_star:439,line_end:439|char_star:16,char_end:20"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:439,line_end:439|char_star:16,char_end:20"->"pass,type='pass_statement'\nline_star:439,line_end:439|char_star:16,char_end:20";
"pass,type='pass'\nline_star:439,line_end:439|char_star:16,char_end:20"[shape="box",fillcolor="white",style=filled];
"pass,type='pass_statement'\nline_star:439,line_end:439|char_star:16,char_end:20"->"pass,type='pass'\nline_star:439,line_end:439|char_star:16,char_end:20";
"@app.route('/zzz_post', methods=['POST'])\n            def aaa_post():\n                pass,type='decorated_definition'\nline_star:441,line_end:443|char_star:12,char_end:20"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:434,line_end:445|char_star:12,char_end:22"->"@app.route('/zzz_post', methods=['POST'])\n            def aaa_post():\n                pass,type='decorated_definition'\nline_star:441,line_end:443|char_star:12,char_end:20";
"@app.route('/zzz_post', methods=['POST']),type='decorator'\nline_star:441,line_end:441|char_star:12,char_end:53"[shape="box",fillcolor="white",style=filled];
"@app.route('/zzz_post', methods=['POST'])\n            def aaa_post():\n                pass,type='decorated_definition'\nline_star:441,line_end:443|char_star:12,char_end:20"->"@app.route('/zzz_post', methods=['POST']),type='decorator'\nline_star:441,line_end:441|char_star:12,char_end:53";
"def aaa_post():\n                pass,type='function_definition'\nline_star:442,line_end:443|char_star:12,char_end:20"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.route('/zzz_post', methods=['POST'])\n            def aaa_post():\n                pass,type='decorated_definition'\nline_star:441,line_end:443|char_star:12,char_end:20"->"def aaa_post():\n                pass,type='function_definition'\nline_star:442,line_end:443|char_star:12,char_end:20";
"aaa_post,type='identifier'\nline_star:442,line_end:442|char_star:16,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"def aaa_post():\n                pass,type='function_definition'\nline_star:442,line_end:443|char_star:12,char_end:20"->"aaa_post,type='identifier'\nline_star:442,line_end:442|char_star:16,char_end:24";
"type='INFORMATION BLOCK'\nline_star:443,line_end:443|char_star:16,char_end:20"[shape="point",fillcolor="#121013",style=filled];
"def aaa_post():\n                pass,type='function_definition'\nline_star:442,line_end:443|char_star:12,char_end:20"->"type='INFORMATION BLOCK'\nline_star:443,line_end:443|char_star:16,char_end:20";
"pass,type='pass_statement'\nline_star:443,line_end:443|char_star:16,char_end:20"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:443,line_end:443|char_star:16,char_end:20"->"pass,type='pass_statement'\nline_star:443,line_end:443|char_star:16,char_end:20";
"pass,type='pass'\nline_star:443,line_end:443|char_star:16,char_end:20"[shape="box",fillcolor="white",style=filled];
"pass,type='pass_statement'\nline_star:443,line_end:443|char_star:16,char_end:20"->"pass,type='pass'\nline_star:443,line_end:443|char_star:16,char_end:20";
"return app,type='return_statement'\nline_star:445,line_end:445|char_star:12,char_end:22"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:434,line_end:445|char_star:12,char_end:22"->"return app,type='return_statement'\nline_star:445,line_end:445|char_star:12,char_end:22";
"return partial(runner.invoke, cli),type='return_statement'\nline_star:448,line_end:448|char_star:8,char_end:42"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:433,line_end:448|char_star:8,char_end:42"->"return partial(runner.invoke, cli),type='return_statement'\nline_star:448,line_end:448|char_star:8,char_end:42";
"@pytest.fixture\n    def invoke_no_routes(self, runner):\n        def create_app():\n            app = Flask(__name__, static_folder=None)\n            app.testing = True\n\n            return app\n\n        cli = FlaskGroup(create_app=create_app)\n        return partial(runner.invoke, cli),type='decorated_definition'\nline_star:450,line_end:459|char_star:4,char_end:42"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:431,line_end:498|char_star:4,char_end:60"->"@pytest.fixture\n    def invoke_no_routes(self, runner):\n        def create_app():\n            app = Flask(__name__, static_folder=None)\n            app.testing = True\n\n            return app\n\n        cli = FlaskGroup(create_app=create_app)\n        return partial(runner.invoke, cli),type='decorated_definition'\nline_star:450,line_end:459|char_star:4,char_end:42";
"@pytest.fixture,type='decorator'\nline_star:450,line_end:450|char_star:4,char_end:19"[shape="box",fillcolor="white",style=filled];
"@pytest.fixture\n    def invoke_no_routes(self, runner):\n        def create_app():\n            app = Flask(__name__, static_folder=None)\n            app.testing = True\n\n            return app\n\n        cli = FlaskGroup(create_app=create_app)\n        return partial(runner.invoke, cli),type='decorated_definition'\nline_star:450,line_end:459|char_star:4,char_end:42"->"@pytest.fixture,type='decorator'\nline_star:450,line_end:450|char_star:4,char_end:19";
"def invoke_no_routes(self, runner):\n        def create_app():\n            app = Flask(__name__, static_folder=None)\n            app.testing = True\n\n            return app\n\n        cli = FlaskGroup(create_app=create_app)\n        return partial(runner.invoke, cli),type='function_definition'\nline_star:451,line_end:459|char_star:4,char_end:42"[shape="box",fillcolor="#cee6b4",style=filled];
"@pytest.fixture\n    def invoke_no_routes(self, runner):\n        def create_app():\n            app = Flask(__name__, static_folder=None)\n            app.testing = True\n\n            return app\n\n        cli = FlaskGroup(create_app=create_app)\n        return partial(runner.invoke, cli),type='decorated_definition'\nline_star:450,line_end:459|char_star:4,char_end:42"->"def invoke_no_routes(self, runner):\n        def create_app():\n            app = Flask(__name__, static_folder=None)\n            app.testing = True\n\n            return app\n\n        cli = FlaskGroup(create_app=create_app)\n        return partial(runner.invoke, cli),type='function_definition'\nline_star:451,line_end:459|char_star:4,char_end:42";
"invoke_no_routes,type='identifier'\nline_star:451,line_end:451|char_star:8,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"def invoke_no_routes(self, runner):\n        def create_app():\n            app = Flask(__name__, static_folder=None)\n            app.testing = True\n\n            return app\n\n        cli = FlaskGroup(create_app=create_app)\n        return partial(runner.invoke, cli),type='function_definition'\nline_star:451,line_end:459|char_star:4,char_end:42"->"invoke_no_routes,type='identifier'\nline_star:451,line_end:451|char_star:8,char_end:24";
"(self, runner),type='parameters'\nline_star:451,line_end:451|char_star:24,char_end:38"[shape="box",fillcolor="white",style=filled];
"def invoke_no_routes(self, runner):\n        def create_app():\n            app = Flask(__name__, static_folder=None)\n            app.testing = True\n\n            return app\n\n        cli = FlaskGroup(create_app=create_app)\n        return partial(runner.invoke, cli),type='function_definition'\nline_star:451,line_end:459|char_star:4,char_end:42"->"(self, runner),type='parameters'\nline_star:451,line_end:451|char_star:24,char_end:38";
"self,type='identifier'\nline_star:451,line_end:451|char_star:25,char_end:29"[shape="point",fillcolor="#121013",style=filled];
"(self, runner),type='parameters'\nline_star:451,line_end:451|char_star:24,char_end:38"->"self,type='identifier'\nline_star:451,line_end:451|char_star:25,char_end:29";
"runner,type='identifier'\nline_star:451,line_end:451|char_star:31,char_end:37"[shape="point",fillcolor="#121013",style=filled];
"(self, runner),type='parameters'\nline_star:451,line_end:451|char_star:24,char_end:38"->"runner,type='identifier'\nline_star:451,line_end:451|char_star:31,char_end:37";
"type='INFORMATION BLOCK'\nline_star:452,line_end:459|char_star:8,char_end:42"[shape="point",fillcolor="#121013",style=filled];
"def invoke_no_routes(self, runner):\n        def create_app():\n            app = Flask(__name__, static_folder=None)\n            app.testing = True\n\n            return app\n\n        cli = FlaskGroup(create_app=create_app)\n        return partial(runner.invoke, cli),type='function_definition'\nline_star:451,line_end:459|char_star:4,char_end:42"->"type='INFORMATION BLOCK'\nline_star:452,line_end:459|char_star:8,char_end:42";
"def create_app():\n            app = Flask(__name__, static_folder=None)\n            app.testing = True\n\n            return app,type='function_definition'\nline_star:452,line_end:456|char_star:8,char_end:22"[shape="box",fillcolor="#cee6b4",style=filled];
"type='INFORMATION BLOCK'\nline_star:452,line_end:459|char_star:8,char_end:42"->"def create_app():\n            app = Flask(__name__, static_folder=None)\n            app.testing = True\n\n            return app,type='function_definition'\nline_star:452,line_end:456|char_star:8,char_end:22";
"create_app,type='identifier'\nline_star:452,line_end:452|char_star:12,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"def create_app():\n            app = Flask(__name__, static_folder=None)\n            app.testing = True\n\n            return app,type='function_definition'\nline_star:452,line_end:456|char_star:8,char_end:22"->"create_app,type='identifier'\nline_star:452,line_end:452|char_star:12,char_end:22";
"type='INFORMATION BLOCK'\nline_star:453,line_end:456|char_star:12,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"def create_app():\n            app = Flask(__name__, static_folder=None)\n            app.testing = True\n\n            return app,type='function_definition'\nline_star:452,line_end:456|char_star:8,char_end:22"->"type='INFORMATION BLOCK'\nline_star:453,line_end:456|char_star:12,char_end:22";
"return app,type='return_statement'\nline_star:456,line_end:456|char_star:12,char_end:22"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:453,line_end:456|char_star:12,char_end:22"->"return app,type='return_statement'\nline_star:456,line_end:456|char_star:12,char_end:22";
"return partial(runner.invoke, cli),type='return_statement'\nline_star:459,line_end:459|char_star:8,char_end:42"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:452,line_end:459|char_star:8,char_end:42"->"return partial(runner.invoke, cli),type='return_statement'\nline_star:459,line_end:459|char_star:8,char_end:42";
"def expect_order(self, order, output):\n        # skip the header and match the start of each row\n        for expect, line in zip(order, output.splitlines()[2:]):\n            # do this instead of startswith for nicer pytest output\n            assert line[: len(expect)] == expect,type='function_definition'\nline_star:461,line_end:465|char_star:4,char_end:48"[shape="box",fillcolor="#cee6b4",style=filled];
"type='INFORMATION BLOCK'\nline_star:431,line_end:498|char_star:4,char_end:60"->"def expect_order(self, order, output):\n        # skip the header and match the start of each row\n        for expect, line in zip(order, output.splitlines()[2:]):\n            # do this instead of startswith for nicer pytest output\n            assert line[: len(expect)] == expect,type='function_definition'\nline_star:461,line_end:465|char_star:4,char_end:48";
"expect_order,type='identifier'\nline_star:461,line_end:461|char_star:8,char_end:20"[shape="point",fillcolor="#121013",style=filled];
"def expect_order(self, order, output):\n        # skip the header and match the start of each row\n        for expect, line in zip(order, output.splitlines()[2:]):\n            # do this instead of startswith for nicer pytest output\n            assert line[: len(expect)] == expect,type='function_definition'\nline_star:461,line_end:465|char_star:4,char_end:48"->"expect_order,type='identifier'\nline_star:461,line_end:461|char_star:8,char_end:20";
"(self, order, output),type='parameters'\nline_star:461,line_end:461|char_star:20,char_end:41"[shape="box",fillcolor="white",style=filled];
"def expect_order(self, order, output):\n        # skip the header and match the start of each row\n        for expect, line in zip(order, output.splitlines()[2:]):\n            # do this instead of startswith for nicer pytest output\n            assert line[: len(expect)] == expect,type='function_definition'\nline_star:461,line_end:465|char_star:4,char_end:48"->"(self, order, output),type='parameters'\nline_star:461,line_end:461|char_star:20,char_end:41";
"self,type='identifier'\nline_star:461,line_end:461|char_star:21,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"(self, order, output),type='parameters'\nline_star:461,line_end:461|char_star:20,char_end:41"->"self,type='identifier'\nline_star:461,line_end:461|char_star:21,char_end:25";
"order,type='identifier'\nline_star:461,line_end:461|char_star:27,char_end:32"[shape="point",fillcolor="#121013",style=filled];
"(self, order, output),type='parameters'\nline_star:461,line_end:461|char_star:20,char_end:41"->"order,type='identifier'\nline_star:461,line_end:461|char_star:27,char_end:32";
"output,type='identifier'\nline_star:461,line_end:461|char_star:34,char_end:40"[shape="point",fillcolor="#121013",style=filled];
"(self, order, output),type='parameters'\nline_star:461,line_end:461|char_star:20,char_end:41"->"output,type='identifier'\nline_star:461,line_end:461|char_star:34,char_end:40";
"# skip the header and match the start of each row,type='comment'\nline_star:462,line_end:462|char_star:8,char_end:57"[shape="box",fillcolor="#f0c929",style=filled];
"def expect_order(self, order, output):\n        # skip the header and match the start of each row\n        for expect, line in zip(order, output.splitlines()[2:]):\n            # do this instead of startswith for nicer pytest output\n            assert line[: len(expect)] == expect,type='function_definition'\nline_star:461,line_end:465|char_star:4,char_end:48"->"# skip the header and match the start of each row,type='comment'\nline_star:462,line_end:462|char_star:8,char_end:57";
"type='INFORMATION BLOCK'\nline_star:463,line_end:465|char_star:8,char_end:48"[shape="point",fillcolor="#121013",style=filled];
"def expect_order(self, order, output):\n        # skip the header and match the start of each row\n        for expect, line in zip(order, output.splitlines()[2:]):\n            # do this instead of startswith for nicer pytest output\n            assert line[: len(expect)] == expect,type='function_definition'\nline_star:461,line_end:465|char_star:4,char_end:48"->"type='INFORMATION BLOCK'\nline_star:463,line_end:465|char_star:8,char_end:48";
"for expect, line in zip(order, output.splitlines()[2:]):\n            # do this instead of startswith for nicer pytest output\n            assert line[: len(expect)] == expect,type='for_statement'\nline_star:463,line_end:465|char_star:8,char_end:48"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:463,line_end:465|char_star:8,char_end:48"->"for expect, line in zip(order, output.splitlines()[2:]):\n            # do this instead of startswith for nicer pytest output\n            assert line[: len(expect)] == expect,type='for_statement'\nline_star:463,line_end:465|char_star:8,char_end:48";
"def test_simple(self, invoke):\n        result = invoke(['routes'])\n        assert result.exit_code == 0\n        self.expect_order(['aaa_post', 'static', 'yyy_get_post'], result.output),type='function_definition'\nline_star:467,line_end:470|char_star:4,char_end:80"[shape="box",fillcolor="#cee6b4",style=filled];
"type='INFORMATION BLOCK'\nline_star:431,line_end:498|char_star:4,char_end:60"->"def test_simple(self, invoke):\n        result = invoke(['routes'])\n        assert result.exit_code == 0\n        self.expect_order(['aaa_post', 'static', 'yyy_get_post'], result.output),type='function_definition'\nline_star:467,line_end:470|char_star:4,char_end:80";
"test_simple,type='identifier'\nline_star:467,line_end:467|char_star:8,char_end:19"[shape="point",fillcolor="#121013",style=filled];
"def test_simple(self, invoke):\n        result = invoke(['routes'])\n        assert result.exit_code == 0\n        self.expect_order(['aaa_post', 'static', 'yyy_get_post'], result.output),type='function_definition'\nline_star:467,line_end:470|char_star:4,char_end:80"->"test_simple,type='identifier'\nline_star:467,line_end:467|char_star:8,char_end:19";
"(self, invoke),type='parameters'\nline_star:467,line_end:467|char_star:19,char_end:33"[shape="box",fillcolor="white",style=filled];
"def test_simple(self, invoke):\n        result = invoke(['routes'])\n        assert result.exit_code == 0\n        self.expect_order(['aaa_post', 'static', 'yyy_get_post'], result.output),type='function_definition'\nline_star:467,line_end:470|char_star:4,char_end:80"->"(self, invoke),type='parameters'\nline_star:467,line_end:467|char_star:19,char_end:33";
"self,type='identifier'\nline_star:467,line_end:467|char_star:20,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"(self, invoke),type='parameters'\nline_star:467,line_end:467|char_star:19,char_end:33"->"self,type='identifier'\nline_star:467,line_end:467|char_star:20,char_end:24";
"invoke,type='identifier'\nline_star:467,line_end:467|char_star:26,char_end:32"[shape="point",fillcolor="#121013",style=filled];
"(self, invoke),type='parameters'\nline_star:467,line_end:467|char_star:19,char_end:33"->"invoke,type='identifier'\nline_star:467,line_end:467|char_star:26,char_end:32";
"type='INFORMATION BLOCK'\nline_star:468,line_end:470|char_star:8,char_end:80"[shape="point",fillcolor="#121013",style=filled];
"def test_simple(self, invoke):\n        result = invoke(['routes'])\n        assert result.exit_code == 0\n        self.expect_order(['aaa_post', 'static', 'yyy_get_post'], result.output),type='function_definition'\nline_star:467,line_end:470|char_star:4,char_end:80"->"type='INFORMATION BLOCK'\nline_star:468,line_end:470|char_star:8,char_end:80";
"assert result.exit_code == 0,type='assert_statement'\nline_star:469,line_end:469|char_star:8,char_end:36"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:468,line_end:470|char_star:8,char_end:80"->"assert result.exit_code == 0,type='assert_statement'\nline_star:469,line_end:469|char_star:8,char_end:36";
"result.exit_code == 0,type='comparison_operator'\nline_star:469,line_end:469|char_star:15,char_end:36"[shape="box",fillcolor="white",style=filled];
"assert result.exit_code == 0,type='assert_statement'\nline_star:469,line_end:469|char_star:8,char_end:36"->"result.exit_code == 0,type='comparison_operator'\nline_star:469,line_end:469|char_star:15,char_end:36";
"result.exit_code,type='attribute'\nline_star:469,line_end:469|char_star:15,char_end:31"[shape="box",fillcolor="white",style=filled];
"result.exit_code == 0,type='comparison_operator'\nline_star:469,line_end:469|char_star:15,char_end:36"->"result.exit_code,type='attribute'\nline_star:469,line_end:469|char_star:15,char_end:31";
"result,type='identifier'\nline_star:469,line_end:469|char_star:15,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"result.exit_code,type='attribute'\nline_star:469,line_end:469|char_star:15,char_end:31"->"result,type='identifier'\nline_star:469,line_end:469|char_star:15,char_end:21";
"exit_code,type='identifier'\nline_star:469,line_end:469|char_star:22,char_end:31"[shape="point",fillcolor="#121013",style=filled];
"result.exit_code,type='attribute'\nline_star:469,line_end:469|char_star:15,char_end:31"->"exit_code,type='identifier'\nline_star:469,line_end:469|char_star:22,char_end:31";
"def test_sort(self, invoke):\n        default_output = invoke(['routes']).output\n        endpoint_output = invoke(['routes', '-s', 'endpoint']).output\n        assert default_output == endpoint_output\n        self.expect_order(\n            ['static', 'yyy_get_post', 'aaa_post'],\n            invoke(['routes', '-s', 'methods']).output,\n        )\n        self.expect_order(\n            ['yyy_get_post', 'static', 'aaa_post'],\n            invoke(['routes', '-s', 'rule']).output,\n        )\n        self.expect_order(\n            ['aaa_post', 'yyy_get_post', 'static'],\n            invoke(['routes', '-s', 'match']).output,\n        ),type='function_definition'\nline_star:472,line_end:487|char_star:4,char_end:9"[shape="box",fillcolor="#cee6b4",style=filled];
"type='INFORMATION BLOCK'\nline_star:431,line_end:498|char_star:4,char_end:60"->"def test_sort(self, invoke):\n        default_output = invoke(['routes']).output\n        endpoint_output = invoke(['routes', '-s', 'endpoint']).output\n        assert default_output == endpoint_output\n        self.expect_order(\n            ['static', 'yyy_get_post', 'aaa_post'],\n            invoke(['routes', '-s', 'methods']).output,\n        )\n        self.expect_order(\n            ['yyy_get_post', 'static', 'aaa_post'],\n            invoke(['routes', '-s', 'rule']).output,\n        )\n        self.expect_order(\n            ['aaa_post', 'yyy_get_post', 'static'],\n            invoke(['routes', '-s', 'match']).output,\n        ),type='function_definition'\nline_star:472,line_end:487|char_star:4,char_end:9";
"test_sort,type='identifier'\nline_star:472,line_end:472|char_star:8,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"def test_sort(self, invoke):\n        default_output = invoke(['routes']).output\n        endpoint_output = invoke(['routes', '-s', 'endpoint']).output\n        assert default_output == endpoint_output\n        self.expect_order(\n            ['static', 'yyy_get_post', 'aaa_post'],\n            invoke(['routes', '-s', 'methods']).output,\n        )\n        self.expect_order(\n            ['yyy_get_post', 'static', 'aaa_post'],\n            invoke(['routes', '-s', 'rule']).output,\n        )\n        self.expect_order(\n            ['aaa_post', 'yyy_get_post', 'static'],\n            invoke(['routes', '-s', 'match']).output,\n        ),type='function_definition'\nline_star:472,line_end:487|char_star:4,char_end:9"->"test_sort,type='identifier'\nline_star:472,line_end:472|char_star:8,char_end:17";
"(self, invoke),type='parameters'\nline_star:472,line_end:472|char_star:17,char_end:31"[shape="box",fillcolor="white",style=filled];
"def test_sort(self, invoke):\n        default_output = invoke(['routes']).output\n        endpoint_output = invoke(['routes', '-s', 'endpoint']).output\n        assert default_output == endpoint_output\n        self.expect_order(\n            ['static', 'yyy_get_post', 'aaa_post'],\n            invoke(['routes', '-s', 'methods']).output,\n        )\n        self.expect_order(\n            ['yyy_get_post', 'static', 'aaa_post'],\n            invoke(['routes', '-s', 'rule']).output,\n        )\n        self.expect_order(\n            ['aaa_post', 'yyy_get_post', 'static'],\n            invoke(['routes', '-s', 'match']).output,\n        ),type='function_definition'\nline_star:472,line_end:487|char_star:4,char_end:9"->"(self, invoke),type='parameters'\nline_star:472,line_end:472|char_star:17,char_end:31";
"self,type='identifier'\nline_star:472,line_end:472|char_star:18,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"(self, invoke),type='parameters'\nline_star:472,line_end:472|char_star:17,char_end:31"->"self,type='identifier'\nline_star:472,line_end:472|char_star:18,char_end:22";
"invoke,type='identifier'\nline_star:472,line_end:472|char_star:24,char_end:30"[shape="point",fillcolor="#121013",style=filled];
"(self, invoke),type='parameters'\nline_star:472,line_end:472|char_star:17,char_end:31"->"invoke,type='identifier'\nline_star:472,line_end:472|char_star:24,char_end:30";
"type='INFORMATION BLOCK'\nline_star:473,line_end:487|char_star:8,char_end:9"[shape="point",fillcolor="#121013",style=filled];
"def test_sort(self, invoke):\n        default_output = invoke(['routes']).output\n        endpoint_output = invoke(['routes', '-s', 'endpoint']).output\n        assert default_output == endpoint_output\n        self.expect_order(\n            ['static', 'yyy_get_post', 'aaa_post'],\n            invoke(['routes', '-s', 'methods']).output,\n        )\n        self.expect_order(\n            ['yyy_get_post', 'static', 'aaa_post'],\n            invoke(['routes', '-s', 'rule']).output,\n        )\n        self.expect_order(\n            ['aaa_post', 'yyy_get_post', 'static'],\n            invoke(['routes', '-s', 'match']).output,\n        ),type='function_definition'\nline_star:472,line_end:487|char_star:4,char_end:9"->"type='INFORMATION BLOCK'\nline_star:473,line_end:487|char_star:8,char_end:9";
"assert default_output == endpoint_output,type='assert_statement'\nline_star:475,line_end:475|char_star:8,char_end:48"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:473,line_end:487|char_star:8,char_end:9"->"assert default_output == endpoint_output,type='assert_statement'\nline_star:475,line_end:475|char_star:8,char_end:48";
"default_output == endpoint_output,type='comparison_operator'\nline_star:475,line_end:475|char_star:15,char_end:48"[shape="box",fillcolor="white",style=filled];
"assert default_output == endpoint_output,type='assert_statement'\nline_star:475,line_end:475|char_star:8,char_end:48"->"default_output == endpoint_output,type='comparison_operator'\nline_star:475,line_end:475|char_star:15,char_end:48";
"default_output,type='identifier'\nline_star:475,line_end:475|char_star:15,char_end:29"[shape="point",fillcolor="#121013",style=filled];
"default_output == endpoint_output,type='comparison_operator'\nline_star:475,line_end:475|char_star:15,char_end:48"->"default_output,type='identifier'\nline_star:475,line_end:475|char_star:15,char_end:29";
"endpoint_output,type='identifier'\nline_star:475,line_end:475|char_star:33,char_end:48"[shape="point",fillcolor="#121013",style=filled];
"default_output == endpoint_output,type='comparison_operator'\nline_star:475,line_end:475|char_star:15,char_end:48"->"endpoint_output,type='identifier'\nline_star:475,line_end:475|char_star:33,char_end:48";
"def test_all_methods(self, invoke):\n        output = invoke(['routes']).output\n        assert 'GET, HEAD, OPTIONS, POST' not in output\n        output = invoke(['routes', '--all-methods']).output\n        assert 'GET, HEAD, OPTIONS, POST' in output,type='function_definition'\nline_star:489,line_end:493|char_star:4,char_end:51"[shape="box",fillcolor="#cee6b4",style=filled];
"type='INFORMATION BLOCK'\nline_star:431,line_end:498|char_star:4,char_end:60"->"def test_all_methods(self, invoke):\n        output = invoke(['routes']).output\n        assert 'GET, HEAD, OPTIONS, POST' not in output\n        output = invoke(['routes', '--all-methods']).output\n        assert 'GET, HEAD, OPTIONS, POST' in output,type='function_definition'\nline_star:489,line_end:493|char_star:4,char_end:51";
"test_all_methods,type='identifier'\nline_star:489,line_end:489|char_star:8,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"def test_all_methods(self, invoke):\n        output = invoke(['routes']).output\n        assert 'GET, HEAD, OPTIONS, POST' not in output\n        output = invoke(['routes', '--all-methods']).output\n        assert 'GET, HEAD, OPTIONS, POST' in output,type='function_definition'\nline_star:489,line_end:493|char_star:4,char_end:51"->"test_all_methods,type='identifier'\nline_star:489,line_end:489|char_star:8,char_end:24";
"(self, invoke),type='parameters'\nline_star:489,line_end:489|char_star:24,char_end:38"[shape="box",fillcolor="white",style=filled];
"def test_all_methods(self, invoke):\n        output = invoke(['routes']).output\n        assert 'GET, HEAD, OPTIONS, POST' not in output\n        output = invoke(['routes', '--all-methods']).output\n        assert 'GET, HEAD, OPTIONS, POST' in output,type='function_definition'\nline_star:489,line_end:493|char_star:4,char_end:51"->"(self, invoke),type='parameters'\nline_star:489,line_end:489|char_star:24,char_end:38";
"self,type='identifier'\nline_star:489,line_end:489|char_star:25,char_end:29"[shape="point",fillcolor="#121013",style=filled];
"(self, invoke),type='parameters'\nline_star:489,line_end:489|char_star:24,char_end:38"->"self,type='identifier'\nline_star:489,line_end:489|char_star:25,char_end:29";
"invoke,type='identifier'\nline_star:489,line_end:489|char_star:31,char_end:37"[shape="point",fillcolor="#121013",style=filled];
"(self, invoke),type='parameters'\nline_star:489,line_end:489|char_star:24,char_end:38"->"invoke,type='identifier'\nline_star:489,line_end:489|char_star:31,char_end:37";
"type='INFORMATION BLOCK'\nline_star:490,line_end:493|char_star:8,char_end:51"[shape="point",fillcolor="#121013",style=filled];
"def test_all_methods(self, invoke):\n        output = invoke(['routes']).output\n        assert 'GET, HEAD, OPTIONS, POST' not in output\n        output = invoke(['routes', '--all-methods']).output\n        assert 'GET, HEAD, OPTIONS, POST' in output,type='function_definition'\nline_star:489,line_end:493|char_star:4,char_end:51"->"type='INFORMATION BLOCK'\nline_star:490,line_end:493|char_star:8,char_end:51";
"assert 'GET, HEAD, OPTIONS, POST' not in output,type='assert_statement'\nline_star:491,line_end:491|char_star:8,char_end:55"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:490,line_end:493|char_star:8,char_end:51"->"assert 'GET, HEAD, OPTIONS, POST' not in output,type='assert_statement'\nline_star:491,line_end:491|char_star:8,char_end:55";
"'GET, HEAD, OPTIONS, POST' not in output,type='comparison_operator'\nline_star:491,line_end:491|char_star:15,char_end:55"[shape="box",fillcolor="white",style=filled];
"assert 'GET, HEAD, OPTIONS, POST' not in output,type='assert_statement'\nline_star:491,line_end:491|char_star:8,char_end:55"->"'GET, HEAD, OPTIONS, POST' not in output,type='comparison_operator'\nline_star:491,line_end:491|char_star:15,char_end:55";
"output,type='identifier'\nline_star:491,line_end:491|char_star:49,char_end:55"[shape="point",fillcolor="#121013",style=filled];
"'GET, HEAD, OPTIONS, POST' not in output,type='comparison_operator'\nline_star:491,line_end:491|char_star:15,char_end:55"->"output,type='identifier'\nline_star:491,line_end:491|char_star:49,char_end:55";
"assert 'GET, HEAD, OPTIONS, POST' in output,type='assert_statement'\nline_star:493,line_end:493|char_star:8,char_end:51"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:490,line_end:493|char_star:8,char_end:51"->"assert 'GET, HEAD, OPTIONS, POST' in output,type='assert_statement'\nline_star:493,line_end:493|char_star:8,char_end:51";
"'GET, HEAD, OPTIONS, POST' in output,type='comparison_operator'\nline_star:493,line_end:493|char_star:15,char_end:51"[shape="box",fillcolor="white",style=filled];
"assert 'GET, HEAD, OPTIONS, POST' in output,type='assert_statement'\nline_star:493,line_end:493|char_star:8,char_end:51"->"'GET, HEAD, OPTIONS, POST' in output,type='comparison_operator'\nline_star:493,line_end:493|char_star:15,char_end:51";
"output,type='identifier'\nline_star:493,line_end:493|char_star:45,char_end:51"[shape="point",fillcolor="#121013",style=filled];
"'GET, HEAD, OPTIONS, POST' in output,type='comparison_operator'\nline_star:493,line_end:493|char_star:15,char_end:51"->"output,type='identifier'\nline_star:493,line_end:493|char_star:45,char_end:51";
"def test_no_routes(self, invoke_no_routes):\n        result = invoke_no_routes(['routes'])\n        assert result.exit_code == 0\n        assert 'No routes were registered.' in result.output,type='function_definition'\nline_star:495,line_end:498|char_star:4,char_end:60"[shape="box",fillcolor="#cee6b4",style=filled];
"type='INFORMATION BLOCK'\nline_star:431,line_end:498|char_star:4,char_end:60"->"def test_no_routes(self, invoke_no_routes):\n        result = invoke_no_routes(['routes'])\n        assert result.exit_code == 0\n        assert 'No routes were registered.' in result.output,type='function_definition'\nline_star:495,line_end:498|char_star:4,char_end:60";
"test_no_routes,type='identifier'\nline_star:495,line_end:495|char_star:8,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"def test_no_routes(self, invoke_no_routes):\n        result = invoke_no_routes(['routes'])\n        assert result.exit_code == 0\n        assert 'No routes were registered.' in result.output,type='function_definition'\nline_star:495,line_end:498|char_star:4,char_end:60"->"test_no_routes,type='identifier'\nline_star:495,line_end:495|char_star:8,char_end:22";
"(self, invoke_no_routes),type='parameters'\nline_star:495,line_end:495|char_star:22,char_end:46"[shape="box",fillcolor="white",style=filled];
"def test_no_routes(self, invoke_no_routes):\n        result = invoke_no_routes(['routes'])\n        assert result.exit_code == 0\n        assert 'No routes were registered.' in result.output,type='function_definition'\nline_star:495,line_end:498|char_star:4,char_end:60"->"(self, invoke_no_routes),type='parameters'\nline_star:495,line_end:495|char_star:22,char_end:46";
"self,type='identifier'\nline_star:495,line_end:495|char_star:23,char_end:27"[shape="point",fillcolor="#121013",style=filled];
"(self, invoke_no_routes),type='parameters'\nline_star:495,line_end:495|char_star:22,char_end:46"->"self,type='identifier'\nline_star:495,line_end:495|char_star:23,char_end:27";
"invoke_no_routes,type='identifier'\nline_star:495,line_end:495|char_star:29,char_end:45"[shape="point",fillcolor="#121013",style=filled];
"(self, invoke_no_routes),type='parameters'\nline_star:495,line_end:495|char_star:22,char_end:46"->"invoke_no_routes,type='identifier'\nline_star:495,line_end:495|char_star:29,char_end:45";
"type='INFORMATION BLOCK'\nline_star:496,line_end:498|char_star:8,char_end:60"[shape="point",fillcolor="#121013",style=filled];
"def test_no_routes(self, invoke_no_routes):\n        result = invoke_no_routes(['routes'])\n        assert result.exit_code == 0\n        assert 'No routes were registered.' in result.output,type='function_definition'\nline_star:495,line_end:498|char_star:4,char_end:60"->"type='INFORMATION BLOCK'\nline_star:496,line_end:498|char_star:8,char_end:60";
"assert result.exit_code == 0,type='assert_statement'\nline_star:497,line_end:497|char_star:8,char_end:36"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:496,line_end:498|char_star:8,char_end:60"->"assert result.exit_code == 0,type='assert_statement'\nline_star:497,line_end:497|char_star:8,char_end:36";
"result.exit_code == 0,type='comparison_operator'\nline_star:497,line_end:497|char_star:15,char_end:36"[shape="box",fillcolor="white",style=filled];
"assert result.exit_code == 0,type='assert_statement'\nline_star:497,line_end:497|char_star:8,char_end:36"->"result.exit_code == 0,type='comparison_operator'\nline_star:497,line_end:497|char_star:15,char_end:36";
"result.exit_code,type='attribute'\nline_star:497,line_end:497|char_star:15,char_end:31"[shape="box",fillcolor="white",style=filled];
"result.exit_code == 0,type='comparison_operator'\nline_star:497,line_end:497|char_star:15,char_end:36"->"result.exit_code,type='attribute'\nline_star:497,line_end:497|char_star:15,char_end:31";
"result,type='identifier'\nline_star:497,line_end:497|char_star:15,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"result.exit_code,type='attribute'\nline_star:497,line_end:497|char_star:15,char_end:31"->"result,type='identifier'\nline_star:497,line_end:497|char_star:15,char_end:21";
"exit_code,type='identifier'\nline_star:497,line_end:497|char_star:22,char_end:31"[shape="point",fillcolor="#121013",style=filled];
"result.exit_code,type='attribute'\nline_star:497,line_end:497|char_star:15,char_end:31"->"exit_code,type='identifier'\nline_star:497,line_end:497|char_star:22,char_end:31";
"assert 'No routes were registered.' in result.output,type='assert_statement'\nline_star:498,line_end:498|char_star:8,char_end:60"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:496,line_end:498|char_star:8,char_end:60"->"assert 'No routes were registered.' in result.output,type='assert_statement'\nline_star:498,line_end:498|char_star:8,char_end:60";
"'No routes were registered.' in result.output,type='comparison_operator'\nline_star:498,line_end:498|char_star:15,char_end:60"[shape="box",fillcolor="white",style=filled];
"assert 'No routes were registered.' in result.output,type='assert_statement'\nline_star:498,line_end:498|char_star:8,char_end:60"->"'No routes were registered.' in result.output,type='comparison_operator'\nline_star:498,line_end:498|char_star:15,char_end:60";
"result.output,type='attribute'\nline_star:498,line_end:498|char_star:47,char_end:60"[shape="box",fillcolor="white",style=filled];
"'No routes were registered.' in result.output,type='comparison_operator'\nline_star:498,line_end:498|char_star:15,char_end:60"->"result.output,type='attribute'\nline_star:498,line_end:498|char_star:47,char_end:60";
"result,type='identifier'\nline_star:498,line_end:498|char_star:47,char_end:53"[shape="point",fillcolor="#121013",style=filled];
"result.output,type='attribute'\nline_star:498,line_end:498|char_star:47,char_end:60"->"result,type='identifier'\nline_star:498,line_end:498|char_star:47,char_end:53";
"output,type='identifier'\nline_star:498,line_end:498|char_star:54,char_end:60"[shape="point",fillcolor="#121013",style=filled];
"result.output,type='attribute'\nline_star:498,line_end:498|char_star:47,char_end:60"->"output,type='identifier'\nline_star:498,line_end:498|char_star:54,char_end:60";
"@need_dotenv\ndef test_load_dotenv(monkeypatch):\n    # can't use monkeypatch.delitem since the keys don't exist yet\n    for item in ('FOO', 'BAR', 'SPAM'):\n        monkeypatch._setitem.append((os.environ, item, notset))\n\n    monkeypatch.setenv('EGGS', '3')\n    monkeypatch.chdir(test_path)\n    assert load_dotenv()\n    assert os.getcwd() == test_path\n    # .flaskenv doesn't overwrite .env\n    assert os.environ['FOO'] == 'env'\n    # set only in .flaskenv\n    assert os.environ['BAR'] == 'bar'\n    # set only in .env\n    assert os.environ['SPAM'] == '1'\n    # set manually, files don't overwrite\n    assert os.environ['EGGS'] == '3'\n\n    # Non existent file should not load\n    assert not load_dotenv('non-existent-file'),type='decorated_definition'\nline_star:504,line_end:524|char_star:0,char_end:47"[shape="box",fillcolor="#c8c6a7",style=filled];
"MODULE"->"@need_dotenv\ndef test_load_dotenv(monkeypatch):\n    # can't use monkeypatch.delitem since the keys don't exist yet\n    for item in ('FOO', 'BAR', 'SPAM'):\n        monkeypatch._setitem.append((os.environ, item, notset))\n\n    monkeypatch.setenv('EGGS', '3')\n    monkeypatch.chdir(test_path)\n    assert load_dotenv()\n    assert os.getcwd() == test_path\n    # .flaskenv doesn't overwrite .env\n    assert os.environ['FOO'] == 'env'\n    # set only in .flaskenv\n    assert os.environ['BAR'] == 'bar'\n    # set only in .env\n    assert os.environ['SPAM'] == '1'\n    # set manually, files don't overwrite\n    assert os.environ['EGGS'] == '3'\n\n    # Non existent file should not load\n    assert not load_dotenv('non-existent-file'),type='decorated_definition'\nline_star:504,line_end:524|char_star:0,char_end:47";
"@need_dotenv,type='decorator'\nline_star:504,line_end:504|char_star:0,char_end:12"[shape="box",fillcolor="white",style=filled];
"@need_dotenv\ndef test_load_dotenv(monkeypatch):\n    # can't use monkeypatch.delitem since the keys don't exist yet\n    for item in ('FOO', 'BAR', 'SPAM'):\n        monkeypatch._setitem.append((os.environ, item, notset))\n\n    monkeypatch.setenv('EGGS', '3')\n    monkeypatch.chdir(test_path)\n    assert load_dotenv()\n    assert os.getcwd() == test_path\n    # .flaskenv doesn't overwrite .env\n    assert os.environ['FOO'] == 'env'\n    # set only in .flaskenv\n    assert os.environ['BAR'] == 'bar'\n    # set only in .env\n    assert os.environ['SPAM'] == '1'\n    # set manually, files don't overwrite\n    assert os.environ['EGGS'] == '3'\n\n    # Non existent file should not load\n    assert not load_dotenv('non-existent-file'),type='decorated_definition'\nline_star:504,line_end:524|char_star:0,char_end:47"->"@need_dotenv,type='decorator'\nline_star:504,line_end:504|char_star:0,char_end:12";
"def test_load_dotenv(monkeypatch):\n    # can't use monkeypatch.delitem since the keys don't exist yet\n    for item in ('FOO', 'BAR', 'SPAM'):\n        monkeypatch._setitem.append((os.environ, item, notset))\n\n    monkeypatch.setenv('EGGS', '3')\n    monkeypatch.chdir(test_path)\n    assert load_dotenv()\n    assert os.getcwd() == test_path\n    # .flaskenv doesn't overwrite .env\n    assert os.environ['FOO'] == 'env'\n    # set only in .flaskenv\n    assert os.environ['BAR'] == 'bar'\n    # set only in .env\n    assert os.environ['SPAM'] == '1'\n    # set manually, files don't overwrite\n    assert os.environ['EGGS'] == '3'\n\n    # Non existent file should not load\n    assert not load_dotenv('non-existent-file'),type='function_definition'\nline_star:505,line_end:524|char_star:0,char_end:47"[shape="box",fillcolor="#cee6b4",style=filled];
"@need_dotenv\ndef test_load_dotenv(monkeypatch):\n    # can't use monkeypatch.delitem since the keys don't exist yet\n    for item in ('FOO', 'BAR', 'SPAM'):\n        monkeypatch._setitem.append((os.environ, item, notset))\n\n    monkeypatch.setenv('EGGS', '3')\n    monkeypatch.chdir(test_path)\n    assert load_dotenv()\n    assert os.getcwd() == test_path\n    # .flaskenv doesn't overwrite .env\n    assert os.environ['FOO'] == 'env'\n    # set only in .flaskenv\n    assert os.environ['BAR'] == 'bar'\n    # set only in .env\n    assert os.environ['SPAM'] == '1'\n    # set manually, files don't overwrite\n    assert os.environ['EGGS'] == '3'\n\n    # Non existent file should not load\n    assert not load_dotenv('non-existent-file'),type='decorated_definition'\nline_star:504,line_end:524|char_star:0,char_end:47"->"def test_load_dotenv(monkeypatch):\n    # can't use monkeypatch.delitem since the keys don't exist yet\n    for item in ('FOO', 'BAR', 'SPAM'):\n        monkeypatch._setitem.append((os.environ, item, notset))\n\n    monkeypatch.setenv('EGGS', '3')\n    monkeypatch.chdir(test_path)\n    assert load_dotenv()\n    assert os.getcwd() == test_path\n    # .flaskenv doesn't overwrite .env\n    assert os.environ['FOO'] == 'env'\n    # set only in .flaskenv\n    assert os.environ['BAR'] == 'bar'\n    # set only in .env\n    assert os.environ['SPAM'] == '1'\n    # set manually, files don't overwrite\n    assert os.environ['EGGS'] == '3'\n\n    # Non existent file should not load\n    assert not load_dotenv('non-existent-file'),type='function_definition'\nline_star:505,line_end:524|char_star:0,char_end:47";
"test_load_dotenv,type='identifier'\nline_star:505,line_end:505|char_star:4,char_end:20"[shape="point",fillcolor="#121013",style=filled];
"def test_load_dotenv(monkeypatch):\n    # can't use monkeypatch.delitem since the keys don't exist yet\n    for item in ('FOO', 'BAR', 'SPAM'):\n        monkeypatch._setitem.append((os.environ, item, notset))\n\n    monkeypatch.setenv('EGGS', '3')\n    monkeypatch.chdir(test_path)\n    assert load_dotenv()\n    assert os.getcwd() == test_path\n    # .flaskenv doesn't overwrite .env\n    assert os.environ['FOO'] == 'env'\n    # set only in .flaskenv\n    assert os.environ['BAR'] == 'bar'\n    # set only in .env\n    assert os.environ['SPAM'] == '1'\n    # set manually, files don't overwrite\n    assert os.environ['EGGS'] == '3'\n\n    # Non existent file should not load\n    assert not load_dotenv('non-existent-file'),type='function_definition'\nline_star:505,line_end:524|char_star:0,char_end:47"->"test_load_dotenv,type='identifier'\nline_star:505,line_end:505|char_star:4,char_end:20";
"(monkeypatch),type='parameters'\nline_star:505,line_end:505|char_star:20,char_end:33"[shape="box",fillcolor="white",style=filled];
"def test_load_dotenv(monkeypatch):\n    # can't use monkeypatch.delitem since the keys don't exist yet\n    for item in ('FOO', 'BAR', 'SPAM'):\n        monkeypatch._setitem.append((os.environ, item, notset))\n\n    monkeypatch.setenv('EGGS', '3')\n    monkeypatch.chdir(test_path)\n    assert load_dotenv()\n    assert os.getcwd() == test_path\n    # .flaskenv doesn't overwrite .env\n    assert os.environ['FOO'] == 'env'\n    # set only in .flaskenv\n    assert os.environ['BAR'] == 'bar'\n    # set only in .env\n    assert os.environ['SPAM'] == '1'\n    # set manually, files don't overwrite\n    assert os.environ['EGGS'] == '3'\n\n    # Non existent file should not load\n    assert not load_dotenv('non-existent-file'),type='function_definition'\nline_star:505,line_end:524|char_star:0,char_end:47"->"(monkeypatch),type='parameters'\nline_star:505,line_end:505|char_star:20,char_end:33";
"monkeypatch,type='identifier'\nline_star:505,line_end:505|char_star:21,char_end:32"[shape="point",fillcolor="#121013",style=filled];
"(monkeypatch),type='parameters'\nline_star:505,line_end:505|char_star:20,char_end:33"->"monkeypatch,type='identifier'\nline_star:505,line_end:505|char_star:21,char_end:32";
"# can't use monkeypatch.delitem since the keys don't exist yet,type='comment'\nline_star:506,line_end:506|char_star:4,char_end:66"[shape="box",fillcolor="#f0c929",style=filled];
"def test_load_dotenv(monkeypatch):\n    # can't use monkeypatch.delitem since the keys don't exist yet\n    for item in ('FOO', 'BAR', 'SPAM'):\n        monkeypatch._setitem.append((os.environ, item, notset))\n\n    monkeypatch.setenv('EGGS', '3')\n    monkeypatch.chdir(test_path)\n    assert load_dotenv()\n    assert os.getcwd() == test_path\n    # .flaskenv doesn't overwrite .env\n    assert os.environ['FOO'] == 'env'\n    # set only in .flaskenv\n    assert os.environ['BAR'] == 'bar'\n    # set only in .env\n    assert os.environ['SPAM'] == '1'\n    # set manually, files don't overwrite\n    assert os.environ['EGGS'] == '3'\n\n    # Non existent file should not load\n    assert not load_dotenv('non-existent-file'),type='function_definition'\nline_star:505,line_end:524|char_star:0,char_end:47"->"# can't use monkeypatch.delitem since the keys don't exist yet,type='comment'\nline_star:506,line_end:506|char_star:4,char_end:66";
"type='INFORMATION BLOCK'\nline_star:507,line_end:524|char_star:4,char_end:47"[shape="point",fillcolor="#121013",style=filled];
"def test_load_dotenv(monkeypatch):\n    # can't use monkeypatch.delitem since the keys don't exist yet\n    for item in ('FOO', 'BAR', 'SPAM'):\n        monkeypatch._setitem.append((os.environ, item, notset))\n\n    monkeypatch.setenv('EGGS', '3')\n    monkeypatch.chdir(test_path)\n    assert load_dotenv()\n    assert os.getcwd() == test_path\n    # .flaskenv doesn't overwrite .env\n    assert os.environ['FOO'] == 'env'\n    # set only in .flaskenv\n    assert os.environ['BAR'] == 'bar'\n    # set only in .env\n    assert os.environ['SPAM'] == '1'\n    # set manually, files don't overwrite\n    assert os.environ['EGGS'] == '3'\n\n    # Non existent file should not load\n    assert not load_dotenv('non-existent-file'),type='function_definition'\nline_star:505,line_end:524|char_star:0,char_end:47"->"type='INFORMATION BLOCK'\nline_star:507,line_end:524|char_star:4,char_end:47";
"for item in ('FOO', 'BAR', 'SPAM'):\n        monkeypatch._setitem.append((os.environ, item, notset)),type='for_statement'\nline_star:507,line_end:508|char_star:4,char_end:63"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:507,line_end:524|char_star:4,char_end:47"->"for item in ('FOO', 'BAR', 'SPAM'):\n        monkeypatch._setitem.append((os.environ, item, notset)),type='for_statement'\nline_star:507,line_end:508|char_star:4,char_end:63";
"assert load_dotenv(),type='assert_statement'\nline_star:512,line_end:512|char_star:4,char_end:24"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:507,line_end:524|char_star:4,char_end:47"->"assert load_dotenv(),type='assert_statement'\nline_star:512,line_end:512|char_star:4,char_end:24";
"load_dotenv(),type='call'\nline_star:512,line_end:512|char_star:11,char_end:24"[shape="box",fillcolor="white",style=filled];
"assert load_dotenv(),type='assert_statement'\nline_star:512,line_end:512|char_star:4,char_end:24"->"load_dotenv(),type='call'\nline_star:512,line_end:512|char_star:11,char_end:24";
"load_dotenv,type='identifier'\nline_star:512,line_end:512|char_star:11,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"load_dotenv(),type='call'\nline_star:512,line_end:512|char_star:11,char_end:24"->"load_dotenv,type='identifier'\nline_star:512,line_end:512|char_star:11,char_end:22";
"assert os.getcwd() == test_path,type='assert_statement'\nline_star:513,line_end:513|char_star:4,char_end:35"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:507,line_end:524|char_star:4,char_end:47"->"assert os.getcwd() == test_path,type='assert_statement'\nline_star:513,line_end:513|char_star:4,char_end:35";
"os.getcwd() == test_path,type='comparison_operator'\nline_star:513,line_end:513|char_star:11,char_end:35"[shape="box",fillcolor="white",style=filled];
"assert os.getcwd() == test_path,type='assert_statement'\nline_star:513,line_end:513|char_star:4,char_end:35"->"os.getcwd() == test_path,type='comparison_operator'\nline_star:513,line_end:513|char_star:11,char_end:35";
"os.getcwd(),type='call'\nline_star:513,line_end:513|char_star:11,char_end:22"[shape="box",fillcolor="white",style=filled];
"os.getcwd() == test_path,type='comparison_operator'\nline_star:513,line_end:513|char_star:11,char_end:35"->"os.getcwd(),type='call'\nline_star:513,line_end:513|char_star:11,char_end:22";
"os.getcwd,type='attribute'\nline_star:513,line_end:513|char_star:11,char_end:20"[shape="box",fillcolor="white",style=filled];
"os.getcwd(),type='call'\nline_star:513,line_end:513|char_star:11,char_end:22"->"os.getcwd,type='attribute'\nline_star:513,line_end:513|char_star:11,char_end:20";
"os,type='identifier'\nline_star:513,line_end:513|char_star:11,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"os.getcwd,type='attribute'\nline_star:513,line_end:513|char_star:11,char_end:20"->"os,type='identifier'\nline_star:513,line_end:513|char_star:11,char_end:13";
"getcwd,type='identifier'\nline_star:513,line_end:513|char_star:14,char_end:20"[shape="point",fillcolor="#121013",style=filled];
"os.getcwd,type='attribute'\nline_star:513,line_end:513|char_star:11,char_end:20"->"getcwd,type='identifier'\nline_star:513,line_end:513|char_star:14,char_end:20";
"test_path,type='identifier'\nline_star:513,line_end:513|char_star:26,char_end:35"[shape="point",fillcolor="#121013",style=filled];
"os.getcwd() == test_path,type='comparison_operator'\nline_star:513,line_end:513|char_star:11,char_end:35"->"test_path,type='identifier'\nline_star:513,line_end:513|char_star:26,char_end:35";
"# .flaskenv doesn't overwrite .env,type='comment'\nline_star:514,line_end:514|char_star:4,char_end:38"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:507,line_end:524|char_star:4,char_end:47"->"# .flaskenv doesn't overwrite .env,type='comment'\nline_star:514,line_end:514|char_star:4,char_end:38";
"assert os.environ['FOO'] == 'env',type='assert_statement'\nline_star:515,line_end:515|char_star:4,char_end:37"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:507,line_end:524|char_star:4,char_end:47"->"assert os.environ['FOO'] == 'env',type='assert_statement'\nline_star:515,line_end:515|char_star:4,char_end:37";
"os.environ['FOO'] == 'env',type='comparison_operator'\nline_star:515,line_end:515|char_star:11,char_end:37"[shape="box",fillcolor="white",style=filled];
"assert os.environ['FOO'] == 'env',type='assert_statement'\nline_star:515,line_end:515|char_star:4,char_end:37"->"os.environ['FOO'] == 'env',type='comparison_operator'\nline_star:515,line_end:515|char_star:11,char_end:37";
"os.environ['FOO'],type='subscript'\nline_star:515,line_end:515|char_star:11,char_end:28"[shape="box",fillcolor="white",style=filled];
"os.environ['FOO'] == 'env',type='comparison_operator'\nline_star:515,line_end:515|char_star:11,char_end:37"->"os.environ['FOO'],type='subscript'\nline_star:515,line_end:515|char_star:11,char_end:28";
"os.environ,type='attribute'\nline_star:515,line_end:515|char_star:11,char_end:21"[shape="box",fillcolor="white",style=filled];
"os.environ['FOO'],type='subscript'\nline_star:515,line_end:515|char_star:11,char_end:28"->"os.environ,type='attribute'\nline_star:515,line_end:515|char_star:11,char_end:21";
"os,type='identifier'\nline_star:515,line_end:515|char_star:11,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"os.environ,type='attribute'\nline_star:515,line_end:515|char_star:11,char_end:21"->"os,type='identifier'\nline_star:515,line_end:515|char_star:11,char_end:13";
"environ,type='identifier'\nline_star:515,line_end:515|char_star:14,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"os.environ,type='attribute'\nline_star:515,line_end:515|char_star:11,char_end:21"->"environ,type='identifier'\nline_star:515,line_end:515|char_star:14,char_end:21";
"# set only in .flaskenv,type='comment'\nline_star:516,line_end:516|char_star:4,char_end:27"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:507,line_end:524|char_star:4,char_end:47"->"# set only in .flaskenv,type='comment'\nline_star:516,line_end:516|char_star:4,char_end:27";
"assert os.environ['BAR'] == 'bar',type='assert_statement'\nline_star:517,line_end:517|char_star:4,char_end:37"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:507,line_end:524|char_star:4,char_end:47"->"assert os.environ['BAR'] == 'bar',type='assert_statement'\nline_star:517,line_end:517|char_star:4,char_end:37";
"os.environ['BAR'] == 'bar',type='comparison_operator'\nline_star:517,line_end:517|char_star:11,char_end:37"[shape="box",fillcolor="white",style=filled];
"assert os.environ['BAR'] == 'bar',type='assert_statement'\nline_star:517,line_end:517|char_star:4,char_end:37"->"os.environ['BAR'] == 'bar',type='comparison_operator'\nline_star:517,line_end:517|char_star:11,char_end:37";
"os.environ['BAR'],type='subscript'\nline_star:517,line_end:517|char_star:11,char_end:28"[shape="box",fillcolor="white",style=filled];
"os.environ['BAR'] == 'bar',type='comparison_operator'\nline_star:517,line_end:517|char_star:11,char_end:37"->"os.environ['BAR'],type='subscript'\nline_star:517,line_end:517|char_star:11,char_end:28";
"os.environ,type='attribute'\nline_star:517,line_end:517|char_star:11,char_end:21"[shape="box",fillcolor="white",style=filled];
"os.environ['BAR'],type='subscript'\nline_star:517,line_end:517|char_star:11,char_end:28"->"os.environ,type='attribute'\nline_star:517,line_end:517|char_star:11,char_end:21";
"os,type='identifier'\nline_star:517,line_end:517|char_star:11,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"os.environ,type='attribute'\nline_star:517,line_end:517|char_star:11,char_end:21"->"os,type='identifier'\nline_star:517,line_end:517|char_star:11,char_end:13";
"environ,type='identifier'\nline_star:517,line_end:517|char_star:14,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"os.environ,type='attribute'\nline_star:517,line_end:517|char_star:11,char_end:21"->"environ,type='identifier'\nline_star:517,line_end:517|char_star:14,char_end:21";
"# set only in .env,type='comment'\nline_star:518,line_end:518|char_star:4,char_end:22"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:507,line_end:524|char_star:4,char_end:47"->"# set only in .env,type='comment'\nline_star:518,line_end:518|char_star:4,char_end:22";
"assert os.environ['SPAM'] == '1',type='assert_statement'\nline_star:519,line_end:519|char_star:4,char_end:36"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:507,line_end:524|char_star:4,char_end:47"->"assert os.environ['SPAM'] == '1',type='assert_statement'\nline_star:519,line_end:519|char_star:4,char_end:36";
"os.environ['SPAM'] == '1',type='comparison_operator'\nline_star:519,line_end:519|char_star:11,char_end:36"[shape="box",fillcolor="white",style=filled];
"assert os.environ['SPAM'] == '1',type='assert_statement'\nline_star:519,line_end:519|char_star:4,char_end:36"->"os.environ['SPAM'] == '1',type='comparison_operator'\nline_star:519,line_end:519|char_star:11,char_end:36";
"os.environ['SPAM'],type='subscript'\nline_star:519,line_end:519|char_star:11,char_end:29"[shape="box",fillcolor="white",style=filled];
"os.environ['SPAM'] == '1',type='comparison_operator'\nline_star:519,line_end:519|char_star:11,char_end:36"->"os.environ['SPAM'],type='subscript'\nline_star:519,line_end:519|char_star:11,char_end:29";
"os.environ,type='attribute'\nline_star:519,line_end:519|char_star:11,char_end:21"[shape="box",fillcolor="white",style=filled];
"os.environ['SPAM'],type='subscript'\nline_star:519,line_end:519|char_star:11,char_end:29"->"os.environ,type='attribute'\nline_star:519,line_end:519|char_star:11,char_end:21";
"os,type='identifier'\nline_star:519,line_end:519|char_star:11,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"os.environ,type='attribute'\nline_star:519,line_end:519|char_star:11,char_end:21"->"os,type='identifier'\nline_star:519,line_end:519|char_star:11,char_end:13";
"environ,type='identifier'\nline_star:519,line_end:519|char_star:14,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"os.environ,type='attribute'\nline_star:519,line_end:519|char_star:11,char_end:21"->"environ,type='identifier'\nline_star:519,line_end:519|char_star:14,char_end:21";
"# set manually, files don't overwrite,type='comment'\nline_star:520,line_end:520|char_star:4,char_end:41"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:507,line_end:524|char_star:4,char_end:47"->"# set manually, files don't overwrite,type='comment'\nline_star:520,line_end:520|char_star:4,char_end:41";
"assert os.environ['EGGS'] == '3',type='assert_statement'\nline_star:521,line_end:521|char_star:4,char_end:36"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:507,line_end:524|char_star:4,char_end:47"->"assert os.environ['EGGS'] == '3',type='assert_statement'\nline_star:521,line_end:521|char_star:4,char_end:36";
"os.environ['EGGS'] == '3',type='comparison_operator'\nline_star:521,line_end:521|char_star:11,char_end:36"[shape="box",fillcolor="white",style=filled];
"assert os.environ['EGGS'] == '3',type='assert_statement'\nline_star:521,line_end:521|char_star:4,char_end:36"->"os.environ['EGGS'] == '3',type='comparison_operator'\nline_star:521,line_end:521|char_star:11,char_end:36";
"os.environ['EGGS'],type='subscript'\nline_star:521,line_end:521|char_star:11,char_end:29"[shape="box",fillcolor="white",style=filled];
"os.environ['EGGS'] == '3',type='comparison_operator'\nline_star:521,line_end:521|char_star:11,char_end:36"->"os.environ['EGGS'],type='subscript'\nline_star:521,line_end:521|char_star:11,char_end:29";
"os.environ,type='attribute'\nline_star:521,line_end:521|char_star:11,char_end:21"[shape="box",fillcolor="white",style=filled];
"os.environ['EGGS'],type='subscript'\nline_star:521,line_end:521|char_star:11,char_end:29"->"os.environ,type='attribute'\nline_star:521,line_end:521|char_star:11,char_end:21";
"os,type='identifier'\nline_star:521,line_end:521|char_star:11,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"os.environ,type='attribute'\nline_star:521,line_end:521|char_star:11,char_end:21"->"os,type='identifier'\nline_star:521,line_end:521|char_star:11,char_end:13";
"environ,type='identifier'\nline_star:521,line_end:521|char_star:14,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"os.environ,type='attribute'\nline_star:521,line_end:521|char_star:11,char_end:21"->"environ,type='identifier'\nline_star:521,line_end:521|char_star:14,char_end:21";
"# Non existent file should not load,type='comment'\nline_star:523,line_end:523|char_star:4,char_end:39"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:507,line_end:524|char_star:4,char_end:47"->"# Non existent file should not load,type='comment'\nline_star:523,line_end:523|char_star:4,char_end:39";
"assert not load_dotenv('non-existent-file'),type='assert_statement'\nline_star:524,line_end:524|char_star:4,char_end:47"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:507,line_end:524|char_star:4,char_end:47"->"assert not load_dotenv('non-existent-file'),type='assert_statement'\nline_star:524,line_end:524|char_star:4,char_end:47";
"not load_dotenv('non-existent-file'),type='not_operator'\nline_star:524,line_end:524|char_star:11,char_end:47"[shape="box",fillcolor="white",style=filled];
"assert not load_dotenv('non-existent-file'),type='assert_statement'\nline_star:524,line_end:524|char_star:4,char_end:47"->"not load_dotenv('non-existent-file'),type='not_operator'\nline_star:524,line_end:524|char_star:11,char_end:47";
"load_dotenv('non-existent-file'),type='call'\nline_star:524,line_end:524|char_star:15,char_end:47"[shape="box",fillcolor="white",style=filled];
"not load_dotenv('non-existent-file'),type='not_operator'\nline_star:524,line_end:524|char_star:11,char_end:47"->"load_dotenv('non-existent-file'),type='call'\nline_star:524,line_end:524|char_star:15,char_end:47";
"load_dotenv,type='identifier'\nline_star:524,line_end:524|char_star:15,char_end:26"[shape="point",fillcolor="#121013",style=filled];
"load_dotenv('non-existent-file'),type='call'\nline_star:524,line_end:524|char_star:15,char_end:47"->"load_dotenv,type='identifier'\nline_star:524,line_end:524|char_star:15,char_end:26";
"('non-existent-file'),type='argument_list'\nline_star:524,line_end:524|char_star:26,char_end:47"[shape="box",fillcolor="white",style=filled];
"load_dotenv('non-existent-file'),type='call'\nline_star:524,line_end:524|char_star:15,char_end:47"->"('non-existent-file'),type='argument_list'\nline_star:524,line_end:524|char_star:26,char_end:47";
"@need_dotenv\ndef test_dotenv_path(monkeypatch):\n    for item in ('FOO', 'BAR', 'EGGS'):\n        monkeypatch._setitem.append((os.environ, item, notset))\n\n    cwd = os.getcwd()\n    load_dotenv(os.path.join(test_path, '.flaskenv'))\n    assert os.getcwd() == cwd\n    assert 'FOO' in os.environ,type='decorated_definition'\nline_star:527,line_end:535|char_star:0,char_end:30"[shape="box",fillcolor="#c8c6a7",style=filled];
"MODULE"->"@need_dotenv\ndef test_dotenv_path(monkeypatch):\n    for item in ('FOO', 'BAR', 'EGGS'):\n        monkeypatch._setitem.append((os.environ, item, notset))\n\n    cwd = os.getcwd()\n    load_dotenv(os.path.join(test_path, '.flaskenv'))\n    assert os.getcwd() == cwd\n    assert 'FOO' in os.environ,type='decorated_definition'\nline_star:527,line_end:535|char_star:0,char_end:30";
"@need_dotenv,type='decorator'\nline_star:527,line_end:527|char_star:0,char_end:12"[shape="box",fillcolor="white",style=filled];
"@need_dotenv\ndef test_dotenv_path(monkeypatch):\n    for item in ('FOO', 'BAR', 'EGGS'):\n        monkeypatch._setitem.append((os.environ, item, notset))\n\n    cwd = os.getcwd()\n    load_dotenv(os.path.join(test_path, '.flaskenv'))\n    assert os.getcwd() == cwd\n    assert 'FOO' in os.environ,type='decorated_definition'\nline_star:527,line_end:535|char_star:0,char_end:30"->"@need_dotenv,type='decorator'\nline_star:527,line_end:527|char_star:0,char_end:12";
"def test_dotenv_path(monkeypatch):\n    for item in ('FOO', 'BAR', 'EGGS'):\n        monkeypatch._setitem.append((os.environ, item, notset))\n\n    cwd = os.getcwd()\n    load_dotenv(os.path.join(test_path, '.flaskenv'))\n    assert os.getcwd() == cwd\n    assert 'FOO' in os.environ,type='function_definition'\nline_star:528,line_end:535|char_star:0,char_end:30"[shape="box",fillcolor="#cee6b4",style=filled];
"@need_dotenv\ndef test_dotenv_path(monkeypatch):\n    for item in ('FOO', 'BAR', 'EGGS'):\n        monkeypatch._setitem.append((os.environ, item, notset))\n\n    cwd = os.getcwd()\n    load_dotenv(os.path.join(test_path, '.flaskenv'))\n    assert os.getcwd() == cwd\n    assert 'FOO' in os.environ,type='decorated_definition'\nline_star:527,line_end:535|char_star:0,char_end:30"->"def test_dotenv_path(monkeypatch):\n    for item in ('FOO', 'BAR', 'EGGS'):\n        monkeypatch._setitem.append((os.environ, item, notset))\n\n    cwd = os.getcwd()\n    load_dotenv(os.path.join(test_path, '.flaskenv'))\n    assert os.getcwd() == cwd\n    assert 'FOO' in os.environ,type='function_definition'\nline_star:528,line_end:535|char_star:0,char_end:30";
"test_dotenv_path,type='identifier'\nline_star:528,line_end:528|char_star:4,char_end:20"[shape="point",fillcolor="#121013",style=filled];
"def test_dotenv_path(monkeypatch):\n    for item in ('FOO', 'BAR', 'EGGS'):\n        monkeypatch._setitem.append((os.environ, item, notset))\n\n    cwd = os.getcwd()\n    load_dotenv(os.path.join(test_path, '.flaskenv'))\n    assert os.getcwd() == cwd\n    assert 'FOO' in os.environ,type='function_definition'\nline_star:528,line_end:535|char_star:0,char_end:30"->"test_dotenv_path,type='identifier'\nline_star:528,line_end:528|char_star:4,char_end:20";
"(monkeypatch),type='parameters'\nline_star:528,line_end:528|char_star:20,char_end:33"[shape="box",fillcolor="white",style=filled];
"def test_dotenv_path(monkeypatch):\n    for item in ('FOO', 'BAR', 'EGGS'):\n        monkeypatch._setitem.append((os.environ, item, notset))\n\n    cwd = os.getcwd()\n    load_dotenv(os.path.join(test_path, '.flaskenv'))\n    assert os.getcwd() == cwd\n    assert 'FOO' in os.environ,type='function_definition'\nline_star:528,line_end:535|char_star:0,char_end:30"->"(monkeypatch),type='parameters'\nline_star:528,line_end:528|char_star:20,char_end:33";
"monkeypatch,type='identifier'\nline_star:528,line_end:528|char_star:21,char_end:32"[shape="point",fillcolor="#121013",style=filled];
"(monkeypatch),type='parameters'\nline_star:528,line_end:528|char_star:20,char_end:33"->"monkeypatch,type='identifier'\nline_star:528,line_end:528|char_star:21,char_end:32";
"type='INFORMATION BLOCK'\nline_star:529,line_end:535|char_star:4,char_end:30"[shape="point",fillcolor="#121013",style=filled];
"def test_dotenv_path(monkeypatch):\n    for item in ('FOO', 'BAR', 'EGGS'):\n        monkeypatch._setitem.append((os.environ, item, notset))\n\n    cwd = os.getcwd()\n    load_dotenv(os.path.join(test_path, '.flaskenv'))\n    assert os.getcwd() == cwd\n    assert 'FOO' in os.environ,type='function_definition'\nline_star:528,line_end:535|char_star:0,char_end:30"->"type='INFORMATION BLOCK'\nline_star:529,line_end:535|char_star:4,char_end:30";
"for item in ('FOO', 'BAR', 'EGGS'):\n        monkeypatch._setitem.append((os.environ, item, notset)),type='for_statement'\nline_star:529,line_end:530|char_star:4,char_end:63"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:529,line_end:535|char_star:4,char_end:30"->"for item in ('FOO', 'BAR', 'EGGS'):\n        monkeypatch._setitem.append((os.environ, item, notset)),type='for_statement'\nline_star:529,line_end:530|char_star:4,char_end:63";
"assert os.getcwd() == cwd,type='assert_statement'\nline_star:534,line_end:534|char_star:4,char_end:29"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:529,line_end:535|char_star:4,char_end:30"->"assert os.getcwd() == cwd,type='assert_statement'\nline_star:534,line_end:534|char_star:4,char_end:29";
"os.getcwd() == cwd,type='comparison_operator'\nline_star:534,line_end:534|char_star:11,char_end:29"[shape="box",fillcolor="white",style=filled];
"assert os.getcwd() == cwd,type='assert_statement'\nline_star:534,line_end:534|char_star:4,char_end:29"->"os.getcwd() == cwd,type='comparison_operator'\nline_star:534,line_end:534|char_star:11,char_end:29";
"os.getcwd(),type='call'\nline_star:534,line_end:534|char_star:11,char_end:22"[shape="box",fillcolor="white",style=filled];
"os.getcwd() == cwd,type='comparison_operator'\nline_star:534,line_end:534|char_star:11,char_end:29"->"os.getcwd(),type='call'\nline_star:534,line_end:534|char_star:11,char_end:22";
"os.getcwd,type='attribute'\nline_star:534,line_end:534|char_star:11,char_end:20"[shape="box",fillcolor="white",style=filled];
"os.getcwd(),type='call'\nline_star:534,line_end:534|char_star:11,char_end:22"->"os.getcwd,type='attribute'\nline_star:534,line_end:534|char_star:11,char_end:20";
"os,type='identifier'\nline_star:534,line_end:534|char_star:11,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"os.getcwd,type='attribute'\nline_star:534,line_end:534|char_star:11,char_end:20"->"os,type='identifier'\nline_star:534,line_end:534|char_star:11,char_end:13";
"getcwd,type='identifier'\nline_star:534,line_end:534|char_star:14,char_end:20"[shape="point",fillcolor="#121013",style=filled];
"os.getcwd,type='attribute'\nline_star:534,line_end:534|char_star:11,char_end:20"->"getcwd,type='identifier'\nline_star:534,line_end:534|char_star:14,char_end:20";
"cwd,type='identifier'\nline_star:534,line_end:534|char_star:26,char_end:29"[shape="point",fillcolor="#121013",style=filled];
"os.getcwd() == cwd,type='comparison_operator'\nline_star:534,line_end:534|char_star:11,char_end:29"->"cwd,type='identifier'\nline_star:534,line_end:534|char_star:26,char_end:29";
"assert 'FOO' in os.environ,type='assert_statement'\nline_star:535,line_end:535|char_star:4,char_end:30"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:529,line_end:535|char_star:4,char_end:30"->"assert 'FOO' in os.environ,type='assert_statement'\nline_star:535,line_end:535|char_star:4,char_end:30";
"'FOO' in os.environ,type='comparison_operator'\nline_star:535,line_end:535|char_star:11,char_end:30"[shape="box",fillcolor="white",style=filled];
"assert 'FOO' in os.environ,type='assert_statement'\nline_star:535,line_end:535|char_star:4,char_end:30"->"'FOO' in os.environ,type='comparison_operator'\nline_star:535,line_end:535|char_star:11,char_end:30";
"os.environ,type='attribute'\nline_star:535,line_end:535|char_star:20,char_end:30"[shape="box",fillcolor="white",style=filled];
"'FOO' in os.environ,type='comparison_operator'\nline_star:535,line_end:535|char_star:11,char_end:30"->"os.environ,type='attribute'\nline_star:535,line_end:535|char_star:20,char_end:30";
"os,type='identifier'\nline_star:535,line_end:535|char_star:20,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"os.environ,type='attribute'\nline_star:535,line_end:535|char_star:20,char_end:30"->"os,type='identifier'\nline_star:535,line_end:535|char_star:20,char_end:22";
"environ,type='identifier'\nline_star:535,line_end:535|char_star:23,char_end:30"[shape="point",fillcolor="#121013",style=filled];
"os.environ,type='attribute'\nline_star:535,line_end:535|char_star:20,char_end:30"->"environ,type='identifier'\nline_star:535,line_end:535|char_star:23,char_end:30";
"def test_dotenv_optional(monkeypatch):\n    monkeypatch.setattr('flask.cli.dotenv', None)\n    monkeypatch.chdir(test_path)\n    load_dotenv()\n    assert 'FOO' not in os.environ,type='function_definition'\nline_star:538,line_end:542|char_star:0,char_end:34"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_dotenv_optional(monkeypatch):\n    monkeypatch.setattr('flask.cli.dotenv', None)\n    monkeypatch.chdir(test_path)\n    load_dotenv()\n    assert 'FOO' not in os.environ,type='function_definition'\nline_star:538,line_end:542|char_star:0,char_end:34";
"test_dotenv_optional,type='identifier'\nline_star:538,line_end:538|char_star:4,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"def test_dotenv_optional(monkeypatch):\n    monkeypatch.setattr('flask.cli.dotenv', None)\n    monkeypatch.chdir(test_path)\n    load_dotenv()\n    assert 'FOO' not in os.environ,type='function_definition'\nline_star:538,line_end:542|char_star:0,char_end:34"->"test_dotenv_optional,type='identifier'\nline_star:538,line_end:538|char_star:4,char_end:24";
"(monkeypatch),type='parameters'\nline_star:538,line_end:538|char_star:24,char_end:37"[shape="box",fillcolor="white",style=filled];
"def test_dotenv_optional(monkeypatch):\n    monkeypatch.setattr('flask.cli.dotenv', None)\n    monkeypatch.chdir(test_path)\n    load_dotenv()\n    assert 'FOO' not in os.environ,type='function_definition'\nline_star:538,line_end:542|char_star:0,char_end:34"->"(monkeypatch),type='parameters'\nline_star:538,line_end:538|char_star:24,char_end:37";
"monkeypatch,type='identifier'\nline_star:538,line_end:538|char_star:25,char_end:36"[shape="point",fillcolor="#121013",style=filled];
"(monkeypatch),type='parameters'\nline_star:538,line_end:538|char_star:24,char_end:37"->"monkeypatch,type='identifier'\nline_star:538,line_end:538|char_star:25,char_end:36";
"type='INFORMATION BLOCK'\nline_star:539,line_end:542|char_star:4,char_end:34"[shape="point",fillcolor="#121013",style=filled];
"def test_dotenv_optional(monkeypatch):\n    monkeypatch.setattr('flask.cli.dotenv', None)\n    monkeypatch.chdir(test_path)\n    load_dotenv()\n    assert 'FOO' not in os.environ,type='function_definition'\nline_star:538,line_end:542|char_star:0,char_end:34"->"type='INFORMATION BLOCK'\nline_star:539,line_end:542|char_star:4,char_end:34";
"assert 'FOO' not in os.environ,type='assert_statement'\nline_star:542,line_end:542|char_star:4,char_end:34"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:539,line_end:542|char_star:4,char_end:34"->"assert 'FOO' not in os.environ,type='assert_statement'\nline_star:542,line_end:542|char_star:4,char_end:34";
"'FOO' not in os.environ,type='comparison_operator'\nline_star:542,line_end:542|char_star:11,char_end:34"[shape="box",fillcolor="white",style=filled];
"assert 'FOO' not in os.environ,type='assert_statement'\nline_star:542,line_end:542|char_star:4,char_end:34"->"'FOO' not in os.environ,type='comparison_operator'\nline_star:542,line_end:542|char_star:11,char_end:34";
"os.environ,type='attribute'\nline_star:542,line_end:542|char_star:24,char_end:34"[shape="box",fillcolor="white",style=filled];
"'FOO' not in os.environ,type='comparison_operator'\nline_star:542,line_end:542|char_star:11,char_end:34"->"os.environ,type='attribute'\nline_star:542,line_end:542|char_star:24,char_end:34";
"os,type='identifier'\nline_star:542,line_end:542|char_star:24,char_end:26"[shape="point",fillcolor="#121013",style=filled];
"os.environ,type='attribute'\nline_star:542,line_end:542|char_star:24,char_end:34"->"os,type='identifier'\nline_star:542,line_end:542|char_star:24,char_end:26";
"environ,type='identifier'\nline_star:542,line_end:542|char_star:27,char_end:34"[shape="point",fillcolor="#121013",style=filled];
"os.environ,type='attribute'\nline_star:542,line_end:542|char_star:24,char_end:34"->"environ,type='identifier'\nline_star:542,line_end:542|char_star:27,char_end:34";
"@need_dotenv\ndef test_disable_dotenv_from_env(monkeypatch, runner):\n    monkeypatch.chdir(test_path)\n    monkeypatch.setitem(os.environ, 'FLASK_SKIP_DOTENV', '1')\n    runner.invoke(FlaskGroup())\n    assert 'FOO' not in os.environ,type='decorated_definition'\nline_star:545,line_end:550|char_star:0,char_end:34"[shape="box",fillcolor="#c8c6a7",style=filled];
"MODULE"->"@need_dotenv\ndef test_disable_dotenv_from_env(monkeypatch, runner):\n    monkeypatch.chdir(test_path)\n    monkeypatch.setitem(os.environ, 'FLASK_SKIP_DOTENV', '1')\n    runner.invoke(FlaskGroup())\n    assert 'FOO' not in os.environ,type='decorated_definition'\nline_star:545,line_end:550|char_star:0,char_end:34";
"@need_dotenv,type='decorator'\nline_star:545,line_end:545|char_star:0,char_end:12"[shape="box",fillcolor="white",style=filled];
"@need_dotenv\ndef test_disable_dotenv_from_env(monkeypatch, runner):\n    monkeypatch.chdir(test_path)\n    monkeypatch.setitem(os.environ, 'FLASK_SKIP_DOTENV', '1')\n    runner.invoke(FlaskGroup())\n    assert 'FOO' not in os.environ,type='decorated_definition'\nline_star:545,line_end:550|char_star:0,char_end:34"->"@need_dotenv,type='decorator'\nline_star:545,line_end:545|char_star:0,char_end:12";
"def test_disable_dotenv_from_env(monkeypatch, runner):\n    monkeypatch.chdir(test_path)\n    monkeypatch.setitem(os.environ, 'FLASK_SKIP_DOTENV', '1')\n    runner.invoke(FlaskGroup())\n    assert 'FOO' not in os.environ,type='function_definition'\nline_star:546,line_end:550|char_star:0,char_end:34"[shape="box",fillcolor="#cee6b4",style=filled];
"@need_dotenv\ndef test_disable_dotenv_from_env(monkeypatch, runner):\n    monkeypatch.chdir(test_path)\n    monkeypatch.setitem(os.environ, 'FLASK_SKIP_DOTENV', '1')\n    runner.invoke(FlaskGroup())\n    assert 'FOO' not in os.environ,type='decorated_definition'\nline_star:545,line_end:550|char_star:0,char_end:34"->"def test_disable_dotenv_from_env(monkeypatch, runner):\n    monkeypatch.chdir(test_path)\n    monkeypatch.setitem(os.environ, 'FLASK_SKIP_DOTENV', '1')\n    runner.invoke(FlaskGroup())\n    assert 'FOO' not in os.environ,type='function_definition'\nline_star:546,line_end:550|char_star:0,char_end:34";
"test_disable_dotenv_from_env,type='identifier'\nline_star:546,line_end:546|char_star:4,char_end:32"[shape="point",fillcolor="#121013",style=filled];
"def test_disable_dotenv_from_env(monkeypatch, runner):\n    monkeypatch.chdir(test_path)\n    monkeypatch.setitem(os.environ, 'FLASK_SKIP_DOTENV', '1')\n    runner.invoke(FlaskGroup())\n    assert 'FOO' not in os.environ,type='function_definition'\nline_star:546,line_end:550|char_star:0,char_end:34"->"test_disable_dotenv_from_env,type='identifier'\nline_star:546,line_end:546|char_star:4,char_end:32";
"(monkeypatch, runner),type='parameters'\nline_star:546,line_end:546|char_star:32,char_end:53"[shape="box",fillcolor="white",style=filled];
"def test_disable_dotenv_from_env(monkeypatch, runner):\n    monkeypatch.chdir(test_path)\n    monkeypatch.setitem(os.environ, 'FLASK_SKIP_DOTENV', '1')\n    runner.invoke(FlaskGroup())\n    assert 'FOO' not in os.environ,type='function_definition'\nline_star:546,line_end:550|char_star:0,char_end:34"->"(monkeypatch, runner),type='parameters'\nline_star:546,line_end:546|char_star:32,char_end:53";
"monkeypatch,type='identifier'\nline_star:546,line_end:546|char_star:33,char_end:44"[shape="point",fillcolor="#121013",style=filled];
"(monkeypatch, runner),type='parameters'\nline_star:546,line_end:546|char_star:32,char_end:53"->"monkeypatch,type='identifier'\nline_star:546,line_end:546|char_star:33,char_end:44";
"runner,type='identifier'\nline_star:546,line_end:546|char_star:46,char_end:52"[shape="point",fillcolor="#121013",style=filled];
"(monkeypatch, runner),type='parameters'\nline_star:546,line_end:546|char_star:32,char_end:53"->"runner,type='identifier'\nline_star:546,line_end:546|char_star:46,char_end:52";
"type='INFORMATION BLOCK'\nline_star:547,line_end:550|char_star:4,char_end:34"[shape="point",fillcolor="#121013",style=filled];
"def test_disable_dotenv_from_env(monkeypatch, runner):\n    monkeypatch.chdir(test_path)\n    monkeypatch.setitem(os.environ, 'FLASK_SKIP_DOTENV', '1')\n    runner.invoke(FlaskGroup())\n    assert 'FOO' not in os.environ,type='function_definition'\nline_star:546,line_end:550|char_star:0,char_end:34"->"type='INFORMATION BLOCK'\nline_star:547,line_end:550|char_star:4,char_end:34";
"assert 'FOO' not in os.environ,type='assert_statement'\nline_star:550,line_end:550|char_star:4,char_end:34"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:547,line_end:550|char_star:4,char_end:34"->"assert 'FOO' not in os.environ,type='assert_statement'\nline_star:550,line_end:550|char_star:4,char_end:34";
"'FOO' not in os.environ,type='comparison_operator'\nline_star:550,line_end:550|char_star:11,char_end:34"[shape="box",fillcolor="white",style=filled];
"assert 'FOO' not in os.environ,type='assert_statement'\nline_star:550,line_end:550|char_star:4,char_end:34"->"'FOO' not in os.environ,type='comparison_operator'\nline_star:550,line_end:550|char_star:11,char_end:34";
"os.environ,type='attribute'\nline_star:550,line_end:550|char_star:24,char_end:34"[shape="box",fillcolor="white",style=filled];
"'FOO' not in os.environ,type='comparison_operator'\nline_star:550,line_end:550|char_star:11,char_end:34"->"os.environ,type='attribute'\nline_star:550,line_end:550|char_star:24,char_end:34";
"os,type='identifier'\nline_star:550,line_end:550|char_star:24,char_end:26"[shape="point",fillcolor="#121013",style=filled];
"os.environ,type='attribute'\nline_star:550,line_end:550|char_star:24,char_end:34"->"os,type='identifier'\nline_star:550,line_end:550|char_star:24,char_end:26";
"environ,type='identifier'\nline_star:550,line_end:550|char_star:27,char_end:34"[shape="point",fillcolor="#121013",style=filled];
"os.environ,type='attribute'\nline_star:550,line_end:550|char_star:24,char_end:34"->"environ,type='identifier'\nline_star:550,line_end:550|char_star:27,char_end:34";
"def test_run_cert_path():\n    # no key\n    with pytest.raises(click.BadParameter):\n        run_command.make_context('run', ['--cert', __file__])\n\n    # no cert\n    with pytest.raises(click.BadParameter):\n        run_command.make_context('run', ['--key', __file__])\n\n    ctx = run_command.make_context('run', ['--cert', __file__, '--key', __file__])\n    assert ctx.params['cert'] == (__file__, __file__),type='function_definition'\nline_star:553,line_end:563|char_star:0,char_end:53"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_run_cert_path():\n    # no key\n    with pytest.raises(click.BadParameter):\n        run_command.make_context('run', ['--cert', __file__])\n\n    # no cert\n    with pytest.raises(click.BadParameter):\n        run_command.make_context('run', ['--key', __file__])\n\n    ctx = run_command.make_context('run', ['--cert', __file__, '--key', __file__])\n    assert ctx.params['cert'] == (__file__, __file__),type='function_definition'\nline_star:553,line_end:563|char_star:0,char_end:53";
"test_run_cert_path,type='identifier'\nline_star:553,line_end:553|char_star:4,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"def test_run_cert_path():\n    # no key\n    with pytest.raises(click.BadParameter):\n        run_command.make_context('run', ['--cert', __file__])\n\n    # no cert\n    with pytest.raises(click.BadParameter):\n        run_command.make_context('run', ['--key', __file__])\n\n    ctx = run_command.make_context('run', ['--cert', __file__, '--key', __file__])\n    assert ctx.params['cert'] == (__file__, __file__),type='function_definition'\nline_star:553,line_end:563|char_star:0,char_end:53"->"test_run_cert_path,type='identifier'\nline_star:553,line_end:553|char_star:4,char_end:22";
"# no key,type='comment'\nline_star:554,line_end:554|char_star:4,char_end:12"[shape="box",fillcolor="#f0c929",style=filled];
"def test_run_cert_path():\n    # no key\n    with pytest.raises(click.BadParameter):\n        run_command.make_context('run', ['--cert', __file__])\n\n    # no cert\n    with pytest.raises(click.BadParameter):\n        run_command.make_context('run', ['--key', __file__])\n\n    ctx = run_command.make_context('run', ['--cert', __file__, '--key', __file__])\n    assert ctx.params['cert'] == (__file__, __file__),type='function_definition'\nline_star:553,line_end:563|char_star:0,char_end:53"->"# no key,type='comment'\nline_star:554,line_end:554|char_star:4,char_end:12";
"type='INFORMATION BLOCK'\nline_star:555,line_end:563|char_star:4,char_end:53"[shape="point",fillcolor="#121013",style=filled];
"def test_run_cert_path():\n    # no key\n    with pytest.raises(click.BadParameter):\n        run_command.make_context('run', ['--cert', __file__])\n\n    # no cert\n    with pytest.raises(click.BadParameter):\n        run_command.make_context('run', ['--key', __file__])\n\n    ctx = run_command.make_context('run', ['--cert', __file__, '--key', __file__])\n    assert ctx.params['cert'] == (__file__, __file__),type='function_definition'\nline_star:553,line_end:563|char_star:0,char_end:53"->"type='INFORMATION BLOCK'\nline_star:555,line_end:563|char_star:4,char_end:53";
"with pytest.raises(click.BadParameter):\n        run_command.make_context('run', ['--cert', __file__]),type='with_statement'\nline_star:555,line_end:556|char_star:4,char_end:61"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:555,line_end:563|char_star:4,char_end:53"->"with pytest.raises(click.BadParameter):\n        run_command.make_context('run', ['--cert', __file__]),type='with_statement'\nline_star:555,line_end:556|char_star:4,char_end:61";
"pytest.raises(click.BadParameter),type='with_clause'\nline_star:555,line_end:555|char_star:9,char_end:42"[shape="box",fillcolor="white",style=filled];
"with pytest.raises(click.BadParameter):\n        run_command.make_context('run', ['--cert', __file__]),type='with_statement'\nline_star:555,line_end:556|char_star:4,char_end:61"->"pytest.raises(click.BadParameter),type='with_clause'\nline_star:555,line_end:555|char_star:9,char_end:42";
"type='INFORMATION BLOCK'\nline_star:556,line_end:556|char_star:8,char_end:61"[shape="point",fillcolor="#121013",style=filled];
"with pytest.raises(click.BadParameter):\n        run_command.make_context('run', ['--cert', __file__]),type='with_statement'\nline_star:555,line_end:556|char_star:4,char_end:61"->"type='INFORMATION BLOCK'\nline_star:556,line_end:556|char_star:8,char_end:61";
"# no cert,type='comment'\nline_star:558,line_end:558|char_star:4,char_end:13"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:555,line_end:563|char_star:4,char_end:53"->"# no cert,type='comment'\nline_star:558,line_end:558|char_star:4,char_end:13";
"with pytest.raises(click.BadParameter):\n        run_command.make_context('run', ['--key', __file__]),type='with_statement'\nline_star:559,line_end:560|char_star:4,char_end:60"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:555,line_end:563|char_star:4,char_end:53"->"with pytest.raises(click.BadParameter):\n        run_command.make_context('run', ['--key', __file__]),type='with_statement'\nline_star:559,line_end:560|char_star:4,char_end:60";
"pytest.raises(click.BadParameter),type='with_clause'\nline_star:559,line_end:559|char_star:9,char_end:42"[shape="box",fillcolor="white",style=filled];
"with pytest.raises(click.BadParameter):\n        run_command.make_context('run', ['--key', __file__]),type='with_statement'\nline_star:559,line_end:560|char_star:4,char_end:60"->"pytest.raises(click.BadParameter),type='with_clause'\nline_star:559,line_end:559|char_star:9,char_end:42";
"type='INFORMATION BLOCK'\nline_star:560,line_end:560|char_star:8,char_end:60"[shape="point",fillcolor="#121013",style=filled];
"with pytest.raises(click.BadParameter):\n        run_command.make_context('run', ['--key', __file__]),type='with_statement'\nline_star:559,line_end:560|char_star:4,char_end:60"->"type='INFORMATION BLOCK'\nline_star:560,line_end:560|char_star:8,char_end:60";
"assert ctx.params['cert'] == (__file__, __file__),type='assert_statement'\nline_star:563,line_end:563|char_star:4,char_end:53"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:555,line_end:563|char_star:4,char_end:53"->"assert ctx.params['cert'] == (__file__, __file__),type='assert_statement'\nline_star:563,line_end:563|char_star:4,char_end:53";
"ctx.params['cert'] == (__file__, __file__),type='comparison_operator'\nline_star:563,line_end:563|char_star:11,char_end:53"[shape="box",fillcolor="white",style=filled];
"assert ctx.params['cert'] == (__file__, __file__),type='assert_statement'\nline_star:563,line_end:563|char_star:4,char_end:53"->"ctx.params['cert'] == (__file__, __file__),type='comparison_operator'\nline_star:563,line_end:563|char_star:11,char_end:53";
"ctx.params['cert'],type='subscript'\nline_star:563,line_end:563|char_star:11,char_end:29"[shape="box",fillcolor="white",style=filled];
"ctx.params['cert'] == (__file__, __file__),type='comparison_operator'\nline_star:563,line_end:563|char_star:11,char_end:53"->"ctx.params['cert'],type='subscript'\nline_star:563,line_end:563|char_star:11,char_end:29";
"ctx.params,type='attribute'\nline_star:563,line_end:563|char_star:11,char_end:21"[shape="box",fillcolor="white",style=filled];
"ctx.params['cert'],type='subscript'\nline_star:563,line_end:563|char_star:11,char_end:29"->"ctx.params,type='attribute'\nline_star:563,line_end:563|char_star:11,char_end:21";
"ctx,type='identifier'\nline_star:563,line_end:563|char_star:11,char_end:14"[shape="point",fillcolor="#121013",style=filled];
"ctx.params,type='attribute'\nline_star:563,line_end:563|char_star:11,char_end:21"->"ctx,type='identifier'\nline_star:563,line_end:563|char_star:11,char_end:14";
"params,type='identifier'\nline_star:563,line_end:563|char_star:15,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"ctx.params,type='attribute'\nline_star:563,line_end:563|char_star:11,char_end:21"->"params,type='identifier'\nline_star:563,line_end:563|char_star:15,char_end:21";
"(__file__, __file__),type='tuple'\nline_star:563,line_end:563|char_star:33,char_end:53"[shape="box",fillcolor="white",style=filled];
"ctx.params['cert'] == (__file__, __file__),type='comparison_operator'\nline_star:563,line_end:563|char_star:11,char_end:53"->"(__file__, __file__),type='tuple'\nline_star:563,line_end:563|char_star:33,char_end:53";
"__file__,type='identifier'\nline_star:563,line_end:563|char_star:34,char_end:42"[shape="point",fillcolor="#121013",style=filled];
"(__file__, __file__),type='tuple'\nline_star:563,line_end:563|char_star:33,char_end:53"->"__file__,type='identifier'\nline_star:563,line_end:563|char_star:34,char_end:42";
"__file__,type='identifier'\nline_star:563,line_end:563|char_star:44,char_end:52"[shape="point",fillcolor="#121013",style=filled];
"(__file__, __file__),type='tuple'\nline_star:563,line_end:563|char_star:33,char_end:53"->"__file__,type='identifier'\nline_star:563,line_end:563|char_star:44,char_end:52";
"def test_run_cert_adhoc(monkeypatch):\n    monkeypatch.setitem(sys.modules, 'cryptography', None)\n\n    # cryptography not installed\n    with pytest.raises(click.BadParameter):\n        run_command.make_context('run', ['--cert', 'adhoc'])\n\n    # cryptography installed\n    monkeypatch.setitem(sys.modules, 'cryptography', types.ModuleType('cryptography'))\n    ctx = run_command.make_context('run', ['--cert', 'adhoc'])\n    assert ctx.params['cert'] == 'adhoc'\n\n    # no key with adhoc\n    with pytest.raises(click.BadParameter):\n        run_command.make_context('run', ['--cert', 'adhoc', '--key', __file__]),type='function_definition'\nline_star:566,line_end:580|char_star:0,char_end:79"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_run_cert_adhoc(monkeypatch):\n    monkeypatch.setitem(sys.modules, 'cryptography', None)\n\n    # cryptography not installed\n    with pytest.raises(click.BadParameter):\n        run_command.make_context('run', ['--cert', 'adhoc'])\n\n    # cryptography installed\n    monkeypatch.setitem(sys.modules, 'cryptography', types.ModuleType('cryptography'))\n    ctx = run_command.make_context('run', ['--cert', 'adhoc'])\n    assert ctx.params['cert'] == 'adhoc'\n\n    # no key with adhoc\n    with pytest.raises(click.BadParameter):\n        run_command.make_context('run', ['--cert', 'adhoc', '--key', __file__]),type='function_definition'\nline_star:566,line_end:580|char_star:0,char_end:79";
"test_run_cert_adhoc,type='identifier'\nline_star:566,line_end:566|char_star:4,char_end:23"[shape="point",fillcolor="#121013",style=filled];
"def test_run_cert_adhoc(monkeypatch):\n    monkeypatch.setitem(sys.modules, 'cryptography', None)\n\n    # cryptography not installed\n    with pytest.raises(click.BadParameter):\n        run_command.make_context('run', ['--cert', 'adhoc'])\n\n    # cryptography installed\n    monkeypatch.setitem(sys.modules, 'cryptography', types.ModuleType('cryptography'))\n    ctx = run_command.make_context('run', ['--cert', 'adhoc'])\n    assert ctx.params['cert'] == 'adhoc'\n\n    # no key with adhoc\n    with pytest.raises(click.BadParameter):\n        run_command.make_context('run', ['--cert', 'adhoc', '--key', __file__]),type='function_definition'\nline_star:566,line_end:580|char_star:0,char_end:79"->"test_run_cert_adhoc,type='identifier'\nline_star:566,line_end:566|char_star:4,char_end:23";
"(monkeypatch),type='parameters'\nline_star:566,line_end:566|char_star:23,char_end:36"[shape="box",fillcolor="white",style=filled];
"def test_run_cert_adhoc(monkeypatch):\n    monkeypatch.setitem(sys.modules, 'cryptography', None)\n\n    # cryptography not installed\n    with pytest.raises(click.BadParameter):\n        run_command.make_context('run', ['--cert', 'adhoc'])\n\n    # cryptography installed\n    monkeypatch.setitem(sys.modules, 'cryptography', types.ModuleType('cryptography'))\n    ctx = run_command.make_context('run', ['--cert', 'adhoc'])\n    assert ctx.params['cert'] == 'adhoc'\n\n    # no key with adhoc\n    with pytest.raises(click.BadParameter):\n        run_command.make_context('run', ['--cert', 'adhoc', '--key', __file__]),type='function_definition'\nline_star:566,line_end:580|char_star:0,char_end:79"->"(monkeypatch),type='parameters'\nline_star:566,line_end:566|char_star:23,char_end:36";
"monkeypatch,type='identifier'\nline_star:566,line_end:566|char_star:24,char_end:35"[shape="point",fillcolor="#121013",style=filled];
"(monkeypatch),type='parameters'\nline_star:566,line_end:566|char_star:23,char_end:36"->"monkeypatch,type='identifier'\nline_star:566,line_end:566|char_star:24,char_end:35";
"type='INFORMATION BLOCK'\nline_star:567,line_end:580|char_star:4,char_end:79"[shape="point",fillcolor="#121013",style=filled];
"def test_run_cert_adhoc(monkeypatch):\n    monkeypatch.setitem(sys.modules, 'cryptography', None)\n\n    # cryptography not installed\n    with pytest.raises(click.BadParameter):\n        run_command.make_context('run', ['--cert', 'adhoc'])\n\n    # cryptography installed\n    monkeypatch.setitem(sys.modules, 'cryptography', types.ModuleType('cryptography'))\n    ctx = run_command.make_context('run', ['--cert', 'adhoc'])\n    assert ctx.params['cert'] == 'adhoc'\n\n    # no key with adhoc\n    with pytest.raises(click.BadParameter):\n        run_command.make_context('run', ['--cert', 'adhoc', '--key', __file__]),type='function_definition'\nline_star:566,line_end:580|char_star:0,char_end:79"->"type='INFORMATION BLOCK'\nline_star:567,line_end:580|char_star:4,char_end:79";
"# cryptography not installed,type='comment'\nline_star:569,line_end:569|char_star:4,char_end:32"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:567,line_end:580|char_star:4,char_end:79"->"# cryptography not installed,type='comment'\nline_star:569,line_end:569|char_star:4,char_end:32";
"with pytest.raises(click.BadParameter):\n        run_command.make_context('run', ['--cert', 'adhoc']),type='with_statement'\nline_star:570,line_end:571|char_star:4,char_end:60"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:567,line_end:580|char_star:4,char_end:79"->"with pytest.raises(click.BadParameter):\n        run_command.make_context('run', ['--cert', 'adhoc']),type='with_statement'\nline_star:570,line_end:571|char_star:4,char_end:60";
"pytest.raises(click.BadParameter),type='with_clause'\nline_star:570,line_end:570|char_star:9,char_end:42"[shape="box",fillcolor="white",style=filled];
"with pytest.raises(click.BadParameter):\n        run_command.make_context('run', ['--cert', 'adhoc']),type='with_statement'\nline_star:570,line_end:571|char_star:4,char_end:60"->"pytest.raises(click.BadParameter),type='with_clause'\nline_star:570,line_end:570|char_star:9,char_end:42";
"type='INFORMATION BLOCK'\nline_star:571,line_end:571|char_star:8,char_end:60"[shape="point",fillcolor="#121013",style=filled];
"with pytest.raises(click.BadParameter):\n        run_command.make_context('run', ['--cert', 'adhoc']),type='with_statement'\nline_star:570,line_end:571|char_star:4,char_end:60"->"type='INFORMATION BLOCK'\nline_star:571,line_end:571|char_star:8,char_end:60";
"# cryptography installed,type='comment'\nline_star:573,line_end:573|char_star:4,char_end:28"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:567,line_end:580|char_star:4,char_end:79"->"# cryptography installed,type='comment'\nline_star:573,line_end:573|char_star:4,char_end:28";
"assert ctx.params['cert'] == 'adhoc',type='assert_statement'\nline_star:576,line_end:576|char_star:4,char_end:40"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:567,line_end:580|char_star:4,char_end:79"->"assert ctx.params['cert'] == 'adhoc',type='assert_statement'\nline_star:576,line_end:576|char_star:4,char_end:40";
"ctx.params['cert'] == 'adhoc',type='comparison_operator'\nline_star:576,line_end:576|char_star:11,char_end:40"[shape="box",fillcolor="white",style=filled];
"assert ctx.params['cert'] == 'adhoc',type='assert_statement'\nline_star:576,line_end:576|char_star:4,char_end:40"->"ctx.params['cert'] == 'adhoc',type='comparison_operator'\nline_star:576,line_end:576|char_star:11,char_end:40";
"ctx.params['cert'],type='subscript'\nline_star:576,line_end:576|char_star:11,char_end:29"[shape="box",fillcolor="white",style=filled];
"ctx.params['cert'] == 'adhoc',type='comparison_operator'\nline_star:576,line_end:576|char_star:11,char_end:40"->"ctx.params['cert'],type='subscript'\nline_star:576,line_end:576|char_star:11,char_end:29";
"ctx.params,type='attribute'\nline_star:576,line_end:576|char_star:11,char_end:21"[shape="box",fillcolor="white",style=filled];
"ctx.params['cert'],type='subscript'\nline_star:576,line_end:576|char_star:11,char_end:29"->"ctx.params,type='attribute'\nline_star:576,line_end:576|char_star:11,char_end:21";
"ctx,type='identifier'\nline_star:576,line_end:576|char_star:11,char_end:14"[shape="point",fillcolor="#121013",style=filled];
"ctx.params,type='attribute'\nline_star:576,line_end:576|char_star:11,char_end:21"->"ctx,type='identifier'\nline_star:576,line_end:576|char_star:11,char_end:14";
"params,type='identifier'\nline_star:576,line_end:576|char_star:15,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"ctx.params,type='attribute'\nline_star:576,line_end:576|char_star:11,char_end:21"->"params,type='identifier'\nline_star:576,line_end:576|char_star:15,char_end:21";
"# no key with adhoc,type='comment'\nline_star:578,line_end:578|char_star:4,char_end:23"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:567,line_end:580|char_star:4,char_end:79"->"# no key with adhoc,type='comment'\nline_star:578,line_end:578|char_star:4,char_end:23";
"with pytest.raises(click.BadParameter):\n        run_command.make_context('run', ['--cert', 'adhoc', '--key', __file__]),type='with_statement'\nline_star:579,line_end:580|char_star:4,char_end:79"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:567,line_end:580|char_star:4,char_end:79"->"with pytest.raises(click.BadParameter):\n        run_command.make_context('run', ['--cert', 'adhoc', '--key', __file__]),type='with_statement'\nline_star:579,line_end:580|char_star:4,char_end:79";
"pytest.raises(click.BadParameter),type='with_clause'\nline_star:579,line_end:579|char_star:9,char_end:42"[shape="box",fillcolor="white",style=filled];
"with pytest.raises(click.BadParameter):\n        run_command.make_context('run', ['--cert', 'adhoc', '--key', __file__]),type='with_statement'\nline_star:579,line_end:580|char_star:4,char_end:79"->"pytest.raises(click.BadParameter),type='with_clause'\nline_star:579,line_end:579|char_star:9,char_end:42";
"type='INFORMATION BLOCK'\nline_star:580,line_end:580|char_star:8,char_end:79"[shape="point",fillcolor="#121013",style=filled];
"with pytest.raises(click.BadParameter):\n        run_command.make_context('run', ['--cert', 'adhoc', '--key', __file__]),type='with_statement'\nline_star:579,line_end:580|char_star:4,char_end:79"->"type='INFORMATION BLOCK'\nline_star:580,line_end:580|char_star:8,char_end:79";
"def test_run_cert_import(monkeypatch):\n    monkeypatch.setitem(sys.modules, 'not_here', None)\n\n    # ImportError\n    with pytest.raises(click.BadParameter):\n        run_command.make_context('run', ['--cert', 'not_here'])\n\n    with pytest.raises(click.BadParameter):\n        run_command.make_context('run', ['--cert', 'flask'])\n\n    # SSLContext\n    ssl_context = ssl.SSLContext(ssl.PROTOCOL_TLS_SERVER)\n\n    monkeypatch.setitem(sys.modules, 'ssl_context', ssl_context)\n    ctx = run_command.make_context('run', ['--cert', 'ssl_context'])\n    assert ctx.params['cert'] is ssl_context\n\n    # no --key with SSLContext\n    with pytest.raises(click.BadParameter):\n        run_command.make_context('run', ['--cert', 'ssl_context', '--key', __file__]),type='function_definition'\nline_star:583,line_end:602|char_star:0,char_end:85"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_run_cert_import(monkeypatch):\n    monkeypatch.setitem(sys.modules, 'not_here', None)\n\n    # ImportError\n    with pytest.raises(click.BadParameter):\n        run_command.make_context('run', ['--cert', 'not_here'])\n\n    with pytest.raises(click.BadParameter):\n        run_command.make_context('run', ['--cert', 'flask'])\n\n    # SSLContext\n    ssl_context = ssl.SSLContext(ssl.PROTOCOL_TLS_SERVER)\n\n    monkeypatch.setitem(sys.modules, 'ssl_context', ssl_context)\n    ctx = run_command.make_context('run', ['--cert', 'ssl_context'])\n    assert ctx.params['cert'] is ssl_context\n\n    # no --key with SSLContext\n    with pytest.raises(click.BadParameter):\n        run_command.make_context('run', ['--cert', 'ssl_context', '--key', __file__]),type='function_definition'\nline_star:583,line_end:602|char_star:0,char_end:85";
"test_run_cert_import,type='identifier'\nline_star:583,line_end:583|char_star:4,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"def test_run_cert_import(monkeypatch):\n    monkeypatch.setitem(sys.modules, 'not_here', None)\n\n    # ImportError\n    with pytest.raises(click.BadParameter):\n        run_command.make_context('run', ['--cert', 'not_here'])\n\n    with pytest.raises(click.BadParameter):\n        run_command.make_context('run', ['--cert', 'flask'])\n\n    # SSLContext\n    ssl_context = ssl.SSLContext(ssl.PROTOCOL_TLS_SERVER)\n\n    monkeypatch.setitem(sys.modules, 'ssl_context', ssl_context)\n    ctx = run_command.make_context('run', ['--cert', 'ssl_context'])\n    assert ctx.params['cert'] is ssl_context\n\n    # no --key with SSLContext\n    with pytest.raises(click.BadParameter):\n        run_command.make_context('run', ['--cert', 'ssl_context', '--key', __file__]),type='function_definition'\nline_star:583,line_end:602|char_star:0,char_end:85"->"test_run_cert_import,type='identifier'\nline_star:583,line_end:583|char_star:4,char_end:24";
"(monkeypatch),type='parameters'\nline_star:583,line_end:583|char_star:24,char_end:37"[shape="box",fillcolor="white",style=filled];
"def test_run_cert_import(monkeypatch):\n    monkeypatch.setitem(sys.modules, 'not_here', None)\n\n    # ImportError\n    with pytest.raises(click.BadParameter):\n        run_command.make_context('run', ['--cert', 'not_here'])\n\n    with pytest.raises(click.BadParameter):\n        run_command.make_context('run', ['--cert', 'flask'])\n\n    # SSLContext\n    ssl_context = ssl.SSLContext(ssl.PROTOCOL_TLS_SERVER)\n\n    monkeypatch.setitem(sys.modules, 'ssl_context', ssl_context)\n    ctx = run_command.make_context('run', ['--cert', 'ssl_context'])\n    assert ctx.params['cert'] is ssl_context\n\n    # no --key with SSLContext\n    with pytest.raises(click.BadParameter):\n        run_command.make_context('run', ['--cert', 'ssl_context', '--key', __file__]),type='function_definition'\nline_star:583,line_end:602|char_star:0,char_end:85"->"(monkeypatch),type='parameters'\nline_star:583,line_end:583|char_star:24,char_end:37";
"monkeypatch,type='identifier'\nline_star:583,line_end:583|char_star:25,char_end:36"[shape="point",fillcolor="#121013",style=filled];
"(monkeypatch),type='parameters'\nline_star:583,line_end:583|char_star:24,char_end:37"->"monkeypatch,type='identifier'\nline_star:583,line_end:583|char_star:25,char_end:36";
"type='INFORMATION BLOCK'\nline_star:584,line_end:602|char_star:4,char_end:85"[shape="point",fillcolor="#121013",style=filled];
"def test_run_cert_import(monkeypatch):\n    monkeypatch.setitem(sys.modules, 'not_here', None)\n\n    # ImportError\n    with pytest.raises(click.BadParameter):\n        run_command.make_context('run', ['--cert', 'not_here'])\n\n    with pytest.raises(click.BadParameter):\n        run_command.make_context('run', ['--cert', 'flask'])\n\n    # SSLContext\n    ssl_context = ssl.SSLContext(ssl.PROTOCOL_TLS_SERVER)\n\n    monkeypatch.setitem(sys.modules, 'ssl_context', ssl_context)\n    ctx = run_command.make_context('run', ['--cert', 'ssl_context'])\n    assert ctx.params['cert'] is ssl_context\n\n    # no --key with SSLContext\n    with pytest.raises(click.BadParameter):\n        run_command.make_context('run', ['--cert', 'ssl_context', '--key', __file__]),type='function_definition'\nline_star:583,line_end:602|char_star:0,char_end:85"->"type='INFORMATION BLOCK'\nline_star:584,line_end:602|char_star:4,char_end:85";
"# ImportError,type='comment'\nline_star:586,line_end:586|char_star:4,char_end:17"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:584,line_end:602|char_star:4,char_end:85"->"# ImportError,type='comment'\nline_star:586,line_end:586|char_star:4,char_end:17";
"with pytest.raises(click.BadParameter):\n        run_command.make_context('run', ['--cert', 'not_here']),type='with_statement'\nline_star:587,line_end:588|char_star:4,char_end:63"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:584,line_end:602|char_star:4,char_end:85"->"with pytest.raises(click.BadParameter):\n        run_command.make_context('run', ['--cert', 'not_here']),type='with_statement'\nline_star:587,line_end:588|char_star:4,char_end:63";
"pytest.raises(click.BadParameter),type='with_clause'\nline_star:587,line_end:587|char_star:9,char_end:42"[shape="box",fillcolor="white",style=filled];
"with pytest.raises(click.BadParameter):\n        run_command.make_context('run', ['--cert', 'not_here']),type='with_statement'\nline_star:587,line_end:588|char_star:4,char_end:63"->"pytest.raises(click.BadParameter),type='with_clause'\nline_star:587,line_end:587|char_star:9,char_end:42";
"type='INFORMATION BLOCK'\nline_star:588,line_end:588|char_star:8,char_end:63"[shape="point",fillcolor="#121013",style=filled];
"with pytest.raises(click.BadParameter):\n        run_command.make_context('run', ['--cert', 'not_here']),type='with_statement'\nline_star:587,line_end:588|char_star:4,char_end:63"->"type='INFORMATION BLOCK'\nline_star:588,line_end:588|char_star:8,char_end:63";
"with pytest.raises(click.BadParameter):\n        run_command.make_context('run', ['--cert', 'flask']),type='with_statement'\nline_star:590,line_end:591|char_star:4,char_end:60"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:584,line_end:602|char_star:4,char_end:85"->"with pytest.raises(click.BadParameter):\n        run_command.make_context('run', ['--cert', 'flask']),type='with_statement'\nline_star:590,line_end:591|char_star:4,char_end:60";
"pytest.raises(click.BadParameter),type='with_clause'\nline_star:590,line_end:590|char_star:9,char_end:42"[shape="box",fillcolor="white",style=filled];
"with pytest.raises(click.BadParameter):\n        run_command.make_context('run', ['--cert', 'flask']),type='with_statement'\nline_star:590,line_end:591|char_star:4,char_end:60"->"pytest.raises(click.BadParameter),type='with_clause'\nline_star:590,line_end:590|char_star:9,char_end:42";
"type='INFORMATION BLOCK'\nline_star:591,line_end:591|char_star:8,char_end:60"[shape="point",fillcolor="#121013",style=filled];
"with pytest.raises(click.BadParameter):\n        run_command.make_context('run', ['--cert', 'flask']),type='with_statement'\nline_star:590,line_end:591|char_star:4,char_end:60"->"type='INFORMATION BLOCK'\nline_star:591,line_end:591|char_star:8,char_end:60";
"# SSLContext,type='comment'\nline_star:593,line_end:593|char_star:4,char_end:16"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:584,line_end:602|char_star:4,char_end:85"->"# SSLContext,type='comment'\nline_star:593,line_end:593|char_star:4,char_end:16";
"assert ctx.params['cert'] is ssl_context,type='assert_statement'\nline_star:598,line_end:598|char_star:4,char_end:44"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:584,line_end:602|char_star:4,char_end:85"->"assert ctx.params['cert'] is ssl_context,type='assert_statement'\nline_star:598,line_end:598|char_star:4,char_end:44";
"ctx.params['cert'] is ssl_context,type='comparison_operator'\nline_star:598,line_end:598|char_star:11,char_end:44"[shape="box",fillcolor="white",style=filled];
"assert ctx.params['cert'] is ssl_context,type='assert_statement'\nline_star:598,line_end:598|char_star:4,char_end:44"->"ctx.params['cert'] is ssl_context,type='comparison_operator'\nline_star:598,line_end:598|char_star:11,char_end:44";
"ctx.params['cert'],type='subscript'\nline_star:598,line_end:598|char_star:11,char_end:29"[shape="box",fillcolor="white",style=filled];
"ctx.params['cert'] is ssl_context,type='comparison_operator'\nline_star:598,line_end:598|char_star:11,char_end:44"->"ctx.params['cert'],type='subscript'\nline_star:598,line_end:598|char_star:11,char_end:29";
"ctx.params,type='attribute'\nline_star:598,line_end:598|char_star:11,char_end:21"[shape="box",fillcolor="white",style=filled];
"ctx.params['cert'],type='subscript'\nline_star:598,line_end:598|char_star:11,char_end:29"->"ctx.params,type='attribute'\nline_star:598,line_end:598|char_star:11,char_end:21";
"ctx,type='identifier'\nline_star:598,line_end:598|char_star:11,char_end:14"[shape="point",fillcolor="#121013",style=filled];
"ctx.params,type='attribute'\nline_star:598,line_end:598|char_star:11,char_end:21"->"ctx,type='identifier'\nline_star:598,line_end:598|char_star:11,char_end:14";
"params,type='identifier'\nline_star:598,line_end:598|char_star:15,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"ctx.params,type='attribute'\nline_star:598,line_end:598|char_star:11,char_end:21"->"params,type='identifier'\nline_star:598,line_end:598|char_star:15,char_end:21";
"ssl_context,type='identifier'\nline_star:598,line_end:598|char_star:33,char_end:44"[shape="point",fillcolor="#121013",style=filled];
"ctx.params['cert'] is ssl_context,type='comparison_operator'\nline_star:598,line_end:598|char_star:11,char_end:44"->"ssl_context,type='identifier'\nline_star:598,line_end:598|char_star:33,char_end:44";
"# no --key with SSLContext,type='comment'\nline_star:600,line_end:600|char_star:4,char_end:30"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:584,line_end:602|char_star:4,char_end:85"->"# no --key with SSLContext,type='comment'\nline_star:600,line_end:600|char_star:4,char_end:30";
"with pytest.raises(click.BadParameter):\n        run_command.make_context('run', ['--cert', 'ssl_context', '--key', __file__]),type='with_statement'\nline_star:601,line_end:602|char_star:4,char_end:85"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:584,line_end:602|char_star:4,char_end:85"->"with pytest.raises(click.BadParameter):\n        run_command.make_context('run', ['--cert', 'ssl_context', '--key', __file__]),type='with_statement'\nline_star:601,line_end:602|char_star:4,char_end:85";
"pytest.raises(click.BadParameter),type='with_clause'\nline_star:601,line_end:601|char_star:9,char_end:42"[shape="box",fillcolor="white",style=filled];
"with pytest.raises(click.BadParameter):\n        run_command.make_context('run', ['--cert', 'ssl_context', '--key', __file__]),type='with_statement'\nline_star:601,line_end:602|char_star:4,char_end:85"->"pytest.raises(click.BadParameter),type='with_clause'\nline_star:601,line_end:601|char_star:9,char_end:42";
"type='INFORMATION BLOCK'\nline_star:602,line_end:602|char_star:8,char_end:85"[shape="point",fillcolor="#121013",style=filled];
"with pytest.raises(click.BadParameter):\n        run_command.make_context('run', ['--cert', 'ssl_context', '--key', __file__]),type='with_statement'\nline_star:601,line_end:602|char_star:4,char_end:85"->"type='INFORMATION BLOCK'\nline_star:602,line_end:602|char_star:8,char_end:85";
"def test_run_cert_no_ssl(monkeypatch):\n    monkeypatch.setattr('flask.cli.ssl', None)\n    with pytest.raises(click.BadParameter):\n        run_command.make_context('run', ['--cert', 'not_here']),type='function_definition'\nline_star:605,line_end:608|char_star:0,char_end:63"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_run_cert_no_ssl(monkeypatch):\n    monkeypatch.setattr('flask.cli.ssl', None)\n    with pytest.raises(click.BadParameter):\n        run_command.make_context('run', ['--cert', 'not_here']),type='function_definition'\nline_star:605,line_end:608|char_star:0,char_end:63";
"test_run_cert_no_ssl,type='identifier'\nline_star:605,line_end:605|char_star:4,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"def test_run_cert_no_ssl(monkeypatch):\n    monkeypatch.setattr('flask.cli.ssl', None)\n    with pytest.raises(click.BadParameter):\n        run_command.make_context('run', ['--cert', 'not_here']),type='function_definition'\nline_star:605,line_end:608|char_star:0,char_end:63"->"test_run_cert_no_ssl,type='identifier'\nline_star:605,line_end:605|char_star:4,char_end:24";
"(monkeypatch),type='parameters'\nline_star:605,line_end:605|char_star:24,char_end:37"[shape="box",fillcolor="white",style=filled];
"def test_run_cert_no_ssl(monkeypatch):\n    monkeypatch.setattr('flask.cli.ssl', None)\n    with pytest.raises(click.BadParameter):\n        run_command.make_context('run', ['--cert', 'not_here']),type='function_definition'\nline_star:605,line_end:608|char_star:0,char_end:63"->"(monkeypatch),type='parameters'\nline_star:605,line_end:605|char_star:24,char_end:37";
"monkeypatch,type='identifier'\nline_star:605,line_end:605|char_star:25,char_end:36"[shape="point",fillcolor="#121013",style=filled];
"(monkeypatch),type='parameters'\nline_star:605,line_end:605|char_star:24,char_end:37"->"monkeypatch,type='identifier'\nline_star:605,line_end:605|char_star:25,char_end:36";
"type='INFORMATION BLOCK'\nline_star:606,line_end:608|char_star:4,char_end:63"[shape="point",fillcolor="#121013",style=filled];
"def test_run_cert_no_ssl(monkeypatch):\n    monkeypatch.setattr('flask.cli.ssl', None)\n    with pytest.raises(click.BadParameter):\n        run_command.make_context('run', ['--cert', 'not_here']),type='function_definition'\nline_star:605,line_end:608|char_star:0,char_end:63"->"type='INFORMATION BLOCK'\nline_star:606,line_end:608|char_star:4,char_end:63";
"with pytest.raises(click.BadParameter):\n        run_command.make_context('run', ['--cert', 'not_here']),type='with_statement'\nline_star:607,line_end:608|char_star:4,char_end:63"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:606,line_end:608|char_star:4,char_end:63"->"with pytest.raises(click.BadParameter):\n        run_command.make_context('run', ['--cert', 'not_here']),type='with_statement'\nline_star:607,line_end:608|char_star:4,char_end:63";
"pytest.raises(click.BadParameter),type='with_clause'\nline_star:607,line_end:607|char_star:9,char_end:42"[shape="box",fillcolor="white",style=filled];
"with pytest.raises(click.BadParameter):\n        run_command.make_context('run', ['--cert', 'not_here']),type='with_statement'\nline_star:607,line_end:608|char_star:4,char_end:63"->"pytest.raises(click.BadParameter),type='with_clause'\nline_star:607,line_end:607|char_star:9,char_end:42";
"type='INFORMATION BLOCK'\nline_star:608,line_end:608|char_star:8,char_end:63"[shape="point",fillcolor="#121013",style=filled];
"with pytest.raises(click.BadParameter):\n        run_command.make_context('run', ['--cert', 'not_here']),type='with_statement'\nline_star:607,line_end:608|char_star:4,char_end:63"->"type='INFORMATION BLOCK'\nline_star:608,line_end:608|char_star:8,char_end:63";
"def test_cli_blueprints(app):\n    '''Test blueprint commands register correctly to the application'''\n    custom = Blueprint('custom', __name__, cli_group='customized')\n    nested = Blueprint('nested', __name__)\n    merged = Blueprint('merged', __name__, cli_group=None)\n    late = Blueprint('late', __name__)\n\n    @custom.cli.command('custom')\n    def custom_command():\n        click.echo('custom_result')\n\n    @nested.cli.command('nested')\n    def nested_command():\n        click.echo('nested_result')\n\n    @merged.cli.command('merged')\n    def merged_command():\n        click.echo('merged_result')\n\n    @late.cli.command('late')\n    def late_command():\n        click.echo('late_result')\n\n    app.register_blueprint(custom)\n    app.register_blueprint(nested)\n    app.register_blueprint(merged)\n    app.register_blueprint(late, cli_group='late_registration')\n\n    app_runner = app.test_cli_runner()\n\n    result = app_runner.invoke(args=['customized', 'custom'])\n    assert 'custom_result' in result.output\n\n    result = app_runner.invoke(args=['nested', 'nested'])\n    assert 'nested_result' in result.output\n\n    result = app_runner.invoke(args=['merged'])\n    assert 'merged_result' in result.output\n\n    result = app_runner.invoke(args=['late_registration', 'late'])\n    assert 'late_result' in result.output,type='function_definition'\nline_star:611,line_end:651|char_star:0,char_end:41"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_cli_blueprints(app):\n    '''Test blueprint commands register correctly to the application'''\n    custom = Blueprint('custom', __name__, cli_group='customized')\n    nested = Blueprint('nested', __name__)\n    merged = Blueprint('merged', __name__, cli_group=None)\n    late = Blueprint('late', __name__)\n\n    @custom.cli.command('custom')\n    def custom_command():\n        click.echo('custom_result')\n\n    @nested.cli.command('nested')\n    def nested_command():\n        click.echo('nested_result')\n\n    @merged.cli.command('merged')\n    def merged_command():\n        click.echo('merged_result')\n\n    @late.cli.command('late')\n    def late_command():\n        click.echo('late_result')\n\n    app.register_blueprint(custom)\n    app.register_blueprint(nested)\n    app.register_blueprint(merged)\n    app.register_blueprint(late, cli_group='late_registration')\n\n    app_runner = app.test_cli_runner()\n\n    result = app_runner.invoke(args=['customized', 'custom'])\n    assert 'custom_result' in result.output\n\n    result = app_runner.invoke(args=['nested', 'nested'])\n    assert 'nested_result' in result.output\n\n    result = app_runner.invoke(args=['merged'])\n    assert 'merged_result' in result.output\n\n    result = app_runner.invoke(args=['late_registration', 'late'])\n    assert 'late_result' in result.output,type='function_definition'\nline_star:611,line_end:651|char_star:0,char_end:41";
"test_cli_blueprints,type='identifier'\nline_star:611,line_end:611|char_star:4,char_end:23"[shape="point",fillcolor="#121013",style=filled];
"def test_cli_blueprints(app):\n    '''Test blueprint commands register correctly to the application'''\n    custom = Blueprint('custom', __name__, cli_group='customized')\n    nested = Blueprint('nested', __name__)\n    merged = Blueprint('merged', __name__, cli_group=None)\n    late = Blueprint('late', __name__)\n\n    @custom.cli.command('custom')\n    def custom_command():\n        click.echo('custom_result')\n\n    @nested.cli.command('nested')\n    def nested_command():\n        click.echo('nested_result')\n\n    @merged.cli.command('merged')\n    def merged_command():\n        click.echo('merged_result')\n\n    @late.cli.command('late')\n    def late_command():\n        click.echo('late_result')\n\n    app.register_blueprint(custom)\n    app.register_blueprint(nested)\n    app.register_blueprint(merged)\n    app.register_blueprint(late, cli_group='late_registration')\n\n    app_runner = app.test_cli_runner()\n\n    result = app_runner.invoke(args=['customized', 'custom'])\n    assert 'custom_result' in result.output\n\n    result = app_runner.invoke(args=['nested', 'nested'])\n    assert 'nested_result' in result.output\n\n    result = app_runner.invoke(args=['merged'])\n    assert 'merged_result' in result.output\n\n    result = app_runner.invoke(args=['late_registration', 'late'])\n    assert 'late_result' in result.output,type='function_definition'\nline_star:611,line_end:651|char_star:0,char_end:41"->"test_cli_blueprints,type='identifier'\nline_star:611,line_end:611|char_star:4,char_end:23";
"(app),type='parameters'\nline_star:611,line_end:611|char_star:23,char_end:28"[shape="box",fillcolor="white",style=filled];
"def test_cli_blueprints(app):\n    '''Test blueprint commands register correctly to the application'''\n    custom = Blueprint('custom', __name__, cli_group='customized')\n    nested = Blueprint('nested', __name__)\n    merged = Blueprint('merged', __name__, cli_group=None)\n    late = Blueprint('late', __name__)\n\n    @custom.cli.command('custom')\n    def custom_command():\n        click.echo('custom_result')\n\n    @nested.cli.command('nested')\n    def nested_command():\n        click.echo('nested_result')\n\n    @merged.cli.command('merged')\n    def merged_command():\n        click.echo('merged_result')\n\n    @late.cli.command('late')\n    def late_command():\n        click.echo('late_result')\n\n    app.register_blueprint(custom)\n    app.register_blueprint(nested)\n    app.register_blueprint(merged)\n    app.register_blueprint(late, cli_group='late_registration')\n\n    app_runner = app.test_cli_runner()\n\n    result = app_runner.invoke(args=['customized', 'custom'])\n    assert 'custom_result' in result.output\n\n    result = app_runner.invoke(args=['nested', 'nested'])\n    assert 'nested_result' in result.output\n\n    result = app_runner.invoke(args=['merged'])\n    assert 'merged_result' in result.output\n\n    result = app_runner.invoke(args=['late_registration', 'late'])\n    assert 'late_result' in result.output,type='function_definition'\nline_star:611,line_end:651|char_star:0,char_end:41"->"(app),type='parameters'\nline_star:611,line_end:611|char_star:23,char_end:28";
"app,type='identifier'\nline_star:611,line_end:611|char_star:24,char_end:27"[shape="point",fillcolor="#121013",style=filled];
"(app),type='parameters'\nline_star:611,line_end:611|char_star:23,char_end:28"->"app,type='identifier'\nline_star:611,line_end:611|char_star:24,char_end:27";
"type='INFORMATION BLOCK'\nline_star:612,line_end:651|char_star:4,char_end:41"[shape="point",fillcolor="#121013",style=filled];
"def test_cli_blueprints(app):\n    '''Test blueprint commands register correctly to the application'''\n    custom = Blueprint('custom', __name__, cli_group='customized')\n    nested = Blueprint('nested', __name__)\n    merged = Blueprint('merged', __name__, cli_group=None)\n    late = Blueprint('late', __name__)\n\n    @custom.cli.command('custom')\n    def custom_command():\n        click.echo('custom_result')\n\n    @nested.cli.command('nested')\n    def nested_command():\n        click.echo('nested_result')\n\n    @merged.cli.command('merged')\n    def merged_command():\n        click.echo('merged_result')\n\n    @late.cli.command('late')\n    def late_command():\n        click.echo('late_result')\n\n    app.register_blueprint(custom)\n    app.register_blueprint(nested)\n    app.register_blueprint(merged)\n    app.register_blueprint(late, cli_group='late_registration')\n\n    app_runner = app.test_cli_runner()\n\n    result = app_runner.invoke(args=['customized', 'custom'])\n    assert 'custom_result' in result.output\n\n    result = app_runner.invoke(args=['nested', 'nested'])\n    assert 'nested_result' in result.output\n\n    result = app_runner.invoke(args=['merged'])\n    assert 'merged_result' in result.output\n\n    result = app_runner.invoke(args=['late_registration', 'late'])\n    assert 'late_result' in result.output,type='function_definition'\nline_star:611,line_end:651|char_star:0,char_end:41"->"type='INFORMATION BLOCK'\nline_star:612,line_end:651|char_star:4,char_end:41";
"@custom.cli.command('custom')\n    def custom_command():\n        click.echo('custom_result'),type='decorated_definition'\nline_star:618,line_end:620|char_star:4,char_end:35"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:612,line_end:651|char_star:4,char_end:41"->"@custom.cli.command('custom')\n    def custom_command():\n        click.echo('custom_result'),type='decorated_definition'\nline_star:618,line_end:620|char_star:4,char_end:35";
"@custom.cli.command('custom'),type='decorator'\nline_star:618,line_end:618|char_star:4,char_end:33"[shape="box",fillcolor="white",style=filled];
"@custom.cli.command('custom')\n    def custom_command():\n        click.echo('custom_result'),type='decorated_definition'\nline_star:618,line_end:620|char_star:4,char_end:35"->"@custom.cli.command('custom'),type='decorator'\nline_star:618,line_end:618|char_star:4,char_end:33";
"def custom_command():\n        click.echo('custom_result'),type='function_definition'\nline_star:619,line_end:620|char_star:4,char_end:35"[shape="box",fillcolor="#cee6b4",style=filled];
"@custom.cli.command('custom')\n    def custom_command():\n        click.echo('custom_result'),type='decorated_definition'\nline_star:618,line_end:620|char_star:4,char_end:35"->"def custom_command():\n        click.echo('custom_result'),type='function_definition'\nline_star:619,line_end:620|char_star:4,char_end:35";
"custom_command,type='identifier'\nline_star:619,line_end:619|char_star:8,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"def custom_command():\n        click.echo('custom_result'),type='function_definition'\nline_star:619,line_end:620|char_star:4,char_end:35"->"custom_command,type='identifier'\nline_star:619,line_end:619|char_star:8,char_end:22";
"type='INFORMATION BLOCK'\nline_star:620,line_end:620|char_star:8,char_end:35"[shape="point",fillcolor="#121013",style=filled];
"def custom_command():\n        click.echo('custom_result'),type='function_definition'\nline_star:619,line_end:620|char_star:4,char_end:35"->"type='INFORMATION BLOCK'\nline_star:620,line_end:620|char_star:8,char_end:35";
"@nested.cli.command('nested')\n    def nested_command():\n        click.echo('nested_result'),type='decorated_definition'\nline_star:622,line_end:624|char_star:4,char_end:35"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:612,line_end:651|char_star:4,char_end:41"->"@nested.cli.command('nested')\n    def nested_command():\n        click.echo('nested_result'),type='decorated_definition'\nline_star:622,line_end:624|char_star:4,char_end:35";
"@nested.cli.command('nested'),type='decorator'\nline_star:622,line_end:622|char_star:4,char_end:33"[shape="box",fillcolor="white",style=filled];
"@nested.cli.command('nested')\n    def nested_command():\n        click.echo('nested_result'),type='decorated_definition'\nline_star:622,line_end:624|char_star:4,char_end:35"->"@nested.cli.command('nested'),type='decorator'\nline_star:622,line_end:622|char_star:4,char_end:33";
"def nested_command():\n        click.echo('nested_result'),type='function_definition'\nline_star:623,line_end:624|char_star:4,char_end:35"[shape="box",fillcolor="#cee6b4",style=filled];
"@nested.cli.command('nested')\n    def nested_command():\n        click.echo('nested_result'),type='decorated_definition'\nline_star:622,line_end:624|char_star:4,char_end:35"->"def nested_command():\n        click.echo('nested_result'),type='function_definition'\nline_star:623,line_end:624|char_star:4,char_end:35";
"nested_command,type='identifier'\nline_star:623,line_end:623|char_star:8,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"def nested_command():\n        click.echo('nested_result'),type='function_definition'\nline_star:623,line_end:624|char_star:4,char_end:35"->"nested_command,type='identifier'\nline_star:623,line_end:623|char_star:8,char_end:22";
"type='INFORMATION BLOCK'\nline_star:624,line_end:624|char_star:8,char_end:35"[shape="point",fillcolor="#121013",style=filled];
"def nested_command():\n        click.echo('nested_result'),type='function_definition'\nline_star:623,line_end:624|char_star:4,char_end:35"->"type='INFORMATION BLOCK'\nline_star:624,line_end:624|char_star:8,char_end:35";
"@merged.cli.command('merged')\n    def merged_command():\n        click.echo('merged_result'),type='decorated_definition'\nline_star:626,line_end:628|char_star:4,char_end:35"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:612,line_end:651|char_star:4,char_end:41"->"@merged.cli.command('merged')\n    def merged_command():\n        click.echo('merged_result'),type='decorated_definition'\nline_star:626,line_end:628|char_star:4,char_end:35";
"@merged.cli.command('merged'),type='decorator'\nline_star:626,line_end:626|char_star:4,char_end:33"[shape="box",fillcolor="white",style=filled];
"@merged.cli.command('merged')\n    def merged_command():\n        click.echo('merged_result'),type='decorated_definition'\nline_star:626,line_end:628|char_star:4,char_end:35"->"@merged.cli.command('merged'),type='decorator'\nline_star:626,line_end:626|char_star:4,char_end:33";
"def merged_command():\n        click.echo('merged_result'),type='function_definition'\nline_star:627,line_end:628|char_star:4,char_end:35"[shape="box",fillcolor="#cee6b4",style=filled];
"@merged.cli.command('merged')\n    def merged_command():\n        click.echo('merged_result'),type='decorated_definition'\nline_star:626,line_end:628|char_star:4,char_end:35"->"def merged_command():\n        click.echo('merged_result'),type='function_definition'\nline_star:627,line_end:628|char_star:4,char_end:35";
"merged_command,type='identifier'\nline_star:627,line_end:627|char_star:8,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"def merged_command():\n        click.echo('merged_result'),type='function_definition'\nline_star:627,line_end:628|char_star:4,char_end:35"->"merged_command,type='identifier'\nline_star:627,line_end:627|char_star:8,char_end:22";
"type='INFORMATION BLOCK'\nline_star:628,line_end:628|char_star:8,char_end:35"[shape="point",fillcolor="#121013",style=filled];
"def merged_command():\n        click.echo('merged_result'),type='function_definition'\nline_star:627,line_end:628|char_star:4,char_end:35"->"type='INFORMATION BLOCK'\nline_star:628,line_end:628|char_star:8,char_end:35";
"@late.cli.command('late')\n    def late_command():\n        click.echo('late_result'),type='decorated_definition'\nline_star:630,line_end:632|char_star:4,char_end:33"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:612,line_end:651|char_star:4,char_end:41"->"@late.cli.command('late')\n    def late_command():\n        click.echo('late_result'),type='decorated_definition'\nline_star:630,line_end:632|char_star:4,char_end:33";
"@late.cli.command('late'),type='decorator'\nline_star:630,line_end:630|char_star:4,char_end:29"[shape="box",fillcolor="white",style=filled];
"@late.cli.command('late')\n    def late_command():\n        click.echo('late_result'),type='decorated_definition'\nline_star:630,line_end:632|char_star:4,char_end:33"->"@late.cli.command('late'),type='decorator'\nline_star:630,line_end:630|char_star:4,char_end:29";
"def late_command():\n        click.echo('late_result'),type='function_definition'\nline_star:631,line_end:632|char_star:4,char_end:33"[shape="box",fillcolor="#cee6b4",style=filled];
"@late.cli.command('late')\n    def late_command():\n        click.echo('late_result'),type='decorated_definition'\nline_star:630,line_end:632|char_star:4,char_end:33"->"def late_command():\n        click.echo('late_result'),type='function_definition'\nline_star:631,line_end:632|char_star:4,char_end:33";
"late_command,type='identifier'\nline_star:631,line_end:631|char_star:8,char_end:20"[shape="point",fillcolor="#121013",style=filled];
"def late_command():\n        click.echo('late_result'),type='function_definition'\nline_star:631,line_end:632|char_star:4,char_end:33"->"late_command,type='identifier'\nline_star:631,line_end:631|char_star:8,char_end:20";
"type='INFORMATION BLOCK'\nline_star:632,line_end:632|char_star:8,char_end:33"[shape="point",fillcolor="#121013",style=filled];
"def late_command():\n        click.echo('late_result'),type='function_definition'\nline_star:631,line_end:632|char_star:4,char_end:33"->"type='INFORMATION BLOCK'\nline_star:632,line_end:632|char_star:8,char_end:33";
"assert 'custom_result' in result.output,type='assert_statement'\nline_star:642,line_end:642|char_star:4,char_end:43"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:612,line_end:651|char_star:4,char_end:41"->"assert 'custom_result' in result.output,type='assert_statement'\nline_star:642,line_end:642|char_star:4,char_end:43";
"'custom_result' in result.output,type='comparison_operator'\nline_star:642,line_end:642|char_star:11,char_end:43"[shape="box",fillcolor="white",style=filled];
"assert 'custom_result' in result.output,type='assert_statement'\nline_star:642,line_end:642|char_star:4,char_end:43"->"'custom_result' in result.output,type='comparison_operator'\nline_star:642,line_end:642|char_star:11,char_end:43";
"result.output,type='attribute'\nline_star:642,line_end:642|char_star:30,char_end:43"[shape="box",fillcolor="white",style=filled];
"'custom_result' in result.output,type='comparison_operator'\nline_star:642,line_end:642|char_star:11,char_end:43"->"result.output,type='attribute'\nline_star:642,line_end:642|char_star:30,char_end:43";
"result,type='identifier'\nline_star:642,line_end:642|char_star:30,char_end:36"[shape="point",fillcolor="#121013",style=filled];
"result.output,type='attribute'\nline_star:642,line_end:642|char_star:30,char_end:43"->"result,type='identifier'\nline_star:642,line_end:642|char_star:30,char_end:36";
"output,type='identifier'\nline_star:642,line_end:642|char_star:37,char_end:43"[shape="point",fillcolor="#121013",style=filled];
"result.output,type='attribute'\nline_star:642,line_end:642|char_star:30,char_end:43"->"output,type='identifier'\nline_star:642,line_end:642|char_star:37,char_end:43";
"assert 'nested_result' in result.output,type='assert_statement'\nline_star:645,line_end:645|char_star:4,char_end:43"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:612,line_end:651|char_star:4,char_end:41"->"assert 'nested_result' in result.output,type='assert_statement'\nline_star:645,line_end:645|char_star:4,char_end:43";
"'nested_result' in result.output,type='comparison_operator'\nline_star:645,line_end:645|char_star:11,char_end:43"[shape="box",fillcolor="white",style=filled];
"assert 'nested_result' in result.output,type='assert_statement'\nline_star:645,line_end:645|char_star:4,char_end:43"->"'nested_result' in result.output,type='comparison_operator'\nline_star:645,line_end:645|char_star:11,char_end:43";
"result.output,type='attribute'\nline_star:645,line_end:645|char_star:30,char_end:43"[shape="box",fillcolor="white",style=filled];
"'nested_result' in result.output,type='comparison_operator'\nline_star:645,line_end:645|char_star:11,char_end:43"->"result.output,type='attribute'\nline_star:645,line_end:645|char_star:30,char_end:43";
"result,type='identifier'\nline_star:645,line_end:645|char_star:30,char_end:36"[shape="point",fillcolor="#121013",style=filled];
"result.output,type='attribute'\nline_star:645,line_end:645|char_star:30,char_end:43"->"result,type='identifier'\nline_star:645,line_end:645|char_star:30,char_end:36";
"output,type='identifier'\nline_star:645,line_end:645|char_star:37,char_end:43"[shape="point",fillcolor="#121013",style=filled];
"result.output,type='attribute'\nline_star:645,line_end:645|char_star:30,char_end:43"->"output,type='identifier'\nline_star:645,line_end:645|char_star:37,char_end:43";
"assert 'merged_result' in result.output,type='assert_statement'\nline_star:648,line_end:648|char_star:4,char_end:43"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:612,line_end:651|char_star:4,char_end:41"->"assert 'merged_result' in result.output,type='assert_statement'\nline_star:648,line_end:648|char_star:4,char_end:43";
"'merged_result' in result.output,type='comparison_operator'\nline_star:648,line_end:648|char_star:11,char_end:43"[shape="box",fillcolor="white",style=filled];
"assert 'merged_result' in result.output,type='assert_statement'\nline_star:648,line_end:648|char_star:4,char_end:43"->"'merged_result' in result.output,type='comparison_operator'\nline_star:648,line_end:648|char_star:11,char_end:43";
"result.output,type='attribute'\nline_star:648,line_end:648|char_star:30,char_end:43"[shape="box",fillcolor="white",style=filled];
"'merged_result' in result.output,type='comparison_operator'\nline_star:648,line_end:648|char_star:11,char_end:43"->"result.output,type='attribute'\nline_star:648,line_end:648|char_star:30,char_end:43";
"result,type='identifier'\nline_star:648,line_end:648|char_star:30,char_end:36"[shape="point",fillcolor="#121013",style=filled];
"result.output,type='attribute'\nline_star:648,line_end:648|char_star:30,char_end:43"->"result,type='identifier'\nline_star:648,line_end:648|char_star:30,char_end:36";
"output,type='identifier'\nline_star:648,line_end:648|char_star:37,char_end:43"[shape="point",fillcolor="#121013",style=filled];
"result.output,type='attribute'\nline_star:648,line_end:648|char_star:30,char_end:43"->"output,type='identifier'\nline_star:648,line_end:648|char_star:37,char_end:43";
"assert 'late_result' in result.output,type='assert_statement'\nline_star:651,line_end:651|char_star:4,char_end:41"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:612,line_end:651|char_star:4,char_end:41"->"assert 'late_result' in result.output,type='assert_statement'\nline_star:651,line_end:651|char_star:4,char_end:41";
"'late_result' in result.output,type='comparison_operator'\nline_star:651,line_end:651|char_star:11,char_end:41"[shape="box",fillcolor="white",style=filled];
"assert 'late_result' in result.output,type='assert_statement'\nline_star:651,line_end:651|char_star:4,char_end:41"->"'late_result' in result.output,type='comparison_operator'\nline_star:651,line_end:651|char_star:11,char_end:41";
"result.output,type='attribute'\nline_star:651,line_end:651|char_star:28,char_end:41"[shape="box",fillcolor="white",style=filled];
"'late_result' in result.output,type='comparison_operator'\nline_star:651,line_end:651|char_star:11,char_end:41"->"result.output,type='attribute'\nline_star:651,line_end:651|char_star:28,char_end:41";
"result,type='identifier'\nline_star:651,line_end:651|char_star:28,char_end:34"[shape="point",fillcolor="#121013",style=filled];
"result.output,type='attribute'\nline_star:651,line_end:651|char_star:28,char_end:41"->"result,type='identifier'\nline_star:651,line_end:651|char_star:28,char_end:34";
"output,type='identifier'\nline_star:651,line_end:651|char_star:35,char_end:41"[shape="point",fillcolor="#121013",style=filled];
"result.output,type='attribute'\nline_star:651,line_end:651|char_star:28,char_end:41"->"output,type='identifier'\nline_star:651,line_end:651|char_star:35,char_end:41";
"def test_cli_empty(app):\n    '''If a Blueprint's CLI group is empty, do not register it.'''\n    bp = Blueprint('blue', __name__, cli_group='blue')\n    app.register_blueprint(bp)\n\n    result = app.test_cli_runner().invoke(args=['blue', '--help'])\n    assert result.exit_code == 2, f'Unexpected success:\n\n{result.output}',type='function_definition'\nline_star:654,line_end:660|char_star:0,char_end:75"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_cli_empty(app):\n    '''If a Blueprint's CLI group is empty, do not register it.'''\n    bp = Blueprint('blue', __name__, cli_group='blue')\n    app.register_blueprint(bp)\n\n    result = app.test_cli_runner().invoke(args=['blue', '--help'])\n    assert result.exit_code == 2, f'Unexpected success:\n\n{result.output}',type='function_definition'\nline_star:654,line_end:660|char_star:0,char_end:75";
"test_cli_empty,type='identifier'\nline_star:654,line_end:654|char_star:4,char_end:18"[shape="point",fillcolor="#121013",style=filled];
"def test_cli_empty(app):\n    '''If a Blueprint's CLI group is empty, do not register it.'''\n    bp = Blueprint('blue', __name__, cli_group='blue')\n    app.register_blueprint(bp)\n\n    result = app.test_cli_runner().invoke(args=['blue', '--help'])\n    assert result.exit_code == 2, f'Unexpected success:\n\n{result.output}',type='function_definition'\nline_star:654,line_end:660|char_star:0,char_end:75"->"test_cli_empty,type='identifier'\nline_star:654,line_end:654|char_star:4,char_end:18";
"(app),type='parameters'\nline_star:654,line_end:654|char_star:18,char_end:23"[shape="box",fillcolor="white",style=filled];
"def test_cli_empty(app):\n    '''If a Blueprint's CLI group is empty, do not register it.'''\n    bp = Blueprint('blue', __name__, cli_group='blue')\n    app.register_blueprint(bp)\n\n    result = app.test_cli_runner().invoke(args=['blue', '--help'])\n    assert result.exit_code == 2, f'Unexpected success:\n\n{result.output}',type='function_definition'\nline_star:654,line_end:660|char_star:0,char_end:75"->"(app),type='parameters'\nline_star:654,line_end:654|char_star:18,char_end:23";
"app,type='identifier'\nline_star:654,line_end:654|char_star:19,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"(app),type='parameters'\nline_star:654,line_end:654|char_star:18,char_end:23"->"app,type='identifier'\nline_star:654,line_end:654|char_star:19,char_end:22";
"type='INFORMATION BLOCK'\nline_star:655,line_end:660|char_star:4,char_end:75"[shape="point",fillcolor="#121013",style=filled];
"def test_cli_empty(app):\n    '''If a Blueprint's CLI group is empty, do not register it.'''\n    bp = Blueprint('blue', __name__, cli_group='blue')\n    app.register_blueprint(bp)\n\n    result = app.test_cli_runner().invoke(args=['blue', '--help'])\n    assert result.exit_code == 2, f'Unexpected success:\n\n{result.output}',type='function_definition'\nline_star:654,line_end:660|char_star:0,char_end:75"->"type='INFORMATION BLOCK'\nline_star:655,line_end:660|char_star:4,char_end:75";
"assert result.exit_code == 2, f'Unexpected success:\n\n{result.output}',type='assert_statement'\nline_star:660,line_end:660|char_star:4,char_end:75"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:655,line_end:660|char_star:4,char_end:75"->"assert result.exit_code == 2, f'Unexpected success:\n\n{result.output}',type='assert_statement'\nline_star:660,line_end:660|char_star:4,char_end:75";
"result.exit_code == 2,type='comparison_operator'\nline_star:660,line_end:660|char_star:11,char_end:32"[shape="box",fillcolor="white",style=filled];
"assert result.exit_code == 2, f'Unexpected success:\n\n{result.output}',type='assert_statement'\nline_star:660,line_end:660|char_star:4,char_end:75"->"result.exit_code == 2,type='comparison_operator'\nline_star:660,line_end:660|char_star:11,char_end:32";
"result.exit_code,type='attribute'\nline_star:660,line_end:660|char_star:11,char_end:27"[shape="box",fillcolor="white",style=filled];
"result.exit_code == 2,type='comparison_operator'\nline_star:660,line_end:660|char_star:11,char_end:32"->"result.exit_code,type='attribute'\nline_star:660,line_end:660|char_star:11,char_end:27";
"result,type='identifier'\nline_star:660,line_end:660|char_star:11,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"result.exit_code,type='attribute'\nline_star:660,line_end:660|char_star:11,char_end:27"->"result,type='identifier'\nline_star:660,line_end:660|char_star:11,char_end:17";
"exit_code,type='identifier'\nline_star:660,line_end:660|char_star:18,char_end:27"[shape="point",fillcolor="#121013",style=filled];
"result.exit_code,type='attribute'\nline_star:660,line_end:660|char_star:11,char_end:27"->"exit_code,type='identifier'\nline_star:660,line_end:660|char_star:18,char_end:27";
"import os\nimport ssl\nimport sys\nimport types\nfrom functools import partial\nimport click\nimport pytest\nfrom _pytest.monkeypatch import notset\nfrom click.testing import CliRunner\nfrom flask import Blueprint\nfrom flask import current_app\nfrom flask import Flask\nfrom flask.cli import AppGroup\nfrom flask.cli import dotenv\nfrom flask.cli import find_best_app\nfrom flask.cli import FlaskGroup\nfrom flask.cli import get_version\nfrom flask.cli import load_dotenv\nfrom flask.cli import locate_app\nfrom flask.cli import NoAppException\nfrom flask.cli import prepare_import\nfrom flask.cli import run_command\nfrom flask.cli import ScriptInfo\nfrom flask.cli import with_appcontext\nfrom cliapp.app import testapp\nfrom flask import __version__ as flask_version\nfrom werkzeug import __version__ as werkzeug_version\nfrom platform import python_version\nfrom flask.cli import cli\nfrom flask.cli import cl"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"import os\nimport ssl\nimport sys\nimport types\nfrom functools import partial\nimport click\nimport pytest\nfrom _pytest.monkeypatch import notset\nfrom click.testing import CliRunner\nfrom flask import Blueprint\nfrom flask import current_app\nfrom flask import Flask\nfrom flask.cli import AppGroup\nfrom flask.cli import dotenv\nfrom flask.cli import find_best_app\nfrom flask.cli import FlaskGroup\nfrom flask.cli import get_version\nfrom flask.cli import load_dotenv\nfrom flask.cli import locate_app\nfrom flask.cli import NoAppException\nfrom flask.cli import prepare_import\nfrom flask.cli import run_command\nfrom flask.cli import ScriptInfo\nfrom flask.cli import with_appcontext\nfrom cliapp.app import testapp\nfrom flask import __version__ as flask_version\nfrom werkzeug import __version__ as werkzeug_version\nfrom platform import python_version\nfrom flask.cli import cli\nfrom flask.cli import cl"
}
