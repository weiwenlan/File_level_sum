digraph G{
rankdir="LR";
"MODULE"[shape="box",fillcolor="white",style=filled];
"import click,type='import_statement'\nline_star:0,line_end:0|char_star:0,char_end:12"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"import click,type='import_statement'\nline_star:0,line_end:0|char_star:0,char_end:12";
"import pytest,type='import_statement'\nline_star:1,line_end:1|char_star:0,char_end:13"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"import pytest,type='import_statement'\nline_star:1,line_end:1|char_star:0,char_end:13";
"import werkzeug,type='import_statement'\nline_star:2,line_end:2|char_star:0,char_end:15"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"import werkzeug,type='import_statement'\nline_star:2,line_end:2|char_star:0,char_end:15";
"import flask,type='import_statement'\nline_star:4,line_end:4|char_star:0,char_end:12"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"import flask,type='import_statement'\nline_star:4,line_end:4|char_star:0,char_end:12";
"from flask import appcontext_popped,type='import_from_statement'\nline_star:5,line_end:5|char_star:0,char_end:35"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"from flask import appcontext_popped,type='import_from_statement'\nline_star:5,line_end:5|char_star:0,char_end:35";
"from flask.cli import ScriptInfo,type='import_from_statement'\nline_star:6,line_end:6|char_star:0,char_end:32"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"from flask.cli import ScriptInfo,type='import_from_statement'\nline_star:6,line_end:6|char_star:0,char_end:32";
"from flask.json import jsonify,type='import_from_statement'\nline_star:7,line_end:7|char_star:0,char_end:30"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"from flask.json import jsonify,type='import_from_statement'\nline_star:7,line_end:7|char_star:0,char_end:30";
"from flask.testing import EnvironBuilder,type='import_from_statement'\nline_star:8,line_end:8|char_star:0,char_end:40"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"from flask.testing import EnvironBuilder,type='import_from_statement'\nline_star:8,line_end:8|char_star:0,char_end:40";
"from flask.testing import FlaskCliRunner,type='import_from_statement'\nline_star:9,line_end:9|char_star:0,char_end:40"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"from flask.testing import FlaskCliRunner,type='import_from_statement'\nline_star:9,line_end:9|char_star:0,char_end:40";
"try:\n    import blinker\nexcept ImportError:\n    blinker = None,type='try_statement'\nline_star:11,line_end:14|char_star:0,char_end:18"[shape="box",fillcolor="white",style=filled];
"MODULE"->"try:\n    import blinker\nexcept ImportError:\n    blinker = None,type='try_statement'\nline_star:11,line_end:14|char_star:0,char_end:18";
"try,type='try'\nline_star:11,line_end:11|char_star:0,char_end:3"[shape="box",fillcolor="white",style=filled];
"try:\n    import blinker\nexcept ImportError:\n    blinker = None,type='try_statement'\nline_star:11,line_end:14|char_star:0,char_end:18"->"try,type='try'\nline_star:11,line_end:11|char_star:0,char_end:3";
"type='INFORMATION BLOCK'\nline_star:12,line_end:12|char_star:4,char_end:18"[shape="point",fillcolor="#121013",style=filled];
"try:\n    import blinker\nexcept ImportError:\n    blinker = None,type='try_statement'\nline_star:11,line_end:14|char_star:0,char_end:18"->"type='INFORMATION BLOCK'\nline_star:12,line_end:12|char_star:4,char_end:18";
"import blinker,type='import_statement'\nline_star:12,line_end:12|char_star:4,char_end:18"[shape="box",fillcolor="#f48b29",style=filled];
"type='INFORMATION BLOCK'\nline_star:12,line_end:12|char_star:4,char_end:18"->"import blinker,type='import_statement'\nline_star:12,line_end:12|char_star:4,char_end:18";
"except ImportError:\n    blinker = None,type='except_clause'\nline_star:13,line_end:14|char_star:0,char_end:18"[shape="box",fillcolor="white",style=filled];
"try:\n    import blinker\nexcept ImportError:\n    blinker = None,type='try_statement'\nline_star:11,line_end:14|char_star:0,char_end:18"->"except ImportError:\n    blinker = None,type='except_clause'\nline_star:13,line_end:14|char_star:0,char_end:18";
"except,type='except'\nline_star:13,line_end:13|char_star:0,char_end:6"[shape="box",fillcolor="white",style=filled];
"except ImportError:\n    blinker = None,type='except_clause'\nline_star:13,line_end:14|char_star:0,char_end:18"->"except,type='except'\nline_star:13,line_end:13|char_star:0,char_end:6";
"ImportError,type='identifier'\nline_star:13,line_end:13|char_star:7,char_end:18"[shape="point",fillcolor="#121013",style=filled];
"except ImportError:\n    blinker = None,type='except_clause'\nline_star:13,line_end:14|char_star:0,char_end:18"->"ImportError,type='identifier'\nline_star:13,line_end:13|char_star:7,char_end:18";
"type='INFORMATION BLOCK'\nline_star:14,line_end:14|char_star:4,char_end:18"[shape="point",fillcolor="#121013",style=filled];
"except ImportError:\n    blinker = None,type='except_clause'\nline_star:13,line_end:14|char_star:0,char_end:18"->"type='INFORMATION BLOCK'\nline_star:14,line_end:14|char_star:4,char_end:18";
"def test_environ_defaults_from_config(app, client):\n    app.config['SERVER_NAME'] = 'example.com:1234'\n    app.config['APPLICATION_ROOT'] = '/foo'\n\n    @app.route('/')\n    def index():\n        return flask.request.url\n\n    ctx = app.test_request_context()\n    assert ctx.request.url == 'http://example.com:1234/foo/'\n\n    rv = client.get('/')\n    assert rv.data == b'http://example.com:1234/foo/',type='function_definition'\nline_star:17,line_end:29|char_star:0,char_end:53"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_environ_defaults_from_config(app, client):\n    app.config['SERVER_NAME'] = 'example.com:1234'\n    app.config['APPLICATION_ROOT'] = '/foo'\n\n    @app.route('/')\n    def index():\n        return flask.request.url\n\n    ctx = app.test_request_context()\n    assert ctx.request.url == 'http://example.com:1234/foo/'\n\n    rv = client.get('/')\n    assert rv.data == b'http://example.com:1234/foo/',type='function_definition'\nline_star:17,line_end:29|char_star:0,char_end:53";
"test_environ_defaults_from_config,type='identifier'\nline_star:17,line_end:17|char_star:4,char_end:37"[shape="point",fillcolor="#121013",style=filled];
"def test_environ_defaults_from_config(app, client):\n    app.config['SERVER_NAME'] = 'example.com:1234'\n    app.config['APPLICATION_ROOT'] = '/foo'\n\n    @app.route('/')\n    def index():\n        return flask.request.url\n\n    ctx = app.test_request_context()\n    assert ctx.request.url == 'http://example.com:1234/foo/'\n\n    rv = client.get('/')\n    assert rv.data == b'http://example.com:1234/foo/',type='function_definition'\nline_star:17,line_end:29|char_star:0,char_end:53"->"test_environ_defaults_from_config,type='identifier'\nline_star:17,line_end:17|char_star:4,char_end:37";
"(app, client),type='parameters'\nline_star:17,line_end:17|char_star:37,char_end:50"[shape="box",fillcolor="white",style=filled];
"def test_environ_defaults_from_config(app, client):\n    app.config['SERVER_NAME'] = 'example.com:1234'\n    app.config['APPLICATION_ROOT'] = '/foo'\n\n    @app.route('/')\n    def index():\n        return flask.request.url\n\n    ctx = app.test_request_context()\n    assert ctx.request.url == 'http://example.com:1234/foo/'\n\n    rv = client.get('/')\n    assert rv.data == b'http://example.com:1234/foo/',type='function_definition'\nline_star:17,line_end:29|char_star:0,char_end:53"->"(app, client),type='parameters'\nline_star:17,line_end:17|char_star:37,char_end:50";
"app,type='identifier'\nline_star:17,line_end:17|char_star:38,char_end:41"[shape="point",fillcolor="#121013",style=filled];
"(app, client),type='parameters'\nline_star:17,line_end:17|char_star:37,char_end:50"->"app,type='identifier'\nline_star:17,line_end:17|char_star:38,char_end:41";
"client,type='identifier'\nline_star:17,line_end:17|char_star:43,char_end:49"[shape="point",fillcolor="#121013",style=filled];
"(app, client),type='parameters'\nline_star:17,line_end:17|char_star:37,char_end:50"->"client,type='identifier'\nline_star:17,line_end:17|char_star:43,char_end:49";
"type='INFORMATION BLOCK'\nline_star:18,line_end:29|char_star:4,char_end:53"[shape="point",fillcolor="#121013",style=filled];
"def test_environ_defaults_from_config(app, client):\n    app.config['SERVER_NAME'] = 'example.com:1234'\n    app.config['APPLICATION_ROOT'] = '/foo'\n\n    @app.route('/')\n    def index():\n        return flask.request.url\n\n    ctx = app.test_request_context()\n    assert ctx.request.url == 'http://example.com:1234/foo/'\n\n    rv = client.get('/')\n    assert rv.data == b'http://example.com:1234/foo/',type='function_definition'\nline_star:17,line_end:29|char_star:0,char_end:53"->"type='INFORMATION BLOCK'\nline_star:18,line_end:29|char_star:4,char_end:53";
"@app.route('/')\n    def index():\n        return flask.request.url,type='decorated_definition'\nline_star:21,line_end:23|char_star:4,char_end:32"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:18,line_end:29|char_star:4,char_end:53"->"@app.route('/')\n    def index():\n        return flask.request.url,type='decorated_definition'\nline_star:21,line_end:23|char_star:4,char_end:32";
"@app.route('/'),type='decorator'\nline_star:21,line_end:21|char_star:4,char_end:19"[shape="box",fillcolor="white",style=filled];
"@app.route('/')\n    def index():\n        return flask.request.url,type='decorated_definition'\nline_star:21,line_end:23|char_star:4,char_end:32"->"@app.route('/'),type='decorator'\nline_star:21,line_end:21|char_star:4,char_end:19";
"def index():\n        return flask.request.url,type='function_definition'\nline_star:22,line_end:23|char_star:4,char_end:32"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.route('/')\n    def index():\n        return flask.request.url,type='decorated_definition'\nline_star:21,line_end:23|char_star:4,char_end:32"->"def index():\n        return flask.request.url,type='function_definition'\nline_star:22,line_end:23|char_star:4,char_end:32";
"index,type='identifier'\nline_star:22,line_end:22|char_star:8,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"def index():\n        return flask.request.url,type='function_definition'\nline_star:22,line_end:23|char_star:4,char_end:32"->"index,type='identifier'\nline_star:22,line_end:22|char_star:8,char_end:13";
"type='INFORMATION BLOCK'\nline_star:23,line_end:23|char_star:8,char_end:32"[shape="point",fillcolor="#121013",style=filled];
"def index():\n        return flask.request.url,type='function_definition'\nline_star:22,line_end:23|char_star:4,char_end:32"->"type='INFORMATION BLOCK'\nline_star:23,line_end:23|char_star:8,char_end:32";
"return flask.request.url,type='return_statement'\nline_star:23,line_end:23|char_star:8,char_end:32"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:23,line_end:23|char_star:8,char_end:32"->"return flask.request.url,type='return_statement'\nline_star:23,line_end:23|char_star:8,char_end:32";
"assert ctx.request.url == 'http://example.com:1234/foo/',type='assert_statement'\nline_star:26,line_end:26|char_star:4,char_end:60"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:18,line_end:29|char_star:4,char_end:53"->"assert ctx.request.url == 'http://example.com:1234/foo/',type='assert_statement'\nline_star:26,line_end:26|char_star:4,char_end:60";
"ctx.request.url == 'http://example.com:1234/foo/',type='comparison_operator'\nline_star:26,line_end:26|char_star:11,char_end:60"[shape="box",fillcolor="white",style=filled];
"assert ctx.request.url == 'http://example.com:1234/foo/',type='assert_statement'\nline_star:26,line_end:26|char_star:4,char_end:60"->"ctx.request.url == 'http://example.com:1234/foo/',type='comparison_operator'\nline_star:26,line_end:26|char_star:11,char_end:60";
"ctx.request.url,type='attribute'\nline_star:26,line_end:26|char_star:11,char_end:26"[shape="box",fillcolor="white",style=filled];
"ctx.request.url == 'http://example.com:1234/foo/',type='comparison_operator'\nline_star:26,line_end:26|char_star:11,char_end:60"->"ctx.request.url,type='attribute'\nline_star:26,line_end:26|char_star:11,char_end:26";
"ctx.request,type='attribute'\nline_star:26,line_end:26|char_star:11,char_end:22"[shape="box",fillcolor="white",style=filled];
"ctx.request.url,type='attribute'\nline_star:26,line_end:26|char_star:11,char_end:26"->"ctx.request,type='attribute'\nline_star:26,line_end:26|char_star:11,char_end:22";
"ctx,type='identifier'\nline_star:26,line_end:26|char_star:11,char_end:14"[shape="point",fillcolor="#121013",style=filled];
"ctx.request,type='attribute'\nline_star:26,line_end:26|char_star:11,char_end:22"->"ctx,type='identifier'\nline_star:26,line_end:26|char_star:11,char_end:14";
"request,type='identifier'\nline_star:26,line_end:26|char_star:15,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"ctx.request,type='attribute'\nline_star:26,line_end:26|char_star:11,char_end:22"->"request,type='identifier'\nline_star:26,line_end:26|char_star:15,char_end:22";
"url,type='identifier'\nline_star:26,line_end:26|char_star:23,char_end:26"[shape="point",fillcolor="#121013",style=filled];
"ctx.request.url,type='attribute'\nline_star:26,line_end:26|char_star:11,char_end:26"->"url,type='identifier'\nline_star:26,line_end:26|char_star:23,char_end:26";
"assert rv.data == b'http://example.com:1234/foo/',type='assert_statement'\nline_star:29,line_end:29|char_star:4,char_end:53"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:18,line_end:29|char_star:4,char_end:53"->"assert rv.data == b'http://example.com:1234/foo/',type='assert_statement'\nline_star:29,line_end:29|char_star:4,char_end:53";
"rv.data == b'http://example.com:1234/foo/',type='comparison_operator'\nline_star:29,line_end:29|char_star:11,char_end:53"[shape="box",fillcolor="white",style=filled];
"assert rv.data == b'http://example.com:1234/foo/',type='assert_statement'\nline_star:29,line_end:29|char_star:4,char_end:53"->"rv.data == b'http://example.com:1234/foo/',type='comparison_operator'\nline_star:29,line_end:29|char_star:11,char_end:53";
"rv.data,type='attribute'\nline_star:29,line_end:29|char_star:11,char_end:18"[shape="box",fillcolor="white",style=filled];
"rv.data == b'http://example.com:1234/foo/',type='comparison_operator'\nline_star:29,line_end:29|char_star:11,char_end:53"->"rv.data,type='attribute'\nline_star:29,line_end:29|char_star:11,char_end:18";
"rv,type='identifier'\nline_star:29,line_end:29|char_star:11,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"rv.data,type='attribute'\nline_star:29,line_end:29|char_star:11,char_end:18"->"rv,type='identifier'\nline_star:29,line_end:29|char_star:11,char_end:13";
"data,type='identifier'\nline_star:29,line_end:29|char_star:14,char_end:18"[shape="point",fillcolor="#121013",style=filled];
"rv.data,type='attribute'\nline_star:29,line_end:29|char_star:11,char_end:18"->"data,type='identifier'\nline_star:29,line_end:29|char_star:14,char_end:18";
"def test_environ_defaults(app, client, app_ctx, req_ctx):\n    @app.route('/')\n    def index():\n        return flask.request.url\n\n    ctx = app.test_request_context()\n    assert ctx.request.url == 'http://localhost/'\n    with client:\n        rv = client.get('/')\n        assert rv.data == b'http://localhost/',type='function_definition'\nline_star:32,line_end:41|char_star:0,char_end:46"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_environ_defaults(app, client, app_ctx, req_ctx):\n    @app.route('/')\n    def index():\n        return flask.request.url\n\n    ctx = app.test_request_context()\n    assert ctx.request.url == 'http://localhost/'\n    with client:\n        rv = client.get('/')\n        assert rv.data == b'http://localhost/',type='function_definition'\nline_star:32,line_end:41|char_star:0,char_end:46";
"test_environ_defaults,type='identifier'\nline_star:32,line_end:32|char_star:4,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"def test_environ_defaults(app, client, app_ctx, req_ctx):\n    @app.route('/')\n    def index():\n        return flask.request.url\n\n    ctx = app.test_request_context()\n    assert ctx.request.url == 'http://localhost/'\n    with client:\n        rv = client.get('/')\n        assert rv.data == b'http://localhost/',type='function_definition'\nline_star:32,line_end:41|char_star:0,char_end:46"->"test_environ_defaults,type='identifier'\nline_star:32,line_end:32|char_star:4,char_end:25";
"(app, client, app_ctx, req_ctx),type='parameters'\nline_star:32,line_end:32|char_star:25,char_end:56"[shape="box",fillcolor="white",style=filled];
"def test_environ_defaults(app, client, app_ctx, req_ctx):\n    @app.route('/')\n    def index():\n        return flask.request.url\n\n    ctx = app.test_request_context()\n    assert ctx.request.url == 'http://localhost/'\n    with client:\n        rv = client.get('/')\n        assert rv.data == b'http://localhost/',type='function_definition'\nline_star:32,line_end:41|char_star:0,char_end:46"->"(app, client, app_ctx, req_ctx),type='parameters'\nline_star:32,line_end:32|char_star:25,char_end:56";
"app,type='identifier'\nline_star:32,line_end:32|char_star:26,char_end:29"[shape="point",fillcolor="#121013",style=filled];
"(app, client, app_ctx, req_ctx),type='parameters'\nline_star:32,line_end:32|char_star:25,char_end:56"->"app,type='identifier'\nline_star:32,line_end:32|char_star:26,char_end:29";
"client,type='identifier'\nline_star:32,line_end:32|char_star:31,char_end:37"[shape="point",fillcolor="#121013",style=filled];
"(app, client, app_ctx, req_ctx),type='parameters'\nline_star:32,line_end:32|char_star:25,char_end:56"->"client,type='identifier'\nline_star:32,line_end:32|char_star:31,char_end:37";
"app_ctx,type='identifier'\nline_star:32,line_end:32|char_star:39,char_end:46"[shape="point",fillcolor="#121013",style=filled];
"(app, client, app_ctx, req_ctx),type='parameters'\nline_star:32,line_end:32|char_star:25,char_end:56"->"app_ctx,type='identifier'\nline_star:32,line_end:32|char_star:39,char_end:46";
"req_ctx,type='identifier'\nline_star:32,line_end:32|char_star:48,char_end:55"[shape="point",fillcolor="#121013",style=filled];
"(app, client, app_ctx, req_ctx),type='parameters'\nline_star:32,line_end:32|char_star:25,char_end:56"->"req_ctx,type='identifier'\nline_star:32,line_end:32|char_star:48,char_end:55";
"type='INFORMATION BLOCK'\nline_star:33,line_end:41|char_star:4,char_end:46"[shape="point",fillcolor="#121013",style=filled];
"def test_environ_defaults(app, client, app_ctx, req_ctx):\n    @app.route('/')\n    def index():\n        return flask.request.url\n\n    ctx = app.test_request_context()\n    assert ctx.request.url == 'http://localhost/'\n    with client:\n        rv = client.get('/')\n        assert rv.data == b'http://localhost/',type='function_definition'\nline_star:32,line_end:41|char_star:0,char_end:46"->"type='INFORMATION BLOCK'\nline_star:33,line_end:41|char_star:4,char_end:46";
"@app.route('/')\n    def index():\n        return flask.request.url,type='decorated_definition'\nline_star:33,line_end:35|char_star:4,char_end:32"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:33,line_end:41|char_star:4,char_end:46"->"@app.route('/')\n    def index():\n        return flask.request.url,type='decorated_definition'\nline_star:33,line_end:35|char_star:4,char_end:32";
"@app.route('/'),type='decorator'\nline_star:33,line_end:33|char_star:4,char_end:19"[shape="box",fillcolor="white",style=filled];
"@app.route('/')\n    def index():\n        return flask.request.url,type='decorated_definition'\nline_star:33,line_end:35|char_star:4,char_end:32"->"@app.route('/'),type='decorator'\nline_star:33,line_end:33|char_star:4,char_end:19";
"def index():\n        return flask.request.url,type='function_definition'\nline_star:34,line_end:35|char_star:4,char_end:32"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.route('/')\n    def index():\n        return flask.request.url,type='decorated_definition'\nline_star:33,line_end:35|char_star:4,char_end:32"->"def index():\n        return flask.request.url,type='function_definition'\nline_star:34,line_end:35|char_star:4,char_end:32";
"index,type='identifier'\nline_star:34,line_end:34|char_star:8,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"def index():\n        return flask.request.url,type='function_definition'\nline_star:34,line_end:35|char_star:4,char_end:32"->"index,type='identifier'\nline_star:34,line_end:34|char_star:8,char_end:13";
"type='INFORMATION BLOCK'\nline_star:35,line_end:35|char_star:8,char_end:32"[shape="point",fillcolor="#121013",style=filled];
"def index():\n        return flask.request.url,type='function_definition'\nline_star:34,line_end:35|char_star:4,char_end:32"->"type='INFORMATION BLOCK'\nline_star:35,line_end:35|char_star:8,char_end:32";
"return flask.request.url,type='return_statement'\nline_star:35,line_end:35|char_star:8,char_end:32"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:35,line_end:35|char_star:8,char_end:32"->"return flask.request.url,type='return_statement'\nline_star:35,line_end:35|char_star:8,char_end:32";
"assert ctx.request.url == 'http://localhost/',type='assert_statement'\nline_star:38,line_end:38|char_star:4,char_end:49"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:33,line_end:41|char_star:4,char_end:46"->"assert ctx.request.url == 'http://localhost/',type='assert_statement'\nline_star:38,line_end:38|char_star:4,char_end:49";
"ctx.request.url == 'http://localhost/',type='comparison_operator'\nline_star:38,line_end:38|char_star:11,char_end:49"[shape="box",fillcolor="white",style=filled];
"assert ctx.request.url == 'http://localhost/',type='assert_statement'\nline_star:38,line_end:38|char_star:4,char_end:49"->"ctx.request.url == 'http://localhost/',type='comparison_operator'\nline_star:38,line_end:38|char_star:11,char_end:49";
"ctx.request.url,type='attribute'\nline_star:38,line_end:38|char_star:11,char_end:26"[shape="box",fillcolor="white",style=filled];
"ctx.request.url == 'http://localhost/',type='comparison_operator'\nline_star:38,line_end:38|char_star:11,char_end:49"->"ctx.request.url,type='attribute'\nline_star:38,line_end:38|char_star:11,char_end:26";
"ctx.request,type='attribute'\nline_star:38,line_end:38|char_star:11,char_end:22"[shape="box",fillcolor="white",style=filled];
"ctx.request.url,type='attribute'\nline_star:38,line_end:38|char_star:11,char_end:26"->"ctx.request,type='attribute'\nline_star:38,line_end:38|char_star:11,char_end:22";
"ctx,type='identifier'\nline_star:38,line_end:38|char_star:11,char_end:14"[shape="point",fillcolor="#121013",style=filled];
"ctx.request,type='attribute'\nline_star:38,line_end:38|char_star:11,char_end:22"->"ctx,type='identifier'\nline_star:38,line_end:38|char_star:11,char_end:14";
"request,type='identifier'\nline_star:38,line_end:38|char_star:15,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"ctx.request,type='attribute'\nline_star:38,line_end:38|char_star:11,char_end:22"->"request,type='identifier'\nline_star:38,line_end:38|char_star:15,char_end:22";
"url,type='identifier'\nline_star:38,line_end:38|char_star:23,char_end:26"[shape="point",fillcolor="#121013",style=filled];
"ctx.request.url,type='attribute'\nline_star:38,line_end:38|char_star:11,char_end:26"->"url,type='identifier'\nline_star:38,line_end:38|char_star:23,char_end:26";
"with client:\n        rv = client.get('/')\n        assert rv.data == b'http://localhost/',type='with_statement'\nline_star:39,line_end:41|char_star:4,char_end:46"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:33,line_end:41|char_star:4,char_end:46"->"with client:\n        rv = client.get('/')\n        assert rv.data == b'http://localhost/',type='with_statement'\nline_star:39,line_end:41|char_star:4,char_end:46";
"client,type='with_clause'\nline_star:39,line_end:39|char_star:9,char_end:15"[shape="box",fillcolor="white",style=filled];
"with client:\n        rv = client.get('/')\n        assert rv.data == b'http://localhost/',type='with_statement'\nline_star:39,line_end:41|char_star:4,char_end:46"->"client,type='with_clause'\nline_star:39,line_end:39|char_star:9,char_end:15";
"type='INFORMATION BLOCK'\nline_star:40,line_end:41|char_star:8,char_end:46"[shape="point",fillcolor="#121013",style=filled];
"with client:\n        rv = client.get('/')\n        assert rv.data == b'http://localhost/',type='with_statement'\nline_star:39,line_end:41|char_star:4,char_end:46"->"type='INFORMATION BLOCK'\nline_star:40,line_end:41|char_star:8,char_end:46";
"assert rv.data == b'http://localhost/',type='assert_statement'\nline_star:41,line_end:41|char_star:8,char_end:46"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:40,line_end:41|char_star:8,char_end:46"->"assert rv.data == b'http://localhost/',type='assert_statement'\nline_star:41,line_end:41|char_star:8,char_end:46";
"rv.data == b'http://localhost/',type='comparison_operator'\nline_star:41,line_end:41|char_star:15,char_end:46"[shape="box",fillcolor="white",style=filled];
"assert rv.data == b'http://localhost/',type='assert_statement'\nline_star:41,line_end:41|char_star:8,char_end:46"->"rv.data == b'http://localhost/',type='comparison_operator'\nline_star:41,line_end:41|char_star:15,char_end:46";
"rv.data,type='attribute'\nline_star:41,line_end:41|char_star:15,char_end:22"[shape="box",fillcolor="white",style=filled];
"rv.data == b'http://localhost/',type='comparison_operator'\nline_star:41,line_end:41|char_star:15,char_end:46"->"rv.data,type='attribute'\nline_star:41,line_end:41|char_star:15,char_end:22";
"rv,type='identifier'\nline_star:41,line_end:41|char_star:15,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"rv.data,type='attribute'\nline_star:41,line_end:41|char_star:15,char_end:22"->"rv,type='identifier'\nline_star:41,line_end:41|char_star:15,char_end:17";
"data,type='identifier'\nline_star:41,line_end:41|char_star:18,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"rv.data,type='attribute'\nline_star:41,line_end:41|char_star:15,char_end:22"->"data,type='identifier'\nline_star:41,line_end:41|char_star:18,char_end:22";
"def test_environ_base_default(app, client, app_ctx):\n    @app.route('/')\n    def index():\n        flask.g.user_agent = flask.request.headers['User-Agent']\n        return flask.request.remote_addr\n\n    rv = client.get('/')\n    assert rv.data == b'127.0.0.1'\n    assert flask.g.user_agent == f'werkzeug/{werkzeug.__version__}',type='function_definition'\nline_star:44,line_end:52|char_star:0,char_end:67"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_environ_base_default(app, client, app_ctx):\n    @app.route('/')\n    def index():\n        flask.g.user_agent = flask.request.headers['User-Agent']\n        return flask.request.remote_addr\n\n    rv = client.get('/')\n    assert rv.data == b'127.0.0.1'\n    assert flask.g.user_agent == f'werkzeug/{werkzeug.__version__}',type='function_definition'\nline_star:44,line_end:52|char_star:0,char_end:67";
"test_environ_base_default,type='identifier'\nline_star:44,line_end:44|char_star:4,char_end:29"[shape="point",fillcolor="#121013",style=filled];
"def test_environ_base_default(app, client, app_ctx):\n    @app.route('/')\n    def index():\n        flask.g.user_agent = flask.request.headers['User-Agent']\n        return flask.request.remote_addr\n\n    rv = client.get('/')\n    assert rv.data == b'127.0.0.1'\n    assert flask.g.user_agent == f'werkzeug/{werkzeug.__version__}',type='function_definition'\nline_star:44,line_end:52|char_star:0,char_end:67"->"test_environ_base_default,type='identifier'\nline_star:44,line_end:44|char_star:4,char_end:29";
"(app, client, app_ctx),type='parameters'\nline_star:44,line_end:44|char_star:29,char_end:51"[shape="box",fillcolor="white",style=filled];
"def test_environ_base_default(app, client, app_ctx):\n    @app.route('/')\n    def index():\n        flask.g.user_agent = flask.request.headers['User-Agent']\n        return flask.request.remote_addr\n\n    rv = client.get('/')\n    assert rv.data == b'127.0.0.1'\n    assert flask.g.user_agent == f'werkzeug/{werkzeug.__version__}',type='function_definition'\nline_star:44,line_end:52|char_star:0,char_end:67"->"(app, client, app_ctx),type='parameters'\nline_star:44,line_end:44|char_star:29,char_end:51";
"app,type='identifier'\nline_star:44,line_end:44|char_star:30,char_end:33"[shape="point",fillcolor="#121013",style=filled];
"(app, client, app_ctx),type='parameters'\nline_star:44,line_end:44|char_star:29,char_end:51"->"app,type='identifier'\nline_star:44,line_end:44|char_star:30,char_end:33";
"client,type='identifier'\nline_star:44,line_end:44|char_star:35,char_end:41"[shape="point",fillcolor="#121013",style=filled];
"(app, client, app_ctx),type='parameters'\nline_star:44,line_end:44|char_star:29,char_end:51"->"client,type='identifier'\nline_star:44,line_end:44|char_star:35,char_end:41";
"app_ctx,type='identifier'\nline_star:44,line_end:44|char_star:43,char_end:50"[shape="point",fillcolor="#121013",style=filled];
"(app, client, app_ctx),type='parameters'\nline_star:44,line_end:44|char_star:29,char_end:51"->"app_ctx,type='identifier'\nline_star:44,line_end:44|char_star:43,char_end:50";
"type='INFORMATION BLOCK'\nline_star:45,line_end:52|char_star:4,char_end:67"[shape="point",fillcolor="#121013",style=filled];
"def test_environ_base_default(app, client, app_ctx):\n    @app.route('/')\n    def index():\n        flask.g.user_agent = flask.request.headers['User-Agent']\n        return flask.request.remote_addr\n\n    rv = client.get('/')\n    assert rv.data == b'127.0.0.1'\n    assert flask.g.user_agent == f'werkzeug/{werkzeug.__version__}',type='function_definition'\nline_star:44,line_end:52|char_star:0,char_end:67"->"type='INFORMATION BLOCK'\nline_star:45,line_end:52|char_star:4,char_end:67";
"@app.route('/')\n    def index():\n        flask.g.user_agent = flask.request.headers['User-Agent']\n        return flask.request.remote_addr,type='decorated_definition'\nline_star:45,line_end:48|char_star:4,char_end:40"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:45,line_end:52|char_star:4,char_end:67"->"@app.route('/')\n    def index():\n        flask.g.user_agent = flask.request.headers['User-Agent']\n        return flask.request.remote_addr,type='decorated_definition'\nline_star:45,line_end:48|char_star:4,char_end:40";
"@app.route('/'),type='decorator'\nline_star:45,line_end:45|char_star:4,char_end:19"[shape="box",fillcolor="white",style=filled];
"@app.route('/')\n    def index():\n        flask.g.user_agent = flask.request.headers['User-Agent']\n        return flask.request.remote_addr,type='decorated_definition'\nline_star:45,line_end:48|char_star:4,char_end:40"->"@app.route('/'),type='decorator'\nline_star:45,line_end:45|char_star:4,char_end:19";
"def index():\n        flask.g.user_agent = flask.request.headers['User-Agent']\n        return flask.request.remote_addr,type='function_definition'\nline_star:46,line_end:48|char_star:4,char_end:40"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.route('/')\n    def index():\n        flask.g.user_agent = flask.request.headers['User-Agent']\n        return flask.request.remote_addr,type='decorated_definition'\nline_star:45,line_end:48|char_star:4,char_end:40"->"def index():\n        flask.g.user_agent = flask.request.headers['User-Agent']\n        return flask.request.remote_addr,type='function_definition'\nline_star:46,line_end:48|char_star:4,char_end:40";
"index,type='identifier'\nline_star:46,line_end:46|char_star:8,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"def index():\n        flask.g.user_agent = flask.request.headers['User-Agent']\n        return flask.request.remote_addr,type='function_definition'\nline_star:46,line_end:48|char_star:4,char_end:40"->"index,type='identifier'\nline_star:46,line_end:46|char_star:8,char_end:13";
"type='INFORMATION BLOCK'\nline_star:47,line_end:48|char_star:8,char_end:40"[shape="point",fillcolor="#121013",style=filled];
"def index():\n        flask.g.user_agent = flask.request.headers['User-Agent']\n        return flask.request.remote_addr,type='function_definition'\nline_star:46,line_end:48|char_star:4,char_end:40"->"type='INFORMATION BLOCK'\nline_star:47,line_end:48|char_star:8,char_end:40";
"return flask.request.remote_addr,type='return_statement'\nline_star:48,line_end:48|char_star:8,char_end:40"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:47,line_end:48|char_star:8,char_end:40"->"return flask.request.remote_addr,type='return_statement'\nline_star:48,line_end:48|char_star:8,char_end:40";
"assert rv.data == b'127.0.0.1',type='assert_statement'\nline_star:51,line_end:51|char_star:4,char_end:34"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:45,line_end:52|char_star:4,char_end:67"->"assert rv.data == b'127.0.0.1',type='assert_statement'\nline_star:51,line_end:51|char_star:4,char_end:34";
"rv.data == b'127.0.0.1',type='comparison_operator'\nline_star:51,line_end:51|char_star:11,char_end:34"[shape="box",fillcolor="white",style=filled];
"assert rv.data == b'127.0.0.1',type='assert_statement'\nline_star:51,line_end:51|char_star:4,char_end:34"->"rv.data == b'127.0.0.1',type='comparison_operator'\nline_star:51,line_end:51|char_star:11,char_end:34";
"rv.data,type='attribute'\nline_star:51,line_end:51|char_star:11,char_end:18"[shape="box",fillcolor="white",style=filled];
"rv.data == b'127.0.0.1',type='comparison_operator'\nline_star:51,line_end:51|char_star:11,char_end:34"->"rv.data,type='attribute'\nline_star:51,line_end:51|char_star:11,char_end:18";
"rv,type='identifier'\nline_star:51,line_end:51|char_star:11,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"rv.data,type='attribute'\nline_star:51,line_end:51|char_star:11,char_end:18"->"rv,type='identifier'\nline_star:51,line_end:51|char_star:11,char_end:13";
"data,type='identifier'\nline_star:51,line_end:51|char_star:14,char_end:18"[shape="point",fillcolor="#121013",style=filled];
"rv.data,type='attribute'\nline_star:51,line_end:51|char_star:11,char_end:18"->"data,type='identifier'\nline_star:51,line_end:51|char_star:14,char_end:18";
"assert flask.g.user_agent == f'werkzeug/{werkzeug.__version__}',type='assert_statement'\nline_star:52,line_end:52|char_star:4,char_end:67"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:45,line_end:52|char_star:4,char_end:67"->"assert flask.g.user_agent == f'werkzeug/{werkzeug.__version__}',type='assert_statement'\nline_star:52,line_end:52|char_star:4,char_end:67";
"flask.g.user_agent == f'werkzeug/{werkzeug.__version__}',type='comparison_operator'\nline_star:52,line_end:52|char_star:11,char_end:67"[shape="box",fillcolor="white",style=filled];
"assert flask.g.user_agent == f'werkzeug/{werkzeug.__version__}',type='assert_statement'\nline_star:52,line_end:52|char_star:4,char_end:67"->"flask.g.user_agent == f'werkzeug/{werkzeug.__version__}',type='comparison_operator'\nline_star:52,line_end:52|char_star:11,char_end:67";
"flask.g.user_agent,type='attribute'\nline_star:52,line_end:52|char_star:11,char_end:29"[shape="box",fillcolor="white",style=filled];
"flask.g.user_agent == f'werkzeug/{werkzeug.__version__}',type='comparison_operator'\nline_star:52,line_end:52|char_star:11,char_end:67"->"flask.g.user_agent,type='attribute'\nline_star:52,line_end:52|char_star:11,char_end:29";
"flask.g,type='attribute'\nline_star:52,line_end:52|char_star:11,char_end:18"[shape="box",fillcolor="white",style=filled];
"flask.g.user_agent,type='attribute'\nline_star:52,line_end:52|char_star:11,char_end:29"->"flask.g,type='attribute'\nline_star:52,line_end:52|char_star:11,char_end:18";
"flask,type='identifier'\nline_star:52,line_end:52|char_star:11,char_end:16"[shape="point",fillcolor="#121013",style=filled];
"flask.g,type='attribute'\nline_star:52,line_end:52|char_star:11,char_end:18"->"flask,type='identifier'\nline_star:52,line_end:52|char_star:11,char_end:16";
"g,type='identifier'\nline_star:52,line_end:52|char_star:17,char_end:18"[shape="point",fillcolor="#121013",style=filled];
"flask.g,type='attribute'\nline_star:52,line_end:52|char_star:11,char_end:18"->"g,type='identifier'\nline_star:52,line_end:52|char_star:17,char_end:18";
"user_agent,type='identifier'\nline_star:52,line_end:52|char_star:19,char_end:29"[shape="point",fillcolor="#121013",style=filled];
"flask.g.user_agent,type='attribute'\nline_star:52,line_end:52|char_star:11,char_end:29"->"user_agent,type='identifier'\nline_star:52,line_end:52|char_star:19,char_end:29";
"def test_environ_base_modified(app, client, app_ctx):\n    @app.route('/')\n    def index():\n        flask.g.user_agent = flask.request.headers['User-Agent']\n        return flask.request.remote_addr\n\n    client.environ_base['REMOTE_ADDR'] = '0.0.0.0'\n    client.environ_base['HTTP_USER_AGENT'] = 'Foo'\n    rv = client.get('/')\n    assert rv.data == b'0.0.0.0'\n    assert flask.g.user_agent == 'Foo'\n\n    client.environ_base['REMOTE_ADDR'] = '0.0.0.1'\n    client.environ_base['HTTP_USER_AGENT'] = 'Bar'\n    rv = client.get('/')\n    assert rv.data == b'0.0.0.1'\n    assert flask.g.user_agent == 'Bar',type='function_definition'\nline_star:55,line_end:71|char_star:0,char_end:38"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_environ_base_modified(app, client, app_ctx):\n    @app.route('/')\n    def index():\n        flask.g.user_agent = flask.request.headers['User-Agent']\n        return flask.request.remote_addr\n\n    client.environ_base['REMOTE_ADDR'] = '0.0.0.0'\n    client.environ_base['HTTP_USER_AGENT'] = 'Foo'\n    rv = client.get('/')\n    assert rv.data == b'0.0.0.0'\n    assert flask.g.user_agent == 'Foo'\n\n    client.environ_base['REMOTE_ADDR'] = '0.0.0.1'\n    client.environ_base['HTTP_USER_AGENT'] = 'Bar'\n    rv = client.get('/')\n    assert rv.data == b'0.0.0.1'\n    assert flask.g.user_agent == 'Bar',type='function_definition'\nline_star:55,line_end:71|char_star:0,char_end:38";
"test_environ_base_modified,type='identifier'\nline_star:55,line_end:55|char_star:4,char_end:30"[shape="point",fillcolor="#121013",style=filled];
"def test_environ_base_modified(app, client, app_ctx):\n    @app.route('/')\n    def index():\n        flask.g.user_agent = flask.request.headers['User-Agent']\n        return flask.request.remote_addr\n\n    client.environ_base['REMOTE_ADDR'] = '0.0.0.0'\n    client.environ_base['HTTP_USER_AGENT'] = 'Foo'\n    rv = client.get('/')\n    assert rv.data == b'0.0.0.0'\n    assert flask.g.user_agent == 'Foo'\n\n    client.environ_base['REMOTE_ADDR'] = '0.0.0.1'\n    client.environ_base['HTTP_USER_AGENT'] = 'Bar'\n    rv = client.get('/')\n    assert rv.data == b'0.0.0.1'\n    assert flask.g.user_agent == 'Bar',type='function_definition'\nline_star:55,line_end:71|char_star:0,char_end:38"->"test_environ_base_modified,type='identifier'\nline_star:55,line_end:55|char_star:4,char_end:30";
"(app, client, app_ctx),type='parameters'\nline_star:55,line_end:55|char_star:30,char_end:52"[shape="box",fillcolor="white",style=filled];
"def test_environ_base_modified(app, client, app_ctx):\n    @app.route('/')\n    def index():\n        flask.g.user_agent = flask.request.headers['User-Agent']\n        return flask.request.remote_addr\n\n    client.environ_base['REMOTE_ADDR'] = '0.0.0.0'\n    client.environ_base['HTTP_USER_AGENT'] = 'Foo'\n    rv = client.get('/')\n    assert rv.data == b'0.0.0.0'\n    assert flask.g.user_agent == 'Foo'\n\n    client.environ_base['REMOTE_ADDR'] = '0.0.0.1'\n    client.environ_base['HTTP_USER_AGENT'] = 'Bar'\n    rv = client.get('/')\n    assert rv.data == b'0.0.0.1'\n    assert flask.g.user_agent == 'Bar',type='function_definition'\nline_star:55,line_end:71|char_star:0,char_end:38"->"(app, client, app_ctx),type='parameters'\nline_star:55,line_end:55|char_star:30,char_end:52";
"app,type='identifier'\nline_star:55,line_end:55|char_star:31,char_end:34"[shape="point",fillcolor="#121013",style=filled];
"(app, client, app_ctx),type='parameters'\nline_star:55,line_end:55|char_star:30,char_end:52"->"app,type='identifier'\nline_star:55,line_end:55|char_star:31,char_end:34";
"client,type='identifier'\nline_star:55,line_end:55|char_star:36,char_end:42"[shape="point",fillcolor="#121013",style=filled];
"(app, client, app_ctx),type='parameters'\nline_star:55,line_end:55|char_star:30,char_end:52"->"client,type='identifier'\nline_star:55,line_end:55|char_star:36,char_end:42";
"app_ctx,type='identifier'\nline_star:55,line_end:55|char_star:44,char_end:51"[shape="point",fillcolor="#121013",style=filled];
"(app, client, app_ctx),type='parameters'\nline_star:55,line_end:55|char_star:30,char_end:52"->"app_ctx,type='identifier'\nline_star:55,line_end:55|char_star:44,char_end:51";
"type='INFORMATION BLOCK'\nline_star:56,line_end:71|char_star:4,char_end:38"[shape="point",fillcolor="#121013",style=filled];
"def test_environ_base_modified(app, client, app_ctx):\n    @app.route('/')\n    def index():\n        flask.g.user_agent = flask.request.headers['User-Agent']\n        return flask.request.remote_addr\n\n    client.environ_base['REMOTE_ADDR'] = '0.0.0.0'\n    client.environ_base['HTTP_USER_AGENT'] = 'Foo'\n    rv = client.get('/')\n    assert rv.data == b'0.0.0.0'\n    assert flask.g.user_agent == 'Foo'\n\n    client.environ_base['REMOTE_ADDR'] = '0.0.0.1'\n    client.environ_base['HTTP_USER_AGENT'] = 'Bar'\n    rv = client.get('/')\n    assert rv.data == b'0.0.0.1'\n    assert flask.g.user_agent == 'Bar',type='function_definition'\nline_star:55,line_end:71|char_star:0,char_end:38"->"type='INFORMATION BLOCK'\nline_star:56,line_end:71|char_star:4,char_end:38";
"@app.route('/')\n    def index():\n        flask.g.user_agent = flask.request.headers['User-Agent']\n        return flask.request.remote_addr,type='decorated_definition'\nline_star:56,line_end:59|char_star:4,char_end:40"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:56,line_end:71|char_star:4,char_end:38"->"@app.route('/')\n    def index():\n        flask.g.user_agent = flask.request.headers['User-Agent']\n        return flask.request.remote_addr,type='decorated_definition'\nline_star:56,line_end:59|char_star:4,char_end:40";
"@app.route('/'),type='decorator'\nline_star:56,line_end:56|char_star:4,char_end:19"[shape="box",fillcolor="white",style=filled];
"@app.route('/')\n    def index():\n        flask.g.user_agent = flask.request.headers['User-Agent']\n        return flask.request.remote_addr,type='decorated_definition'\nline_star:56,line_end:59|char_star:4,char_end:40"->"@app.route('/'),type='decorator'\nline_star:56,line_end:56|char_star:4,char_end:19";
"def index():\n        flask.g.user_agent = flask.request.headers['User-Agent']\n        return flask.request.remote_addr,type='function_definition'\nline_star:57,line_end:59|char_star:4,char_end:40"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.route('/')\n    def index():\n        flask.g.user_agent = flask.request.headers['User-Agent']\n        return flask.request.remote_addr,type='decorated_definition'\nline_star:56,line_end:59|char_star:4,char_end:40"->"def index():\n        flask.g.user_agent = flask.request.headers['User-Agent']\n        return flask.request.remote_addr,type='function_definition'\nline_star:57,line_end:59|char_star:4,char_end:40";
"index,type='identifier'\nline_star:57,line_end:57|char_star:8,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"def index():\n        flask.g.user_agent = flask.request.headers['User-Agent']\n        return flask.request.remote_addr,type='function_definition'\nline_star:57,line_end:59|char_star:4,char_end:40"->"index,type='identifier'\nline_star:57,line_end:57|char_star:8,char_end:13";
"type='INFORMATION BLOCK'\nline_star:58,line_end:59|char_star:8,char_end:40"[shape="point",fillcolor="#121013",style=filled];
"def index():\n        flask.g.user_agent = flask.request.headers['User-Agent']\n        return flask.request.remote_addr,type='function_definition'\nline_star:57,line_end:59|char_star:4,char_end:40"->"type='INFORMATION BLOCK'\nline_star:58,line_end:59|char_star:8,char_end:40";
"return flask.request.remote_addr,type='return_statement'\nline_star:59,line_end:59|char_star:8,char_end:40"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:58,line_end:59|char_star:8,char_end:40"->"return flask.request.remote_addr,type='return_statement'\nline_star:59,line_end:59|char_star:8,char_end:40";
"assert rv.data == b'0.0.0.0',type='assert_statement'\nline_star:64,line_end:64|char_star:4,char_end:32"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:56,line_end:71|char_star:4,char_end:38"->"assert rv.data == b'0.0.0.0',type='assert_statement'\nline_star:64,line_end:64|char_star:4,char_end:32";
"rv.data == b'0.0.0.0',type='comparison_operator'\nline_star:64,line_end:64|char_star:11,char_end:32"[shape="box",fillcolor="white",style=filled];
"assert rv.data == b'0.0.0.0',type='assert_statement'\nline_star:64,line_end:64|char_star:4,char_end:32"->"rv.data == b'0.0.0.0',type='comparison_operator'\nline_star:64,line_end:64|char_star:11,char_end:32";
"rv.data,type='attribute'\nline_star:64,line_end:64|char_star:11,char_end:18"[shape="box",fillcolor="white",style=filled];
"rv.data == b'0.0.0.0',type='comparison_operator'\nline_star:64,line_end:64|char_star:11,char_end:32"->"rv.data,type='attribute'\nline_star:64,line_end:64|char_star:11,char_end:18";
"rv,type='identifier'\nline_star:64,line_end:64|char_star:11,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"rv.data,type='attribute'\nline_star:64,line_end:64|char_star:11,char_end:18"->"rv,type='identifier'\nline_star:64,line_end:64|char_star:11,char_end:13";
"data,type='identifier'\nline_star:64,line_end:64|char_star:14,char_end:18"[shape="point",fillcolor="#121013",style=filled];
"rv.data,type='attribute'\nline_star:64,line_end:64|char_star:11,char_end:18"->"data,type='identifier'\nline_star:64,line_end:64|char_star:14,char_end:18";
"assert flask.g.user_agent == 'Foo',type='assert_statement'\nline_star:65,line_end:65|char_star:4,char_end:38"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:56,line_end:71|char_star:4,char_end:38"->"assert flask.g.user_agent == 'Foo',type='assert_statement'\nline_star:65,line_end:65|char_star:4,char_end:38";
"flask.g.user_agent == 'Foo',type='comparison_operator'\nline_star:65,line_end:65|char_star:11,char_end:38"[shape="box",fillcolor="white",style=filled];
"assert flask.g.user_agent == 'Foo',type='assert_statement'\nline_star:65,line_end:65|char_star:4,char_end:38"->"flask.g.user_agent == 'Foo',type='comparison_operator'\nline_star:65,line_end:65|char_star:11,char_end:38";
"flask.g.user_agent,type='attribute'\nline_star:65,line_end:65|char_star:11,char_end:29"[shape="box",fillcolor="white",style=filled];
"flask.g.user_agent == 'Foo',type='comparison_operator'\nline_star:65,line_end:65|char_star:11,char_end:38"->"flask.g.user_agent,type='attribute'\nline_star:65,line_end:65|char_star:11,char_end:29";
"flask.g,type='attribute'\nline_star:65,line_end:65|char_star:11,char_end:18"[shape="box",fillcolor="white",style=filled];
"flask.g.user_agent,type='attribute'\nline_star:65,line_end:65|char_star:11,char_end:29"->"flask.g,type='attribute'\nline_star:65,line_end:65|char_star:11,char_end:18";
"flask,type='identifier'\nline_star:65,line_end:65|char_star:11,char_end:16"[shape="point",fillcolor="#121013",style=filled];
"flask.g,type='attribute'\nline_star:65,line_end:65|char_star:11,char_end:18"->"flask,type='identifier'\nline_star:65,line_end:65|char_star:11,char_end:16";
"g,type='identifier'\nline_star:65,line_end:65|char_star:17,char_end:18"[shape="point",fillcolor="#121013",style=filled];
"flask.g,type='attribute'\nline_star:65,line_end:65|char_star:11,char_end:18"->"g,type='identifier'\nline_star:65,line_end:65|char_star:17,char_end:18";
"user_agent,type='identifier'\nline_star:65,line_end:65|char_star:19,char_end:29"[shape="point",fillcolor="#121013",style=filled];
"flask.g.user_agent,type='attribute'\nline_star:65,line_end:65|char_star:11,char_end:29"->"user_agent,type='identifier'\nline_star:65,line_end:65|char_star:19,char_end:29";
"assert rv.data == b'0.0.0.1',type='assert_statement'\nline_star:70,line_end:70|char_star:4,char_end:32"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:56,line_end:71|char_star:4,char_end:38"->"assert rv.data == b'0.0.0.1',type='assert_statement'\nline_star:70,line_end:70|char_star:4,char_end:32";
"rv.data == b'0.0.0.1',type='comparison_operator'\nline_star:70,line_end:70|char_star:11,char_end:32"[shape="box",fillcolor="white",style=filled];
"assert rv.data == b'0.0.0.1',type='assert_statement'\nline_star:70,line_end:70|char_star:4,char_end:32"->"rv.data == b'0.0.0.1',type='comparison_operator'\nline_star:70,line_end:70|char_star:11,char_end:32";
"rv.data,type='attribute'\nline_star:70,line_end:70|char_star:11,char_end:18"[shape="box",fillcolor="white",style=filled];
"rv.data == b'0.0.0.1',type='comparison_operator'\nline_star:70,line_end:70|char_star:11,char_end:32"->"rv.data,type='attribute'\nline_star:70,line_end:70|char_star:11,char_end:18";
"rv,type='identifier'\nline_star:70,line_end:70|char_star:11,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"rv.data,type='attribute'\nline_star:70,line_end:70|char_star:11,char_end:18"->"rv,type='identifier'\nline_star:70,line_end:70|char_star:11,char_end:13";
"data,type='identifier'\nline_star:70,line_end:70|char_star:14,char_end:18"[shape="point",fillcolor="#121013",style=filled];
"rv.data,type='attribute'\nline_star:70,line_end:70|char_star:11,char_end:18"->"data,type='identifier'\nline_star:70,line_end:70|char_star:14,char_end:18";
"assert flask.g.user_agent == 'Bar',type='assert_statement'\nline_star:71,line_end:71|char_star:4,char_end:38"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:56,line_end:71|char_star:4,char_end:38"->"assert flask.g.user_agent == 'Bar',type='assert_statement'\nline_star:71,line_end:71|char_star:4,char_end:38";
"flask.g.user_agent == 'Bar',type='comparison_operator'\nline_star:71,line_end:71|char_star:11,char_end:38"[shape="box",fillcolor="white",style=filled];
"assert flask.g.user_agent == 'Bar',type='assert_statement'\nline_star:71,line_end:71|char_star:4,char_end:38"->"flask.g.user_agent == 'Bar',type='comparison_operator'\nline_star:71,line_end:71|char_star:11,char_end:38";
"flask.g.user_agent,type='attribute'\nline_star:71,line_end:71|char_star:11,char_end:29"[shape="box",fillcolor="white",style=filled];
"flask.g.user_agent == 'Bar',type='comparison_operator'\nline_star:71,line_end:71|char_star:11,char_end:38"->"flask.g.user_agent,type='attribute'\nline_star:71,line_end:71|char_star:11,char_end:29";
"flask.g,type='attribute'\nline_star:71,line_end:71|char_star:11,char_end:18"[shape="box",fillcolor="white",style=filled];
"flask.g.user_agent,type='attribute'\nline_star:71,line_end:71|char_star:11,char_end:29"->"flask.g,type='attribute'\nline_star:71,line_end:71|char_star:11,char_end:18";
"flask,type='identifier'\nline_star:71,line_end:71|char_star:11,char_end:16"[shape="point",fillcolor="#121013",style=filled];
"flask.g,type='attribute'\nline_star:71,line_end:71|char_star:11,char_end:18"->"flask,type='identifier'\nline_star:71,line_end:71|char_star:11,char_end:16";
"g,type='identifier'\nline_star:71,line_end:71|char_star:17,char_end:18"[shape="point",fillcolor="#121013",style=filled];
"flask.g,type='attribute'\nline_star:71,line_end:71|char_star:11,char_end:18"->"g,type='identifier'\nline_star:71,line_end:71|char_star:17,char_end:18";
"user_agent,type='identifier'\nline_star:71,line_end:71|char_star:19,char_end:29"[shape="point",fillcolor="#121013",style=filled];
"flask.g.user_agent,type='attribute'\nline_star:71,line_end:71|char_star:11,char_end:29"->"user_agent,type='identifier'\nline_star:71,line_end:71|char_star:19,char_end:29";
"def test_client_open_environ(app, client, request):\n    @app.route('/index')\n    def index():\n        return flask.request.remote_addr\n\n    builder = EnvironBuilder(app, path='/index', method='GET')\n    request.addfinalizer(builder.close)\n\n    rv = client.open(builder)\n    assert rv.data == b'127.0.0.1'\n\n    environ = builder.get_environ()\n    client.environ_base['REMOTE_ADDR'] = '127.0.0.2'\n    rv = client.open(environ)\n    assert rv.data == b'127.0.0.2',type='function_definition'\nline_star:74,line_end:88|char_star:0,char_end:34"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_client_open_environ(app, client, request):\n    @app.route('/index')\n    def index():\n        return flask.request.remote_addr\n\n    builder = EnvironBuilder(app, path='/index', method='GET')\n    request.addfinalizer(builder.close)\n\n    rv = client.open(builder)\n    assert rv.data == b'127.0.0.1'\n\n    environ = builder.get_environ()\n    client.environ_base['REMOTE_ADDR'] = '127.0.0.2'\n    rv = client.open(environ)\n    assert rv.data == b'127.0.0.2',type='function_definition'\nline_star:74,line_end:88|char_star:0,char_end:34";
"test_client_open_environ,type='identifier'\nline_star:74,line_end:74|char_star:4,char_end:28"[shape="point",fillcolor="#121013",style=filled];
"def test_client_open_environ(app, client, request):\n    @app.route('/index')\n    def index():\n        return flask.request.remote_addr\n\n    builder = EnvironBuilder(app, path='/index', method='GET')\n    request.addfinalizer(builder.close)\n\n    rv = client.open(builder)\n    assert rv.data == b'127.0.0.1'\n\n    environ = builder.get_environ()\n    client.environ_base['REMOTE_ADDR'] = '127.0.0.2'\n    rv = client.open(environ)\n    assert rv.data == b'127.0.0.2',type='function_definition'\nline_star:74,line_end:88|char_star:0,char_end:34"->"test_client_open_environ,type='identifier'\nline_star:74,line_end:74|char_star:4,char_end:28";
"(app, client, request),type='parameters'\nline_star:74,line_end:74|char_star:28,char_end:50"[shape="box",fillcolor="white",style=filled];
"def test_client_open_environ(app, client, request):\n    @app.route('/index')\n    def index():\n        return flask.request.remote_addr\n\n    builder = EnvironBuilder(app, path='/index', method='GET')\n    request.addfinalizer(builder.close)\n\n    rv = client.open(builder)\n    assert rv.data == b'127.0.0.1'\n\n    environ = builder.get_environ()\n    client.environ_base['REMOTE_ADDR'] = '127.0.0.2'\n    rv = client.open(environ)\n    assert rv.data == b'127.0.0.2',type='function_definition'\nline_star:74,line_end:88|char_star:0,char_end:34"->"(app, client, request),type='parameters'\nline_star:74,line_end:74|char_star:28,char_end:50";
"app,type='identifier'\nline_star:74,line_end:74|char_star:29,char_end:32"[shape="point",fillcolor="#121013",style=filled];
"(app, client, request),type='parameters'\nline_star:74,line_end:74|char_star:28,char_end:50"->"app,type='identifier'\nline_star:74,line_end:74|char_star:29,char_end:32";
"client,type='identifier'\nline_star:74,line_end:74|char_star:34,char_end:40"[shape="point",fillcolor="#121013",style=filled];
"(app, client, request),type='parameters'\nline_star:74,line_end:74|char_star:28,char_end:50"->"client,type='identifier'\nline_star:74,line_end:74|char_star:34,char_end:40";
"request,type='identifier'\nline_star:74,line_end:74|char_star:42,char_end:49"[shape="point",fillcolor="#121013",style=filled];
"(app, client, request),type='parameters'\nline_star:74,line_end:74|char_star:28,char_end:50"->"request,type='identifier'\nline_star:74,line_end:74|char_star:42,char_end:49";
"type='INFORMATION BLOCK'\nline_star:75,line_end:88|char_star:4,char_end:34"[shape="point",fillcolor="#121013",style=filled];
"def test_client_open_environ(app, client, request):\n    @app.route('/index')\n    def index():\n        return flask.request.remote_addr\n\n    builder = EnvironBuilder(app, path='/index', method='GET')\n    request.addfinalizer(builder.close)\n\n    rv = client.open(builder)\n    assert rv.data == b'127.0.0.1'\n\n    environ = builder.get_environ()\n    client.environ_base['REMOTE_ADDR'] = '127.0.0.2'\n    rv = client.open(environ)\n    assert rv.data == b'127.0.0.2',type='function_definition'\nline_star:74,line_end:88|char_star:0,char_end:34"->"type='INFORMATION BLOCK'\nline_star:75,line_end:88|char_star:4,char_end:34";
"@app.route('/index')\n    def index():\n        return flask.request.remote_addr,type='decorated_definition'\nline_star:75,line_end:77|char_star:4,char_end:40"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:75,line_end:88|char_star:4,char_end:34"->"@app.route('/index')\n    def index():\n        return flask.request.remote_addr,type='decorated_definition'\nline_star:75,line_end:77|char_star:4,char_end:40";
"@app.route('/index'),type='decorator'\nline_star:75,line_end:75|char_star:4,char_end:24"[shape="box",fillcolor="white",style=filled];
"@app.route('/index')\n    def index():\n        return flask.request.remote_addr,type='decorated_definition'\nline_star:75,line_end:77|char_star:4,char_end:40"->"@app.route('/index'),type='decorator'\nline_star:75,line_end:75|char_star:4,char_end:24";
"def index():\n        return flask.request.remote_addr,type='function_definition'\nline_star:76,line_end:77|char_star:4,char_end:40"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.route('/index')\n    def index():\n        return flask.request.remote_addr,type='decorated_definition'\nline_star:75,line_end:77|char_star:4,char_end:40"->"def index():\n        return flask.request.remote_addr,type='function_definition'\nline_star:76,line_end:77|char_star:4,char_end:40";
"index,type='identifier'\nline_star:76,line_end:76|char_star:8,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"def index():\n        return flask.request.remote_addr,type='function_definition'\nline_star:76,line_end:77|char_star:4,char_end:40"->"index,type='identifier'\nline_star:76,line_end:76|char_star:8,char_end:13";
"type='INFORMATION BLOCK'\nline_star:77,line_end:77|char_star:8,char_end:40"[shape="point",fillcolor="#121013",style=filled];
"def index():\n        return flask.request.remote_addr,type='function_definition'\nline_star:76,line_end:77|char_star:4,char_end:40"->"type='INFORMATION BLOCK'\nline_star:77,line_end:77|char_star:8,char_end:40";
"return flask.request.remote_addr,type='return_statement'\nline_star:77,line_end:77|char_star:8,char_end:40"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:77,line_end:77|char_star:8,char_end:40"->"return flask.request.remote_addr,type='return_statement'\nline_star:77,line_end:77|char_star:8,char_end:40";
"assert rv.data == b'127.0.0.1',type='assert_statement'\nline_star:83,line_end:83|char_star:4,char_end:34"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:75,line_end:88|char_star:4,char_end:34"->"assert rv.data == b'127.0.0.1',type='assert_statement'\nline_star:83,line_end:83|char_star:4,char_end:34";
"rv.data == b'127.0.0.1',type='comparison_operator'\nline_star:83,line_end:83|char_star:11,char_end:34"[shape="box",fillcolor="white",style=filled];
"assert rv.data == b'127.0.0.1',type='assert_statement'\nline_star:83,line_end:83|char_star:4,char_end:34"->"rv.data == b'127.0.0.1',type='comparison_operator'\nline_star:83,line_end:83|char_star:11,char_end:34";
"rv.data,type='attribute'\nline_star:83,line_end:83|char_star:11,char_end:18"[shape="box",fillcolor="white",style=filled];
"rv.data == b'127.0.0.1',type='comparison_operator'\nline_star:83,line_end:83|char_star:11,char_end:34"->"rv.data,type='attribute'\nline_star:83,line_end:83|char_star:11,char_end:18";
"rv,type='identifier'\nline_star:83,line_end:83|char_star:11,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"rv.data,type='attribute'\nline_star:83,line_end:83|char_star:11,char_end:18"->"rv,type='identifier'\nline_star:83,line_end:83|char_star:11,char_end:13";
"data,type='identifier'\nline_star:83,line_end:83|char_star:14,char_end:18"[shape="point",fillcolor="#121013",style=filled];
"rv.data,type='attribute'\nline_star:83,line_end:83|char_star:11,char_end:18"->"data,type='identifier'\nline_star:83,line_end:83|char_star:14,char_end:18";
"assert rv.data == b'127.0.0.2',type='assert_statement'\nline_star:88,line_end:88|char_star:4,char_end:34"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:75,line_end:88|char_star:4,char_end:34"->"assert rv.data == b'127.0.0.2',type='assert_statement'\nline_star:88,line_end:88|char_star:4,char_end:34";
"rv.data == b'127.0.0.2',type='comparison_operator'\nline_star:88,line_end:88|char_star:11,char_end:34"[shape="box",fillcolor="white",style=filled];
"assert rv.data == b'127.0.0.2',type='assert_statement'\nline_star:88,line_end:88|char_star:4,char_end:34"->"rv.data == b'127.0.0.2',type='comparison_operator'\nline_star:88,line_end:88|char_star:11,char_end:34";
"rv.data,type='attribute'\nline_star:88,line_end:88|char_star:11,char_end:18"[shape="box",fillcolor="white",style=filled];
"rv.data == b'127.0.0.2',type='comparison_operator'\nline_star:88,line_end:88|char_star:11,char_end:34"->"rv.data,type='attribute'\nline_star:88,line_end:88|char_star:11,char_end:18";
"rv,type='identifier'\nline_star:88,line_end:88|char_star:11,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"rv.data,type='attribute'\nline_star:88,line_end:88|char_star:11,char_end:18"->"rv,type='identifier'\nline_star:88,line_end:88|char_star:11,char_end:13";
"data,type='identifier'\nline_star:88,line_end:88|char_star:14,char_end:18"[shape="point",fillcolor="#121013",style=filled];
"rv.data,type='attribute'\nline_star:88,line_end:88|char_star:11,char_end:18"->"data,type='identifier'\nline_star:88,line_end:88|char_star:14,char_end:18";
"def test_specify_url_scheme(app, client):\n    @app.route('/')\n    def index():\n        return flask.request.url\n\n    ctx = app.test_request_context(url_scheme='https')\n    assert ctx.request.url == 'https://localhost/'\n\n    rv = client.get('/', url_scheme='https')\n    assert rv.data == b'https://localhost/',type='function_definition'\nline_star:91,line_end:100|char_star:0,char_end:43"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_specify_url_scheme(app, client):\n    @app.route('/')\n    def index():\n        return flask.request.url\n\n    ctx = app.test_request_context(url_scheme='https')\n    assert ctx.request.url == 'https://localhost/'\n\n    rv = client.get('/', url_scheme='https')\n    assert rv.data == b'https://localhost/',type='function_definition'\nline_star:91,line_end:100|char_star:0,char_end:43";
"test_specify_url_scheme,type='identifier'\nline_star:91,line_end:91|char_star:4,char_end:27"[shape="point",fillcolor="#121013",style=filled];
"def test_specify_url_scheme(app, client):\n    @app.route('/')\n    def index():\n        return flask.request.url\n\n    ctx = app.test_request_context(url_scheme='https')\n    assert ctx.request.url == 'https://localhost/'\n\n    rv = client.get('/', url_scheme='https')\n    assert rv.data == b'https://localhost/',type='function_definition'\nline_star:91,line_end:100|char_star:0,char_end:43"->"test_specify_url_scheme,type='identifier'\nline_star:91,line_end:91|char_star:4,char_end:27";
"(app, client),type='parameters'\nline_star:91,line_end:91|char_star:27,char_end:40"[shape="box",fillcolor="white",style=filled];
"def test_specify_url_scheme(app, client):\n    @app.route('/')\n    def index():\n        return flask.request.url\n\n    ctx = app.test_request_context(url_scheme='https')\n    assert ctx.request.url == 'https://localhost/'\n\n    rv = client.get('/', url_scheme='https')\n    assert rv.data == b'https://localhost/',type='function_definition'\nline_star:91,line_end:100|char_star:0,char_end:43"->"(app, client),type='parameters'\nline_star:91,line_end:91|char_star:27,char_end:40";
"app,type='identifier'\nline_star:91,line_end:91|char_star:28,char_end:31"[shape="point",fillcolor="#121013",style=filled];
"(app, client),type='parameters'\nline_star:91,line_end:91|char_star:27,char_end:40"->"app,type='identifier'\nline_star:91,line_end:91|char_star:28,char_end:31";
"client,type='identifier'\nline_star:91,line_end:91|char_star:33,char_end:39"[shape="point",fillcolor="#121013",style=filled];
"(app, client),type='parameters'\nline_star:91,line_end:91|char_star:27,char_end:40"->"client,type='identifier'\nline_star:91,line_end:91|char_star:33,char_end:39";
"type='INFORMATION BLOCK'\nline_star:92,line_end:100|char_star:4,char_end:43"[shape="point",fillcolor="#121013",style=filled];
"def test_specify_url_scheme(app, client):\n    @app.route('/')\n    def index():\n        return flask.request.url\n\n    ctx = app.test_request_context(url_scheme='https')\n    assert ctx.request.url == 'https://localhost/'\n\n    rv = client.get('/', url_scheme='https')\n    assert rv.data == b'https://localhost/',type='function_definition'\nline_star:91,line_end:100|char_star:0,char_end:43"->"type='INFORMATION BLOCK'\nline_star:92,line_end:100|char_star:4,char_end:43";
"@app.route('/')\n    def index():\n        return flask.request.url,type='decorated_definition'\nline_star:92,line_end:94|char_star:4,char_end:32"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:92,line_end:100|char_star:4,char_end:43"->"@app.route('/')\n    def index():\n        return flask.request.url,type='decorated_definition'\nline_star:92,line_end:94|char_star:4,char_end:32";
"@app.route('/'),type='decorator'\nline_star:92,line_end:92|char_star:4,char_end:19"[shape="box",fillcolor="white",style=filled];
"@app.route('/')\n    def index():\n        return flask.request.url,type='decorated_definition'\nline_star:92,line_end:94|char_star:4,char_end:32"->"@app.route('/'),type='decorator'\nline_star:92,line_end:92|char_star:4,char_end:19";
"def index():\n        return flask.request.url,type='function_definition'\nline_star:93,line_end:94|char_star:4,char_end:32"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.route('/')\n    def index():\n        return flask.request.url,type='decorated_definition'\nline_star:92,line_end:94|char_star:4,char_end:32"->"def index():\n        return flask.request.url,type='function_definition'\nline_star:93,line_end:94|char_star:4,char_end:32";
"index,type='identifier'\nline_star:93,line_end:93|char_star:8,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"def index():\n        return flask.request.url,type='function_definition'\nline_star:93,line_end:94|char_star:4,char_end:32"->"index,type='identifier'\nline_star:93,line_end:93|char_star:8,char_end:13";
"type='INFORMATION BLOCK'\nline_star:94,line_end:94|char_star:8,char_end:32"[shape="point",fillcolor="#121013",style=filled];
"def index():\n        return flask.request.url,type='function_definition'\nline_star:93,line_end:94|char_star:4,char_end:32"->"type='INFORMATION BLOCK'\nline_star:94,line_end:94|char_star:8,char_end:32";
"return flask.request.url,type='return_statement'\nline_star:94,line_end:94|char_star:8,char_end:32"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:94,line_end:94|char_star:8,char_end:32"->"return flask.request.url,type='return_statement'\nline_star:94,line_end:94|char_star:8,char_end:32";
"assert ctx.request.url == 'https://localhost/',type='assert_statement'\nline_star:97,line_end:97|char_star:4,char_end:50"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:92,line_end:100|char_star:4,char_end:43"->"assert ctx.request.url == 'https://localhost/',type='assert_statement'\nline_star:97,line_end:97|char_star:4,char_end:50";
"ctx.request.url == 'https://localhost/',type='comparison_operator'\nline_star:97,line_end:97|char_star:11,char_end:50"[shape="box",fillcolor="white",style=filled];
"assert ctx.request.url == 'https://localhost/',type='assert_statement'\nline_star:97,line_end:97|char_star:4,char_end:50"->"ctx.request.url == 'https://localhost/',type='comparison_operator'\nline_star:97,line_end:97|char_star:11,char_end:50";
"ctx.request.url,type='attribute'\nline_star:97,line_end:97|char_star:11,char_end:26"[shape="box",fillcolor="white",style=filled];
"ctx.request.url == 'https://localhost/',type='comparison_operator'\nline_star:97,line_end:97|char_star:11,char_end:50"->"ctx.request.url,type='attribute'\nline_star:97,line_end:97|char_star:11,char_end:26";
"ctx.request,type='attribute'\nline_star:97,line_end:97|char_star:11,char_end:22"[shape="box",fillcolor="white",style=filled];
"ctx.request.url,type='attribute'\nline_star:97,line_end:97|char_star:11,char_end:26"->"ctx.request,type='attribute'\nline_star:97,line_end:97|char_star:11,char_end:22";
"ctx,type='identifier'\nline_star:97,line_end:97|char_star:11,char_end:14"[shape="point",fillcolor="#121013",style=filled];
"ctx.request,type='attribute'\nline_star:97,line_end:97|char_star:11,char_end:22"->"ctx,type='identifier'\nline_star:97,line_end:97|char_star:11,char_end:14";
"request,type='identifier'\nline_star:97,line_end:97|char_star:15,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"ctx.request,type='attribute'\nline_star:97,line_end:97|char_star:11,char_end:22"->"request,type='identifier'\nline_star:97,line_end:97|char_star:15,char_end:22";
"url,type='identifier'\nline_star:97,line_end:97|char_star:23,char_end:26"[shape="point",fillcolor="#121013",style=filled];
"ctx.request.url,type='attribute'\nline_star:97,line_end:97|char_star:11,char_end:26"->"url,type='identifier'\nline_star:97,line_end:97|char_star:23,char_end:26";
"assert rv.data == b'https://localhost/',type='assert_statement'\nline_star:100,line_end:100|char_star:4,char_end:43"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:92,line_end:100|char_star:4,char_end:43"->"assert rv.data == b'https://localhost/',type='assert_statement'\nline_star:100,line_end:100|char_star:4,char_end:43";
"rv.data == b'https://localhost/',type='comparison_operator'\nline_star:100,line_end:100|char_star:11,char_end:43"[shape="box",fillcolor="white",style=filled];
"assert rv.data == b'https://localhost/',type='assert_statement'\nline_star:100,line_end:100|char_star:4,char_end:43"->"rv.data == b'https://localhost/',type='comparison_operator'\nline_star:100,line_end:100|char_star:11,char_end:43";
"rv.data,type='attribute'\nline_star:100,line_end:100|char_star:11,char_end:18"[shape="box",fillcolor="white",style=filled];
"rv.data == b'https://localhost/',type='comparison_operator'\nline_star:100,line_end:100|char_star:11,char_end:43"->"rv.data,type='attribute'\nline_star:100,line_end:100|char_star:11,char_end:18";
"rv,type='identifier'\nline_star:100,line_end:100|char_star:11,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"rv.data,type='attribute'\nline_star:100,line_end:100|char_star:11,char_end:18"->"rv,type='identifier'\nline_star:100,line_end:100|char_star:11,char_end:13";
"data,type='identifier'\nline_star:100,line_end:100|char_star:14,char_end:18"[shape="point",fillcolor="#121013",style=filled];
"rv.data,type='attribute'\nline_star:100,line_end:100|char_star:11,char_end:18"->"data,type='identifier'\nline_star:100,line_end:100|char_star:14,char_end:18";
"def test_path_is_url(app):\n    eb = EnvironBuilder(app, 'https://example.com/')\n    assert eb.url_scheme == 'https'\n    assert eb.host == 'example.com'\n    assert eb.script_root == ''\n    assert eb.path == '/',type='function_definition'\nline_star:103,line_end:108|char_star:0,char_end:25"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_path_is_url(app):\n    eb = EnvironBuilder(app, 'https://example.com/')\n    assert eb.url_scheme == 'https'\n    assert eb.host == 'example.com'\n    assert eb.script_root == ''\n    assert eb.path == '/',type='function_definition'\nline_star:103,line_end:108|char_star:0,char_end:25";
"test_path_is_url,type='identifier'\nline_star:103,line_end:103|char_star:4,char_end:20"[shape="point",fillcolor="#121013",style=filled];
"def test_path_is_url(app):\n    eb = EnvironBuilder(app, 'https://example.com/')\n    assert eb.url_scheme == 'https'\n    assert eb.host == 'example.com'\n    assert eb.script_root == ''\n    assert eb.path == '/',type='function_definition'\nline_star:103,line_end:108|char_star:0,char_end:25"->"test_path_is_url,type='identifier'\nline_star:103,line_end:103|char_star:4,char_end:20";
"(app),type='parameters'\nline_star:103,line_end:103|char_star:20,char_end:25"[shape="box",fillcolor="white",style=filled];
"def test_path_is_url(app):\n    eb = EnvironBuilder(app, 'https://example.com/')\n    assert eb.url_scheme == 'https'\n    assert eb.host == 'example.com'\n    assert eb.script_root == ''\n    assert eb.path == '/',type='function_definition'\nline_star:103,line_end:108|char_star:0,char_end:25"->"(app),type='parameters'\nline_star:103,line_end:103|char_star:20,char_end:25";
"app,type='identifier'\nline_star:103,line_end:103|char_star:21,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"(app),type='parameters'\nline_star:103,line_end:103|char_star:20,char_end:25"->"app,type='identifier'\nline_star:103,line_end:103|char_star:21,char_end:24";
"type='INFORMATION BLOCK'\nline_star:104,line_end:108|char_star:4,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"def test_path_is_url(app):\n    eb = EnvironBuilder(app, 'https://example.com/')\n    assert eb.url_scheme == 'https'\n    assert eb.host == 'example.com'\n    assert eb.script_root == ''\n    assert eb.path == '/',type='function_definition'\nline_star:103,line_end:108|char_star:0,char_end:25"->"type='INFORMATION BLOCK'\nline_star:104,line_end:108|char_star:4,char_end:25";
"assert eb.url_scheme == 'https',type='assert_statement'\nline_star:105,line_end:105|char_star:4,char_end:35"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:104,line_end:108|char_star:4,char_end:25"->"assert eb.url_scheme == 'https',type='assert_statement'\nline_star:105,line_end:105|char_star:4,char_end:35";
"eb.url_scheme == 'https',type='comparison_operator'\nline_star:105,line_end:105|char_star:11,char_end:35"[shape="box",fillcolor="white",style=filled];
"assert eb.url_scheme == 'https',type='assert_statement'\nline_star:105,line_end:105|char_star:4,char_end:35"->"eb.url_scheme == 'https',type='comparison_operator'\nline_star:105,line_end:105|char_star:11,char_end:35";
"eb.url_scheme,type='attribute'\nline_star:105,line_end:105|char_star:11,char_end:24"[shape="box",fillcolor="white",style=filled];
"eb.url_scheme == 'https',type='comparison_operator'\nline_star:105,line_end:105|char_star:11,char_end:35"->"eb.url_scheme,type='attribute'\nline_star:105,line_end:105|char_star:11,char_end:24";
"eb,type='identifier'\nline_star:105,line_end:105|char_star:11,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"eb.url_scheme,type='attribute'\nline_star:105,line_end:105|char_star:11,char_end:24"->"eb,type='identifier'\nline_star:105,line_end:105|char_star:11,char_end:13";
"url_scheme,type='identifier'\nline_star:105,line_end:105|char_star:14,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"eb.url_scheme,type='attribute'\nline_star:105,line_end:105|char_star:11,char_end:24"->"url_scheme,type='identifier'\nline_star:105,line_end:105|char_star:14,char_end:24";
"assert eb.host == 'example.com',type='assert_statement'\nline_star:106,line_end:106|char_star:4,char_end:35"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:104,line_end:108|char_star:4,char_end:25"->"assert eb.host == 'example.com',type='assert_statement'\nline_star:106,line_end:106|char_star:4,char_end:35";
"eb.host == 'example.com',type='comparison_operator'\nline_star:106,line_end:106|char_star:11,char_end:35"[shape="box",fillcolor="white",style=filled];
"assert eb.host == 'example.com',type='assert_statement'\nline_star:106,line_end:106|char_star:4,char_end:35"->"eb.host == 'example.com',type='comparison_operator'\nline_star:106,line_end:106|char_star:11,char_end:35";
"eb.host,type='attribute'\nline_star:106,line_end:106|char_star:11,char_end:18"[shape="box",fillcolor="white",style=filled];
"eb.host == 'example.com',type='comparison_operator'\nline_star:106,line_end:106|char_star:11,char_end:35"->"eb.host,type='attribute'\nline_star:106,line_end:106|char_star:11,char_end:18";
"eb,type='identifier'\nline_star:106,line_end:106|char_star:11,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"eb.host,type='attribute'\nline_star:106,line_end:106|char_star:11,char_end:18"->"eb,type='identifier'\nline_star:106,line_end:106|char_star:11,char_end:13";
"host,type='identifier'\nline_star:106,line_end:106|char_star:14,char_end:18"[shape="point",fillcolor="#121013",style=filled];
"eb.host,type='attribute'\nline_star:106,line_end:106|char_star:11,char_end:18"->"host,type='identifier'\nline_star:106,line_end:106|char_star:14,char_end:18";
"assert eb.script_root == '',type='assert_statement'\nline_star:107,line_end:107|char_star:4,char_end:31"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:104,line_end:108|char_star:4,char_end:25"->"assert eb.script_root == '',type='assert_statement'\nline_star:107,line_end:107|char_star:4,char_end:31";
"eb.script_root == '',type='comparison_operator'\nline_star:107,line_end:107|char_star:11,char_end:31"[shape="box",fillcolor="white",style=filled];
"assert eb.script_root == '',type='assert_statement'\nline_star:107,line_end:107|char_star:4,char_end:31"->"eb.script_root == '',type='comparison_operator'\nline_star:107,line_end:107|char_star:11,char_end:31";
"eb.script_root,type='attribute'\nline_star:107,line_end:107|char_star:11,char_end:25"[shape="box",fillcolor="white",style=filled];
"eb.script_root == '',type='comparison_operator'\nline_star:107,line_end:107|char_star:11,char_end:31"->"eb.script_root,type='attribute'\nline_star:107,line_end:107|char_star:11,char_end:25";
"eb,type='identifier'\nline_star:107,line_end:107|char_star:11,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"eb.script_root,type='attribute'\nline_star:107,line_end:107|char_star:11,char_end:25"->"eb,type='identifier'\nline_star:107,line_end:107|char_star:11,char_end:13";
"script_root,type='identifier'\nline_star:107,line_end:107|char_star:14,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"eb.script_root,type='attribute'\nline_star:107,line_end:107|char_star:11,char_end:25"->"script_root,type='identifier'\nline_star:107,line_end:107|char_star:14,char_end:25";
"assert eb.path == '/',type='assert_statement'\nline_star:108,line_end:108|char_star:4,char_end:25"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:104,line_end:108|char_star:4,char_end:25"->"assert eb.path == '/',type='assert_statement'\nline_star:108,line_end:108|char_star:4,char_end:25";
"eb.path == '/',type='comparison_operator'\nline_star:108,line_end:108|char_star:11,char_end:25"[shape="box",fillcolor="white",style=filled];
"assert eb.path == '/',type='assert_statement'\nline_star:108,line_end:108|char_star:4,char_end:25"->"eb.path == '/',type='comparison_operator'\nline_star:108,line_end:108|char_star:11,char_end:25";
"eb.path,type='attribute'\nline_star:108,line_end:108|char_star:11,char_end:18"[shape="box",fillcolor="white",style=filled];
"eb.path == '/',type='comparison_operator'\nline_star:108,line_end:108|char_star:11,char_end:25"->"eb.path,type='attribute'\nline_star:108,line_end:108|char_star:11,char_end:18";
"eb,type='identifier'\nline_star:108,line_end:108|char_star:11,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"eb.path,type='attribute'\nline_star:108,line_end:108|char_star:11,char_end:18"->"eb,type='identifier'\nline_star:108,line_end:108|char_star:11,char_end:13";
"path,type='identifier'\nline_star:108,line_end:108|char_star:14,char_end:18"[shape="point",fillcolor="#121013",style=filled];
"eb.path,type='attribute'\nline_star:108,line_end:108|char_star:11,char_end:18"->"path,type='identifier'\nline_star:108,line_end:108|char_star:14,char_end:18";
"def test_environbuilder_json_dumps(app):\n    '''EnvironBuilder.json_dumps() takes settings from the app.'''\n    app.config['JSON_AS_ASCII'] = False\n    eb = EnvironBuilder(app, json='\u20ac')\n    assert eb.input_stream.read().decode('utf8') == ''\u20ac'',type='function_definition'\nline_star:111,line_end:115|char_star:0,char_end:62"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_environbuilder_json_dumps(app):\n    '''EnvironBuilder.json_dumps() takes settings from the app.'''\n    app.config['JSON_AS_ASCII'] = False\n    eb = EnvironBuilder(app, json='\u20ac')\n    assert eb.input_stream.read().decode('utf8') == ''\u20ac'',type='function_definition'\nline_star:111,line_end:115|char_star:0,char_end:62";
"test_environbuilder_json_dumps,type='identifier'\nline_star:111,line_end:111|char_star:4,char_end:34"[shape="point",fillcolor="#121013",style=filled];
"def test_environbuilder_json_dumps(app):\n    '''EnvironBuilder.json_dumps() takes settings from the app.'''\n    app.config['JSON_AS_ASCII'] = False\n    eb = EnvironBuilder(app, json='\u20ac')\n    assert eb.input_stream.read().decode('utf8') == ''\u20ac'',type='function_definition'\nline_star:111,line_end:115|char_star:0,char_end:62"->"test_environbuilder_json_dumps,type='identifier'\nline_star:111,line_end:111|char_star:4,char_end:34";
"(app),type='parameters'\nline_star:111,line_end:111|char_star:34,char_end:39"[shape="box",fillcolor="white",style=filled];
"def test_environbuilder_json_dumps(app):\n    '''EnvironBuilder.json_dumps() takes settings from the app.'''\n    app.config['JSON_AS_ASCII'] = False\n    eb = EnvironBuilder(app, json='\u20ac')\n    assert eb.input_stream.read().decode('utf8') == ''\u20ac'',type='function_definition'\nline_star:111,line_end:115|char_star:0,char_end:62"->"(app),type='parameters'\nline_star:111,line_end:111|char_star:34,char_end:39";
"app,type='identifier'\nline_star:111,line_end:111|char_star:35,char_end:38"[shape="point",fillcolor="#121013",style=filled];
"(app),type='parameters'\nline_star:111,line_end:111|char_star:34,char_end:39"->"app,type='identifier'\nline_star:111,line_end:111|char_star:35,char_end:38";
"type='INFORMATION BLOCK'\nline_star:112,line_end:115|char_star:4,char_end:62"[shape="point",fillcolor="#121013",style=filled];
"def test_environbuilder_json_dumps(app):\n    '''EnvironBuilder.json_dumps() takes settings from the app.'''\n    app.config['JSON_AS_ASCII'] = False\n    eb = EnvironBuilder(app, json='\u20ac')\n    assert eb.input_stream.read().decode('utf8') == ''\u20ac'',type='function_definition'\nline_star:111,line_end:115|char_star:0,char_end:62"->"type='INFORMATION BLOCK'\nline_star:112,line_end:115|char_star:4,char_end:62";
"assert eb.input_stream.read().decode('utf8') == ''\u20ac'',type='assert_statement'\nline_star:115,line_end:115|char_star:4,char_end:62"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:112,line_end:115|char_star:4,char_end:62"->"assert eb.input_stream.read().decode('utf8') == ''\u20ac'',type='assert_statement'\nline_star:115,line_end:115|char_star:4,char_end:62";
"eb.input_stream.read().decode('utf8') == ''\u20ac'',type='comparison_operator'\nline_star:115,line_end:115|char_star:11,char_end:62"[shape="box",fillcolor="white",style=filled];
"assert eb.input_stream.read().decode('utf8') == ''\u20ac'',type='assert_statement'\nline_star:115,line_end:115|char_star:4,char_end:62"->"eb.input_stream.read().decode('utf8') == ''\u20ac'',type='comparison_operator'\nline_star:115,line_end:115|char_star:11,char_end:62";
"eb.input_stream.read().decode('utf8'),type='call'\nline_star:115,line_end:115|char_star:11,char_end:48"[shape="box",fillcolor="white",style=filled];
"eb.input_stream.read().decode('utf8') == ''\u20ac'',type='comparison_operator'\nline_star:115,line_end:115|char_star:11,char_end:62"->"eb.input_stream.read().decode('utf8'),type='call'\nline_star:115,line_end:115|char_star:11,char_end:48";
"eb.input_stream.read().decode,type='attribute'\nline_star:115,line_end:115|char_star:11,char_end:40"[shape="box",fillcolor="white",style=filled];
"eb.input_stream.read().decode('utf8'),type='call'\nline_star:115,line_end:115|char_star:11,char_end:48"->"eb.input_stream.read().decode,type='attribute'\nline_star:115,line_end:115|char_star:11,char_end:40";
"eb.input_stream.read(),type='call'\nline_star:115,line_end:115|char_star:11,char_end:33"[shape="box",fillcolor="white",style=filled];
"eb.input_stream.read().decode,type='attribute'\nline_star:115,line_end:115|char_star:11,char_end:40"->"eb.input_stream.read(),type='call'\nline_star:115,line_end:115|char_star:11,char_end:33";
"eb.input_stream.read,type='attribute'\nline_star:115,line_end:115|char_star:11,char_end:31"[shape="box",fillcolor="white",style=filled];
"eb.input_stream.read(),type='call'\nline_star:115,line_end:115|char_star:11,char_end:33"->"eb.input_stream.read,type='attribute'\nline_star:115,line_end:115|char_star:11,char_end:31";
"eb.input_stream,type='attribute'\nline_star:115,line_end:115|char_star:11,char_end:26"[shape="box",fillcolor="white",style=filled];
"eb.input_stream.read,type='attribute'\nline_star:115,line_end:115|char_star:11,char_end:31"->"eb.input_stream,type='attribute'\nline_star:115,line_end:115|char_star:11,char_end:26";
"eb,type='identifier'\nline_star:115,line_end:115|char_star:11,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"eb.input_stream,type='attribute'\nline_star:115,line_end:115|char_star:11,char_end:26"->"eb,type='identifier'\nline_star:115,line_end:115|char_star:11,char_end:13";
"input_stream,type='identifier'\nline_star:115,line_end:115|char_star:14,char_end:26"[shape="point",fillcolor="#121013",style=filled];
"eb.input_stream,type='attribute'\nline_star:115,line_end:115|char_star:11,char_end:26"->"input_stream,type='identifier'\nline_star:115,line_end:115|char_star:14,char_end:26";
"read,type='identifier'\nline_star:115,line_end:115|char_star:27,char_end:31"[shape="point",fillcolor="#121013",style=filled];
"eb.input_stream.read,type='attribute'\nline_star:115,line_end:115|char_star:11,char_end:31"->"read,type='identifier'\nline_star:115,line_end:115|char_star:27,char_end:31";
"decode,type='identifier'\nline_star:115,line_end:115|char_star:34,char_end:40"[shape="point",fillcolor="#121013",style=filled];
"eb.input_stream.read().decode,type='attribute'\nline_star:115,line_end:115|char_star:11,char_end:40"->"decode,type='identifier'\nline_star:115,line_end:115|char_star:34,char_end:40";
"('utf8'),type='argument_list'\nline_star:115,line_end:115|char_star:40,char_end:48"[shape="box",fillcolor="white",style=filled];
"eb.input_stream.read().decode('utf8'),type='call'\nline_star:115,line_end:115|char_star:11,char_end:48"->"('utf8'),type='argument_list'\nline_star:115,line_end:115|char_star:40,char_end:48";
"def test_blueprint_with_subdomain():\n    app = flask.Flask(__name__, subdomain_matching=True)\n    app.config['SERVER_NAME'] = 'example.com:1234'\n    app.config['APPLICATION_ROOT'] = '/foo'\n    client = app.test_client()\n\n    bp = flask.Blueprint('company', __name__, subdomain='xxx')\n\n    @bp.route('/')\n    def index():\n        return flask.request.url\n\n    app.register_blueprint(bp)\n\n    ctx = app.test_request_context('/', subdomain='xxx')\n    assert ctx.request.url == 'http://xxx.example.com:1234/foo/'\n\n    with ctx:\n        assert ctx.request.blueprint == bp.name\n\n    rv = client.get('/', subdomain='xxx')\n    assert rv.data == b'http://xxx.example.com:1234/foo/',type='function_definition'\nline_star:118,line_end:139|char_star:0,char_end:57"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_blueprint_with_subdomain():\n    app = flask.Flask(__name__, subdomain_matching=True)\n    app.config['SERVER_NAME'] = 'example.com:1234'\n    app.config['APPLICATION_ROOT'] = '/foo'\n    client = app.test_client()\n\n    bp = flask.Blueprint('company', __name__, subdomain='xxx')\n\n    @bp.route('/')\n    def index():\n        return flask.request.url\n\n    app.register_blueprint(bp)\n\n    ctx = app.test_request_context('/', subdomain='xxx')\n    assert ctx.request.url == 'http://xxx.example.com:1234/foo/'\n\n    with ctx:\n        assert ctx.request.blueprint == bp.name\n\n    rv = client.get('/', subdomain='xxx')\n    assert rv.data == b'http://xxx.example.com:1234/foo/',type='function_definition'\nline_star:118,line_end:139|char_star:0,char_end:57";
"test_blueprint_with_subdomain,type='identifier'\nline_star:118,line_end:118|char_star:4,char_end:33"[shape="point",fillcolor="#121013",style=filled];
"def test_blueprint_with_subdomain():\n    app = flask.Flask(__name__, subdomain_matching=True)\n    app.config['SERVER_NAME'] = 'example.com:1234'\n    app.config['APPLICATION_ROOT'] = '/foo'\n    client = app.test_client()\n\n    bp = flask.Blueprint('company', __name__, subdomain='xxx')\n\n    @bp.route('/')\n    def index():\n        return flask.request.url\n\n    app.register_blueprint(bp)\n\n    ctx = app.test_request_context('/', subdomain='xxx')\n    assert ctx.request.url == 'http://xxx.example.com:1234/foo/'\n\n    with ctx:\n        assert ctx.request.blueprint == bp.name\n\n    rv = client.get('/', subdomain='xxx')\n    assert rv.data == b'http://xxx.example.com:1234/foo/',type='function_definition'\nline_star:118,line_end:139|char_star:0,char_end:57"->"test_blueprint_with_subdomain,type='identifier'\nline_star:118,line_end:118|char_star:4,char_end:33";
"type='INFORMATION BLOCK'\nline_star:119,line_end:139|char_star:4,char_end:57"[shape="point",fillcolor="#121013",style=filled];
"def test_blueprint_with_subdomain():\n    app = flask.Flask(__name__, subdomain_matching=True)\n    app.config['SERVER_NAME'] = 'example.com:1234'\n    app.config['APPLICATION_ROOT'] = '/foo'\n    client = app.test_client()\n\n    bp = flask.Blueprint('company', __name__, subdomain='xxx')\n\n    @bp.route('/')\n    def index():\n        return flask.request.url\n\n    app.register_blueprint(bp)\n\n    ctx = app.test_request_context('/', subdomain='xxx')\n    assert ctx.request.url == 'http://xxx.example.com:1234/foo/'\n\n    with ctx:\n        assert ctx.request.blueprint == bp.name\n\n    rv = client.get('/', subdomain='xxx')\n    assert rv.data == b'http://xxx.example.com:1234/foo/',type='function_definition'\nline_star:118,line_end:139|char_star:0,char_end:57"->"type='INFORMATION BLOCK'\nline_star:119,line_end:139|char_star:4,char_end:57";
"@bp.route('/')\n    def index():\n        return flask.request.url,type='decorated_definition'\nline_star:126,line_end:128|char_star:4,char_end:32"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:119,line_end:139|char_star:4,char_end:57"->"@bp.route('/')\n    def index():\n        return flask.request.url,type='decorated_definition'\nline_star:126,line_end:128|char_star:4,char_end:32";
"@bp.route('/'),type='decorator'\nline_star:126,line_end:126|char_star:4,char_end:18"[shape="box",fillcolor="white",style=filled];
"@bp.route('/')\n    def index():\n        return flask.request.url,type='decorated_definition'\nline_star:126,line_end:128|char_star:4,char_end:32"->"@bp.route('/'),type='decorator'\nline_star:126,line_end:126|char_star:4,char_end:18";
"def index():\n        return flask.request.url,type='function_definition'\nline_star:127,line_end:128|char_star:4,char_end:32"[shape="box",fillcolor="#cee6b4",style=filled];
"@bp.route('/')\n    def index():\n        return flask.request.url,type='decorated_definition'\nline_star:126,line_end:128|char_star:4,char_end:32"->"def index():\n        return flask.request.url,type='function_definition'\nline_star:127,line_end:128|char_star:4,char_end:32";
"index,type='identifier'\nline_star:127,line_end:127|char_star:8,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"def index():\n        return flask.request.url,type='function_definition'\nline_star:127,line_end:128|char_star:4,char_end:32"->"index,type='identifier'\nline_star:127,line_end:127|char_star:8,char_end:13";
"type='INFORMATION BLOCK'\nline_star:128,line_end:128|char_star:8,char_end:32"[shape="point",fillcolor="#121013",style=filled];
"def index():\n        return flask.request.url,type='function_definition'\nline_star:127,line_end:128|char_star:4,char_end:32"->"type='INFORMATION BLOCK'\nline_star:128,line_end:128|char_star:8,char_end:32";
"return flask.request.url,type='return_statement'\nline_star:128,line_end:128|char_star:8,char_end:32"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:128,line_end:128|char_star:8,char_end:32"->"return flask.request.url,type='return_statement'\nline_star:128,line_end:128|char_star:8,char_end:32";
"assert ctx.request.url == 'http://xxx.example.com:1234/foo/',type='assert_statement'\nline_star:133,line_end:133|char_star:4,char_end:64"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:119,line_end:139|char_star:4,char_end:57"->"assert ctx.request.url == 'http://xxx.example.com:1234/foo/',type='assert_statement'\nline_star:133,line_end:133|char_star:4,char_end:64";
"ctx.request.url == 'http://xxx.example.com:1234/foo/',type='comparison_operator'\nline_star:133,line_end:133|char_star:11,char_end:64"[shape="box",fillcolor="white",style=filled];
"assert ctx.request.url == 'http://xxx.example.com:1234/foo/',type='assert_statement'\nline_star:133,line_end:133|char_star:4,char_end:64"->"ctx.request.url == 'http://xxx.example.com:1234/foo/',type='comparison_operator'\nline_star:133,line_end:133|char_star:11,char_end:64";
"ctx.request.url,type='attribute'\nline_star:133,line_end:133|char_star:11,char_end:26"[shape="box",fillcolor="white",style=filled];
"ctx.request.url == 'http://xxx.example.com:1234/foo/',type='comparison_operator'\nline_star:133,line_end:133|char_star:11,char_end:64"->"ctx.request.url,type='attribute'\nline_star:133,line_end:133|char_star:11,char_end:26";
"ctx.request,type='attribute'\nline_star:133,line_end:133|char_star:11,char_end:22"[shape="box",fillcolor="white",style=filled];
"ctx.request.url,type='attribute'\nline_star:133,line_end:133|char_star:11,char_end:26"->"ctx.request,type='attribute'\nline_star:133,line_end:133|char_star:11,char_end:22";
"ctx,type='identifier'\nline_star:133,line_end:133|char_star:11,char_end:14"[shape="point",fillcolor="#121013",style=filled];
"ctx.request,type='attribute'\nline_star:133,line_end:133|char_star:11,char_end:22"->"ctx,type='identifier'\nline_star:133,line_end:133|char_star:11,char_end:14";
"request,type='identifier'\nline_star:133,line_end:133|char_star:15,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"ctx.request,type='attribute'\nline_star:133,line_end:133|char_star:11,char_end:22"->"request,type='identifier'\nline_star:133,line_end:133|char_star:15,char_end:22";
"url,type='identifier'\nline_star:133,line_end:133|char_star:23,char_end:26"[shape="point",fillcolor="#121013",style=filled];
"ctx.request.url,type='attribute'\nline_star:133,line_end:133|char_star:11,char_end:26"->"url,type='identifier'\nline_star:133,line_end:133|char_star:23,char_end:26";
"with ctx:\n        assert ctx.request.blueprint == bp.name,type='with_statement'\nline_star:135,line_end:136|char_star:4,char_end:47"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:119,line_end:139|char_star:4,char_end:57"->"with ctx:\n        assert ctx.request.blueprint == bp.name,type='with_statement'\nline_star:135,line_end:136|char_star:4,char_end:47";
"ctx,type='with_clause'\nline_star:135,line_end:135|char_star:9,char_end:12"[shape="box",fillcolor="white",style=filled];
"with ctx:\n        assert ctx.request.blueprint == bp.name,type='with_statement'\nline_star:135,line_end:136|char_star:4,char_end:47"->"ctx,type='with_clause'\nline_star:135,line_end:135|char_star:9,char_end:12";
"type='INFORMATION BLOCK'\nline_star:136,line_end:136|char_star:8,char_end:47"[shape="point",fillcolor="#121013",style=filled];
"with ctx:\n        assert ctx.request.blueprint == bp.name,type='with_statement'\nline_star:135,line_end:136|char_star:4,char_end:47"->"type='INFORMATION BLOCK'\nline_star:136,line_end:136|char_star:8,char_end:47";
"assert ctx.request.blueprint == bp.name,type='assert_statement'\nline_star:136,line_end:136|char_star:8,char_end:47"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:136,line_end:136|char_star:8,char_end:47"->"assert ctx.request.blueprint == bp.name,type='assert_statement'\nline_star:136,line_end:136|char_star:8,char_end:47";
"ctx.request.blueprint == bp.name,type='comparison_operator'\nline_star:136,line_end:136|char_star:15,char_end:47"[shape="box",fillcolor="white",style=filled];
"assert ctx.request.blueprint == bp.name,type='assert_statement'\nline_star:136,line_end:136|char_star:8,char_end:47"->"ctx.request.blueprint == bp.name,type='comparison_operator'\nline_star:136,line_end:136|char_star:15,char_end:47";
"ctx.request.blueprint,type='attribute'\nline_star:136,line_end:136|char_star:15,char_end:36"[shape="box",fillcolor="white",style=filled];
"ctx.request.blueprint == bp.name,type='comparison_operator'\nline_star:136,line_end:136|char_star:15,char_end:47"->"ctx.request.blueprint,type='attribute'\nline_star:136,line_end:136|char_star:15,char_end:36";
"ctx.request,type='attribute'\nline_star:136,line_end:136|char_star:15,char_end:26"[shape="box",fillcolor="white",style=filled];
"ctx.request.blueprint,type='attribute'\nline_star:136,line_end:136|char_star:15,char_end:36"->"ctx.request,type='attribute'\nline_star:136,line_end:136|char_star:15,char_end:26";
"ctx,type='identifier'\nline_star:136,line_end:136|char_star:15,char_end:18"[shape="point",fillcolor="#121013",style=filled];
"ctx.request,type='attribute'\nline_star:136,line_end:136|char_star:15,char_end:26"->"ctx,type='identifier'\nline_star:136,line_end:136|char_star:15,char_end:18";
"request,type='identifier'\nline_star:136,line_end:136|char_star:19,char_end:26"[shape="point",fillcolor="#121013",style=filled];
"ctx.request,type='attribute'\nline_star:136,line_end:136|char_star:15,char_end:26"->"request,type='identifier'\nline_star:136,line_end:136|char_star:19,char_end:26";
"blueprint,type='identifier'\nline_star:136,line_end:136|char_star:27,char_end:36"[shape="point",fillcolor="#121013",style=filled];
"ctx.request.blueprint,type='attribute'\nline_star:136,line_end:136|char_star:15,char_end:36"->"blueprint,type='identifier'\nline_star:136,line_end:136|char_star:27,char_end:36";
"bp.name,type='attribute'\nline_star:136,line_end:136|char_star:40,char_end:47"[shape="box",fillcolor="white",style=filled];
"ctx.request.blueprint == bp.name,type='comparison_operator'\nline_star:136,line_end:136|char_star:15,char_end:47"->"bp.name,type='attribute'\nline_star:136,line_end:136|char_star:40,char_end:47";
"bp,type='identifier'\nline_star:136,line_end:136|char_star:40,char_end:42"[shape="point",fillcolor="#121013",style=filled];
"bp.name,type='attribute'\nline_star:136,line_end:136|char_star:40,char_end:47"->"bp,type='identifier'\nline_star:136,line_end:136|char_star:40,char_end:42";
"name,type='identifier'\nline_star:136,line_end:136|char_star:43,char_end:47"[shape="point",fillcolor="#121013",style=filled];
"bp.name,type='attribute'\nline_star:136,line_end:136|char_star:40,char_end:47"->"name,type='identifier'\nline_star:136,line_end:136|char_star:43,char_end:47";
"assert rv.data == b'http://xxx.example.com:1234/foo/',type='assert_statement'\nline_star:139,line_end:139|char_star:4,char_end:57"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:119,line_end:139|char_star:4,char_end:57"->"assert rv.data == b'http://xxx.example.com:1234/foo/',type='assert_statement'\nline_star:139,line_end:139|char_star:4,char_end:57";
"rv.data == b'http://xxx.example.com:1234/foo/',type='comparison_operator'\nline_star:139,line_end:139|char_star:11,char_end:57"[shape="box",fillcolor="white",style=filled];
"assert rv.data == b'http://xxx.example.com:1234/foo/',type='assert_statement'\nline_star:139,line_end:139|char_star:4,char_end:57"->"rv.data == b'http://xxx.example.com:1234/foo/',type='comparison_operator'\nline_star:139,line_end:139|char_star:11,char_end:57";
"rv.data,type='attribute'\nline_star:139,line_end:139|char_star:11,char_end:18"[shape="box",fillcolor="white",style=filled];
"rv.data == b'http://xxx.example.com:1234/foo/',type='comparison_operator'\nline_star:139,line_end:139|char_star:11,char_end:57"->"rv.data,type='attribute'\nline_star:139,line_end:139|char_star:11,char_end:18";
"rv,type='identifier'\nline_star:139,line_end:139|char_star:11,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"rv.data,type='attribute'\nline_star:139,line_end:139|char_star:11,char_end:18"->"rv,type='identifier'\nline_star:139,line_end:139|char_star:11,char_end:13";
"data,type='identifier'\nline_star:139,line_end:139|char_star:14,char_end:18"[shape="point",fillcolor="#121013",style=filled];
"rv.data,type='attribute'\nline_star:139,line_end:139|char_star:11,char_end:18"->"data,type='identifier'\nline_star:139,line_end:139|char_star:14,char_end:18";
"def test_redirect_keep_session(app, client, app_ctx):\n    @app.route('/', methods=['GET', 'POST'])\n    def index():\n        if flask.request.method == 'POST':\n            return flask.redirect('/getsession')\n        flask.session['data'] = 'foo'\n        return 'index'\n\n    @app.route('/getsession')\n    def get_session():\n        return flask.session.get('data', '<missing>')\n\n    with client:\n        rv = client.get('/getsession')\n        assert rv.data == b'<missing>'\n\n        rv = client.get('/')\n        assert rv.data == b'index'\n        assert flask.session.get('data') == 'foo'\n\n        rv = client.post('/', data={}, follow_redirects=True)\n        assert rv.data == b'foo'\n        assert flask.session.get('data') == 'foo'\n\n        rv = client.get('/getsession')\n        assert rv.data == b'foo',type='function_definition'\nline_star:142,line_end:167|char_star:0,char_end:32"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_redirect_keep_session(app, client, app_ctx):\n    @app.route('/', methods=['GET', 'POST'])\n    def index():\n        if flask.request.method == 'POST':\n            return flask.redirect('/getsession')\n        flask.session['data'] = 'foo'\n        return 'index'\n\n    @app.route('/getsession')\n    def get_session():\n        return flask.session.get('data', '<missing>')\n\n    with client:\n        rv = client.get('/getsession')\n        assert rv.data == b'<missing>'\n\n        rv = client.get('/')\n        assert rv.data == b'index'\n        assert flask.session.get('data') == 'foo'\n\n        rv = client.post('/', data={}, follow_redirects=True)\n        assert rv.data == b'foo'\n        assert flask.session.get('data') == 'foo'\n\n        rv = client.get('/getsession')\n        assert rv.data == b'foo',type='function_definition'\nline_star:142,line_end:167|char_star:0,char_end:32";
"test_redirect_keep_session,type='identifier'\nline_star:142,line_end:142|char_star:4,char_end:30"[shape="point",fillcolor="#121013",style=filled];
"def test_redirect_keep_session(app, client, app_ctx):\n    @app.route('/', methods=['GET', 'POST'])\n    def index():\n        if flask.request.method == 'POST':\n            return flask.redirect('/getsession')\n        flask.session['data'] = 'foo'\n        return 'index'\n\n    @app.route('/getsession')\n    def get_session():\n        return flask.session.get('data', '<missing>')\n\n    with client:\n        rv = client.get('/getsession')\n        assert rv.data == b'<missing>'\n\n        rv = client.get('/')\n        assert rv.data == b'index'\n        assert flask.session.get('data') == 'foo'\n\n        rv = client.post('/', data={}, follow_redirects=True)\n        assert rv.data == b'foo'\n        assert flask.session.get('data') == 'foo'\n\n        rv = client.get('/getsession')\n        assert rv.data == b'foo',type='function_definition'\nline_star:142,line_end:167|char_star:0,char_end:32"->"test_redirect_keep_session,type='identifier'\nline_star:142,line_end:142|char_star:4,char_end:30";
"(app, client, app_ctx),type='parameters'\nline_star:142,line_end:142|char_star:30,char_end:52"[shape="box",fillcolor="white",style=filled];
"def test_redirect_keep_session(app, client, app_ctx):\n    @app.route('/', methods=['GET', 'POST'])\n    def index():\n        if flask.request.method == 'POST':\n            return flask.redirect('/getsession')\n        flask.session['data'] = 'foo'\n        return 'index'\n\n    @app.route('/getsession')\n    def get_session():\n        return flask.session.get('data', '<missing>')\n\n    with client:\n        rv = client.get('/getsession')\n        assert rv.data == b'<missing>'\n\n        rv = client.get('/')\n        assert rv.data == b'index'\n        assert flask.session.get('data') == 'foo'\n\n        rv = client.post('/', data={}, follow_redirects=True)\n        assert rv.data == b'foo'\n        assert flask.session.get('data') == 'foo'\n\n        rv = client.get('/getsession')\n        assert rv.data == b'foo',type='function_definition'\nline_star:142,line_end:167|char_star:0,char_end:32"->"(app, client, app_ctx),type='parameters'\nline_star:142,line_end:142|char_star:30,char_end:52";
"app,type='identifier'\nline_star:142,line_end:142|char_star:31,char_end:34"[shape="point",fillcolor="#121013",style=filled];
"(app, client, app_ctx),type='parameters'\nline_star:142,line_end:142|char_star:30,char_end:52"->"app,type='identifier'\nline_star:142,line_end:142|char_star:31,char_end:34";
"client,type='identifier'\nline_star:142,line_end:142|char_star:36,char_end:42"[shape="point",fillcolor="#121013",style=filled];
"(app, client, app_ctx),type='parameters'\nline_star:142,line_end:142|char_star:30,char_end:52"->"client,type='identifier'\nline_star:142,line_end:142|char_star:36,char_end:42";
"app_ctx,type='identifier'\nline_star:142,line_end:142|char_star:44,char_end:51"[shape="point",fillcolor="#121013",style=filled];
"(app, client, app_ctx),type='parameters'\nline_star:142,line_end:142|char_star:30,char_end:52"->"app_ctx,type='identifier'\nline_star:142,line_end:142|char_star:44,char_end:51";
"type='INFORMATION BLOCK'\nline_star:143,line_end:167|char_star:4,char_end:32"[shape="point",fillcolor="#121013",style=filled];
"def test_redirect_keep_session(app, client, app_ctx):\n    @app.route('/', methods=['GET', 'POST'])\n    def index():\n        if flask.request.method == 'POST':\n            return flask.redirect('/getsession')\n        flask.session['data'] = 'foo'\n        return 'index'\n\n    @app.route('/getsession')\n    def get_session():\n        return flask.session.get('data', '<missing>')\n\n    with client:\n        rv = client.get('/getsession')\n        assert rv.data == b'<missing>'\n\n        rv = client.get('/')\n        assert rv.data == b'index'\n        assert flask.session.get('data') == 'foo'\n\n        rv = client.post('/', data={}, follow_redirects=True)\n        assert rv.data == b'foo'\n        assert flask.session.get('data') == 'foo'\n\n        rv = client.get('/getsession')\n        assert rv.data == b'foo',type='function_definition'\nline_star:142,line_end:167|char_star:0,char_end:32"->"type='INFORMATION BLOCK'\nline_star:143,line_end:167|char_star:4,char_end:32";
"@app.route('/', methods=['GET', 'POST'])\n    def index():\n        if flask.request.method == 'POST':\n            return flask.redirect('/getsession')\n        flask.session['data'] = 'foo'\n        return 'index',type='decorated_definition'\nline_star:143,line_end:148|char_star:4,char_end:22"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:143,line_end:167|char_star:4,char_end:32"->"@app.route('/', methods=['GET', 'POST'])\n    def index():\n        if flask.request.method == 'POST':\n            return flask.redirect('/getsession')\n        flask.session['data'] = 'foo'\n        return 'index',type='decorated_definition'\nline_star:143,line_end:148|char_star:4,char_end:22";
"@app.route('/', methods=['GET', 'POST']),type='decorator'\nline_star:143,line_end:143|char_star:4,char_end:44"[shape="box",fillcolor="white",style=filled];
"@app.route('/', methods=['GET', 'POST'])\n    def index():\n        if flask.request.method == 'POST':\n            return flask.redirect('/getsession')\n        flask.session['data'] = 'foo'\n        return 'index',type='decorated_definition'\nline_star:143,line_end:148|char_star:4,char_end:22"->"@app.route('/', methods=['GET', 'POST']),type='decorator'\nline_star:143,line_end:143|char_star:4,char_end:44";
"def index():\n        if flask.request.method == 'POST':\n            return flask.redirect('/getsession')\n        flask.session['data'] = 'foo'\n        return 'index',type='function_definition'\nline_star:144,line_end:148|char_star:4,char_end:22"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.route('/', methods=['GET', 'POST'])\n    def index():\n        if flask.request.method == 'POST':\n            return flask.redirect('/getsession')\n        flask.session['data'] = 'foo'\n        return 'index',type='decorated_definition'\nline_star:143,line_end:148|char_star:4,char_end:22"->"def index():\n        if flask.request.method == 'POST':\n            return flask.redirect('/getsession')\n        flask.session['data'] = 'foo'\n        return 'index',type='function_definition'\nline_star:144,line_end:148|char_star:4,char_end:22";
"index,type='identifier'\nline_star:144,line_end:144|char_star:8,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"def index():\n        if flask.request.method == 'POST':\n            return flask.redirect('/getsession')\n        flask.session['data'] = 'foo'\n        return 'index',type='function_definition'\nline_star:144,line_end:148|char_star:4,char_end:22"->"index,type='identifier'\nline_star:144,line_end:144|char_star:8,char_end:13";
"type='INFORMATION BLOCK'\nline_star:145,line_end:148|char_star:8,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"def index():\n        if flask.request.method == 'POST':\n            return flask.redirect('/getsession')\n        flask.session['data'] = 'foo'\n        return 'index',type='function_definition'\nline_star:144,line_end:148|char_star:4,char_end:22"->"type='INFORMATION BLOCK'\nline_star:145,line_end:148|char_star:8,char_end:22";
"if flask.request.method == 'POST':\n            return flask.redirect('/getsession'),type='if_statement'\nline_star:145,line_end:146|char_star:8,char_end:48"[shape="box",fillcolor="#9ecca4",style=filled];
"type='INFORMATION BLOCK'\nline_star:145,line_end:148|char_star:8,char_end:22"->"if flask.request.method == 'POST':\n            return flask.redirect('/getsession'),type='if_statement'\nline_star:145,line_end:146|char_star:8,char_end:48";
"return 'index',type='return_statement'\nline_star:148,line_end:148|char_star:8,char_end:22"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:145,line_end:148|char_star:8,char_end:22"->"return 'index',type='return_statement'\nline_star:148,line_end:148|char_star:8,char_end:22";
"@app.route('/getsession')\n    def get_session():\n        return flask.session.get('data', '<missing>'),type='decorated_definition'\nline_star:150,line_end:152|char_star:4,char_end:53"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:143,line_end:167|char_star:4,char_end:32"->"@app.route('/getsession')\n    def get_session():\n        return flask.session.get('data', '<missing>'),type='decorated_definition'\nline_star:150,line_end:152|char_star:4,char_end:53";
"@app.route('/getsession'),type='decorator'\nline_star:150,line_end:150|char_star:4,char_end:29"[shape="box",fillcolor="white",style=filled];
"@app.route('/getsession')\n    def get_session():\n        return flask.session.get('data', '<missing>'),type='decorated_definition'\nline_star:150,line_end:152|char_star:4,char_end:53"->"@app.route('/getsession'),type='decorator'\nline_star:150,line_end:150|char_star:4,char_end:29";
"def get_session():\n        return flask.session.get('data', '<missing>'),type='function_definition'\nline_star:151,line_end:152|char_star:4,char_end:53"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.route('/getsession')\n    def get_session():\n        return flask.session.get('data', '<missing>'),type='decorated_definition'\nline_star:150,line_end:152|char_star:4,char_end:53"->"def get_session():\n        return flask.session.get('data', '<missing>'),type='function_definition'\nline_star:151,line_end:152|char_star:4,char_end:53";
"get_session,type='identifier'\nline_star:151,line_end:151|char_star:8,char_end:19"[shape="point",fillcolor="#121013",style=filled];
"def get_session():\n        return flask.session.get('data', '<missing>'),type='function_definition'\nline_star:151,line_end:152|char_star:4,char_end:53"->"get_session,type='identifier'\nline_star:151,line_end:151|char_star:8,char_end:19";
"type='INFORMATION BLOCK'\nline_star:152,line_end:152|char_star:8,char_end:53"[shape="point",fillcolor="#121013",style=filled];
"def get_session():\n        return flask.session.get('data', '<missing>'),type='function_definition'\nline_star:151,line_end:152|char_star:4,char_end:53"->"type='INFORMATION BLOCK'\nline_star:152,line_end:152|char_star:8,char_end:53";
"return flask.session.get('data', '<missing>'),type='return_statement'\nline_star:152,line_end:152|char_star:8,char_end:53"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:152,line_end:152|char_star:8,char_end:53"->"return flask.session.get('data', '<missing>'),type='return_statement'\nline_star:152,line_end:152|char_star:8,char_end:53";
"with client:\n        rv = client.get('/getsession')\n        assert rv.data == b'<missing>'\n\n        rv = client.get('/')\n        assert rv.data == b'index'\n        assert flask.session.get('data') == 'foo'\n\n        rv = client.post('/', data={}, follow_redirects=True)\n        assert rv.data == b'foo'\n        assert flask.session.get('data') == 'foo'\n\n        rv = client.get('/getsession')\n        assert rv.data == b'foo',type='with_statement'\nline_star:154,line_end:167|char_star:4,char_end:32"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:143,line_end:167|char_star:4,char_end:32"->"with client:\n        rv = client.get('/getsession')\n        assert rv.data == b'<missing>'\n\n        rv = client.get('/')\n        assert rv.data == b'index'\n        assert flask.session.get('data') == 'foo'\n\n        rv = client.post('/', data={}, follow_redirects=True)\n        assert rv.data == b'foo'\n        assert flask.session.get('data') == 'foo'\n\n        rv = client.get('/getsession')\n        assert rv.data == b'foo',type='with_statement'\nline_star:154,line_end:167|char_star:4,char_end:32";
"client,type='with_clause'\nline_star:154,line_end:154|char_star:9,char_end:15"[shape="box",fillcolor="white",style=filled];
"with client:\n        rv = client.get('/getsession')\n        assert rv.data == b'<missing>'\n\n        rv = client.get('/')\n        assert rv.data == b'index'\n        assert flask.session.get('data') == 'foo'\n\n        rv = client.post('/', data={}, follow_redirects=True)\n        assert rv.data == b'foo'\n        assert flask.session.get('data') == 'foo'\n\n        rv = client.get('/getsession')\n        assert rv.data == b'foo',type='with_statement'\nline_star:154,line_end:167|char_star:4,char_end:32"->"client,type='with_clause'\nline_star:154,line_end:154|char_star:9,char_end:15";
"type='INFORMATION BLOCK'\nline_star:155,line_end:167|char_star:8,char_end:32"[shape="point",fillcolor="#121013",style=filled];
"with client:\n        rv = client.get('/getsession')\n        assert rv.data == b'<missing>'\n\n        rv = client.get('/')\n        assert rv.data == b'index'\n        assert flask.session.get('data') == 'foo'\n\n        rv = client.post('/', data={}, follow_redirects=True)\n        assert rv.data == b'foo'\n        assert flask.session.get('data') == 'foo'\n\n        rv = client.get('/getsession')\n        assert rv.data == b'foo',type='with_statement'\nline_star:154,line_end:167|char_star:4,char_end:32"->"type='INFORMATION BLOCK'\nline_star:155,line_end:167|char_star:8,char_end:32";
"assert rv.data == b'<missing>',type='assert_statement'\nline_star:156,line_end:156|char_star:8,char_end:38"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:155,line_end:167|char_star:8,char_end:32"->"assert rv.data == b'<missing>',type='assert_statement'\nline_star:156,line_end:156|char_star:8,char_end:38";
"rv.data == b'<missing>',type='comparison_operator'\nline_star:156,line_end:156|char_star:15,char_end:38"[shape="box",fillcolor="white",style=filled];
"assert rv.data == b'<missing>',type='assert_statement'\nline_star:156,line_end:156|char_star:8,char_end:38"->"rv.data == b'<missing>',type='comparison_operator'\nline_star:156,line_end:156|char_star:15,char_end:38";
"rv.data,type='attribute'\nline_star:156,line_end:156|char_star:15,char_end:22"[shape="box",fillcolor="white",style=filled];
"rv.data == b'<missing>',type='comparison_operator'\nline_star:156,line_end:156|char_star:15,char_end:38"->"rv.data,type='attribute'\nline_star:156,line_end:156|char_star:15,char_end:22";
"rv,type='identifier'\nline_star:156,line_end:156|char_star:15,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"rv.data,type='attribute'\nline_star:156,line_end:156|char_star:15,char_end:22"->"rv,type='identifier'\nline_star:156,line_end:156|char_star:15,char_end:17";
"data,type='identifier'\nline_star:156,line_end:156|char_star:18,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"rv.data,type='attribute'\nline_star:156,line_end:156|char_star:15,char_end:22"->"data,type='identifier'\nline_star:156,line_end:156|char_star:18,char_end:22";
"assert rv.data == b'index',type='assert_statement'\nline_star:159,line_end:159|char_star:8,char_end:34"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:155,line_end:167|char_star:8,char_end:32"->"assert rv.data == b'index',type='assert_statement'\nline_star:159,line_end:159|char_star:8,char_end:34";
"rv.data == b'index',type='comparison_operator'\nline_star:159,line_end:159|char_star:15,char_end:34"[shape="box",fillcolor="white",style=filled];
"assert rv.data == b'index',type='assert_statement'\nline_star:159,line_end:159|char_star:8,char_end:34"->"rv.data == b'index',type='comparison_operator'\nline_star:159,line_end:159|char_star:15,char_end:34";
"rv.data,type='attribute'\nline_star:159,line_end:159|char_star:15,char_end:22"[shape="box",fillcolor="white",style=filled];
"rv.data == b'index',type='comparison_operator'\nline_star:159,line_end:159|char_star:15,char_end:34"->"rv.data,type='attribute'\nline_star:159,line_end:159|char_star:15,char_end:22";
"rv,type='identifier'\nline_star:159,line_end:159|char_star:15,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"rv.data,type='attribute'\nline_star:159,line_end:159|char_star:15,char_end:22"->"rv,type='identifier'\nline_star:159,line_end:159|char_star:15,char_end:17";
"data,type='identifier'\nline_star:159,line_end:159|char_star:18,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"rv.data,type='attribute'\nline_star:159,line_end:159|char_star:15,char_end:22"->"data,type='identifier'\nline_star:159,line_end:159|char_star:18,char_end:22";
"assert flask.session.get('data') == 'foo',type='assert_statement'\nline_star:160,line_end:160|char_star:8,char_end:49"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:155,line_end:167|char_star:8,char_end:32"->"assert flask.session.get('data') == 'foo',type='assert_statement'\nline_star:160,line_end:160|char_star:8,char_end:49";
"flask.session.get('data') == 'foo',type='comparison_operator'\nline_star:160,line_end:160|char_star:15,char_end:49"[shape="box",fillcolor="white",style=filled];
"assert flask.session.get('data') == 'foo',type='assert_statement'\nline_star:160,line_end:160|char_star:8,char_end:49"->"flask.session.get('data') == 'foo',type='comparison_operator'\nline_star:160,line_end:160|char_star:15,char_end:49";
"flask.session.get('data'),type='call'\nline_star:160,line_end:160|char_star:15,char_end:40"[shape="box",fillcolor="white",style=filled];
"flask.session.get('data') == 'foo',type='comparison_operator'\nline_star:160,line_end:160|char_star:15,char_end:49"->"flask.session.get('data'),type='call'\nline_star:160,line_end:160|char_star:15,char_end:40";
"flask.session.get,type='attribute'\nline_star:160,line_end:160|char_star:15,char_end:32"[shape="box",fillcolor="white",style=filled];
"flask.session.get('data'),type='call'\nline_star:160,line_end:160|char_star:15,char_end:40"->"flask.session.get,type='attribute'\nline_star:160,line_end:160|char_star:15,char_end:32";
"flask.session,type='attribute'\nline_star:160,line_end:160|char_star:15,char_end:28"[shape="box",fillcolor="white",style=filled];
"flask.session.get,type='attribute'\nline_star:160,line_end:160|char_star:15,char_end:32"->"flask.session,type='attribute'\nline_star:160,line_end:160|char_star:15,char_end:28";
"flask,type='identifier'\nline_star:160,line_end:160|char_star:15,char_end:20"[shape="point",fillcolor="#121013",style=filled];
"flask.session,type='attribute'\nline_star:160,line_end:160|char_star:15,char_end:28"->"flask,type='identifier'\nline_star:160,line_end:160|char_star:15,char_end:20";
"session,type='identifier'\nline_star:160,line_end:160|char_star:21,char_end:28"[shape="point",fillcolor="#121013",style=filled];
"flask.session,type='attribute'\nline_star:160,line_end:160|char_star:15,char_end:28"->"session,type='identifier'\nline_star:160,line_end:160|char_star:21,char_end:28";
"get,type='identifier'\nline_star:160,line_end:160|char_star:29,char_end:32"[shape="point",fillcolor="#121013",style=filled];
"flask.session.get,type='attribute'\nline_star:160,line_end:160|char_star:15,char_end:32"->"get,type='identifier'\nline_star:160,line_end:160|char_star:29,char_end:32";
"('data'),type='argument_list'\nline_star:160,line_end:160|char_star:32,char_end:40"[shape="box",fillcolor="white",style=filled];
"flask.session.get('data'),type='call'\nline_star:160,line_end:160|char_star:15,char_end:40"->"('data'),type='argument_list'\nline_star:160,line_end:160|char_star:32,char_end:40";
"assert rv.data == b'foo',type='assert_statement'\nline_star:163,line_end:163|char_star:8,char_end:32"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:155,line_end:167|char_star:8,char_end:32"->"assert rv.data == b'foo',type='assert_statement'\nline_star:163,line_end:163|char_star:8,char_end:32";
"rv.data == b'foo',type='comparison_operator'\nline_star:163,line_end:163|char_star:15,char_end:32"[shape="box",fillcolor="white",style=filled];
"assert rv.data == b'foo',type='assert_statement'\nline_star:163,line_end:163|char_star:8,char_end:32"->"rv.data == b'foo',type='comparison_operator'\nline_star:163,line_end:163|char_star:15,char_end:32";
"rv.data,type='attribute'\nline_star:163,line_end:163|char_star:15,char_end:22"[shape="box",fillcolor="white",style=filled];
"rv.data == b'foo',type='comparison_operator'\nline_star:163,line_end:163|char_star:15,char_end:32"->"rv.data,type='attribute'\nline_star:163,line_end:163|char_star:15,char_end:22";
"rv,type='identifier'\nline_star:163,line_end:163|char_star:15,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"rv.data,type='attribute'\nline_star:163,line_end:163|char_star:15,char_end:22"->"rv,type='identifier'\nline_star:163,line_end:163|char_star:15,char_end:17";
"data,type='identifier'\nline_star:163,line_end:163|char_star:18,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"rv.data,type='attribute'\nline_star:163,line_end:163|char_star:15,char_end:22"->"data,type='identifier'\nline_star:163,line_end:163|char_star:18,char_end:22";
"assert flask.session.get('data') == 'foo',type='assert_statement'\nline_star:164,line_end:164|char_star:8,char_end:49"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:155,line_end:167|char_star:8,char_end:32"->"assert flask.session.get('data') == 'foo',type='assert_statement'\nline_star:164,line_end:164|char_star:8,char_end:49";
"flask.session.get('data') == 'foo',type='comparison_operator'\nline_star:164,line_end:164|char_star:15,char_end:49"[shape="box",fillcolor="white",style=filled];
"assert flask.session.get('data') == 'foo',type='assert_statement'\nline_star:164,line_end:164|char_star:8,char_end:49"->"flask.session.get('data') == 'foo',type='comparison_operator'\nline_star:164,line_end:164|char_star:15,char_end:49";
"flask.session.get('data'),type='call'\nline_star:164,line_end:164|char_star:15,char_end:40"[shape="box",fillcolor="white",style=filled];
"flask.session.get('data') == 'foo',type='comparison_operator'\nline_star:164,line_end:164|char_star:15,char_end:49"->"flask.session.get('data'),type='call'\nline_star:164,line_end:164|char_star:15,char_end:40";
"flask.session.get,type='attribute'\nline_star:164,line_end:164|char_star:15,char_end:32"[shape="box",fillcolor="white",style=filled];
"flask.session.get('data'),type='call'\nline_star:164,line_end:164|char_star:15,char_end:40"->"flask.session.get,type='attribute'\nline_star:164,line_end:164|char_star:15,char_end:32";
"flask.session,type='attribute'\nline_star:164,line_end:164|char_star:15,char_end:28"[shape="box",fillcolor="white",style=filled];
"flask.session.get,type='attribute'\nline_star:164,line_end:164|char_star:15,char_end:32"->"flask.session,type='attribute'\nline_star:164,line_end:164|char_star:15,char_end:28";
"flask,type='identifier'\nline_star:164,line_end:164|char_star:15,char_end:20"[shape="point",fillcolor="#121013",style=filled];
"flask.session,type='attribute'\nline_star:164,line_end:164|char_star:15,char_end:28"->"flask,type='identifier'\nline_star:164,line_end:164|char_star:15,char_end:20";
"session,type='identifier'\nline_star:164,line_end:164|char_star:21,char_end:28"[shape="point",fillcolor="#121013",style=filled];
"flask.session,type='attribute'\nline_star:164,line_end:164|char_star:15,char_end:28"->"session,type='identifier'\nline_star:164,line_end:164|char_star:21,char_end:28";
"get,type='identifier'\nline_star:164,line_end:164|char_star:29,char_end:32"[shape="point",fillcolor="#121013",style=filled];
"flask.session.get,type='attribute'\nline_star:164,line_end:164|char_star:15,char_end:32"->"get,type='identifier'\nline_star:164,line_end:164|char_star:29,char_end:32";
"('data'),type='argument_list'\nline_star:164,line_end:164|char_star:32,char_end:40"[shape="box",fillcolor="white",style=filled];
"flask.session.get('data'),type='call'\nline_star:164,line_end:164|char_star:15,char_end:40"->"('data'),type='argument_list'\nline_star:164,line_end:164|char_star:32,char_end:40";
"assert rv.data == b'foo',type='assert_statement'\nline_star:167,line_end:167|char_star:8,char_end:32"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:155,line_end:167|char_star:8,char_end:32"->"assert rv.data == b'foo',type='assert_statement'\nline_star:167,line_end:167|char_star:8,char_end:32";
"rv.data == b'foo',type='comparison_operator'\nline_star:167,line_end:167|char_star:15,char_end:32"[shape="box",fillcolor="white",style=filled];
"assert rv.data == b'foo',type='assert_statement'\nline_star:167,line_end:167|char_star:8,char_end:32"->"rv.data == b'foo',type='comparison_operator'\nline_star:167,line_end:167|char_star:15,char_end:32";
"rv.data,type='attribute'\nline_star:167,line_end:167|char_star:15,char_end:22"[shape="box",fillcolor="white",style=filled];
"rv.data == b'foo',type='comparison_operator'\nline_star:167,line_end:167|char_star:15,char_end:32"->"rv.data,type='attribute'\nline_star:167,line_end:167|char_star:15,char_end:22";
"rv,type='identifier'\nline_star:167,line_end:167|char_star:15,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"rv.data,type='attribute'\nline_star:167,line_end:167|char_star:15,char_end:22"->"rv,type='identifier'\nline_star:167,line_end:167|char_star:15,char_end:17";
"data,type='identifier'\nline_star:167,line_end:167|char_star:18,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"rv.data,type='attribute'\nline_star:167,line_end:167|char_star:15,char_end:22"->"data,type='identifier'\nline_star:167,line_end:167|char_star:18,char_end:22";
"def test_session_transactions(app, client):\n    @app.route('/')\n    def index():\n        return str(flask.session['foo'])\n\n    with client:\n        with client.session_transaction() as sess:\n            assert len(sess) == 0\n            sess['foo'] = [42]\n            assert len(sess) == 1\n        rv = client.get('/')\n        assert rv.data == b'[42]'\n        with client.session_transaction() as sess:\n            assert len(sess) == 1\n            assert sess['foo'] == [42],type='function_definition'\nline_star:170,line_end:184|char_star:0,char_end:38"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_session_transactions(app, client):\n    @app.route('/')\n    def index():\n        return str(flask.session['foo'])\n\n    with client:\n        with client.session_transaction() as sess:\n            assert len(sess) == 0\n            sess['foo'] = [42]\n            assert len(sess) == 1\n        rv = client.get('/')\n        assert rv.data == b'[42]'\n        with client.session_transaction() as sess:\n            assert len(sess) == 1\n            assert sess['foo'] == [42],type='function_definition'\nline_star:170,line_end:184|char_star:0,char_end:38";
"test_session_transactions,type='identifier'\nline_star:170,line_end:170|char_star:4,char_end:29"[shape="point",fillcolor="#121013",style=filled];
"def test_session_transactions(app, client):\n    @app.route('/')\n    def index():\n        return str(flask.session['foo'])\n\n    with client:\n        with client.session_transaction() as sess:\n            assert len(sess) == 0\n            sess['foo'] = [42]\n            assert len(sess) == 1\n        rv = client.get('/')\n        assert rv.data == b'[42]'\n        with client.session_transaction() as sess:\n            assert len(sess) == 1\n            assert sess['foo'] == [42],type='function_definition'\nline_star:170,line_end:184|char_star:0,char_end:38"->"test_session_transactions,type='identifier'\nline_star:170,line_end:170|char_star:4,char_end:29";
"(app, client),type='parameters'\nline_star:170,line_end:170|char_star:29,char_end:42"[shape="box",fillcolor="white",style=filled];
"def test_session_transactions(app, client):\n    @app.route('/')\n    def index():\n        return str(flask.session['foo'])\n\n    with client:\n        with client.session_transaction() as sess:\n            assert len(sess) == 0\n            sess['foo'] = [42]\n            assert len(sess) == 1\n        rv = client.get('/')\n        assert rv.data == b'[42]'\n        with client.session_transaction() as sess:\n            assert len(sess) == 1\n            assert sess['foo'] == [42],type='function_definition'\nline_star:170,line_end:184|char_star:0,char_end:38"->"(app, client),type='parameters'\nline_star:170,line_end:170|char_star:29,char_end:42";
"app,type='identifier'\nline_star:170,line_end:170|char_star:30,char_end:33"[shape="point",fillcolor="#121013",style=filled];
"(app, client),type='parameters'\nline_star:170,line_end:170|char_star:29,char_end:42"->"app,type='identifier'\nline_star:170,line_end:170|char_star:30,char_end:33";
"client,type='identifier'\nline_star:170,line_end:170|char_star:35,char_end:41"[shape="point",fillcolor="#121013",style=filled];
"(app, client),type='parameters'\nline_star:170,line_end:170|char_star:29,char_end:42"->"client,type='identifier'\nline_star:170,line_end:170|char_star:35,char_end:41";
"type='INFORMATION BLOCK'\nline_star:171,line_end:184|char_star:4,char_end:38"[shape="point",fillcolor="#121013",style=filled];
"def test_session_transactions(app, client):\n    @app.route('/')\n    def index():\n        return str(flask.session['foo'])\n\n    with client:\n        with client.session_transaction() as sess:\n            assert len(sess) == 0\n            sess['foo'] = [42]\n            assert len(sess) == 1\n        rv = client.get('/')\n        assert rv.data == b'[42]'\n        with client.session_transaction() as sess:\n            assert len(sess) == 1\n            assert sess['foo'] == [42],type='function_definition'\nline_star:170,line_end:184|char_star:0,char_end:38"->"type='INFORMATION BLOCK'\nline_star:171,line_end:184|char_star:4,char_end:38";
"@app.route('/')\n    def index():\n        return str(flask.session['foo']),type='decorated_definition'\nline_star:171,line_end:173|char_star:4,char_end:40"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:171,line_end:184|char_star:4,char_end:38"->"@app.route('/')\n    def index():\n        return str(flask.session['foo']),type='decorated_definition'\nline_star:171,line_end:173|char_star:4,char_end:40";
"@app.route('/'),type='decorator'\nline_star:171,line_end:171|char_star:4,char_end:19"[shape="box",fillcolor="white",style=filled];
"@app.route('/')\n    def index():\n        return str(flask.session['foo']),type='decorated_definition'\nline_star:171,line_end:173|char_star:4,char_end:40"->"@app.route('/'),type='decorator'\nline_star:171,line_end:171|char_star:4,char_end:19";
"def index():\n        return str(flask.session['foo']),type='function_definition'\nline_star:172,line_end:173|char_star:4,char_end:40"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.route('/')\n    def index():\n        return str(flask.session['foo']),type='decorated_definition'\nline_star:171,line_end:173|char_star:4,char_end:40"->"def index():\n        return str(flask.session['foo']),type='function_definition'\nline_star:172,line_end:173|char_star:4,char_end:40";
"index,type='identifier'\nline_star:172,line_end:172|char_star:8,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"def index():\n        return str(flask.session['foo']),type='function_definition'\nline_star:172,line_end:173|char_star:4,char_end:40"->"index,type='identifier'\nline_star:172,line_end:172|char_star:8,char_end:13";
"type='INFORMATION BLOCK'\nline_star:173,line_end:173|char_star:8,char_end:40"[shape="point",fillcolor="#121013",style=filled];
"def index():\n        return str(flask.session['foo']),type='function_definition'\nline_star:172,line_end:173|char_star:4,char_end:40"->"type='INFORMATION BLOCK'\nline_star:173,line_end:173|char_star:8,char_end:40";
"return str(flask.session['foo']),type='return_statement'\nline_star:173,line_end:173|char_star:8,char_end:40"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:173,line_end:173|char_star:8,char_end:40"->"return str(flask.session['foo']),type='return_statement'\nline_star:173,line_end:173|char_star:8,char_end:40";
"with client:\n        with client.session_transaction() as sess:\n            assert len(sess) == 0\n            sess['foo'] = [42]\n            assert len(sess) == 1\n        rv = client.get('/')\n        assert rv.data == b'[42]'\n        with client.session_transaction() as sess:\n            assert len(sess) == 1\n            assert sess['foo'] == [42],type='with_statement'\nline_star:175,line_end:184|char_star:4,char_end:38"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:171,line_end:184|char_star:4,char_end:38"->"with client:\n        with client.session_transaction() as sess:\n            assert len(sess) == 0\n            sess['foo'] = [42]\n            assert len(sess) == 1\n        rv = client.get('/')\n        assert rv.data == b'[42]'\n        with client.session_transaction() as sess:\n            assert len(sess) == 1\n            assert sess['foo'] == [42],type='with_statement'\nline_star:175,line_end:184|char_star:4,char_end:38";
"client,type='with_clause'\nline_star:175,line_end:175|char_star:9,char_end:15"[shape="box",fillcolor="white",style=filled];
"with client:\n        with client.session_transaction() as sess:\n            assert len(sess) == 0\n            sess['foo'] = [42]\n            assert len(sess) == 1\n        rv = client.get('/')\n        assert rv.data == b'[42]'\n        with client.session_transaction() as sess:\n            assert len(sess) == 1\n            assert sess['foo'] == [42],type='with_statement'\nline_star:175,line_end:184|char_star:4,char_end:38"->"client,type='with_clause'\nline_star:175,line_end:175|char_star:9,char_end:15";
"type='INFORMATION BLOCK'\nline_star:176,line_end:184|char_star:8,char_end:38"[shape="point",fillcolor="#121013",style=filled];
"with client:\n        with client.session_transaction() as sess:\n            assert len(sess) == 0\n            sess['foo'] = [42]\n            assert len(sess) == 1\n        rv = client.get('/')\n        assert rv.data == b'[42]'\n        with client.session_transaction() as sess:\n            assert len(sess) == 1\n            assert sess['foo'] == [42],type='with_statement'\nline_star:175,line_end:184|char_star:4,char_end:38"->"type='INFORMATION BLOCK'\nline_star:176,line_end:184|char_star:8,char_end:38";
"with client.session_transaction() as sess:\n            assert len(sess) == 0\n            sess['foo'] = [42]\n            assert len(sess) == 1,type='with_statement'\nline_star:176,line_end:179|char_star:8,char_end:33"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:176,line_end:184|char_star:8,char_end:38"->"with client.session_transaction() as sess:\n            assert len(sess) == 0\n            sess['foo'] = [42]\n            assert len(sess) == 1,type='with_statement'\nline_star:176,line_end:179|char_star:8,char_end:33";
"client.session_transaction() as sess,type='with_clause'\nline_star:176,line_end:176|char_star:13,char_end:49"[shape="box",fillcolor="white",style=filled];
"with client.session_transaction() as sess:\n            assert len(sess) == 0\n            sess['foo'] = [42]\n            assert len(sess) == 1,type='with_statement'\nline_star:176,line_end:179|char_star:8,char_end:33"->"client.session_transaction() as sess,type='with_clause'\nline_star:176,line_end:176|char_star:13,char_end:49";
"type='INFORMATION BLOCK'\nline_star:177,line_end:179|char_star:12,char_end:33"[shape="point",fillcolor="#121013",style=filled];
"with client.session_transaction() as sess:\n            assert len(sess) == 0\n            sess['foo'] = [42]\n            assert len(sess) == 1,type='with_statement'\nline_star:176,line_end:179|char_star:8,char_end:33"->"type='INFORMATION BLOCK'\nline_star:177,line_end:179|char_star:12,char_end:33";
"assert len(sess) == 0,type='assert_statement'\nline_star:177,line_end:177|char_star:12,char_end:33"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:177,line_end:179|char_star:12,char_end:33"->"assert len(sess) == 0,type='assert_statement'\nline_star:177,line_end:177|char_star:12,char_end:33";
"len(sess) == 0,type='comparison_operator'\nline_star:177,line_end:177|char_star:19,char_end:33"[shape="box",fillcolor="white",style=filled];
"assert len(sess) == 0,type='assert_statement'\nline_star:177,line_end:177|char_star:12,char_end:33"->"len(sess) == 0,type='comparison_operator'\nline_star:177,line_end:177|char_star:19,char_end:33";
"len(sess),type='call'\nline_star:177,line_end:177|char_star:19,char_end:28"[shape="box",fillcolor="white",style=filled];
"len(sess) == 0,type='comparison_operator'\nline_star:177,line_end:177|char_star:19,char_end:33"->"len(sess),type='call'\nline_star:177,line_end:177|char_star:19,char_end:28";
"len,type='identifier'\nline_star:177,line_end:177|char_star:19,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"len(sess),type='call'\nline_star:177,line_end:177|char_star:19,char_end:28"->"len,type='identifier'\nline_star:177,line_end:177|char_star:19,char_end:22";
"(sess),type='argument_list'\nline_star:177,line_end:177|char_star:22,char_end:28"[shape="box",fillcolor="white",style=filled];
"len(sess),type='call'\nline_star:177,line_end:177|char_star:19,char_end:28"->"(sess),type='argument_list'\nline_star:177,line_end:177|char_star:22,char_end:28";
"sess,type='identifier'\nline_star:177,line_end:177|char_star:23,char_end:27"[shape="point",fillcolor="#121013",style=filled];
"(sess),type='argument_list'\nline_star:177,line_end:177|char_star:22,char_end:28"->"sess,type='identifier'\nline_star:177,line_end:177|char_star:23,char_end:27";
"assert len(sess) == 1,type='assert_statement'\nline_star:179,line_end:179|char_star:12,char_end:33"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:177,line_end:179|char_star:12,char_end:33"->"assert len(sess) == 1,type='assert_statement'\nline_star:179,line_end:179|char_star:12,char_end:33";
"len(sess) == 1,type='comparison_operator'\nline_star:179,line_end:179|char_star:19,char_end:33"[shape="box",fillcolor="white",style=filled];
"assert len(sess) == 1,type='assert_statement'\nline_star:179,line_end:179|char_star:12,char_end:33"->"len(sess) == 1,type='comparison_operator'\nline_star:179,line_end:179|char_star:19,char_end:33";
"len(sess),type='call'\nline_star:179,line_end:179|char_star:19,char_end:28"[shape="box",fillcolor="white",style=filled];
"len(sess) == 1,type='comparison_operator'\nline_star:179,line_end:179|char_star:19,char_end:33"->"len(sess),type='call'\nline_star:179,line_end:179|char_star:19,char_end:28";
"len,type='identifier'\nline_star:179,line_end:179|char_star:19,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"len(sess),type='call'\nline_star:179,line_end:179|char_star:19,char_end:28"->"len,type='identifier'\nline_star:179,line_end:179|char_star:19,char_end:22";
"(sess),type='argument_list'\nline_star:179,line_end:179|char_star:22,char_end:28"[shape="box",fillcolor="white",style=filled];
"len(sess),type='call'\nline_star:179,line_end:179|char_star:19,char_end:28"->"(sess),type='argument_list'\nline_star:179,line_end:179|char_star:22,char_end:28";
"sess,type='identifier'\nline_star:179,line_end:179|char_star:23,char_end:27"[shape="point",fillcolor="#121013",style=filled];
"(sess),type='argument_list'\nline_star:179,line_end:179|char_star:22,char_end:28"->"sess,type='identifier'\nline_star:179,line_end:179|char_star:23,char_end:27";
"assert rv.data == b'[42]',type='assert_statement'\nline_star:181,line_end:181|char_star:8,char_end:33"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:176,line_end:184|char_star:8,char_end:38"->"assert rv.data == b'[42]',type='assert_statement'\nline_star:181,line_end:181|char_star:8,char_end:33";
"rv.data == b'[42]',type='comparison_operator'\nline_star:181,line_end:181|char_star:15,char_end:33"[shape="box",fillcolor="white",style=filled];
"assert rv.data == b'[42]',type='assert_statement'\nline_star:181,line_end:181|char_star:8,char_end:33"->"rv.data == b'[42]',type='comparison_operator'\nline_star:181,line_end:181|char_star:15,char_end:33";
"rv.data,type='attribute'\nline_star:181,line_end:181|char_star:15,char_end:22"[shape="box",fillcolor="white",style=filled];
"rv.data == b'[42]',type='comparison_operator'\nline_star:181,line_end:181|char_star:15,char_end:33"->"rv.data,type='attribute'\nline_star:181,line_end:181|char_star:15,char_end:22";
"rv,type='identifier'\nline_star:181,line_end:181|char_star:15,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"rv.data,type='attribute'\nline_star:181,line_end:181|char_star:15,char_end:22"->"rv,type='identifier'\nline_star:181,line_end:181|char_star:15,char_end:17";
"data,type='identifier'\nline_star:181,line_end:181|char_star:18,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"rv.data,type='attribute'\nline_star:181,line_end:181|char_star:15,char_end:22"->"data,type='identifier'\nline_star:181,line_end:181|char_star:18,char_end:22";
"with client.session_transaction() as sess:\n            assert len(sess) == 1\n            assert sess['foo'] == [42],type='with_statement'\nline_star:182,line_end:184|char_star:8,char_end:38"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:176,line_end:184|char_star:8,char_end:38"->"with client.session_transaction() as sess:\n            assert len(sess) == 1\n            assert sess['foo'] == [42],type='with_statement'\nline_star:182,line_end:184|char_star:8,char_end:38";
"client.session_transaction() as sess,type='with_clause'\nline_star:182,line_end:182|char_star:13,char_end:49"[shape="box",fillcolor="white",style=filled];
"with client.session_transaction() as sess:\n            assert len(sess) == 1\n            assert sess['foo'] == [42],type='with_statement'\nline_star:182,line_end:184|char_star:8,char_end:38"->"client.session_transaction() as sess,type='with_clause'\nline_star:182,line_end:182|char_star:13,char_end:49";
"type='INFORMATION BLOCK'\nline_star:183,line_end:184|char_star:12,char_end:38"[shape="point",fillcolor="#121013",style=filled];
"with client.session_transaction() as sess:\n            assert len(sess) == 1\n            assert sess['foo'] == [42],type='with_statement'\nline_star:182,line_end:184|char_star:8,char_end:38"->"type='INFORMATION BLOCK'\nline_star:183,line_end:184|char_star:12,char_end:38";
"assert len(sess) == 1,type='assert_statement'\nline_star:183,line_end:183|char_star:12,char_end:33"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:183,line_end:184|char_star:12,char_end:38"->"assert len(sess) == 1,type='assert_statement'\nline_star:183,line_end:183|char_star:12,char_end:33";
"len(sess) == 1,type='comparison_operator'\nline_star:183,line_end:183|char_star:19,char_end:33"[shape="box",fillcolor="white",style=filled];
"assert len(sess) == 1,type='assert_statement'\nline_star:183,line_end:183|char_star:12,char_end:33"->"len(sess) == 1,type='comparison_operator'\nline_star:183,line_end:183|char_star:19,char_end:33";
"len(sess),type='call'\nline_star:183,line_end:183|char_star:19,char_end:28"[shape="box",fillcolor="white",style=filled];
"len(sess) == 1,type='comparison_operator'\nline_star:183,line_end:183|char_star:19,char_end:33"->"len(sess),type='call'\nline_star:183,line_end:183|char_star:19,char_end:28";
"len,type='identifier'\nline_star:183,line_end:183|char_star:19,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"len(sess),type='call'\nline_star:183,line_end:183|char_star:19,char_end:28"->"len,type='identifier'\nline_star:183,line_end:183|char_star:19,char_end:22";
"(sess),type='argument_list'\nline_star:183,line_end:183|char_star:22,char_end:28"[shape="box",fillcolor="white",style=filled];
"len(sess),type='call'\nline_star:183,line_end:183|char_star:19,char_end:28"->"(sess),type='argument_list'\nline_star:183,line_end:183|char_star:22,char_end:28";
"sess,type='identifier'\nline_star:183,line_end:183|char_star:23,char_end:27"[shape="point",fillcolor="#121013",style=filled];
"(sess),type='argument_list'\nline_star:183,line_end:183|char_star:22,char_end:28"->"sess,type='identifier'\nline_star:183,line_end:183|char_star:23,char_end:27";
"assert sess['foo'] == [42],type='assert_statement'\nline_star:184,line_end:184|char_star:12,char_end:38"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:183,line_end:184|char_star:12,char_end:38"->"assert sess['foo'] == [42],type='assert_statement'\nline_star:184,line_end:184|char_star:12,char_end:38";
"sess['foo'] == [42],type='comparison_operator'\nline_star:184,line_end:184|char_star:19,char_end:38"[shape="box",fillcolor="white",style=filled];
"assert sess['foo'] == [42],type='assert_statement'\nline_star:184,line_end:184|char_star:12,char_end:38"->"sess['foo'] == [42],type='comparison_operator'\nline_star:184,line_end:184|char_star:19,char_end:38";
"sess['foo'],type='subscript'\nline_star:184,line_end:184|char_star:19,char_end:30"[shape="box",fillcolor="white",style=filled];
"sess['foo'] == [42],type='comparison_operator'\nline_star:184,line_end:184|char_star:19,char_end:38"->"sess['foo'],type='subscript'\nline_star:184,line_end:184|char_star:19,char_end:30";
"sess,type='identifier'\nline_star:184,line_end:184|char_star:19,char_end:23"[shape="point",fillcolor="#121013",style=filled];
"sess['foo'],type='subscript'\nline_star:184,line_end:184|char_star:19,char_end:30"->"sess,type='identifier'\nline_star:184,line_end:184|char_star:19,char_end:23";
"[42],type='list'\nline_star:184,line_end:184|char_star:34,char_end:38"[shape="box",fillcolor="white",style=filled];
"sess['foo'] == [42],type='comparison_operator'\nline_star:184,line_end:184|char_star:19,char_end:38"->"[42],type='list'\nline_star:184,line_end:184|char_star:34,char_end:38";
"def test_session_transactions_no_null_sessions():\n    app = flask.Flask(__name__)\n    app.testing = True\n\n    with app.test_client() as c:\n        with pytest.raises(RuntimeError) as e:\n            with c.session_transaction():\n                pass\n        assert 'Session backend did not open a session' in str(e.value),type='function_definition'\nline_star:187,line_end:195|char_star:0,char_end:71"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_session_transactions_no_null_sessions():\n    app = flask.Flask(__name__)\n    app.testing = True\n\n    with app.test_client() as c:\n        with pytest.raises(RuntimeError) as e:\n            with c.session_transaction():\n                pass\n        assert 'Session backend did not open a session' in str(e.value),type='function_definition'\nline_star:187,line_end:195|char_star:0,char_end:71";
"test_session_transactions_no_null_sessions,type='identifier'\nline_star:187,line_end:187|char_star:4,char_end:46"[shape="point",fillcolor="#121013",style=filled];
"def test_session_transactions_no_null_sessions():\n    app = flask.Flask(__name__)\n    app.testing = True\n\n    with app.test_client() as c:\n        with pytest.raises(RuntimeError) as e:\n            with c.session_transaction():\n                pass\n        assert 'Session backend did not open a session' in str(e.value),type='function_definition'\nline_star:187,line_end:195|char_star:0,char_end:71"->"test_session_transactions_no_null_sessions,type='identifier'\nline_star:187,line_end:187|char_star:4,char_end:46";
"type='INFORMATION BLOCK'\nline_star:188,line_end:195|char_star:4,char_end:71"[shape="point",fillcolor="#121013",style=filled];
"def test_session_transactions_no_null_sessions():\n    app = flask.Flask(__name__)\n    app.testing = True\n\n    with app.test_client() as c:\n        with pytest.raises(RuntimeError) as e:\n            with c.session_transaction():\n                pass\n        assert 'Session backend did not open a session' in str(e.value),type='function_definition'\nline_star:187,line_end:195|char_star:0,char_end:71"->"type='INFORMATION BLOCK'\nline_star:188,line_end:195|char_star:4,char_end:71";
"with app.test_client() as c:\n        with pytest.raises(RuntimeError) as e:\n            with c.session_transaction():\n                pass\n        assert 'Session backend did not open a session' in str(e.value),type='with_statement'\nline_star:191,line_end:195|char_star:4,char_end:71"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:188,line_end:195|char_star:4,char_end:71"->"with app.test_client() as c:\n        with pytest.raises(RuntimeError) as e:\n            with c.session_transaction():\n                pass\n        assert 'Session backend did not open a session' in str(e.value),type='with_statement'\nline_star:191,line_end:195|char_star:4,char_end:71";
"app.test_client() as c,type='with_clause'\nline_star:191,line_end:191|char_star:9,char_end:31"[shape="box",fillcolor="white",style=filled];
"with app.test_client() as c:\n        with pytest.raises(RuntimeError) as e:\n            with c.session_transaction():\n                pass\n        assert 'Session backend did not open a session' in str(e.value),type='with_statement'\nline_star:191,line_end:195|char_star:4,char_end:71"->"app.test_client() as c,type='with_clause'\nline_star:191,line_end:191|char_star:9,char_end:31";
"type='INFORMATION BLOCK'\nline_star:192,line_end:195|char_star:8,char_end:71"[shape="point",fillcolor="#121013",style=filled];
"with app.test_client() as c:\n        with pytest.raises(RuntimeError) as e:\n            with c.session_transaction():\n                pass\n        assert 'Session backend did not open a session' in str(e.value),type='with_statement'\nline_star:191,line_end:195|char_star:4,char_end:71"->"type='INFORMATION BLOCK'\nline_star:192,line_end:195|char_star:8,char_end:71";
"with pytest.raises(RuntimeError) as e:\n            with c.session_transaction():\n                pass,type='with_statement'\nline_star:192,line_end:194|char_star:8,char_end:20"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:192,line_end:195|char_star:8,char_end:71"->"with pytest.raises(RuntimeError) as e:\n            with c.session_transaction():\n                pass,type='with_statement'\nline_star:192,line_end:194|char_star:8,char_end:20";
"pytest.raises(RuntimeError) as e,type='with_clause'\nline_star:192,line_end:192|char_star:13,char_end:45"[shape="box",fillcolor="white",style=filled];
"with pytest.raises(RuntimeError) as e:\n            with c.session_transaction():\n                pass,type='with_statement'\nline_star:192,line_end:194|char_star:8,char_end:20"->"pytest.raises(RuntimeError) as e,type='with_clause'\nline_star:192,line_end:192|char_star:13,char_end:45";
"type='INFORMATION BLOCK'\nline_star:193,line_end:194|char_star:12,char_end:20"[shape="point",fillcolor="#121013",style=filled];
"with pytest.raises(RuntimeError) as e:\n            with c.session_transaction():\n                pass,type='with_statement'\nline_star:192,line_end:194|char_star:8,char_end:20"->"type='INFORMATION BLOCK'\nline_star:193,line_end:194|char_star:12,char_end:20";
"with c.session_transaction():\n                pass,type='with_statement'\nline_star:193,line_end:194|char_star:12,char_end:20"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:193,line_end:194|char_star:12,char_end:20"->"with c.session_transaction():\n                pass,type='with_statement'\nline_star:193,line_end:194|char_star:12,char_end:20";
"c.session_transaction(),type='with_clause'\nline_star:193,line_end:193|char_star:17,char_end:40"[shape="box",fillcolor="white",style=filled];
"with c.session_transaction():\n                pass,type='with_statement'\nline_star:193,line_end:194|char_star:12,char_end:20"->"c.session_transaction(),type='with_clause'\nline_star:193,line_end:193|char_star:17,char_end:40";
"type='INFORMATION BLOCK'\nline_star:194,line_end:194|char_star:16,char_end:20"[shape="point",fillcolor="#121013",style=filled];
"with c.session_transaction():\n                pass,type='with_statement'\nline_star:193,line_end:194|char_star:12,char_end:20"->"type='INFORMATION BLOCK'\nline_star:194,line_end:194|char_star:16,char_end:20";
"pass,type='pass_statement'\nline_star:194,line_end:194|char_star:16,char_end:20"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:194,line_end:194|char_star:16,char_end:20"->"pass,type='pass_statement'\nline_star:194,line_end:194|char_star:16,char_end:20";
"pass,type='pass'\nline_star:194,line_end:194|char_star:16,char_end:20"[shape="box",fillcolor="white",style=filled];
"pass,type='pass_statement'\nline_star:194,line_end:194|char_star:16,char_end:20"->"pass,type='pass'\nline_star:194,line_end:194|char_star:16,char_end:20";
"assert 'Session backend did not open a session' in str(e.value),type='assert_statement'\nline_star:195,line_end:195|char_star:8,char_end:71"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:192,line_end:195|char_star:8,char_end:71"->"assert 'Session backend did not open a session' in str(e.value),type='assert_statement'\nline_star:195,line_end:195|char_star:8,char_end:71";
"'Session backend did not open a session' in str(e.value),type='comparison_operator'\nline_star:195,line_end:195|char_star:15,char_end:71"[shape="box",fillcolor="white",style=filled];
"assert 'Session backend did not open a session' in str(e.value),type='assert_statement'\nline_star:195,line_end:195|char_star:8,char_end:71"->"'Session backend did not open a session' in str(e.value),type='comparison_operator'\nline_star:195,line_end:195|char_star:15,char_end:71";
"str(e.value),type='call'\nline_star:195,line_end:195|char_star:59,char_end:71"[shape="box",fillcolor="white",style=filled];
"'Session backend did not open a session' in str(e.value),type='comparison_operator'\nline_star:195,line_end:195|char_star:15,char_end:71"->"str(e.value),type='call'\nline_star:195,line_end:195|char_star:59,char_end:71";
"str,type='identifier'\nline_star:195,line_end:195|char_star:59,char_end:62"[shape="point",fillcolor="#121013",style=filled];
"str(e.value),type='call'\nline_star:195,line_end:195|char_star:59,char_end:71"->"str,type='identifier'\nline_star:195,line_end:195|char_star:59,char_end:62";
"(e.value),type='argument_list'\nline_star:195,line_end:195|char_star:62,char_end:71"[shape="box",fillcolor="white",style=filled];
"str(e.value),type='call'\nline_star:195,line_end:195|char_star:59,char_end:71"->"(e.value),type='argument_list'\nline_star:195,line_end:195|char_star:62,char_end:71";
"e.value,type='attribute'\nline_star:195,line_end:195|char_star:63,char_end:70"[shape="box",fillcolor="white",style=filled];
"(e.value),type='argument_list'\nline_star:195,line_end:195|char_star:62,char_end:71"->"e.value,type='attribute'\nline_star:195,line_end:195|char_star:63,char_end:70";
"e,type='identifier'\nline_star:195,line_end:195|char_star:63,char_end:64"[shape="point",fillcolor="#121013",style=filled];
"e.value,type='attribute'\nline_star:195,line_end:195|char_star:63,char_end:70"->"e,type='identifier'\nline_star:195,line_end:195|char_star:63,char_end:64";
"value,type='identifier'\nline_star:195,line_end:195|char_star:65,char_end:70"[shape="point",fillcolor="#121013",style=filled];
"e.value,type='attribute'\nline_star:195,line_end:195|char_star:63,char_end:70"->"value,type='identifier'\nline_star:195,line_end:195|char_star:65,char_end:70";
"def test_session_transactions_keep_context(app, client, req_ctx):\n    client.get('/')\n    req = flask.request._get_current_object()\n    assert req is not None\n    with client.session_transaction():\n        assert req is flask.request._get_current_object(),type='function_definition'\nline_star:198,line_end:203|char_star:0,char_end:57"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_session_transactions_keep_context(app, client, req_ctx):\n    client.get('/')\n    req = flask.request._get_current_object()\n    assert req is not None\n    with client.session_transaction():\n        assert req is flask.request._get_current_object(),type='function_definition'\nline_star:198,line_end:203|char_star:0,char_end:57";
"test_session_transactions_keep_context,type='identifier'\nline_star:198,line_end:198|char_star:4,char_end:42"[shape="point",fillcolor="#121013",style=filled];
"def test_session_transactions_keep_context(app, client, req_ctx):\n    client.get('/')\n    req = flask.request._get_current_object()\n    assert req is not None\n    with client.session_transaction():\n        assert req is flask.request._get_current_object(),type='function_definition'\nline_star:198,line_end:203|char_star:0,char_end:57"->"test_session_transactions_keep_context,type='identifier'\nline_star:198,line_end:198|char_star:4,char_end:42";
"(app, client, req_ctx),type='parameters'\nline_star:198,line_end:198|char_star:42,char_end:64"[shape="box",fillcolor="white",style=filled];
"def test_session_transactions_keep_context(app, client, req_ctx):\n    client.get('/')\n    req = flask.request._get_current_object()\n    assert req is not None\n    with client.session_transaction():\n        assert req is flask.request._get_current_object(),type='function_definition'\nline_star:198,line_end:203|char_star:0,char_end:57"->"(app, client, req_ctx),type='parameters'\nline_star:198,line_end:198|char_star:42,char_end:64";
"app,type='identifier'\nline_star:198,line_end:198|char_star:43,char_end:46"[shape="point",fillcolor="#121013",style=filled];
"(app, client, req_ctx),type='parameters'\nline_star:198,line_end:198|char_star:42,char_end:64"->"app,type='identifier'\nline_star:198,line_end:198|char_star:43,char_end:46";
"client,type='identifier'\nline_star:198,line_end:198|char_star:48,char_end:54"[shape="point",fillcolor="#121013",style=filled];
"(app, client, req_ctx),type='parameters'\nline_star:198,line_end:198|char_star:42,char_end:64"->"client,type='identifier'\nline_star:198,line_end:198|char_star:48,char_end:54";
"req_ctx,type='identifier'\nline_star:198,line_end:198|char_star:56,char_end:63"[shape="point",fillcolor="#121013",style=filled];
"(app, client, req_ctx),type='parameters'\nline_star:198,line_end:198|char_star:42,char_end:64"->"req_ctx,type='identifier'\nline_star:198,line_end:198|char_star:56,char_end:63";
"type='INFORMATION BLOCK'\nline_star:199,line_end:203|char_star:4,char_end:57"[shape="point",fillcolor="#121013",style=filled];
"def test_session_transactions_keep_context(app, client, req_ctx):\n    client.get('/')\n    req = flask.request._get_current_object()\n    assert req is not None\n    with client.session_transaction():\n        assert req is flask.request._get_current_object(),type='function_definition'\nline_star:198,line_end:203|char_star:0,char_end:57"->"type='INFORMATION BLOCK'\nline_star:199,line_end:203|char_star:4,char_end:57";
"assert req is not None,type='assert_statement'\nline_star:201,line_end:201|char_star:4,char_end:26"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:199,line_end:203|char_star:4,char_end:57"->"assert req is not None,type='assert_statement'\nline_star:201,line_end:201|char_star:4,char_end:26";
"req is not None,type='comparison_operator'\nline_star:201,line_end:201|char_star:11,char_end:26"[shape="box",fillcolor="white",style=filled];
"assert req is not None,type='assert_statement'\nline_star:201,line_end:201|char_star:4,char_end:26"->"req is not None,type='comparison_operator'\nline_star:201,line_end:201|char_star:11,char_end:26";
"req,type='identifier'\nline_star:201,line_end:201|char_star:11,char_end:14"[shape="point",fillcolor="#121013",style=filled];
"req is not None,type='comparison_operator'\nline_star:201,line_end:201|char_star:11,char_end:26"->"req,type='identifier'\nline_star:201,line_end:201|char_star:11,char_end:14";
"with client.session_transaction():\n        assert req is flask.request._get_current_object(),type='with_statement'\nline_star:202,line_end:203|char_star:4,char_end:57"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:199,line_end:203|char_star:4,char_end:57"->"with client.session_transaction():\n        assert req is flask.request._get_current_object(),type='with_statement'\nline_star:202,line_end:203|char_star:4,char_end:57";
"client.session_transaction(),type='with_clause'\nline_star:202,line_end:202|char_star:9,char_end:37"[shape="box",fillcolor="white",style=filled];
"with client.session_transaction():\n        assert req is flask.request._get_current_object(),type='with_statement'\nline_star:202,line_end:203|char_star:4,char_end:57"->"client.session_transaction(),type='with_clause'\nline_star:202,line_end:202|char_star:9,char_end:37";
"type='INFORMATION BLOCK'\nline_star:203,line_end:203|char_star:8,char_end:57"[shape="point",fillcolor="#121013",style=filled];
"with client.session_transaction():\n        assert req is flask.request._get_current_object(),type='with_statement'\nline_star:202,line_end:203|char_star:4,char_end:57"->"type='INFORMATION BLOCK'\nline_star:203,line_end:203|char_star:8,char_end:57";
"assert req is flask.request._get_current_object(),type='assert_statement'\nline_star:203,line_end:203|char_star:8,char_end:57"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:203,line_end:203|char_star:8,char_end:57"->"assert req is flask.request._get_current_object(),type='assert_statement'\nline_star:203,line_end:203|char_star:8,char_end:57";
"req is flask.request._get_current_object(),type='comparison_operator'\nline_star:203,line_end:203|char_star:15,char_end:57"[shape="box",fillcolor="white",style=filled];
"assert req is flask.request._get_current_object(),type='assert_statement'\nline_star:203,line_end:203|char_star:8,char_end:57"->"req is flask.request._get_current_object(),type='comparison_operator'\nline_star:203,line_end:203|char_star:15,char_end:57";
"req,type='identifier'\nline_star:203,line_end:203|char_star:15,char_end:18"[shape="point",fillcolor="#121013",style=filled];
"req is flask.request._get_current_object(),type='comparison_operator'\nline_star:203,line_end:203|char_star:15,char_end:57"->"req,type='identifier'\nline_star:203,line_end:203|char_star:15,char_end:18";
"flask.request._get_current_object(),type='call'\nline_star:203,line_end:203|char_star:22,char_end:57"[shape="box",fillcolor="white",style=filled];
"req is flask.request._get_current_object(),type='comparison_operator'\nline_star:203,line_end:203|char_star:15,char_end:57"->"flask.request._get_current_object(),type='call'\nline_star:203,line_end:203|char_star:22,char_end:57";
"flask.request._get_current_object,type='attribute'\nline_star:203,line_end:203|char_star:22,char_end:55"[shape="box",fillcolor="white",style=filled];
"flask.request._get_current_object(),type='call'\nline_star:203,line_end:203|char_star:22,char_end:57"->"flask.request._get_current_object,type='attribute'\nline_star:203,line_end:203|char_star:22,char_end:55";
"flask.request,type='attribute'\nline_star:203,line_end:203|char_star:22,char_end:35"[shape="box",fillcolor="white",style=filled];
"flask.request._get_current_object,type='attribute'\nline_star:203,line_end:203|char_star:22,char_end:55"->"flask.request,type='attribute'\nline_star:203,line_end:203|char_star:22,char_end:35";
"flask,type='identifier'\nline_star:203,line_end:203|char_star:22,char_end:27"[shape="point",fillcolor="#121013",style=filled];
"flask.request,type='attribute'\nline_star:203,line_end:203|char_star:22,char_end:35"->"flask,type='identifier'\nline_star:203,line_end:203|char_star:22,char_end:27";
"request,type='identifier'\nline_star:203,line_end:203|char_star:28,char_end:35"[shape="point",fillcolor="#121013",style=filled];
"flask.request,type='attribute'\nline_star:203,line_end:203|char_star:22,char_end:35"->"request,type='identifier'\nline_star:203,line_end:203|char_star:28,char_end:35";
"_get_current_object,type='identifier'\nline_star:203,line_end:203|char_star:36,char_end:55"[shape="point",fillcolor="#121013",style=filled];
"flask.request._get_current_object,type='attribute'\nline_star:203,line_end:203|char_star:22,char_end:55"->"_get_current_object,type='identifier'\nline_star:203,line_end:203|char_star:36,char_end:55";
"def test_session_transaction_needs_cookies(app):\n    c = app.test_client(use_cookies=False)\n    with pytest.raises(RuntimeError) as e:\n        with c.session_transaction():\n            pass\n    assert 'cookies' in str(e.value),type='function_definition'\nline_star:206,line_end:211|char_star:0,char_end:36"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_session_transaction_needs_cookies(app):\n    c = app.test_client(use_cookies=False)\n    with pytest.raises(RuntimeError) as e:\n        with c.session_transaction():\n            pass\n    assert 'cookies' in str(e.value),type='function_definition'\nline_star:206,line_end:211|char_star:0,char_end:36";
"test_session_transaction_needs_cookies,type='identifier'\nline_star:206,line_end:206|char_star:4,char_end:42"[shape="point",fillcolor="#121013",style=filled];
"def test_session_transaction_needs_cookies(app):\n    c = app.test_client(use_cookies=False)\n    with pytest.raises(RuntimeError) as e:\n        with c.session_transaction():\n            pass\n    assert 'cookies' in str(e.value),type='function_definition'\nline_star:206,line_end:211|char_star:0,char_end:36"->"test_session_transaction_needs_cookies,type='identifier'\nline_star:206,line_end:206|char_star:4,char_end:42";
"(app),type='parameters'\nline_star:206,line_end:206|char_star:42,char_end:47"[shape="box",fillcolor="white",style=filled];
"def test_session_transaction_needs_cookies(app):\n    c = app.test_client(use_cookies=False)\n    with pytest.raises(RuntimeError) as e:\n        with c.session_transaction():\n            pass\n    assert 'cookies' in str(e.value),type='function_definition'\nline_star:206,line_end:211|char_star:0,char_end:36"->"(app),type='parameters'\nline_star:206,line_end:206|char_star:42,char_end:47";
"app,type='identifier'\nline_star:206,line_end:206|char_star:43,char_end:46"[shape="point",fillcolor="#121013",style=filled];
"(app),type='parameters'\nline_star:206,line_end:206|char_star:42,char_end:47"->"app,type='identifier'\nline_star:206,line_end:206|char_star:43,char_end:46";
"type='INFORMATION BLOCK'\nline_star:207,line_end:211|char_star:4,char_end:36"[shape="point",fillcolor="#121013",style=filled];
"def test_session_transaction_needs_cookies(app):\n    c = app.test_client(use_cookies=False)\n    with pytest.raises(RuntimeError) as e:\n        with c.session_transaction():\n            pass\n    assert 'cookies' in str(e.value),type='function_definition'\nline_star:206,line_end:211|char_star:0,char_end:36"->"type='INFORMATION BLOCK'\nline_star:207,line_end:211|char_star:4,char_end:36";
"with pytest.raises(RuntimeError) as e:\n        with c.session_transaction():\n            pass,type='with_statement'\nline_star:208,line_end:210|char_star:4,char_end:16"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:207,line_end:211|char_star:4,char_end:36"->"with pytest.raises(RuntimeError) as e:\n        with c.session_transaction():\n            pass,type='with_statement'\nline_star:208,line_end:210|char_star:4,char_end:16";
"pytest.raises(RuntimeError) as e,type='with_clause'\nline_star:208,line_end:208|char_star:9,char_end:41"[shape="box",fillcolor="white",style=filled];
"with pytest.raises(RuntimeError) as e:\n        with c.session_transaction():\n            pass,type='with_statement'\nline_star:208,line_end:210|char_star:4,char_end:16"->"pytest.raises(RuntimeError) as e,type='with_clause'\nline_star:208,line_end:208|char_star:9,char_end:41";
"type='INFORMATION BLOCK'\nline_star:209,line_end:210|char_star:8,char_end:16"[shape="point",fillcolor="#121013",style=filled];
"with pytest.raises(RuntimeError) as e:\n        with c.session_transaction():\n            pass,type='with_statement'\nline_star:208,line_end:210|char_star:4,char_end:16"->"type='INFORMATION BLOCK'\nline_star:209,line_end:210|char_star:8,char_end:16";
"with c.session_transaction():\n            pass,type='with_statement'\nline_star:209,line_end:210|char_star:8,char_end:16"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:209,line_end:210|char_star:8,char_end:16"->"with c.session_transaction():\n            pass,type='with_statement'\nline_star:209,line_end:210|char_star:8,char_end:16";
"c.session_transaction(),type='with_clause'\nline_star:209,line_end:209|char_star:13,char_end:36"[shape="box",fillcolor="white",style=filled];
"with c.session_transaction():\n            pass,type='with_statement'\nline_star:209,line_end:210|char_star:8,char_end:16"->"c.session_transaction(),type='with_clause'\nline_star:209,line_end:209|char_star:13,char_end:36";
"type='INFORMATION BLOCK'\nline_star:210,line_end:210|char_star:12,char_end:16"[shape="point",fillcolor="#121013",style=filled];
"with c.session_transaction():\n            pass,type='with_statement'\nline_star:209,line_end:210|char_star:8,char_end:16"->"type='INFORMATION BLOCK'\nline_star:210,line_end:210|char_star:12,char_end:16";
"pass,type='pass_statement'\nline_star:210,line_end:210|char_star:12,char_end:16"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:210,line_end:210|char_star:12,char_end:16"->"pass,type='pass_statement'\nline_star:210,line_end:210|char_star:12,char_end:16";
"pass,type='pass'\nline_star:210,line_end:210|char_star:12,char_end:16"[shape="box",fillcolor="white",style=filled];
"pass,type='pass_statement'\nline_star:210,line_end:210|char_star:12,char_end:16"->"pass,type='pass'\nline_star:210,line_end:210|char_star:12,char_end:16";
"assert 'cookies' in str(e.value),type='assert_statement'\nline_star:211,line_end:211|char_star:4,char_end:36"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:207,line_end:211|char_star:4,char_end:36"->"assert 'cookies' in str(e.value),type='assert_statement'\nline_star:211,line_end:211|char_star:4,char_end:36";
"'cookies' in str(e.value),type='comparison_operator'\nline_star:211,line_end:211|char_star:11,char_end:36"[shape="box",fillcolor="white",style=filled];
"assert 'cookies' in str(e.value),type='assert_statement'\nline_star:211,line_end:211|char_star:4,char_end:36"->"'cookies' in str(e.value),type='comparison_operator'\nline_star:211,line_end:211|char_star:11,char_end:36";
"str(e.value),type='call'\nline_star:211,line_end:211|char_star:24,char_end:36"[shape="box",fillcolor="white",style=filled];
"'cookies' in str(e.value),type='comparison_operator'\nline_star:211,line_end:211|char_star:11,char_end:36"->"str(e.value),type='call'\nline_star:211,line_end:211|char_star:24,char_end:36";
"str,type='identifier'\nline_star:211,line_end:211|char_star:24,char_end:27"[shape="point",fillcolor="#121013",style=filled];
"str(e.value),type='call'\nline_star:211,line_end:211|char_star:24,char_end:36"->"str,type='identifier'\nline_star:211,line_end:211|char_star:24,char_end:27";
"(e.value),type='argument_list'\nline_star:211,line_end:211|char_star:27,char_end:36"[shape="box",fillcolor="white",style=filled];
"str(e.value),type='call'\nline_star:211,line_end:211|char_star:24,char_end:36"->"(e.value),type='argument_list'\nline_star:211,line_end:211|char_star:27,char_end:36";
"e.value,type='attribute'\nline_star:211,line_end:211|char_star:28,char_end:35"[shape="box",fillcolor="white",style=filled];
"(e.value),type='argument_list'\nline_star:211,line_end:211|char_star:27,char_end:36"->"e.value,type='attribute'\nline_star:211,line_end:211|char_star:28,char_end:35";
"e,type='identifier'\nline_star:211,line_end:211|char_star:28,char_end:29"[shape="point",fillcolor="#121013",style=filled];
"e.value,type='attribute'\nline_star:211,line_end:211|char_star:28,char_end:35"->"e,type='identifier'\nline_star:211,line_end:211|char_star:28,char_end:29";
"value,type='identifier'\nline_star:211,line_end:211|char_star:30,char_end:35"[shape="point",fillcolor="#121013",style=filled];
"e.value,type='attribute'\nline_star:211,line_end:211|char_star:28,char_end:35"->"value,type='identifier'\nline_star:211,line_end:211|char_star:30,char_end:35";
"def test_test_client_context_binding(app, client):\n    app.testing = False\n\n    @app.route('/')\n    def index():\n        flask.g.value = 42\n        return 'Hello World!'\n\n    @app.route('/other')\n    def other():\n        1 // 0\n\n    with client:\n        resp = client.get('/')\n        assert flask.g.value == 42\n        assert resp.data == b'Hello World!'\n        assert resp.status_code == 200\n\n        resp = client.get('/other')\n        assert not hasattr(flask.g, 'value')\n        assert b'Internal Server Error' in resp.data\n        assert resp.status_code == 500\n        flask.g.value = 23\n\n    try:\n        flask.g.value\n    except (AttributeError, RuntimeError):\n        pass\n    else:\n        raise AssertionError('some kind of exception expected'),type='function_definition'\nline_star:214,line_end:243|char_star:0,char_end:63"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_test_client_context_binding(app, client):\n    app.testing = False\n\n    @app.route('/')\n    def index():\n        flask.g.value = 42\n        return 'Hello World!'\n\n    @app.route('/other')\n    def other():\n        1 // 0\n\n    with client:\n        resp = client.get('/')\n        assert flask.g.value == 42\n        assert resp.data == b'Hello World!'\n        assert resp.status_code == 200\n\n        resp = client.get('/other')\n        assert not hasattr(flask.g, 'value')\n        assert b'Internal Server Error' in resp.data\n        assert resp.status_code == 500\n        flask.g.value = 23\n\n    try:\n        flask.g.value\n    except (AttributeError, RuntimeError):\n        pass\n    else:\n        raise AssertionError('some kind of exception expected'),type='function_definition'\nline_star:214,line_end:243|char_star:0,char_end:63";
"test_test_client_context_binding,type='identifier'\nline_star:214,line_end:214|char_star:4,char_end:36"[shape="point",fillcolor="#121013",style=filled];
"def test_test_client_context_binding(app, client):\n    app.testing = False\n\n    @app.route('/')\n    def index():\n        flask.g.value = 42\n        return 'Hello World!'\n\n    @app.route('/other')\n    def other():\n        1 // 0\n\n    with client:\n        resp = client.get('/')\n        assert flask.g.value == 42\n        assert resp.data == b'Hello World!'\n        assert resp.status_code == 200\n\n        resp = client.get('/other')\n        assert not hasattr(flask.g, 'value')\n        assert b'Internal Server Error' in resp.data\n        assert resp.status_code == 500\n        flask.g.value = 23\n\n    try:\n        flask.g.value\n    except (AttributeError, RuntimeError):\n        pass\n    else:\n        raise AssertionError('some kind of exception expected'),type='function_definition'\nline_star:214,line_end:243|char_star:0,char_end:63"->"test_test_client_context_binding,type='identifier'\nline_star:214,line_end:214|char_star:4,char_end:36";
"(app, client),type='parameters'\nline_star:214,line_end:214|char_star:36,char_end:49"[shape="box",fillcolor="white",style=filled];
"def test_test_client_context_binding(app, client):\n    app.testing = False\n\n    @app.route('/')\n    def index():\n        flask.g.value = 42\n        return 'Hello World!'\n\n    @app.route('/other')\n    def other():\n        1 // 0\n\n    with client:\n        resp = client.get('/')\n        assert flask.g.value == 42\n        assert resp.data == b'Hello World!'\n        assert resp.status_code == 200\n\n        resp = client.get('/other')\n        assert not hasattr(flask.g, 'value')\n        assert b'Internal Server Error' in resp.data\n        assert resp.status_code == 500\n        flask.g.value = 23\n\n    try:\n        flask.g.value\n    except (AttributeError, RuntimeError):\n        pass\n    else:\n        raise AssertionError('some kind of exception expected'),type='function_definition'\nline_star:214,line_end:243|char_star:0,char_end:63"->"(app, client),type='parameters'\nline_star:214,line_end:214|char_star:36,char_end:49";
"app,type='identifier'\nline_star:214,line_end:214|char_star:37,char_end:40"[shape="point",fillcolor="#121013",style=filled];
"(app, client),type='parameters'\nline_star:214,line_end:214|char_star:36,char_end:49"->"app,type='identifier'\nline_star:214,line_end:214|char_star:37,char_end:40";
"client,type='identifier'\nline_star:214,line_end:214|char_star:42,char_end:48"[shape="point",fillcolor="#121013",style=filled];
"(app, client),type='parameters'\nline_star:214,line_end:214|char_star:36,char_end:49"->"client,type='identifier'\nline_star:214,line_end:214|char_star:42,char_end:48";
"type='INFORMATION BLOCK'\nline_star:215,line_end:243|char_star:4,char_end:63"[shape="point",fillcolor="#121013",style=filled];
"def test_test_client_context_binding(app, client):\n    app.testing = False\n\n    @app.route('/')\n    def index():\n        flask.g.value = 42\n        return 'Hello World!'\n\n    @app.route('/other')\n    def other():\n        1 // 0\n\n    with client:\n        resp = client.get('/')\n        assert flask.g.value == 42\n        assert resp.data == b'Hello World!'\n        assert resp.status_code == 200\n\n        resp = client.get('/other')\n        assert not hasattr(flask.g, 'value')\n        assert b'Internal Server Error' in resp.data\n        assert resp.status_code == 500\n        flask.g.value = 23\n\n    try:\n        flask.g.value\n    except (AttributeError, RuntimeError):\n        pass\n    else:\n        raise AssertionError('some kind of exception expected'),type='function_definition'\nline_star:214,line_end:243|char_star:0,char_end:63"->"type='INFORMATION BLOCK'\nline_star:215,line_end:243|char_star:4,char_end:63";
"@app.route('/')\n    def index():\n        flask.g.value = 42\n        return 'Hello World!',type='decorated_definition'\nline_star:217,line_end:220|char_star:4,char_end:29"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:215,line_end:243|char_star:4,char_end:63"->"@app.route('/')\n    def index():\n        flask.g.value = 42\n        return 'Hello World!',type='decorated_definition'\nline_star:217,line_end:220|char_star:4,char_end:29";
"@app.route('/'),type='decorator'\nline_star:217,line_end:217|char_star:4,char_end:19"[shape="box",fillcolor="white",style=filled];
"@app.route('/')\n    def index():\n        flask.g.value = 42\n        return 'Hello World!',type='decorated_definition'\nline_star:217,line_end:220|char_star:4,char_end:29"->"@app.route('/'),type='decorator'\nline_star:217,line_end:217|char_star:4,char_end:19";
"def index():\n        flask.g.value = 42\n        return 'Hello World!',type='function_definition'\nline_star:218,line_end:220|char_star:4,char_end:29"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.route('/')\n    def index():\n        flask.g.value = 42\n        return 'Hello World!',type='decorated_definition'\nline_star:217,line_end:220|char_star:4,char_end:29"->"def index():\n        flask.g.value = 42\n        return 'Hello World!',type='function_definition'\nline_star:218,line_end:220|char_star:4,char_end:29";
"index,type='identifier'\nline_star:218,line_end:218|char_star:8,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"def index():\n        flask.g.value = 42\n        return 'Hello World!',type='function_definition'\nline_star:218,line_end:220|char_star:4,char_end:29"->"index,type='identifier'\nline_star:218,line_end:218|char_star:8,char_end:13";
"type='INFORMATION BLOCK'\nline_star:219,line_end:220|char_star:8,char_end:29"[shape="point",fillcolor="#121013",style=filled];
"def index():\n        flask.g.value = 42\n        return 'Hello World!',type='function_definition'\nline_star:218,line_end:220|char_star:4,char_end:29"->"type='INFORMATION BLOCK'\nline_star:219,line_end:220|char_star:8,char_end:29";
"return 'Hello World!',type='return_statement'\nline_star:220,line_end:220|char_star:8,char_end:29"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:219,line_end:220|char_star:8,char_end:29"->"return 'Hello World!',type='return_statement'\nline_star:220,line_end:220|char_star:8,char_end:29";
"@app.route('/other')\n    def other():\n        1 // 0,type='decorated_definition'\nline_star:222,line_end:224|char_star:4,char_end:14"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:215,line_end:243|char_star:4,char_end:63"->"@app.route('/other')\n    def other():\n        1 // 0,type='decorated_definition'\nline_star:222,line_end:224|char_star:4,char_end:14";
"@app.route('/other'),type='decorator'\nline_star:222,line_end:222|char_star:4,char_end:24"[shape="box",fillcolor="white",style=filled];
"@app.route('/other')\n    def other():\n        1 // 0,type='decorated_definition'\nline_star:222,line_end:224|char_star:4,char_end:14"->"@app.route('/other'),type='decorator'\nline_star:222,line_end:222|char_star:4,char_end:24";
"def other():\n        1 // 0,type='function_definition'\nline_star:223,line_end:224|char_star:4,char_end:14"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.route('/other')\n    def other():\n        1 // 0,type='decorated_definition'\nline_star:222,line_end:224|char_star:4,char_end:14"->"def other():\n        1 // 0,type='function_definition'\nline_star:223,line_end:224|char_star:4,char_end:14";
"other,type='identifier'\nline_star:223,line_end:223|char_star:8,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"def other():\n        1 // 0,type='function_definition'\nline_star:223,line_end:224|char_star:4,char_end:14"->"other,type='identifier'\nline_star:223,line_end:223|char_star:8,char_end:13";
"type='INFORMATION BLOCK'\nline_star:224,line_end:224|char_star:8,char_end:14"[shape="point",fillcolor="#121013",style=filled];
"def other():\n        1 // 0,type='function_definition'\nline_star:223,line_end:224|char_star:4,char_end:14"->"type='INFORMATION BLOCK'\nline_star:224,line_end:224|char_star:8,char_end:14";
"with client:\n        resp = client.get('/')\n        assert flask.g.value == 42\n        assert resp.data == b'Hello World!'\n        assert resp.status_code == 200\n\n        resp = client.get('/other')\n        assert not hasattr(flask.g, 'value')\n        assert b'Internal Server Error' in resp.data\n        assert resp.status_code == 500\n        flask.g.value = 23,type='with_statement'\nline_star:226,line_end:236|char_star:4,char_end:26"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:215,line_end:243|char_star:4,char_end:63"->"with client:\n        resp = client.get('/')\n        assert flask.g.value == 42\n        assert resp.data == b'Hello World!'\n        assert resp.status_code == 200\n\n        resp = client.get('/other')\n        assert not hasattr(flask.g, 'value')\n        assert b'Internal Server Error' in resp.data\n        assert resp.status_code == 500\n        flask.g.value = 23,type='with_statement'\nline_star:226,line_end:236|char_star:4,char_end:26";
"client,type='with_clause'\nline_star:226,line_end:226|char_star:9,char_end:15"[shape="box",fillcolor="white",style=filled];
"with client:\n        resp = client.get('/')\n        assert flask.g.value == 42\n        assert resp.data == b'Hello World!'\n        assert resp.status_code == 200\n\n        resp = client.get('/other')\n        assert not hasattr(flask.g, 'value')\n        assert b'Internal Server Error' in resp.data\n        assert resp.status_code == 500\n        flask.g.value = 23,type='with_statement'\nline_star:226,line_end:236|char_star:4,char_end:26"->"client,type='with_clause'\nline_star:226,line_end:226|char_star:9,char_end:15";
"type='INFORMATION BLOCK'\nline_star:227,line_end:236|char_star:8,char_end:26"[shape="point",fillcolor="#121013",style=filled];
"with client:\n        resp = client.get('/')\n        assert flask.g.value == 42\n        assert resp.data == b'Hello World!'\n        assert resp.status_code == 200\n\n        resp = client.get('/other')\n        assert not hasattr(flask.g, 'value')\n        assert b'Internal Server Error' in resp.data\n        assert resp.status_code == 500\n        flask.g.value = 23,type='with_statement'\nline_star:226,line_end:236|char_star:4,char_end:26"->"type='INFORMATION BLOCK'\nline_star:227,line_end:236|char_star:8,char_end:26";
"assert flask.g.value == 42,type='assert_statement'\nline_star:228,line_end:228|char_star:8,char_end:34"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:227,line_end:236|char_star:8,char_end:26"->"assert flask.g.value == 42,type='assert_statement'\nline_star:228,line_end:228|char_star:8,char_end:34";
"flask.g.value == 42,type='comparison_operator'\nline_star:228,line_end:228|char_star:15,char_end:34"[shape="box",fillcolor="white",style=filled];
"assert flask.g.value == 42,type='assert_statement'\nline_star:228,line_end:228|char_star:8,char_end:34"->"flask.g.value == 42,type='comparison_operator'\nline_star:228,line_end:228|char_star:15,char_end:34";
"flask.g.value,type='attribute'\nline_star:228,line_end:228|char_star:15,char_end:28"[shape="box",fillcolor="white",style=filled];
"flask.g.value == 42,type='comparison_operator'\nline_star:228,line_end:228|char_star:15,char_end:34"->"flask.g.value,type='attribute'\nline_star:228,line_end:228|char_star:15,char_end:28";
"flask.g,type='attribute'\nline_star:228,line_end:228|char_star:15,char_end:22"[shape="box",fillcolor="white",style=filled];
"flask.g.value,type='attribute'\nline_star:228,line_end:228|char_star:15,char_end:28"->"flask.g,type='attribute'\nline_star:228,line_end:228|char_star:15,char_end:22";
"flask,type='identifier'\nline_star:228,line_end:228|char_star:15,char_end:20"[shape="point",fillcolor="#121013",style=filled];
"flask.g,type='attribute'\nline_star:228,line_end:228|char_star:15,char_end:22"->"flask,type='identifier'\nline_star:228,line_end:228|char_star:15,char_end:20";
"g,type='identifier'\nline_star:228,line_end:228|char_star:21,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"flask.g,type='attribute'\nline_star:228,line_end:228|char_star:15,char_end:22"->"g,type='identifier'\nline_star:228,line_end:228|char_star:21,char_end:22";
"value,type='identifier'\nline_star:228,line_end:228|char_star:23,char_end:28"[shape="point",fillcolor="#121013",style=filled];
"flask.g.value,type='attribute'\nline_star:228,line_end:228|char_star:15,char_end:28"->"value,type='identifier'\nline_star:228,line_end:228|char_star:23,char_end:28";
"assert resp.data == b'Hello World!',type='assert_statement'\nline_star:229,line_end:229|char_star:8,char_end:43"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:227,line_end:236|char_star:8,char_end:26"->"assert resp.data == b'Hello World!',type='assert_statement'\nline_star:229,line_end:229|char_star:8,char_end:43";
"resp.data == b'Hello World!',type='comparison_operator'\nline_star:229,line_end:229|char_star:15,char_end:43"[shape="box",fillcolor="white",style=filled];
"assert resp.data == b'Hello World!',type='assert_statement'\nline_star:229,line_end:229|char_star:8,char_end:43"->"resp.data == b'Hello World!',type='comparison_operator'\nline_star:229,line_end:229|char_star:15,char_end:43";
"resp.data,type='attribute'\nline_star:229,line_end:229|char_star:15,char_end:24"[shape="box",fillcolor="white",style=filled];
"resp.data == b'Hello World!',type='comparison_operator'\nline_star:229,line_end:229|char_star:15,char_end:43"->"resp.data,type='attribute'\nline_star:229,line_end:229|char_star:15,char_end:24";
"resp,type='identifier'\nline_star:229,line_end:229|char_star:15,char_end:19"[shape="point",fillcolor="#121013",style=filled];
"resp.data,type='attribute'\nline_star:229,line_end:229|char_star:15,char_end:24"->"resp,type='identifier'\nline_star:229,line_end:229|char_star:15,char_end:19";
"data,type='identifier'\nline_star:229,line_end:229|char_star:20,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"resp.data,type='attribute'\nline_star:229,line_end:229|char_star:15,char_end:24"->"data,type='identifier'\nline_star:229,line_end:229|char_star:20,char_end:24";
"assert resp.status_code == 200,type='assert_statement'\nline_star:230,line_end:230|char_star:8,char_end:38"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:227,line_end:236|char_star:8,char_end:26"->"assert resp.status_code == 200,type='assert_statement'\nline_star:230,line_end:230|char_star:8,char_end:38";
"resp.status_code == 200,type='comparison_operator'\nline_star:230,line_end:230|char_star:15,char_end:38"[shape="box",fillcolor="white",style=filled];
"assert resp.status_code == 200,type='assert_statement'\nline_star:230,line_end:230|char_star:8,char_end:38"->"resp.status_code == 200,type='comparison_operator'\nline_star:230,line_end:230|char_star:15,char_end:38";
"resp.status_code,type='attribute'\nline_star:230,line_end:230|char_star:15,char_end:31"[shape="box",fillcolor="white",style=filled];
"resp.status_code == 200,type='comparison_operator'\nline_star:230,line_end:230|char_star:15,char_end:38"->"resp.status_code,type='attribute'\nline_star:230,line_end:230|char_star:15,char_end:31";
"resp,type='identifier'\nline_star:230,line_end:230|char_star:15,char_end:19"[shape="point",fillcolor="#121013",style=filled];
"resp.status_code,type='attribute'\nline_star:230,line_end:230|char_star:15,char_end:31"->"resp,type='identifier'\nline_star:230,line_end:230|char_star:15,char_end:19";
"status_code,type='identifier'\nline_star:230,line_end:230|char_star:20,char_end:31"[shape="point",fillcolor="#121013",style=filled];
"resp.status_code,type='attribute'\nline_star:230,line_end:230|char_star:15,char_end:31"->"status_code,type='identifier'\nline_star:230,line_end:230|char_star:20,char_end:31";
"assert not hasattr(flask.g, 'value'),type='assert_statement'\nline_star:233,line_end:233|char_star:8,char_end:44"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:227,line_end:236|char_star:8,char_end:26"->"assert not hasattr(flask.g, 'value'),type='assert_statement'\nline_star:233,line_end:233|char_star:8,char_end:44";
"not hasattr(flask.g, 'value'),type='not_operator'\nline_star:233,line_end:233|char_star:15,char_end:44"[shape="box",fillcolor="white",style=filled];
"assert not hasattr(flask.g, 'value'),type='assert_statement'\nline_star:233,line_end:233|char_star:8,char_end:44"->"not hasattr(flask.g, 'value'),type='not_operator'\nline_star:233,line_end:233|char_star:15,char_end:44";
"hasattr(flask.g, 'value'),type='call'\nline_star:233,line_end:233|char_star:19,char_end:44"[shape="box",fillcolor="white",style=filled];
"not hasattr(flask.g, 'value'),type='not_operator'\nline_star:233,line_end:233|char_star:15,char_end:44"->"hasattr(flask.g, 'value'),type='call'\nline_star:233,line_end:233|char_star:19,char_end:44";
"hasattr,type='identifier'\nline_star:233,line_end:233|char_star:19,char_end:26"[shape="point",fillcolor="#121013",style=filled];
"hasattr(flask.g, 'value'),type='call'\nline_star:233,line_end:233|char_star:19,char_end:44"->"hasattr,type='identifier'\nline_star:233,line_end:233|char_star:19,char_end:26";
"(flask.g, 'value'),type='argument_list'\nline_star:233,line_end:233|char_star:26,char_end:44"[shape="box",fillcolor="white",style=filled];
"hasattr(flask.g, 'value'),type='call'\nline_star:233,line_end:233|char_star:19,char_end:44"->"(flask.g, 'value'),type='argument_list'\nline_star:233,line_end:233|char_star:26,char_end:44";
"flask.g,type='attribute'\nline_star:233,line_end:233|char_star:27,char_end:34"[shape="box",fillcolor="white",style=filled];
"(flask.g, 'value'),type='argument_list'\nline_star:233,line_end:233|char_star:26,char_end:44"->"flask.g,type='attribute'\nline_star:233,line_end:233|char_star:27,char_end:34";
"flask,type='identifier'\nline_star:233,line_end:233|char_star:27,char_end:32"[shape="point",fillcolor="#121013",style=filled];
"flask.g,type='attribute'\nline_star:233,line_end:233|char_star:27,char_end:34"->"flask,type='identifier'\nline_star:233,line_end:233|char_star:27,char_end:32";
"g,type='identifier'\nline_star:233,line_end:233|char_star:33,char_end:34"[shape="point",fillcolor="#121013",style=filled];
"flask.g,type='attribute'\nline_star:233,line_end:233|char_star:27,char_end:34"->"g,type='identifier'\nline_star:233,line_end:233|char_star:33,char_end:34";
"assert b'Internal Server Error' in resp.data,type='assert_statement'\nline_star:234,line_end:234|char_star:8,char_end:52"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:227,line_end:236|char_star:8,char_end:26"->"assert b'Internal Server Error' in resp.data,type='assert_statement'\nline_star:234,line_end:234|char_star:8,char_end:52";
"b'Internal Server Error' in resp.data,type='comparison_operator'\nline_star:234,line_end:234|char_star:15,char_end:52"[shape="box",fillcolor="white",style=filled];
"assert b'Internal Server Error' in resp.data,type='assert_statement'\nline_star:234,line_end:234|char_star:8,char_end:52"->"b'Internal Server Error' in resp.data,type='comparison_operator'\nline_star:234,line_end:234|char_star:15,char_end:52";
"resp.data,type='attribute'\nline_star:234,line_end:234|char_star:43,char_end:52"[shape="box",fillcolor="white",style=filled];
"b'Internal Server Error' in resp.data,type='comparison_operator'\nline_star:234,line_end:234|char_star:15,char_end:52"->"resp.data,type='attribute'\nline_star:234,line_end:234|char_star:43,char_end:52";
"resp,type='identifier'\nline_star:234,line_end:234|char_star:43,char_end:47"[shape="point",fillcolor="#121013",style=filled];
"resp.data,type='attribute'\nline_star:234,line_end:234|char_star:43,char_end:52"->"resp,type='identifier'\nline_star:234,line_end:234|char_star:43,char_end:47";
"data,type='identifier'\nline_star:234,line_end:234|char_star:48,char_end:52"[shape="point",fillcolor="#121013",style=filled];
"resp.data,type='attribute'\nline_star:234,line_end:234|char_star:43,char_end:52"->"data,type='identifier'\nline_star:234,line_end:234|char_star:48,char_end:52";
"assert resp.status_code == 500,type='assert_statement'\nline_star:235,line_end:235|char_star:8,char_end:38"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:227,line_end:236|char_star:8,char_end:26"->"assert resp.status_code == 500,type='assert_statement'\nline_star:235,line_end:235|char_star:8,char_end:38";
"resp.status_code == 500,type='comparison_operator'\nline_star:235,line_end:235|char_star:15,char_end:38"[shape="box",fillcolor="white",style=filled];
"assert resp.status_code == 500,type='assert_statement'\nline_star:235,line_end:235|char_star:8,char_end:38"->"resp.status_code == 500,type='comparison_operator'\nline_star:235,line_end:235|char_star:15,char_end:38";
"resp.status_code,type='attribute'\nline_star:235,line_end:235|char_star:15,char_end:31"[shape="box",fillcolor="white",style=filled];
"resp.status_code == 500,type='comparison_operator'\nline_star:235,line_end:235|char_star:15,char_end:38"->"resp.status_code,type='attribute'\nline_star:235,line_end:235|char_star:15,char_end:31";
"resp,type='identifier'\nline_star:235,line_end:235|char_star:15,char_end:19"[shape="point",fillcolor="#121013",style=filled];
"resp.status_code,type='attribute'\nline_star:235,line_end:235|char_star:15,char_end:31"->"resp,type='identifier'\nline_star:235,line_end:235|char_star:15,char_end:19";
"status_code,type='identifier'\nline_star:235,line_end:235|char_star:20,char_end:31"[shape="point",fillcolor="#121013",style=filled];
"resp.status_code,type='attribute'\nline_star:235,line_end:235|char_star:15,char_end:31"->"status_code,type='identifier'\nline_star:235,line_end:235|char_star:20,char_end:31";
"try:\n        flask.g.value\n    except (AttributeError, RuntimeError):\n        pass\n    else:\n        raise AssertionError('some kind of exception expected'),type='try_statement'\nline_star:238,line_end:243|char_star:4,char_end:63"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:215,line_end:243|char_star:4,char_end:63"->"try:\n        flask.g.value\n    except (AttributeError, RuntimeError):\n        pass\n    else:\n        raise AssertionError('some kind of exception expected'),type='try_statement'\nline_star:238,line_end:243|char_star:4,char_end:63";
"try,type='try'\nline_star:238,line_end:238|char_star:4,char_end:7"[shape="box",fillcolor="white",style=filled];
"try:\n        flask.g.value\n    except (AttributeError, RuntimeError):\n        pass\n    else:\n        raise AssertionError('some kind of exception expected'),type='try_statement'\nline_star:238,line_end:243|char_star:4,char_end:63"->"try,type='try'\nline_star:238,line_end:238|char_star:4,char_end:7";
"type='INFORMATION BLOCK'\nline_star:239,line_end:239|char_star:8,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"try:\n        flask.g.value\n    except (AttributeError, RuntimeError):\n        pass\n    else:\n        raise AssertionError('some kind of exception expected'),type='try_statement'\nline_star:238,line_end:243|char_star:4,char_end:63"->"type='INFORMATION BLOCK'\nline_star:239,line_end:239|char_star:8,char_end:21";
"except (AttributeError, RuntimeError):\n        pass,type='except_clause'\nline_star:240,line_end:241|char_star:4,char_end:12"[shape="box",fillcolor="white",style=filled];
"try:\n        flask.g.value\n    except (AttributeError, RuntimeError):\n        pass\n    else:\n        raise AssertionError('some kind of exception expected'),type='try_statement'\nline_star:238,line_end:243|char_star:4,char_end:63"->"except (AttributeError, RuntimeError):\n        pass,type='except_clause'\nline_star:240,line_end:241|char_star:4,char_end:12";
"except,type='except'\nline_star:240,line_end:240|char_star:4,char_end:10"[shape="box",fillcolor="white",style=filled];
"except (AttributeError, RuntimeError):\n        pass,type='except_clause'\nline_star:240,line_end:241|char_star:4,char_end:12"->"except,type='except'\nline_star:240,line_end:240|char_star:4,char_end:10";
"(AttributeError, RuntimeError),type='tuple'\nline_star:240,line_end:240|char_star:11,char_end:41"[shape="box",fillcolor="white",style=filled];
"except (AttributeError, RuntimeError):\n        pass,type='except_clause'\nline_star:240,line_end:241|char_star:4,char_end:12"->"(AttributeError, RuntimeError),type='tuple'\nline_star:240,line_end:240|char_star:11,char_end:41";
"AttributeError,type='identifier'\nline_star:240,line_end:240|char_star:12,char_end:26"[shape="point",fillcolor="#121013",style=filled];
"(AttributeError, RuntimeError),type='tuple'\nline_star:240,line_end:240|char_star:11,char_end:41"->"AttributeError,type='identifier'\nline_star:240,line_end:240|char_star:12,char_end:26";
"RuntimeError,type='identifier'\nline_star:240,line_end:240|char_star:28,char_end:40"[shape="point",fillcolor="#121013",style=filled];
"(AttributeError, RuntimeError),type='tuple'\nline_star:240,line_end:240|char_star:11,char_end:41"->"RuntimeError,type='identifier'\nline_star:240,line_end:240|char_star:28,char_end:40";
"type='INFORMATION BLOCK'\nline_star:241,line_end:241|char_star:8,char_end:12"[shape="point",fillcolor="#121013",style=filled];
"except (AttributeError, RuntimeError):\n        pass,type='except_clause'\nline_star:240,line_end:241|char_star:4,char_end:12"->"type='INFORMATION BLOCK'\nline_star:241,line_end:241|char_star:8,char_end:12";
"pass,type='pass_statement'\nline_star:241,line_end:241|char_star:8,char_end:12"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:241,line_end:241|char_star:8,char_end:12"->"pass,type='pass_statement'\nline_star:241,line_end:241|char_star:8,char_end:12";
"pass,type='pass'\nline_star:241,line_end:241|char_star:8,char_end:12"[shape="box",fillcolor="white",style=filled];
"pass,type='pass_statement'\nline_star:241,line_end:241|char_star:8,char_end:12"->"pass,type='pass'\nline_star:241,line_end:241|char_star:8,char_end:12";
"else:\n        raise AssertionError('some kind of exception expected'),type='else_clause'\nline_star:242,line_end:243|char_star:4,char_end:63"[shape="box",fillcolor="white",style=filled];
"try:\n        flask.g.value\n    except (AttributeError, RuntimeError):\n        pass\n    else:\n        raise AssertionError('some kind of exception expected'),type='try_statement'\nline_star:238,line_end:243|char_star:4,char_end:63"->"else:\n        raise AssertionError('some kind of exception expected'),type='else_clause'\nline_star:242,line_end:243|char_star:4,char_end:63";
"else,type='else'\nline_star:242,line_end:242|char_star:4,char_end:8"[shape="box",fillcolor="white",style=filled];
"else:\n        raise AssertionError('some kind of exception expected'),type='else_clause'\nline_star:242,line_end:243|char_star:4,char_end:63"->"else,type='else'\nline_star:242,line_end:242|char_star:4,char_end:8";
"type='INFORMATION BLOCK'\nline_star:243,line_end:243|char_star:8,char_end:63"[shape="point",fillcolor="#121013",style=filled];
"else:\n        raise AssertionError('some kind of exception expected'),type='else_clause'\nline_star:242,line_end:243|char_star:4,char_end:63"->"type='INFORMATION BLOCK'\nline_star:243,line_end:243|char_star:8,char_end:63";
"raise AssertionError('some kind of exception expected'),type='raise_statement'\nline_star:243,line_end:243|char_star:8,char_end:63"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:243,line_end:243|char_star:8,char_end:63"->"raise AssertionError('some kind of exception expected'),type='raise_statement'\nline_star:243,line_end:243|char_star:8,char_end:63";
"raise,type='raise'\nline_star:243,line_end:243|char_star:8,char_end:13"[shape="box",fillcolor="white",style=filled];
"raise AssertionError('some kind of exception expected'),type='raise_statement'\nline_star:243,line_end:243|char_star:8,char_end:63"->"raise,type='raise'\nline_star:243,line_end:243|char_star:8,char_end:13";
"AssertionError('some kind of exception expected'),type='call'\nline_star:243,line_end:243|char_star:14,char_end:63"[shape="box",fillcolor="white",style=filled];
"raise AssertionError('some kind of exception expected'),type='raise_statement'\nline_star:243,line_end:243|char_star:8,char_end:63"->"AssertionError('some kind of exception expected'),type='call'\nline_star:243,line_end:243|char_star:14,char_end:63";
"AssertionError,type='identifier'\nline_star:243,line_end:243|char_star:14,char_end:28"[shape="point",fillcolor="#121013",style=filled];
"AssertionError('some kind of exception expected'),type='call'\nline_star:243,line_end:243|char_star:14,char_end:63"->"AssertionError,type='identifier'\nline_star:243,line_end:243|char_star:14,char_end:28";
"('some kind of exception expected'),type='argument_list'\nline_star:243,line_end:243|char_star:28,char_end:63"[shape="box",fillcolor="white",style=filled];
"AssertionError('some kind of exception expected'),type='call'\nline_star:243,line_end:243|char_star:14,char_end:63"->"('some kind of exception expected'),type='argument_list'\nline_star:243,line_end:243|char_star:28,char_end:63";
"def test_reuse_client(client):\n    c = client\n\n    with c:\n        assert client.get('/').status_code == 404\n\n    with c:\n        assert client.get('/').status_code == 404,type='function_definition'\nline_star:246,line_end:253|char_star:0,char_end:49"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_reuse_client(client):\n    c = client\n\n    with c:\n        assert client.get('/').status_code == 404\n\n    with c:\n        assert client.get('/').status_code == 404,type='function_definition'\nline_star:246,line_end:253|char_star:0,char_end:49";
"test_reuse_client,type='identifier'\nline_star:246,line_end:246|char_star:4,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"def test_reuse_client(client):\n    c = client\n\n    with c:\n        assert client.get('/').status_code == 404\n\n    with c:\n        assert client.get('/').status_code == 404,type='function_definition'\nline_star:246,line_end:253|char_star:0,char_end:49"->"test_reuse_client,type='identifier'\nline_star:246,line_end:246|char_star:4,char_end:21";
"(client),type='parameters'\nline_star:246,line_end:246|char_star:21,char_end:29"[shape="box",fillcolor="white",style=filled];
"def test_reuse_client(client):\n    c = client\n\n    with c:\n        assert client.get('/').status_code == 404\n\n    with c:\n        assert client.get('/').status_code == 404,type='function_definition'\nline_star:246,line_end:253|char_star:0,char_end:49"->"(client),type='parameters'\nline_star:246,line_end:246|char_star:21,char_end:29";
"client,type='identifier'\nline_star:246,line_end:246|char_star:22,char_end:28"[shape="point",fillcolor="#121013",style=filled];
"(client),type='parameters'\nline_star:246,line_end:246|char_star:21,char_end:29"->"client,type='identifier'\nline_star:246,line_end:246|char_star:22,char_end:28";
"type='INFORMATION BLOCK'\nline_star:247,line_end:253|char_star:4,char_end:49"[shape="point",fillcolor="#121013",style=filled];
"def test_reuse_client(client):\n    c = client\n\n    with c:\n        assert client.get('/').status_code == 404\n\n    with c:\n        assert client.get('/').status_code == 404,type='function_definition'\nline_star:246,line_end:253|char_star:0,char_end:49"->"type='INFORMATION BLOCK'\nline_star:247,line_end:253|char_star:4,char_end:49";
"with c:\n        assert client.get('/').status_code == 404,type='with_statement'\nline_star:249,line_end:250|char_star:4,char_end:49"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:247,line_end:253|char_star:4,char_end:49"->"with c:\n        assert client.get('/').status_code == 404,type='with_statement'\nline_star:249,line_end:250|char_star:4,char_end:49";
"c,type='with_clause'\nline_star:249,line_end:249|char_star:9,char_end:10"[shape="box",fillcolor="white",style=filled];
"with c:\n        assert client.get('/').status_code == 404,type='with_statement'\nline_star:249,line_end:250|char_star:4,char_end:49"->"c,type='with_clause'\nline_star:249,line_end:249|char_star:9,char_end:10";
"type='INFORMATION BLOCK'\nline_star:250,line_end:250|char_star:8,char_end:49"[shape="point",fillcolor="#121013",style=filled];
"with c:\n        assert client.get('/').status_code == 404,type='with_statement'\nline_star:249,line_end:250|char_star:4,char_end:49"->"type='INFORMATION BLOCK'\nline_star:250,line_end:250|char_star:8,char_end:49";
"assert client.get('/').status_code == 404,type='assert_statement'\nline_star:250,line_end:250|char_star:8,char_end:49"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:250,line_end:250|char_star:8,char_end:49"->"assert client.get('/').status_code == 404,type='assert_statement'\nline_star:250,line_end:250|char_star:8,char_end:49";
"client.get('/').status_code == 404,type='comparison_operator'\nline_star:250,line_end:250|char_star:15,char_end:49"[shape="box",fillcolor="white",style=filled];
"assert client.get('/').status_code == 404,type='assert_statement'\nline_star:250,line_end:250|char_star:8,char_end:49"->"client.get('/').status_code == 404,type='comparison_operator'\nline_star:250,line_end:250|char_star:15,char_end:49";
"client.get('/').status_code,type='attribute'\nline_star:250,line_end:250|char_star:15,char_end:42"[shape="box",fillcolor="white",style=filled];
"client.get('/').status_code == 404,type='comparison_operator'\nline_star:250,line_end:250|char_star:15,char_end:49"->"client.get('/').status_code,type='attribute'\nline_star:250,line_end:250|char_star:15,char_end:42";
"client.get('/'),type='call'\nline_star:250,line_end:250|char_star:15,char_end:30"[shape="box",fillcolor="white",style=filled];
"client.get('/').status_code,type='attribute'\nline_star:250,line_end:250|char_star:15,char_end:42"->"client.get('/'),type='call'\nline_star:250,line_end:250|char_star:15,char_end:30";
"client.get,type='attribute'\nline_star:250,line_end:250|char_star:15,char_end:25"[shape="box",fillcolor="white",style=filled];
"client.get('/'),type='call'\nline_star:250,line_end:250|char_star:15,char_end:30"->"client.get,type='attribute'\nline_star:250,line_end:250|char_star:15,char_end:25";
"client,type='identifier'\nline_star:250,line_end:250|char_star:15,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"client.get,type='attribute'\nline_star:250,line_end:250|char_star:15,char_end:25"->"client,type='identifier'\nline_star:250,line_end:250|char_star:15,char_end:21";
"get,type='identifier'\nline_star:250,line_end:250|char_star:22,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"client.get,type='attribute'\nline_star:250,line_end:250|char_star:15,char_end:25"->"get,type='identifier'\nline_star:250,line_end:250|char_star:22,char_end:25";
"('/'),type='argument_list'\nline_star:250,line_end:250|char_star:25,char_end:30"[shape="box",fillcolor="white",style=filled];
"client.get('/'),type='call'\nline_star:250,line_end:250|char_star:15,char_end:30"->"('/'),type='argument_list'\nline_star:250,line_end:250|char_star:25,char_end:30";
"status_code,type='identifier'\nline_star:250,line_end:250|char_star:31,char_end:42"[shape="point",fillcolor="#121013",style=filled];
"client.get('/').status_code,type='attribute'\nline_star:250,line_end:250|char_star:15,char_end:42"->"status_code,type='identifier'\nline_star:250,line_end:250|char_star:31,char_end:42";
"with c:\n        assert client.get('/').status_code == 404,type='with_statement'\nline_star:252,line_end:253|char_star:4,char_end:49"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:247,line_end:253|char_star:4,char_end:49"->"with c:\n        assert client.get('/').status_code == 404,type='with_statement'\nline_star:252,line_end:253|char_star:4,char_end:49";
"c,type='with_clause'\nline_star:252,line_end:252|char_star:9,char_end:10"[shape="box",fillcolor="white",style=filled];
"with c:\n        assert client.get('/').status_code == 404,type='with_statement'\nline_star:252,line_end:253|char_star:4,char_end:49"->"c,type='with_clause'\nline_star:252,line_end:252|char_star:9,char_end:10";
"type='INFORMATION BLOCK'\nline_star:253,line_end:253|char_star:8,char_end:49"[shape="point",fillcolor="#121013",style=filled];
"with c:\n        assert client.get('/').status_code == 404,type='with_statement'\nline_star:252,line_end:253|char_star:4,char_end:49"->"type='INFORMATION BLOCK'\nline_star:253,line_end:253|char_star:8,char_end:49";
"assert client.get('/').status_code == 404,type='assert_statement'\nline_star:253,line_end:253|char_star:8,char_end:49"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:253,line_end:253|char_star:8,char_end:49"->"assert client.get('/').status_code == 404,type='assert_statement'\nline_star:253,line_end:253|char_star:8,char_end:49";
"client.get('/').status_code == 404,type='comparison_operator'\nline_star:253,line_end:253|char_star:15,char_end:49"[shape="box",fillcolor="white",style=filled];
"assert client.get('/').status_code == 404,type='assert_statement'\nline_star:253,line_end:253|char_star:8,char_end:49"->"client.get('/').status_code == 404,type='comparison_operator'\nline_star:253,line_end:253|char_star:15,char_end:49";
"client.get('/').status_code,type='attribute'\nline_star:253,line_end:253|char_star:15,char_end:42"[shape="box",fillcolor="white",style=filled];
"client.get('/').status_code == 404,type='comparison_operator'\nline_star:253,line_end:253|char_star:15,char_end:49"->"client.get('/').status_code,type='attribute'\nline_star:253,line_end:253|char_star:15,char_end:42";
"client.get('/'),type='call'\nline_star:253,line_end:253|char_star:15,char_end:30"[shape="box",fillcolor="white",style=filled];
"client.get('/').status_code,type='attribute'\nline_star:253,line_end:253|char_star:15,char_end:42"->"client.get('/'),type='call'\nline_star:253,line_end:253|char_star:15,char_end:30";
"client.get,type='attribute'\nline_star:253,line_end:253|char_star:15,char_end:25"[shape="box",fillcolor="white",style=filled];
"client.get('/'),type='call'\nline_star:253,line_end:253|char_star:15,char_end:30"->"client.get,type='attribute'\nline_star:253,line_end:253|char_star:15,char_end:25";
"client,type='identifier'\nline_star:253,line_end:253|char_star:15,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"client.get,type='attribute'\nline_star:253,line_end:253|char_star:15,char_end:25"->"client,type='identifier'\nline_star:253,line_end:253|char_star:15,char_end:21";
"get,type='identifier'\nline_star:253,line_end:253|char_star:22,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"client.get,type='attribute'\nline_star:253,line_end:253|char_star:15,char_end:25"->"get,type='identifier'\nline_star:253,line_end:253|char_star:22,char_end:25";
"('/'),type='argument_list'\nline_star:253,line_end:253|char_star:25,char_end:30"[shape="box",fillcolor="white",style=filled];
"client.get('/'),type='call'\nline_star:253,line_end:253|char_star:15,char_end:30"->"('/'),type='argument_list'\nline_star:253,line_end:253|char_star:25,char_end:30";
"status_code,type='identifier'\nline_star:253,line_end:253|char_star:31,char_end:42"[shape="point",fillcolor="#121013",style=filled];
"client.get('/').status_code,type='attribute'\nline_star:253,line_end:253|char_star:15,char_end:42"->"status_code,type='identifier'\nline_star:253,line_end:253|char_star:31,char_end:42";
"def test_test_client_calls_teardown_handlers(app, client):\n    called = []\n\n    @app.teardown_request\n    def remember(error):\n        called.append(error)\n\n    with client:\n        assert called == []\n        client.get('/')\n        assert called == []\n    assert called == [None]\n\n    del called[:]\n    with client:\n        assert called == []\n        client.get('/')\n        assert called == []\n        client.get('/')\n        assert called == [None]\n    assert called == [None, None],type='function_definition'\nline_star:256,line_end:276|char_star:0,char_end:33"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_test_client_calls_teardown_handlers(app, client):\n    called = []\n\n    @app.teardown_request\n    def remember(error):\n        called.append(error)\n\n    with client:\n        assert called == []\n        client.get('/')\n        assert called == []\n    assert called == [None]\n\n    del called[:]\n    with client:\n        assert called == []\n        client.get('/')\n        assert called == []\n        client.get('/')\n        assert called == [None]\n    assert called == [None, None],type='function_definition'\nline_star:256,line_end:276|char_star:0,char_end:33";
"test_test_client_calls_teardown_handlers,type='identifier'\nline_star:256,line_end:256|char_star:4,char_end:44"[shape="point",fillcolor="#121013",style=filled];
"def test_test_client_calls_teardown_handlers(app, client):\n    called = []\n\n    @app.teardown_request\n    def remember(error):\n        called.append(error)\n\n    with client:\n        assert called == []\n        client.get('/')\n        assert called == []\n    assert called == [None]\n\n    del called[:]\n    with client:\n        assert called == []\n        client.get('/')\n        assert called == []\n        client.get('/')\n        assert called == [None]\n    assert called == [None, None],type='function_definition'\nline_star:256,line_end:276|char_star:0,char_end:33"->"test_test_client_calls_teardown_handlers,type='identifier'\nline_star:256,line_end:256|char_star:4,char_end:44";
"(app, client),type='parameters'\nline_star:256,line_end:256|char_star:44,char_end:57"[shape="box",fillcolor="white",style=filled];
"def test_test_client_calls_teardown_handlers(app, client):\n    called = []\n\n    @app.teardown_request\n    def remember(error):\n        called.append(error)\n\n    with client:\n        assert called == []\n        client.get('/')\n        assert called == []\n    assert called == [None]\n\n    del called[:]\n    with client:\n        assert called == []\n        client.get('/')\n        assert called == []\n        client.get('/')\n        assert called == [None]\n    assert called == [None, None],type='function_definition'\nline_star:256,line_end:276|char_star:0,char_end:33"->"(app, client),type='parameters'\nline_star:256,line_end:256|char_star:44,char_end:57";
"app,type='identifier'\nline_star:256,line_end:256|char_star:45,char_end:48"[shape="point",fillcolor="#121013",style=filled];
"(app, client),type='parameters'\nline_star:256,line_end:256|char_star:44,char_end:57"->"app,type='identifier'\nline_star:256,line_end:256|char_star:45,char_end:48";
"client,type='identifier'\nline_star:256,line_end:256|char_star:50,char_end:56"[shape="point",fillcolor="#121013",style=filled];
"(app, client),type='parameters'\nline_star:256,line_end:256|char_star:44,char_end:57"->"client,type='identifier'\nline_star:256,line_end:256|char_star:50,char_end:56";
"type='INFORMATION BLOCK'\nline_star:257,line_end:276|char_star:4,char_end:33"[shape="point",fillcolor="#121013",style=filled];
"def test_test_client_calls_teardown_handlers(app, client):\n    called = []\n\n    @app.teardown_request\n    def remember(error):\n        called.append(error)\n\n    with client:\n        assert called == []\n        client.get('/')\n        assert called == []\n    assert called == [None]\n\n    del called[:]\n    with client:\n        assert called == []\n        client.get('/')\n        assert called == []\n        client.get('/')\n        assert called == [None]\n    assert called == [None, None],type='function_definition'\nline_star:256,line_end:276|char_star:0,char_end:33"->"type='INFORMATION BLOCK'\nline_star:257,line_end:276|char_star:4,char_end:33";
"@app.teardown_request\n    def remember(error):\n        called.append(error),type='decorated_definition'\nline_star:259,line_end:261|char_star:4,char_end:28"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:257,line_end:276|char_star:4,char_end:33"->"@app.teardown_request\n    def remember(error):\n        called.append(error),type='decorated_definition'\nline_star:259,line_end:261|char_star:4,char_end:28";
"@app.teardown_request,type='decorator'\nline_star:259,line_end:259|char_star:4,char_end:25"[shape="box",fillcolor="white",style=filled];
"@app.teardown_request\n    def remember(error):\n        called.append(error),type='decorated_definition'\nline_star:259,line_end:261|char_star:4,char_end:28"->"@app.teardown_request,type='decorator'\nline_star:259,line_end:259|char_star:4,char_end:25";
"def remember(error):\n        called.append(error),type='function_definition'\nline_star:260,line_end:261|char_star:4,char_end:28"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.teardown_request\n    def remember(error):\n        called.append(error),type='decorated_definition'\nline_star:259,line_end:261|char_star:4,char_end:28"->"def remember(error):\n        called.append(error),type='function_definition'\nline_star:260,line_end:261|char_star:4,char_end:28";
"remember,type='identifier'\nline_star:260,line_end:260|char_star:8,char_end:16"[shape="point",fillcolor="#121013",style=filled];
"def remember(error):\n        called.append(error),type='function_definition'\nline_star:260,line_end:261|char_star:4,char_end:28"->"remember,type='identifier'\nline_star:260,line_end:260|char_star:8,char_end:16";
"(error),type='parameters'\nline_star:260,line_end:260|char_star:16,char_end:23"[shape="box",fillcolor="white",style=filled];
"def remember(error):\n        called.append(error),type='function_definition'\nline_star:260,line_end:261|char_star:4,char_end:28"->"(error),type='parameters'\nline_star:260,line_end:260|char_star:16,char_end:23";
"error,type='identifier'\nline_star:260,line_end:260|char_star:17,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"(error),type='parameters'\nline_star:260,line_end:260|char_star:16,char_end:23"->"error,type='identifier'\nline_star:260,line_end:260|char_star:17,char_end:22";
"type='INFORMATION BLOCK'\nline_star:261,line_end:261|char_star:8,char_end:28"[shape="point",fillcolor="#121013",style=filled];
"def remember(error):\n        called.append(error),type='function_definition'\nline_star:260,line_end:261|char_star:4,char_end:28"->"type='INFORMATION BLOCK'\nline_star:261,line_end:261|char_star:8,char_end:28";
"with client:\n        assert called == []\n        client.get('/')\n        assert called == [],type='with_statement'\nline_star:263,line_end:266|char_star:4,char_end:27"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:257,line_end:276|char_star:4,char_end:33"->"with client:\n        assert called == []\n        client.get('/')\n        assert called == [],type='with_statement'\nline_star:263,line_end:266|char_star:4,char_end:27";
"client,type='with_clause'\nline_star:263,line_end:263|char_star:9,char_end:15"[shape="box",fillcolor="white",style=filled];
"with client:\n        assert called == []\n        client.get('/')\n        assert called == [],type='with_statement'\nline_star:263,line_end:266|char_star:4,char_end:27"->"client,type='with_clause'\nline_star:263,line_end:263|char_star:9,char_end:15";
"type='INFORMATION BLOCK'\nline_star:264,line_end:266|char_star:8,char_end:27"[shape="point",fillcolor="#121013",style=filled];
"with client:\n        assert called == []\n        client.get('/')\n        assert called == [],type='with_statement'\nline_star:263,line_end:266|char_star:4,char_end:27"->"type='INFORMATION BLOCK'\nline_star:264,line_end:266|char_star:8,char_end:27";
"assert called == [],type='assert_statement'\nline_star:264,line_end:264|char_star:8,char_end:27"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:264,line_end:266|char_star:8,char_end:27"->"assert called == [],type='assert_statement'\nline_star:264,line_end:264|char_star:8,char_end:27";
"called == [],type='comparison_operator'\nline_star:264,line_end:264|char_star:15,char_end:27"[shape="box",fillcolor="white",style=filled];
"assert called == [],type='assert_statement'\nline_star:264,line_end:264|char_star:8,char_end:27"->"called == [],type='comparison_operator'\nline_star:264,line_end:264|char_star:15,char_end:27";
"called,type='identifier'\nline_star:264,line_end:264|char_star:15,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"called == [],type='comparison_operator'\nline_star:264,line_end:264|char_star:15,char_end:27"->"called,type='identifier'\nline_star:264,line_end:264|char_star:15,char_end:21";
"assert called == [],type='assert_statement'\nline_star:266,line_end:266|char_star:8,char_end:27"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:264,line_end:266|char_star:8,char_end:27"->"assert called == [],type='assert_statement'\nline_star:266,line_end:266|char_star:8,char_end:27";
"called == [],type='comparison_operator'\nline_star:266,line_end:266|char_star:15,char_end:27"[shape="box",fillcolor="white",style=filled];
"assert called == [],type='assert_statement'\nline_star:266,line_end:266|char_star:8,char_end:27"->"called == [],type='comparison_operator'\nline_star:266,line_end:266|char_star:15,char_end:27";
"called,type='identifier'\nline_star:266,line_end:266|char_star:15,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"called == [],type='comparison_operator'\nline_star:266,line_end:266|char_star:15,char_end:27"->"called,type='identifier'\nline_star:266,line_end:266|char_star:15,char_end:21";
"assert called == [None],type='assert_statement'\nline_star:267,line_end:267|char_star:4,char_end:27"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:257,line_end:276|char_star:4,char_end:33"->"assert called == [None],type='assert_statement'\nline_star:267,line_end:267|char_star:4,char_end:27";
"called == [None],type='comparison_operator'\nline_star:267,line_end:267|char_star:11,char_end:27"[shape="box",fillcolor="white",style=filled];
"assert called == [None],type='assert_statement'\nline_star:267,line_end:267|char_star:4,char_end:27"->"called == [None],type='comparison_operator'\nline_star:267,line_end:267|char_star:11,char_end:27";
"called,type='identifier'\nline_star:267,line_end:267|char_star:11,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"called == [None],type='comparison_operator'\nline_star:267,line_end:267|char_star:11,char_end:27"->"called,type='identifier'\nline_star:267,line_end:267|char_star:11,char_end:17";
"[None],type='list'\nline_star:267,line_end:267|char_star:21,char_end:27"[shape="box",fillcolor="white",style=filled];
"called == [None],type='comparison_operator'\nline_star:267,line_end:267|char_star:11,char_end:27"->"[None],type='list'\nline_star:267,line_end:267|char_star:21,char_end:27";
"del called[:],type='delete_statement'\nline_star:269,line_end:269|char_star:4,char_end:17"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:257,line_end:276|char_star:4,char_end:33"->"del called[:],type='delete_statement'\nline_star:269,line_end:269|char_star:4,char_end:17";
"del,type='del'\nline_star:269,line_end:269|char_star:4,char_end:7"[shape="box",fillcolor="white",style=filled];
"del called[:],type='delete_statement'\nline_star:269,line_end:269|char_star:4,char_end:17"->"del,type='del'\nline_star:269,line_end:269|char_star:4,char_end:7";
"called[:],type='subscript'\nline_star:269,line_end:269|char_star:8,char_end:17"[shape="box",fillcolor="white",style=filled];
"del called[:],type='delete_statement'\nline_star:269,line_end:269|char_star:4,char_end:17"->"called[:],type='subscript'\nline_star:269,line_end:269|char_star:8,char_end:17";
"called,type='identifier'\nline_star:269,line_end:269|char_star:8,char_end:14"[shape="point",fillcolor="#121013",style=filled];
"called[:],type='subscript'\nline_star:269,line_end:269|char_star:8,char_end:17"->"called,type='identifier'\nline_star:269,line_end:269|char_star:8,char_end:14";
":,type='slice'\nline_star:269,line_end:269|char_star:15,char_end:16"[shape="box",fillcolor="white",style=filled];
"called[:],type='subscript'\nline_star:269,line_end:269|char_star:8,char_end:17"->":,type='slice'\nline_star:269,line_end:269|char_star:15,char_end:16";
"with client:\n        assert called == []\n        client.get('/')\n        assert called == []\n        client.get('/')\n        assert called == [None],type='with_statement'\nline_star:270,line_end:275|char_star:4,char_end:31"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:257,line_end:276|char_star:4,char_end:33"->"with client:\n        assert called == []\n        client.get('/')\n        assert called == []\n        client.get('/')\n        assert called == [None],type='with_statement'\nline_star:270,line_end:275|char_star:4,char_end:31";
"client,type='with_clause'\nline_star:270,line_end:270|char_star:9,char_end:15"[shape="box",fillcolor="white",style=filled];
"with client:\n        assert called == []\n        client.get('/')\n        assert called == []\n        client.get('/')\n        assert called == [None],type='with_statement'\nline_star:270,line_end:275|char_star:4,char_end:31"->"client,type='with_clause'\nline_star:270,line_end:270|char_star:9,char_end:15";
"type='INFORMATION BLOCK'\nline_star:271,line_end:275|char_star:8,char_end:31"[shape="point",fillcolor="#121013",style=filled];
"with client:\n        assert called == []\n        client.get('/')\n        assert called == []\n        client.get('/')\n        assert called == [None],type='with_statement'\nline_star:270,line_end:275|char_star:4,char_end:31"->"type='INFORMATION BLOCK'\nline_star:271,line_end:275|char_star:8,char_end:31";
"assert called == [],type='assert_statement'\nline_star:271,line_end:271|char_star:8,char_end:27"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:271,line_end:275|char_star:8,char_end:31"->"assert called == [],type='assert_statement'\nline_star:271,line_end:271|char_star:8,char_end:27";
"called == [],type='comparison_operator'\nline_star:271,line_end:271|char_star:15,char_end:27"[shape="box",fillcolor="white",style=filled];
"assert called == [],type='assert_statement'\nline_star:271,line_end:271|char_star:8,char_end:27"->"called == [],type='comparison_operator'\nline_star:271,line_end:271|char_star:15,char_end:27";
"called,type='identifier'\nline_star:271,line_end:271|char_star:15,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"called == [],type='comparison_operator'\nline_star:271,line_end:271|char_star:15,char_end:27"->"called,type='identifier'\nline_star:271,line_end:271|char_star:15,char_end:21";
"assert called == [],type='assert_statement'\nline_star:273,line_end:273|char_star:8,char_end:27"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:271,line_end:275|char_star:8,char_end:31"->"assert called == [],type='assert_statement'\nline_star:273,line_end:273|char_star:8,char_end:27";
"called == [],type='comparison_operator'\nline_star:273,line_end:273|char_star:15,char_end:27"[shape="box",fillcolor="white",style=filled];
"assert called == [],type='assert_statement'\nline_star:273,line_end:273|char_star:8,char_end:27"->"called == [],type='comparison_operator'\nline_star:273,line_end:273|char_star:15,char_end:27";
"called,type='identifier'\nline_star:273,line_end:273|char_star:15,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"called == [],type='comparison_operator'\nline_star:273,line_end:273|char_star:15,char_end:27"->"called,type='identifier'\nline_star:273,line_end:273|char_star:15,char_end:21";
"assert called == [None],type='assert_statement'\nline_star:275,line_end:275|char_star:8,char_end:31"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:271,line_end:275|char_star:8,char_end:31"->"assert called == [None],type='assert_statement'\nline_star:275,line_end:275|char_star:8,char_end:31";
"called == [None],type='comparison_operator'\nline_star:275,line_end:275|char_star:15,char_end:31"[shape="box",fillcolor="white",style=filled];
"assert called == [None],type='assert_statement'\nline_star:275,line_end:275|char_star:8,char_end:31"->"called == [None],type='comparison_operator'\nline_star:275,line_end:275|char_star:15,char_end:31";
"called,type='identifier'\nline_star:275,line_end:275|char_star:15,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"called == [None],type='comparison_operator'\nline_star:275,line_end:275|char_star:15,char_end:31"->"called,type='identifier'\nline_star:275,line_end:275|char_star:15,char_end:21";
"[None],type='list'\nline_star:275,line_end:275|char_star:25,char_end:31"[shape="box",fillcolor="white",style=filled];
"called == [None],type='comparison_operator'\nline_star:275,line_end:275|char_star:15,char_end:31"->"[None],type='list'\nline_star:275,line_end:275|char_star:25,char_end:31";
"assert called == [None, None],type='assert_statement'\nline_star:276,line_end:276|char_star:4,char_end:33"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:257,line_end:276|char_star:4,char_end:33"->"assert called == [None, None],type='assert_statement'\nline_star:276,line_end:276|char_star:4,char_end:33";
"called == [None, None],type='comparison_operator'\nline_star:276,line_end:276|char_star:11,char_end:33"[shape="box",fillcolor="white",style=filled];
"assert called == [None, None],type='assert_statement'\nline_star:276,line_end:276|char_star:4,char_end:33"->"called == [None, None],type='comparison_operator'\nline_star:276,line_end:276|char_star:11,char_end:33";
"called,type='identifier'\nline_star:276,line_end:276|char_star:11,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"called == [None, None],type='comparison_operator'\nline_star:276,line_end:276|char_star:11,char_end:33"->"called,type='identifier'\nline_star:276,line_end:276|char_star:11,char_end:17";
"[None, None],type='list'\nline_star:276,line_end:276|char_star:21,char_end:33"[shape="box",fillcolor="white",style=filled];
"called == [None, None],type='comparison_operator'\nline_star:276,line_end:276|char_star:11,char_end:33"->"[None, None],type='list'\nline_star:276,line_end:276|char_star:21,char_end:33";
"def test_full_url_request(app, client):\n    @app.route('/action', methods=['POST'])\n    def action():\n        return 'x'\n\n    with client:\n        rv = client.post('http://domain.com/action?vodka=42', data={'gin': 43})\n        assert rv.status_code == 200\n        assert 'gin' in flask.request.form\n        assert 'vodka' in flask.request.args,type='function_definition'\nline_star:279,line_end:288|char_star:0,char_end:44"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_full_url_request(app, client):\n    @app.route('/action', methods=['POST'])\n    def action():\n        return 'x'\n\n    with client:\n        rv = client.post('http://domain.com/action?vodka=42', data={'gin': 43})\n        assert rv.status_code == 200\n        assert 'gin' in flask.request.form\n        assert 'vodka' in flask.request.args,type='function_definition'\nline_star:279,line_end:288|char_star:0,char_end:44";
"test_full_url_request,type='identifier'\nline_star:279,line_end:279|char_star:4,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"def test_full_url_request(app, client):\n    @app.route('/action', methods=['POST'])\n    def action():\n        return 'x'\n\n    with client:\n        rv = client.post('http://domain.com/action?vodka=42', data={'gin': 43})\n        assert rv.status_code == 200\n        assert 'gin' in flask.request.form\n        assert 'vodka' in flask.request.args,type='function_definition'\nline_star:279,line_end:288|char_star:0,char_end:44"->"test_full_url_request,type='identifier'\nline_star:279,line_end:279|char_star:4,char_end:25";
"(app, client),type='parameters'\nline_star:279,line_end:279|char_star:25,char_end:38"[shape="box",fillcolor="white",style=filled];
"def test_full_url_request(app, client):\n    @app.route('/action', methods=['POST'])\n    def action():\n        return 'x'\n\n    with client:\n        rv = client.post('http://domain.com/action?vodka=42', data={'gin': 43})\n        assert rv.status_code == 200\n        assert 'gin' in flask.request.form\n        assert 'vodka' in flask.request.args,type='function_definition'\nline_star:279,line_end:288|char_star:0,char_end:44"->"(app, client),type='parameters'\nline_star:279,line_end:279|char_star:25,char_end:38";
"app,type='identifier'\nline_star:279,line_end:279|char_star:26,char_end:29"[shape="point",fillcolor="#121013",style=filled];
"(app, client),type='parameters'\nline_star:279,line_end:279|char_star:25,char_end:38"->"app,type='identifier'\nline_star:279,line_end:279|char_star:26,char_end:29";
"client,type='identifier'\nline_star:279,line_end:279|char_star:31,char_end:37"[shape="point",fillcolor="#121013",style=filled];
"(app, client),type='parameters'\nline_star:279,line_end:279|char_star:25,char_end:38"->"client,type='identifier'\nline_star:279,line_end:279|char_star:31,char_end:37";
"type='INFORMATION BLOCK'\nline_star:280,line_end:288|char_star:4,char_end:44"[shape="point",fillcolor="#121013",style=filled];
"def test_full_url_request(app, client):\n    @app.route('/action', methods=['POST'])\n    def action():\n        return 'x'\n\n    with client:\n        rv = client.post('http://domain.com/action?vodka=42', data={'gin': 43})\n        assert rv.status_code == 200\n        assert 'gin' in flask.request.form\n        assert 'vodka' in flask.request.args,type='function_definition'\nline_star:279,line_end:288|char_star:0,char_end:44"->"type='INFORMATION BLOCK'\nline_star:280,line_end:288|char_star:4,char_end:44";
"@app.route('/action', methods=['POST'])\n    def action():\n        return 'x',type='decorated_definition'\nline_star:280,line_end:282|char_star:4,char_end:18"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:280,line_end:288|char_star:4,char_end:44"->"@app.route('/action', methods=['POST'])\n    def action():\n        return 'x',type='decorated_definition'\nline_star:280,line_end:282|char_star:4,char_end:18";
"@app.route('/action', methods=['POST']),type='decorator'\nline_star:280,line_end:280|char_star:4,char_end:43"[shape="box",fillcolor="white",style=filled];
"@app.route('/action', methods=['POST'])\n    def action():\n        return 'x',type='decorated_definition'\nline_star:280,line_end:282|char_star:4,char_end:18"->"@app.route('/action', methods=['POST']),type='decorator'\nline_star:280,line_end:280|char_star:4,char_end:43";
"def action():\n        return 'x',type='function_definition'\nline_star:281,line_end:282|char_star:4,char_end:18"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.route('/action', methods=['POST'])\n    def action():\n        return 'x',type='decorated_definition'\nline_star:280,line_end:282|char_star:4,char_end:18"->"def action():\n        return 'x',type='function_definition'\nline_star:281,line_end:282|char_star:4,char_end:18";
"action,type='identifier'\nline_star:281,line_end:281|char_star:8,char_end:14"[shape="point",fillcolor="#121013",style=filled];
"def action():\n        return 'x',type='function_definition'\nline_star:281,line_end:282|char_star:4,char_end:18"->"action,type='identifier'\nline_star:281,line_end:281|char_star:8,char_end:14";
"type='INFORMATION BLOCK'\nline_star:282,line_end:282|char_star:8,char_end:18"[shape="point",fillcolor="#121013",style=filled];
"def action():\n        return 'x',type='function_definition'\nline_star:281,line_end:282|char_star:4,char_end:18"->"type='INFORMATION BLOCK'\nline_star:282,line_end:282|char_star:8,char_end:18";
"return 'x',type='return_statement'\nline_star:282,line_end:282|char_star:8,char_end:18"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:282,line_end:282|char_star:8,char_end:18"->"return 'x',type='return_statement'\nline_star:282,line_end:282|char_star:8,char_end:18";
"with client:\n        rv = client.post('http://domain.com/action?vodka=42', data={'gin': 43})\n        assert rv.status_code == 200\n        assert 'gin' in flask.request.form\n        assert 'vodka' in flask.request.args,type='with_statement'\nline_star:284,line_end:288|char_star:4,char_end:44"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:280,line_end:288|char_star:4,char_end:44"->"with client:\n        rv = client.post('http://domain.com/action?vodka=42', data={'gin': 43})\n        assert rv.status_code == 200\n        assert 'gin' in flask.request.form\n        assert 'vodka' in flask.request.args,type='with_statement'\nline_star:284,line_end:288|char_star:4,char_end:44";
"client,type='with_clause'\nline_star:284,line_end:284|char_star:9,char_end:15"[shape="box",fillcolor="white",style=filled];
"with client:\n        rv = client.post('http://domain.com/action?vodka=42', data={'gin': 43})\n        assert rv.status_code == 200\n        assert 'gin' in flask.request.form\n        assert 'vodka' in flask.request.args,type='with_statement'\nline_star:284,line_end:288|char_star:4,char_end:44"->"client,type='with_clause'\nline_star:284,line_end:284|char_star:9,char_end:15";
"type='INFORMATION BLOCK'\nline_star:285,line_end:288|char_star:8,char_end:44"[shape="point",fillcolor="#121013",style=filled];
"with client:\n        rv = client.post('http://domain.com/action?vodka=42', data={'gin': 43})\n        assert rv.status_code == 200\n        assert 'gin' in flask.request.form\n        assert 'vodka' in flask.request.args,type='with_statement'\nline_star:284,line_end:288|char_star:4,char_end:44"->"type='INFORMATION BLOCK'\nline_star:285,line_end:288|char_star:8,char_end:44";
"assert rv.status_code == 200,type='assert_statement'\nline_star:286,line_end:286|char_star:8,char_end:36"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:285,line_end:288|char_star:8,char_end:44"->"assert rv.status_code == 200,type='assert_statement'\nline_star:286,line_end:286|char_star:8,char_end:36";
"rv.status_code == 200,type='comparison_operator'\nline_star:286,line_end:286|char_star:15,char_end:36"[shape="box",fillcolor="white",style=filled];
"assert rv.status_code == 200,type='assert_statement'\nline_star:286,line_end:286|char_star:8,char_end:36"->"rv.status_code == 200,type='comparison_operator'\nline_star:286,line_end:286|char_star:15,char_end:36";
"rv.status_code,type='attribute'\nline_star:286,line_end:286|char_star:15,char_end:29"[shape="box",fillcolor="white",style=filled];
"rv.status_code == 200,type='comparison_operator'\nline_star:286,line_end:286|char_star:15,char_end:36"->"rv.status_code,type='attribute'\nline_star:286,line_end:286|char_star:15,char_end:29";
"rv,type='identifier'\nline_star:286,line_end:286|char_star:15,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"rv.status_code,type='attribute'\nline_star:286,line_end:286|char_star:15,char_end:29"->"rv,type='identifier'\nline_star:286,line_end:286|char_star:15,char_end:17";
"status_code,type='identifier'\nline_star:286,line_end:286|char_star:18,char_end:29"[shape="point",fillcolor="#121013",style=filled];
"rv.status_code,type='attribute'\nline_star:286,line_end:286|char_star:15,char_end:29"->"status_code,type='identifier'\nline_star:286,line_end:286|char_star:18,char_end:29";
"assert 'gin' in flask.request.form,type='assert_statement'\nline_star:287,line_end:287|char_star:8,char_end:42"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:285,line_end:288|char_star:8,char_end:44"->"assert 'gin' in flask.request.form,type='assert_statement'\nline_star:287,line_end:287|char_star:8,char_end:42";
"'gin' in flask.request.form,type='comparison_operator'\nline_star:287,line_end:287|char_star:15,char_end:42"[shape="box",fillcolor="white",style=filled];
"assert 'gin' in flask.request.form,type='assert_statement'\nline_star:287,line_end:287|char_star:8,char_end:42"->"'gin' in flask.request.form,type='comparison_operator'\nline_star:287,line_end:287|char_star:15,char_end:42";
"flask.request.form,type='attribute'\nline_star:287,line_end:287|char_star:24,char_end:42"[shape="box",fillcolor="white",style=filled];
"'gin' in flask.request.form,type='comparison_operator'\nline_star:287,line_end:287|char_star:15,char_end:42"->"flask.request.form,type='attribute'\nline_star:287,line_end:287|char_star:24,char_end:42";
"flask.request,type='attribute'\nline_star:287,line_end:287|char_star:24,char_end:37"[shape="box",fillcolor="white",style=filled];
"flask.request.form,type='attribute'\nline_star:287,line_end:287|char_star:24,char_end:42"->"flask.request,type='attribute'\nline_star:287,line_end:287|char_star:24,char_end:37";
"flask,type='identifier'\nline_star:287,line_end:287|char_star:24,char_end:29"[shape="point",fillcolor="#121013",style=filled];
"flask.request,type='attribute'\nline_star:287,line_end:287|char_star:24,char_end:37"->"flask,type='identifier'\nline_star:287,line_end:287|char_star:24,char_end:29";
"request,type='identifier'\nline_star:287,line_end:287|char_star:30,char_end:37"[shape="point",fillcolor="#121013",style=filled];
"flask.request,type='attribute'\nline_star:287,line_end:287|char_star:24,char_end:37"->"request,type='identifier'\nline_star:287,line_end:287|char_star:30,char_end:37";
"form,type='identifier'\nline_star:287,line_end:287|char_star:38,char_end:42"[shape="point",fillcolor="#121013",style=filled];
"flask.request.form,type='attribute'\nline_star:287,line_end:287|char_star:24,char_end:42"->"form,type='identifier'\nline_star:287,line_end:287|char_star:38,char_end:42";
"assert 'vodka' in flask.request.args,type='assert_statement'\nline_star:288,line_end:288|char_star:8,char_end:44"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:285,line_end:288|char_star:8,char_end:44"->"assert 'vodka' in flask.request.args,type='assert_statement'\nline_star:288,line_end:288|char_star:8,char_end:44";
"'vodka' in flask.request.args,type='comparison_operator'\nline_star:288,line_end:288|char_star:15,char_end:44"[shape="box",fillcolor="white",style=filled];
"assert 'vodka' in flask.request.args,type='assert_statement'\nline_star:288,line_end:288|char_star:8,char_end:44"->"'vodka' in flask.request.args,type='comparison_operator'\nline_star:288,line_end:288|char_star:15,char_end:44";
"flask.request.args,type='attribute'\nline_star:288,line_end:288|char_star:26,char_end:44"[shape="box",fillcolor="white",style=filled];
"'vodka' in flask.request.args,type='comparison_operator'\nline_star:288,line_end:288|char_star:15,char_end:44"->"flask.request.args,type='attribute'\nline_star:288,line_end:288|char_star:26,char_end:44";
"flask.request,type='attribute'\nline_star:288,line_end:288|char_star:26,char_end:39"[shape="box",fillcolor="white",style=filled];
"flask.request.args,type='attribute'\nline_star:288,line_end:288|char_star:26,char_end:44"->"flask.request,type='attribute'\nline_star:288,line_end:288|char_star:26,char_end:39";
"flask,type='identifier'\nline_star:288,line_end:288|char_star:26,char_end:31"[shape="point",fillcolor="#121013",style=filled];
"flask.request,type='attribute'\nline_star:288,line_end:288|char_star:26,char_end:39"->"flask,type='identifier'\nline_star:288,line_end:288|char_star:26,char_end:31";
"request,type='identifier'\nline_star:288,line_end:288|char_star:32,char_end:39"[shape="point",fillcolor="#121013",style=filled];
"flask.request,type='attribute'\nline_star:288,line_end:288|char_star:26,char_end:39"->"request,type='identifier'\nline_star:288,line_end:288|char_star:32,char_end:39";
"args,type='identifier'\nline_star:288,line_end:288|char_star:40,char_end:44"[shape="point",fillcolor="#121013",style=filled];
"flask.request.args,type='attribute'\nline_star:288,line_end:288|char_star:26,char_end:44"->"args,type='identifier'\nline_star:288,line_end:288|char_star:40,char_end:44";
"def test_json_request_and_response(app, client):\n    @app.route('/echo', methods=['POST'])\n    def echo():\n        return jsonify(flask.request.get_json())\n\n    with client:\n        json_data = {'drink': {'gin': 1, 'tonic': True}, 'price': 10}\n        rv = client.post('/echo', json=json_data)\n\n        # Request should be in JSON\n        assert flask.request.is_json\n        assert flask.request.get_json() == json_data\n\n        # Response should be in JSON\n        assert rv.status_code == 200\n        assert rv.is_json\n        assert rv.get_json() == json_data,type='function_definition'\nline_star:291,line_end:307|char_star:0,char_end:41"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_json_request_and_response(app, client):\n    @app.route('/echo', methods=['POST'])\n    def echo():\n        return jsonify(flask.request.get_json())\n\n    with client:\n        json_data = {'drink': {'gin': 1, 'tonic': True}, 'price': 10}\n        rv = client.post('/echo', json=json_data)\n\n        # Request should be in JSON\n        assert flask.request.is_json\n        assert flask.request.get_json() == json_data\n\n        # Response should be in JSON\n        assert rv.status_code == 200\n        assert rv.is_json\n        assert rv.get_json() == json_data,type='function_definition'\nline_star:291,line_end:307|char_star:0,char_end:41";
"test_json_request_and_response,type='identifier'\nline_star:291,line_end:291|char_star:4,char_end:34"[shape="point",fillcolor="#121013",style=filled];
"def test_json_request_and_response(app, client):\n    @app.route('/echo', methods=['POST'])\n    def echo():\n        return jsonify(flask.request.get_json())\n\n    with client:\n        json_data = {'drink': {'gin': 1, 'tonic': True}, 'price': 10}\n        rv = client.post('/echo', json=json_data)\n\n        # Request should be in JSON\n        assert flask.request.is_json\n        assert flask.request.get_json() == json_data\n\n        # Response should be in JSON\n        assert rv.status_code == 200\n        assert rv.is_json\n        assert rv.get_json() == json_data,type='function_definition'\nline_star:291,line_end:307|char_star:0,char_end:41"->"test_json_request_and_response,type='identifier'\nline_star:291,line_end:291|char_star:4,char_end:34";
"(app, client),type='parameters'\nline_star:291,line_end:291|char_star:34,char_end:47"[shape="box",fillcolor="white",style=filled];
"def test_json_request_and_response(app, client):\n    @app.route('/echo', methods=['POST'])\n    def echo():\n        return jsonify(flask.request.get_json())\n\n    with client:\n        json_data = {'drink': {'gin': 1, 'tonic': True}, 'price': 10}\n        rv = client.post('/echo', json=json_data)\n\n        # Request should be in JSON\n        assert flask.request.is_json\n        assert flask.request.get_json() == json_data\n\n        # Response should be in JSON\n        assert rv.status_code == 200\n        assert rv.is_json\n        assert rv.get_json() == json_data,type='function_definition'\nline_star:291,line_end:307|char_star:0,char_end:41"->"(app, client),type='parameters'\nline_star:291,line_end:291|char_star:34,char_end:47";
"app,type='identifier'\nline_star:291,line_end:291|char_star:35,char_end:38"[shape="point",fillcolor="#121013",style=filled];
"(app, client),type='parameters'\nline_star:291,line_end:291|char_star:34,char_end:47"->"app,type='identifier'\nline_star:291,line_end:291|char_star:35,char_end:38";
"client,type='identifier'\nline_star:291,line_end:291|char_star:40,char_end:46"[shape="point",fillcolor="#121013",style=filled];
"(app, client),type='parameters'\nline_star:291,line_end:291|char_star:34,char_end:47"->"client,type='identifier'\nline_star:291,line_end:291|char_star:40,char_end:46";
"type='INFORMATION BLOCK'\nline_star:292,line_end:307|char_star:4,char_end:41"[shape="point",fillcolor="#121013",style=filled];
"def test_json_request_and_response(app, client):\n    @app.route('/echo', methods=['POST'])\n    def echo():\n        return jsonify(flask.request.get_json())\n\n    with client:\n        json_data = {'drink': {'gin': 1, 'tonic': True}, 'price': 10}\n        rv = client.post('/echo', json=json_data)\n\n        # Request should be in JSON\n        assert flask.request.is_json\n        assert flask.request.get_json() == json_data\n\n        # Response should be in JSON\n        assert rv.status_code == 200\n        assert rv.is_json\n        assert rv.get_json() == json_data,type='function_definition'\nline_star:291,line_end:307|char_star:0,char_end:41"->"type='INFORMATION BLOCK'\nline_star:292,line_end:307|char_star:4,char_end:41";
"@app.route('/echo', methods=['POST'])\n    def echo():\n        return jsonify(flask.request.get_json()),type='decorated_definition'\nline_star:292,line_end:294|char_star:4,char_end:48"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:292,line_end:307|char_star:4,char_end:41"->"@app.route('/echo', methods=['POST'])\n    def echo():\n        return jsonify(flask.request.get_json()),type='decorated_definition'\nline_star:292,line_end:294|char_star:4,char_end:48";
"@app.route('/echo', methods=['POST']),type='decorator'\nline_star:292,line_end:292|char_star:4,char_end:41"[shape="box",fillcolor="white",style=filled];
"@app.route('/echo', methods=['POST'])\n    def echo():\n        return jsonify(flask.request.get_json()),type='decorated_definition'\nline_star:292,line_end:294|char_star:4,char_end:48"->"@app.route('/echo', methods=['POST']),type='decorator'\nline_star:292,line_end:292|char_star:4,char_end:41";
"def echo():\n        return jsonify(flask.request.get_json()),type='function_definition'\nline_star:293,line_end:294|char_star:4,char_end:48"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.route('/echo', methods=['POST'])\n    def echo():\n        return jsonify(flask.request.get_json()),type='decorated_definition'\nline_star:292,line_end:294|char_star:4,char_end:48"->"def echo():\n        return jsonify(flask.request.get_json()),type='function_definition'\nline_star:293,line_end:294|char_star:4,char_end:48";
"echo,type='identifier'\nline_star:293,line_end:293|char_star:8,char_end:12"[shape="point",fillcolor="#121013",style=filled];
"def echo():\n        return jsonify(flask.request.get_json()),type='function_definition'\nline_star:293,line_end:294|char_star:4,char_end:48"->"echo,type='identifier'\nline_star:293,line_end:293|char_star:8,char_end:12";
"type='INFORMATION BLOCK'\nline_star:294,line_end:294|char_star:8,char_end:48"[shape="point",fillcolor="#121013",style=filled];
"def echo():\n        return jsonify(flask.request.get_json()),type='function_definition'\nline_star:293,line_end:294|char_star:4,char_end:48"->"type='INFORMATION BLOCK'\nline_star:294,line_end:294|char_star:8,char_end:48";
"return jsonify(flask.request.get_json()),type='return_statement'\nline_star:294,line_end:294|char_star:8,char_end:48"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:294,line_end:294|char_star:8,char_end:48"->"return jsonify(flask.request.get_json()),type='return_statement'\nline_star:294,line_end:294|char_star:8,char_end:48";
"with client:\n        json_data = {'drink': {'gin': 1, 'tonic': True}, 'price': 10}\n        rv = client.post('/echo', json=json_data)\n\n        # Request should be in JSON\n        assert flask.request.is_json\n        assert flask.request.get_json() == json_data\n\n        # Response should be in JSON\n        assert rv.status_code == 200\n        assert rv.is_json\n        assert rv.get_json() == json_data,type='with_statement'\nline_star:296,line_end:307|char_star:4,char_end:41"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:292,line_end:307|char_star:4,char_end:41"->"with client:\n        json_data = {'drink': {'gin': 1, 'tonic': True}, 'price': 10}\n        rv = client.post('/echo', json=json_data)\n\n        # Request should be in JSON\n        assert flask.request.is_json\n        assert flask.request.get_json() == json_data\n\n        # Response should be in JSON\n        assert rv.status_code == 200\n        assert rv.is_json\n        assert rv.get_json() == json_data,type='with_statement'\nline_star:296,line_end:307|char_star:4,char_end:41";
"client,type='with_clause'\nline_star:296,line_end:296|char_star:9,char_end:15"[shape="box",fillcolor="white",style=filled];
"with client:\n        json_data = {'drink': {'gin': 1, 'tonic': True}, 'price': 10}\n        rv = client.post('/echo', json=json_data)\n\n        # Request should be in JSON\n        assert flask.request.is_json\n        assert flask.request.get_json() == json_data\n\n        # Response should be in JSON\n        assert rv.status_code == 200\n        assert rv.is_json\n        assert rv.get_json() == json_data,type='with_statement'\nline_star:296,line_end:307|char_star:4,char_end:41"->"client,type='with_clause'\nline_star:296,line_end:296|char_star:9,char_end:15";
"type='INFORMATION BLOCK'\nline_star:297,line_end:307|char_star:8,char_end:41"[shape="point",fillcolor="#121013",style=filled];
"with client:\n        json_data = {'drink': {'gin': 1, 'tonic': True}, 'price': 10}\n        rv = client.post('/echo', json=json_data)\n\n        # Request should be in JSON\n        assert flask.request.is_json\n        assert flask.request.get_json() == json_data\n\n        # Response should be in JSON\n        assert rv.status_code == 200\n        assert rv.is_json\n        assert rv.get_json() == json_data,type='with_statement'\nline_star:296,line_end:307|char_star:4,char_end:41"->"type='INFORMATION BLOCK'\nline_star:297,line_end:307|char_star:8,char_end:41";
"# Request should be in JSON,type='comment'\nline_star:300,line_end:300|char_star:8,char_end:35"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:297,line_end:307|char_star:8,char_end:41"->"# Request should be in JSON,type='comment'\nline_star:300,line_end:300|char_star:8,char_end:35";
"assert flask.request.is_json,type='assert_statement'\nline_star:301,line_end:301|char_star:8,char_end:36"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:297,line_end:307|char_star:8,char_end:41"->"assert flask.request.is_json,type='assert_statement'\nline_star:301,line_end:301|char_star:8,char_end:36";
"flask.request.is_json,type='attribute'\nline_star:301,line_end:301|char_star:15,char_end:36"[shape="box",fillcolor="white",style=filled];
"assert flask.request.is_json,type='assert_statement'\nline_star:301,line_end:301|char_star:8,char_end:36"->"flask.request.is_json,type='attribute'\nline_star:301,line_end:301|char_star:15,char_end:36";
"flask.request,type='attribute'\nline_star:301,line_end:301|char_star:15,char_end:28"[shape="box",fillcolor="white",style=filled];
"flask.request.is_json,type='attribute'\nline_star:301,line_end:301|char_star:15,char_end:36"->"flask.request,type='attribute'\nline_star:301,line_end:301|char_star:15,char_end:28";
"flask,type='identifier'\nline_star:301,line_end:301|char_star:15,char_end:20"[shape="point",fillcolor="#121013",style=filled];
"flask.request,type='attribute'\nline_star:301,line_end:301|char_star:15,char_end:28"->"flask,type='identifier'\nline_star:301,line_end:301|char_star:15,char_end:20";
"request,type='identifier'\nline_star:301,line_end:301|char_star:21,char_end:28"[shape="point",fillcolor="#121013",style=filled];
"flask.request,type='attribute'\nline_star:301,line_end:301|char_star:15,char_end:28"->"request,type='identifier'\nline_star:301,line_end:301|char_star:21,char_end:28";
"is_json,type='identifier'\nline_star:301,line_end:301|char_star:29,char_end:36"[shape="point",fillcolor="#121013",style=filled];
"flask.request.is_json,type='attribute'\nline_star:301,line_end:301|char_star:15,char_end:36"->"is_json,type='identifier'\nline_star:301,line_end:301|char_star:29,char_end:36";
"assert flask.request.get_json() == json_data,type='assert_statement'\nline_star:302,line_end:302|char_star:8,char_end:52"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:297,line_end:307|char_star:8,char_end:41"->"assert flask.request.get_json() == json_data,type='assert_statement'\nline_star:302,line_end:302|char_star:8,char_end:52";
"flask.request.get_json() == json_data,type='comparison_operator'\nline_star:302,line_end:302|char_star:15,char_end:52"[shape="box",fillcolor="white",style=filled];
"assert flask.request.get_json() == json_data,type='assert_statement'\nline_star:302,line_end:302|char_star:8,char_end:52"->"flask.request.get_json() == json_data,type='comparison_operator'\nline_star:302,line_end:302|char_star:15,char_end:52";
"flask.request.get_json(),type='call'\nline_star:302,line_end:302|char_star:15,char_end:39"[shape="box",fillcolor="white",style=filled];
"flask.request.get_json() == json_data,type='comparison_operator'\nline_star:302,line_end:302|char_star:15,char_end:52"->"flask.request.get_json(),type='call'\nline_star:302,line_end:302|char_star:15,char_end:39";
"flask.request.get_json,type='attribute'\nline_star:302,line_end:302|char_star:15,char_end:37"[shape="box",fillcolor="white",style=filled];
"flask.request.get_json(),type='call'\nline_star:302,line_end:302|char_star:15,char_end:39"->"flask.request.get_json,type='attribute'\nline_star:302,line_end:302|char_star:15,char_end:37";
"flask.request,type='attribute'\nline_star:302,line_end:302|char_star:15,char_end:28"[shape="box",fillcolor="white",style=filled];
"flask.request.get_json,type='attribute'\nline_star:302,line_end:302|char_star:15,char_end:37"->"flask.request,type='attribute'\nline_star:302,line_end:302|char_star:15,char_end:28";
"flask,type='identifier'\nline_star:302,line_end:302|char_star:15,char_end:20"[shape="point",fillcolor="#121013",style=filled];
"flask.request,type='attribute'\nline_star:302,line_end:302|char_star:15,char_end:28"->"flask,type='identifier'\nline_star:302,line_end:302|char_star:15,char_end:20";
"request,type='identifier'\nline_star:302,line_end:302|char_star:21,char_end:28"[shape="point",fillcolor="#121013",style=filled];
"flask.request,type='attribute'\nline_star:302,line_end:302|char_star:15,char_end:28"->"request,type='identifier'\nline_star:302,line_end:302|char_star:21,char_end:28";
"get_json,type='identifier'\nline_star:302,line_end:302|char_star:29,char_end:37"[shape="point",fillcolor="#121013",style=filled];
"flask.request.get_json,type='attribute'\nline_star:302,line_end:302|char_star:15,char_end:37"->"get_json,type='identifier'\nline_star:302,line_end:302|char_star:29,char_end:37";
"json_data,type='identifier'\nline_star:302,line_end:302|char_star:43,char_end:52"[shape="point",fillcolor="#121013",style=filled];
"flask.request.get_json() == json_data,type='comparison_operator'\nline_star:302,line_end:302|char_star:15,char_end:52"->"json_data,type='identifier'\nline_star:302,line_end:302|char_star:43,char_end:52";
"# Response should be in JSON,type='comment'\nline_star:304,line_end:304|char_star:8,char_end:36"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:297,line_end:307|char_star:8,char_end:41"->"# Response should be in JSON,type='comment'\nline_star:304,line_end:304|char_star:8,char_end:36";
"assert rv.status_code == 200,type='assert_statement'\nline_star:305,line_end:305|char_star:8,char_end:36"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:297,line_end:307|char_star:8,char_end:41"->"assert rv.status_code == 200,type='assert_statement'\nline_star:305,line_end:305|char_star:8,char_end:36";
"rv.status_code == 200,type='comparison_operator'\nline_star:305,line_end:305|char_star:15,char_end:36"[shape="box",fillcolor="white",style=filled];
"assert rv.status_code == 200,type='assert_statement'\nline_star:305,line_end:305|char_star:8,char_end:36"->"rv.status_code == 200,type='comparison_operator'\nline_star:305,line_end:305|char_star:15,char_end:36";
"rv.status_code,type='attribute'\nline_star:305,line_end:305|char_star:15,char_end:29"[shape="box",fillcolor="white",style=filled];
"rv.status_code == 200,type='comparison_operator'\nline_star:305,line_end:305|char_star:15,char_end:36"->"rv.status_code,type='attribute'\nline_star:305,line_end:305|char_star:15,char_end:29";
"rv,type='identifier'\nline_star:305,line_end:305|char_star:15,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"rv.status_code,type='attribute'\nline_star:305,line_end:305|char_star:15,char_end:29"->"rv,type='identifier'\nline_star:305,line_end:305|char_star:15,char_end:17";
"status_code,type='identifier'\nline_star:305,line_end:305|char_star:18,char_end:29"[shape="point",fillcolor="#121013",style=filled];
"rv.status_code,type='attribute'\nline_star:305,line_end:305|char_star:15,char_end:29"->"status_code,type='identifier'\nline_star:305,line_end:305|char_star:18,char_end:29";
"assert rv.is_json,type='assert_statement'\nline_star:306,line_end:306|char_star:8,char_end:25"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:297,line_end:307|char_star:8,char_end:41"->"assert rv.is_json,type='assert_statement'\nline_star:306,line_end:306|char_star:8,char_end:25";
"rv.is_json,type='attribute'\nline_star:306,line_end:306|char_star:15,char_end:25"[shape="box",fillcolor="white",style=filled];
"assert rv.is_json,type='assert_statement'\nline_star:306,line_end:306|char_star:8,char_end:25"->"rv.is_json,type='attribute'\nline_star:306,line_end:306|char_star:15,char_end:25";
"rv,type='identifier'\nline_star:306,line_end:306|char_star:15,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"rv.is_json,type='attribute'\nline_star:306,line_end:306|char_star:15,char_end:25"->"rv,type='identifier'\nline_star:306,line_end:306|char_star:15,char_end:17";
"is_json,type='identifier'\nline_star:306,line_end:306|char_star:18,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"rv.is_json,type='attribute'\nline_star:306,line_end:306|char_star:15,char_end:25"->"is_json,type='identifier'\nline_star:306,line_end:306|char_star:18,char_end:25";
"assert rv.get_json() == json_data,type='assert_statement'\nline_star:307,line_end:307|char_star:8,char_end:41"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:297,line_end:307|char_star:8,char_end:41"->"assert rv.get_json() == json_data,type='assert_statement'\nline_star:307,line_end:307|char_star:8,char_end:41";
"rv.get_json() == json_data,type='comparison_operator'\nline_star:307,line_end:307|char_star:15,char_end:41"[shape="box",fillcolor="white",style=filled];
"assert rv.get_json() == json_data,type='assert_statement'\nline_star:307,line_end:307|char_star:8,char_end:41"->"rv.get_json() == json_data,type='comparison_operator'\nline_star:307,line_end:307|char_star:15,char_end:41";
"rv.get_json(),type='call'\nline_star:307,line_end:307|char_star:15,char_end:28"[shape="box",fillcolor="white",style=filled];
"rv.get_json() == json_data,type='comparison_operator'\nline_star:307,line_end:307|char_star:15,char_end:41"->"rv.get_json(),type='call'\nline_star:307,line_end:307|char_star:15,char_end:28";
"rv.get_json,type='attribute'\nline_star:307,line_end:307|char_star:15,char_end:26"[shape="box",fillcolor="white",style=filled];
"rv.get_json(),type='call'\nline_star:307,line_end:307|char_star:15,char_end:28"->"rv.get_json,type='attribute'\nline_star:307,line_end:307|char_star:15,char_end:26";
"rv,type='identifier'\nline_star:307,line_end:307|char_star:15,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"rv.get_json,type='attribute'\nline_star:307,line_end:307|char_star:15,char_end:26"->"rv,type='identifier'\nline_star:307,line_end:307|char_star:15,char_end:17";
"get_json,type='identifier'\nline_star:307,line_end:307|char_star:18,char_end:26"[shape="point",fillcolor="#121013",style=filled];
"rv.get_json,type='attribute'\nline_star:307,line_end:307|char_star:15,char_end:26"->"get_json,type='identifier'\nline_star:307,line_end:307|char_star:18,char_end:26";
"json_data,type='identifier'\nline_star:307,line_end:307|char_star:32,char_end:41"[shape="point",fillcolor="#121013",style=filled];
"rv.get_json() == json_data,type='comparison_operator'\nline_star:307,line_end:307|char_star:15,char_end:41"->"json_data,type='identifier'\nline_star:307,line_end:307|char_star:32,char_end:41";
"@pytest.mark.skipif(blinker is None, reason='blinker is not installed')\ndef test_client_json_no_app_context(app, client):\n    @app.route('/hello', methods=['POST'])\n    def hello():\n        return f'Hello, {flask.request.json['name']}!'\n\n    class Namespace:\n        count = 0\n\n        def add(self, app):\n            self.count += 1\n\n    ns = Namespace()\n\n    with appcontext_popped.connected_to(ns.add, app):\n        rv = client.post('/hello', json={'name': 'Flask'})\n\n    assert rv.get_data(as_text=True) == 'Hello, Flask!'\n    assert ns.count == 1,type='decorated_definition'\nline_star:310,line_end:328|char_star:0,char_end:24"[shape="box",fillcolor="#c8c6a7",style=filled];
"MODULE"->"@pytest.mark.skipif(blinker is None, reason='blinker is not installed')\ndef test_client_json_no_app_context(app, client):\n    @app.route('/hello', methods=['POST'])\n    def hello():\n        return f'Hello, {flask.request.json['name']}!'\n\n    class Namespace:\n        count = 0\n\n        def add(self, app):\n            self.count += 1\n\n    ns = Namespace()\n\n    with appcontext_popped.connected_to(ns.add, app):\n        rv = client.post('/hello', json={'name': 'Flask'})\n\n    assert rv.get_data(as_text=True) == 'Hello, Flask!'\n    assert ns.count == 1,type='decorated_definition'\nline_star:310,line_end:328|char_star:0,char_end:24";
"@pytest.mark.skipif(blinker is None, reason='blinker is not installed'),type='decorator'\nline_star:310,line_end:310|char_star:0,char_end:71"[shape="box",fillcolor="white",style=filled];
"@pytest.mark.skipif(blinker is None, reason='blinker is not installed')\ndef test_client_json_no_app_context(app, client):\n    @app.route('/hello', methods=['POST'])\n    def hello():\n        return f'Hello, {flask.request.json['name']}!'\n\n    class Namespace:\n        count = 0\n\n        def add(self, app):\n            self.count += 1\n\n    ns = Namespace()\n\n    with appcontext_popped.connected_to(ns.add, app):\n        rv = client.post('/hello', json={'name': 'Flask'})\n\n    assert rv.get_data(as_text=True) == 'Hello, Flask!'\n    assert ns.count == 1,type='decorated_definition'\nline_star:310,line_end:328|char_star:0,char_end:24"->"@pytest.mark.skipif(blinker is None, reason='blinker is not installed'),type='decorator'\nline_star:310,line_end:310|char_star:0,char_end:71";
"def test_client_json_no_app_context(app, client):\n    @app.route('/hello', methods=['POST'])\n    def hello():\n        return f'Hello, {flask.request.json['name']}!'\n\n    class Namespace:\n        count = 0\n\n        def add(self, app):\n            self.count += 1\n\n    ns = Namespace()\n\n    with appcontext_popped.connected_to(ns.add, app):\n        rv = client.post('/hello', json={'name': 'Flask'})\n\n    assert rv.get_data(as_text=True) == 'Hello, Flask!'\n    assert ns.count == 1,type='function_definition'\nline_star:311,line_end:328|char_star:0,char_end:24"[shape="box",fillcolor="#cee6b4",style=filled];
"@pytest.mark.skipif(blinker is None, reason='blinker is not installed')\ndef test_client_json_no_app_context(app, client):\n    @app.route('/hello', methods=['POST'])\n    def hello():\n        return f'Hello, {flask.request.json['name']}!'\n\n    class Namespace:\n        count = 0\n\n        def add(self, app):\n            self.count += 1\n\n    ns = Namespace()\n\n    with appcontext_popped.connected_to(ns.add, app):\n        rv = client.post('/hello', json={'name': 'Flask'})\n\n    assert rv.get_data(as_text=True) == 'Hello, Flask!'\n    assert ns.count == 1,type='decorated_definition'\nline_star:310,line_end:328|char_star:0,char_end:24"->"def test_client_json_no_app_context(app, client):\n    @app.route('/hello', methods=['POST'])\n    def hello():\n        return f'Hello, {flask.request.json['name']}!'\n\n    class Namespace:\n        count = 0\n\n        def add(self, app):\n            self.count += 1\n\n    ns = Namespace()\n\n    with appcontext_popped.connected_to(ns.add, app):\n        rv = client.post('/hello', json={'name': 'Flask'})\n\n    assert rv.get_data(as_text=True) == 'Hello, Flask!'\n    assert ns.count == 1,type='function_definition'\nline_star:311,line_end:328|char_star:0,char_end:24";
"test_client_json_no_app_context,type='identifier'\nline_star:311,line_end:311|char_star:4,char_end:35"[shape="point",fillcolor="#121013",style=filled];
"def test_client_json_no_app_context(app, client):\n    @app.route('/hello', methods=['POST'])\n    def hello():\n        return f'Hello, {flask.request.json['name']}!'\n\n    class Namespace:\n        count = 0\n\n        def add(self, app):\n            self.count += 1\n\n    ns = Namespace()\n\n    with appcontext_popped.connected_to(ns.add, app):\n        rv = client.post('/hello', json={'name': 'Flask'})\n\n    assert rv.get_data(as_text=True) == 'Hello, Flask!'\n    assert ns.count == 1,type='function_definition'\nline_star:311,line_end:328|char_star:0,char_end:24"->"test_client_json_no_app_context,type='identifier'\nline_star:311,line_end:311|char_star:4,char_end:35";
"(app, client),type='parameters'\nline_star:311,line_end:311|char_star:35,char_end:48"[shape="box",fillcolor="white",style=filled];
"def test_client_json_no_app_context(app, client):\n    @app.route('/hello', methods=['POST'])\n    def hello():\n        return f'Hello, {flask.request.json['name']}!'\n\n    class Namespace:\n        count = 0\n\n        def add(self, app):\n            self.count += 1\n\n    ns = Namespace()\n\n    with appcontext_popped.connected_to(ns.add, app):\n        rv = client.post('/hello', json={'name': 'Flask'})\n\n    assert rv.get_data(as_text=True) == 'Hello, Flask!'\n    assert ns.count == 1,type='function_definition'\nline_star:311,line_end:328|char_star:0,char_end:24"->"(app, client),type='parameters'\nline_star:311,line_end:311|char_star:35,char_end:48";
"app,type='identifier'\nline_star:311,line_end:311|char_star:36,char_end:39"[shape="point",fillcolor="#121013",style=filled];
"(app, client),type='parameters'\nline_star:311,line_end:311|char_star:35,char_end:48"->"app,type='identifier'\nline_star:311,line_end:311|char_star:36,char_end:39";
"client,type='identifier'\nline_star:311,line_end:311|char_star:41,char_end:47"[shape="point",fillcolor="#121013",style=filled];
"(app, client),type='parameters'\nline_star:311,line_end:311|char_star:35,char_end:48"->"client,type='identifier'\nline_star:311,line_end:311|char_star:41,char_end:47";
"type='INFORMATION BLOCK'\nline_star:312,line_end:328|char_star:4,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"def test_client_json_no_app_context(app, client):\n    @app.route('/hello', methods=['POST'])\n    def hello():\n        return f'Hello, {flask.request.json['name']}!'\n\n    class Namespace:\n        count = 0\n\n        def add(self, app):\n            self.count += 1\n\n    ns = Namespace()\n\n    with appcontext_popped.connected_to(ns.add, app):\n        rv = client.post('/hello', json={'name': 'Flask'})\n\n    assert rv.get_data(as_text=True) == 'Hello, Flask!'\n    assert ns.count == 1,type='function_definition'\nline_star:311,line_end:328|char_star:0,char_end:24"->"type='INFORMATION BLOCK'\nline_star:312,line_end:328|char_star:4,char_end:24";
"@app.route('/hello', methods=['POST'])\n    def hello():\n        return f'Hello, {flask.request.json['name']}!',type='decorated_definition'\nline_star:312,line_end:314|char_star:4,char_end:54"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:312,line_end:328|char_star:4,char_end:24"->"@app.route('/hello', methods=['POST'])\n    def hello():\n        return f'Hello, {flask.request.json['name']}!',type='decorated_definition'\nline_star:312,line_end:314|char_star:4,char_end:54";
"@app.route('/hello', methods=['POST']),type='decorator'\nline_star:312,line_end:312|char_star:4,char_end:42"[shape="box",fillcolor="white",style=filled];
"@app.route('/hello', methods=['POST'])\n    def hello():\n        return f'Hello, {flask.request.json['name']}!',type='decorated_definition'\nline_star:312,line_end:314|char_star:4,char_end:54"->"@app.route('/hello', methods=['POST']),type='decorator'\nline_star:312,line_end:312|char_star:4,char_end:42";
"def hello():\n        return f'Hello, {flask.request.json['name']}!',type='function_definition'\nline_star:313,line_end:314|char_star:4,char_end:54"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.route('/hello', methods=['POST'])\n    def hello():\n        return f'Hello, {flask.request.json['name']}!',type='decorated_definition'\nline_star:312,line_end:314|char_star:4,char_end:54"->"def hello():\n        return f'Hello, {flask.request.json['name']}!',type='function_definition'\nline_star:313,line_end:314|char_star:4,char_end:54";
"hello,type='identifier'\nline_star:313,line_end:313|char_star:8,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"def hello():\n        return f'Hello, {flask.request.json['name']}!',type='function_definition'\nline_star:313,line_end:314|char_star:4,char_end:54"->"hello,type='identifier'\nline_star:313,line_end:313|char_star:8,char_end:13";
"type='INFORMATION BLOCK'\nline_star:314,line_end:314|char_star:8,char_end:54"[shape="point",fillcolor="#121013",style=filled];
"def hello():\n        return f'Hello, {flask.request.json['name']}!',type='function_definition'\nline_star:313,line_end:314|char_star:4,char_end:54"->"type='INFORMATION BLOCK'\nline_star:314,line_end:314|char_star:8,char_end:54";
"return f'Hello, {flask.request.json['name']}!',type='return_statement'\nline_star:314,line_end:314|char_star:8,char_end:54"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:314,line_end:314|char_star:8,char_end:54"->"return f'Hello, {flask.request.json['name']}!',type='return_statement'\nline_star:314,line_end:314|char_star:8,char_end:54";
"class Namespace:\n        count = 0\n\n        def add(self, app):\n            self.count += 1,type='class_definition'\nline_star:316,line_end:320|char_star:4,char_end:27"[shape="box",fillcolor="#ffdf91",style=filled];
"type='INFORMATION BLOCK'\nline_star:312,line_end:328|char_star:4,char_end:24"->"class Namespace:\n        count = 0\n\n        def add(self, app):\n            self.count += 1,type='class_definition'\nline_star:316,line_end:320|char_star:4,char_end:27";
"Namespace,type='identifier'\nline_star:316,line_end:316|char_star:10,char_end:19"[shape="point",fillcolor="#121013",style=filled];
"class Namespace:\n        count = 0\n\n        def add(self, app):\n            self.count += 1,type='class_definition'\nline_star:316,line_end:320|char_star:4,char_end:27"->"Namespace,type='identifier'\nline_star:316,line_end:316|char_star:10,char_end:19";
"type='INFORMATION BLOCK'\nline_star:317,line_end:320|char_star:8,char_end:27"[shape="point",fillcolor="#121013",style=filled];
"class Namespace:\n        count = 0\n\n        def add(self, app):\n            self.count += 1,type='class_definition'\nline_star:316,line_end:320|char_star:4,char_end:27"->"type='INFORMATION BLOCK'\nline_star:317,line_end:320|char_star:8,char_end:27";
"def add(self, app):\n            self.count += 1,type='function_definition'\nline_star:319,line_end:320|char_star:8,char_end:27"[shape="box",fillcolor="#cee6b4",style=filled];
"type='INFORMATION BLOCK'\nline_star:317,line_end:320|char_star:8,char_end:27"->"def add(self, app):\n            self.count += 1,type='function_definition'\nline_star:319,line_end:320|char_star:8,char_end:27";
"add,type='identifier'\nline_star:319,line_end:319|char_star:12,char_end:15"[shape="point",fillcolor="#121013",style=filled];
"def add(self, app):\n            self.count += 1,type='function_definition'\nline_star:319,line_end:320|char_star:8,char_end:27"->"add,type='identifier'\nline_star:319,line_end:319|char_star:12,char_end:15";
"(self, app),type='parameters'\nline_star:319,line_end:319|char_star:15,char_end:26"[shape="box",fillcolor="white",style=filled];
"def add(self, app):\n            self.count += 1,type='function_definition'\nline_star:319,line_end:320|char_star:8,char_end:27"->"(self, app),type='parameters'\nline_star:319,line_end:319|char_star:15,char_end:26";
"self,type='identifier'\nline_star:319,line_end:319|char_star:16,char_end:20"[shape="point",fillcolor="#121013",style=filled];
"(self, app),type='parameters'\nline_star:319,line_end:319|char_star:15,char_end:26"->"self,type='identifier'\nline_star:319,line_end:319|char_star:16,char_end:20";
"app,type='identifier'\nline_star:319,line_end:319|char_star:22,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"(self, app),type='parameters'\nline_star:319,line_end:319|char_star:15,char_end:26"->"app,type='identifier'\nline_star:319,line_end:319|char_star:22,char_end:25";
"type='INFORMATION BLOCK'\nline_star:320,line_end:320|char_star:12,char_end:27"[shape="point",fillcolor="#121013",style=filled];
"def add(self, app):\n            self.count += 1,type='function_definition'\nline_star:319,line_end:320|char_star:8,char_end:27"->"type='INFORMATION BLOCK'\nline_star:320,line_end:320|char_star:12,char_end:27";
"with appcontext_popped.connected_to(ns.add, app):\n        rv = client.post('/hello', json={'name': 'Flask'}),type='with_statement'\nline_star:324,line_end:325|char_star:4,char_end:58"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:312,line_end:328|char_star:4,char_end:24"->"with appcontext_popped.connected_to(ns.add, app):\n        rv = client.post('/hello', json={'name': 'Flask'}),type='with_statement'\nline_star:324,line_end:325|char_star:4,char_end:58";
"appcontext_popped.connected_to(ns.add, app),type='with_clause'\nline_star:324,line_end:324|char_star:9,char_end:52"[shape="box",fillcolor="white",style=filled];
"with appcontext_popped.connected_to(ns.add, app):\n        rv = client.post('/hello', json={'name': 'Flask'}),type='with_statement'\nline_star:324,line_end:325|char_star:4,char_end:58"->"appcontext_popped.connected_to(ns.add, app),type='with_clause'\nline_star:324,line_end:324|char_star:9,char_end:52";
"type='INFORMATION BLOCK'\nline_star:325,line_end:325|char_star:8,char_end:58"[shape="point",fillcolor="#121013",style=filled];
"with appcontext_popped.connected_to(ns.add, app):\n        rv = client.post('/hello', json={'name': 'Flask'}),type='with_statement'\nline_star:324,line_end:325|char_star:4,char_end:58"->"type='INFORMATION BLOCK'\nline_star:325,line_end:325|char_star:8,char_end:58";
"assert rv.get_data(as_text=True) == 'Hello, Flask!',type='assert_statement'\nline_star:327,line_end:327|char_star:4,char_end:55"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:312,line_end:328|char_star:4,char_end:24"->"assert rv.get_data(as_text=True) == 'Hello, Flask!',type='assert_statement'\nline_star:327,line_end:327|char_star:4,char_end:55";
"rv.get_data(as_text=True) == 'Hello, Flask!',type='comparison_operator'\nline_star:327,line_end:327|char_star:11,char_end:55"[shape="box",fillcolor="white",style=filled];
"assert rv.get_data(as_text=True) == 'Hello, Flask!',type='assert_statement'\nline_star:327,line_end:327|char_star:4,char_end:55"->"rv.get_data(as_text=True) == 'Hello, Flask!',type='comparison_operator'\nline_star:327,line_end:327|char_star:11,char_end:55";
"rv.get_data(as_text=True),type='call'\nline_star:327,line_end:327|char_star:11,char_end:36"[shape="box",fillcolor="white",style=filled];
"rv.get_data(as_text=True) == 'Hello, Flask!',type='comparison_operator'\nline_star:327,line_end:327|char_star:11,char_end:55"->"rv.get_data(as_text=True),type='call'\nline_star:327,line_end:327|char_star:11,char_end:36";
"rv.get_data,type='attribute'\nline_star:327,line_end:327|char_star:11,char_end:22"[shape="box",fillcolor="white",style=filled];
"rv.get_data(as_text=True),type='call'\nline_star:327,line_end:327|char_star:11,char_end:36"->"rv.get_data,type='attribute'\nline_star:327,line_end:327|char_star:11,char_end:22";
"rv,type='identifier'\nline_star:327,line_end:327|char_star:11,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"rv.get_data,type='attribute'\nline_star:327,line_end:327|char_star:11,char_end:22"->"rv,type='identifier'\nline_star:327,line_end:327|char_star:11,char_end:13";
"get_data,type='identifier'\nline_star:327,line_end:327|char_star:14,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"rv.get_data,type='attribute'\nline_star:327,line_end:327|char_star:11,char_end:22"->"get_data,type='identifier'\nline_star:327,line_end:327|char_star:14,char_end:22";
"(as_text=True),type='argument_list'\nline_star:327,line_end:327|char_star:22,char_end:36"[shape="box",fillcolor="white",style=filled];
"rv.get_data(as_text=True),type='call'\nline_star:327,line_end:327|char_star:11,char_end:36"->"(as_text=True),type='argument_list'\nline_star:327,line_end:327|char_star:22,char_end:36";
"as_text=True,type='keyword_argument'\nline_star:327,line_end:327|char_star:23,char_end:35"[shape="box",fillcolor="white",style=filled];
"(as_text=True),type='argument_list'\nline_star:327,line_end:327|char_star:22,char_end:36"->"as_text=True,type='keyword_argument'\nline_star:327,line_end:327|char_star:23,char_end:35";
"as_text,type='identifier'\nline_star:327,line_end:327|char_star:23,char_end:30"[shape="point",fillcolor="#121013",style=filled];
"as_text=True,type='keyword_argument'\nline_star:327,line_end:327|char_star:23,char_end:35"->"as_text,type='identifier'\nline_star:327,line_end:327|char_star:23,char_end:30";
"assert ns.count == 1,type='assert_statement'\nline_star:328,line_end:328|char_star:4,char_end:24"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:312,line_end:328|char_star:4,char_end:24"->"assert ns.count == 1,type='assert_statement'\nline_star:328,line_end:328|char_star:4,char_end:24";
"ns.count == 1,type='comparison_operator'\nline_star:328,line_end:328|char_star:11,char_end:24"[shape="box",fillcolor="white",style=filled];
"assert ns.count == 1,type='assert_statement'\nline_star:328,line_end:328|char_star:4,char_end:24"->"ns.count == 1,type='comparison_operator'\nline_star:328,line_end:328|char_star:11,char_end:24";
"ns.count,type='attribute'\nline_star:328,line_end:328|char_star:11,char_end:19"[shape="box",fillcolor="white",style=filled];
"ns.count == 1,type='comparison_operator'\nline_star:328,line_end:328|char_star:11,char_end:24"->"ns.count,type='attribute'\nline_star:328,line_end:328|char_star:11,char_end:19";
"ns,type='identifier'\nline_star:328,line_end:328|char_star:11,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"ns.count,type='attribute'\nline_star:328,line_end:328|char_star:11,char_end:19"->"ns,type='identifier'\nline_star:328,line_end:328|char_star:11,char_end:13";
"count,type='identifier'\nline_star:328,line_end:328|char_star:14,char_end:19"[shape="point",fillcolor="#121013",style=filled];
"ns.count,type='attribute'\nline_star:328,line_end:328|char_star:11,char_end:19"->"count,type='identifier'\nline_star:328,line_end:328|char_star:14,char_end:19";
"def test_subdomain():\n    app = flask.Flask(__name__, subdomain_matching=True)\n    app.config['SERVER_NAME'] = 'example.com'\n    client = app.test_client()\n\n    @app.route('/', subdomain='<company_id>')\n    def view(company_id):\n        return company_id\n\n    with app.test_request_context():\n        url = flask.url_for('view', company_id='xxx')\n\n    with client:\n        response = client.get(url)\n\n    assert 200 == response.status_code\n    assert b'xxx' == response.data,type='function_definition'\nline_star:331,line_end:347|char_star:0,char_end:34"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_subdomain():\n    app = flask.Flask(__name__, subdomain_matching=True)\n    app.config['SERVER_NAME'] = 'example.com'\n    client = app.test_client()\n\n    @app.route('/', subdomain='<company_id>')\n    def view(company_id):\n        return company_id\n\n    with app.test_request_context():\n        url = flask.url_for('view', company_id='xxx')\n\n    with client:\n        response = client.get(url)\n\n    assert 200 == response.status_code\n    assert b'xxx' == response.data,type='function_definition'\nline_star:331,line_end:347|char_star:0,char_end:34";
"test_subdomain,type='identifier'\nline_star:331,line_end:331|char_star:4,char_end:18"[shape="point",fillcolor="#121013",style=filled];
"def test_subdomain():\n    app = flask.Flask(__name__, subdomain_matching=True)\n    app.config['SERVER_NAME'] = 'example.com'\n    client = app.test_client()\n\n    @app.route('/', subdomain='<company_id>')\n    def view(company_id):\n        return company_id\n\n    with app.test_request_context():\n        url = flask.url_for('view', company_id='xxx')\n\n    with client:\n        response = client.get(url)\n\n    assert 200 == response.status_code\n    assert b'xxx' == response.data,type='function_definition'\nline_star:331,line_end:347|char_star:0,char_end:34"->"test_subdomain,type='identifier'\nline_star:331,line_end:331|char_star:4,char_end:18";
"type='INFORMATION BLOCK'\nline_star:332,line_end:347|char_star:4,char_end:34"[shape="point",fillcolor="#121013",style=filled];
"def test_subdomain():\n    app = flask.Flask(__name__, subdomain_matching=True)\n    app.config['SERVER_NAME'] = 'example.com'\n    client = app.test_client()\n\n    @app.route('/', subdomain='<company_id>')\n    def view(company_id):\n        return company_id\n\n    with app.test_request_context():\n        url = flask.url_for('view', company_id='xxx')\n\n    with client:\n        response = client.get(url)\n\n    assert 200 == response.status_code\n    assert b'xxx' == response.data,type='function_definition'\nline_star:331,line_end:347|char_star:0,char_end:34"->"type='INFORMATION BLOCK'\nline_star:332,line_end:347|char_star:4,char_end:34";
"@app.route('/', subdomain='<company_id>')\n    def view(company_id):\n        return company_id,type='decorated_definition'\nline_star:336,line_end:338|char_star:4,char_end:25"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:332,line_end:347|char_star:4,char_end:34"->"@app.route('/', subdomain='<company_id>')\n    def view(company_id):\n        return company_id,type='decorated_definition'\nline_star:336,line_end:338|char_star:4,char_end:25";
"@app.route('/', subdomain='<company_id>'),type='decorator'\nline_star:336,line_end:336|char_star:4,char_end:45"[shape="box",fillcolor="white",style=filled];
"@app.route('/', subdomain='<company_id>')\n    def view(company_id):\n        return company_id,type='decorated_definition'\nline_star:336,line_end:338|char_star:4,char_end:25"->"@app.route('/', subdomain='<company_id>'),type='decorator'\nline_star:336,line_end:336|char_star:4,char_end:45";
"def view(company_id):\n        return company_id,type='function_definition'\nline_star:337,line_end:338|char_star:4,char_end:25"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.route('/', subdomain='<company_id>')\n    def view(company_id):\n        return company_id,type='decorated_definition'\nline_star:336,line_end:338|char_star:4,char_end:25"->"def view(company_id):\n        return company_id,type='function_definition'\nline_star:337,line_end:338|char_star:4,char_end:25";
"view,type='identifier'\nline_star:337,line_end:337|char_star:8,char_end:12"[shape="point",fillcolor="#121013",style=filled];
"def view(company_id):\n        return company_id,type='function_definition'\nline_star:337,line_end:338|char_star:4,char_end:25"->"view,type='identifier'\nline_star:337,line_end:337|char_star:8,char_end:12";
"(company_id),type='parameters'\nline_star:337,line_end:337|char_star:12,char_end:24"[shape="box",fillcolor="white",style=filled];
"def view(company_id):\n        return company_id,type='function_definition'\nline_star:337,line_end:338|char_star:4,char_end:25"->"(company_id),type='parameters'\nline_star:337,line_end:337|char_star:12,char_end:24";
"company_id,type='identifier'\nline_star:337,line_end:337|char_star:13,char_end:23"[shape="point",fillcolor="#121013",style=filled];
"(company_id),type='parameters'\nline_star:337,line_end:337|char_star:12,char_end:24"->"company_id,type='identifier'\nline_star:337,line_end:337|char_star:13,char_end:23";
"type='INFORMATION BLOCK'\nline_star:338,line_end:338|char_star:8,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"def view(company_id):\n        return company_id,type='function_definition'\nline_star:337,line_end:338|char_star:4,char_end:25"->"type='INFORMATION BLOCK'\nline_star:338,line_end:338|char_star:8,char_end:25";
"return company_id,type='return_statement'\nline_star:338,line_end:338|char_star:8,char_end:25"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:338,line_end:338|char_star:8,char_end:25"->"return company_id,type='return_statement'\nline_star:338,line_end:338|char_star:8,char_end:25";
"with app.test_request_context():\n        url = flask.url_for('view', company_id='xxx'),type='with_statement'\nline_star:340,line_end:341|char_star:4,char_end:53"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:332,line_end:347|char_star:4,char_end:34"->"with app.test_request_context():\n        url = flask.url_for('view', company_id='xxx'),type='with_statement'\nline_star:340,line_end:341|char_star:4,char_end:53";
"app.test_request_context(),type='with_clause'\nline_star:340,line_end:340|char_star:9,char_end:35"[shape="box",fillcolor="white",style=filled];
"with app.test_request_context():\n        url = flask.url_for('view', company_id='xxx'),type='with_statement'\nline_star:340,line_end:341|char_star:4,char_end:53"->"app.test_request_context(),type='with_clause'\nline_star:340,line_end:340|char_star:9,char_end:35";
"type='INFORMATION BLOCK'\nline_star:341,line_end:341|char_star:8,char_end:53"[shape="point",fillcolor="#121013",style=filled];
"with app.test_request_context():\n        url = flask.url_for('view', company_id='xxx'),type='with_statement'\nline_star:340,line_end:341|char_star:4,char_end:53"->"type='INFORMATION BLOCK'\nline_star:341,line_end:341|char_star:8,char_end:53";
"with client:\n        response = client.get(url),type='with_statement'\nline_star:343,line_end:344|char_star:4,char_end:34"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:332,line_end:347|char_star:4,char_end:34"->"with client:\n        response = client.get(url),type='with_statement'\nline_star:343,line_end:344|char_star:4,char_end:34";
"client,type='with_clause'\nline_star:343,line_end:343|char_star:9,char_end:15"[shape="box",fillcolor="white",style=filled];
"with client:\n        response = client.get(url),type='with_statement'\nline_star:343,line_end:344|char_star:4,char_end:34"->"client,type='with_clause'\nline_star:343,line_end:343|char_star:9,char_end:15";
"type='INFORMATION BLOCK'\nline_star:344,line_end:344|char_star:8,char_end:34"[shape="point",fillcolor="#121013",style=filled];
"with client:\n        response = client.get(url),type='with_statement'\nline_star:343,line_end:344|char_star:4,char_end:34"->"type='INFORMATION BLOCK'\nline_star:344,line_end:344|char_star:8,char_end:34";
"assert 200 == response.status_code,type='assert_statement'\nline_star:346,line_end:346|char_star:4,char_end:38"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:332,line_end:347|char_star:4,char_end:34"->"assert 200 == response.status_code,type='assert_statement'\nline_star:346,line_end:346|char_star:4,char_end:38";
"200 == response.status_code,type='comparison_operator'\nline_star:346,line_end:346|char_star:11,char_end:38"[shape="box",fillcolor="white",style=filled];
"assert 200 == response.status_code,type='assert_statement'\nline_star:346,line_end:346|char_star:4,char_end:38"->"200 == response.status_code,type='comparison_operator'\nline_star:346,line_end:346|char_star:11,char_end:38";
"response.status_code,type='attribute'\nline_star:346,line_end:346|char_star:18,char_end:38"[shape="box",fillcolor="white",style=filled];
"200 == response.status_code,type='comparison_operator'\nline_star:346,line_end:346|char_star:11,char_end:38"->"response.status_code,type='attribute'\nline_star:346,line_end:346|char_star:18,char_end:38";
"response,type='identifier'\nline_star:346,line_end:346|char_star:18,char_end:26"[shape="point",fillcolor="#121013",style=filled];
"response.status_code,type='attribute'\nline_star:346,line_end:346|char_star:18,char_end:38"->"response,type='identifier'\nline_star:346,line_end:346|char_star:18,char_end:26";
"status_code,type='identifier'\nline_star:346,line_end:346|char_star:27,char_end:38"[shape="point",fillcolor="#121013",style=filled];
"response.status_code,type='attribute'\nline_star:346,line_end:346|char_star:18,char_end:38"->"status_code,type='identifier'\nline_star:346,line_end:346|char_star:27,char_end:38";
"assert b'xxx' == response.data,type='assert_statement'\nline_star:347,line_end:347|char_star:4,char_end:34"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:332,line_end:347|char_star:4,char_end:34"->"assert b'xxx' == response.data,type='assert_statement'\nline_star:347,line_end:347|char_star:4,char_end:34";
"b'xxx' == response.data,type='comparison_operator'\nline_star:347,line_end:347|char_star:11,char_end:34"[shape="box",fillcolor="white",style=filled];
"assert b'xxx' == response.data,type='assert_statement'\nline_star:347,line_end:347|char_star:4,char_end:34"->"b'xxx' == response.data,type='comparison_operator'\nline_star:347,line_end:347|char_star:11,char_end:34";
"response.data,type='attribute'\nline_star:347,line_end:347|char_star:21,char_end:34"[shape="box",fillcolor="white",style=filled];
"b'xxx' == response.data,type='comparison_operator'\nline_star:347,line_end:347|char_star:11,char_end:34"->"response.data,type='attribute'\nline_star:347,line_end:347|char_star:21,char_end:34";
"response,type='identifier'\nline_star:347,line_end:347|char_star:21,char_end:29"[shape="point",fillcolor="#121013",style=filled];
"response.data,type='attribute'\nline_star:347,line_end:347|char_star:21,char_end:34"->"response,type='identifier'\nline_star:347,line_end:347|char_star:21,char_end:29";
"data,type='identifier'\nline_star:347,line_end:347|char_star:30,char_end:34"[shape="point",fillcolor="#121013",style=filled];
"response.data,type='attribute'\nline_star:347,line_end:347|char_star:21,char_end:34"->"data,type='identifier'\nline_star:347,line_end:347|char_star:30,char_end:34";
"def test_nosubdomain(app, client):\n    app.config['SERVER_NAME'] = 'example.com'\n\n    @app.route('/<company_id>')\n    def view(company_id):\n        return company_id\n\n    with app.test_request_context():\n        url = flask.url_for('view', company_id='xxx')\n\n    with client:\n        response = client.get(url)\n\n    assert 200 == response.status_code\n    assert b'xxx' == response.data,type='function_definition'\nline_star:350,line_end:364|char_star:0,char_end:34"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_nosubdomain(app, client):\n    app.config['SERVER_NAME'] = 'example.com'\n\n    @app.route('/<company_id>')\n    def view(company_id):\n        return company_id\n\n    with app.test_request_context():\n        url = flask.url_for('view', company_id='xxx')\n\n    with client:\n        response = client.get(url)\n\n    assert 200 == response.status_code\n    assert b'xxx' == response.data,type='function_definition'\nline_star:350,line_end:364|char_star:0,char_end:34";
"test_nosubdomain,type='identifier'\nline_star:350,line_end:350|char_star:4,char_end:20"[shape="point",fillcolor="#121013",style=filled];
"def test_nosubdomain(app, client):\n    app.config['SERVER_NAME'] = 'example.com'\n\n    @app.route('/<company_id>')\n    def view(company_id):\n        return company_id\n\n    with app.test_request_context():\n        url = flask.url_for('view', company_id='xxx')\n\n    with client:\n        response = client.get(url)\n\n    assert 200 == response.status_code\n    assert b'xxx' == response.data,type='function_definition'\nline_star:350,line_end:364|char_star:0,char_end:34"->"test_nosubdomain,type='identifier'\nline_star:350,line_end:350|char_star:4,char_end:20";
"(app, client),type='parameters'\nline_star:350,line_end:350|char_star:20,char_end:33"[shape="box",fillcolor="white",style=filled];
"def test_nosubdomain(app, client):\n    app.config['SERVER_NAME'] = 'example.com'\n\n    @app.route('/<company_id>')\n    def view(company_id):\n        return company_id\n\n    with app.test_request_context():\n        url = flask.url_for('view', company_id='xxx')\n\n    with client:\n        response = client.get(url)\n\n    assert 200 == response.status_code\n    assert b'xxx' == response.data,type='function_definition'\nline_star:350,line_end:364|char_star:0,char_end:34"->"(app, client),type='parameters'\nline_star:350,line_end:350|char_star:20,char_end:33";
"app,type='identifier'\nline_star:350,line_end:350|char_star:21,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"(app, client),type='parameters'\nline_star:350,line_end:350|char_star:20,char_end:33"->"app,type='identifier'\nline_star:350,line_end:350|char_star:21,char_end:24";
"client,type='identifier'\nline_star:350,line_end:350|char_star:26,char_end:32"[shape="point",fillcolor="#121013",style=filled];
"(app, client),type='parameters'\nline_star:350,line_end:350|char_star:20,char_end:33"->"client,type='identifier'\nline_star:350,line_end:350|char_star:26,char_end:32";
"type='INFORMATION BLOCK'\nline_star:351,line_end:364|char_star:4,char_end:34"[shape="point",fillcolor="#121013",style=filled];
"def test_nosubdomain(app, client):\n    app.config['SERVER_NAME'] = 'example.com'\n\n    @app.route('/<company_id>')\n    def view(company_id):\n        return company_id\n\n    with app.test_request_context():\n        url = flask.url_for('view', company_id='xxx')\n\n    with client:\n        response = client.get(url)\n\n    assert 200 == response.status_code\n    assert b'xxx' == response.data,type='function_definition'\nline_star:350,line_end:364|char_star:0,char_end:34"->"type='INFORMATION BLOCK'\nline_star:351,line_end:364|char_star:4,char_end:34";
"@app.route('/<company_id>')\n    def view(company_id):\n        return company_id,type='decorated_definition'\nline_star:353,line_end:355|char_star:4,char_end:25"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:351,line_end:364|char_star:4,char_end:34"->"@app.route('/<company_id>')\n    def view(company_id):\n        return company_id,type='decorated_definition'\nline_star:353,line_end:355|char_star:4,char_end:25";
"@app.route('/<company_id>'),type='decorator'\nline_star:353,line_end:353|char_star:4,char_end:31"[shape="box",fillcolor="white",style=filled];
"@app.route('/<company_id>')\n    def view(company_id):\n        return company_id,type='decorated_definition'\nline_star:353,line_end:355|char_star:4,char_end:25"->"@app.route('/<company_id>'),type='decorator'\nline_star:353,line_end:353|char_star:4,char_end:31";
"def view(company_id):\n        return company_id,type='function_definition'\nline_star:354,line_end:355|char_star:4,char_end:25"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.route('/<company_id>')\n    def view(company_id):\n        return company_id,type='decorated_definition'\nline_star:353,line_end:355|char_star:4,char_end:25"->"def view(company_id):\n        return company_id,type='function_definition'\nline_star:354,line_end:355|char_star:4,char_end:25";
"view,type='identifier'\nline_star:354,line_end:354|char_star:8,char_end:12"[shape="point",fillcolor="#121013",style=filled];
"def view(company_id):\n        return company_id,type='function_definition'\nline_star:354,line_end:355|char_star:4,char_end:25"->"view,type='identifier'\nline_star:354,line_end:354|char_star:8,char_end:12";
"(company_id),type='parameters'\nline_star:354,line_end:354|char_star:12,char_end:24"[shape="box",fillcolor="white",style=filled];
"def view(company_id):\n        return company_id,type='function_definition'\nline_star:354,line_end:355|char_star:4,char_end:25"->"(company_id),type='parameters'\nline_star:354,line_end:354|char_star:12,char_end:24";
"company_id,type='identifier'\nline_star:354,line_end:354|char_star:13,char_end:23"[shape="point",fillcolor="#121013",style=filled];
"(company_id),type='parameters'\nline_star:354,line_end:354|char_star:12,char_end:24"->"company_id,type='identifier'\nline_star:354,line_end:354|char_star:13,char_end:23";
"type='INFORMATION BLOCK'\nline_star:355,line_end:355|char_star:8,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"def view(company_id):\n        return company_id,type='function_definition'\nline_star:354,line_end:355|char_star:4,char_end:25"->"type='INFORMATION BLOCK'\nline_star:355,line_end:355|char_star:8,char_end:25";
"return company_id,type='return_statement'\nline_star:355,line_end:355|char_star:8,char_end:25"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:355,line_end:355|char_star:8,char_end:25"->"return company_id,type='return_statement'\nline_star:355,line_end:355|char_star:8,char_end:25";
"with app.test_request_context():\n        url = flask.url_for('view', company_id='xxx'),type='with_statement'\nline_star:357,line_end:358|char_star:4,char_end:53"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:351,line_end:364|char_star:4,char_end:34"->"with app.test_request_context():\n        url = flask.url_for('view', company_id='xxx'),type='with_statement'\nline_star:357,line_end:358|char_star:4,char_end:53";
"app.test_request_context(),type='with_clause'\nline_star:357,line_end:357|char_star:9,char_end:35"[shape="box",fillcolor="white",style=filled];
"with app.test_request_context():\n        url = flask.url_for('view', company_id='xxx'),type='with_statement'\nline_star:357,line_end:358|char_star:4,char_end:53"->"app.test_request_context(),type='with_clause'\nline_star:357,line_end:357|char_star:9,char_end:35";
"type='INFORMATION BLOCK'\nline_star:358,line_end:358|char_star:8,char_end:53"[shape="point",fillcolor="#121013",style=filled];
"with app.test_request_context():\n        url = flask.url_for('view', company_id='xxx'),type='with_statement'\nline_star:357,line_end:358|char_star:4,char_end:53"->"type='INFORMATION BLOCK'\nline_star:358,line_end:358|char_star:8,char_end:53";
"with client:\n        response = client.get(url),type='with_statement'\nline_star:360,line_end:361|char_star:4,char_end:34"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:351,line_end:364|char_star:4,char_end:34"->"with client:\n        response = client.get(url),type='with_statement'\nline_star:360,line_end:361|char_star:4,char_end:34";
"client,type='with_clause'\nline_star:360,line_end:360|char_star:9,char_end:15"[shape="box",fillcolor="white",style=filled];
"with client:\n        response = client.get(url),type='with_statement'\nline_star:360,line_end:361|char_star:4,char_end:34"->"client,type='with_clause'\nline_star:360,line_end:360|char_star:9,char_end:15";
"type='INFORMATION BLOCK'\nline_star:361,line_end:361|char_star:8,char_end:34"[shape="point",fillcolor="#121013",style=filled];
"with client:\n        response = client.get(url),type='with_statement'\nline_star:360,line_end:361|char_star:4,char_end:34"->"type='INFORMATION BLOCK'\nline_star:361,line_end:361|char_star:8,char_end:34";
"assert 200 == response.status_code,type='assert_statement'\nline_star:363,line_end:363|char_star:4,char_end:38"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:351,line_end:364|char_star:4,char_end:34"->"assert 200 == response.status_code,type='assert_statement'\nline_star:363,line_end:363|char_star:4,char_end:38";
"200 == response.status_code,type='comparison_operator'\nline_star:363,line_end:363|char_star:11,char_end:38"[shape="box",fillcolor="white",style=filled];
"assert 200 == response.status_code,type='assert_statement'\nline_star:363,line_end:363|char_star:4,char_end:38"->"200 == response.status_code,type='comparison_operator'\nline_star:363,line_end:363|char_star:11,char_end:38";
"response.status_code,type='attribute'\nline_star:363,line_end:363|char_star:18,char_end:38"[shape="box",fillcolor="white",style=filled];
"200 == response.status_code,type='comparison_operator'\nline_star:363,line_end:363|char_star:11,char_end:38"->"response.status_code,type='attribute'\nline_star:363,line_end:363|char_star:18,char_end:38";
"response,type='identifier'\nline_star:363,line_end:363|char_star:18,char_end:26"[shape="point",fillcolor="#121013",style=filled];
"response.status_code,type='attribute'\nline_star:363,line_end:363|char_star:18,char_end:38"->"response,type='identifier'\nline_star:363,line_end:363|char_star:18,char_end:26";
"status_code,type='identifier'\nline_star:363,line_end:363|char_star:27,char_end:38"[shape="point",fillcolor="#121013",style=filled];
"response.status_code,type='attribute'\nline_star:363,line_end:363|char_star:18,char_end:38"->"status_code,type='identifier'\nline_star:363,line_end:363|char_star:27,char_end:38";
"assert b'xxx' == response.data,type='assert_statement'\nline_star:364,line_end:364|char_star:4,char_end:34"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:351,line_end:364|char_star:4,char_end:34"->"assert b'xxx' == response.data,type='assert_statement'\nline_star:364,line_end:364|char_star:4,char_end:34";
"b'xxx' == response.data,type='comparison_operator'\nline_star:364,line_end:364|char_star:11,char_end:34"[shape="box",fillcolor="white",style=filled];
"assert b'xxx' == response.data,type='assert_statement'\nline_star:364,line_end:364|char_star:4,char_end:34"->"b'xxx' == response.data,type='comparison_operator'\nline_star:364,line_end:364|char_star:11,char_end:34";
"response.data,type='attribute'\nline_star:364,line_end:364|char_star:21,char_end:34"[shape="box",fillcolor="white",style=filled];
"b'xxx' == response.data,type='comparison_operator'\nline_star:364,line_end:364|char_star:11,char_end:34"->"response.data,type='attribute'\nline_star:364,line_end:364|char_star:21,char_end:34";
"response,type='identifier'\nline_star:364,line_end:364|char_star:21,char_end:29"[shape="point",fillcolor="#121013",style=filled];
"response.data,type='attribute'\nline_star:364,line_end:364|char_star:21,char_end:34"->"response,type='identifier'\nline_star:364,line_end:364|char_star:21,char_end:29";
"data,type='identifier'\nline_star:364,line_end:364|char_star:30,char_end:34"[shape="point",fillcolor="#121013",style=filled];
"response.data,type='attribute'\nline_star:364,line_end:364|char_star:21,char_end:34"->"data,type='identifier'\nline_star:364,line_end:364|char_star:30,char_end:34";
"def test_cli_runner_class(app):\n    runner = app.test_cli_runner()\n    assert isinstance(runner, FlaskCliRunner)\n\n    class SubRunner(FlaskCliRunner):\n        pass\n\n    app.test_cli_runner_class = SubRunner\n    runner = app.test_cli_runner()\n    assert isinstance(runner, SubRunner),type='function_definition'\nline_star:367,line_end:376|char_star:0,char_end:40"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_cli_runner_class(app):\n    runner = app.test_cli_runner()\n    assert isinstance(runner, FlaskCliRunner)\n\n    class SubRunner(FlaskCliRunner):\n        pass\n\n    app.test_cli_runner_class = SubRunner\n    runner = app.test_cli_runner()\n    assert isinstance(runner, SubRunner),type='function_definition'\nline_star:367,line_end:376|char_star:0,char_end:40";
"test_cli_runner_class,type='identifier'\nline_star:367,line_end:367|char_star:4,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"def test_cli_runner_class(app):\n    runner = app.test_cli_runner()\n    assert isinstance(runner, FlaskCliRunner)\n\n    class SubRunner(FlaskCliRunner):\n        pass\n\n    app.test_cli_runner_class = SubRunner\n    runner = app.test_cli_runner()\n    assert isinstance(runner, SubRunner),type='function_definition'\nline_star:367,line_end:376|char_star:0,char_end:40"->"test_cli_runner_class,type='identifier'\nline_star:367,line_end:367|char_star:4,char_end:25";
"(app),type='parameters'\nline_star:367,line_end:367|char_star:25,char_end:30"[shape="box",fillcolor="white",style=filled];
"def test_cli_runner_class(app):\n    runner = app.test_cli_runner()\n    assert isinstance(runner, FlaskCliRunner)\n\n    class SubRunner(FlaskCliRunner):\n        pass\n\n    app.test_cli_runner_class = SubRunner\n    runner = app.test_cli_runner()\n    assert isinstance(runner, SubRunner),type='function_definition'\nline_star:367,line_end:376|char_star:0,char_end:40"->"(app),type='parameters'\nline_star:367,line_end:367|char_star:25,char_end:30";
"app,type='identifier'\nline_star:367,line_end:367|char_star:26,char_end:29"[shape="point",fillcolor="#121013",style=filled];
"(app),type='parameters'\nline_star:367,line_end:367|char_star:25,char_end:30"->"app,type='identifier'\nline_star:367,line_end:367|char_star:26,char_end:29";
"type='INFORMATION BLOCK'\nline_star:368,line_end:376|char_star:4,char_end:40"[shape="point",fillcolor="#121013",style=filled];
"def test_cli_runner_class(app):\n    runner = app.test_cli_runner()\n    assert isinstance(runner, FlaskCliRunner)\n\n    class SubRunner(FlaskCliRunner):\n        pass\n\n    app.test_cli_runner_class = SubRunner\n    runner = app.test_cli_runner()\n    assert isinstance(runner, SubRunner),type='function_definition'\nline_star:367,line_end:376|char_star:0,char_end:40"->"type='INFORMATION BLOCK'\nline_star:368,line_end:376|char_star:4,char_end:40";
"assert isinstance(runner, FlaskCliRunner),type='assert_statement'\nline_star:369,line_end:369|char_star:4,char_end:45"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:368,line_end:376|char_star:4,char_end:40"->"assert isinstance(runner, FlaskCliRunner),type='assert_statement'\nline_star:369,line_end:369|char_star:4,char_end:45";
"isinstance(runner, FlaskCliRunner),type='call'\nline_star:369,line_end:369|char_star:11,char_end:45"[shape="box",fillcolor="white",style=filled];
"assert isinstance(runner, FlaskCliRunner),type='assert_statement'\nline_star:369,line_end:369|char_star:4,char_end:45"->"isinstance(runner, FlaskCliRunner),type='call'\nline_star:369,line_end:369|char_star:11,char_end:45";
"isinstance,type='identifier'\nline_star:369,line_end:369|char_star:11,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"isinstance(runner, FlaskCliRunner),type='call'\nline_star:369,line_end:369|char_star:11,char_end:45"->"isinstance,type='identifier'\nline_star:369,line_end:369|char_star:11,char_end:21";
"(runner, FlaskCliRunner),type='argument_list'\nline_star:369,line_end:369|char_star:21,char_end:45"[shape="box",fillcolor="white",style=filled];
"isinstance(runner, FlaskCliRunner),type='call'\nline_star:369,line_end:369|char_star:11,char_end:45"->"(runner, FlaskCliRunner),type='argument_list'\nline_star:369,line_end:369|char_star:21,char_end:45";
"runner,type='identifier'\nline_star:369,line_end:369|char_star:22,char_end:28"[shape="point",fillcolor="#121013",style=filled];
"(runner, FlaskCliRunner),type='argument_list'\nline_star:369,line_end:369|char_star:21,char_end:45"->"runner,type='identifier'\nline_star:369,line_end:369|char_star:22,char_end:28";
"FlaskCliRunner,type='identifier'\nline_star:369,line_end:369|char_star:30,char_end:44"[shape="point",fillcolor="#121013",style=filled];
"(runner, FlaskCliRunner),type='argument_list'\nline_star:369,line_end:369|char_star:21,char_end:45"->"FlaskCliRunner,type='identifier'\nline_star:369,line_end:369|char_star:30,char_end:44";
"class SubRunner(FlaskCliRunner):\n        pass,type='class_definition'\nline_star:371,line_end:372|char_star:4,char_end:12"[shape="box",fillcolor="#ffdf91",style=filled];
"type='INFORMATION BLOCK'\nline_star:368,line_end:376|char_star:4,char_end:40"->"class SubRunner(FlaskCliRunner):\n        pass,type='class_definition'\nline_star:371,line_end:372|char_star:4,char_end:12";
"SubRunner,type='identifier'\nline_star:371,line_end:371|char_star:10,char_end:19"[shape="point",fillcolor="#121013",style=filled];
"class SubRunner(FlaskCliRunner):\n        pass,type='class_definition'\nline_star:371,line_end:372|char_star:4,char_end:12"->"SubRunner,type='identifier'\nline_star:371,line_end:371|char_star:10,char_end:19";
"(FlaskCliRunner),type='argument_list'\nline_star:371,line_end:371|char_star:19,char_end:35"[shape="box",fillcolor="white",style=filled];
"class SubRunner(FlaskCliRunner):\n        pass,type='class_definition'\nline_star:371,line_end:372|char_star:4,char_end:12"->"(FlaskCliRunner),type='argument_list'\nline_star:371,line_end:371|char_star:19,char_end:35";
"FlaskCliRunner,type='identifier'\nline_star:371,line_end:371|char_star:20,char_end:34"[shape="point",fillcolor="#121013",style=filled];
"(FlaskCliRunner),type='argument_list'\nline_star:371,line_end:371|char_star:19,char_end:35"->"FlaskCliRunner,type='identifier'\nline_star:371,line_end:371|char_star:20,char_end:34";
"type='INFORMATION BLOCK'\nline_star:372,line_end:372|char_star:8,char_end:12"[shape="point",fillcolor="#121013",style=filled];
"class SubRunner(FlaskCliRunner):\n        pass,type='class_definition'\nline_star:371,line_end:372|char_star:4,char_end:12"->"type='INFORMATION BLOCK'\nline_star:372,line_end:372|char_star:8,char_end:12";
"pass,type='pass_statement'\nline_star:372,line_end:372|char_star:8,char_end:12"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:372,line_end:372|char_star:8,char_end:12"->"pass,type='pass_statement'\nline_star:372,line_end:372|char_star:8,char_end:12";
"pass,type='pass'\nline_star:372,line_end:372|char_star:8,char_end:12"[shape="box",fillcolor="white",style=filled];
"pass,type='pass_statement'\nline_star:372,line_end:372|char_star:8,char_end:12"->"pass,type='pass'\nline_star:372,line_end:372|char_star:8,char_end:12";
"assert isinstance(runner, SubRunner),type='assert_statement'\nline_star:376,line_end:376|char_star:4,char_end:40"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:368,line_end:376|char_star:4,char_end:40"->"assert isinstance(runner, SubRunner),type='assert_statement'\nline_star:376,line_end:376|char_star:4,char_end:40";
"isinstance(runner, SubRunner),type='call'\nline_star:376,line_end:376|char_star:11,char_end:40"[shape="box",fillcolor="white",style=filled];
"assert isinstance(runner, SubRunner),type='assert_statement'\nline_star:376,line_end:376|char_star:4,char_end:40"->"isinstance(runner, SubRunner),type='call'\nline_star:376,line_end:376|char_star:11,char_end:40";
"isinstance,type='identifier'\nline_star:376,line_end:376|char_star:11,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"isinstance(runner, SubRunner),type='call'\nline_star:376,line_end:376|char_star:11,char_end:40"->"isinstance,type='identifier'\nline_star:376,line_end:376|char_star:11,char_end:21";
"(runner, SubRunner),type='argument_list'\nline_star:376,line_end:376|char_star:21,char_end:40"[shape="box",fillcolor="white",style=filled];
"isinstance(runner, SubRunner),type='call'\nline_star:376,line_end:376|char_star:11,char_end:40"->"(runner, SubRunner),type='argument_list'\nline_star:376,line_end:376|char_star:21,char_end:40";
"runner,type='identifier'\nline_star:376,line_end:376|char_star:22,char_end:28"[shape="point",fillcolor="#121013",style=filled];
"(runner, SubRunner),type='argument_list'\nline_star:376,line_end:376|char_star:21,char_end:40"->"runner,type='identifier'\nline_star:376,line_end:376|char_star:22,char_end:28";
"SubRunner,type='identifier'\nline_star:376,line_end:376|char_star:30,char_end:39"[shape="point",fillcolor="#121013",style=filled];
"(runner, SubRunner),type='argument_list'\nline_star:376,line_end:376|char_star:21,char_end:40"->"SubRunner,type='identifier'\nline_star:376,line_end:376|char_star:30,char_end:39";
"def test_cli_invoke(app):\n    @app.cli.command('hello')\n    def hello_command():\n        click.echo('Hello, World!')\n\n    runner = app.test_cli_runner()\n    # invoke with command name\n    result = runner.invoke(args=['hello'])\n    assert 'Hello' in result.output\n    # invoke with command object\n    result = runner.invoke(hello_command)\n    assert 'Hello' in result.output,type='function_definition'\nline_star:379,line_end:390|char_star:0,char_end:35"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_cli_invoke(app):\n    @app.cli.command('hello')\n    def hello_command():\n        click.echo('Hello, World!')\n\n    runner = app.test_cli_runner()\n    # invoke with command name\n    result = runner.invoke(args=['hello'])\n    assert 'Hello' in result.output\n    # invoke with command object\n    result = runner.invoke(hello_command)\n    assert 'Hello' in result.output,type='function_definition'\nline_star:379,line_end:390|char_star:0,char_end:35";
"test_cli_invoke,type='identifier'\nline_star:379,line_end:379|char_star:4,char_end:19"[shape="point",fillcolor="#121013",style=filled];
"def test_cli_invoke(app):\n    @app.cli.command('hello')\n    def hello_command():\n        click.echo('Hello, World!')\n\n    runner = app.test_cli_runner()\n    # invoke with command name\n    result = runner.invoke(args=['hello'])\n    assert 'Hello' in result.output\n    # invoke with command object\n    result = runner.invoke(hello_command)\n    assert 'Hello' in result.output,type='function_definition'\nline_star:379,line_end:390|char_star:0,char_end:35"->"test_cli_invoke,type='identifier'\nline_star:379,line_end:379|char_star:4,char_end:19";
"(app),type='parameters'\nline_star:379,line_end:379|char_star:19,char_end:24"[shape="box",fillcolor="white",style=filled];
"def test_cli_invoke(app):\n    @app.cli.command('hello')\n    def hello_command():\n        click.echo('Hello, World!')\n\n    runner = app.test_cli_runner()\n    # invoke with command name\n    result = runner.invoke(args=['hello'])\n    assert 'Hello' in result.output\n    # invoke with command object\n    result = runner.invoke(hello_command)\n    assert 'Hello' in result.output,type='function_definition'\nline_star:379,line_end:390|char_star:0,char_end:35"->"(app),type='parameters'\nline_star:379,line_end:379|char_star:19,char_end:24";
"app,type='identifier'\nline_star:379,line_end:379|char_star:20,char_end:23"[shape="point",fillcolor="#121013",style=filled];
"(app),type='parameters'\nline_star:379,line_end:379|char_star:19,char_end:24"->"app,type='identifier'\nline_star:379,line_end:379|char_star:20,char_end:23";
"type='INFORMATION BLOCK'\nline_star:380,line_end:390|char_star:4,char_end:35"[shape="point",fillcolor="#121013",style=filled];
"def test_cli_invoke(app):\n    @app.cli.command('hello')\n    def hello_command():\n        click.echo('Hello, World!')\n\n    runner = app.test_cli_runner()\n    # invoke with command name\n    result = runner.invoke(args=['hello'])\n    assert 'Hello' in result.output\n    # invoke with command object\n    result = runner.invoke(hello_command)\n    assert 'Hello' in result.output,type='function_definition'\nline_star:379,line_end:390|char_star:0,char_end:35"->"type='INFORMATION BLOCK'\nline_star:380,line_end:390|char_star:4,char_end:35";
"@app.cli.command('hello')\n    def hello_command():\n        click.echo('Hello, World!'),type='decorated_definition'\nline_star:380,line_end:382|char_star:4,char_end:35"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:380,line_end:390|char_star:4,char_end:35"->"@app.cli.command('hello')\n    def hello_command():\n        click.echo('Hello, World!'),type='decorated_definition'\nline_star:380,line_end:382|char_star:4,char_end:35";
"@app.cli.command('hello'),type='decorator'\nline_star:380,line_end:380|char_star:4,char_end:29"[shape="box",fillcolor="white",style=filled];
"@app.cli.command('hello')\n    def hello_command():\n        click.echo('Hello, World!'),type='decorated_definition'\nline_star:380,line_end:382|char_star:4,char_end:35"->"@app.cli.command('hello'),type='decorator'\nline_star:380,line_end:380|char_star:4,char_end:29";
"def hello_command():\n        click.echo('Hello, World!'),type='function_definition'\nline_star:381,line_end:382|char_star:4,char_end:35"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.cli.command('hello')\n    def hello_command():\n        click.echo('Hello, World!'),type='decorated_definition'\nline_star:380,line_end:382|char_star:4,char_end:35"->"def hello_command():\n        click.echo('Hello, World!'),type='function_definition'\nline_star:381,line_end:382|char_star:4,char_end:35";
"hello_command,type='identifier'\nline_star:381,line_end:381|char_star:8,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"def hello_command():\n        click.echo('Hello, World!'),type='function_definition'\nline_star:381,line_end:382|char_star:4,char_end:35"->"hello_command,type='identifier'\nline_star:381,line_end:381|char_star:8,char_end:21";
"type='INFORMATION BLOCK'\nline_star:382,line_end:382|char_star:8,char_end:35"[shape="point",fillcolor="#121013",style=filled];
"def hello_command():\n        click.echo('Hello, World!'),type='function_definition'\nline_star:381,line_end:382|char_star:4,char_end:35"->"type='INFORMATION BLOCK'\nline_star:382,line_end:382|char_star:8,char_end:35";
"# invoke with command name,type='comment'\nline_star:385,line_end:385|char_star:4,char_end:30"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:380,line_end:390|char_star:4,char_end:35"->"# invoke with command name,type='comment'\nline_star:385,line_end:385|char_star:4,char_end:30";
"assert 'Hello' in result.output,type='assert_statement'\nline_star:387,line_end:387|char_star:4,char_end:35"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:380,line_end:390|char_star:4,char_end:35"->"assert 'Hello' in result.output,type='assert_statement'\nline_star:387,line_end:387|char_star:4,char_end:35";
"'Hello' in result.output,type='comparison_operator'\nline_star:387,line_end:387|char_star:11,char_end:35"[shape="box",fillcolor="white",style=filled];
"assert 'Hello' in result.output,type='assert_statement'\nline_star:387,line_end:387|char_star:4,char_end:35"->"'Hello' in result.output,type='comparison_operator'\nline_star:387,line_end:387|char_star:11,char_end:35";
"result.output,type='attribute'\nline_star:387,line_end:387|char_star:22,char_end:35"[shape="box",fillcolor="white",style=filled];
"'Hello' in result.output,type='comparison_operator'\nline_star:387,line_end:387|char_star:11,char_end:35"->"result.output,type='attribute'\nline_star:387,line_end:387|char_star:22,char_end:35";
"result,type='identifier'\nline_star:387,line_end:387|char_star:22,char_end:28"[shape="point",fillcolor="#121013",style=filled];
"result.output,type='attribute'\nline_star:387,line_end:387|char_star:22,char_end:35"->"result,type='identifier'\nline_star:387,line_end:387|char_star:22,char_end:28";
"output,type='identifier'\nline_star:387,line_end:387|char_star:29,char_end:35"[shape="point",fillcolor="#121013",style=filled];
"result.output,type='attribute'\nline_star:387,line_end:387|char_star:22,char_end:35"->"output,type='identifier'\nline_star:387,line_end:387|char_star:29,char_end:35";
"# invoke with command object,type='comment'\nline_star:388,line_end:388|char_star:4,char_end:32"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:380,line_end:390|char_star:4,char_end:35"->"# invoke with command object,type='comment'\nline_star:388,line_end:388|char_star:4,char_end:32";
"assert 'Hello' in result.output,type='assert_statement'\nline_star:390,line_end:390|char_star:4,char_end:35"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:380,line_end:390|char_star:4,char_end:35"->"assert 'Hello' in result.output,type='assert_statement'\nline_star:390,line_end:390|char_star:4,char_end:35";
"'Hello' in result.output,type='comparison_operator'\nline_star:390,line_end:390|char_star:11,char_end:35"[shape="box",fillcolor="white",style=filled];
"assert 'Hello' in result.output,type='assert_statement'\nline_star:390,line_end:390|char_star:4,char_end:35"->"'Hello' in result.output,type='comparison_operator'\nline_star:390,line_end:390|char_star:11,char_end:35";
"result.output,type='attribute'\nline_star:390,line_end:390|char_star:22,char_end:35"[shape="box",fillcolor="white",style=filled];
"'Hello' in result.output,type='comparison_operator'\nline_star:390,line_end:390|char_star:11,char_end:35"->"result.output,type='attribute'\nline_star:390,line_end:390|char_star:22,char_end:35";
"result,type='identifier'\nline_star:390,line_end:390|char_star:22,char_end:28"[shape="point",fillcolor="#121013",style=filled];
"result.output,type='attribute'\nline_star:390,line_end:390|char_star:22,char_end:35"->"result,type='identifier'\nline_star:390,line_end:390|char_star:22,char_end:28";
"output,type='identifier'\nline_star:390,line_end:390|char_star:29,char_end:35"[shape="point",fillcolor="#121013",style=filled];
"result.output,type='attribute'\nline_star:390,line_end:390|char_star:22,char_end:35"->"output,type='identifier'\nline_star:390,line_end:390|char_star:29,char_end:35";
"def test_cli_custom_obj(app):\n    class NS:\n        called = False\n\n    def create_app():\n        NS.called = True\n        return app\n\n    @app.cli.command('hello')\n    def hello_command():\n        click.echo('Hello, World!')\n\n    script_info = ScriptInfo(create_app=create_app)\n    runner = app.test_cli_runner()\n    runner.invoke(hello_command, obj=script_info)\n    assert NS.called,type='function_definition'\nline_star:393,line_end:408|char_star:0,char_end:20"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_cli_custom_obj(app):\n    class NS:\n        called = False\n\n    def create_app():\n        NS.called = True\n        return app\n\n    @app.cli.command('hello')\n    def hello_command():\n        click.echo('Hello, World!')\n\n    script_info = ScriptInfo(create_app=create_app)\n    runner = app.test_cli_runner()\n    runner.invoke(hello_command, obj=script_info)\n    assert NS.called,type='function_definition'\nline_star:393,line_end:408|char_star:0,char_end:20";
"test_cli_custom_obj,type='identifier'\nline_star:393,line_end:393|char_star:4,char_end:23"[shape="point",fillcolor="#121013",style=filled];
"def test_cli_custom_obj(app):\n    class NS:\n        called = False\n\n    def create_app():\n        NS.called = True\n        return app\n\n    @app.cli.command('hello')\n    def hello_command():\n        click.echo('Hello, World!')\n\n    script_info = ScriptInfo(create_app=create_app)\n    runner = app.test_cli_runner()\n    runner.invoke(hello_command, obj=script_info)\n    assert NS.called,type='function_definition'\nline_star:393,line_end:408|char_star:0,char_end:20"->"test_cli_custom_obj,type='identifier'\nline_star:393,line_end:393|char_star:4,char_end:23";
"(app),type='parameters'\nline_star:393,line_end:393|char_star:23,char_end:28"[shape="box",fillcolor="white",style=filled];
"def test_cli_custom_obj(app):\n    class NS:\n        called = False\n\n    def create_app():\n        NS.called = True\n        return app\n\n    @app.cli.command('hello')\n    def hello_command():\n        click.echo('Hello, World!')\n\n    script_info = ScriptInfo(create_app=create_app)\n    runner = app.test_cli_runner()\n    runner.invoke(hello_command, obj=script_info)\n    assert NS.called,type='function_definition'\nline_star:393,line_end:408|char_star:0,char_end:20"->"(app),type='parameters'\nline_star:393,line_end:393|char_star:23,char_end:28";
"app,type='identifier'\nline_star:393,line_end:393|char_star:24,char_end:27"[shape="point",fillcolor="#121013",style=filled];
"(app),type='parameters'\nline_star:393,line_end:393|char_star:23,char_end:28"->"app,type='identifier'\nline_star:393,line_end:393|char_star:24,char_end:27";
"type='INFORMATION BLOCK'\nline_star:394,line_end:408|char_star:4,char_end:20"[shape="point",fillcolor="#121013",style=filled];
"def test_cli_custom_obj(app):\n    class NS:\n        called = False\n\n    def create_app():\n        NS.called = True\n        return app\n\n    @app.cli.command('hello')\n    def hello_command():\n        click.echo('Hello, World!')\n\n    script_info = ScriptInfo(create_app=create_app)\n    runner = app.test_cli_runner()\n    runner.invoke(hello_command, obj=script_info)\n    assert NS.called,type='function_definition'\nline_star:393,line_end:408|char_star:0,char_end:20"->"type='INFORMATION BLOCK'\nline_star:394,line_end:408|char_star:4,char_end:20";
"class NS:\n        called = False,type='class_definition'\nline_star:394,line_end:395|char_star:4,char_end:22"[shape="box",fillcolor="#ffdf91",style=filled];
"type='INFORMATION BLOCK'\nline_star:394,line_end:408|char_star:4,char_end:20"->"class NS:\n        called = False,type='class_definition'\nline_star:394,line_end:395|char_star:4,char_end:22";
"NS,type='identifier'\nline_star:394,line_end:394|char_star:10,char_end:12"[shape="point",fillcolor="#121013",style=filled];
"class NS:\n        called = False,type='class_definition'\nline_star:394,line_end:395|char_star:4,char_end:22"->"NS,type='identifier'\nline_star:394,line_end:394|char_star:10,char_end:12";
"type='INFORMATION BLOCK'\nline_star:395,line_end:395|char_star:8,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"class NS:\n        called = False,type='class_definition'\nline_star:394,line_end:395|char_star:4,char_end:22"->"type='INFORMATION BLOCK'\nline_star:395,line_end:395|char_star:8,char_end:22";
"def create_app():\n        NS.called = True\n        return app,type='function_definition'\nline_star:397,line_end:399|char_star:4,char_end:18"[shape="box",fillcolor="#cee6b4",style=filled];
"type='INFORMATION BLOCK'\nline_star:394,line_end:408|char_star:4,char_end:20"->"def create_app():\n        NS.called = True\n        return app,type='function_definition'\nline_star:397,line_end:399|char_star:4,char_end:18";
"create_app,type='identifier'\nline_star:397,line_end:397|char_star:8,char_end:18"[shape="point",fillcolor="#121013",style=filled];
"def create_app():\n        NS.called = True\n        return app,type='function_definition'\nline_star:397,line_end:399|char_star:4,char_end:18"->"create_app,type='identifier'\nline_star:397,line_end:397|char_star:8,char_end:18";
"type='INFORMATION BLOCK'\nline_star:398,line_end:399|char_star:8,char_end:18"[shape="point",fillcolor="#121013",style=filled];
"def create_app():\n        NS.called = True\n        return app,type='function_definition'\nline_star:397,line_end:399|char_star:4,char_end:18"->"type='INFORMATION BLOCK'\nline_star:398,line_end:399|char_star:8,char_end:18";
"return app,type='return_statement'\nline_star:399,line_end:399|char_star:8,char_end:18"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:398,line_end:399|char_star:8,char_end:18"->"return app,type='return_statement'\nline_star:399,line_end:399|char_star:8,char_end:18";
"@app.cli.command('hello')\n    def hello_command():\n        click.echo('Hello, World!'),type='decorated_definition'\nline_star:401,line_end:403|char_star:4,char_end:35"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:394,line_end:408|char_star:4,char_end:20"->"@app.cli.command('hello')\n    def hello_command():\n        click.echo('Hello, World!'),type='decorated_definition'\nline_star:401,line_end:403|char_star:4,char_end:35";
"@app.cli.command('hello'),type='decorator'\nline_star:401,line_end:401|char_star:4,char_end:29"[shape="box",fillcolor="white",style=filled];
"@app.cli.command('hello')\n    def hello_command():\n        click.echo('Hello, World!'),type='decorated_definition'\nline_star:401,line_end:403|char_star:4,char_end:35"->"@app.cli.command('hello'),type='decorator'\nline_star:401,line_end:401|char_star:4,char_end:29";
"def hello_command():\n        click.echo('Hello, World!'),type='function_definition'\nline_star:402,line_end:403|char_star:4,char_end:35"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.cli.command('hello')\n    def hello_command():\n        click.echo('Hello, World!'),type='decorated_definition'\nline_star:401,line_end:403|char_star:4,char_end:35"->"def hello_command():\n        click.echo('Hello, World!'),type='function_definition'\nline_star:402,line_end:403|char_star:4,char_end:35";
"hello_command,type='identifier'\nline_star:402,line_end:402|char_star:8,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"def hello_command():\n        click.echo('Hello, World!'),type='function_definition'\nline_star:402,line_end:403|char_star:4,char_end:35"->"hello_command,type='identifier'\nline_star:402,line_end:402|char_star:8,char_end:21";
"type='INFORMATION BLOCK'\nline_star:403,line_end:403|char_star:8,char_end:35"[shape="point",fillcolor="#121013",style=filled];
"def hello_command():\n        click.echo('Hello, World!'),type='function_definition'\nline_star:402,line_end:403|char_star:4,char_end:35"->"type='INFORMATION BLOCK'\nline_star:403,line_end:403|char_star:8,char_end:35";
"assert NS.called,type='assert_statement'\nline_star:408,line_end:408|char_star:4,char_end:20"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:394,line_end:408|char_star:4,char_end:20"->"assert NS.called,type='assert_statement'\nline_star:408,line_end:408|char_star:4,char_end:20";
"NS.called,type='attribute'\nline_star:408,line_end:408|char_star:11,char_end:20"[shape="box",fillcolor="white",style=filled];
"assert NS.called,type='assert_statement'\nline_star:408,line_end:408|char_star:4,char_end:20"->"NS.called,type='attribute'\nline_star:408,line_end:408|char_star:11,char_end:20";
"NS,type='identifier'\nline_star:408,line_end:408|char_star:11,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"NS.called,type='attribute'\nline_star:408,line_end:408|char_star:11,char_end:20"->"NS,type='identifier'\nline_star:408,line_end:408|char_star:11,char_end:13";
"called,type='identifier'\nline_star:408,line_end:408|char_star:14,char_end:20"[shape="point",fillcolor="#121013",style=filled];
"NS.called,type='attribute'\nline_star:408,line_end:408|char_star:11,char_end:20"->"called,type='identifier'\nline_star:408,line_end:408|char_star:14,char_end:20";
"def test_client_pop_all_preserved(app, req_ctx, client):\n    @app.route('/')\n    def index():\n        # stream_with_context pushes a third context, preserved by client\n        return flask.Response(flask.stream_with_context('hello'))\n\n    # req_ctx fixture pushed an initial context, not marked preserved\n    with client:\n        # request pushes a second request context, preserved by client\n        client.get('/')\n\n    # only req_ctx fixture should still be pushed\n    assert flask._request_ctx_stack.top is req_ctx,type='function_definition'\nline_star:411,line_end:423|char_star:0,char_end:50"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_client_pop_all_preserved(app, req_ctx, client):\n    @app.route('/')\n    def index():\n        # stream_with_context pushes a third context, preserved by client\n        return flask.Response(flask.stream_with_context('hello'))\n\n    # req_ctx fixture pushed an initial context, not marked preserved\n    with client:\n        # request pushes a second request context, preserved by client\n        client.get('/')\n\n    # only req_ctx fixture should still be pushed\n    assert flask._request_ctx_stack.top is req_ctx,type='function_definition'\nline_star:411,line_end:423|char_star:0,char_end:50";
"test_client_pop_all_preserved,type='identifier'\nline_star:411,line_end:411|char_star:4,char_end:33"[shape="point",fillcolor="#121013",style=filled];
"def test_client_pop_all_preserved(app, req_ctx, client):\n    @app.route('/')\n    def index():\n        # stream_with_context pushes a third context, preserved by client\n        return flask.Response(flask.stream_with_context('hello'))\n\n    # req_ctx fixture pushed an initial context, not marked preserved\n    with client:\n        # request pushes a second request context, preserved by client\n        client.get('/')\n\n    # only req_ctx fixture should still be pushed\n    assert flask._request_ctx_stack.top is req_ctx,type='function_definition'\nline_star:411,line_end:423|char_star:0,char_end:50"->"test_client_pop_all_preserved,type='identifier'\nline_star:411,line_end:411|char_star:4,char_end:33";
"(app, req_ctx, client),type='parameters'\nline_star:411,line_end:411|char_star:33,char_end:55"[shape="box",fillcolor="white",style=filled];
"def test_client_pop_all_preserved(app, req_ctx, client):\n    @app.route('/')\n    def index():\n        # stream_with_context pushes a third context, preserved by client\n        return flask.Response(flask.stream_with_context('hello'))\n\n    # req_ctx fixture pushed an initial context, not marked preserved\n    with client:\n        # request pushes a second request context, preserved by client\n        client.get('/')\n\n    # only req_ctx fixture should still be pushed\n    assert flask._request_ctx_stack.top is req_ctx,type='function_definition'\nline_star:411,line_end:423|char_star:0,char_end:50"->"(app, req_ctx, client),type='parameters'\nline_star:411,line_end:411|char_star:33,char_end:55";
"app,type='identifier'\nline_star:411,line_end:411|char_star:34,char_end:37"[shape="point",fillcolor="#121013",style=filled];
"(app, req_ctx, client),type='parameters'\nline_star:411,line_end:411|char_star:33,char_end:55"->"app,type='identifier'\nline_star:411,line_end:411|char_star:34,char_end:37";
"req_ctx,type='identifier'\nline_star:411,line_end:411|char_star:39,char_end:46"[shape="point",fillcolor="#121013",style=filled];
"(app, req_ctx, client),type='parameters'\nline_star:411,line_end:411|char_star:33,char_end:55"->"req_ctx,type='identifier'\nline_star:411,line_end:411|char_star:39,char_end:46";
"client,type='identifier'\nline_star:411,line_end:411|char_star:48,char_end:54"[shape="point",fillcolor="#121013",style=filled];
"(app, req_ctx, client),type='parameters'\nline_star:411,line_end:411|char_star:33,char_end:55"->"client,type='identifier'\nline_star:411,line_end:411|char_star:48,char_end:54";
"type='INFORMATION BLOCK'\nline_star:412,line_end:423|char_star:4,char_end:50"[shape="point",fillcolor="#121013",style=filled];
"def test_client_pop_all_preserved(app, req_ctx, client):\n    @app.route('/')\n    def index():\n        # stream_with_context pushes a third context, preserved by client\n        return flask.Response(flask.stream_with_context('hello'))\n\n    # req_ctx fixture pushed an initial context, not marked preserved\n    with client:\n        # request pushes a second request context, preserved by client\n        client.get('/')\n\n    # only req_ctx fixture should still be pushed\n    assert flask._request_ctx_stack.top is req_ctx,type='function_definition'\nline_star:411,line_end:423|char_star:0,char_end:50"->"type='INFORMATION BLOCK'\nline_star:412,line_end:423|char_star:4,char_end:50";
"@app.route('/')\n    def index():\n        # stream_with_context pushes a third context, preserved by client\n        return flask.Response(flask.stream_with_context('hello')),type='decorated_definition'\nline_star:412,line_end:415|char_star:4,char_end:65"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:412,line_end:423|char_star:4,char_end:50"->"@app.route('/')\n    def index():\n        # stream_with_context pushes a third context, preserved by client\n        return flask.Response(flask.stream_with_context('hello')),type='decorated_definition'\nline_star:412,line_end:415|char_star:4,char_end:65";
"@app.route('/'),type='decorator'\nline_star:412,line_end:412|char_star:4,char_end:19"[shape="box",fillcolor="white",style=filled];
"@app.route('/')\n    def index():\n        # stream_with_context pushes a third context, preserved by client\n        return flask.Response(flask.stream_with_context('hello')),type='decorated_definition'\nline_star:412,line_end:415|char_star:4,char_end:65"->"@app.route('/'),type='decorator'\nline_star:412,line_end:412|char_star:4,char_end:19";
"def index():\n        # stream_with_context pushes a third context, preserved by client\n        return flask.Response(flask.stream_with_context('hello')),type='function_definition'\nline_star:413,line_end:415|char_star:4,char_end:65"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.route('/')\n    def index():\n        # stream_with_context pushes a third context, preserved by client\n        return flask.Response(flask.stream_with_context('hello')),type='decorated_definition'\nline_star:412,line_end:415|char_star:4,char_end:65"->"def index():\n        # stream_with_context pushes a third context, preserved by client\n        return flask.Response(flask.stream_with_context('hello')),type='function_definition'\nline_star:413,line_end:415|char_star:4,char_end:65";
"index,type='identifier'\nline_star:413,line_end:413|char_star:8,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"def index():\n        # stream_with_context pushes a third context, preserved by client\n        return flask.Response(flask.stream_with_context('hello')),type='function_definition'\nline_star:413,line_end:415|char_star:4,char_end:65"->"index,type='identifier'\nline_star:413,line_end:413|char_star:8,char_end:13";
"# stream_with_context pushes a third context, preserved by client,type='comment'\nline_star:414,line_end:414|char_star:8,char_end:73"[shape="box",fillcolor="#f0c929",style=filled];
"def index():\n        # stream_with_context pushes a third context, preserved by client\n        return flask.Response(flask.stream_with_context('hello')),type='function_definition'\nline_star:413,line_end:415|char_star:4,char_end:65"->"# stream_with_context pushes a third context, preserved by client,type='comment'\nline_star:414,line_end:414|char_star:8,char_end:73";
"type='INFORMATION BLOCK'\nline_star:415,line_end:415|char_star:8,char_end:65"[shape="point",fillcolor="#121013",style=filled];
"def index():\n        # stream_with_context pushes a third context, preserved by client\n        return flask.Response(flask.stream_with_context('hello')),type='function_definition'\nline_star:413,line_end:415|char_star:4,char_end:65"->"type='INFORMATION BLOCK'\nline_star:415,line_end:415|char_star:8,char_end:65";
"return flask.Response(flask.stream_with_context('hello')),type='return_statement'\nline_star:415,line_end:415|char_star:8,char_end:65"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:415,line_end:415|char_star:8,char_end:65"->"return flask.Response(flask.stream_with_context('hello')),type='return_statement'\nline_star:415,line_end:415|char_star:8,char_end:65";
"# req_ctx fixture pushed an initial context, not marked preserved,type='comment'\nline_star:417,line_end:417|char_star:4,char_end:69"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:412,line_end:423|char_star:4,char_end:50"->"# req_ctx fixture pushed an initial context, not marked preserved,type='comment'\nline_star:417,line_end:417|char_star:4,char_end:69";
"with client:\n        # request pushes a second request context, preserved by client\n        client.get('/'),type='with_statement'\nline_star:418,line_end:420|char_star:4,char_end:23"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:412,line_end:423|char_star:4,char_end:50"->"with client:\n        # request pushes a second request context, preserved by client\n        client.get('/'),type='with_statement'\nline_star:418,line_end:420|char_star:4,char_end:23";
"client,type='with_clause'\nline_star:418,line_end:418|char_star:9,char_end:15"[shape="box",fillcolor="white",style=filled];
"with client:\n        # request pushes a second request context, preserved by client\n        client.get('/'),type='with_statement'\nline_star:418,line_end:420|char_star:4,char_end:23"->"client,type='with_clause'\nline_star:418,line_end:418|char_star:9,char_end:15";
"# request pushes a second request context, preserved by client,type='comment'\nline_star:419,line_end:419|char_star:8,char_end:70"[shape="box",fillcolor="#f0c929",style=filled];
"with client:\n        # request pushes a second request context, preserved by client\n        client.get('/'),type='with_statement'\nline_star:418,line_end:420|char_star:4,char_end:23"->"# request pushes a second request context, preserved by client,type='comment'\nline_star:419,line_end:419|char_star:8,char_end:70";
"type='INFORMATION BLOCK'\nline_star:420,line_end:420|char_star:8,char_end:23"[shape="point",fillcolor="#121013",style=filled];
"with client:\n        # request pushes a second request context, preserved by client\n        client.get('/'),type='with_statement'\nline_star:418,line_end:420|char_star:4,char_end:23"->"type='INFORMATION BLOCK'\nline_star:420,line_end:420|char_star:8,char_end:23";
"# only req_ctx fixture should still be pushed,type='comment'\nline_star:422,line_end:422|char_star:4,char_end:49"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:412,line_end:423|char_star:4,char_end:50"->"# only req_ctx fixture should still be pushed,type='comment'\nline_star:422,line_end:422|char_star:4,char_end:49";
"assert flask._request_ctx_stack.top is req_ctx,type='assert_statement'\nline_star:423,line_end:423|char_star:4,char_end:50"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:412,line_end:423|char_star:4,char_end:50"->"assert flask._request_ctx_stack.top is req_ctx,type='assert_statement'\nline_star:423,line_end:423|char_star:4,char_end:50";
"flask._request_ctx_stack.top is req_ctx,type='comparison_operator'\nline_star:423,line_end:423|char_star:11,char_end:50"[shape="box",fillcolor="white",style=filled];
"assert flask._request_ctx_stack.top is req_ctx,type='assert_statement'\nline_star:423,line_end:423|char_star:4,char_end:50"->"flask._request_ctx_stack.top is req_ctx,type='comparison_operator'\nline_star:423,line_end:423|char_star:11,char_end:50";
"flask._request_ctx_stack.top,type='attribute'\nline_star:423,line_end:423|char_star:11,char_end:39"[shape="box",fillcolor="white",style=filled];
"flask._request_ctx_stack.top is req_ctx,type='comparison_operator'\nline_star:423,line_end:423|char_star:11,char_end:50"->"flask._request_ctx_stack.top,type='attribute'\nline_star:423,line_end:423|char_star:11,char_end:39";
"flask._request_ctx_stack,type='attribute'\nline_star:423,line_end:423|char_star:11,char_end:35"[shape="box",fillcolor="white",style=filled];
"flask._request_ctx_stack.top,type='attribute'\nline_star:423,line_end:423|char_star:11,char_end:39"->"flask._request_ctx_stack,type='attribute'\nline_star:423,line_end:423|char_star:11,char_end:35";
"flask,type='identifier'\nline_star:423,line_end:423|char_star:11,char_end:16"[shape="point",fillcolor="#121013",style=filled];
"flask._request_ctx_stack,type='attribute'\nline_star:423,line_end:423|char_star:11,char_end:35"->"flask,type='identifier'\nline_star:423,line_end:423|char_star:11,char_end:16";
"_request_ctx_stack,type='identifier'\nline_star:423,line_end:423|char_star:17,char_end:35"[shape="point",fillcolor="#121013",style=filled];
"flask._request_ctx_stack,type='attribute'\nline_star:423,line_end:423|char_star:11,char_end:35"->"_request_ctx_stack,type='identifier'\nline_star:423,line_end:423|char_star:17,char_end:35";
"top,type='identifier'\nline_star:423,line_end:423|char_star:36,char_end:39"[shape="point",fillcolor="#121013",style=filled];
"flask._request_ctx_stack.top,type='attribute'\nline_star:423,line_end:423|char_star:11,char_end:39"->"top,type='identifier'\nline_star:423,line_end:423|char_star:36,char_end:39";
"req_ctx,type='identifier'\nline_star:423,line_end:423|char_star:43,char_end:50"[shape="point",fillcolor="#121013",style=filled];
"flask._request_ctx_stack.top is req_ctx,type='comparison_operator'\nline_star:423,line_end:423|char_star:11,char_end:50"->"req_ctx,type='identifier'\nline_star:423,line_end:423|char_star:43,char_end:50";
"import click\nimport pytest\nimport werkzeug\nimport flask\nfrom flask import appcontext_popped\nfrom flask.cli import ScriptInfo\nfrom flask.json import jsonify\nfrom flask.testing import EnvironBuilder\nfrom flask.testing import FlaskCliRunner\nimport blinke"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"import click\nimport pytest\nimport werkzeug\nimport flask\nfrom flask import appcontext_popped\nfrom flask.cli import ScriptInfo\nfrom flask.json import jsonify\nfrom flask.testing import EnvironBuilder\nfrom flask.testing import FlaskCliRunner\nimport blinke"
}
