digraph G{
rankdir="LR";
"MODULE"[shape="box",fillcolor="white",style=filled];
"import io,type='import_statement'\nline_star:0,line_end:0|char_star:0,char_end:9"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"import io,type='import_statement'\nline_star:0,line_end:0|char_star:0,char_end:9";
"import os,type='import_statement'\nline_star:1,line_end:1|char_star:0,char_end:9"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"import os,type='import_statement'\nline_star:1,line_end:1|char_star:0,char_end:9";
"import pytest,type='import_statement'\nline_star:3,line_end:3|char_star:0,char_end:13"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"import pytest,type='import_statement'\nline_star:3,line_end:3|char_star:0,char_end:13";
"import flask,type='import_statement'\nline_star:5,line_end:5|char_star:0,char_end:12"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"import flask,type='import_statement'\nline_star:5,line_end:5|char_star:0,char_end:12";
"from flask.helpers import get_debug_flag,type='import_from_statement'\nline_star:6,line_end:6|char_star:0,char_end:40"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"from flask.helpers import get_debug_flag,type='import_from_statement'\nline_star:6,line_end:6|char_star:0,char_end:40";
"from flask.helpers import get_env,type='import_from_statement'\nline_star:7,line_end:7|char_star:0,char_end:33"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"from flask.helpers import get_env,type='import_from_statement'\nline_star:7,line_end:7|char_star:0,char_end:33";
"class FakePath:\n    '''Fake object to represent a ``PathLike object``.\n\n    This represents a ``pathlib.Path`` object in python 3.\n    See: https://www.python.org/dev/peps/pep-0519/\n    '''\n\n    def __init__(self, path):\n        self.path = path\n\n    def __fspath__(self):\n        return self.path,type='class_definition'\nline_star:10,line_end:21|char_star:0,char_end:24"[shape="box",fillcolor="#ffdf91",style=filled];
"MODULE"->"class FakePath:\n    '''Fake object to represent a ``PathLike object``.\n\n    This represents a ``pathlib.Path`` object in python 3.\n    See: https://www.python.org/dev/peps/pep-0519/\n    '''\n\n    def __init__(self, path):\n        self.path = path\n\n    def __fspath__(self):\n        return self.path,type='class_definition'\nline_star:10,line_end:21|char_star:0,char_end:24";
"FakePath,type='identifier'\nline_star:10,line_end:10|char_star:6,char_end:14"[shape="point",fillcolor="#121013",style=filled];
"class FakePath:\n    '''Fake object to represent a ``PathLike object``.\n\n    This represents a ``pathlib.Path`` object in python 3.\n    See: https://www.python.org/dev/peps/pep-0519/\n    '''\n\n    def __init__(self, path):\n        self.path = path\n\n    def __fspath__(self):\n        return self.path,type='class_definition'\nline_star:10,line_end:21|char_star:0,char_end:24"->"FakePath,type='identifier'\nline_star:10,line_end:10|char_star:6,char_end:14";
"type='INFORMATION BLOCK'\nline_star:11,line_end:21|char_star:4,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"class FakePath:\n    '''Fake object to represent a ``PathLike object``.\n\n    This represents a ``pathlib.Path`` object in python 3.\n    See: https://www.python.org/dev/peps/pep-0519/\n    '''\n\n    def __init__(self, path):\n        self.path = path\n\n    def __fspath__(self):\n        return self.path,type='class_definition'\nline_star:10,line_end:21|char_star:0,char_end:24"->"type='INFORMATION BLOCK'\nline_star:11,line_end:21|char_star:4,char_end:24";
"def __init__(self, path):\n        self.path = path,type='function_definition'\nline_star:17,line_end:18|char_star:4,char_end:24"[shape="box",fillcolor="#cee6b4",style=filled];
"type='INFORMATION BLOCK'\nline_star:11,line_end:21|char_star:4,char_end:24"->"def __init__(self, path):\n        self.path = path,type='function_definition'\nline_star:17,line_end:18|char_star:4,char_end:24";
"__init__,type='identifier'\nline_star:17,line_end:17|char_star:8,char_end:16"[shape="point",fillcolor="#121013",style=filled];
"def __init__(self, path):\n        self.path = path,type='function_definition'\nline_star:17,line_end:18|char_star:4,char_end:24"->"__init__,type='identifier'\nline_star:17,line_end:17|char_star:8,char_end:16";
"(self, path),type='parameters'\nline_star:17,line_end:17|char_star:16,char_end:28"[shape="box",fillcolor="white",style=filled];
"def __init__(self, path):\n        self.path = path,type='function_definition'\nline_star:17,line_end:18|char_star:4,char_end:24"->"(self, path),type='parameters'\nline_star:17,line_end:17|char_star:16,char_end:28";
"self,type='identifier'\nline_star:17,line_end:17|char_star:17,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"(self, path),type='parameters'\nline_star:17,line_end:17|char_star:16,char_end:28"->"self,type='identifier'\nline_star:17,line_end:17|char_star:17,char_end:21";
"path,type='identifier'\nline_star:17,line_end:17|char_star:23,char_end:27"[shape="point",fillcolor="#121013",style=filled];
"(self, path),type='parameters'\nline_star:17,line_end:17|char_star:16,char_end:28"->"path,type='identifier'\nline_star:17,line_end:17|char_star:23,char_end:27";
"type='INFORMATION BLOCK'\nline_star:18,line_end:18|char_star:8,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"def __init__(self, path):\n        self.path = path,type='function_definition'\nline_star:17,line_end:18|char_star:4,char_end:24"->"type='INFORMATION BLOCK'\nline_star:18,line_end:18|char_star:8,char_end:24";
"def __fspath__(self):\n        return self.path,type='function_definition'\nline_star:20,line_end:21|char_star:4,char_end:24"[shape="box",fillcolor="#cee6b4",style=filled];
"type='INFORMATION BLOCK'\nline_star:11,line_end:21|char_star:4,char_end:24"->"def __fspath__(self):\n        return self.path,type='function_definition'\nline_star:20,line_end:21|char_star:4,char_end:24";
"__fspath__,type='identifier'\nline_star:20,line_end:20|char_star:8,char_end:18"[shape="point",fillcolor="#121013",style=filled];
"def __fspath__(self):\n        return self.path,type='function_definition'\nline_star:20,line_end:21|char_star:4,char_end:24"->"__fspath__,type='identifier'\nline_star:20,line_end:20|char_star:8,char_end:18";
"(self),type='parameters'\nline_star:20,line_end:20|char_star:18,char_end:24"[shape="box",fillcolor="white",style=filled];
"def __fspath__(self):\n        return self.path,type='function_definition'\nline_star:20,line_end:21|char_star:4,char_end:24"->"(self),type='parameters'\nline_star:20,line_end:20|char_star:18,char_end:24";
"self,type='identifier'\nline_star:20,line_end:20|char_star:19,char_end:23"[shape="point",fillcolor="#121013",style=filled];
"(self),type='parameters'\nline_star:20,line_end:20|char_star:18,char_end:24"->"self,type='identifier'\nline_star:20,line_end:20|char_star:19,char_end:23";
"type='INFORMATION BLOCK'\nline_star:21,line_end:21|char_star:8,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"def __fspath__(self):\n        return self.path,type='function_definition'\nline_star:20,line_end:21|char_star:4,char_end:24"->"type='INFORMATION BLOCK'\nline_star:21,line_end:21|char_star:8,char_end:24";
"return self.path,type='return_statement'\nline_star:21,line_end:21|char_star:8,char_end:24"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:21,line_end:21|char_star:8,char_end:24"->"return self.path,type='return_statement'\nline_star:21,line_end:21|char_star:8,char_end:24";
"class PyBytesIO:\n    def __init__(self, *args, **kwargs):\n        self._io = io.BytesIO(*args, **kwargs)\n\n    def __getattr__(self, name):\n        return getattr(self._io, name),type='class_definition'\nline_star:24,line_end:29|char_star:0,char_end:38"[shape="box",fillcolor="#ffdf91",style=filled];
"MODULE"->"class PyBytesIO:\n    def __init__(self, *args, **kwargs):\n        self._io = io.BytesIO(*args, **kwargs)\n\n    def __getattr__(self, name):\n        return getattr(self._io, name),type='class_definition'\nline_star:24,line_end:29|char_star:0,char_end:38";
"PyBytesIO,type='identifier'\nline_star:24,line_end:24|char_star:6,char_end:15"[shape="point",fillcolor="#121013",style=filled];
"class PyBytesIO:\n    def __init__(self, *args, **kwargs):\n        self._io = io.BytesIO(*args, **kwargs)\n\n    def __getattr__(self, name):\n        return getattr(self._io, name),type='class_definition'\nline_star:24,line_end:29|char_star:0,char_end:38"->"PyBytesIO,type='identifier'\nline_star:24,line_end:24|char_star:6,char_end:15";
"type='INFORMATION BLOCK'\nline_star:25,line_end:29|char_star:4,char_end:38"[shape="point",fillcolor="#121013",style=filled];
"class PyBytesIO:\n    def __init__(self, *args, **kwargs):\n        self._io = io.BytesIO(*args, **kwargs)\n\n    def __getattr__(self, name):\n        return getattr(self._io, name),type='class_definition'\nline_star:24,line_end:29|char_star:0,char_end:38"->"type='INFORMATION BLOCK'\nline_star:25,line_end:29|char_star:4,char_end:38";
"def __init__(self, *args, **kwargs):\n        self._io = io.BytesIO(*args, **kwargs),type='function_definition'\nline_star:25,line_end:26|char_star:4,char_end:46"[shape="box",fillcolor="#cee6b4",style=filled];
"type='INFORMATION BLOCK'\nline_star:25,line_end:29|char_star:4,char_end:38"->"def __init__(self, *args, **kwargs):\n        self._io = io.BytesIO(*args, **kwargs),type='function_definition'\nline_star:25,line_end:26|char_star:4,char_end:46";
"__init__,type='identifier'\nline_star:25,line_end:25|char_star:8,char_end:16"[shape="point",fillcolor="#121013",style=filled];
"def __init__(self, *args, **kwargs):\n        self._io = io.BytesIO(*args, **kwargs),type='function_definition'\nline_star:25,line_end:26|char_star:4,char_end:46"->"__init__,type='identifier'\nline_star:25,line_end:25|char_star:8,char_end:16";
"(self, *args, **kwargs),type='parameters'\nline_star:25,line_end:25|char_star:16,char_end:39"[shape="box",fillcolor="white",style=filled];
"def __init__(self, *args, **kwargs):\n        self._io = io.BytesIO(*args, **kwargs),type='function_definition'\nline_star:25,line_end:26|char_star:4,char_end:46"->"(self, *args, **kwargs),type='parameters'\nline_star:25,line_end:25|char_star:16,char_end:39";
"self,type='identifier'\nline_star:25,line_end:25|char_star:17,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"(self, *args, **kwargs),type='parameters'\nline_star:25,line_end:25|char_star:16,char_end:39"->"self,type='identifier'\nline_star:25,line_end:25|char_star:17,char_end:21";
"*args,type='list_splat_pattern'\nline_star:25,line_end:25|char_star:23,char_end:28"[shape="box",fillcolor="white",style=filled];
"(self, *args, **kwargs),type='parameters'\nline_star:25,line_end:25|char_star:16,char_end:39"->"*args,type='list_splat_pattern'\nline_star:25,line_end:25|char_star:23,char_end:28";
"*,type='*'\nline_star:25,line_end:25|char_star:23,char_end:24"[shape="box",fillcolor="white",style=filled];
"*args,type='list_splat_pattern'\nline_star:25,line_end:25|char_star:23,char_end:28"->"*,type='*'\nline_star:25,line_end:25|char_star:23,char_end:24";
"args,type='identifier'\nline_star:25,line_end:25|char_star:24,char_end:28"[shape="point",fillcolor="#121013",style=filled];
"*args,type='list_splat_pattern'\nline_star:25,line_end:25|char_star:23,char_end:28"->"args,type='identifier'\nline_star:25,line_end:25|char_star:24,char_end:28";
"**kwargs,type='dictionary_splat_pattern'\nline_star:25,line_end:25|char_star:30,char_end:38"[shape="box",fillcolor="white",style=filled];
"(self, *args, **kwargs),type='parameters'\nline_star:25,line_end:25|char_star:16,char_end:39"->"**kwargs,type='dictionary_splat_pattern'\nline_star:25,line_end:25|char_star:30,char_end:38";
"**,type='**'\nline_star:25,line_end:25|char_star:30,char_end:32"[shape="box",fillcolor="white",style=filled];
"**kwargs,type='dictionary_splat_pattern'\nline_star:25,line_end:25|char_star:30,char_end:38"->"**,type='**'\nline_star:25,line_end:25|char_star:30,char_end:32";
"kwargs,type='identifier'\nline_star:25,line_end:25|char_star:32,char_end:38"[shape="point",fillcolor="#121013",style=filled];
"**kwargs,type='dictionary_splat_pattern'\nline_star:25,line_end:25|char_star:30,char_end:38"->"kwargs,type='identifier'\nline_star:25,line_end:25|char_star:32,char_end:38";
"type='INFORMATION BLOCK'\nline_star:26,line_end:26|char_star:8,char_end:46"[shape="point",fillcolor="#121013",style=filled];
"def __init__(self, *args, **kwargs):\n        self._io = io.BytesIO(*args, **kwargs),type='function_definition'\nline_star:25,line_end:26|char_star:4,char_end:46"->"type='INFORMATION BLOCK'\nline_star:26,line_end:26|char_star:8,char_end:46";
"def __getattr__(self, name):\n        return getattr(self._io, name),type='function_definition'\nline_star:28,line_end:29|char_star:4,char_end:38"[shape="box",fillcolor="#cee6b4",style=filled];
"type='INFORMATION BLOCK'\nline_star:25,line_end:29|char_star:4,char_end:38"->"def __getattr__(self, name):\n        return getattr(self._io, name),type='function_definition'\nline_star:28,line_end:29|char_star:4,char_end:38";
"__getattr__,type='identifier'\nline_star:28,line_end:28|char_star:8,char_end:19"[shape="point",fillcolor="#121013",style=filled];
"def __getattr__(self, name):\n        return getattr(self._io, name),type='function_definition'\nline_star:28,line_end:29|char_star:4,char_end:38"->"__getattr__,type='identifier'\nline_star:28,line_end:28|char_star:8,char_end:19";
"(self, name),type='parameters'\nline_star:28,line_end:28|char_star:19,char_end:31"[shape="box",fillcolor="white",style=filled];
"def __getattr__(self, name):\n        return getattr(self._io, name),type='function_definition'\nline_star:28,line_end:29|char_star:4,char_end:38"->"(self, name),type='parameters'\nline_star:28,line_end:28|char_star:19,char_end:31";
"self,type='identifier'\nline_star:28,line_end:28|char_star:20,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"(self, name),type='parameters'\nline_star:28,line_end:28|char_star:19,char_end:31"->"self,type='identifier'\nline_star:28,line_end:28|char_star:20,char_end:24";
"name,type='identifier'\nline_star:28,line_end:28|char_star:26,char_end:30"[shape="point",fillcolor="#121013",style=filled];
"(self, name),type='parameters'\nline_star:28,line_end:28|char_star:19,char_end:31"->"name,type='identifier'\nline_star:28,line_end:28|char_star:26,char_end:30";
"type='INFORMATION BLOCK'\nline_star:29,line_end:29|char_star:8,char_end:38"[shape="point",fillcolor="#121013",style=filled];
"def __getattr__(self, name):\n        return getattr(self._io, name),type='function_definition'\nline_star:28,line_end:29|char_star:4,char_end:38"->"type='INFORMATION BLOCK'\nline_star:29,line_end:29|char_star:8,char_end:38";
"return getattr(self._io, name),type='return_statement'\nline_star:29,line_end:29|char_star:8,char_end:38"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:29,line_end:29|char_star:8,char_end:38"->"return getattr(self._io, name),type='return_statement'\nline_star:29,line_end:29|char_star:8,char_end:38";
"class TestSendfile:\n    def test_send_file(self, app, req_ctx):\n        rv = flask.send_file('static/index.html')\n        assert rv.direct_passthrough\n        assert rv.mimetype == 'text/html'\n\n        with app.open_resource('static/index.html') as f:\n            rv.direct_passthrough = False\n            assert rv.data == f.read()\n\n        rv.close()\n\n    def test_static_file(self, app, req_ctx):\n        # Default max_age is None.\n\n        # Test with static file handler.\n        rv = app.send_static_file('index.html')\n        assert rv.cache_control.max_age is None\n        rv.close()\n\n        # Test with direct use of send_file.\n        rv = flask.send_file('static/index.html')\n        assert rv.cache_control.max_age is None\n        rv.close()\n\n        app.config['SEND_FILE_MAX_AGE_DEFAULT'] = 3600\n\n        # Test with static file handler.\n        rv = app.send_static_file('index.html')\n        assert rv.cache_control.max_age == 3600\n        rv.close()\n\n        # Test with direct use of send_file.\n        rv = flask.send_file('static/index.html')\n        assert rv.cache_control.max_age == 3600\n        rv.close()\n\n        # Test with pathlib.Path.\n        rv = app.send_static_file(FakePath('index.html'))\n        assert rv.cache_control.max_age == 3600\n        rv.close()\n\n        class StaticFileApp(flask.Flask):\n            def get_send_file_max_age(self, filename):\n                return 10\n\n        app = StaticFileApp(__name__)\n\n        with app.test_request_context():\n            # Test with static file handler.\n            rv = app.send_static_file('index.html')\n            assert rv.cache_control.max_age == 10\n            rv.close()\n\n            # Test with direct use of send_file.\n            rv = flask.send_file('static/index.html')\n            assert rv.cache_control.max_age == 10\n            rv.close()\n\n    def test_send_from_directory(self, app, req_ctx):\n        app.root_path = os.path.join(\n            os.path.dirname(__file__), 'test_apps', 'subdomaintestmodule'\n        )\n        rv = flask.send_from_directory('static', 'hello.txt')\n        rv.direct_passthrough = False\n        assert rv.data.strip() == b'Hello Subdomain'\n        rv.close(),type='class_definition'\nline_star:32,line_end:98|char_star:0,char_end:18"[shape="box",fillcolor="#ffdf91",style=filled];
"MODULE"->"class TestSendfile:\n    def test_send_file(self, app, req_ctx):\n        rv = flask.send_file('static/index.html')\n        assert rv.direct_passthrough\n        assert rv.mimetype == 'text/html'\n\n        with app.open_resource('static/index.html') as f:\n            rv.direct_passthrough = False\n            assert rv.data == f.read()\n\n        rv.close()\n\n    def test_static_file(self, app, req_ctx):\n        # Default max_age is None.\n\n        # Test with static file handler.\n        rv = app.send_static_file('index.html')\n        assert rv.cache_control.max_age is None\n        rv.close()\n\n        # Test with direct use of send_file.\n        rv = flask.send_file('static/index.html')\n        assert rv.cache_control.max_age is None\n        rv.close()\n\n        app.config['SEND_FILE_MAX_AGE_DEFAULT'] = 3600\n\n        # Test with static file handler.\n        rv = app.send_static_file('index.html')\n        assert rv.cache_control.max_age == 3600\n        rv.close()\n\n        # Test with direct use of send_file.\n        rv = flask.send_file('static/index.html')\n        assert rv.cache_control.max_age == 3600\n        rv.close()\n\n        # Test with pathlib.Path.\n        rv = app.send_static_file(FakePath('index.html'))\n        assert rv.cache_control.max_age == 3600\n        rv.close()\n\n        class StaticFileApp(flask.Flask):\n            def get_send_file_max_age(self, filename):\n                return 10\n\n        app = StaticFileApp(__name__)\n\n        with app.test_request_context():\n            # Test with static file handler.\n            rv = app.send_static_file('index.html')\n            assert rv.cache_control.max_age == 10\n            rv.close()\n\n            # Test with direct use of send_file.\n            rv = flask.send_file('static/index.html')\n            assert rv.cache_control.max_age == 10\n            rv.close()\n\n    def test_send_from_directory(self, app, req_ctx):\n        app.root_path = os.path.join(\n            os.path.dirname(__file__), 'test_apps', 'subdomaintestmodule'\n        )\n        rv = flask.send_from_directory('static', 'hello.txt')\n        rv.direct_passthrough = False\n        assert rv.data.strip() == b'Hello Subdomain'\n        rv.close(),type='class_definition'\nline_star:32,line_end:98|char_star:0,char_end:18";
"TestSendfile,type='identifier'\nline_star:32,line_end:32|char_star:6,char_end:18"[shape="point",fillcolor="#121013",style=filled];
"class TestSendfile:\n    def test_send_file(self, app, req_ctx):\n        rv = flask.send_file('static/index.html')\n        assert rv.direct_passthrough\n        assert rv.mimetype == 'text/html'\n\n        with app.open_resource('static/index.html') as f:\n            rv.direct_passthrough = False\n            assert rv.data == f.read()\n\n        rv.close()\n\n    def test_static_file(self, app, req_ctx):\n        # Default max_age is None.\n\n        # Test with static file handler.\n        rv = app.send_static_file('index.html')\n        assert rv.cache_control.max_age is None\n        rv.close()\n\n        # Test with direct use of send_file.\n        rv = flask.send_file('static/index.html')\n        assert rv.cache_control.max_age is None\n        rv.close()\n\n        app.config['SEND_FILE_MAX_AGE_DEFAULT'] = 3600\n\n        # Test with static file handler.\n        rv = app.send_static_file('index.html')\n        assert rv.cache_control.max_age == 3600\n        rv.close()\n\n        # Test with direct use of send_file.\n        rv = flask.send_file('static/index.html')\n        assert rv.cache_control.max_age == 3600\n        rv.close()\n\n        # Test with pathlib.Path.\n        rv = app.send_static_file(FakePath('index.html'))\n        assert rv.cache_control.max_age == 3600\n        rv.close()\n\n        class StaticFileApp(flask.Flask):\n            def get_send_file_max_age(self, filename):\n                return 10\n\n        app = StaticFileApp(__name__)\n\n        with app.test_request_context():\n            # Test with static file handler.\n            rv = app.send_static_file('index.html')\n            assert rv.cache_control.max_age == 10\n            rv.close()\n\n            # Test with direct use of send_file.\n            rv = flask.send_file('static/index.html')\n            assert rv.cache_control.max_age == 10\n            rv.close()\n\n    def test_send_from_directory(self, app, req_ctx):\n        app.root_path = os.path.join(\n            os.path.dirname(__file__), 'test_apps', 'subdomaintestmodule'\n        )\n        rv = flask.send_from_directory('static', 'hello.txt')\n        rv.direct_passthrough = False\n        assert rv.data.strip() == b'Hello Subdomain'\n        rv.close(),type='class_definition'\nline_star:32,line_end:98|char_star:0,char_end:18"->"TestSendfile,type='identifier'\nline_star:32,line_end:32|char_star:6,char_end:18";
"type='INFORMATION BLOCK'\nline_star:33,line_end:98|char_star:4,char_end:18"[shape="point",fillcolor="#121013",style=filled];
"class TestSendfile:\n    def test_send_file(self, app, req_ctx):\n        rv = flask.send_file('static/index.html')\n        assert rv.direct_passthrough\n        assert rv.mimetype == 'text/html'\n\n        with app.open_resource('static/index.html') as f:\n            rv.direct_passthrough = False\n            assert rv.data == f.read()\n\n        rv.close()\n\n    def test_static_file(self, app, req_ctx):\n        # Default max_age is None.\n\n        # Test with static file handler.\n        rv = app.send_static_file('index.html')\n        assert rv.cache_control.max_age is None\n        rv.close()\n\n        # Test with direct use of send_file.\n        rv = flask.send_file('static/index.html')\n        assert rv.cache_control.max_age is None\n        rv.close()\n\n        app.config['SEND_FILE_MAX_AGE_DEFAULT'] = 3600\n\n        # Test with static file handler.\n        rv = app.send_static_file('index.html')\n        assert rv.cache_control.max_age == 3600\n        rv.close()\n\n        # Test with direct use of send_file.\n        rv = flask.send_file('static/index.html')\n        assert rv.cache_control.max_age == 3600\n        rv.close()\n\n        # Test with pathlib.Path.\n        rv = app.send_static_file(FakePath('index.html'))\n        assert rv.cache_control.max_age == 3600\n        rv.close()\n\n        class StaticFileApp(flask.Flask):\n            def get_send_file_max_age(self, filename):\n                return 10\n\n        app = StaticFileApp(__name__)\n\n        with app.test_request_context():\n            # Test with static file handler.\n            rv = app.send_static_file('index.html')\n            assert rv.cache_control.max_age == 10\n            rv.close()\n\n            # Test with direct use of send_file.\n            rv = flask.send_file('static/index.html')\n            assert rv.cache_control.max_age == 10\n            rv.close()\n\n    def test_send_from_directory(self, app, req_ctx):\n        app.root_path = os.path.join(\n            os.path.dirname(__file__), 'test_apps', 'subdomaintestmodule'\n        )\n        rv = flask.send_from_directory('static', 'hello.txt')\n        rv.direct_passthrough = False\n        assert rv.data.strip() == b'Hello Subdomain'\n        rv.close(),type='class_definition'\nline_star:32,line_end:98|char_star:0,char_end:18"->"type='INFORMATION BLOCK'\nline_star:33,line_end:98|char_star:4,char_end:18";
"def test_send_file(self, app, req_ctx):\n        rv = flask.send_file('static/index.html')\n        assert rv.direct_passthrough\n        assert rv.mimetype == 'text/html'\n\n        with app.open_resource('static/index.html') as f:\n            rv.direct_passthrough = False\n            assert rv.data == f.read()\n\n        rv.close(),type='function_definition'\nline_star:33,line_end:42|char_star:4,char_end:18"[shape="box",fillcolor="#cee6b4",style=filled];
"type='INFORMATION BLOCK'\nline_star:33,line_end:98|char_star:4,char_end:18"->"def test_send_file(self, app, req_ctx):\n        rv = flask.send_file('static/index.html')\n        assert rv.direct_passthrough\n        assert rv.mimetype == 'text/html'\n\n        with app.open_resource('static/index.html') as f:\n            rv.direct_passthrough = False\n            assert rv.data == f.read()\n\n        rv.close(),type='function_definition'\nline_star:33,line_end:42|char_star:4,char_end:18";
"test_send_file,type='identifier'\nline_star:33,line_end:33|char_star:8,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"def test_send_file(self, app, req_ctx):\n        rv = flask.send_file('static/index.html')\n        assert rv.direct_passthrough\n        assert rv.mimetype == 'text/html'\n\n        with app.open_resource('static/index.html') as f:\n            rv.direct_passthrough = False\n            assert rv.data == f.read()\n\n        rv.close(),type='function_definition'\nline_star:33,line_end:42|char_star:4,char_end:18"->"test_send_file,type='identifier'\nline_star:33,line_end:33|char_star:8,char_end:22";
"(self, app, req_ctx),type='parameters'\nline_star:33,line_end:33|char_star:22,char_end:42"[shape="box",fillcolor="white",style=filled];
"def test_send_file(self, app, req_ctx):\n        rv = flask.send_file('static/index.html')\n        assert rv.direct_passthrough\n        assert rv.mimetype == 'text/html'\n\n        with app.open_resource('static/index.html') as f:\n            rv.direct_passthrough = False\n            assert rv.data == f.read()\n\n        rv.close(),type='function_definition'\nline_star:33,line_end:42|char_star:4,char_end:18"->"(self, app, req_ctx),type='parameters'\nline_star:33,line_end:33|char_star:22,char_end:42";
"self,type='identifier'\nline_star:33,line_end:33|char_star:23,char_end:27"[shape="point",fillcolor="#121013",style=filled];
"(self, app, req_ctx),type='parameters'\nline_star:33,line_end:33|char_star:22,char_end:42"->"self,type='identifier'\nline_star:33,line_end:33|char_star:23,char_end:27";
"app,type='identifier'\nline_star:33,line_end:33|char_star:29,char_end:32"[shape="point",fillcolor="#121013",style=filled];
"(self, app, req_ctx),type='parameters'\nline_star:33,line_end:33|char_star:22,char_end:42"->"app,type='identifier'\nline_star:33,line_end:33|char_star:29,char_end:32";
"req_ctx,type='identifier'\nline_star:33,line_end:33|char_star:34,char_end:41"[shape="point",fillcolor="#121013",style=filled];
"(self, app, req_ctx),type='parameters'\nline_star:33,line_end:33|char_star:22,char_end:42"->"req_ctx,type='identifier'\nline_star:33,line_end:33|char_star:34,char_end:41";
"type='INFORMATION BLOCK'\nline_star:34,line_end:42|char_star:8,char_end:18"[shape="point",fillcolor="#121013",style=filled];
"def test_send_file(self, app, req_ctx):\n        rv = flask.send_file('static/index.html')\n        assert rv.direct_passthrough\n        assert rv.mimetype == 'text/html'\n\n        with app.open_resource('static/index.html') as f:\n            rv.direct_passthrough = False\n            assert rv.data == f.read()\n\n        rv.close(),type='function_definition'\nline_star:33,line_end:42|char_star:4,char_end:18"->"type='INFORMATION BLOCK'\nline_star:34,line_end:42|char_star:8,char_end:18";
"assert rv.direct_passthrough,type='assert_statement'\nline_star:35,line_end:35|char_star:8,char_end:36"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:34,line_end:42|char_star:8,char_end:18"->"assert rv.direct_passthrough,type='assert_statement'\nline_star:35,line_end:35|char_star:8,char_end:36";
"rv.direct_passthrough,type='attribute'\nline_star:35,line_end:35|char_star:15,char_end:36"[shape="box",fillcolor="white",style=filled];
"assert rv.direct_passthrough,type='assert_statement'\nline_star:35,line_end:35|char_star:8,char_end:36"->"rv.direct_passthrough,type='attribute'\nline_star:35,line_end:35|char_star:15,char_end:36";
"rv,type='identifier'\nline_star:35,line_end:35|char_star:15,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"rv.direct_passthrough,type='attribute'\nline_star:35,line_end:35|char_star:15,char_end:36"->"rv,type='identifier'\nline_star:35,line_end:35|char_star:15,char_end:17";
"direct_passthrough,type='identifier'\nline_star:35,line_end:35|char_star:18,char_end:36"[shape="point",fillcolor="#121013",style=filled];
"rv.direct_passthrough,type='attribute'\nline_star:35,line_end:35|char_star:15,char_end:36"->"direct_passthrough,type='identifier'\nline_star:35,line_end:35|char_star:18,char_end:36";
"assert rv.mimetype == 'text/html',type='assert_statement'\nline_star:36,line_end:36|char_star:8,char_end:41"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:34,line_end:42|char_star:8,char_end:18"->"assert rv.mimetype == 'text/html',type='assert_statement'\nline_star:36,line_end:36|char_star:8,char_end:41";
"rv.mimetype == 'text/html',type='comparison_operator'\nline_star:36,line_end:36|char_star:15,char_end:41"[shape="box",fillcolor="white",style=filled];
"assert rv.mimetype == 'text/html',type='assert_statement'\nline_star:36,line_end:36|char_star:8,char_end:41"->"rv.mimetype == 'text/html',type='comparison_operator'\nline_star:36,line_end:36|char_star:15,char_end:41";
"rv.mimetype,type='attribute'\nline_star:36,line_end:36|char_star:15,char_end:26"[shape="box",fillcolor="white",style=filled];
"rv.mimetype == 'text/html',type='comparison_operator'\nline_star:36,line_end:36|char_star:15,char_end:41"->"rv.mimetype,type='attribute'\nline_star:36,line_end:36|char_star:15,char_end:26";
"rv,type='identifier'\nline_star:36,line_end:36|char_star:15,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"rv.mimetype,type='attribute'\nline_star:36,line_end:36|char_star:15,char_end:26"->"rv,type='identifier'\nline_star:36,line_end:36|char_star:15,char_end:17";
"mimetype,type='identifier'\nline_star:36,line_end:36|char_star:18,char_end:26"[shape="point",fillcolor="#121013",style=filled];
"rv.mimetype,type='attribute'\nline_star:36,line_end:36|char_star:15,char_end:26"->"mimetype,type='identifier'\nline_star:36,line_end:36|char_star:18,char_end:26";
"with app.open_resource('static/index.html') as f:\n            rv.direct_passthrough = False\n            assert rv.data == f.read(),type='with_statement'\nline_star:38,line_end:40|char_star:8,char_end:38"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:34,line_end:42|char_star:8,char_end:18"->"with app.open_resource('static/index.html') as f:\n            rv.direct_passthrough = False\n            assert rv.data == f.read(),type='with_statement'\nline_star:38,line_end:40|char_star:8,char_end:38";
"app.open_resource('static/index.html') as f,type='with_clause'\nline_star:38,line_end:38|char_star:13,char_end:56"[shape="box",fillcolor="white",style=filled];
"with app.open_resource('static/index.html') as f:\n            rv.direct_passthrough = False\n            assert rv.data == f.read(),type='with_statement'\nline_star:38,line_end:40|char_star:8,char_end:38"->"app.open_resource('static/index.html') as f,type='with_clause'\nline_star:38,line_end:38|char_star:13,char_end:56";
"type='INFORMATION BLOCK'\nline_star:39,line_end:40|char_star:12,char_end:38"[shape="point",fillcolor="#121013",style=filled];
"with app.open_resource('static/index.html') as f:\n            rv.direct_passthrough = False\n            assert rv.data == f.read(),type='with_statement'\nline_star:38,line_end:40|char_star:8,char_end:38"->"type='INFORMATION BLOCK'\nline_star:39,line_end:40|char_star:12,char_end:38";
"assert rv.data == f.read(),type='assert_statement'\nline_star:40,line_end:40|char_star:12,char_end:38"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:39,line_end:40|char_star:12,char_end:38"->"assert rv.data == f.read(),type='assert_statement'\nline_star:40,line_end:40|char_star:12,char_end:38";
"rv.data == f.read(),type='comparison_operator'\nline_star:40,line_end:40|char_star:19,char_end:38"[shape="box",fillcolor="white",style=filled];
"assert rv.data == f.read(),type='assert_statement'\nline_star:40,line_end:40|char_star:12,char_end:38"->"rv.data == f.read(),type='comparison_operator'\nline_star:40,line_end:40|char_star:19,char_end:38";
"rv.data,type='attribute'\nline_star:40,line_end:40|char_star:19,char_end:26"[shape="box",fillcolor="white",style=filled];
"rv.data == f.read(),type='comparison_operator'\nline_star:40,line_end:40|char_star:19,char_end:38"->"rv.data,type='attribute'\nline_star:40,line_end:40|char_star:19,char_end:26";
"rv,type='identifier'\nline_star:40,line_end:40|char_star:19,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"rv.data,type='attribute'\nline_star:40,line_end:40|char_star:19,char_end:26"->"rv,type='identifier'\nline_star:40,line_end:40|char_star:19,char_end:21";
"data,type='identifier'\nline_star:40,line_end:40|char_star:22,char_end:26"[shape="point",fillcolor="#121013",style=filled];
"rv.data,type='attribute'\nline_star:40,line_end:40|char_star:19,char_end:26"->"data,type='identifier'\nline_star:40,line_end:40|char_star:22,char_end:26";
"f.read(),type='call'\nline_star:40,line_end:40|char_star:30,char_end:38"[shape="box",fillcolor="white",style=filled];
"rv.data == f.read(),type='comparison_operator'\nline_star:40,line_end:40|char_star:19,char_end:38"->"f.read(),type='call'\nline_star:40,line_end:40|char_star:30,char_end:38";
"f.read,type='attribute'\nline_star:40,line_end:40|char_star:30,char_end:36"[shape="box",fillcolor="white",style=filled];
"f.read(),type='call'\nline_star:40,line_end:40|char_star:30,char_end:38"->"f.read,type='attribute'\nline_star:40,line_end:40|char_star:30,char_end:36";
"f,type='identifier'\nline_star:40,line_end:40|char_star:30,char_end:31"[shape="point",fillcolor="#121013",style=filled];
"f.read,type='attribute'\nline_star:40,line_end:40|char_star:30,char_end:36"->"f,type='identifier'\nline_star:40,line_end:40|char_star:30,char_end:31";
"read,type='identifier'\nline_star:40,line_end:40|char_star:32,char_end:36"[shape="point",fillcolor="#121013",style=filled];
"f.read,type='attribute'\nline_star:40,line_end:40|char_star:30,char_end:36"->"read,type='identifier'\nline_star:40,line_end:40|char_star:32,char_end:36";
"def test_static_file(self, app, req_ctx):\n        # Default max_age is None.\n\n        # Test with static file handler.\n        rv = app.send_static_file('index.html')\n        assert rv.cache_control.max_age is None\n        rv.close()\n\n        # Test with direct use of send_file.\n        rv = flask.send_file('static/index.html')\n        assert rv.cache_control.max_age is None\n        rv.close()\n\n        app.config['SEND_FILE_MAX_AGE_DEFAULT'] = 3600\n\n        # Test with static file handler.\n        rv = app.send_static_file('index.html')\n        assert rv.cache_control.max_age == 3600\n        rv.close()\n\n        # Test with direct use of send_file.\n        rv = flask.send_file('static/index.html')\n        assert rv.cache_control.max_age == 3600\n        rv.close()\n\n        # Test with pathlib.Path.\n        rv = app.send_static_file(FakePath('index.html'))\n        assert rv.cache_control.max_age == 3600\n        rv.close()\n\n        class StaticFileApp(flask.Flask):\n            def get_send_file_max_age(self, filename):\n                return 10\n\n        app = StaticFileApp(__name__)\n\n        with app.test_request_context():\n            # Test with static file handler.\n            rv = app.send_static_file('index.html')\n            assert rv.cache_control.max_age == 10\n            rv.close()\n\n            # Test with direct use of send_file.\n            rv = flask.send_file('static/index.html')\n            assert rv.cache_control.max_age == 10\n            rv.close(),type='function_definition'\nline_star:44,line_end:89|char_star:4,char_end:22"[shape="box",fillcolor="#cee6b4",style=filled];
"type='INFORMATION BLOCK'\nline_star:33,line_end:98|char_star:4,char_end:18"->"def test_static_file(self, app, req_ctx):\n        # Default max_age is None.\n\n        # Test with static file handler.\n        rv = app.send_static_file('index.html')\n        assert rv.cache_control.max_age is None\n        rv.close()\n\n        # Test with direct use of send_file.\n        rv = flask.send_file('static/index.html')\n        assert rv.cache_control.max_age is None\n        rv.close()\n\n        app.config['SEND_FILE_MAX_AGE_DEFAULT'] = 3600\n\n        # Test with static file handler.\n        rv = app.send_static_file('index.html')\n        assert rv.cache_control.max_age == 3600\n        rv.close()\n\n        # Test with direct use of send_file.\n        rv = flask.send_file('static/index.html')\n        assert rv.cache_control.max_age == 3600\n        rv.close()\n\n        # Test with pathlib.Path.\n        rv = app.send_static_file(FakePath('index.html'))\n        assert rv.cache_control.max_age == 3600\n        rv.close()\n\n        class StaticFileApp(flask.Flask):\n            def get_send_file_max_age(self, filename):\n                return 10\n\n        app = StaticFileApp(__name__)\n\n        with app.test_request_context():\n            # Test with static file handler.\n            rv = app.send_static_file('index.html')\n            assert rv.cache_control.max_age == 10\n            rv.close()\n\n            # Test with direct use of send_file.\n            rv = flask.send_file('static/index.html')\n            assert rv.cache_control.max_age == 10\n            rv.close(),type='function_definition'\nline_star:44,line_end:89|char_star:4,char_end:22";
"test_static_file,type='identifier'\nline_star:44,line_end:44|char_star:8,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"def test_static_file(self, app, req_ctx):\n        # Default max_age is None.\n\n        # Test with static file handler.\n        rv = app.send_static_file('index.html')\n        assert rv.cache_control.max_age is None\n        rv.close()\n\n        # Test with direct use of send_file.\n        rv = flask.send_file('static/index.html')\n        assert rv.cache_control.max_age is None\n        rv.close()\n\n        app.config['SEND_FILE_MAX_AGE_DEFAULT'] = 3600\n\n        # Test with static file handler.\n        rv = app.send_static_file('index.html')\n        assert rv.cache_control.max_age == 3600\n        rv.close()\n\n        # Test with direct use of send_file.\n        rv = flask.send_file('static/index.html')\n        assert rv.cache_control.max_age == 3600\n        rv.close()\n\n        # Test with pathlib.Path.\n        rv = app.send_static_file(FakePath('index.html'))\n        assert rv.cache_control.max_age == 3600\n        rv.close()\n\n        class StaticFileApp(flask.Flask):\n            def get_send_file_max_age(self, filename):\n                return 10\n\n        app = StaticFileApp(__name__)\n\n        with app.test_request_context():\n            # Test with static file handler.\n            rv = app.send_static_file('index.html')\n            assert rv.cache_control.max_age == 10\n            rv.close()\n\n            # Test with direct use of send_file.\n            rv = flask.send_file('static/index.html')\n            assert rv.cache_control.max_age == 10\n            rv.close(),type='function_definition'\nline_star:44,line_end:89|char_star:4,char_end:22"->"test_static_file,type='identifier'\nline_star:44,line_end:44|char_star:8,char_end:24";
"(self, app, req_ctx),type='parameters'\nline_star:44,line_end:44|char_star:24,char_end:44"[shape="box",fillcolor="white",style=filled];
"def test_static_file(self, app, req_ctx):\n        # Default max_age is None.\n\n        # Test with static file handler.\n        rv = app.send_static_file('index.html')\n        assert rv.cache_control.max_age is None\n        rv.close()\n\n        # Test with direct use of send_file.\n        rv = flask.send_file('static/index.html')\n        assert rv.cache_control.max_age is None\n        rv.close()\n\n        app.config['SEND_FILE_MAX_AGE_DEFAULT'] = 3600\n\n        # Test with static file handler.\n        rv = app.send_static_file('index.html')\n        assert rv.cache_control.max_age == 3600\n        rv.close()\n\n        # Test with direct use of send_file.\n        rv = flask.send_file('static/index.html')\n        assert rv.cache_control.max_age == 3600\n        rv.close()\n\n        # Test with pathlib.Path.\n        rv = app.send_static_file(FakePath('index.html'))\n        assert rv.cache_control.max_age == 3600\n        rv.close()\n\n        class StaticFileApp(flask.Flask):\n            def get_send_file_max_age(self, filename):\n                return 10\n\n        app = StaticFileApp(__name__)\n\n        with app.test_request_context():\n            # Test with static file handler.\n            rv = app.send_static_file('index.html')\n            assert rv.cache_control.max_age == 10\n            rv.close()\n\n            # Test with direct use of send_file.\n            rv = flask.send_file('static/index.html')\n            assert rv.cache_control.max_age == 10\n            rv.close(),type='function_definition'\nline_star:44,line_end:89|char_star:4,char_end:22"->"(self, app, req_ctx),type='parameters'\nline_star:44,line_end:44|char_star:24,char_end:44";
"self,type='identifier'\nline_star:44,line_end:44|char_star:25,char_end:29"[shape="point",fillcolor="#121013",style=filled];
"(self, app, req_ctx),type='parameters'\nline_star:44,line_end:44|char_star:24,char_end:44"->"self,type='identifier'\nline_star:44,line_end:44|char_star:25,char_end:29";
"app,type='identifier'\nline_star:44,line_end:44|char_star:31,char_end:34"[shape="point",fillcolor="#121013",style=filled];
"(self, app, req_ctx),type='parameters'\nline_star:44,line_end:44|char_star:24,char_end:44"->"app,type='identifier'\nline_star:44,line_end:44|char_star:31,char_end:34";
"req_ctx,type='identifier'\nline_star:44,line_end:44|char_star:36,char_end:43"[shape="point",fillcolor="#121013",style=filled];
"(self, app, req_ctx),type='parameters'\nline_star:44,line_end:44|char_star:24,char_end:44"->"req_ctx,type='identifier'\nline_star:44,line_end:44|char_star:36,char_end:43";
"# Default max_age is None.,type='comment'\nline_star:45,line_end:45|char_star:8,char_end:34"[shape="box",fillcolor="#f0c929",style=filled];
"def test_static_file(self, app, req_ctx):\n        # Default max_age is None.\n\n        # Test with static file handler.\n        rv = app.send_static_file('index.html')\n        assert rv.cache_control.max_age is None\n        rv.close()\n\n        # Test with direct use of send_file.\n        rv = flask.send_file('static/index.html')\n        assert rv.cache_control.max_age is None\n        rv.close()\n\n        app.config['SEND_FILE_MAX_AGE_DEFAULT'] = 3600\n\n        # Test with static file handler.\n        rv = app.send_static_file('index.html')\n        assert rv.cache_control.max_age == 3600\n        rv.close()\n\n        # Test with direct use of send_file.\n        rv = flask.send_file('static/index.html')\n        assert rv.cache_control.max_age == 3600\n        rv.close()\n\n        # Test with pathlib.Path.\n        rv = app.send_static_file(FakePath('index.html'))\n        assert rv.cache_control.max_age == 3600\n        rv.close()\n\n        class StaticFileApp(flask.Flask):\n            def get_send_file_max_age(self, filename):\n                return 10\n\n        app = StaticFileApp(__name__)\n\n        with app.test_request_context():\n            # Test with static file handler.\n            rv = app.send_static_file('index.html')\n            assert rv.cache_control.max_age == 10\n            rv.close()\n\n            # Test with direct use of send_file.\n            rv = flask.send_file('static/index.html')\n            assert rv.cache_control.max_age == 10\n            rv.close(),type='function_definition'\nline_star:44,line_end:89|char_star:4,char_end:22"->"# Default max_age is None.,type='comment'\nline_star:45,line_end:45|char_star:8,char_end:34";
"# Test with static file handler.,type='comment'\nline_star:47,line_end:47|char_star:8,char_end:40"[shape="box",fillcolor="#f0c929",style=filled];
"def test_static_file(self, app, req_ctx):\n        # Default max_age is None.\n\n        # Test with static file handler.\n        rv = app.send_static_file('index.html')\n        assert rv.cache_control.max_age is None\n        rv.close()\n\n        # Test with direct use of send_file.\n        rv = flask.send_file('static/index.html')\n        assert rv.cache_control.max_age is None\n        rv.close()\n\n        app.config['SEND_FILE_MAX_AGE_DEFAULT'] = 3600\n\n        # Test with static file handler.\n        rv = app.send_static_file('index.html')\n        assert rv.cache_control.max_age == 3600\n        rv.close()\n\n        # Test with direct use of send_file.\n        rv = flask.send_file('static/index.html')\n        assert rv.cache_control.max_age == 3600\n        rv.close()\n\n        # Test with pathlib.Path.\n        rv = app.send_static_file(FakePath('index.html'))\n        assert rv.cache_control.max_age == 3600\n        rv.close()\n\n        class StaticFileApp(flask.Flask):\n            def get_send_file_max_age(self, filename):\n                return 10\n\n        app = StaticFileApp(__name__)\n\n        with app.test_request_context():\n            # Test with static file handler.\n            rv = app.send_static_file('index.html')\n            assert rv.cache_control.max_age == 10\n            rv.close()\n\n            # Test with direct use of send_file.\n            rv = flask.send_file('static/index.html')\n            assert rv.cache_control.max_age == 10\n            rv.close(),type='function_definition'\nline_star:44,line_end:89|char_star:4,char_end:22"->"# Test with static file handler.,type='comment'\nline_star:47,line_end:47|char_star:8,char_end:40";
"type='INFORMATION BLOCK'\nline_star:48,line_end:89|char_star:8,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"def test_static_file(self, app, req_ctx):\n        # Default max_age is None.\n\n        # Test with static file handler.\n        rv = app.send_static_file('index.html')\n        assert rv.cache_control.max_age is None\n        rv.close()\n\n        # Test with direct use of send_file.\n        rv = flask.send_file('static/index.html')\n        assert rv.cache_control.max_age is None\n        rv.close()\n\n        app.config['SEND_FILE_MAX_AGE_DEFAULT'] = 3600\n\n        # Test with static file handler.\n        rv = app.send_static_file('index.html')\n        assert rv.cache_control.max_age == 3600\n        rv.close()\n\n        # Test with direct use of send_file.\n        rv = flask.send_file('static/index.html')\n        assert rv.cache_control.max_age == 3600\n        rv.close()\n\n        # Test with pathlib.Path.\n        rv = app.send_static_file(FakePath('index.html'))\n        assert rv.cache_control.max_age == 3600\n        rv.close()\n\n        class StaticFileApp(flask.Flask):\n            def get_send_file_max_age(self, filename):\n                return 10\n\n        app = StaticFileApp(__name__)\n\n        with app.test_request_context():\n            # Test with static file handler.\n            rv = app.send_static_file('index.html')\n            assert rv.cache_control.max_age == 10\n            rv.close()\n\n            # Test with direct use of send_file.\n            rv = flask.send_file('static/index.html')\n            assert rv.cache_control.max_age == 10\n            rv.close(),type='function_definition'\nline_star:44,line_end:89|char_star:4,char_end:22"->"type='INFORMATION BLOCK'\nline_star:48,line_end:89|char_star:8,char_end:22";
"assert rv.cache_control.max_age is None,type='assert_statement'\nline_star:49,line_end:49|char_star:8,char_end:47"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:48,line_end:89|char_star:8,char_end:22"->"assert rv.cache_control.max_age is None,type='assert_statement'\nline_star:49,line_end:49|char_star:8,char_end:47";
"rv.cache_control.max_age is None,type='comparison_operator'\nline_star:49,line_end:49|char_star:15,char_end:47"[shape="box",fillcolor="white",style=filled];
"assert rv.cache_control.max_age is None,type='assert_statement'\nline_star:49,line_end:49|char_star:8,char_end:47"->"rv.cache_control.max_age is None,type='comparison_operator'\nline_star:49,line_end:49|char_star:15,char_end:47";
"rv.cache_control.max_age,type='attribute'\nline_star:49,line_end:49|char_star:15,char_end:39"[shape="box",fillcolor="white",style=filled];
"rv.cache_control.max_age is None,type='comparison_operator'\nline_star:49,line_end:49|char_star:15,char_end:47"->"rv.cache_control.max_age,type='attribute'\nline_star:49,line_end:49|char_star:15,char_end:39";
"rv.cache_control,type='attribute'\nline_star:49,line_end:49|char_star:15,char_end:31"[shape="box",fillcolor="white",style=filled];
"rv.cache_control.max_age,type='attribute'\nline_star:49,line_end:49|char_star:15,char_end:39"->"rv.cache_control,type='attribute'\nline_star:49,line_end:49|char_star:15,char_end:31";
"rv,type='identifier'\nline_star:49,line_end:49|char_star:15,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"rv.cache_control,type='attribute'\nline_star:49,line_end:49|char_star:15,char_end:31"->"rv,type='identifier'\nline_star:49,line_end:49|char_star:15,char_end:17";
"cache_control,type='identifier'\nline_star:49,line_end:49|char_star:18,char_end:31"[shape="point",fillcolor="#121013",style=filled];
"rv.cache_control,type='attribute'\nline_star:49,line_end:49|char_star:15,char_end:31"->"cache_control,type='identifier'\nline_star:49,line_end:49|char_star:18,char_end:31";
"max_age,type='identifier'\nline_star:49,line_end:49|char_star:32,char_end:39"[shape="point",fillcolor="#121013",style=filled];
"rv.cache_control.max_age,type='attribute'\nline_star:49,line_end:49|char_star:15,char_end:39"->"max_age,type='identifier'\nline_star:49,line_end:49|char_star:32,char_end:39";
"# Test with direct use of send_file.,type='comment'\nline_star:52,line_end:52|char_star:8,char_end:44"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:48,line_end:89|char_star:8,char_end:22"->"# Test with direct use of send_file.,type='comment'\nline_star:52,line_end:52|char_star:8,char_end:44";
"assert rv.cache_control.max_age is None,type='assert_statement'\nline_star:54,line_end:54|char_star:8,char_end:47"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:48,line_end:89|char_star:8,char_end:22"->"assert rv.cache_control.max_age is None,type='assert_statement'\nline_star:54,line_end:54|char_star:8,char_end:47";
"rv.cache_control.max_age is None,type='comparison_operator'\nline_star:54,line_end:54|char_star:15,char_end:47"[shape="box",fillcolor="white",style=filled];
"assert rv.cache_control.max_age is None,type='assert_statement'\nline_star:54,line_end:54|char_star:8,char_end:47"->"rv.cache_control.max_age is None,type='comparison_operator'\nline_star:54,line_end:54|char_star:15,char_end:47";
"rv.cache_control.max_age,type='attribute'\nline_star:54,line_end:54|char_star:15,char_end:39"[shape="box",fillcolor="white",style=filled];
"rv.cache_control.max_age is None,type='comparison_operator'\nline_star:54,line_end:54|char_star:15,char_end:47"->"rv.cache_control.max_age,type='attribute'\nline_star:54,line_end:54|char_star:15,char_end:39";
"rv.cache_control,type='attribute'\nline_star:54,line_end:54|char_star:15,char_end:31"[shape="box",fillcolor="white",style=filled];
"rv.cache_control.max_age,type='attribute'\nline_star:54,line_end:54|char_star:15,char_end:39"->"rv.cache_control,type='attribute'\nline_star:54,line_end:54|char_star:15,char_end:31";
"rv,type='identifier'\nline_star:54,line_end:54|char_star:15,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"rv.cache_control,type='attribute'\nline_star:54,line_end:54|char_star:15,char_end:31"->"rv,type='identifier'\nline_star:54,line_end:54|char_star:15,char_end:17";
"cache_control,type='identifier'\nline_star:54,line_end:54|char_star:18,char_end:31"[shape="point",fillcolor="#121013",style=filled];
"rv.cache_control,type='attribute'\nline_star:54,line_end:54|char_star:15,char_end:31"->"cache_control,type='identifier'\nline_star:54,line_end:54|char_star:18,char_end:31";
"max_age,type='identifier'\nline_star:54,line_end:54|char_star:32,char_end:39"[shape="point",fillcolor="#121013",style=filled];
"rv.cache_control.max_age,type='attribute'\nline_star:54,line_end:54|char_star:15,char_end:39"->"max_age,type='identifier'\nline_star:54,line_end:54|char_star:32,char_end:39";
"# Test with static file handler.,type='comment'\nline_star:59,line_end:59|char_star:8,char_end:40"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:48,line_end:89|char_star:8,char_end:22"->"# Test with static file handler.,type='comment'\nline_star:59,line_end:59|char_star:8,char_end:40";
"assert rv.cache_control.max_age == 3600,type='assert_statement'\nline_star:61,line_end:61|char_star:8,char_end:47"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:48,line_end:89|char_star:8,char_end:22"->"assert rv.cache_control.max_age == 3600,type='assert_statement'\nline_star:61,line_end:61|char_star:8,char_end:47";
"rv.cache_control.max_age == 3600,type='comparison_operator'\nline_star:61,line_end:61|char_star:15,char_end:47"[shape="box",fillcolor="white",style=filled];
"assert rv.cache_control.max_age == 3600,type='assert_statement'\nline_star:61,line_end:61|char_star:8,char_end:47"->"rv.cache_control.max_age == 3600,type='comparison_operator'\nline_star:61,line_end:61|char_star:15,char_end:47";
"rv.cache_control.max_age,type='attribute'\nline_star:61,line_end:61|char_star:15,char_end:39"[shape="box",fillcolor="white",style=filled];
"rv.cache_control.max_age == 3600,type='comparison_operator'\nline_star:61,line_end:61|char_star:15,char_end:47"->"rv.cache_control.max_age,type='attribute'\nline_star:61,line_end:61|char_star:15,char_end:39";
"rv.cache_control,type='attribute'\nline_star:61,line_end:61|char_star:15,char_end:31"[shape="box",fillcolor="white",style=filled];
"rv.cache_control.max_age,type='attribute'\nline_star:61,line_end:61|char_star:15,char_end:39"->"rv.cache_control,type='attribute'\nline_star:61,line_end:61|char_star:15,char_end:31";
"rv,type='identifier'\nline_star:61,line_end:61|char_star:15,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"rv.cache_control,type='attribute'\nline_star:61,line_end:61|char_star:15,char_end:31"->"rv,type='identifier'\nline_star:61,line_end:61|char_star:15,char_end:17";
"cache_control,type='identifier'\nline_star:61,line_end:61|char_star:18,char_end:31"[shape="point",fillcolor="#121013",style=filled];
"rv.cache_control,type='attribute'\nline_star:61,line_end:61|char_star:15,char_end:31"->"cache_control,type='identifier'\nline_star:61,line_end:61|char_star:18,char_end:31";
"max_age,type='identifier'\nline_star:61,line_end:61|char_star:32,char_end:39"[shape="point",fillcolor="#121013",style=filled];
"rv.cache_control.max_age,type='attribute'\nline_star:61,line_end:61|char_star:15,char_end:39"->"max_age,type='identifier'\nline_star:61,line_end:61|char_star:32,char_end:39";
"# Test with direct use of send_file.,type='comment'\nline_star:64,line_end:64|char_star:8,char_end:44"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:48,line_end:89|char_star:8,char_end:22"->"# Test with direct use of send_file.,type='comment'\nline_star:64,line_end:64|char_star:8,char_end:44";
"assert rv.cache_control.max_age == 3600,type='assert_statement'\nline_star:66,line_end:66|char_star:8,char_end:47"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:48,line_end:89|char_star:8,char_end:22"->"assert rv.cache_control.max_age == 3600,type='assert_statement'\nline_star:66,line_end:66|char_star:8,char_end:47";
"rv.cache_control.max_age == 3600,type='comparison_operator'\nline_star:66,line_end:66|char_star:15,char_end:47"[shape="box",fillcolor="white",style=filled];
"assert rv.cache_control.max_age == 3600,type='assert_statement'\nline_star:66,line_end:66|char_star:8,char_end:47"->"rv.cache_control.max_age == 3600,type='comparison_operator'\nline_star:66,line_end:66|char_star:15,char_end:47";
"rv.cache_control.max_age,type='attribute'\nline_star:66,line_end:66|char_star:15,char_end:39"[shape="box",fillcolor="white",style=filled];
"rv.cache_control.max_age == 3600,type='comparison_operator'\nline_star:66,line_end:66|char_star:15,char_end:47"->"rv.cache_control.max_age,type='attribute'\nline_star:66,line_end:66|char_star:15,char_end:39";
"rv.cache_control,type='attribute'\nline_star:66,line_end:66|char_star:15,char_end:31"[shape="box",fillcolor="white",style=filled];
"rv.cache_control.max_age,type='attribute'\nline_star:66,line_end:66|char_star:15,char_end:39"->"rv.cache_control,type='attribute'\nline_star:66,line_end:66|char_star:15,char_end:31";
"rv,type='identifier'\nline_star:66,line_end:66|char_star:15,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"rv.cache_control,type='attribute'\nline_star:66,line_end:66|char_star:15,char_end:31"->"rv,type='identifier'\nline_star:66,line_end:66|char_star:15,char_end:17";
"cache_control,type='identifier'\nline_star:66,line_end:66|char_star:18,char_end:31"[shape="point",fillcolor="#121013",style=filled];
"rv.cache_control,type='attribute'\nline_star:66,line_end:66|char_star:15,char_end:31"->"cache_control,type='identifier'\nline_star:66,line_end:66|char_star:18,char_end:31";
"max_age,type='identifier'\nline_star:66,line_end:66|char_star:32,char_end:39"[shape="point",fillcolor="#121013",style=filled];
"rv.cache_control.max_age,type='attribute'\nline_star:66,line_end:66|char_star:15,char_end:39"->"max_age,type='identifier'\nline_star:66,line_end:66|char_star:32,char_end:39";
"# Test with pathlib.Path.,type='comment'\nline_star:69,line_end:69|char_star:8,char_end:33"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:48,line_end:89|char_star:8,char_end:22"->"# Test with pathlib.Path.,type='comment'\nline_star:69,line_end:69|char_star:8,char_end:33";
"assert rv.cache_control.max_age == 3600,type='assert_statement'\nline_star:71,line_end:71|char_star:8,char_end:47"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:48,line_end:89|char_star:8,char_end:22"->"assert rv.cache_control.max_age == 3600,type='assert_statement'\nline_star:71,line_end:71|char_star:8,char_end:47";
"rv.cache_control.max_age == 3600,type='comparison_operator'\nline_star:71,line_end:71|char_star:15,char_end:47"[shape="box",fillcolor="white",style=filled];
"assert rv.cache_control.max_age == 3600,type='assert_statement'\nline_star:71,line_end:71|char_star:8,char_end:47"->"rv.cache_control.max_age == 3600,type='comparison_operator'\nline_star:71,line_end:71|char_star:15,char_end:47";
"rv.cache_control.max_age,type='attribute'\nline_star:71,line_end:71|char_star:15,char_end:39"[shape="box",fillcolor="white",style=filled];
"rv.cache_control.max_age == 3600,type='comparison_operator'\nline_star:71,line_end:71|char_star:15,char_end:47"->"rv.cache_control.max_age,type='attribute'\nline_star:71,line_end:71|char_star:15,char_end:39";
"rv.cache_control,type='attribute'\nline_star:71,line_end:71|char_star:15,char_end:31"[shape="box",fillcolor="white",style=filled];
"rv.cache_control.max_age,type='attribute'\nline_star:71,line_end:71|char_star:15,char_end:39"->"rv.cache_control,type='attribute'\nline_star:71,line_end:71|char_star:15,char_end:31";
"rv,type='identifier'\nline_star:71,line_end:71|char_star:15,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"rv.cache_control,type='attribute'\nline_star:71,line_end:71|char_star:15,char_end:31"->"rv,type='identifier'\nline_star:71,line_end:71|char_star:15,char_end:17";
"cache_control,type='identifier'\nline_star:71,line_end:71|char_star:18,char_end:31"[shape="point",fillcolor="#121013",style=filled];
"rv.cache_control,type='attribute'\nline_star:71,line_end:71|char_star:15,char_end:31"->"cache_control,type='identifier'\nline_star:71,line_end:71|char_star:18,char_end:31";
"max_age,type='identifier'\nline_star:71,line_end:71|char_star:32,char_end:39"[shape="point",fillcolor="#121013",style=filled];
"rv.cache_control.max_age,type='attribute'\nline_star:71,line_end:71|char_star:15,char_end:39"->"max_age,type='identifier'\nline_star:71,line_end:71|char_star:32,char_end:39";
"class StaticFileApp(flask.Flask):\n            def get_send_file_max_age(self, filename):\n                return 10,type='class_definition'\nline_star:74,line_end:76|char_star:8,char_end:25"[shape="box",fillcolor="#ffdf91",style=filled];
"type='INFORMATION BLOCK'\nline_star:48,line_end:89|char_star:8,char_end:22"->"class StaticFileApp(flask.Flask):\n            def get_send_file_max_age(self, filename):\n                return 10,type='class_definition'\nline_star:74,line_end:76|char_star:8,char_end:25";
"StaticFileApp,type='identifier'\nline_star:74,line_end:74|char_star:14,char_end:27"[shape="point",fillcolor="#121013",style=filled];
"class StaticFileApp(flask.Flask):\n            def get_send_file_max_age(self, filename):\n                return 10,type='class_definition'\nline_star:74,line_end:76|char_star:8,char_end:25"->"StaticFileApp,type='identifier'\nline_star:74,line_end:74|char_star:14,char_end:27";
"(flask.Flask),type='argument_list'\nline_star:74,line_end:74|char_star:27,char_end:40"[shape="box",fillcolor="white",style=filled];
"class StaticFileApp(flask.Flask):\n            def get_send_file_max_age(self, filename):\n                return 10,type='class_definition'\nline_star:74,line_end:76|char_star:8,char_end:25"->"(flask.Flask),type='argument_list'\nline_star:74,line_end:74|char_star:27,char_end:40";
"flask.Flask,type='attribute'\nline_star:74,line_end:74|char_star:28,char_end:39"[shape="box",fillcolor="white",style=filled];
"(flask.Flask),type='argument_list'\nline_star:74,line_end:74|char_star:27,char_end:40"->"flask.Flask,type='attribute'\nline_star:74,line_end:74|char_star:28,char_end:39";
"flask,type='identifier'\nline_star:74,line_end:74|char_star:28,char_end:33"[shape="point",fillcolor="#121013",style=filled];
"flask.Flask,type='attribute'\nline_star:74,line_end:74|char_star:28,char_end:39"->"flask,type='identifier'\nline_star:74,line_end:74|char_star:28,char_end:33";
"Flask,type='identifier'\nline_star:74,line_end:74|char_star:34,char_end:39"[shape="point",fillcolor="#121013",style=filled];
"flask.Flask,type='attribute'\nline_star:74,line_end:74|char_star:28,char_end:39"->"Flask,type='identifier'\nline_star:74,line_end:74|char_star:34,char_end:39";
"type='INFORMATION BLOCK'\nline_star:75,line_end:76|char_star:12,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"class StaticFileApp(flask.Flask):\n            def get_send_file_max_age(self, filename):\n                return 10,type='class_definition'\nline_star:74,line_end:76|char_star:8,char_end:25"->"type='INFORMATION BLOCK'\nline_star:75,line_end:76|char_star:12,char_end:25";
"def get_send_file_max_age(self, filename):\n                return 10,type='function_definition'\nline_star:75,line_end:76|char_star:12,char_end:25"[shape="box",fillcolor="#cee6b4",style=filled];
"type='INFORMATION BLOCK'\nline_star:75,line_end:76|char_star:12,char_end:25"->"def get_send_file_max_age(self, filename):\n                return 10,type='function_definition'\nline_star:75,line_end:76|char_star:12,char_end:25";
"get_send_file_max_age,type='identifier'\nline_star:75,line_end:75|char_star:16,char_end:37"[shape="point",fillcolor="#121013",style=filled];
"def get_send_file_max_age(self, filename):\n                return 10,type='function_definition'\nline_star:75,line_end:76|char_star:12,char_end:25"->"get_send_file_max_age,type='identifier'\nline_star:75,line_end:75|char_star:16,char_end:37";
"(self, filename),type='parameters'\nline_star:75,line_end:75|char_star:37,char_end:53"[shape="box",fillcolor="white",style=filled];
"def get_send_file_max_age(self, filename):\n                return 10,type='function_definition'\nline_star:75,line_end:76|char_star:12,char_end:25"->"(self, filename),type='parameters'\nline_star:75,line_end:75|char_star:37,char_end:53";
"self,type='identifier'\nline_star:75,line_end:75|char_star:38,char_end:42"[shape="point",fillcolor="#121013",style=filled];
"(self, filename),type='parameters'\nline_star:75,line_end:75|char_star:37,char_end:53"->"self,type='identifier'\nline_star:75,line_end:75|char_star:38,char_end:42";
"filename,type='identifier'\nline_star:75,line_end:75|char_star:44,char_end:52"[shape="point",fillcolor="#121013",style=filled];
"(self, filename),type='parameters'\nline_star:75,line_end:75|char_star:37,char_end:53"->"filename,type='identifier'\nline_star:75,line_end:75|char_star:44,char_end:52";
"type='INFORMATION BLOCK'\nline_star:76,line_end:76|char_star:16,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"def get_send_file_max_age(self, filename):\n                return 10,type='function_definition'\nline_star:75,line_end:76|char_star:12,char_end:25"->"type='INFORMATION BLOCK'\nline_star:76,line_end:76|char_star:16,char_end:25";
"return 10,type='return_statement'\nline_star:76,line_end:76|char_star:16,char_end:25"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:76,line_end:76|char_star:16,char_end:25"->"return 10,type='return_statement'\nline_star:76,line_end:76|char_star:16,char_end:25";
"with app.test_request_context():\n            # Test with static file handler.\n            rv = app.send_static_file('index.html')\n            assert rv.cache_control.max_age == 10\n            rv.close()\n\n            # Test with direct use of send_file.\n            rv = flask.send_file('static/index.html')\n            assert rv.cache_control.max_age == 10\n            rv.close(),type='with_statement'\nline_star:80,line_end:89|char_star:8,char_end:22"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:48,line_end:89|char_star:8,char_end:22"->"with app.test_request_context():\n            # Test with static file handler.\n            rv = app.send_static_file('index.html')\n            assert rv.cache_control.max_age == 10\n            rv.close()\n\n            # Test with direct use of send_file.\n            rv = flask.send_file('static/index.html')\n            assert rv.cache_control.max_age == 10\n            rv.close(),type='with_statement'\nline_star:80,line_end:89|char_star:8,char_end:22";
"app.test_request_context(),type='with_clause'\nline_star:80,line_end:80|char_star:13,char_end:39"[shape="box",fillcolor="white",style=filled];
"with app.test_request_context():\n            # Test with static file handler.\n            rv = app.send_static_file('index.html')\n            assert rv.cache_control.max_age == 10\n            rv.close()\n\n            # Test with direct use of send_file.\n            rv = flask.send_file('static/index.html')\n            assert rv.cache_control.max_age == 10\n            rv.close(),type='with_statement'\nline_star:80,line_end:89|char_star:8,char_end:22"->"app.test_request_context(),type='with_clause'\nline_star:80,line_end:80|char_star:13,char_end:39";
"# Test with static file handler.,type='comment'\nline_star:81,line_end:81|char_star:12,char_end:44"[shape="box",fillcolor="#f0c929",style=filled];
"with app.test_request_context():\n            # Test with static file handler.\n            rv = app.send_static_file('index.html')\n            assert rv.cache_control.max_age == 10\n            rv.close()\n\n            # Test with direct use of send_file.\n            rv = flask.send_file('static/index.html')\n            assert rv.cache_control.max_age == 10\n            rv.close(),type='with_statement'\nline_star:80,line_end:89|char_star:8,char_end:22"->"# Test with static file handler.,type='comment'\nline_star:81,line_end:81|char_star:12,char_end:44";
"type='INFORMATION BLOCK'\nline_star:82,line_end:89|char_star:12,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"with app.test_request_context():\n            # Test with static file handler.\n            rv = app.send_static_file('index.html')\n            assert rv.cache_control.max_age == 10\n            rv.close()\n\n            # Test with direct use of send_file.\n            rv = flask.send_file('static/index.html')\n            assert rv.cache_control.max_age == 10\n            rv.close(),type='with_statement'\nline_star:80,line_end:89|char_star:8,char_end:22"->"type='INFORMATION BLOCK'\nline_star:82,line_end:89|char_star:12,char_end:22";
"assert rv.cache_control.max_age == 10,type='assert_statement'\nline_star:83,line_end:83|char_star:12,char_end:49"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:82,line_end:89|char_star:12,char_end:22"->"assert rv.cache_control.max_age == 10,type='assert_statement'\nline_star:83,line_end:83|char_star:12,char_end:49";
"rv.cache_control.max_age == 10,type='comparison_operator'\nline_star:83,line_end:83|char_star:19,char_end:49"[shape="box",fillcolor="white",style=filled];
"assert rv.cache_control.max_age == 10,type='assert_statement'\nline_star:83,line_end:83|char_star:12,char_end:49"->"rv.cache_control.max_age == 10,type='comparison_operator'\nline_star:83,line_end:83|char_star:19,char_end:49";
"rv.cache_control.max_age,type='attribute'\nline_star:83,line_end:83|char_star:19,char_end:43"[shape="box",fillcolor="white",style=filled];
"rv.cache_control.max_age == 10,type='comparison_operator'\nline_star:83,line_end:83|char_star:19,char_end:49"->"rv.cache_control.max_age,type='attribute'\nline_star:83,line_end:83|char_star:19,char_end:43";
"rv.cache_control,type='attribute'\nline_star:83,line_end:83|char_star:19,char_end:35"[shape="box",fillcolor="white",style=filled];
"rv.cache_control.max_age,type='attribute'\nline_star:83,line_end:83|char_star:19,char_end:43"->"rv.cache_control,type='attribute'\nline_star:83,line_end:83|char_star:19,char_end:35";
"rv,type='identifier'\nline_star:83,line_end:83|char_star:19,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"rv.cache_control,type='attribute'\nline_star:83,line_end:83|char_star:19,char_end:35"->"rv,type='identifier'\nline_star:83,line_end:83|char_star:19,char_end:21";
"cache_control,type='identifier'\nline_star:83,line_end:83|char_star:22,char_end:35"[shape="point",fillcolor="#121013",style=filled];
"rv.cache_control,type='attribute'\nline_star:83,line_end:83|char_star:19,char_end:35"->"cache_control,type='identifier'\nline_star:83,line_end:83|char_star:22,char_end:35";
"max_age,type='identifier'\nline_star:83,line_end:83|char_star:36,char_end:43"[shape="point",fillcolor="#121013",style=filled];
"rv.cache_control.max_age,type='attribute'\nline_star:83,line_end:83|char_star:19,char_end:43"->"max_age,type='identifier'\nline_star:83,line_end:83|char_star:36,char_end:43";
"# Test with direct use of send_file.,type='comment'\nline_star:86,line_end:86|char_star:12,char_end:48"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:82,line_end:89|char_star:12,char_end:22"->"# Test with direct use of send_file.,type='comment'\nline_star:86,line_end:86|char_star:12,char_end:48";
"assert rv.cache_control.max_age == 10,type='assert_statement'\nline_star:88,line_end:88|char_star:12,char_end:49"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:82,line_end:89|char_star:12,char_end:22"->"assert rv.cache_control.max_age == 10,type='assert_statement'\nline_star:88,line_end:88|char_star:12,char_end:49";
"rv.cache_control.max_age == 10,type='comparison_operator'\nline_star:88,line_end:88|char_star:19,char_end:49"[shape="box",fillcolor="white",style=filled];
"assert rv.cache_control.max_age == 10,type='assert_statement'\nline_star:88,line_end:88|char_star:12,char_end:49"->"rv.cache_control.max_age == 10,type='comparison_operator'\nline_star:88,line_end:88|char_star:19,char_end:49";
"rv.cache_control.max_age,type='attribute'\nline_star:88,line_end:88|char_star:19,char_end:43"[shape="box",fillcolor="white",style=filled];
"rv.cache_control.max_age == 10,type='comparison_operator'\nline_star:88,line_end:88|char_star:19,char_end:49"->"rv.cache_control.max_age,type='attribute'\nline_star:88,line_end:88|char_star:19,char_end:43";
"rv.cache_control,type='attribute'\nline_star:88,line_end:88|char_star:19,char_end:35"[shape="box",fillcolor="white",style=filled];
"rv.cache_control.max_age,type='attribute'\nline_star:88,line_end:88|char_star:19,char_end:43"->"rv.cache_control,type='attribute'\nline_star:88,line_end:88|char_star:19,char_end:35";
"rv,type='identifier'\nline_star:88,line_end:88|char_star:19,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"rv.cache_control,type='attribute'\nline_star:88,line_end:88|char_star:19,char_end:35"->"rv,type='identifier'\nline_star:88,line_end:88|char_star:19,char_end:21";
"cache_control,type='identifier'\nline_star:88,line_end:88|char_star:22,char_end:35"[shape="point",fillcolor="#121013",style=filled];
"rv.cache_control,type='attribute'\nline_star:88,line_end:88|char_star:19,char_end:35"->"cache_control,type='identifier'\nline_star:88,line_end:88|char_star:22,char_end:35";
"max_age,type='identifier'\nline_star:88,line_end:88|char_star:36,char_end:43"[shape="point",fillcolor="#121013",style=filled];
"rv.cache_control.max_age,type='attribute'\nline_star:88,line_end:88|char_star:19,char_end:43"->"max_age,type='identifier'\nline_star:88,line_end:88|char_star:36,char_end:43";
"def test_send_from_directory(self, app, req_ctx):\n        app.root_path = os.path.join(\n            os.path.dirname(__file__), 'test_apps', 'subdomaintestmodule'\n        )\n        rv = flask.send_from_directory('static', 'hello.txt')\n        rv.direct_passthrough = False\n        assert rv.data.strip() == b'Hello Subdomain'\n        rv.close(),type='function_definition'\nline_star:91,line_end:98|char_star:4,char_end:18"[shape="box",fillcolor="#cee6b4",style=filled];
"type='INFORMATION BLOCK'\nline_star:33,line_end:98|char_star:4,char_end:18"->"def test_send_from_directory(self, app, req_ctx):\n        app.root_path = os.path.join(\n            os.path.dirname(__file__), 'test_apps', 'subdomaintestmodule'\n        )\n        rv = flask.send_from_directory('static', 'hello.txt')\n        rv.direct_passthrough = False\n        assert rv.data.strip() == b'Hello Subdomain'\n        rv.close(),type='function_definition'\nline_star:91,line_end:98|char_star:4,char_end:18";
"test_send_from_directory,type='identifier'\nline_star:91,line_end:91|char_star:8,char_end:32"[shape="point",fillcolor="#121013",style=filled];
"def test_send_from_directory(self, app, req_ctx):\n        app.root_path = os.path.join(\n            os.path.dirname(__file__), 'test_apps', 'subdomaintestmodule'\n        )\n        rv = flask.send_from_directory('static', 'hello.txt')\n        rv.direct_passthrough = False\n        assert rv.data.strip() == b'Hello Subdomain'\n        rv.close(),type='function_definition'\nline_star:91,line_end:98|char_star:4,char_end:18"->"test_send_from_directory,type='identifier'\nline_star:91,line_end:91|char_star:8,char_end:32";
"(self, app, req_ctx),type='parameters'\nline_star:91,line_end:91|char_star:32,char_end:52"[shape="box",fillcolor="white",style=filled];
"def test_send_from_directory(self, app, req_ctx):\n        app.root_path = os.path.join(\n            os.path.dirname(__file__), 'test_apps', 'subdomaintestmodule'\n        )\n        rv = flask.send_from_directory('static', 'hello.txt')\n        rv.direct_passthrough = False\n        assert rv.data.strip() == b'Hello Subdomain'\n        rv.close(),type='function_definition'\nline_star:91,line_end:98|char_star:4,char_end:18"->"(self, app, req_ctx),type='parameters'\nline_star:91,line_end:91|char_star:32,char_end:52";
"self,type='identifier'\nline_star:91,line_end:91|char_star:33,char_end:37"[shape="point",fillcolor="#121013",style=filled];
"(self, app, req_ctx),type='parameters'\nline_star:91,line_end:91|char_star:32,char_end:52"->"self,type='identifier'\nline_star:91,line_end:91|char_star:33,char_end:37";
"app,type='identifier'\nline_star:91,line_end:91|char_star:39,char_end:42"[shape="point",fillcolor="#121013",style=filled];
"(self, app, req_ctx),type='parameters'\nline_star:91,line_end:91|char_star:32,char_end:52"->"app,type='identifier'\nline_star:91,line_end:91|char_star:39,char_end:42";
"req_ctx,type='identifier'\nline_star:91,line_end:91|char_star:44,char_end:51"[shape="point",fillcolor="#121013",style=filled];
"(self, app, req_ctx),type='parameters'\nline_star:91,line_end:91|char_star:32,char_end:52"->"req_ctx,type='identifier'\nline_star:91,line_end:91|char_star:44,char_end:51";
"type='INFORMATION BLOCK'\nline_star:92,line_end:98|char_star:8,char_end:18"[shape="point",fillcolor="#121013",style=filled];
"def test_send_from_directory(self, app, req_ctx):\n        app.root_path = os.path.join(\n            os.path.dirname(__file__), 'test_apps', 'subdomaintestmodule'\n        )\n        rv = flask.send_from_directory('static', 'hello.txt')\n        rv.direct_passthrough = False\n        assert rv.data.strip() == b'Hello Subdomain'\n        rv.close(),type='function_definition'\nline_star:91,line_end:98|char_star:4,char_end:18"->"type='INFORMATION BLOCK'\nline_star:92,line_end:98|char_star:8,char_end:18";
"assert rv.data.strip() == b'Hello Subdomain',type='assert_statement'\nline_star:97,line_end:97|char_star:8,char_end:52"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:92,line_end:98|char_star:8,char_end:18"->"assert rv.data.strip() == b'Hello Subdomain',type='assert_statement'\nline_star:97,line_end:97|char_star:8,char_end:52";
"rv.data.strip() == b'Hello Subdomain',type='comparison_operator'\nline_star:97,line_end:97|char_star:15,char_end:52"[shape="box",fillcolor="white",style=filled];
"assert rv.data.strip() == b'Hello Subdomain',type='assert_statement'\nline_star:97,line_end:97|char_star:8,char_end:52"->"rv.data.strip() == b'Hello Subdomain',type='comparison_operator'\nline_star:97,line_end:97|char_star:15,char_end:52";
"rv.data.strip(),type='call'\nline_star:97,line_end:97|char_star:15,char_end:30"[shape="box",fillcolor="white",style=filled];
"rv.data.strip() == b'Hello Subdomain',type='comparison_operator'\nline_star:97,line_end:97|char_star:15,char_end:52"->"rv.data.strip(),type='call'\nline_star:97,line_end:97|char_star:15,char_end:30";
"rv.data.strip,type='attribute'\nline_star:97,line_end:97|char_star:15,char_end:28"[shape="box",fillcolor="white",style=filled];
"rv.data.strip(),type='call'\nline_star:97,line_end:97|char_star:15,char_end:30"->"rv.data.strip,type='attribute'\nline_star:97,line_end:97|char_star:15,char_end:28";
"rv.data,type='attribute'\nline_star:97,line_end:97|char_star:15,char_end:22"[shape="box",fillcolor="white",style=filled];
"rv.data.strip,type='attribute'\nline_star:97,line_end:97|char_star:15,char_end:28"->"rv.data,type='attribute'\nline_star:97,line_end:97|char_star:15,char_end:22";
"rv,type='identifier'\nline_star:97,line_end:97|char_star:15,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"rv.data,type='attribute'\nline_star:97,line_end:97|char_star:15,char_end:22"->"rv,type='identifier'\nline_star:97,line_end:97|char_star:15,char_end:17";
"data,type='identifier'\nline_star:97,line_end:97|char_star:18,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"rv.data,type='attribute'\nline_star:97,line_end:97|char_star:15,char_end:22"->"data,type='identifier'\nline_star:97,line_end:97|char_star:18,char_end:22";
"strip,type='identifier'\nline_star:97,line_end:97|char_star:23,char_end:28"[shape="point",fillcolor="#121013",style=filled];
"rv.data.strip,type='attribute'\nline_star:97,line_end:97|char_star:15,char_end:28"->"strip,type='identifier'\nline_star:97,line_end:97|char_star:23,char_end:28";
"class TestUrlFor:\n    def test_url_for_with_anchor(self, app, req_ctx):\n        @app.route('/')\n        def index():\n            return '42'\n\n        assert flask.url_for('index', _anchor='x y') == '/#x%20y'\n\n    def test_url_for_with_scheme(self, app, req_ctx):\n        @app.route('/')\n        def index():\n            return '42'\n\n        assert (\n            flask.url_for('index', _external=True, _scheme='https')\n            == 'https://localhost/'\n        )\n\n    def test_url_for_with_scheme_not_external(self, app, req_ctx):\n        @app.route('/')\n        def index():\n            return '42'\n\n        pytest.raises(ValueError, flask.url_for, 'index', _scheme='https')\n\n    def test_url_for_with_alternating_schemes(self, app, req_ctx):\n        @app.route('/')\n        def index():\n            return '42'\n\n        assert flask.url_for('index', _external=True) == 'http://localhost/'\n        assert (\n            flask.url_for('index', _external=True, _scheme='https')\n            == 'https://localhost/'\n        )\n        assert flask.url_for('index', _external=True) == 'http://localhost/'\n\n    def test_url_with_method(self, app, req_ctx):\n        from flask.views import MethodView\n\n        class MyView(MethodView):\n            def get(self, id=None):\n                if id is None:\n                    return 'List'\n                return f'Get {id:d}'\n\n            def post(self):\n                return 'Create'\n\n        myview = MyView.as_view('myview')\n        app.add_url_rule('/myview/', methods=['GET'], view_func=myview)\n        app.add_url_rule('/myview/<int:id>', methods=['GET'], view_func=myview)\n        app.add_url_rule('/myview/create', methods=['POST'], view_func=myview)\n\n        assert flask.url_for('myview', _method='GET') == '/myview/'\n        assert flask.url_for('myview', id=42, _method='GET') == '/myview/42'\n        assert flask.url_for('myview', _method='POST') == '/myview/create',type='class_definition'\nline_star:101,line_end:157|char_star:0,char_end:74"[shape="box",fillcolor="#ffdf91",style=filled];
"MODULE"->"class TestUrlFor:\n    def test_url_for_with_anchor(self, app, req_ctx):\n        @app.route('/')\n        def index():\n            return '42'\n\n        assert flask.url_for('index', _anchor='x y') == '/#x%20y'\n\n    def test_url_for_with_scheme(self, app, req_ctx):\n        @app.route('/')\n        def index():\n            return '42'\n\n        assert (\n            flask.url_for('index', _external=True, _scheme='https')\n            == 'https://localhost/'\n        )\n\n    def test_url_for_with_scheme_not_external(self, app, req_ctx):\n        @app.route('/')\n        def index():\n            return '42'\n\n        pytest.raises(ValueError, flask.url_for, 'index', _scheme='https')\n\n    def test_url_for_with_alternating_schemes(self, app, req_ctx):\n        @app.route('/')\n        def index():\n            return '42'\n\n        assert flask.url_for('index', _external=True) == 'http://localhost/'\n        assert (\n            flask.url_for('index', _external=True, _scheme='https')\n            == 'https://localhost/'\n        )\n        assert flask.url_for('index', _external=True) == 'http://localhost/'\n\n    def test_url_with_method(self, app, req_ctx):\n        from flask.views import MethodView\n\n        class MyView(MethodView):\n            def get(self, id=None):\n                if id is None:\n                    return 'List'\n                return f'Get {id:d}'\n\n            def post(self):\n                return 'Create'\n\n        myview = MyView.as_view('myview')\n        app.add_url_rule('/myview/', methods=['GET'], view_func=myview)\n        app.add_url_rule('/myview/<int:id>', methods=['GET'], view_func=myview)\n        app.add_url_rule('/myview/create', methods=['POST'], view_func=myview)\n\n        assert flask.url_for('myview', _method='GET') == '/myview/'\n        assert flask.url_for('myview', id=42, _method='GET') == '/myview/42'\n        assert flask.url_for('myview', _method='POST') == '/myview/create',type='class_definition'\nline_star:101,line_end:157|char_star:0,char_end:74";
"TestUrlFor,type='identifier'\nline_star:101,line_end:101|char_star:6,char_end:16"[shape="point",fillcolor="#121013",style=filled];
"class TestUrlFor:\n    def test_url_for_with_anchor(self, app, req_ctx):\n        @app.route('/')\n        def index():\n            return '42'\n\n        assert flask.url_for('index', _anchor='x y') == '/#x%20y'\n\n    def test_url_for_with_scheme(self, app, req_ctx):\n        @app.route('/')\n        def index():\n            return '42'\n\n        assert (\n            flask.url_for('index', _external=True, _scheme='https')\n            == 'https://localhost/'\n        )\n\n    def test_url_for_with_scheme_not_external(self, app, req_ctx):\n        @app.route('/')\n        def index():\n            return '42'\n\n        pytest.raises(ValueError, flask.url_for, 'index', _scheme='https')\n\n    def test_url_for_with_alternating_schemes(self, app, req_ctx):\n        @app.route('/')\n        def index():\n            return '42'\n\n        assert flask.url_for('index', _external=True) == 'http://localhost/'\n        assert (\n            flask.url_for('index', _external=True, _scheme='https')\n            == 'https://localhost/'\n        )\n        assert flask.url_for('index', _external=True) == 'http://localhost/'\n\n    def test_url_with_method(self, app, req_ctx):\n        from flask.views import MethodView\n\n        class MyView(MethodView):\n            def get(self, id=None):\n                if id is None:\n                    return 'List'\n                return f'Get {id:d}'\n\n            def post(self):\n                return 'Create'\n\n        myview = MyView.as_view('myview')\n        app.add_url_rule('/myview/', methods=['GET'], view_func=myview)\n        app.add_url_rule('/myview/<int:id>', methods=['GET'], view_func=myview)\n        app.add_url_rule('/myview/create', methods=['POST'], view_func=myview)\n\n        assert flask.url_for('myview', _method='GET') == '/myview/'\n        assert flask.url_for('myview', id=42, _method='GET') == '/myview/42'\n        assert flask.url_for('myview', _method='POST') == '/myview/create',type='class_definition'\nline_star:101,line_end:157|char_star:0,char_end:74"->"TestUrlFor,type='identifier'\nline_star:101,line_end:101|char_star:6,char_end:16";
"type='INFORMATION BLOCK'\nline_star:102,line_end:157|char_star:4,char_end:74"[shape="point",fillcolor="#121013",style=filled];
"class TestUrlFor:\n    def test_url_for_with_anchor(self, app, req_ctx):\n        @app.route('/')\n        def index():\n            return '42'\n\n        assert flask.url_for('index', _anchor='x y') == '/#x%20y'\n\n    def test_url_for_with_scheme(self, app, req_ctx):\n        @app.route('/')\n        def index():\n            return '42'\n\n        assert (\n            flask.url_for('index', _external=True, _scheme='https')\n            == 'https://localhost/'\n        )\n\n    def test_url_for_with_scheme_not_external(self, app, req_ctx):\n        @app.route('/')\n        def index():\n            return '42'\n\n        pytest.raises(ValueError, flask.url_for, 'index', _scheme='https')\n\n    def test_url_for_with_alternating_schemes(self, app, req_ctx):\n        @app.route('/')\n        def index():\n            return '42'\n\n        assert flask.url_for('index', _external=True) == 'http://localhost/'\n        assert (\n            flask.url_for('index', _external=True, _scheme='https')\n            == 'https://localhost/'\n        )\n        assert flask.url_for('index', _external=True) == 'http://localhost/'\n\n    def test_url_with_method(self, app, req_ctx):\n        from flask.views import MethodView\n\n        class MyView(MethodView):\n            def get(self, id=None):\n                if id is None:\n                    return 'List'\n                return f'Get {id:d}'\n\n            def post(self):\n                return 'Create'\n\n        myview = MyView.as_view('myview')\n        app.add_url_rule('/myview/', methods=['GET'], view_func=myview)\n        app.add_url_rule('/myview/<int:id>', methods=['GET'], view_func=myview)\n        app.add_url_rule('/myview/create', methods=['POST'], view_func=myview)\n\n        assert flask.url_for('myview', _method='GET') == '/myview/'\n        assert flask.url_for('myview', id=42, _method='GET') == '/myview/42'\n        assert flask.url_for('myview', _method='POST') == '/myview/create',type='class_definition'\nline_star:101,line_end:157|char_star:0,char_end:74"->"type='INFORMATION BLOCK'\nline_star:102,line_end:157|char_star:4,char_end:74";
"def test_url_for_with_anchor(self, app, req_ctx):\n        @app.route('/')\n        def index():\n            return '42'\n\n        assert flask.url_for('index', _anchor='x y') == '/#x%20y',type='function_definition'\nline_star:102,line_end:107|char_star:4,char_end:65"[shape="box",fillcolor="#cee6b4",style=filled];
"type='INFORMATION BLOCK'\nline_star:102,line_end:157|char_star:4,char_end:74"->"def test_url_for_with_anchor(self, app, req_ctx):\n        @app.route('/')\n        def index():\n            return '42'\n\n        assert flask.url_for('index', _anchor='x y') == '/#x%20y',type='function_definition'\nline_star:102,line_end:107|char_star:4,char_end:65";
"test_url_for_with_anchor,type='identifier'\nline_star:102,line_end:102|char_star:8,char_end:32"[shape="point",fillcolor="#121013",style=filled];
"def test_url_for_with_anchor(self, app, req_ctx):\n        @app.route('/')\n        def index():\n            return '42'\n\n        assert flask.url_for('index', _anchor='x y') == '/#x%20y',type='function_definition'\nline_star:102,line_end:107|char_star:4,char_end:65"->"test_url_for_with_anchor,type='identifier'\nline_star:102,line_end:102|char_star:8,char_end:32";
"(self, app, req_ctx),type='parameters'\nline_star:102,line_end:102|char_star:32,char_end:52"[shape="box",fillcolor="white",style=filled];
"def test_url_for_with_anchor(self, app, req_ctx):\n        @app.route('/')\n        def index():\n            return '42'\n\n        assert flask.url_for('index', _anchor='x y') == '/#x%20y',type='function_definition'\nline_star:102,line_end:107|char_star:4,char_end:65"->"(self, app, req_ctx),type='parameters'\nline_star:102,line_end:102|char_star:32,char_end:52";
"self,type='identifier'\nline_star:102,line_end:102|char_star:33,char_end:37"[shape="point",fillcolor="#121013",style=filled];
"(self, app, req_ctx),type='parameters'\nline_star:102,line_end:102|char_star:32,char_end:52"->"self,type='identifier'\nline_star:102,line_end:102|char_star:33,char_end:37";
"app,type='identifier'\nline_star:102,line_end:102|char_star:39,char_end:42"[shape="point",fillcolor="#121013",style=filled];
"(self, app, req_ctx),type='parameters'\nline_star:102,line_end:102|char_star:32,char_end:52"->"app,type='identifier'\nline_star:102,line_end:102|char_star:39,char_end:42";
"req_ctx,type='identifier'\nline_star:102,line_end:102|char_star:44,char_end:51"[shape="point",fillcolor="#121013",style=filled];
"(self, app, req_ctx),type='parameters'\nline_star:102,line_end:102|char_star:32,char_end:52"->"req_ctx,type='identifier'\nline_star:102,line_end:102|char_star:44,char_end:51";
"type='INFORMATION BLOCK'\nline_star:103,line_end:107|char_star:8,char_end:65"[shape="point",fillcolor="#121013",style=filled];
"def test_url_for_with_anchor(self, app, req_ctx):\n        @app.route('/')\n        def index():\n            return '42'\n\n        assert flask.url_for('index', _anchor='x y') == '/#x%20y',type='function_definition'\nline_star:102,line_end:107|char_star:4,char_end:65"->"type='INFORMATION BLOCK'\nline_star:103,line_end:107|char_star:8,char_end:65";
"@app.route('/')\n        def index():\n            return '42',type='decorated_definition'\nline_star:103,line_end:105|char_star:8,char_end:23"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:103,line_end:107|char_star:8,char_end:65"->"@app.route('/')\n        def index():\n            return '42',type='decorated_definition'\nline_star:103,line_end:105|char_star:8,char_end:23";
"@app.route('/'),type='decorator'\nline_star:103,line_end:103|char_star:8,char_end:23"[shape="box",fillcolor="white",style=filled];
"@app.route('/')\n        def index():\n            return '42',type='decorated_definition'\nline_star:103,line_end:105|char_star:8,char_end:23"->"@app.route('/'),type='decorator'\nline_star:103,line_end:103|char_star:8,char_end:23";
"def index():\n            return '42',type='function_definition'\nline_star:104,line_end:105|char_star:8,char_end:23"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.route('/')\n        def index():\n            return '42',type='decorated_definition'\nline_star:103,line_end:105|char_star:8,char_end:23"->"def index():\n            return '42',type='function_definition'\nline_star:104,line_end:105|char_star:8,char_end:23";
"index,type='identifier'\nline_star:104,line_end:104|char_star:12,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"def index():\n            return '42',type='function_definition'\nline_star:104,line_end:105|char_star:8,char_end:23"->"index,type='identifier'\nline_star:104,line_end:104|char_star:12,char_end:17";
"type='INFORMATION BLOCK'\nline_star:105,line_end:105|char_star:12,char_end:23"[shape="point",fillcolor="#121013",style=filled];
"def index():\n            return '42',type='function_definition'\nline_star:104,line_end:105|char_star:8,char_end:23"->"type='INFORMATION BLOCK'\nline_star:105,line_end:105|char_star:12,char_end:23";
"return '42',type='return_statement'\nline_star:105,line_end:105|char_star:12,char_end:23"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:105,line_end:105|char_star:12,char_end:23"->"return '42',type='return_statement'\nline_star:105,line_end:105|char_star:12,char_end:23";
"assert flask.url_for('index', _anchor='x y') == '/#x%20y',type='assert_statement'\nline_star:107,line_end:107|char_star:8,char_end:65"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:103,line_end:107|char_star:8,char_end:65"->"assert flask.url_for('index', _anchor='x y') == '/#x%20y',type='assert_statement'\nline_star:107,line_end:107|char_star:8,char_end:65";
"flask.url_for('index', _anchor='x y') == '/#x%20y',type='comparison_operator'\nline_star:107,line_end:107|char_star:15,char_end:65"[shape="box",fillcolor="white",style=filled];
"assert flask.url_for('index', _anchor='x y') == '/#x%20y',type='assert_statement'\nline_star:107,line_end:107|char_star:8,char_end:65"->"flask.url_for('index', _anchor='x y') == '/#x%20y',type='comparison_operator'\nline_star:107,line_end:107|char_star:15,char_end:65";
"flask.url_for('index', _anchor='x y'),type='call'\nline_star:107,line_end:107|char_star:15,char_end:52"[shape="box",fillcolor="white",style=filled];
"flask.url_for('index', _anchor='x y') == '/#x%20y',type='comparison_operator'\nline_star:107,line_end:107|char_star:15,char_end:65"->"flask.url_for('index', _anchor='x y'),type='call'\nline_star:107,line_end:107|char_star:15,char_end:52";
"flask.url_for,type='attribute'\nline_star:107,line_end:107|char_star:15,char_end:28"[shape="box",fillcolor="white",style=filled];
"flask.url_for('index', _anchor='x y'),type='call'\nline_star:107,line_end:107|char_star:15,char_end:52"->"flask.url_for,type='attribute'\nline_star:107,line_end:107|char_star:15,char_end:28";
"flask,type='identifier'\nline_star:107,line_end:107|char_star:15,char_end:20"[shape="point",fillcolor="#121013",style=filled];
"flask.url_for,type='attribute'\nline_star:107,line_end:107|char_star:15,char_end:28"->"flask,type='identifier'\nline_star:107,line_end:107|char_star:15,char_end:20";
"url_for,type='identifier'\nline_star:107,line_end:107|char_star:21,char_end:28"[shape="point",fillcolor="#121013",style=filled];
"flask.url_for,type='attribute'\nline_star:107,line_end:107|char_star:15,char_end:28"->"url_for,type='identifier'\nline_star:107,line_end:107|char_star:21,char_end:28";
"('index', _anchor='x y'),type='argument_list'\nline_star:107,line_end:107|char_star:28,char_end:52"[shape="box",fillcolor="white",style=filled];
"flask.url_for('index', _anchor='x y'),type='call'\nline_star:107,line_end:107|char_star:15,char_end:52"->"('index', _anchor='x y'),type='argument_list'\nline_star:107,line_end:107|char_star:28,char_end:52";
"_anchor='x y',type='keyword_argument'\nline_star:107,line_end:107|char_star:38,char_end:51"[shape="box",fillcolor="white",style=filled];
"('index', _anchor='x y'),type='argument_list'\nline_star:107,line_end:107|char_star:28,char_end:52"->"_anchor='x y',type='keyword_argument'\nline_star:107,line_end:107|char_star:38,char_end:51";
"_anchor,type='identifier'\nline_star:107,line_end:107|char_star:38,char_end:45"[shape="point",fillcolor="#121013",style=filled];
"_anchor='x y',type='keyword_argument'\nline_star:107,line_end:107|char_star:38,char_end:51"->"_anchor,type='identifier'\nline_star:107,line_end:107|char_star:38,char_end:45";
"def test_url_for_with_scheme(self, app, req_ctx):\n        @app.route('/')\n        def index():\n            return '42'\n\n        assert (\n            flask.url_for('index', _external=True, _scheme='https')\n            == 'https://localhost/'\n        ),type='function_definition'\nline_star:109,line_end:117|char_star:4,char_end:9"[shape="box",fillcolor="#cee6b4",style=filled];
"type='INFORMATION BLOCK'\nline_star:102,line_end:157|char_star:4,char_end:74"->"def test_url_for_with_scheme(self, app, req_ctx):\n        @app.route('/')\n        def index():\n            return '42'\n\n        assert (\n            flask.url_for('index', _external=True, _scheme='https')\n            == 'https://localhost/'\n        ),type='function_definition'\nline_star:109,line_end:117|char_star:4,char_end:9";
"test_url_for_with_scheme,type='identifier'\nline_star:109,line_end:109|char_star:8,char_end:32"[shape="point",fillcolor="#121013",style=filled];
"def test_url_for_with_scheme(self, app, req_ctx):\n        @app.route('/')\n        def index():\n            return '42'\n\n        assert (\n            flask.url_for('index', _external=True, _scheme='https')\n            == 'https://localhost/'\n        ),type='function_definition'\nline_star:109,line_end:117|char_star:4,char_end:9"->"test_url_for_with_scheme,type='identifier'\nline_star:109,line_end:109|char_star:8,char_end:32";
"(self, app, req_ctx),type='parameters'\nline_star:109,line_end:109|char_star:32,char_end:52"[shape="box",fillcolor="white",style=filled];
"def test_url_for_with_scheme(self, app, req_ctx):\n        @app.route('/')\n        def index():\n            return '42'\n\n        assert (\n            flask.url_for('index', _external=True, _scheme='https')\n            == 'https://localhost/'\n        ),type='function_definition'\nline_star:109,line_end:117|char_star:4,char_end:9"->"(self, app, req_ctx),type='parameters'\nline_star:109,line_end:109|char_star:32,char_end:52";
"self,type='identifier'\nline_star:109,line_end:109|char_star:33,char_end:37"[shape="point",fillcolor="#121013",style=filled];
"(self, app, req_ctx),type='parameters'\nline_star:109,line_end:109|char_star:32,char_end:52"->"self,type='identifier'\nline_star:109,line_end:109|char_star:33,char_end:37";
"app,type='identifier'\nline_star:109,line_end:109|char_star:39,char_end:42"[shape="point",fillcolor="#121013",style=filled];
"(self, app, req_ctx),type='parameters'\nline_star:109,line_end:109|char_star:32,char_end:52"->"app,type='identifier'\nline_star:109,line_end:109|char_star:39,char_end:42";
"req_ctx,type='identifier'\nline_star:109,line_end:109|char_star:44,char_end:51"[shape="point",fillcolor="#121013",style=filled];
"(self, app, req_ctx),type='parameters'\nline_star:109,line_end:109|char_star:32,char_end:52"->"req_ctx,type='identifier'\nline_star:109,line_end:109|char_star:44,char_end:51";
"type='INFORMATION BLOCK'\nline_star:110,line_end:117|char_star:8,char_end:9"[shape="point",fillcolor="#121013",style=filled];
"def test_url_for_with_scheme(self, app, req_ctx):\n        @app.route('/')\n        def index():\n            return '42'\n\n        assert (\n            flask.url_for('index', _external=True, _scheme='https')\n            == 'https://localhost/'\n        ),type='function_definition'\nline_star:109,line_end:117|char_star:4,char_end:9"->"type='INFORMATION BLOCK'\nline_star:110,line_end:117|char_star:8,char_end:9";
"@app.route('/')\n        def index():\n            return '42',type='decorated_definition'\nline_star:110,line_end:112|char_star:8,char_end:23"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:110,line_end:117|char_star:8,char_end:9"->"@app.route('/')\n        def index():\n            return '42',type='decorated_definition'\nline_star:110,line_end:112|char_star:8,char_end:23";
"@app.route('/'),type='decorator'\nline_star:110,line_end:110|char_star:8,char_end:23"[shape="box",fillcolor="white",style=filled];
"@app.route('/')\n        def index():\n            return '42',type='decorated_definition'\nline_star:110,line_end:112|char_star:8,char_end:23"->"@app.route('/'),type='decorator'\nline_star:110,line_end:110|char_star:8,char_end:23";
"def index():\n            return '42',type='function_definition'\nline_star:111,line_end:112|char_star:8,char_end:23"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.route('/')\n        def index():\n            return '42',type='decorated_definition'\nline_star:110,line_end:112|char_star:8,char_end:23"->"def index():\n            return '42',type='function_definition'\nline_star:111,line_end:112|char_star:8,char_end:23";
"index,type='identifier'\nline_star:111,line_end:111|char_star:12,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"def index():\n            return '42',type='function_definition'\nline_star:111,line_end:112|char_star:8,char_end:23"->"index,type='identifier'\nline_star:111,line_end:111|char_star:12,char_end:17";
"type='INFORMATION BLOCK'\nline_star:112,line_end:112|char_star:12,char_end:23"[shape="point",fillcolor="#121013",style=filled];
"def index():\n            return '42',type='function_definition'\nline_star:111,line_end:112|char_star:8,char_end:23"->"type='INFORMATION BLOCK'\nline_star:112,line_end:112|char_star:12,char_end:23";
"return '42',type='return_statement'\nline_star:112,line_end:112|char_star:12,char_end:23"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:112,line_end:112|char_star:12,char_end:23"->"return '42',type='return_statement'\nline_star:112,line_end:112|char_star:12,char_end:23";
"assert (\n            flask.url_for('index', _external=True, _scheme='https')\n            == 'https://localhost/'\n        ),type='assert_statement'\nline_star:114,line_end:117|char_star:8,char_end:9"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:110,line_end:117|char_star:8,char_end:9"->"assert (\n            flask.url_for('index', _external=True, _scheme='https')\n            == 'https://localhost/'\n        ),type='assert_statement'\nline_star:114,line_end:117|char_star:8,char_end:9";
"(\n            flask.url_for('index', _external=True, _scheme='https')\n            == 'https://localhost/'\n        ),type='parenthesized_expression'\nline_star:114,line_end:117|char_star:15,char_end:9"[shape="box",fillcolor="white",style=filled];
"assert (\n            flask.url_for('index', _external=True, _scheme='https')\n            == 'https://localhost/'\n        ),type='assert_statement'\nline_star:114,line_end:117|char_star:8,char_end:9"->"(\n            flask.url_for('index', _external=True, _scheme='https')\n            == 'https://localhost/'\n        ),type='parenthesized_expression'\nline_star:114,line_end:117|char_star:15,char_end:9";
"flask.url_for('index', _external=True, _scheme='https')\n            == 'https://localhost/',type='comparison_operator'\nline_star:115,line_end:116|char_star:12,char_end:35"[shape="box",fillcolor="white",style=filled];
"(\n            flask.url_for('index', _external=True, _scheme='https')\n            == 'https://localhost/'\n        ),type='parenthesized_expression'\nline_star:114,line_end:117|char_star:15,char_end:9"->"flask.url_for('index', _external=True, _scheme='https')\n            == 'https://localhost/',type='comparison_operator'\nline_star:115,line_end:116|char_star:12,char_end:35";
"flask.url_for('index', _external=True, _scheme='https'),type='call'\nline_star:115,line_end:115|char_star:12,char_end:67"[shape="box",fillcolor="white",style=filled];
"flask.url_for('index', _external=True, _scheme='https')\n            == 'https://localhost/',type='comparison_operator'\nline_star:115,line_end:116|char_star:12,char_end:35"->"flask.url_for('index', _external=True, _scheme='https'),type='call'\nline_star:115,line_end:115|char_star:12,char_end:67";
"flask.url_for,type='attribute'\nline_star:115,line_end:115|char_star:12,char_end:25"[shape="box",fillcolor="white",style=filled];
"flask.url_for('index', _external=True, _scheme='https'),type='call'\nline_star:115,line_end:115|char_star:12,char_end:67"->"flask.url_for,type='attribute'\nline_star:115,line_end:115|char_star:12,char_end:25";
"flask,type='identifier'\nline_star:115,line_end:115|char_star:12,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"flask.url_for,type='attribute'\nline_star:115,line_end:115|char_star:12,char_end:25"->"flask,type='identifier'\nline_star:115,line_end:115|char_star:12,char_end:17";
"url_for,type='identifier'\nline_star:115,line_end:115|char_star:18,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"flask.url_for,type='attribute'\nline_star:115,line_end:115|char_star:12,char_end:25"->"url_for,type='identifier'\nline_star:115,line_end:115|char_star:18,char_end:25";
"('index', _external=True, _scheme='https'),type='argument_list'\nline_star:115,line_end:115|char_star:25,char_end:67"[shape="box",fillcolor="white",style=filled];
"flask.url_for('index', _external=True, _scheme='https'),type='call'\nline_star:115,line_end:115|char_star:12,char_end:67"->"('index', _external=True, _scheme='https'),type='argument_list'\nline_star:115,line_end:115|char_star:25,char_end:67";
"_external=True,type='keyword_argument'\nline_star:115,line_end:115|char_star:35,char_end:49"[shape="box",fillcolor="white",style=filled];
"('index', _external=True, _scheme='https'),type='argument_list'\nline_star:115,line_end:115|char_star:25,char_end:67"->"_external=True,type='keyword_argument'\nline_star:115,line_end:115|char_star:35,char_end:49";
"_external,type='identifier'\nline_star:115,line_end:115|char_star:35,char_end:44"[shape="point",fillcolor="#121013",style=filled];
"_external=True,type='keyword_argument'\nline_star:115,line_end:115|char_star:35,char_end:49"->"_external,type='identifier'\nline_star:115,line_end:115|char_star:35,char_end:44";
"_scheme='https',type='keyword_argument'\nline_star:115,line_end:115|char_star:51,char_end:66"[shape="box",fillcolor="white",style=filled];
"('index', _external=True, _scheme='https'),type='argument_list'\nline_star:115,line_end:115|char_star:25,char_end:67"->"_scheme='https',type='keyword_argument'\nline_star:115,line_end:115|char_star:51,char_end:66";
"_scheme,type='identifier'\nline_star:115,line_end:115|char_star:51,char_end:58"[shape="point",fillcolor="#121013",style=filled];
"_scheme='https',type='keyword_argument'\nline_star:115,line_end:115|char_star:51,char_end:66"->"_scheme,type='identifier'\nline_star:115,line_end:115|char_star:51,char_end:58";
"def test_url_for_with_scheme_not_external(self, app, req_ctx):\n        @app.route('/')\n        def index():\n            return '42'\n\n        pytest.raises(ValueError, flask.url_for, 'index', _scheme='https'),type='function_definition'\nline_star:119,line_end:124|char_star:4,char_end:74"[shape="box",fillcolor="#cee6b4",style=filled];
"type='INFORMATION BLOCK'\nline_star:102,line_end:157|char_star:4,char_end:74"->"def test_url_for_with_scheme_not_external(self, app, req_ctx):\n        @app.route('/')\n        def index():\n            return '42'\n\n        pytest.raises(ValueError, flask.url_for, 'index', _scheme='https'),type='function_definition'\nline_star:119,line_end:124|char_star:4,char_end:74";
"test_url_for_with_scheme_not_external,type='identifier'\nline_star:119,line_end:119|char_star:8,char_end:45"[shape="point",fillcolor="#121013",style=filled];
"def test_url_for_with_scheme_not_external(self, app, req_ctx):\n        @app.route('/')\n        def index():\n            return '42'\n\n        pytest.raises(ValueError, flask.url_for, 'index', _scheme='https'),type='function_definition'\nline_star:119,line_end:124|char_star:4,char_end:74"->"test_url_for_with_scheme_not_external,type='identifier'\nline_star:119,line_end:119|char_star:8,char_end:45";
"(self, app, req_ctx),type='parameters'\nline_star:119,line_end:119|char_star:45,char_end:65"[shape="box",fillcolor="white",style=filled];
"def test_url_for_with_scheme_not_external(self, app, req_ctx):\n        @app.route('/')\n        def index():\n            return '42'\n\n        pytest.raises(ValueError, flask.url_for, 'index', _scheme='https'),type='function_definition'\nline_star:119,line_end:124|char_star:4,char_end:74"->"(self, app, req_ctx),type='parameters'\nline_star:119,line_end:119|char_star:45,char_end:65";
"self,type='identifier'\nline_star:119,line_end:119|char_star:46,char_end:50"[shape="point",fillcolor="#121013",style=filled];
"(self, app, req_ctx),type='parameters'\nline_star:119,line_end:119|char_star:45,char_end:65"->"self,type='identifier'\nline_star:119,line_end:119|char_star:46,char_end:50";
"app,type='identifier'\nline_star:119,line_end:119|char_star:52,char_end:55"[shape="point",fillcolor="#121013",style=filled];
"(self, app, req_ctx),type='parameters'\nline_star:119,line_end:119|char_star:45,char_end:65"->"app,type='identifier'\nline_star:119,line_end:119|char_star:52,char_end:55";
"req_ctx,type='identifier'\nline_star:119,line_end:119|char_star:57,char_end:64"[shape="point",fillcolor="#121013",style=filled];
"(self, app, req_ctx),type='parameters'\nline_star:119,line_end:119|char_star:45,char_end:65"->"req_ctx,type='identifier'\nline_star:119,line_end:119|char_star:57,char_end:64";
"type='INFORMATION BLOCK'\nline_star:120,line_end:124|char_star:8,char_end:74"[shape="point",fillcolor="#121013",style=filled];
"def test_url_for_with_scheme_not_external(self, app, req_ctx):\n        @app.route('/')\n        def index():\n            return '42'\n\n        pytest.raises(ValueError, flask.url_for, 'index', _scheme='https'),type='function_definition'\nline_star:119,line_end:124|char_star:4,char_end:74"->"type='INFORMATION BLOCK'\nline_star:120,line_end:124|char_star:8,char_end:74";
"@app.route('/')\n        def index():\n            return '42',type='decorated_definition'\nline_star:120,line_end:122|char_star:8,char_end:23"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:120,line_end:124|char_star:8,char_end:74"->"@app.route('/')\n        def index():\n            return '42',type='decorated_definition'\nline_star:120,line_end:122|char_star:8,char_end:23";
"@app.route('/'),type='decorator'\nline_star:120,line_end:120|char_star:8,char_end:23"[shape="box",fillcolor="white",style=filled];
"@app.route('/')\n        def index():\n            return '42',type='decorated_definition'\nline_star:120,line_end:122|char_star:8,char_end:23"->"@app.route('/'),type='decorator'\nline_star:120,line_end:120|char_star:8,char_end:23";
"def index():\n            return '42',type='function_definition'\nline_star:121,line_end:122|char_star:8,char_end:23"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.route('/')\n        def index():\n            return '42',type='decorated_definition'\nline_star:120,line_end:122|char_star:8,char_end:23"->"def index():\n            return '42',type='function_definition'\nline_star:121,line_end:122|char_star:8,char_end:23";
"index,type='identifier'\nline_star:121,line_end:121|char_star:12,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"def index():\n            return '42',type='function_definition'\nline_star:121,line_end:122|char_star:8,char_end:23"->"index,type='identifier'\nline_star:121,line_end:121|char_star:12,char_end:17";
"type='INFORMATION BLOCK'\nline_star:122,line_end:122|char_star:12,char_end:23"[shape="point",fillcolor="#121013",style=filled];
"def index():\n            return '42',type='function_definition'\nline_star:121,line_end:122|char_star:8,char_end:23"->"type='INFORMATION BLOCK'\nline_star:122,line_end:122|char_star:12,char_end:23";
"return '42',type='return_statement'\nline_star:122,line_end:122|char_star:12,char_end:23"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:122,line_end:122|char_star:12,char_end:23"->"return '42',type='return_statement'\nline_star:122,line_end:122|char_star:12,char_end:23";
"def test_url_for_with_alternating_schemes(self, app, req_ctx):\n        @app.route('/')\n        def index():\n            return '42'\n\n        assert flask.url_for('index', _external=True) == 'http://localhost/'\n        assert (\n            flask.url_for('index', _external=True, _scheme='https')\n            == 'https://localhost/'\n        )\n        assert flask.url_for('index', _external=True) == 'http://localhost/',type='function_definition'\nline_star:126,line_end:136|char_star:4,char_end:76"[shape="box",fillcolor="#cee6b4",style=filled];
"type='INFORMATION BLOCK'\nline_star:102,line_end:157|char_star:4,char_end:74"->"def test_url_for_with_alternating_schemes(self, app, req_ctx):\n        @app.route('/')\n        def index():\n            return '42'\n\n        assert flask.url_for('index', _external=True) == 'http://localhost/'\n        assert (\n            flask.url_for('index', _external=True, _scheme='https')\n            == 'https://localhost/'\n        )\n        assert flask.url_for('index', _external=True) == 'http://localhost/',type='function_definition'\nline_star:126,line_end:136|char_star:4,char_end:76";
"test_url_for_with_alternating_schemes,type='identifier'\nline_star:126,line_end:126|char_star:8,char_end:45"[shape="point",fillcolor="#121013",style=filled];
"def test_url_for_with_alternating_schemes(self, app, req_ctx):\n        @app.route('/')\n        def index():\n            return '42'\n\n        assert flask.url_for('index', _external=True) == 'http://localhost/'\n        assert (\n            flask.url_for('index', _external=True, _scheme='https')\n            == 'https://localhost/'\n        )\n        assert flask.url_for('index', _external=True) == 'http://localhost/',type='function_definition'\nline_star:126,line_end:136|char_star:4,char_end:76"->"test_url_for_with_alternating_schemes,type='identifier'\nline_star:126,line_end:126|char_star:8,char_end:45";
"(self, app, req_ctx),type='parameters'\nline_star:126,line_end:126|char_star:45,char_end:65"[shape="box",fillcolor="white",style=filled];
"def test_url_for_with_alternating_schemes(self, app, req_ctx):\n        @app.route('/')\n        def index():\n            return '42'\n\n        assert flask.url_for('index', _external=True) == 'http://localhost/'\n        assert (\n            flask.url_for('index', _external=True, _scheme='https')\n            == 'https://localhost/'\n        )\n        assert flask.url_for('index', _external=True) == 'http://localhost/',type='function_definition'\nline_star:126,line_end:136|char_star:4,char_end:76"->"(self, app, req_ctx),type='parameters'\nline_star:126,line_end:126|char_star:45,char_end:65";
"self,type='identifier'\nline_star:126,line_end:126|char_star:46,char_end:50"[shape="point",fillcolor="#121013",style=filled];
"(self, app, req_ctx),type='parameters'\nline_star:126,line_end:126|char_star:45,char_end:65"->"self,type='identifier'\nline_star:126,line_end:126|char_star:46,char_end:50";
"app,type='identifier'\nline_star:126,line_end:126|char_star:52,char_end:55"[shape="point",fillcolor="#121013",style=filled];
"(self, app, req_ctx),type='parameters'\nline_star:126,line_end:126|char_star:45,char_end:65"->"app,type='identifier'\nline_star:126,line_end:126|char_star:52,char_end:55";
"req_ctx,type='identifier'\nline_star:126,line_end:126|char_star:57,char_end:64"[shape="point",fillcolor="#121013",style=filled];
"(self, app, req_ctx),type='parameters'\nline_star:126,line_end:126|char_star:45,char_end:65"->"req_ctx,type='identifier'\nline_star:126,line_end:126|char_star:57,char_end:64";
"type='INFORMATION BLOCK'\nline_star:127,line_end:136|char_star:8,char_end:76"[shape="point",fillcolor="#121013",style=filled];
"def test_url_for_with_alternating_schemes(self, app, req_ctx):\n        @app.route('/')\n        def index():\n            return '42'\n\n        assert flask.url_for('index', _external=True) == 'http://localhost/'\n        assert (\n            flask.url_for('index', _external=True, _scheme='https')\n            == 'https://localhost/'\n        )\n        assert flask.url_for('index', _external=True) == 'http://localhost/',type='function_definition'\nline_star:126,line_end:136|char_star:4,char_end:76"->"type='INFORMATION BLOCK'\nline_star:127,line_end:136|char_star:8,char_end:76";
"@app.route('/')\n        def index():\n            return '42',type='decorated_definition'\nline_star:127,line_end:129|char_star:8,char_end:23"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:127,line_end:136|char_star:8,char_end:76"->"@app.route('/')\n        def index():\n            return '42',type='decorated_definition'\nline_star:127,line_end:129|char_star:8,char_end:23";
"@app.route('/'),type='decorator'\nline_star:127,line_end:127|char_star:8,char_end:23"[shape="box",fillcolor="white",style=filled];
"@app.route('/')\n        def index():\n            return '42',type='decorated_definition'\nline_star:127,line_end:129|char_star:8,char_end:23"->"@app.route('/'),type='decorator'\nline_star:127,line_end:127|char_star:8,char_end:23";
"def index():\n            return '42',type='function_definition'\nline_star:128,line_end:129|char_star:8,char_end:23"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.route('/')\n        def index():\n            return '42',type='decorated_definition'\nline_star:127,line_end:129|char_star:8,char_end:23"->"def index():\n            return '42',type='function_definition'\nline_star:128,line_end:129|char_star:8,char_end:23";
"index,type='identifier'\nline_star:128,line_end:128|char_star:12,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"def index():\n            return '42',type='function_definition'\nline_star:128,line_end:129|char_star:8,char_end:23"->"index,type='identifier'\nline_star:128,line_end:128|char_star:12,char_end:17";
"type='INFORMATION BLOCK'\nline_star:129,line_end:129|char_star:12,char_end:23"[shape="point",fillcolor="#121013",style=filled];
"def index():\n            return '42',type='function_definition'\nline_star:128,line_end:129|char_star:8,char_end:23"->"type='INFORMATION BLOCK'\nline_star:129,line_end:129|char_star:12,char_end:23";
"return '42',type='return_statement'\nline_star:129,line_end:129|char_star:12,char_end:23"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:129,line_end:129|char_star:12,char_end:23"->"return '42',type='return_statement'\nline_star:129,line_end:129|char_star:12,char_end:23";
"assert flask.url_for('index', _external=True) == 'http://localhost/',type='assert_statement'\nline_star:131,line_end:131|char_star:8,char_end:76"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:127,line_end:136|char_star:8,char_end:76"->"assert flask.url_for('index', _external=True) == 'http://localhost/',type='assert_statement'\nline_star:131,line_end:131|char_star:8,char_end:76";
"flask.url_for('index', _external=True) == 'http://localhost/',type='comparison_operator'\nline_star:131,line_end:131|char_star:15,char_end:76"[shape="box",fillcolor="white",style=filled];
"assert flask.url_for('index', _external=True) == 'http://localhost/',type='assert_statement'\nline_star:131,line_end:131|char_star:8,char_end:76"->"flask.url_for('index', _external=True) == 'http://localhost/',type='comparison_operator'\nline_star:131,line_end:131|char_star:15,char_end:76";
"flask.url_for('index', _external=True),type='call'\nline_star:131,line_end:131|char_star:15,char_end:53"[shape="box",fillcolor="white",style=filled];
"flask.url_for('index', _external=True) == 'http://localhost/',type='comparison_operator'\nline_star:131,line_end:131|char_star:15,char_end:76"->"flask.url_for('index', _external=True),type='call'\nline_star:131,line_end:131|char_star:15,char_end:53";
"flask.url_for,type='attribute'\nline_star:131,line_end:131|char_star:15,char_end:28"[shape="box",fillcolor="white",style=filled];
"flask.url_for('index', _external=True),type='call'\nline_star:131,line_end:131|char_star:15,char_end:53"->"flask.url_for,type='attribute'\nline_star:131,line_end:131|char_star:15,char_end:28";
"flask,type='identifier'\nline_star:131,line_end:131|char_star:15,char_end:20"[shape="point",fillcolor="#121013",style=filled];
"flask.url_for,type='attribute'\nline_star:131,line_end:131|char_star:15,char_end:28"->"flask,type='identifier'\nline_star:131,line_end:131|char_star:15,char_end:20";
"url_for,type='identifier'\nline_star:131,line_end:131|char_star:21,char_end:28"[shape="point",fillcolor="#121013",style=filled];
"flask.url_for,type='attribute'\nline_star:131,line_end:131|char_star:15,char_end:28"->"url_for,type='identifier'\nline_star:131,line_end:131|char_star:21,char_end:28";
"('index', _external=True),type='argument_list'\nline_star:131,line_end:131|char_star:28,char_end:53"[shape="box",fillcolor="white",style=filled];
"flask.url_for('index', _external=True),type='call'\nline_star:131,line_end:131|char_star:15,char_end:53"->"('index', _external=True),type='argument_list'\nline_star:131,line_end:131|char_star:28,char_end:53";
"_external=True,type='keyword_argument'\nline_star:131,line_end:131|char_star:38,char_end:52"[shape="box",fillcolor="white",style=filled];
"('index', _external=True),type='argument_list'\nline_star:131,line_end:131|char_star:28,char_end:53"->"_external=True,type='keyword_argument'\nline_star:131,line_end:131|char_star:38,char_end:52";
"_external,type='identifier'\nline_star:131,line_end:131|char_star:38,char_end:47"[shape="point",fillcolor="#121013",style=filled];
"_external=True,type='keyword_argument'\nline_star:131,line_end:131|char_star:38,char_end:52"->"_external,type='identifier'\nline_star:131,line_end:131|char_star:38,char_end:47";
"assert (\n            flask.url_for('index', _external=True, _scheme='https')\n            == 'https://localhost/'\n        ),type='assert_statement'\nline_star:132,line_end:135|char_star:8,char_end:9"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:127,line_end:136|char_star:8,char_end:76"->"assert (\n            flask.url_for('index', _external=True, _scheme='https')\n            == 'https://localhost/'\n        ),type='assert_statement'\nline_star:132,line_end:135|char_star:8,char_end:9";
"(\n            flask.url_for('index', _external=True, _scheme='https')\n            == 'https://localhost/'\n        ),type='parenthesized_expression'\nline_star:132,line_end:135|char_star:15,char_end:9"[shape="box",fillcolor="white",style=filled];
"assert (\n            flask.url_for('index', _external=True, _scheme='https')\n            == 'https://localhost/'\n        ),type='assert_statement'\nline_star:132,line_end:135|char_star:8,char_end:9"->"(\n            flask.url_for('index', _external=True, _scheme='https')\n            == 'https://localhost/'\n        ),type='parenthesized_expression'\nline_star:132,line_end:135|char_star:15,char_end:9";
"flask.url_for('index', _external=True, _scheme='https')\n            == 'https://localhost/',type='comparison_operator'\nline_star:133,line_end:134|char_star:12,char_end:35"[shape="box",fillcolor="white",style=filled];
"(\n            flask.url_for('index', _external=True, _scheme='https')\n            == 'https://localhost/'\n        ),type='parenthesized_expression'\nline_star:132,line_end:135|char_star:15,char_end:9"->"flask.url_for('index', _external=True, _scheme='https')\n            == 'https://localhost/',type='comparison_operator'\nline_star:133,line_end:134|char_star:12,char_end:35";
"flask.url_for('index', _external=True, _scheme='https'),type='call'\nline_star:133,line_end:133|char_star:12,char_end:67"[shape="box",fillcolor="white",style=filled];
"flask.url_for('index', _external=True, _scheme='https')\n            == 'https://localhost/',type='comparison_operator'\nline_star:133,line_end:134|char_star:12,char_end:35"->"flask.url_for('index', _external=True, _scheme='https'),type='call'\nline_star:133,line_end:133|char_star:12,char_end:67";
"flask.url_for,type='attribute'\nline_star:133,line_end:133|char_star:12,char_end:25"[shape="box",fillcolor="white",style=filled];
"flask.url_for('index', _external=True, _scheme='https'),type='call'\nline_star:133,line_end:133|char_star:12,char_end:67"->"flask.url_for,type='attribute'\nline_star:133,line_end:133|char_star:12,char_end:25";
"flask,type='identifier'\nline_star:133,line_end:133|char_star:12,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"flask.url_for,type='attribute'\nline_star:133,line_end:133|char_star:12,char_end:25"->"flask,type='identifier'\nline_star:133,line_end:133|char_star:12,char_end:17";
"url_for,type='identifier'\nline_star:133,line_end:133|char_star:18,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"flask.url_for,type='attribute'\nline_star:133,line_end:133|char_star:12,char_end:25"->"url_for,type='identifier'\nline_star:133,line_end:133|char_star:18,char_end:25";
"('index', _external=True, _scheme='https'),type='argument_list'\nline_star:133,line_end:133|char_star:25,char_end:67"[shape="box",fillcolor="white",style=filled];
"flask.url_for('index', _external=True, _scheme='https'),type='call'\nline_star:133,line_end:133|char_star:12,char_end:67"->"('index', _external=True, _scheme='https'),type='argument_list'\nline_star:133,line_end:133|char_star:25,char_end:67";
"_external=True,type='keyword_argument'\nline_star:133,line_end:133|char_star:35,char_end:49"[shape="box",fillcolor="white",style=filled];
"('index', _external=True, _scheme='https'),type='argument_list'\nline_star:133,line_end:133|char_star:25,char_end:67"->"_external=True,type='keyword_argument'\nline_star:133,line_end:133|char_star:35,char_end:49";
"_external,type='identifier'\nline_star:133,line_end:133|char_star:35,char_end:44"[shape="point",fillcolor="#121013",style=filled];
"_external=True,type='keyword_argument'\nline_star:133,line_end:133|char_star:35,char_end:49"->"_external,type='identifier'\nline_star:133,line_end:133|char_star:35,char_end:44";
"_scheme='https',type='keyword_argument'\nline_star:133,line_end:133|char_star:51,char_end:66"[shape="box",fillcolor="white",style=filled];
"('index', _external=True, _scheme='https'),type='argument_list'\nline_star:133,line_end:133|char_star:25,char_end:67"->"_scheme='https',type='keyword_argument'\nline_star:133,line_end:133|char_star:51,char_end:66";
"_scheme,type='identifier'\nline_star:133,line_end:133|char_star:51,char_end:58"[shape="point",fillcolor="#121013",style=filled];
"_scheme='https',type='keyword_argument'\nline_star:133,line_end:133|char_star:51,char_end:66"->"_scheme,type='identifier'\nline_star:133,line_end:133|char_star:51,char_end:58";
"assert flask.url_for('index', _external=True) == 'http://localhost/',type='assert_statement'\nline_star:136,line_end:136|char_star:8,char_end:76"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:127,line_end:136|char_star:8,char_end:76"->"assert flask.url_for('index', _external=True) == 'http://localhost/',type='assert_statement'\nline_star:136,line_end:136|char_star:8,char_end:76";
"flask.url_for('index', _external=True) == 'http://localhost/',type='comparison_operator'\nline_star:136,line_end:136|char_star:15,char_end:76"[shape="box",fillcolor="white",style=filled];
"assert flask.url_for('index', _external=True) == 'http://localhost/',type='assert_statement'\nline_star:136,line_end:136|char_star:8,char_end:76"->"flask.url_for('index', _external=True) == 'http://localhost/',type='comparison_operator'\nline_star:136,line_end:136|char_star:15,char_end:76";
"flask.url_for('index', _external=True),type='call'\nline_star:136,line_end:136|char_star:15,char_end:53"[shape="box",fillcolor="white",style=filled];
"flask.url_for('index', _external=True) == 'http://localhost/',type='comparison_operator'\nline_star:136,line_end:136|char_star:15,char_end:76"->"flask.url_for('index', _external=True),type='call'\nline_star:136,line_end:136|char_star:15,char_end:53";
"flask.url_for,type='attribute'\nline_star:136,line_end:136|char_star:15,char_end:28"[shape="box",fillcolor="white",style=filled];
"flask.url_for('index', _external=True),type='call'\nline_star:136,line_end:136|char_star:15,char_end:53"->"flask.url_for,type='attribute'\nline_star:136,line_end:136|char_star:15,char_end:28";
"flask,type='identifier'\nline_star:136,line_end:136|char_star:15,char_end:20"[shape="point",fillcolor="#121013",style=filled];
"flask.url_for,type='attribute'\nline_star:136,line_end:136|char_star:15,char_end:28"->"flask,type='identifier'\nline_star:136,line_end:136|char_star:15,char_end:20";
"url_for,type='identifier'\nline_star:136,line_end:136|char_star:21,char_end:28"[shape="point",fillcolor="#121013",style=filled];
"flask.url_for,type='attribute'\nline_star:136,line_end:136|char_star:15,char_end:28"->"url_for,type='identifier'\nline_star:136,line_end:136|char_star:21,char_end:28";
"('index', _external=True),type='argument_list'\nline_star:136,line_end:136|char_star:28,char_end:53"[shape="box",fillcolor="white",style=filled];
"flask.url_for('index', _external=True),type='call'\nline_star:136,line_end:136|char_star:15,char_end:53"->"('index', _external=True),type='argument_list'\nline_star:136,line_end:136|char_star:28,char_end:53";
"_external=True,type='keyword_argument'\nline_star:136,line_end:136|char_star:38,char_end:52"[shape="box",fillcolor="white",style=filled];
"('index', _external=True),type='argument_list'\nline_star:136,line_end:136|char_star:28,char_end:53"->"_external=True,type='keyword_argument'\nline_star:136,line_end:136|char_star:38,char_end:52";
"_external,type='identifier'\nline_star:136,line_end:136|char_star:38,char_end:47"[shape="point",fillcolor="#121013",style=filled];
"_external=True,type='keyword_argument'\nline_star:136,line_end:136|char_star:38,char_end:52"->"_external,type='identifier'\nline_star:136,line_end:136|char_star:38,char_end:47";
"def test_url_with_method(self, app, req_ctx):\n        from flask.views import MethodView\n\n        class MyView(MethodView):\n            def get(self, id=None):\n                if id is None:\n                    return 'List'\n                return f'Get {id:d}'\n\n            def post(self):\n                return 'Create'\n\n        myview = MyView.as_view('myview')\n        app.add_url_rule('/myview/', methods=['GET'], view_func=myview)\n        app.add_url_rule('/myview/<int:id>', methods=['GET'], view_func=myview)\n        app.add_url_rule('/myview/create', methods=['POST'], view_func=myview)\n\n        assert flask.url_for('myview', _method='GET') == '/myview/'\n        assert flask.url_for('myview', id=42, _method='GET') == '/myview/42'\n        assert flask.url_for('myview', _method='POST') == '/myview/create',type='function_definition'\nline_star:138,line_end:157|char_star:4,char_end:74"[shape="box",fillcolor="#cee6b4",style=filled];
"type='INFORMATION BLOCK'\nline_star:102,line_end:157|char_star:4,char_end:74"->"def test_url_with_method(self, app, req_ctx):\n        from flask.views import MethodView\n\n        class MyView(MethodView):\n            def get(self, id=None):\n                if id is None:\n                    return 'List'\n                return f'Get {id:d}'\n\n            def post(self):\n                return 'Create'\n\n        myview = MyView.as_view('myview')\n        app.add_url_rule('/myview/', methods=['GET'], view_func=myview)\n        app.add_url_rule('/myview/<int:id>', methods=['GET'], view_func=myview)\n        app.add_url_rule('/myview/create', methods=['POST'], view_func=myview)\n\n        assert flask.url_for('myview', _method='GET') == '/myview/'\n        assert flask.url_for('myview', id=42, _method='GET') == '/myview/42'\n        assert flask.url_for('myview', _method='POST') == '/myview/create',type='function_definition'\nline_star:138,line_end:157|char_star:4,char_end:74";
"test_url_with_method,type='identifier'\nline_star:138,line_end:138|char_star:8,char_end:28"[shape="point",fillcolor="#121013",style=filled];
"def test_url_with_method(self, app, req_ctx):\n        from flask.views import MethodView\n\n        class MyView(MethodView):\n            def get(self, id=None):\n                if id is None:\n                    return 'List'\n                return f'Get {id:d}'\n\n            def post(self):\n                return 'Create'\n\n        myview = MyView.as_view('myview')\n        app.add_url_rule('/myview/', methods=['GET'], view_func=myview)\n        app.add_url_rule('/myview/<int:id>', methods=['GET'], view_func=myview)\n        app.add_url_rule('/myview/create', methods=['POST'], view_func=myview)\n\n        assert flask.url_for('myview', _method='GET') == '/myview/'\n        assert flask.url_for('myview', id=42, _method='GET') == '/myview/42'\n        assert flask.url_for('myview', _method='POST') == '/myview/create',type='function_definition'\nline_star:138,line_end:157|char_star:4,char_end:74"->"test_url_with_method,type='identifier'\nline_star:138,line_end:138|char_star:8,char_end:28";
"(self, app, req_ctx),type='parameters'\nline_star:138,line_end:138|char_star:28,char_end:48"[shape="box",fillcolor="white",style=filled];
"def test_url_with_method(self, app, req_ctx):\n        from flask.views import MethodView\n\n        class MyView(MethodView):\n            def get(self, id=None):\n                if id is None:\n                    return 'List'\n                return f'Get {id:d}'\n\n            def post(self):\n                return 'Create'\n\n        myview = MyView.as_view('myview')\n        app.add_url_rule('/myview/', methods=['GET'], view_func=myview)\n        app.add_url_rule('/myview/<int:id>', methods=['GET'], view_func=myview)\n        app.add_url_rule('/myview/create', methods=['POST'], view_func=myview)\n\n        assert flask.url_for('myview', _method='GET') == '/myview/'\n        assert flask.url_for('myview', id=42, _method='GET') == '/myview/42'\n        assert flask.url_for('myview', _method='POST') == '/myview/create',type='function_definition'\nline_star:138,line_end:157|char_star:4,char_end:74"->"(self, app, req_ctx),type='parameters'\nline_star:138,line_end:138|char_star:28,char_end:48";
"self,type='identifier'\nline_star:138,line_end:138|char_star:29,char_end:33"[shape="point",fillcolor="#121013",style=filled];
"(self, app, req_ctx),type='parameters'\nline_star:138,line_end:138|char_star:28,char_end:48"->"self,type='identifier'\nline_star:138,line_end:138|char_star:29,char_end:33";
"app,type='identifier'\nline_star:138,line_end:138|char_star:35,char_end:38"[shape="point",fillcolor="#121013",style=filled];
"(self, app, req_ctx),type='parameters'\nline_star:138,line_end:138|char_star:28,char_end:48"->"app,type='identifier'\nline_star:138,line_end:138|char_star:35,char_end:38";
"req_ctx,type='identifier'\nline_star:138,line_end:138|char_star:40,char_end:47"[shape="point",fillcolor="#121013",style=filled];
"(self, app, req_ctx),type='parameters'\nline_star:138,line_end:138|char_star:28,char_end:48"->"req_ctx,type='identifier'\nline_star:138,line_end:138|char_star:40,char_end:47";
"type='INFORMATION BLOCK'\nline_star:139,line_end:157|char_star:8,char_end:74"[shape="point",fillcolor="#121013",style=filled];
"def test_url_with_method(self, app, req_ctx):\n        from flask.views import MethodView\n\n        class MyView(MethodView):\n            def get(self, id=None):\n                if id is None:\n                    return 'List'\n                return f'Get {id:d}'\n\n            def post(self):\n                return 'Create'\n\n        myview = MyView.as_view('myview')\n        app.add_url_rule('/myview/', methods=['GET'], view_func=myview)\n        app.add_url_rule('/myview/<int:id>', methods=['GET'], view_func=myview)\n        app.add_url_rule('/myview/create', methods=['POST'], view_func=myview)\n\n        assert flask.url_for('myview', _method='GET') == '/myview/'\n        assert flask.url_for('myview', id=42, _method='GET') == '/myview/42'\n        assert flask.url_for('myview', _method='POST') == '/myview/create',type='function_definition'\nline_star:138,line_end:157|char_star:4,char_end:74"->"type='INFORMATION BLOCK'\nline_star:139,line_end:157|char_star:8,char_end:74";
"from flask.views import MethodView,type='import_from_statement'\nline_star:139,line_end:139|char_star:8,char_end:42"[shape="box",fillcolor="#f48b29",style=filled];
"type='INFORMATION BLOCK'\nline_star:139,line_end:157|char_star:8,char_end:74"->"from flask.views import MethodView,type='import_from_statement'\nline_star:139,line_end:139|char_star:8,char_end:42";
"class MyView(MethodView):\n            def get(self, id=None):\n                if id is None:\n                    return 'List'\n                return f'Get {id:d}'\n\n            def post(self):\n                return 'Create',type='class_definition'\nline_star:141,line_end:148|char_star:8,char_end:31"[shape="box",fillcolor="#ffdf91",style=filled];
"type='INFORMATION BLOCK'\nline_star:139,line_end:157|char_star:8,char_end:74"->"class MyView(MethodView):\n            def get(self, id=None):\n                if id is None:\n                    return 'List'\n                return f'Get {id:d}'\n\n            def post(self):\n                return 'Create',type='class_definition'\nline_star:141,line_end:148|char_star:8,char_end:31";
"MyView,type='identifier'\nline_star:141,line_end:141|char_star:14,char_end:20"[shape="point",fillcolor="#121013",style=filled];
"class MyView(MethodView):\n            def get(self, id=None):\n                if id is None:\n                    return 'List'\n                return f'Get {id:d}'\n\n            def post(self):\n                return 'Create',type='class_definition'\nline_star:141,line_end:148|char_star:8,char_end:31"->"MyView,type='identifier'\nline_star:141,line_end:141|char_star:14,char_end:20";
"(MethodView),type='argument_list'\nline_star:141,line_end:141|char_star:20,char_end:32"[shape="box",fillcolor="white",style=filled];
"class MyView(MethodView):\n            def get(self, id=None):\n                if id is None:\n                    return 'List'\n                return f'Get {id:d}'\n\n            def post(self):\n                return 'Create',type='class_definition'\nline_star:141,line_end:148|char_star:8,char_end:31"->"(MethodView),type='argument_list'\nline_star:141,line_end:141|char_star:20,char_end:32";
"MethodView,type='identifier'\nline_star:141,line_end:141|char_star:21,char_end:31"[shape="point",fillcolor="#121013",style=filled];
"(MethodView),type='argument_list'\nline_star:141,line_end:141|char_star:20,char_end:32"->"MethodView,type='identifier'\nline_star:141,line_end:141|char_star:21,char_end:31";
"type='INFORMATION BLOCK'\nline_star:142,line_end:148|char_star:12,char_end:31"[shape="point",fillcolor="#121013",style=filled];
"class MyView(MethodView):\n            def get(self, id=None):\n                if id is None:\n                    return 'List'\n                return f'Get {id:d}'\n\n            def post(self):\n                return 'Create',type='class_definition'\nline_star:141,line_end:148|char_star:8,char_end:31"->"type='INFORMATION BLOCK'\nline_star:142,line_end:148|char_star:12,char_end:31";
"def get(self, id=None):\n                if id is None:\n                    return 'List'\n                return f'Get {id:d}',type='function_definition'\nline_star:142,line_end:145|char_star:12,char_end:36"[shape="box",fillcolor="#cee6b4",style=filled];
"type='INFORMATION BLOCK'\nline_star:142,line_end:148|char_star:12,char_end:31"->"def get(self, id=None):\n                if id is None:\n                    return 'List'\n                return f'Get {id:d}',type='function_definition'\nline_star:142,line_end:145|char_star:12,char_end:36";
"get,type='identifier'\nline_star:142,line_end:142|char_star:16,char_end:19"[shape="point",fillcolor="#121013",style=filled];
"def get(self, id=None):\n                if id is None:\n                    return 'List'\n                return f'Get {id:d}',type='function_definition'\nline_star:142,line_end:145|char_star:12,char_end:36"->"get,type='identifier'\nline_star:142,line_end:142|char_star:16,char_end:19";
"(self, id=None),type='parameters'\nline_star:142,line_end:142|char_star:19,char_end:34"[shape="box",fillcolor="white",style=filled];
"def get(self, id=None):\n                if id is None:\n                    return 'List'\n                return f'Get {id:d}',type='function_definition'\nline_star:142,line_end:145|char_star:12,char_end:36"->"(self, id=None),type='parameters'\nline_star:142,line_end:142|char_star:19,char_end:34";
"self,type='identifier'\nline_star:142,line_end:142|char_star:20,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"(self, id=None),type='parameters'\nline_star:142,line_end:142|char_star:19,char_end:34"->"self,type='identifier'\nline_star:142,line_end:142|char_star:20,char_end:24";
"id=None,type='default_parameter'\nline_star:142,line_end:142|char_star:26,char_end:33"[shape="box",fillcolor="white",style=filled];
"(self, id=None),type='parameters'\nline_star:142,line_end:142|char_star:19,char_end:34"->"id=None,type='default_parameter'\nline_star:142,line_end:142|char_star:26,char_end:33";
"id,type='identifier'\nline_star:142,line_end:142|char_star:26,char_end:28"[shape="point",fillcolor="#121013",style=filled];
"id=None,type='default_parameter'\nline_star:142,line_end:142|char_star:26,char_end:33"->"id,type='identifier'\nline_star:142,line_end:142|char_star:26,char_end:28";
"type='INFORMATION BLOCK'\nline_star:143,line_end:145|char_star:16,char_end:36"[shape="point",fillcolor="#121013",style=filled];
"def get(self, id=None):\n                if id is None:\n                    return 'List'\n                return f'Get {id:d}',type='function_definition'\nline_star:142,line_end:145|char_star:12,char_end:36"->"type='INFORMATION BLOCK'\nline_star:143,line_end:145|char_star:16,char_end:36";
"if id is None:\n                    return 'List',type='if_statement'\nline_star:143,line_end:144|char_star:16,char_end:33"[shape="box",fillcolor="#9ecca4",style=filled];
"type='INFORMATION BLOCK'\nline_star:143,line_end:145|char_star:16,char_end:36"->"if id is None:\n                    return 'List',type='if_statement'\nline_star:143,line_end:144|char_star:16,char_end:33";
"return f'Get {id:d}',type='return_statement'\nline_star:145,line_end:145|char_star:16,char_end:36"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:143,line_end:145|char_star:16,char_end:36"->"return f'Get {id:d}',type='return_statement'\nline_star:145,line_end:145|char_star:16,char_end:36";
"def post(self):\n                return 'Create',type='function_definition'\nline_star:147,line_end:148|char_star:12,char_end:31"[shape="box",fillcolor="#cee6b4",style=filled];
"type='INFORMATION BLOCK'\nline_star:142,line_end:148|char_star:12,char_end:31"->"def post(self):\n                return 'Create',type='function_definition'\nline_star:147,line_end:148|char_star:12,char_end:31";
"post,type='identifier'\nline_star:147,line_end:147|char_star:16,char_end:20"[shape="point",fillcolor="#121013",style=filled];
"def post(self):\n                return 'Create',type='function_definition'\nline_star:147,line_end:148|char_star:12,char_end:31"->"post,type='identifier'\nline_star:147,line_end:147|char_star:16,char_end:20";
"(self),type='parameters'\nline_star:147,line_end:147|char_star:20,char_end:26"[shape="box",fillcolor="white",style=filled];
"def post(self):\n                return 'Create',type='function_definition'\nline_star:147,line_end:148|char_star:12,char_end:31"->"(self),type='parameters'\nline_star:147,line_end:147|char_star:20,char_end:26";
"self,type='identifier'\nline_star:147,line_end:147|char_star:21,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"(self),type='parameters'\nline_star:147,line_end:147|char_star:20,char_end:26"->"self,type='identifier'\nline_star:147,line_end:147|char_star:21,char_end:25";
"type='INFORMATION BLOCK'\nline_star:148,line_end:148|char_star:16,char_end:31"[shape="point",fillcolor="#121013",style=filled];
"def post(self):\n                return 'Create',type='function_definition'\nline_star:147,line_end:148|char_star:12,char_end:31"->"type='INFORMATION BLOCK'\nline_star:148,line_end:148|char_star:16,char_end:31";
"return 'Create',type='return_statement'\nline_star:148,line_end:148|char_star:16,char_end:31"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:148,line_end:148|char_star:16,char_end:31"->"return 'Create',type='return_statement'\nline_star:148,line_end:148|char_star:16,char_end:31";
"assert flask.url_for('myview', _method='GET') == '/myview/',type='assert_statement'\nline_star:155,line_end:155|char_star:8,char_end:67"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:139,line_end:157|char_star:8,char_end:74"->"assert flask.url_for('myview', _method='GET') == '/myview/',type='assert_statement'\nline_star:155,line_end:155|char_star:8,char_end:67";
"flask.url_for('myview', _method='GET') == '/myview/',type='comparison_operator'\nline_star:155,line_end:155|char_star:15,char_end:67"[shape="box",fillcolor="white",style=filled];
"assert flask.url_for('myview', _method='GET') == '/myview/',type='assert_statement'\nline_star:155,line_end:155|char_star:8,char_end:67"->"flask.url_for('myview', _method='GET') == '/myview/',type='comparison_operator'\nline_star:155,line_end:155|char_star:15,char_end:67";
"flask.url_for('myview', _method='GET'),type='call'\nline_star:155,line_end:155|char_star:15,char_end:53"[shape="box",fillcolor="white",style=filled];
"flask.url_for('myview', _method='GET') == '/myview/',type='comparison_operator'\nline_star:155,line_end:155|char_star:15,char_end:67"->"flask.url_for('myview', _method='GET'),type='call'\nline_star:155,line_end:155|char_star:15,char_end:53";
"flask.url_for,type='attribute'\nline_star:155,line_end:155|char_star:15,char_end:28"[shape="box",fillcolor="white",style=filled];
"flask.url_for('myview', _method='GET'),type='call'\nline_star:155,line_end:155|char_star:15,char_end:53"->"flask.url_for,type='attribute'\nline_star:155,line_end:155|char_star:15,char_end:28";
"flask,type='identifier'\nline_star:155,line_end:155|char_star:15,char_end:20"[shape="point",fillcolor="#121013",style=filled];
"flask.url_for,type='attribute'\nline_star:155,line_end:155|char_star:15,char_end:28"->"flask,type='identifier'\nline_star:155,line_end:155|char_star:15,char_end:20";
"url_for,type='identifier'\nline_star:155,line_end:155|char_star:21,char_end:28"[shape="point",fillcolor="#121013",style=filled];
"flask.url_for,type='attribute'\nline_star:155,line_end:155|char_star:15,char_end:28"->"url_for,type='identifier'\nline_star:155,line_end:155|char_star:21,char_end:28";
"('myview', _method='GET'),type='argument_list'\nline_star:155,line_end:155|char_star:28,char_end:53"[shape="box",fillcolor="white",style=filled];
"flask.url_for('myview', _method='GET'),type='call'\nline_star:155,line_end:155|char_star:15,char_end:53"->"('myview', _method='GET'),type='argument_list'\nline_star:155,line_end:155|char_star:28,char_end:53";
"_method='GET',type='keyword_argument'\nline_star:155,line_end:155|char_star:39,char_end:52"[shape="box",fillcolor="white",style=filled];
"('myview', _method='GET'),type='argument_list'\nline_star:155,line_end:155|char_star:28,char_end:53"->"_method='GET',type='keyword_argument'\nline_star:155,line_end:155|char_star:39,char_end:52";
"_method,type='identifier'\nline_star:155,line_end:155|char_star:39,char_end:46"[shape="point",fillcolor="#121013",style=filled];
"_method='GET',type='keyword_argument'\nline_star:155,line_end:155|char_star:39,char_end:52"->"_method,type='identifier'\nline_star:155,line_end:155|char_star:39,char_end:46";
"assert flask.url_for('myview', id=42, _method='GET') == '/myview/42',type='assert_statement'\nline_star:156,line_end:156|char_star:8,char_end:76"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:139,line_end:157|char_star:8,char_end:74"->"assert flask.url_for('myview', id=42, _method='GET') == '/myview/42',type='assert_statement'\nline_star:156,line_end:156|char_star:8,char_end:76";
"flask.url_for('myview', id=42, _method='GET') == '/myview/42',type='comparison_operator'\nline_star:156,line_end:156|char_star:15,char_end:76"[shape="box",fillcolor="white",style=filled];
"assert flask.url_for('myview', id=42, _method='GET') == '/myview/42',type='assert_statement'\nline_star:156,line_end:156|char_star:8,char_end:76"->"flask.url_for('myview', id=42, _method='GET') == '/myview/42',type='comparison_operator'\nline_star:156,line_end:156|char_star:15,char_end:76";
"flask.url_for('myview', id=42, _method='GET'),type='call'\nline_star:156,line_end:156|char_star:15,char_end:60"[shape="box",fillcolor="white",style=filled];
"flask.url_for('myview', id=42, _method='GET') == '/myview/42',type='comparison_operator'\nline_star:156,line_end:156|char_star:15,char_end:76"->"flask.url_for('myview', id=42, _method='GET'),type='call'\nline_star:156,line_end:156|char_star:15,char_end:60";
"flask.url_for,type='attribute'\nline_star:156,line_end:156|char_star:15,char_end:28"[shape="box",fillcolor="white",style=filled];
"flask.url_for('myview', id=42, _method='GET'),type='call'\nline_star:156,line_end:156|char_star:15,char_end:60"->"flask.url_for,type='attribute'\nline_star:156,line_end:156|char_star:15,char_end:28";
"flask,type='identifier'\nline_star:156,line_end:156|char_star:15,char_end:20"[shape="point",fillcolor="#121013",style=filled];
"flask.url_for,type='attribute'\nline_star:156,line_end:156|char_star:15,char_end:28"->"flask,type='identifier'\nline_star:156,line_end:156|char_star:15,char_end:20";
"url_for,type='identifier'\nline_star:156,line_end:156|char_star:21,char_end:28"[shape="point",fillcolor="#121013",style=filled];
"flask.url_for,type='attribute'\nline_star:156,line_end:156|char_star:15,char_end:28"->"url_for,type='identifier'\nline_star:156,line_end:156|char_star:21,char_end:28";
"('myview', id=42, _method='GET'),type='argument_list'\nline_star:156,line_end:156|char_star:28,char_end:60"[shape="box",fillcolor="white",style=filled];
"flask.url_for('myview', id=42, _method='GET'),type='call'\nline_star:156,line_end:156|char_star:15,char_end:60"->"('myview', id=42, _method='GET'),type='argument_list'\nline_star:156,line_end:156|char_star:28,char_end:60";
"id=42,type='keyword_argument'\nline_star:156,line_end:156|char_star:39,char_end:44"[shape="box",fillcolor="white",style=filled];
"('myview', id=42, _method='GET'),type='argument_list'\nline_star:156,line_end:156|char_star:28,char_end:60"->"id=42,type='keyword_argument'\nline_star:156,line_end:156|char_star:39,char_end:44";
"id,type='identifier'\nline_star:156,line_end:156|char_star:39,char_end:41"[shape="point",fillcolor="#121013",style=filled];
"id=42,type='keyword_argument'\nline_star:156,line_end:156|char_star:39,char_end:44"->"id,type='identifier'\nline_star:156,line_end:156|char_star:39,char_end:41";
"_method='GET',type='keyword_argument'\nline_star:156,line_end:156|char_star:46,char_end:59"[shape="box",fillcolor="white",style=filled];
"('myview', id=42, _method='GET'),type='argument_list'\nline_star:156,line_end:156|char_star:28,char_end:60"->"_method='GET',type='keyword_argument'\nline_star:156,line_end:156|char_star:46,char_end:59";
"_method,type='identifier'\nline_star:156,line_end:156|char_star:46,char_end:53"[shape="point",fillcolor="#121013",style=filled];
"_method='GET',type='keyword_argument'\nline_star:156,line_end:156|char_star:46,char_end:59"->"_method,type='identifier'\nline_star:156,line_end:156|char_star:46,char_end:53";
"assert flask.url_for('myview', _method='POST') == '/myview/create',type='assert_statement'\nline_star:157,line_end:157|char_star:8,char_end:74"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:139,line_end:157|char_star:8,char_end:74"->"assert flask.url_for('myview', _method='POST') == '/myview/create',type='assert_statement'\nline_star:157,line_end:157|char_star:8,char_end:74";
"flask.url_for('myview', _method='POST') == '/myview/create',type='comparison_operator'\nline_star:157,line_end:157|char_star:15,char_end:74"[shape="box",fillcolor="white",style=filled];
"assert flask.url_for('myview', _method='POST') == '/myview/create',type='assert_statement'\nline_star:157,line_end:157|char_star:8,char_end:74"->"flask.url_for('myview', _method='POST') == '/myview/create',type='comparison_operator'\nline_star:157,line_end:157|char_star:15,char_end:74";
"flask.url_for('myview', _method='POST'),type='call'\nline_star:157,line_end:157|char_star:15,char_end:54"[shape="box",fillcolor="white",style=filled];
"flask.url_for('myview', _method='POST') == '/myview/create',type='comparison_operator'\nline_star:157,line_end:157|char_star:15,char_end:74"->"flask.url_for('myview', _method='POST'),type='call'\nline_star:157,line_end:157|char_star:15,char_end:54";
"flask.url_for,type='attribute'\nline_star:157,line_end:157|char_star:15,char_end:28"[shape="box",fillcolor="white",style=filled];
"flask.url_for('myview', _method='POST'),type='call'\nline_star:157,line_end:157|char_star:15,char_end:54"->"flask.url_for,type='attribute'\nline_star:157,line_end:157|char_star:15,char_end:28";
"flask,type='identifier'\nline_star:157,line_end:157|char_star:15,char_end:20"[shape="point",fillcolor="#121013",style=filled];
"flask.url_for,type='attribute'\nline_star:157,line_end:157|char_star:15,char_end:28"->"flask,type='identifier'\nline_star:157,line_end:157|char_star:15,char_end:20";
"url_for,type='identifier'\nline_star:157,line_end:157|char_star:21,char_end:28"[shape="point",fillcolor="#121013",style=filled];
"flask.url_for,type='attribute'\nline_star:157,line_end:157|char_star:15,char_end:28"->"url_for,type='identifier'\nline_star:157,line_end:157|char_star:21,char_end:28";
"('myview', _method='POST'),type='argument_list'\nline_star:157,line_end:157|char_star:28,char_end:54"[shape="box",fillcolor="white",style=filled];
"flask.url_for('myview', _method='POST'),type='call'\nline_star:157,line_end:157|char_star:15,char_end:54"->"('myview', _method='POST'),type='argument_list'\nline_star:157,line_end:157|char_star:28,char_end:54";
"_method='POST',type='keyword_argument'\nline_star:157,line_end:157|char_star:39,char_end:53"[shape="box",fillcolor="white",style=filled];
"('myview', _method='POST'),type='argument_list'\nline_star:157,line_end:157|char_star:28,char_end:54"->"_method='POST',type='keyword_argument'\nline_star:157,line_end:157|char_star:39,char_end:53";
"_method,type='identifier'\nline_star:157,line_end:157|char_star:39,char_end:46"[shape="point",fillcolor="#121013",style=filled];
"_method='POST',type='keyword_argument'\nline_star:157,line_end:157|char_star:39,char_end:53"->"_method,type='identifier'\nline_star:157,line_end:157|char_star:39,char_end:46";
"class TestNoImports:\n    '''Test Flasks are created without import.\n\n    Avoiding ``__import__`` helps create Flask instances where there are errors\n    at import time.  Those runtime errors will be apparent to the user soon\n    enough, but tools which build Flask instances meta-programmatically benefit\n    from a Flask which does not ``__import__``.  Instead of importing to\n    retrieve file paths or metadata on a module or package, use the pkgutil and\n    imp modules in the Python standard library.\n    '''\n\n    def test_name_with_import_error(self, modules_tmpdir):\n        modules_tmpdir.join('importerror.py').write('raise NotImplementedError()')\n        try:\n            flask.Flask('importerror')\n        except NotImplementedError:\n            AssertionError('Flask(import_name) is importing import_name.'),type='class_definition'\nline_star:160,line_end:176|char_star:0,char_end:74"[shape="box",fillcolor="#ffdf91",style=filled];
"MODULE"->"class TestNoImports:\n    '''Test Flasks are created without import.\n\n    Avoiding ``__import__`` helps create Flask instances where there are errors\n    at import time.  Those runtime errors will be apparent to the user soon\n    enough, but tools which build Flask instances meta-programmatically benefit\n    from a Flask which does not ``__import__``.  Instead of importing to\n    retrieve file paths or metadata on a module or package, use the pkgutil and\n    imp modules in the Python standard library.\n    '''\n\n    def test_name_with_import_error(self, modules_tmpdir):\n        modules_tmpdir.join('importerror.py').write('raise NotImplementedError()')\n        try:\n            flask.Flask('importerror')\n        except NotImplementedError:\n            AssertionError('Flask(import_name) is importing import_name.'),type='class_definition'\nline_star:160,line_end:176|char_star:0,char_end:74";
"TestNoImports,type='identifier'\nline_star:160,line_end:160|char_star:6,char_end:19"[shape="point",fillcolor="#121013",style=filled];
"class TestNoImports:\n    '''Test Flasks are created without import.\n\n    Avoiding ``__import__`` helps create Flask instances where there are errors\n    at import time.  Those runtime errors will be apparent to the user soon\n    enough, but tools which build Flask instances meta-programmatically benefit\n    from a Flask which does not ``__import__``.  Instead of importing to\n    retrieve file paths or metadata on a module or package, use the pkgutil and\n    imp modules in the Python standard library.\n    '''\n\n    def test_name_with_import_error(self, modules_tmpdir):\n        modules_tmpdir.join('importerror.py').write('raise NotImplementedError()')\n        try:\n            flask.Flask('importerror')\n        except NotImplementedError:\n            AssertionError('Flask(import_name) is importing import_name.'),type='class_definition'\nline_star:160,line_end:176|char_star:0,char_end:74"->"TestNoImports,type='identifier'\nline_star:160,line_end:160|char_star:6,char_end:19";
"type='INFORMATION BLOCK'\nline_star:161,line_end:176|char_star:4,char_end:74"[shape="point",fillcolor="#121013",style=filled];
"class TestNoImports:\n    '''Test Flasks are created without import.\n\n    Avoiding ``__import__`` helps create Flask instances where there are errors\n    at import time.  Those runtime errors will be apparent to the user soon\n    enough, but tools which build Flask instances meta-programmatically benefit\n    from a Flask which does not ``__import__``.  Instead of importing to\n    retrieve file paths or metadata on a module or package, use the pkgutil and\n    imp modules in the Python standard library.\n    '''\n\n    def test_name_with_import_error(self, modules_tmpdir):\n        modules_tmpdir.join('importerror.py').write('raise NotImplementedError()')\n        try:\n            flask.Flask('importerror')\n        except NotImplementedError:\n            AssertionError('Flask(import_name) is importing import_name.'),type='class_definition'\nline_star:160,line_end:176|char_star:0,char_end:74"->"type='INFORMATION BLOCK'\nline_star:161,line_end:176|char_star:4,char_end:74";
"def test_name_with_import_error(self, modules_tmpdir):\n        modules_tmpdir.join('importerror.py').write('raise NotImplementedError()')\n        try:\n            flask.Flask('importerror')\n        except NotImplementedError:\n            AssertionError('Flask(import_name) is importing import_name.'),type='function_definition'\nline_star:171,line_end:176|char_star:4,char_end:74"[shape="box",fillcolor="#cee6b4",style=filled];
"type='INFORMATION BLOCK'\nline_star:161,line_end:176|char_star:4,char_end:74"->"def test_name_with_import_error(self, modules_tmpdir):\n        modules_tmpdir.join('importerror.py').write('raise NotImplementedError()')\n        try:\n            flask.Flask('importerror')\n        except NotImplementedError:\n            AssertionError('Flask(import_name) is importing import_name.'),type='function_definition'\nline_star:171,line_end:176|char_star:4,char_end:74";
"test_name_with_import_error,type='identifier'\nline_star:171,line_end:171|char_star:8,char_end:35"[shape="point",fillcolor="#121013",style=filled];
"def test_name_with_import_error(self, modules_tmpdir):\n        modules_tmpdir.join('importerror.py').write('raise NotImplementedError()')\n        try:\n            flask.Flask('importerror')\n        except NotImplementedError:\n            AssertionError('Flask(import_name) is importing import_name.'),type='function_definition'\nline_star:171,line_end:176|char_star:4,char_end:74"->"test_name_with_import_error,type='identifier'\nline_star:171,line_end:171|char_star:8,char_end:35";
"(self, modules_tmpdir),type='parameters'\nline_star:171,line_end:171|char_star:35,char_end:57"[shape="box",fillcolor="white",style=filled];
"def test_name_with_import_error(self, modules_tmpdir):\n        modules_tmpdir.join('importerror.py').write('raise NotImplementedError()')\n        try:\n            flask.Flask('importerror')\n        except NotImplementedError:\n            AssertionError('Flask(import_name) is importing import_name.'),type='function_definition'\nline_star:171,line_end:176|char_star:4,char_end:74"->"(self, modules_tmpdir),type='parameters'\nline_star:171,line_end:171|char_star:35,char_end:57";
"self,type='identifier'\nline_star:171,line_end:171|char_star:36,char_end:40"[shape="point",fillcolor="#121013",style=filled];
"(self, modules_tmpdir),type='parameters'\nline_star:171,line_end:171|char_star:35,char_end:57"->"self,type='identifier'\nline_star:171,line_end:171|char_star:36,char_end:40";
"modules_tmpdir,type='identifier'\nline_star:171,line_end:171|char_star:42,char_end:56"[shape="point",fillcolor="#121013",style=filled];
"(self, modules_tmpdir),type='parameters'\nline_star:171,line_end:171|char_star:35,char_end:57"->"modules_tmpdir,type='identifier'\nline_star:171,line_end:171|char_star:42,char_end:56";
"type='INFORMATION BLOCK'\nline_star:172,line_end:176|char_star:8,char_end:74"[shape="point",fillcolor="#121013",style=filled];
"def test_name_with_import_error(self, modules_tmpdir):\n        modules_tmpdir.join('importerror.py').write('raise NotImplementedError()')\n        try:\n            flask.Flask('importerror')\n        except NotImplementedError:\n            AssertionError('Flask(import_name) is importing import_name.'),type='function_definition'\nline_star:171,line_end:176|char_star:4,char_end:74"->"type='INFORMATION BLOCK'\nline_star:172,line_end:176|char_star:8,char_end:74";
"try:\n            flask.Flask('importerror')\n        except NotImplementedError:\n            AssertionError('Flask(import_name) is importing import_name.'),type='try_statement'\nline_star:173,line_end:176|char_star:8,char_end:74"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:172,line_end:176|char_star:8,char_end:74"->"try:\n            flask.Flask('importerror')\n        except NotImplementedError:\n            AssertionError('Flask(import_name) is importing import_name.'),type='try_statement'\nline_star:173,line_end:176|char_star:8,char_end:74";
"try,type='try'\nline_star:173,line_end:173|char_star:8,char_end:11"[shape="box",fillcolor="white",style=filled];
"try:\n            flask.Flask('importerror')\n        except NotImplementedError:\n            AssertionError('Flask(import_name) is importing import_name.'),type='try_statement'\nline_star:173,line_end:176|char_star:8,char_end:74"->"try,type='try'\nline_star:173,line_end:173|char_star:8,char_end:11";
"type='INFORMATION BLOCK'\nline_star:174,line_end:174|char_star:12,char_end:38"[shape="point",fillcolor="#121013",style=filled];
"try:\n            flask.Flask('importerror')\n        except NotImplementedError:\n            AssertionError('Flask(import_name) is importing import_name.'),type='try_statement'\nline_star:173,line_end:176|char_star:8,char_end:74"->"type='INFORMATION BLOCK'\nline_star:174,line_end:174|char_star:12,char_end:38";
"except NotImplementedError:\n            AssertionError('Flask(import_name) is importing import_name.'),type='except_clause'\nline_star:175,line_end:176|char_star:8,char_end:74"[shape="box",fillcolor="white",style=filled];
"try:\n            flask.Flask('importerror')\n        except NotImplementedError:\n            AssertionError('Flask(import_name) is importing import_name.'),type='try_statement'\nline_star:173,line_end:176|char_star:8,char_end:74"->"except NotImplementedError:\n            AssertionError('Flask(import_name) is importing import_name.'),type='except_clause'\nline_star:175,line_end:176|char_star:8,char_end:74";
"except,type='except'\nline_star:175,line_end:175|char_star:8,char_end:14"[shape="box",fillcolor="white",style=filled];
"except NotImplementedError:\n            AssertionError('Flask(import_name) is importing import_name.'),type='except_clause'\nline_star:175,line_end:176|char_star:8,char_end:74"->"except,type='except'\nline_star:175,line_end:175|char_star:8,char_end:14";
"NotImplementedError,type='identifier'\nline_star:175,line_end:175|char_star:15,char_end:34"[shape="point",fillcolor="#121013",style=filled];
"except NotImplementedError:\n            AssertionError('Flask(import_name) is importing import_name.'),type='except_clause'\nline_star:175,line_end:176|char_star:8,char_end:74"->"NotImplementedError,type='identifier'\nline_star:175,line_end:175|char_star:15,char_end:34";
"type='INFORMATION BLOCK'\nline_star:176,line_end:176|char_star:12,char_end:74"[shape="point",fillcolor="#121013",style=filled];
"except NotImplementedError:\n            AssertionError('Flask(import_name) is importing import_name.'),type='except_clause'\nline_star:175,line_end:176|char_star:8,char_end:74"->"type='INFORMATION BLOCK'\nline_star:176,line_end:176|char_star:12,char_end:74";
"class TestStreaming:\n    def test_streaming_with_context(self, app, client):\n        @app.route('/')\n        def index():\n            def generate():\n                yield 'Hello '\n                yield flask.request.args['name']\n                yield '!'\n\n            return flask.Response(flask.stream_with_context(generate()))\n\n        rv = client.get('/?name=World')\n        assert rv.data == b'Hello World!'\n\n    def test_streaming_with_context_as_decorator(self, app, client):\n        @app.route('/')\n        def index():\n            @flask.stream_with_context\n            def generate(hello):\n                yield hello\n                yield flask.request.args['name']\n                yield '!'\n\n            return flask.Response(generate('Hello '))\n\n        rv = client.get('/?name=World')\n        assert rv.data == b'Hello World!'\n\n    def test_streaming_with_context_and_custom_close(self, app, client):\n        called = []\n\n        class Wrapper:\n            def __init__(self, gen):\n                self._gen = gen\n\n            def __iter__(self):\n                return self\n\n            def close(self):\n                called.append(42)\n\n            def __next__(self):\n                return next(self._gen)\n\n            next = __next__\n\n        @app.route('/')\n        def index():\n            def generate():\n                yield 'Hello '\n                yield flask.request.args['name']\n                yield '!'\n\n            return flask.Response(flask.stream_with_context(Wrapper(generate())))\n\n        rv = client.get('/?name=World')\n        assert rv.data == b'Hello World!'\n        assert called == [42]\n\n    def test_stream_keeps_session(self, app, client):\n        @app.route('/')\n        def index():\n            flask.session['test'] = 'flask'\n\n            @flask.stream_with_context\n            def gen():\n                yield flask.session['test']\n\n            return flask.Response(gen())\n\n        rv = client.get('/')\n        assert rv.data == b'flask',type='class_definition'\nline_star:179,line_end:250|char_star:0,char_end:34"[shape="box",fillcolor="#ffdf91",style=filled];
"MODULE"->"class TestStreaming:\n    def test_streaming_with_context(self, app, client):\n        @app.route('/')\n        def index():\n            def generate():\n                yield 'Hello '\n                yield flask.request.args['name']\n                yield '!'\n\n            return flask.Response(flask.stream_with_context(generate()))\n\n        rv = client.get('/?name=World')\n        assert rv.data == b'Hello World!'\n\n    def test_streaming_with_context_as_decorator(self, app, client):\n        @app.route('/')\n        def index():\n            @flask.stream_with_context\n            def generate(hello):\n                yield hello\n                yield flask.request.args['name']\n                yield '!'\n\n            return flask.Response(generate('Hello '))\n\n        rv = client.get('/?name=World')\n        assert rv.data == b'Hello World!'\n\n    def test_streaming_with_context_and_custom_close(self, app, client):\n        called = []\n\n        class Wrapper:\n            def __init__(self, gen):\n                self._gen = gen\n\n            def __iter__(self):\n                return self\n\n            def close(self):\n                called.append(42)\n\n            def __next__(self):\n                return next(self._gen)\n\n            next = __next__\n\n        @app.route('/')\n        def index():\n            def generate():\n                yield 'Hello '\n                yield flask.request.args['name']\n                yield '!'\n\n            return flask.Response(flask.stream_with_context(Wrapper(generate())))\n\n        rv = client.get('/?name=World')\n        assert rv.data == b'Hello World!'\n        assert called == [42]\n\n    def test_stream_keeps_session(self, app, client):\n        @app.route('/')\n        def index():\n            flask.session['test'] = 'flask'\n\n            @flask.stream_with_context\n            def gen():\n                yield flask.session['test']\n\n            return flask.Response(gen())\n\n        rv = client.get('/')\n        assert rv.data == b'flask',type='class_definition'\nline_star:179,line_end:250|char_star:0,char_end:34";
"TestStreaming,type='identifier'\nline_star:179,line_end:179|char_star:6,char_end:19"[shape="point",fillcolor="#121013",style=filled];
"class TestStreaming:\n    def test_streaming_with_context(self, app, client):\n        @app.route('/')\n        def index():\n            def generate():\n                yield 'Hello '\n                yield flask.request.args['name']\n                yield '!'\n\n            return flask.Response(flask.stream_with_context(generate()))\n\n        rv = client.get('/?name=World')\n        assert rv.data == b'Hello World!'\n\n    def test_streaming_with_context_as_decorator(self, app, client):\n        @app.route('/')\n        def index():\n            @flask.stream_with_context\n            def generate(hello):\n                yield hello\n                yield flask.request.args['name']\n                yield '!'\n\n            return flask.Response(generate('Hello '))\n\n        rv = client.get('/?name=World')\n        assert rv.data == b'Hello World!'\n\n    def test_streaming_with_context_and_custom_close(self, app, client):\n        called = []\n\n        class Wrapper:\n            def __init__(self, gen):\n                self._gen = gen\n\n            def __iter__(self):\n                return self\n\n            def close(self):\n                called.append(42)\n\n            def __next__(self):\n                return next(self._gen)\n\n            next = __next__\n\n        @app.route('/')\n        def index():\n            def generate():\n                yield 'Hello '\n                yield flask.request.args['name']\n                yield '!'\n\n            return flask.Response(flask.stream_with_context(Wrapper(generate())))\n\n        rv = client.get('/?name=World')\n        assert rv.data == b'Hello World!'\n        assert called == [42]\n\n    def test_stream_keeps_session(self, app, client):\n        @app.route('/')\n        def index():\n            flask.session['test'] = 'flask'\n\n            @flask.stream_with_context\n            def gen():\n                yield flask.session['test']\n\n            return flask.Response(gen())\n\n        rv = client.get('/')\n        assert rv.data == b'flask',type='class_definition'\nline_star:179,line_end:250|char_star:0,char_end:34"->"TestStreaming,type='identifier'\nline_star:179,line_end:179|char_star:6,char_end:19";
"type='INFORMATION BLOCK'\nline_star:180,line_end:250|char_star:4,char_end:34"[shape="point",fillcolor="#121013",style=filled];
"class TestStreaming:\n    def test_streaming_with_context(self, app, client):\n        @app.route('/')\n        def index():\n            def generate():\n                yield 'Hello '\n                yield flask.request.args['name']\n                yield '!'\n\n            return flask.Response(flask.stream_with_context(generate()))\n\n        rv = client.get('/?name=World')\n        assert rv.data == b'Hello World!'\n\n    def test_streaming_with_context_as_decorator(self, app, client):\n        @app.route('/')\n        def index():\n            @flask.stream_with_context\n            def generate(hello):\n                yield hello\n                yield flask.request.args['name']\n                yield '!'\n\n            return flask.Response(generate('Hello '))\n\n        rv = client.get('/?name=World')\n        assert rv.data == b'Hello World!'\n\n    def test_streaming_with_context_and_custom_close(self, app, client):\n        called = []\n\n        class Wrapper:\n            def __init__(self, gen):\n                self._gen = gen\n\n            def __iter__(self):\n                return self\n\n            def close(self):\n                called.append(42)\n\n            def __next__(self):\n                return next(self._gen)\n\n            next = __next__\n\n        @app.route('/')\n        def index():\n            def generate():\n                yield 'Hello '\n                yield flask.request.args['name']\n                yield '!'\n\n            return flask.Response(flask.stream_with_context(Wrapper(generate())))\n\n        rv = client.get('/?name=World')\n        assert rv.data == b'Hello World!'\n        assert called == [42]\n\n    def test_stream_keeps_session(self, app, client):\n        @app.route('/')\n        def index():\n            flask.session['test'] = 'flask'\n\n            @flask.stream_with_context\n            def gen():\n                yield flask.session['test']\n\n            return flask.Response(gen())\n\n        rv = client.get('/')\n        assert rv.data == b'flask',type='class_definition'\nline_star:179,line_end:250|char_star:0,char_end:34"->"type='INFORMATION BLOCK'\nline_star:180,line_end:250|char_star:4,char_end:34";
"def test_streaming_with_context(self, app, client):\n        @app.route('/')\n        def index():\n            def generate():\n                yield 'Hello '\n                yield flask.request.args['name']\n                yield '!'\n\n            return flask.Response(flask.stream_with_context(generate()))\n\n        rv = client.get('/?name=World')\n        assert rv.data == b'Hello World!',type='function_definition'\nline_star:180,line_end:191|char_star:4,char_end:41"[shape="box",fillcolor="#cee6b4",style=filled];
"type='INFORMATION BLOCK'\nline_star:180,line_end:250|char_star:4,char_end:34"->"def test_streaming_with_context(self, app, client):\n        @app.route('/')\n        def index():\n            def generate():\n                yield 'Hello '\n                yield flask.request.args['name']\n                yield '!'\n\n            return flask.Response(flask.stream_with_context(generate()))\n\n        rv = client.get('/?name=World')\n        assert rv.data == b'Hello World!',type='function_definition'\nline_star:180,line_end:191|char_star:4,char_end:41";
"test_streaming_with_context,type='identifier'\nline_star:180,line_end:180|char_star:8,char_end:35"[shape="point",fillcolor="#121013",style=filled];
"def test_streaming_with_context(self, app, client):\n        @app.route('/')\n        def index():\n            def generate():\n                yield 'Hello '\n                yield flask.request.args['name']\n                yield '!'\n\n            return flask.Response(flask.stream_with_context(generate()))\n\n        rv = client.get('/?name=World')\n        assert rv.data == b'Hello World!',type='function_definition'\nline_star:180,line_end:191|char_star:4,char_end:41"->"test_streaming_with_context,type='identifier'\nline_star:180,line_end:180|char_star:8,char_end:35";
"(self, app, client),type='parameters'\nline_star:180,line_end:180|char_star:35,char_end:54"[shape="box",fillcolor="white",style=filled];
"def test_streaming_with_context(self, app, client):\n        @app.route('/')\n        def index():\n            def generate():\n                yield 'Hello '\n                yield flask.request.args['name']\n                yield '!'\n\n            return flask.Response(flask.stream_with_context(generate()))\n\n        rv = client.get('/?name=World')\n        assert rv.data == b'Hello World!',type='function_definition'\nline_star:180,line_end:191|char_star:4,char_end:41"->"(self, app, client),type='parameters'\nline_star:180,line_end:180|char_star:35,char_end:54";
"self,type='identifier'\nline_star:180,line_end:180|char_star:36,char_end:40"[shape="point",fillcolor="#121013",style=filled];
"(self, app, client),type='parameters'\nline_star:180,line_end:180|char_star:35,char_end:54"->"self,type='identifier'\nline_star:180,line_end:180|char_star:36,char_end:40";
"app,type='identifier'\nline_star:180,line_end:180|char_star:42,char_end:45"[shape="point",fillcolor="#121013",style=filled];
"(self, app, client),type='parameters'\nline_star:180,line_end:180|char_star:35,char_end:54"->"app,type='identifier'\nline_star:180,line_end:180|char_star:42,char_end:45";
"client,type='identifier'\nline_star:180,line_end:180|char_star:47,char_end:53"[shape="point",fillcolor="#121013",style=filled];
"(self, app, client),type='parameters'\nline_star:180,line_end:180|char_star:35,char_end:54"->"client,type='identifier'\nline_star:180,line_end:180|char_star:47,char_end:53";
"type='INFORMATION BLOCK'\nline_star:181,line_end:191|char_star:8,char_end:41"[shape="point",fillcolor="#121013",style=filled];
"def test_streaming_with_context(self, app, client):\n        @app.route('/')\n        def index():\n            def generate():\n                yield 'Hello '\n                yield flask.request.args['name']\n                yield '!'\n\n            return flask.Response(flask.stream_with_context(generate()))\n\n        rv = client.get('/?name=World')\n        assert rv.data == b'Hello World!',type='function_definition'\nline_star:180,line_end:191|char_star:4,char_end:41"->"type='INFORMATION BLOCK'\nline_star:181,line_end:191|char_star:8,char_end:41";
"@app.route('/')\n        def index():\n            def generate():\n                yield 'Hello '\n                yield flask.request.args['name']\n                yield '!'\n\n            return flask.Response(flask.stream_with_context(generate())),type='decorated_definition'\nline_star:181,line_end:188|char_star:8,char_end:72"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:181,line_end:191|char_star:8,char_end:41"->"@app.route('/')\n        def index():\n            def generate():\n                yield 'Hello '\n                yield flask.request.args['name']\n                yield '!'\n\n            return flask.Response(flask.stream_with_context(generate())),type='decorated_definition'\nline_star:181,line_end:188|char_star:8,char_end:72";
"@app.route('/'),type='decorator'\nline_star:181,line_end:181|char_star:8,char_end:23"[shape="box",fillcolor="white",style=filled];
"@app.route('/')\n        def index():\n            def generate():\n                yield 'Hello '\n                yield flask.request.args['name']\n                yield '!'\n\n            return flask.Response(flask.stream_with_context(generate())),type='decorated_definition'\nline_star:181,line_end:188|char_star:8,char_end:72"->"@app.route('/'),type='decorator'\nline_star:181,line_end:181|char_star:8,char_end:23";
"def index():\n            def generate():\n                yield 'Hello '\n                yield flask.request.args['name']\n                yield '!'\n\n            return flask.Response(flask.stream_with_context(generate())),type='function_definition'\nline_star:182,line_end:188|char_star:8,char_end:72"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.route('/')\n        def index():\n            def generate():\n                yield 'Hello '\n                yield flask.request.args['name']\n                yield '!'\n\n            return flask.Response(flask.stream_with_context(generate())),type='decorated_definition'\nline_star:181,line_end:188|char_star:8,char_end:72"->"def index():\n            def generate():\n                yield 'Hello '\n                yield flask.request.args['name']\n                yield '!'\n\n            return flask.Response(flask.stream_with_context(generate())),type='function_definition'\nline_star:182,line_end:188|char_star:8,char_end:72";
"index,type='identifier'\nline_star:182,line_end:182|char_star:12,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"def index():\n            def generate():\n                yield 'Hello '\n                yield flask.request.args['name']\n                yield '!'\n\n            return flask.Response(flask.stream_with_context(generate())),type='function_definition'\nline_star:182,line_end:188|char_star:8,char_end:72"->"index,type='identifier'\nline_star:182,line_end:182|char_star:12,char_end:17";
"type='INFORMATION BLOCK'\nline_star:183,line_end:188|char_star:12,char_end:72"[shape="point",fillcolor="#121013",style=filled];
"def index():\n            def generate():\n                yield 'Hello '\n                yield flask.request.args['name']\n                yield '!'\n\n            return flask.Response(flask.stream_with_context(generate())),type='function_definition'\nline_star:182,line_end:188|char_star:8,char_end:72"->"type='INFORMATION BLOCK'\nline_star:183,line_end:188|char_star:12,char_end:72";
"def generate():\n                yield 'Hello '\n                yield flask.request.args['name']\n                yield '!',type='function_definition'\nline_star:183,line_end:186|char_star:12,char_end:25"[shape="box",fillcolor="#cee6b4",style=filled];
"type='INFORMATION BLOCK'\nline_star:183,line_end:188|char_star:12,char_end:72"->"def generate():\n                yield 'Hello '\n                yield flask.request.args['name']\n                yield '!',type='function_definition'\nline_star:183,line_end:186|char_star:12,char_end:25";
"generate,type='identifier'\nline_star:183,line_end:183|char_star:16,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"def generate():\n                yield 'Hello '\n                yield flask.request.args['name']\n                yield '!',type='function_definition'\nline_star:183,line_end:186|char_star:12,char_end:25"->"generate,type='identifier'\nline_star:183,line_end:183|char_star:16,char_end:24";
"type='INFORMATION BLOCK'\nline_star:184,line_end:186|char_star:16,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"def generate():\n                yield 'Hello '\n                yield flask.request.args['name']\n                yield '!',type='function_definition'\nline_star:183,line_end:186|char_star:12,char_end:25"->"type='INFORMATION BLOCK'\nline_star:184,line_end:186|char_star:16,char_end:25";
"return flask.Response(flask.stream_with_context(generate())),type='return_statement'\nline_star:188,line_end:188|char_star:12,char_end:72"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:183,line_end:188|char_star:12,char_end:72"->"return flask.Response(flask.stream_with_context(generate())),type='return_statement'\nline_star:188,line_end:188|char_star:12,char_end:72";
"assert rv.data == b'Hello World!',type='assert_statement'\nline_star:191,line_end:191|char_star:8,char_end:41"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:181,line_end:191|char_star:8,char_end:41"->"assert rv.data == b'Hello World!',type='assert_statement'\nline_star:191,line_end:191|char_star:8,char_end:41";
"rv.data == b'Hello World!',type='comparison_operator'\nline_star:191,line_end:191|char_star:15,char_end:41"[shape="box",fillcolor="white",style=filled];
"assert rv.data == b'Hello World!',type='assert_statement'\nline_star:191,line_end:191|char_star:8,char_end:41"->"rv.data == b'Hello World!',type='comparison_operator'\nline_star:191,line_end:191|char_star:15,char_end:41";
"rv.data,type='attribute'\nline_star:191,line_end:191|char_star:15,char_end:22"[shape="box",fillcolor="white",style=filled];
"rv.data == b'Hello World!',type='comparison_operator'\nline_star:191,line_end:191|char_star:15,char_end:41"->"rv.data,type='attribute'\nline_star:191,line_end:191|char_star:15,char_end:22";
"rv,type='identifier'\nline_star:191,line_end:191|char_star:15,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"rv.data,type='attribute'\nline_star:191,line_end:191|char_star:15,char_end:22"->"rv,type='identifier'\nline_star:191,line_end:191|char_star:15,char_end:17";
"data,type='identifier'\nline_star:191,line_end:191|char_star:18,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"rv.data,type='attribute'\nline_star:191,line_end:191|char_star:15,char_end:22"->"data,type='identifier'\nline_star:191,line_end:191|char_star:18,char_end:22";
"def test_streaming_with_context_as_decorator(self, app, client):\n        @app.route('/')\n        def index():\n            @flask.stream_with_context\n            def generate(hello):\n                yield hello\n                yield flask.request.args['name']\n                yield '!'\n\n            return flask.Response(generate('Hello '))\n\n        rv = client.get('/?name=World')\n        assert rv.data == b'Hello World!',type='function_definition'\nline_star:193,line_end:205|char_star:4,char_end:41"[shape="box",fillcolor="#cee6b4",style=filled];
"type='INFORMATION BLOCK'\nline_star:180,line_end:250|char_star:4,char_end:34"->"def test_streaming_with_context_as_decorator(self, app, client):\n        @app.route('/')\n        def index():\n            @flask.stream_with_context\n            def generate(hello):\n                yield hello\n                yield flask.request.args['name']\n                yield '!'\n\n            return flask.Response(generate('Hello '))\n\n        rv = client.get('/?name=World')\n        assert rv.data == b'Hello World!',type='function_definition'\nline_star:193,line_end:205|char_star:4,char_end:41";
"test_streaming_with_context_as_decorator,type='identifier'\nline_star:193,line_end:193|char_star:8,char_end:48"[shape="point",fillcolor="#121013",style=filled];
"def test_streaming_with_context_as_decorator(self, app, client):\n        @app.route('/')\n        def index():\n            @flask.stream_with_context\n            def generate(hello):\n                yield hello\n                yield flask.request.args['name']\n                yield '!'\n\n            return flask.Response(generate('Hello '))\n\n        rv = client.get('/?name=World')\n        assert rv.data == b'Hello World!',type='function_definition'\nline_star:193,line_end:205|char_star:4,char_end:41"->"test_streaming_with_context_as_decorator,type='identifier'\nline_star:193,line_end:193|char_star:8,char_end:48";
"(self, app, client),type='parameters'\nline_star:193,line_end:193|char_star:48,char_end:67"[shape="box",fillcolor="white",style=filled];
"def test_streaming_with_context_as_decorator(self, app, client):\n        @app.route('/')\n        def index():\n            @flask.stream_with_context\n            def generate(hello):\n                yield hello\n                yield flask.request.args['name']\n                yield '!'\n\n            return flask.Response(generate('Hello '))\n\n        rv = client.get('/?name=World')\n        assert rv.data == b'Hello World!',type='function_definition'\nline_star:193,line_end:205|char_star:4,char_end:41"->"(self, app, client),type='parameters'\nline_star:193,line_end:193|char_star:48,char_end:67";
"self,type='identifier'\nline_star:193,line_end:193|char_star:49,char_end:53"[shape="point",fillcolor="#121013",style=filled];
"(self, app, client),type='parameters'\nline_star:193,line_end:193|char_star:48,char_end:67"->"self,type='identifier'\nline_star:193,line_end:193|char_star:49,char_end:53";
"app,type='identifier'\nline_star:193,line_end:193|char_star:55,char_end:58"[shape="point",fillcolor="#121013",style=filled];
"(self, app, client),type='parameters'\nline_star:193,line_end:193|char_star:48,char_end:67"->"app,type='identifier'\nline_star:193,line_end:193|char_star:55,char_end:58";
"client,type='identifier'\nline_star:193,line_end:193|char_star:60,char_end:66"[shape="point",fillcolor="#121013",style=filled];
"(self, app, client),type='parameters'\nline_star:193,line_end:193|char_star:48,char_end:67"->"client,type='identifier'\nline_star:193,line_end:193|char_star:60,char_end:66";
"type='INFORMATION BLOCK'\nline_star:194,line_end:205|char_star:8,char_end:41"[shape="point",fillcolor="#121013",style=filled];
"def test_streaming_with_context_as_decorator(self, app, client):\n        @app.route('/')\n        def index():\n            @flask.stream_with_context\n            def generate(hello):\n                yield hello\n                yield flask.request.args['name']\n                yield '!'\n\n            return flask.Response(generate('Hello '))\n\n        rv = client.get('/?name=World')\n        assert rv.data == b'Hello World!',type='function_definition'\nline_star:193,line_end:205|char_star:4,char_end:41"->"type='INFORMATION BLOCK'\nline_star:194,line_end:205|char_star:8,char_end:41";
"@app.route('/')\n        def index():\n            @flask.stream_with_context\n            def generate(hello):\n                yield hello\n                yield flask.request.args['name']\n                yield '!'\n\n            return flask.Response(generate('Hello ')),type='decorated_definition'\nline_star:194,line_end:202|char_star:8,char_end:53"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:194,line_end:205|char_star:8,char_end:41"->"@app.route('/')\n        def index():\n            @flask.stream_with_context\n            def generate(hello):\n                yield hello\n                yield flask.request.args['name']\n                yield '!'\n\n            return flask.Response(generate('Hello ')),type='decorated_definition'\nline_star:194,line_end:202|char_star:8,char_end:53";
"@app.route('/'),type='decorator'\nline_star:194,line_end:194|char_star:8,char_end:23"[shape="box",fillcolor="white",style=filled];
"@app.route('/')\n        def index():\n            @flask.stream_with_context\n            def generate(hello):\n                yield hello\n                yield flask.request.args['name']\n                yield '!'\n\n            return flask.Response(generate('Hello ')),type='decorated_definition'\nline_star:194,line_end:202|char_star:8,char_end:53"->"@app.route('/'),type='decorator'\nline_star:194,line_end:194|char_star:8,char_end:23";
"def index():\n            @flask.stream_with_context\n            def generate(hello):\n                yield hello\n                yield flask.request.args['name']\n                yield '!'\n\n            return flask.Response(generate('Hello ')),type='function_definition'\nline_star:195,line_end:202|char_star:8,char_end:53"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.route('/')\n        def index():\n            @flask.stream_with_context\n            def generate(hello):\n                yield hello\n                yield flask.request.args['name']\n                yield '!'\n\n            return flask.Response(generate('Hello ')),type='decorated_definition'\nline_star:194,line_end:202|char_star:8,char_end:53"->"def index():\n            @flask.stream_with_context\n            def generate(hello):\n                yield hello\n                yield flask.request.args['name']\n                yield '!'\n\n            return flask.Response(generate('Hello ')),type='function_definition'\nline_star:195,line_end:202|char_star:8,char_end:53";
"index,type='identifier'\nline_star:195,line_end:195|char_star:12,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"def index():\n            @flask.stream_with_context\n            def generate(hello):\n                yield hello\n                yield flask.request.args['name']\n                yield '!'\n\n            return flask.Response(generate('Hello ')),type='function_definition'\nline_star:195,line_end:202|char_star:8,char_end:53"->"index,type='identifier'\nline_star:195,line_end:195|char_star:12,char_end:17";
"type='INFORMATION BLOCK'\nline_star:196,line_end:202|char_star:12,char_end:53"[shape="point",fillcolor="#121013",style=filled];
"def index():\n            @flask.stream_with_context\n            def generate(hello):\n                yield hello\n                yield flask.request.args['name']\n                yield '!'\n\n            return flask.Response(generate('Hello ')),type='function_definition'\nline_star:195,line_end:202|char_star:8,char_end:53"->"type='INFORMATION BLOCK'\nline_star:196,line_end:202|char_star:12,char_end:53";
"@flask.stream_with_context\n            def generate(hello):\n                yield hello\n                yield flask.request.args['name']\n                yield '!',type='decorated_definition'\nline_star:196,line_end:200|char_star:12,char_end:25"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:196,line_end:202|char_star:12,char_end:53"->"@flask.stream_with_context\n            def generate(hello):\n                yield hello\n                yield flask.request.args['name']\n                yield '!',type='decorated_definition'\nline_star:196,line_end:200|char_star:12,char_end:25";
"@flask.stream_with_context,type='decorator'\nline_star:196,line_end:196|char_star:12,char_end:38"[shape="box",fillcolor="white",style=filled];
"@flask.stream_with_context\n            def generate(hello):\n                yield hello\n                yield flask.request.args['name']\n                yield '!',type='decorated_definition'\nline_star:196,line_end:200|char_star:12,char_end:25"->"@flask.stream_with_context,type='decorator'\nline_star:196,line_end:196|char_star:12,char_end:38";
"def generate(hello):\n                yield hello\n                yield flask.request.args['name']\n                yield '!',type='function_definition'\nline_star:197,line_end:200|char_star:12,char_end:25"[shape="box",fillcolor="#cee6b4",style=filled];
"@flask.stream_with_context\n            def generate(hello):\n                yield hello\n                yield flask.request.args['name']\n                yield '!',type='decorated_definition'\nline_star:196,line_end:200|char_star:12,char_end:25"->"def generate(hello):\n                yield hello\n                yield flask.request.args['name']\n                yield '!',type='function_definition'\nline_star:197,line_end:200|char_star:12,char_end:25";
"generate,type='identifier'\nline_star:197,line_end:197|char_star:16,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"def generate(hello):\n                yield hello\n                yield flask.request.args['name']\n                yield '!',type='function_definition'\nline_star:197,line_end:200|char_star:12,char_end:25"->"generate,type='identifier'\nline_star:197,line_end:197|char_star:16,char_end:24";
"(hello),type='parameters'\nline_star:197,line_end:197|char_star:24,char_end:31"[shape="box",fillcolor="white",style=filled];
"def generate(hello):\n                yield hello\n                yield flask.request.args['name']\n                yield '!',type='function_definition'\nline_star:197,line_end:200|char_star:12,char_end:25"->"(hello),type='parameters'\nline_star:197,line_end:197|char_star:24,char_end:31";
"hello,type='identifier'\nline_star:197,line_end:197|char_star:25,char_end:30"[shape="point",fillcolor="#121013",style=filled];
"(hello),type='parameters'\nline_star:197,line_end:197|char_star:24,char_end:31"->"hello,type='identifier'\nline_star:197,line_end:197|char_star:25,char_end:30";
"type='INFORMATION BLOCK'\nline_star:198,line_end:200|char_star:16,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"def generate(hello):\n                yield hello\n                yield flask.request.args['name']\n                yield '!',type='function_definition'\nline_star:197,line_end:200|char_star:12,char_end:25"->"type='INFORMATION BLOCK'\nline_star:198,line_end:200|char_star:16,char_end:25";
"return flask.Response(generate('Hello ')),type='return_statement'\nline_star:202,line_end:202|char_star:12,char_end:53"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:196,line_end:202|char_star:12,char_end:53"->"return flask.Response(generate('Hello ')),type='return_statement'\nline_star:202,line_end:202|char_star:12,char_end:53";
"assert rv.data == b'Hello World!',type='assert_statement'\nline_star:205,line_end:205|char_star:8,char_end:41"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:194,line_end:205|char_star:8,char_end:41"->"assert rv.data == b'Hello World!',type='assert_statement'\nline_star:205,line_end:205|char_star:8,char_end:41";
"rv.data == b'Hello World!',type='comparison_operator'\nline_star:205,line_end:205|char_star:15,char_end:41"[shape="box",fillcolor="white",style=filled];
"assert rv.data == b'Hello World!',type='assert_statement'\nline_star:205,line_end:205|char_star:8,char_end:41"->"rv.data == b'Hello World!',type='comparison_operator'\nline_star:205,line_end:205|char_star:15,char_end:41";
"rv.data,type='attribute'\nline_star:205,line_end:205|char_star:15,char_end:22"[shape="box",fillcolor="white",style=filled];
"rv.data == b'Hello World!',type='comparison_operator'\nline_star:205,line_end:205|char_star:15,char_end:41"->"rv.data,type='attribute'\nline_star:205,line_end:205|char_star:15,char_end:22";
"rv,type='identifier'\nline_star:205,line_end:205|char_star:15,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"rv.data,type='attribute'\nline_star:205,line_end:205|char_star:15,char_end:22"->"rv,type='identifier'\nline_star:205,line_end:205|char_star:15,char_end:17";
"data,type='identifier'\nline_star:205,line_end:205|char_star:18,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"rv.data,type='attribute'\nline_star:205,line_end:205|char_star:15,char_end:22"->"data,type='identifier'\nline_star:205,line_end:205|char_star:18,char_end:22";
"def test_streaming_with_context_and_custom_close(self, app, client):\n        called = []\n\n        class Wrapper:\n            def __init__(self, gen):\n                self._gen = gen\n\n            def __iter__(self):\n                return self\n\n            def close(self):\n                called.append(42)\n\n            def __next__(self):\n                return next(self._gen)\n\n            next = __next__\n\n        @app.route('/')\n        def index():\n            def generate():\n                yield 'Hello '\n                yield flask.request.args['name']\n                yield '!'\n\n            return flask.Response(flask.stream_with_context(Wrapper(generate())))\n\n        rv = client.get('/?name=World')\n        assert rv.data == b'Hello World!'\n        assert called == [42],type='function_definition'\nline_star:207,line_end:236|char_star:4,char_end:29"[shape="box",fillcolor="#cee6b4",style=filled];
"type='INFORMATION BLOCK'\nline_star:180,line_end:250|char_star:4,char_end:34"->"def test_streaming_with_context_and_custom_close(self, app, client):\n        called = []\n\n        class Wrapper:\n            def __init__(self, gen):\n                self._gen = gen\n\n            def __iter__(self):\n                return self\n\n            def close(self):\n                called.append(42)\n\n            def __next__(self):\n                return next(self._gen)\n\n            next = __next__\n\n        @app.route('/')\n        def index():\n            def generate():\n                yield 'Hello '\n                yield flask.request.args['name']\n                yield '!'\n\n            return flask.Response(flask.stream_with_context(Wrapper(generate())))\n\n        rv = client.get('/?name=World')\n        assert rv.data == b'Hello World!'\n        assert called == [42],type='function_definition'\nline_star:207,line_end:236|char_star:4,char_end:29";
"test_streaming_with_context_and_custom_close,type='identifier'\nline_star:207,line_end:207|char_star:8,char_end:52"[shape="point",fillcolor="#121013",style=filled];
"def test_streaming_with_context_and_custom_close(self, app, client):\n        called = []\n\n        class Wrapper:\n            def __init__(self, gen):\n                self._gen = gen\n\n            def __iter__(self):\n                return self\n\n            def close(self):\n                called.append(42)\n\n            def __next__(self):\n                return next(self._gen)\n\n            next = __next__\n\n        @app.route('/')\n        def index():\n            def generate():\n                yield 'Hello '\n                yield flask.request.args['name']\n                yield '!'\n\n            return flask.Response(flask.stream_with_context(Wrapper(generate())))\n\n        rv = client.get('/?name=World')\n        assert rv.data == b'Hello World!'\n        assert called == [42],type='function_definition'\nline_star:207,line_end:236|char_star:4,char_end:29"->"test_streaming_with_context_and_custom_close,type='identifier'\nline_star:207,line_end:207|char_star:8,char_end:52";
"(self, app, client),type='parameters'\nline_star:207,line_end:207|char_star:52,char_end:71"[shape="box",fillcolor="white",style=filled];
"def test_streaming_with_context_and_custom_close(self, app, client):\n        called = []\n\n        class Wrapper:\n            def __init__(self, gen):\n                self._gen = gen\n\n            def __iter__(self):\n                return self\n\n            def close(self):\n                called.append(42)\n\n            def __next__(self):\n                return next(self._gen)\n\n            next = __next__\n\n        @app.route('/')\n        def index():\n            def generate():\n                yield 'Hello '\n                yield flask.request.args['name']\n                yield '!'\n\n            return flask.Response(flask.stream_with_context(Wrapper(generate())))\n\n        rv = client.get('/?name=World')\n        assert rv.data == b'Hello World!'\n        assert called == [42],type='function_definition'\nline_star:207,line_end:236|char_star:4,char_end:29"->"(self, app, client),type='parameters'\nline_star:207,line_end:207|char_star:52,char_end:71";
"self,type='identifier'\nline_star:207,line_end:207|char_star:53,char_end:57"[shape="point",fillcolor="#121013",style=filled];
"(self, app, client),type='parameters'\nline_star:207,line_end:207|char_star:52,char_end:71"->"self,type='identifier'\nline_star:207,line_end:207|char_star:53,char_end:57";
"app,type='identifier'\nline_star:207,line_end:207|char_star:59,char_end:62"[shape="point",fillcolor="#121013",style=filled];
"(self, app, client),type='parameters'\nline_star:207,line_end:207|char_star:52,char_end:71"->"app,type='identifier'\nline_star:207,line_end:207|char_star:59,char_end:62";
"client,type='identifier'\nline_star:207,line_end:207|char_star:64,char_end:70"[shape="point",fillcolor="#121013",style=filled];
"(self, app, client),type='parameters'\nline_star:207,line_end:207|char_star:52,char_end:71"->"client,type='identifier'\nline_star:207,line_end:207|char_star:64,char_end:70";
"type='INFORMATION BLOCK'\nline_star:208,line_end:236|char_star:8,char_end:29"[shape="point",fillcolor="#121013",style=filled];
"def test_streaming_with_context_and_custom_close(self, app, client):\n        called = []\n\n        class Wrapper:\n            def __init__(self, gen):\n                self._gen = gen\n\n            def __iter__(self):\n                return self\n\n            def close(self):\n                called.append(42)\n\n            def __next__(self):\n                return next(self._gen)\n\n            next = __next__\n\n        @app.route('/')\n        def index():\n            def generate():\n                yield 'Hello '\n                yield flask.request.args['name']\n                yield '!'\n\n            return flask.Response(flask.stream_with_context(Wrapper(generate())))\n\n        rv = client.get('/?name=World')\n        assert rv.data == b'Hello World!'\n        assert called == [42],type='function_definition'\nline_star:207,line_end:236|char_star:4,char_end:29"->"type='INFORMATION BLOCK'\nline_star:208,line_end:236|char_star:8,char_end:29";
"class Wrapper:\n            def __init__(self, gen):\n                self._gen = gen\n\n            def __iter__(self):\n                return self\n\n            def close(self):\n                called.append(42)\n\n            def __next__(self):\n                return next(self._gen)\n\n            next = __next__,type='class_definition'\nline_star:210,line_end:223|char_star:8,char_end:27"[shape="box",fillcolor="#ffdf91",style=filled];
"type='INFORMATION BLOCK'\nline_star:208,line_end:236|char_star:8,char_end:29"->"class Wrapper:\n            def __init__(self, gen):\n                self._gen = gen\n\n            def __iter__(self):\n                return self\n\n            def close(self):\n                called.append(42)\n\n            def __next__(self):\n                return next(self._gen)\n\n            next = __next__,type='class_definition'\nline_star:210,line_end:223|char_star:8,char_end:27";
"Wrapper,type='identifier'\nline_star:210,line_end:210|char_star:14,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"class Wrapper:\n            def __init__(self, gen):\n                self._gen = gen\n\n            def __iter__(self):\n                return self\n\n            def close(self):\n                called.append(42)\n\n            def __next__(self):\n                return next(self._gen)\n\n            next = __next__,type='class_definition'\nline_star:210,line_end:223|char_star:8,char_end:27"->"Wrapper,type='identifier'\nline_star:210,line_end:210|char_star:14,char_end:21";
"type='INFORMATION BLOCK'\nline_star:211,line_end:223|char_star:12,char_end:27"[shape="point",fillcolor="#121013",style=filled];
"class Wrapper:\n            def __init__(self, gen):\n                self._gen = gen\n\n            def __iter__(self):\n                return self\n\n            def close(self):\n                called.append(42)\n\n            def __next__(self):\n                return next(self._gen)\n\n            next = __next__,type='class_definition'\nline_star:210,line_end:223|char_star:8,char_end:27"->"type='INFORMATION BLOCK'\nline_star:211,line_end:223|char_star:12,char_end:27";
"def __init__(self, gen):\n                self._gen = gen,type='function_definition'\nline_star:211,line_end:212|char_star:12,char_end:31"[shape="box",fillcolor="#cee6b4",style=filled];
"type='INFORMATION BLOCK'\nline_star:211,line_end:223|char_star:12,char_end:27"->"def __init__(self, gen):\n                self._gen = gen,type='function_definition'\nline_star:211,line_end:212|char_star:12,char_end:31";
"__init__,type='identifier'\nline_star:211,line_end:211|char_star:16,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"def __init__(self, gen):\n                self._gen = gen,type='function_definition'\nline_star:211,line_end:212|char_star:12,char_end:31"->"__init__,type='identifier'\nline_star:211,line_end:211|char_star:16,char_end:24";
"(self, gen),type='parameters'\nline_star:211,line_end:211|char_star:24,char_end:35"[shape="box",fillcolor="white",style=filled];
"def __init__(self, gen):\n                self._gen = gen,type='function_definition'\nline_star:211,line_end:212|char_star:12,char_end:31"->"(self, gen),type='parameters'\nline_star:211,line_end:211|char_star:24,char_end:35";
"self,type='identifier'\nline_star:211,line_end:211|char_star:25,char_end:29"[shape="point",fillcolor="#121013",style=filled];
"(self, gen),type='parameters'\nline_star:211,line_end:211|char_star:24,char_end:35"->"self,type='identifier'\nline_star:211,line_end:211|char_star:25,char_end:29";
"gen,type='identifier'\nline_star:211,line_end:211|char_star:31,char_end:34"[shape="point",fillcolor="#121013",style=filled];
"(self, gen),type='parameters'\nline_star:211,line_end:211|char_star:24,char_end:35"->"gen,type='identifier'\nline_star:211,line_end:211|char_star:31,char_end:34";
"type='INFORMATION BLOCK'\nline_star:212,line_end:212|char_star:16,char_end:31"[shape="point",fillcolor="#121013",style=filled];
"def __init__(self, gen):\n                self._gen = gen,type='function_definition'\nline_star:211,line_end:212|char_star:12,char_end:31"->"type='INFORMATION BLOCK'\nline_star:212,line_end:212|char_star:16,char_end:31";
"def __iter__(self):\n                return self,type='function_definition'\nline_star:214,line_end:215|char_star:12,char_end:27"[shape="box",fillcolor="#cee6b4",style=filled];
"type='INFORMATION BLOCK'\nline_star:211,line_end:223|char_star:12,char_end:27"->"def __iter__(self):\n                return self,type='function_definition'\nline_star:214,line_end:215|char_star:12,char_end:27";
"__iter__,type='identifier'\nline_star:214,line_end:214|char_star:16,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"def __iter__(self):\n                return self,type='function_definition'\nline_star:214,line_end:215|char_star:12,char_end:27"->"__iter__,type='identifier'\nline_star:214,line_end:214|char_star:16,char_end:24";
"(self),type='parameters'\nline_star:214,line_end:214|char_star:24,char_end:30"[shape="box",fillcolor="white",style=filled];
"def __iter__(self):\n                return self,type='function_definition'\nline_star:214,line_end:215|char_star:12,char_end:27"->"(self),type='parameters'\nline_star:214,line_end:214|char_star:24,char_end:30";
"self,type='identifier'\nline_star:214,line_end:214|char_star:25,char_end:29"[shape="point",fillcolor="#121013",style=filled];
"(self),type='parameters'\nline_star:214,line_end:214|char_star:24,char_end:30"->"self,type='identifier'\nline_star:214,line_end:214|char_star:25,char_end:29";
"type='INFORMATION BLOCK'\nline_star:215,line_end:215|char_star:16,char_end:27"[shape="point",fillcolor="#121013",style=filled];
"def __iter__(self):\n                return self,type='function_definition'\nline_star:214,line_end:215|char_star:12,char_end:27"->"type='INFORMATION BLOCK'\nline_star:215,line_end:215|char_star:16,char_end:27";
"return self,type='return_statement'\nline_star:215,line_end:215|char_star:16,char_end:27"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:215,line_end:215|char_star:16,char_end:27"->"return self,type='return_statement'\nline_star:215,line_end:215|char_star:16,char_end:27";
"def close(self):\n                called.append(42),type='function_definition'\nline_star:217,line_end:218|char_star:12,char_end:33"[shape="box",fillcolor="#cee6b4",style=filled];
"type='INFORMATION BLOCK'\nline_star:211,line_end:223|char_star:12,char_end:27"->"def close(self):\n                called.append(42),type='function_definition'\nline_star:217,line_end:218|char_star:12,char_end:33";
"close,type='identifier'\nline_star:217,line_end:217|char_star:16,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"def close(self):\n                called.append(42),type='function_definition'\nline_star:217,line_end:218|char_star:12,char_end:33"->"close,type='identifier'\nline_star:217,line_end:217|char_star:16,char_end:21";
"(self),type='parameters'\nline_star:217,line_end:217|char_star:21,char_end:27"[shape="box",fillcolor="white",style=filled];
"def close(self):\n                called.append(42),type='function_definition'\nline_star:217,line_end:218|char_star:12,char_end:33"->"(self),type='parameters'\nline_star:217,line_end:217|char_star:21,char_end:27";
"self,type='identifier'\nline_star:217,line_end:217|char_star:22,char_end:26"[shape="point",fillcolor="#121013",style=filled];
"(self),type='parameters'\nline_star:217,line_end:217|char_star:21,char_end:27"->"self,type='identifier'\nline_star:217,line_end:217|char_star:22,char_end:26";
"type='INFORMATION BLOCK'\nline_star:218,line_end:218|char_star:16,char_end:33"[shape="point",fillcolor="#121013",style=filled];
"def close(self):\n                called.append(42),type='function_definition'\nline_star:217,line_end:218|char_star:12,char_end:33"->"type='INFORMATION BLOCK'\nline_star:218,line_end:218|char_star:16,char_end:33";
"def __next__(self):\n                return next(self._gen),type='function_definition'\nline_star:220,line_end:221|char_star:12,char_end:38"[shape="box",fillcolor="#cee6b4",style=filled];
"type='INFORMATION BLOCK'\nline_star:211,line_end:223|char_star:12,char_end:27"->"def __next__(self):\n                return next(self._gen),type='function_definition'\nline_star:220,line_end:221|char_star:12,char_end:38";
"__next__,type='identifier'\nline_star:220,line_end:220|char_star:16,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"def __next__(self):\n                return next(self._gen),type='function_definition'\nline_star:220,line_end:221|char_star:12,char_end:38"->"__next__,type='identifier'\nline_star:220,line_end:220|char_star:16,char_end:24";
"(self),type='parameters'\nline_star:220,line_end:220|char_star:24,char_end:30"[shape="box",fillcolor="white",style=filled];
"def __next__(self):\n                return next(self._gen),type='function_definition'\nline_star:220,line_end:221|char_star:12,char_end:38"->"(self),type='parameters'\nline_star:220,line_end:220|char_star:24,char_end:30";
"self,type='identifier'\nline_star:220,line_end:220|char_star:25,char_end:29"[shape="point",fillcolor="#121013",style=filled];
"(self),type='parameters'\nline_star:220,line_end:220|char_star:24,char_end:30"->"self,type='identifier'\nline_star:220,line_end:220|char_star:25,char_end:29";
"type='INFORMATION BLOCK'\nline_star:221,line_end:221|char_star:16,char_end:38"[shape="point",fillcolor="#121013",style=filled];
"def __next__(self):\n                return next(self._gen),type='function_definition'\nline_star:220,line_end:221|char_star:12,char_end:38"->"type='INFORMATION BLOCK'\nline_star:221,line_end:221|char_star:16,char_end:38";
"return next(self._gen),type='return_statement'\nline_star:221,line_end:221|char_star:16,char_end:38"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:221,line_end:221|char_star:16,char_end:38"->"return next(self._gen),type='return_statement'\nline_star:221,line_end:221|char_star:16,char_end:38";
"@app.route('/')\n        def index():\n            def generate():\n                yield 'Hello '\n                yield flask.request.args['name']\n                yield '!'\n\n            return flask.Response(flask.stream_with_context(Wrapper(generate()))),type='decorated_definition'\nline_star:225,line_end:232|char_star:8,char_end:81"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:208,line_end:236|char_star:8,char_end:29"->"@app.route('/')\n        def index():\n            def generate():\n                yield 'Hello '\n                yield flask.request.args['name']\n                yield '!'\n\n            return flask.Response(flask.stream_with_context(Wrapper(generate()))),type='decorated_definition'\nline_star:225,line_end:232|char_star:8,char_end:81";
"@app.route('/'),type='decorator'\nline_star:225,line_end:225|char_star:8,char_end:23"[shape="box",fillcolor="white",style=filled];
"@app.route('/')\n        def index():\n            def generate():\n                yield 'Hello '\n                yield flask.request.args['name']\n                yield '!'\n\n            return flask.Response(flask.stream_with_context(Wrapper(generate()))),type='decorated_definition'\nline_star:225,line_end:232|char_star:8,char_end:81"->"@app.route('/'),type='decorator'\nline_star:225,line_end:225|char_star:8,char_end:23";
"def index():\n            def generate():\n                yield 'Hello '\n                yield flask.request.args['name']\n                yield '!'\n\n            return flask.Response(flask.stream_with_context(Wrapper(generate()))),type='function_definition'\nline_star:226,line_end:232|char_star:8,char_end:81"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.route('/')\n        def index():\n            def generate():\n                yield 'Hello '\n                yield flask.request.args['name']\n                yield '!'\n\n            return flask.Response(flask.stream_with_context(Wrapper(generate()))),type='decorated_definition'\nline_star:225,line_end:232|char_star:8,char_end:81"->"def index():\n            def generate():\n                yield 'Hello '\n                yield flask.request.args['name']\n                yield '!'\n\n            return flask.Response(flask.stream_with_context(Wrapper(generate()))),type='function_definition'\nline_star:226,line_end:232|char_star:8,char_end:81";
"index,type='identifier'\nline_star:226,line_end:226|char_star:12,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"def index():\n            def generate():\n                yield 'Hello '\n                yield flask.request.args['name']\n                yield '!'\n\n            return flask.Response(flask.stream_with_context(Wrapper(generate()))),type='function_definition'\nline_star:226,line_end:232|char_star:8,char_end:81"->"index,type='identifier'\nline_star:226,line_end:226|char_star:12,char_end:17";
"type='INFORMATION BLOCK'\nline_star:227,line_end:232|char_star:12,char_end:81"[shape="point",fillcolor="#121013",style=filled];
"def index():\n            def generate():\n                yield 'Hello '\n                yield flask.request.args['name']\n                yield '!'\n\n            return flask.Response(flask.stream_with_context(Wrapper(generate()))),type='function_definition'\nline_star:226,line_end:232|char_star:8,char_end:81"->"type='INFORMATION BLOCK'\nline_star:227,line_end:232|char_star:12,char_end:81";
"def generate():\n                yield 'Hello '\n                yield flask.request.args['name']\n                yield '!',type='function_definition'\nline_star:227,line_end:230|char_star:12,char_end:25"[shape="box",fillcolor="#cee6b4",style=filled];
"type='INFORMATION BLOCK'\nline_star:227,line_end:232|char_star:12,char_end:81"->"def generate():\n                yield 'Hello '\n                yield flask.request.args['name']\n                yield '!',type='function_definition'\nline_star:227,line_end:230|char_star:12,char_end:25";
"generate,type='identifier'\nline_star:227,line_end:227|char_star:16,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"def generate():\n                yield 'Hello '\n                yield flask.request.args['name']\n                yield '!',type='function_definition'\nline_star:227,line_end:230|char_star:12,char_end:25"->"generate,type='identifier'\nline_star:227,line_end:227|char_star:16,char_end:24";
"type='INFORMATION BLOCK'\nline_star:228,line_end:230|char_star:16,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"def generate():\n                yield 'Hello '\n                yield flask.request.args['name']\n                yield '!',type='function_definition'\nline_star:227,line_end:230|char_star:12,char_end:25"->"type='INFORMATION BLOCK'\nline_star:228,line_end:230|char_star:16,char_end:25";
"return flask.Response(flask.stream_with_context(Wrapper(generate()))),type='return_statement'\nline_star:232,line_end:232|char_star:12,char_end:81"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:227,line_end:232|char_star:12,char_end:81"->"return flask.Response(flask.stream_with_context(Wrapper(generate()))),type='return_statement'\nline_star:232,line_end:232|char_star:12,char_end:81";
"assert rv.data == b'Hello World!',type='assert_statement'\nline_star:235,line_end:235|char_star:8,char_end:41"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:208,line_end:236|char_star:8,char_end:29"->"assert rv.data == b'Hello World!',type='assert_statement'\nline_star:235,line_end:235|char_star:8,char_end:41";
"rv.data == b'Hello World!',type='comparison_operator'\nline_star:235,line_end:235|char_star:15,char_end:41"[shape="box",fillcolor="white",style=filled];
"assert rv.data == b'Hello World!',type='assert_statement'\nline_star:235,line_end:235|char_star:8,char_end:41"->"rv.data == b'Hello World!',type='comparison_operator'\nline_star:235,line_end:235|char_star:15,char_end:41";
"rv.data,type='attribute'\nline_star:235,line_end:235|char_star:15,char_end:22"[shape="box",fillcolor="white",style=filled];
"rv.data == b'Hello World!',type='comparison_operator'\nline_star:235,line_end:235|char_star:15,char_end:41"->"rv.data,type='attribute'\nline_star:235,line_end:235|char_star:15,char_end:22";
"rv,type='identifier'\nline_star:235,line_end:235|char_star:15,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"rv.data,type='attribute'\nline_star:235,line_end:235|char_star:15,char_end:22"->"rv,type='identifier'\nline_star:235,line_end:235|char_star:15,char_end:17";
"data,type='identifier'\nline_star:235,line_end:235|char_star:18,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"rv.data,type='attribute'\nline_star:235,line_end:235|char_star:15,char_end:22"->"data,type='identifier'\nline_star:235,line_end:235|char_star:18,char_end:22";
"assert called == [42],type='assert_statement'\nline_star:236,line_end:236|char_star:8,char_end:29"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:208,line_end:236|char_star:8,char_end:29"->"assert called == [42],type='assert_statement'\nline_star:236,line_end:236|char_star:8,char_end:29";
"called == [42],type='comparison_operator'\nline_star:236,line_end:236|char_star:15,char_end:29"[shape="box",fillcolor="white",style=filled];
"assert called == [42],type='assert_statement'\nline_star:236,line_end:236|char_star:8,char_end:29"->"called == [42],type='comparison_operator'\nline_star:236,line_end:236|char_star:15,char_end:29";
"called,type='identifier'\nline_star:236,line_end:236|char_star:15,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"called == [42],type='comparison_operator'\nline_star:236,line_end:236|char_star:15,char_end:29"->"called,type='identifier'\nline_star:236,line_end:236|char_star:15,char_end:21";
"[42],type='list'\nline_star:236,line_end:236|char_star:25,char_end:29"[shape="box",fillcolor="white",style=filled];
"called == [42],type='comparison_operator'\nline_star:236,line_end:236|char_star:15,char_end:29"->"[42],type='list'\nline_star:236,line_end:236|char_star:25,char_end:29";
"def test_stream_keeps_session(self, app, client):\n        @app.route('/')\n        def index():\n            flask.session['test'] = 'flask'\n\n            @flask.stream_with_context\n            def gen():\n                yield flask.session['test']\n\n            return flask.Response(gen())\n\n        rv = client.get('/')\n        assert rv.data == b'flask',type='function_definition'\nline_star:238,line_end:250|char_star:4,char_end:34"[shape="box",fillcolor="#cee6b4",style=filled];
"type='INFORMATION BLOCK'\nline_star:180,line_end:250|char_star:4,char_end:34"->"def test_stream_keeps_session(self, app, client):\n        @app.route('/')\n        def index():\n            flask.session['test'] = 'flask'\n\n            @flask.stream_with_context\n            def gen():\n                yield flask.session['test']\n\n            return flask.Response(gen())\n\n        rv = client.get('/')\n        assert rv.data == b'flask',type='function_definition'\nline_star:238,line_end:250|char_star:4,char_end:34";
"test_stream_keeps_session,type='identifier'\nline_star:238,line_end:238|char_star:8,char_end:33"[shape="point",fillcolor="#121013",style=filled];
"def test_stream_keeps_session(self, app, client):\n        @app.route('/')\n        def index():\n            flask.session['test'] = 'flask'\n\n            @flask.stream_with_context\n            def gen():\n                yield flask.session['test']\n\n            return flask.Response(gen())\n\n        rv = client.get('/')\n        assert rv.data == b'flask',type='function_definition'\nline_star:238,line_end:250|char_star:4,char_end:34"->"test_stream_keeps_session,type='identifier'\nline_star:238,line_end:238|char_star:8,char_end:33";
"(self, app, client),type='parameters'\nline_star:238,line_end:238|char_star:33,char_end:52"[shape="box",fillcolor="white",style=filled];
"def test_stream_keeps_session(self, app, client):\n        @app.route('/')\n        def index():\n            flask.session['test'] = 'flask'\n\n            @flask.stream_with_context\n            def gen():\n                yield flask.session['test']\n\n            return flask.Response(gen())\n\n        rv = client.get('/')\n        assert rv.data == b'flask',type='function_definition'\nline_star:238,line_end:250|char_star:4,char_end:34"->"(self, app, client),type='parameters'\nline_star:238,line_end:238|char_star:33,char_end:52";
"self,type='identifier'\nline_star:238,line_end:238|char_star:34,char_end:38"[shape="point",fillcolor="#121013",style=filled];
"(self, app, client),type='parameters'\nline_star:238,line_end:238|char_star:33,char_end:52"->"self,type='identifier'\nline_star:238,line_end:238|char_star:34,char_end:38";
"app,type='identifier'\nline_star:238,line_end:238|char_star:40,char_end:43"[shape="point",fillcolor="#121013",style=filled];
"(self, app, client),type='parameters'\nline_star:238,line_end:238|char_star:33,char_end:52"->"app,type='identifier'\nline_star:238,line_end:238|char_star:40,char_end:43";
"client,type='identifier'\nline_star:238,line_end:238|char_star:45,char_end:51"[shape="point",fillcolor="#121013",style=filled];
"(self, app, client),type='parameters'\nline_star:238,line_end:238|char_star:33,char_end:52"->"client,type='identifier'\nline_star:238,line_end:238|char_star:45,char_end:51";
"type='INFORMATION BLOCK'\nline_star:239,line_end:250|char_star:8,char_end:34"[shape="point",fillcolor="#121013",style=filled];
"def test_stream_keeps_session(self, app, client):\n        @app.route('/')\n        def index():\n            flask.session['test'] = 'flask'\n\n            @flask.stream_with_context\n            def gen():\n                yield flask.session['test']\n\n            return flask.Response(gen())\n\n        rv = client.get('/')\n        assert rv.data == b'flask',type='function_definition'\nline_star:238,line_end:250|char_star:4,char_end:34"->"type='INFORMATION BLOCK'\nline_star:239,line_end:250|char_star:8,char_end:34";
"@app.route('/')\n        def index():\n            flask.session['test'] = 'flask'\n\n            @flask.stream_with_context\n            def gen():\n                yield flask.session['test']\n\n            return flask.Response(gen()),type='decorated_definition'\nline_star:239,line_end:247|char_star:8,char_end:40"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:239,line_end:250|char_star:8,char_end:34"->"@app.route('/')\n        def index():\n            flask.session['test'] = 'flask'\n\n            @flask.stream_with_context\n            def gen():\n                yield flask.session['test']\n\n            return flask.Response(gen()),type='decorated_definition'\nline_star:239,line_end:247|char_star:8,char_end:40";
"@app.route('/'),type='decorator'\nline_star:239,line_end:239|char_star:8,char_end:23"[shape="box",fillcolor="white",style=filled];
"@app.route('/')\n        def index():\n            flask.session['test'] = 'flask'\n\n            @flask.stream_with_context\n            def gen():\n                yield flask.session['test']\n\n            return flask.Response(gen()),type='decorated_definition'\nline_star:239,line_end:247|char_star:8,char_end:40"->"@app.route('/'),type='decorator'\nline_star:239,line_end:239|char_star:8,char_end:23";
"def index():\n            flask.session['test'] = 'flask'\n\n            @flask.stream_with_context\n            def gen():\n                yield flask.session['test']\n\n            return flask.Response(gen()),type='function_definition'\nline_star:240,line_end:247|char_star:8,char_end:40"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.route('/')\n        def index():\n            flask.session['test'] = 'flask'\n\n            @flask.stream_with_context\n            def gen():\n                yield flask.session['test']\n\n            return flask.Response(gen()),type='decorated_definition'\nline_star:239,line_end:247|char_star:8,char_end:40"->"def index():\n            flask.session['test'] = 'flask'\n\n            @flask.stream_with_context\n            def gen():\n                yield flask.session['test']\n\n            return flask.Response(gen()),type='function_definition'\nline_star:240,line_end:247|char_star:8,char_end:40";
"index,type='identifier'\nline_star:240,line_end:240|char_star:12,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"def index():\n            flask.session['test'] = 'flask'\n\n            @flask.stream_with_context\n            def gen():\n                yield flask.session['test']\n\n            return flask.Response(gen()),type='function_definition'\nline_star:240,line_end:247|char_star:8,char_end:40"->"index,type='identifier'\nline_star:240,line_end:240|char_star:12,char_end:17";
"type='INFORMATION BLOCK'\nline_star:241,line_end:247|char_star:12,char_end:40"[shape="point",fillcolor="#121013",style=filled];
"def index():\n            flask.session['test'] = 'flask'\n\n            @flask.stream_with_context\n            def gen():\n                yield flask.session['test']\n\n            return flask.Response(gen()),type='function_definition'\nline_star:240,line_end:247|char_star:8,char_end:40"->"type='INFORMATION BLOCK'\nline_star:241,line_end:247|char_star:12,char_end:40";
"@flask.stream_with_context\n            def gen():\n                yield flask.session['test'],type='decorated_definition'\nline_star:243,line_end:245|char_star:12,char_end:43"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:241,line_end:247|char_star:12,char_end:40"->"@flask.stream_with_context\n            def gen():\n                yield flask.session['test'],type='decorated_definition'\nline_star:243,line_end:245|char_star:12,char_end:43";
"@flask.stream_with_context,type='decorator'\nline_star:243,line_end:243|char_star:12,char_end:38"[shape="box",fillcolor="white",style=filled];
"@flask.stream_with_context\n            def gen():\n                yield flask.session['test'],type='decorated_definition'\nline_star:243,line_end:245|char_star:12,char_end:43"->"@flask.stream_with_context,type='decorator'\nline_star:243,line_end:243|char_star:12,char_end:38";
"def gen():\n                yield flask.session['test'],type='function_definition'\nline_star:244,line_end:245|char_star:12,char_end:43"[shape="box",fillcolor="#cee6b4",style=filled];
"@flask.stream_with_context\n            def gen():\n                yield flask.session['test'],type='decorated_definition'\nline_star:243,line_end:245|char_star:12,char_end:43"->"def gen():\n                yield flask.session['test'],type='function_definition'\nline_star:244,line_end:245|char_star:12,char_end:43";
"gen,type='identifier'\nline_star:244,line_end:244|char_star:16,char_end:19"[shape="point",fillcolor="#121013",style=filled];
"def gen():\n                yield flask.session['test'],type='function_definition'\nline_star:244,line_end:245|char_star:12,char_end:43"->"gen,type='identifier'\nline_star:244,line_end:244|char_star:16,char_end:19";
"type='INFORMATION BLOCK'\nline_star:245,line_end:245|char_star:16,char_end:43"[shape="point",fillcolor="#121013",style=filled];
"def gen():\n                yield flask.session['test'],type='function_definition'\nline_star:244,line_end:245|char_star:12,char_end:43"->"type='INFORMATION BLOCK'\nline_star:245,line_end:245|char_star:16,char_end:43";
"return flask.Response(gen()),type='return_statement'\nline_star:247,line_end:247|char_star:12,char_end:40"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:241,line_end:247|char_star:12,char_end:40"->"return flask.Response(gen()),type='return_statement'\nline_star:247,line_end:247|char_star:12,char_end:40";
"assert rv.data == b'flask',type='assert_statement'\nline_star:250,line_end:250|char_star:8,char_end:34"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:239,line_end:250|char_star:8,char_end:34"->"assert rv.data == b'flask',type='assert_statement'\nline_star:250,line_end:250|char_star:8,char_end:34";
"rv.data == b'flask',type='comparison_operator'\nline_star:250,line_end:250|char_star:15,char_end:34"[shape="box",fillcolor="white",style=filled];
"assert rv.data == b'flask',type='assert_statement'\nline_star:250,line_end:250|char_star:8,char_end:34"->"rv.data == b'flask',type='comparison_operator'\nline_star:250,line_end:250|char_star:15,char_end:34";
"rv.data,type='attribute'\nline_star:250,line_end:250|char_star:15,char_end:22"[shape="box",fillcolor="white",style=filled];
"rv.data == b'flask',type='comparison_operator'\nline_star:250,line_end:250|char_star:15,char_end:34"->"rv.data,type='attribute'\nline_star:250,line_end:250|char_star:15,char_end:22";
"rv,type='identifier'\nline_star:250,line_end:250|char_star:15,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"rv.data,type='attribute'\nline_star:250,line_end:250|char_star:15,char_end:22"->"rv,type='identifier'\nline_star:250,line_end:250|char_star:15,char_end:17";
"data,type='identifier'\nline_star:250,line_end:250|char_star:18,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"rv.data,type='attribute'\nline_star:250,line_end:250|char_star:15,char_end:22"->"data,type='identifier'\nline_star:250,line_end:250|char_star:18,char_end:22";
"class TestHelpers:\n    @pytest.mark.parametrize(\n        'debug, expected_flag, expected_default_flag',\n        [\n            ('', False, False),\n            ('0', False, False),\n            ('False', False, False),\n            ('No', False, False),\n            ('True', True, True),\n        ],\n    )\n    def test_get_debug_flag(\n        self, monkeypatch, debug, expected_flag, expected_default_flag\n    ):\n        monkeypatch.setenv('FLASK_DEBUG', debug)\n        if expected_flag is None:\n            assert get_debug_flag() is None\n        else:\n            assert get_debug_flag() == expected_flag\n        assert get_debug_flag() == expected_default_flag\n\n    @pytest.mark.parametrize(\n        'env, ref_env, debug',\n        [\n            ('', 'production', False),\n            ('production', 'production', False),\n            ('development', 'development', True),\n            ('other', 'other', False),\n        ],\n    )\n    def test_get_env(self, monkeypatch, env, ref_env, debug):\n        monkeypatch.setenv('FLASK_ENV', env)\n        assert get_debug_flag() == debug\n        assert get_env() == ref_env\n\n    def test_make_response(self):\n        app = flask.Flask(__name__)\n        with app.test_request_context():\n            rv = flask.helpers.make_response()\n            assert rv.status_code == 200\n            assert rv.mimetype == 'text/html'\n\n            rv = flask.helpers.make_response('Hello')\n            assert rv.status_code == 200\n            assert rv.data == b'Hello'\n            assert rv.mimetype == 'text/html'\n\n    @pytest.mark.parametrize('mode', ('r', 'rb', 'rt'))\n    def test_open_resource(self, mode):\n        app = flask.Flask(__name__)\n\n        with app.open_resource('static/index.html', mode) as f:\n            assert '<h1>Hello World!</h1>' in str(f.read())\n\n    @pytest.mark.parametrize('mode', ('w', 'x', 'a', 'r+'))\n    def test_open_resource_exceptions(self, mode):\n        app = flask.Flask(__name__)\n\n        with pytest.raises(ValueError):\n            app.open_resource('static/index.html', mode),type='class_definition'\nline_star:253,line_end:312|char_star:0,char_end:56"[shape="box",fillcolor="#ffdf91",style=filled];
"MODULE"->"class TestHelpers:\n    @pytest.mark.parametrize(\n        'debug, expected_flag, expected_default_flag',\n        [\n            ('', False, False),\n            ('0', False, False),\n            ('False', False, False),\n            ('No', False, False),\n            ('True', True, True),\n        ],\n    )\n    def test_get_debug_flag(\n        self, monkeypatch, debug, expected_flag, expected_default_flag\n    ):\n        monkeypatch.setenv('FLASK_DEBUG', debug)\n        if expected_flag is None:\n            assert get_debug_flag() is None\n        else:\n            assert get_debug_flag() == expected_flag\n        assert get_debug_flag() == expected_default_flag\n\n    @pytest.mark.parametrize(\n        'env, ref_env, debug',\n        [\n            ('', 'production', False),\n            ('production', 'production', False),\n            ('development', 'development', True),\n            ('other', 'other', False),\n        ],\n    )\n    def test_get_env(self, monkeypatch, env, ref_env, debug):\n        monkeypatch.setenv('FLASK_ENV', env)\n        assert get_debug_flag() == debug\n        assert get_env() == ref_env\n\n    def test_make_response(self):\n        app = flask.Flask(__name__)\n        with app.test_request_context():\n            rv = flask.helpers.make_response()\n            assert rv.status_code == 200\n            assert rv.mimetype == 'text/html'\n\n            rv = flask.helpers.make_response('Hello')\n            assert rv.status_code == 200\n            assert rv.data == b'Hello'\n            assert rv.mimetype == 'text/html'\n\n    @pytest.mark.parametrize('mode', ('r', 'rb', 'rt'))\n    def test_open_resource(self, mode):\n        app = flask.Flask(__name__)\n\n        with app.open_resource('static/index.html', mode) as f:\n            assert '<h1>Hello World!</h1>' in str(f.read())\n\n    @pytest.mark.parametrize('mode', ('w', 'x', 'a', 'r+'))\n    def test_open_resource_exceptions(self, mode):\n        app = flask.Flask(__name__)\n\n        with pytest.raises(ValueError):\n            app.open_resource('static/index.html', mode),type='class_definition'\nline_star:253,line_end:312|char_star:0,char_end:56";
"TestHelpers,type='identifier'\nline_star:253,line_end:253|char_star:6,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"class TestHelpers:\n    @pytest.mark.parametrize(\n        'debug, expected_flag, expected_default_flag',\n        [\n            ('', False, False),\n            ('0', False, False),\n            ('False', False, False),\n            ('No', False, False),\n            ('True', True, True),\n        ],\n    )\n    def test_get_debug_flag(\n        self, monkeypatch, debug, expected_flag, expected_default_flag\n    ):\n        monkeypatch.setenv('FLASK_DEBUG', debug)\n        if expected_flag is None:\n            assert get_debug_flag() is None\n        else:\n            assert get_debug_flag() == expected_flag\n        assert get_debug_flag() == expected_default_flag\n\n    @pytest.mark.parametrize(\n        'env, ref_env, debug',\n        [\n            ('', 'production', False),\n            ('production', 'production', False),\n            ('development', 'development', True),\n            ('other', 'other', False),\n        ],\n    )\n    def test_get_env(self, monkeypatch, env, ref_env, debug):\n        monkeypatch.setenv('FLASK_ENV', env)\n        assert get_debug_flag() == debug\n        assert get_env() == ref_env\n\n    def test_make_response(self):\n        app = flask.Flask(__name__)\n        with app.test_request_context():\n            rv = flask.helpers.make_response()\n            assert rv.status_code == 200\n            assert rv.mimetype == 'text/html'\n\n            rv = flask.helpers.make_response('Hello')\n            assert rv.status_code == 200\n            assert rv.data == b'Hello'\n            assert rv.mimetype == 'text/html'\n\n    @pytest.mark.parametrize('mode', ('r', 'rb', 'rt'))\n    def test_open_resource(self, mode):\n        app = flask.Flask(__name__)\n\n        with app.open_resource('static/index.html', mode) as f:\n            assert '<h1>Hello World!</h1>' in str(f.read())\n\n    @pytest.mark.parametrize('mode', ('w', 'x', 'a', 'r+'))\n    def test_open_resource_exceptions(self, mode):\n        app = flask.Flask(__name__)\n\n        with pytest.raises(ValueError):\n            app.open_resource('static/index.html', mode),type='class_definition'\nline_star:253,line_end:312|char_star:0,char_end:56"->"TestHelpers,type='identifier'\nline_star:253,line_end:253|char_star:6,char_end:17";
"type='INFORMATION BLOCK'\nline_star:254,line_end:312|char_star:4,char_end:56"[shape="point",fillcolor="#121013",style=filled];
"class TestHelpers:\n    @pytest.mark.parametrize(\n        'debug, expected_flag, expected_default_flag',\n        [\n            ('', False, False),\n            ('0', False, False),\n            ('False', False, False),\n            ('No', False, False),\n            ('True', True, True),\n        ],\n    )\n    def test_get_debug_flag(\n        self, monkeypatch, debug, expected_flag, expected_default_flag\n    ):\n        monkeypatch.setenv('FLASK_DEBUG', debug)\n        if expected_flag is None:\n            assert get_debug_flag() is None\n        else:\n            assert get_debug_flag() == expected_flag\n        assert get_debug_flag() == expected_default_flag\n\n    @pytest.mark.parametrize(\n        'env, ref_env, debug',\n        [\n            ('', 'production', False),\n            ('production', 'production', False),\n            ('development', 'development', True),\n            ('other', 'other', False),\n        ],\n    )\n    def test_get_env(self, monkeypatch, env, ref_env, debug):\n        monkeypatch.setenv('FLASK_ENV', env)\n        assert get_debug_flag() == debug\n        assert get_env() == ref_env\n\n    def test_make_response(self):\n        app = flask.Flask(__name__)\n        with app.test_request_context():\n            rv = flask.helpers.make_response()\n            assert rv.status_code == 200\n            assert rv.mimetype == 'text/html'\n\n            rv = flask.helpers.make_response('Hello')\n            assert rv.status_code == 200\n            assert rv.data == b'Hello'\n            assert rv.mimetype == 'text/html'\n\n    @pytest.mark.parametrize('mode', ('r', 'rb', 'rt'))\n    def test_open_resource(self, mode):\n        app = flask.Flask(__name__)\n\n        with app.open_resource('static/index.html', mode) as f:\n            assert '<h1>Hello World!</h1>' in str(f.read())\n\n    @pytest.mark.parametrize('mode', ('w', 'x', 'a', 'r+'))\n    def test_open_resource_exceptions(self, mode):\n        app = flask.Flask(__name__)\n\n        with pytest.raises(ValueError):\n            app.open_resource('static/index.html', mode),type='class_definition'\nline_star:253,line_end:312|char_star:0,char_end:56"->"type='INFORMATION BLOCK'\nline_star:254,line_end:312|char_star:4,char_end:56";
"@pytest.mark.parametrize(\n        'debug, expected_flag, expected_default_flag',\n        [\n            ('', False, False),\n            ('0', False, False),\n            ('False', False, False),\n            ('No', False, False),\n            ('True', True, True),\n        ],\n    )\n    def test_get_debug_flag(\n        self, monkeypatch, debug, expected_flag, expected_default_flag\n    ):\n        monkeypatch.setenv('FLASK_DEBUG', debug)\n        if expected_flag is None:\n            assert get_debug_flag() is None\n        else:\n            assert get_debug_flag() == expected_flag\n        assert get_debug_flag() == expected_default_flag,type='decorated_definition'\nline_star:254,line_end:272|char_star:4,char_end:56"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:254,line_end:312|char_star:4,char_end:56"->"@pytest.mark.parametrize(\n        'debug, expected_flag, expected_default_flag',\n        [\n            ('', False, False),\n            ('0', False, False),\n            ('False', False, False),\n            ('No', False, False),\n            ('True', True, True),\n        ],\n    )\n    def test_get_debug_flag(\n        self, monkeypatch, debug, expected_flag, expected_default_flag\n    ):\n        monkeypatch.setenv('FLASK_DEBUG', debug)\n        if expected_flag is None:\n            assert get_debug_flag() is None\n        else:\n            assert get_debug_flag() == expected_flag\n        assert get_debug_flag() == expected_default_flag,type='decorated_definition'\nline_star:254,line_end:272|char_star:4,char_end:56";
"@pytest.mark.parametrize(\n        'debug, expected_flag, expected_default_flag',\n        [\n            ('', False, False),\n            ('0', False, False),\n            ('False', False, False),\n            ('No', False, False),\n            ('True', True, True),\n        ],\n    ),type='decorator'\nline_star:254,line_end:263|char_star:4,char_end:5"[shape="box",fillcolor="white",style=filled];
"@pytest.mark.parametrize(\n        'debug, expected_flag, expected_default_flag',\n        [\n            ('', False, False),\n            ('0', False, False),\n            ('False', False, False),\n            ('No', False, False),\n            ('True', True, True),\n        ],\n    )\n    def test_get_debug_flag(\n        self, monkeypatch, debug, expected_flag, expected_default_flag\n    ):\n        monkeypatch.setenv('FLASK_DEBUG', debug)\n        if expected_flag is None:\n            assert get_debug_flag() is None\n        else:\n            assert get_debug_flag() == expected_flag\n        assert get_debug_flag() == expected_default_flag,type='decorated_definition'\nline_star:254,line_end:272|char_star:4,char_end:56"->"@pytest.mark.parametrize(\n        'debug, expected_flag, expected_default_flag',\n        [\n            ('', False, False),\n            ('0', False, False),\n            ('False', False, False),\n            ('No', False, False),\n            ('True', True, True),\n        ],\n    ),type='decorator'\nline_star:254,line_end:263|char_star:4,char_end:5";
"def test_get_debug_flag(\n        self, monkeypatch, debug, expected_flag, expected_default_flag\n    ):\n        monkeypatch.setenv('FLASK_DEBUG', debug)\n        if expected_flag is None:\n            assert get_debug_flag() is None\n        else:\n            assert get_debug_flag() == expected_flag\n        assert get_debug_flag() == expected_default_flag,type='function_definition'\nline_star:264,line_end:272|char_star:4,char_end:56"[shape="box",fillcolor="#cee6b4",style=filled];
"@pytest.mark.parametrize(\n        'debug, expected_flag, expected_default_flag',\n        [\n            ('', False, False),\n            ('0', False, False),\n            ('False', False, False),\n            ('No', False, False),\n            ('True', True, True),\n        ],\n    )\n    def test_get_debug_flag(\n        self, monkeypatch, debug, expected_flag, expected_default_flag\n    ):\n        monkeypatch.setenv('FLASK_DEBUG', debug)\n        if expected_flag is None:\n            assert get_debug_flag() is None\n        else:\n            assert get_debug_flag() == expected_flag\n        assert get_debug_flag() == expected_default_flag,type='decorated_definition'\nline_star:254,line_end:272|char_star:4,char_end:56"->"def test_get_debug_flag(\n        self, monkeypatch, debug, expected_flag, expected_default_flag\n    ):\n        monkeypatch.setenv('FLASK_DEBUG', debug)\n        if expected_flag is None:\n            assert get_debug_flag() is None\n        else:\n            assert get_debug_flag() == expected_flag\n        assert get_debug_flag() == expected_default_flag,type='function_definition'\nline_star:264,line_end:272|char_star:4,char_end:56";
"test_get_debug_flag,type='identifier'\nline_star:264,line_end:264|char_star:8,char_end:27"[shape="point",fillcolor="#121013",style=filled];
"def test_get_debug_flag(\n        self, monkeypatch, debug, expected_flag, expected_default_flag\n    ):\n        monkeypatch.setenv('FLASK_DEBUG', debug)\n        if expected_flag is None:\n            assert get_debug_flag() is None\n        else:\n            assert get_debug_flag() == expected_flag\n        assert get_debug_flag() == expected_default_flag,type='function_definition'\nline_star:264,line_end:272|char_star:4,char_end:56"->"test_get_debug_flag,type='identifier'\nline_star:264,line_end:264|char_star:8,char_end:27";
"(\n        self, monkeypatch, debug, expected_flag, expected_default_flag\n    ),type='parameters'\nline_star:264,line_end:266|char_star:27,char_end:5"[shape="box",fillcolor="white",style=filled];
"def test_get_debug_flag(\n        self, monkeypatch, debug, expected_flag, expected_default_flag\n    ):\n        monkeypatch.setenv('FLASK_DEBUG', debug)\n        if expected_flag is None:\n            assert get_debug_flag() is None\n        else:\n            assert get_debug_flag() == expected_flag\n        assert get_debug_flag() == expected_default_flag,type='function_definition'\nline_star:264,line_end:272|char_star:4,char_end:56"->"(\n        self, monkeypatch, debug, expected_flag, expected_default_flag\n    ),type='parameters'\nline_star:264,line_end:266|char_star:27,char_end:5";
"self,type='identifier'\nline_star:265,line_end:265|char_star:8,char_end:12"[shape="point",fillcolor="#121013",style=filled];
"(\n        self, monkeypatch, debug, expected_flag, expected_default_flag\n    ),type='parameters'\nline_star:264,line_end:266|char_star:27,char_end:5"->"self,type='identifier'\nline_star:265,line_end:265|char_star:8,char_end:12";
"monkeypatch,type='identifier'\nline_star:265,line_end:265|char_star:14,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"(\n        self, monkeypatch, debug, expected_flag, expected_default_flag\n    ),type='parameters'\nline_star:264,line_end:266|char_star:27,char_end:5"->"monkeypatch,type='identifier'\nline_star:265,line_end:265|char_star:14,char_end:25";
"debug,type='identifier'\nline_star:265,line_end:265|char_star:27,char_end:32"[shape="point",fillcolor="#121013",style=filled];
"(\n        self, monkeypatch, debug, expected_flag, expected_default_flag\n    ),type='parameters'\nline_star:264,line_end:266|char_star:27,char_end:5"->"debug,type='identifier'\nline_star:265,line_end:265|char_star:27,char_end:32";
"expected_flag,type='identifier'\nline_star:265,line_end:265|char_star:34,char_end:47"[shape="point",fillcolor="#121013",style=filled];
"(\n        self, monkeypatch, debug, expected_flag, expected_default_flag\n    ),type='parameters'\nline_star:264,line_end:266|char_star:27,char_end:5"->"expected_flag,type='identifier'\nline_star:265,line_end:265|char_star:34,char_end:47";
"expected_default_flag,type='identifier'\nline_star:265,line_end:265|char_star:49,char_end:70"[shape="point",fillcolor="#121013",style=filled];
"(\n        self, monkeypatch, debug, expected_flag, expected_default_flag\n    ),type='parameters'\nline_star:264,line_end:266|char_star:27,char_end:5"->"expected_default_flag,type='identifier'\nline_star:265,line_end:265|char_star:49,char_end:70";
"type='INFORMATION BLOCK'\nline_star:267,line_end:272|char_star:8,char_end:56"[shape="point",fillcolor="#121013",style=filled];
"def test_get_debug_flag(\n        self, monkeypatch, debug, expected_flag, expected_default_flag\n    ):\n        monkeypatch.setenv('FLASK_DEBUG', debug)\n        if expected_flag is None:\n            assert get_debug_flag() is None\n        else:\n            assert get_debug_flag() == expected_flag\n        assert get_debug_flag() == expected_default_flag,type='function_definition'\nline_star:264,line_end:272|char_star:4,char_end:56"->"type='INFORMATION BLOCK'\nline_star:267,line_end:272|char_star:8,char_end:56";
"if expected_flag is None:\n            assert get_debug_flag() is None\n        else:\n            assert get_debug_flag() == expected_flag,type='if_statement'\nline_star:268,line_end:271|char_star:8,char_end:52"[shape="box",fillcolor="#9ecca4",style=filled];
"type='INFORMATION BLOCK'\nline_star:267,line_end:272|char_star:8,char_end:56"->"if expected_flag is None:\n            assert get_debug_flag() is None\n        else:\n            assert get_debug_flag() == expected_flag,type='if_statement'\nline_star:268,line_end:271|char_star:8,char_end:52";
"assert get_debug_flag() == expected_default_flag,type='assert_statement'\nline_star:272,line_end:272|char_star:8,char_end:56"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:267,line_end:272|char_star:8,char_end:56"->"assert get_debug_flag() == expected_default_flag,type='assert_statement'\nline_star:272,line_end:272|char_star:8,char_end:56";
"get_debug_flag() == expected_default_flag,type='comparison_operator'\nline_star:272,line_end:272|char_star:15,char_end:56"[shape="box",fillcolor="white",style=filled];
"assert get_debug_flag() == expected_default_flag,type='assert_statement'\nline_star:272,line_end:272|char_star:8,char_end:56"->"get_debug_flag() == expected_default_flag,type='comparison_operator'\nline_star:272,line_end:272|char_star:15,char_end:56";
"get_debug_flag(),type='call'\nline_star:272,line_end:272|char_star:15,char_end:31"[shape="box",fillcolor="white",style=filled];
"get_debug_flag() == expected_default_flag,type='comparison_operator'\nline_star:272,line_end:272|char_star:15,char_end:56"->"get_debug_flag(),type='call'\nline_star:272,line_end:272|char_star:15,char_end:31";
"get_debug_flag,type='identifier'\nline_star:272,line_end:272|char_star:15,char_end:29"[shape="point",fillcolor="#121013",style=filled];
"get_debug_flag(),type='call'\nline_star:272,line_end:272|char_star:15,char_end:31"->"get_debug_flag,type='identifier'\nline_star:272,line_end:272|char_star:15,char_end:29";
"expected_default_flag,type='identifier'\nline_star:272,line_end:272|char_star:35,char_end:56"[shape="point",fillcolor="#121013",style=filled];
"get_debug_flag() == expected_default_flag,type='comparison_operator'\nline_star:272,line_end:272|char_star:15,char_end:56"->"expected_default_flag,type='identifier'\nline_star:272,line_end:272|char_star:35,char_end:56";
"@pytest.mark.parametrize(\n        'env, ref_env, debug',\n        [\n            ('', 'production', False),\n            ('production', 'production', False),\n            ('development', 'development', True),\n            ('other', 'other', False),\n        ],\n    )\n    def test_get_env(self, monkeypatch, env, ref_env, debug):\n        monkeypatch.setenv('FLASK_ENV', env)\n        assert get_debug_flag() == debug\n        assert get_env() == ref_env,type='decorated_definition'\nline_star:274,line_end:286|char_star:4,char_end:35"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:254,line_end:312|char_star:4,char_end:56"->"@pytest.mark.parametrize(\n        'env, ref_env, debug',\n        [\n            ('', 'production', False),\n            ('production', 'production', False),\n            ('development', 'development', True),\n            ('other', 'other', False),\n        ],\n    )\n    def test_get_env(self, monkeypatch, env, ref_env, debug):\n        monkeypatch.setenv('FLASK_ENV', env)\n        assert get_debug_flag() == debug\n        assert get_env() == ref_env,type='decorated_definition'\nline_star:274,line_end:286|char_star:4,char_end:35";
"@pytest.mark.parametrize(\n        'env, ref_env, debug',\n        [\n            ('', 'production', False),\n            ('production', 'production', False),\n            ('development', 'development', True),\n            ('other', 'other', False),\n        ],\n    ),type='decorator'\nline_star:274,line_end:282|char_star:4,char_end:5"[shape="box",fillcolor="white",style=filled];
"@pytest.mark.parametrize(\n        'env, ref_env, debug',\n        [\n            ('', 'production', False),\n            ('production', 'production', False),\n            ('development', 'development', True),\n            ('other', 'other', False),\n        ],\n    )\n    def test_get_env(self, monkeypatch, env, ref_env, debug):\n        monkeypatch.setenv('FLASK_ENV', env)\n        assert get_debug_flag() == debug\n        assert get_env() == ref_env,type='decorated_definition'\nline_star:274,line_end:286|char_star:4,char_end:35"->"@pytest.mark.parametrize(\n        'env, ref_env, debug',\n        [\n            ('', 'production', False),\n            ('production', 'production', False),\n            ('development', 'development', True),\n            ('other', 'other', False),\n        ],\n    ),type='decorator'\nline_star:274,line_end:282|char_star:4,char_end:5";
"def test_get_env(self, monkeypatch, env, ref_env, debug):\n        monkeypatch.setenv('FLASK_ENV', env)\n        assert get_debug_flag() == debug\n        assert get_env() == ref_env,type='function_definition'\nline_star:283,line_end:286|char_star:4,char_end:35"[shape="box",fillcolor="#cee6b4",style=filled];
"@pytest.mark.parametrize(\n        'env, ref_env, debug',\n        [\n            ('', 'production', False),\n            ('production', 'production', False),\n            ('development', 'development', True),\n            ('other', 'other', False),\n        ],\n    )\n    def test_get_env(self, monkeypatch, env, ref_env, debug):\n        monkeypatch.setenv('FLASK_ENV', env)\n        assert get_debug_flag() == debug\n        assert get_env() == ref_env,type='decorated_definition'\nline_star:274,line_end:286|char_star:4,char_end:35"->"def test_get_env(self, monkeypatch, env, ref_env, debug):\n        monkeypatch.setenv('FLASK_ENV', env)\n        assert get_debug_flag() == debug\n        assert get_env() == ref_env,type='function_definition'\nline_star:283,line_end:286|char_star:4,char_end:35";
"test_get_env,type='identifier'\nline_star:283,line_end:283|char_star:8,char_end:20"[shape="point",fillcolor="#121013",style=filled];
"def test_get_env(self, monkeypatch, env, ref_env, debug):\n        monkeypatch.setenv('FLASK_ENV', env)\n        assert get_debug_flag() == debug\n        assert get_env() == ref_env,type='function_definition'\nline_star:283,line_end:286|char_star:4,char_end:35"->"test_get_env,type='identifier'\nline_star:283,line_end:283|char_star:8,char_end:20";
"(self, monkeypatch, env, ref_env, debug),type='parameters'\nline_star:283,line_end:283|char_star:20,char_end:60"[shape="box",fillcolor="white",style=filled];
"def test_get_env(self, monkeypatch, env, ref_env, debug):\n        monkeypatch.setenv('FLASK_ENV', env)\n        assert get_debug_flag() == debug\n        assert get_env() == ref_env,type='function_definition'\nline_star:283,line_end:286|char_star:4,char_end:35"->"(self, monkeypatch, env, ref_env, debug),type='parameters'\nline_star:283,line_end:283|char_star:20,char_end:60";
"self,type='identifier'\nline_star:283,line_end:283|char_star:21,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"(self, monkeypatch, env, ref_env, debug),type='parameters'\nline_star:283,line_end:283|char_star:20,char_end:60"->"self,type='identifier'\nline_star:283,line_end:283|char_star:21,char_end:25";
"monkeypatch,type='identifier'\nline_star:283,line_end:283|char_star:27,char_end:38"[shape="point",fillcolor="#121013",style=filled];
"(self, monkeypatch, env, ref_env, debug),type='parameters'\nline_star:283,line_end:283|char_star:20,char_end:60"->"monkeypatch,type='identifier'\nline_star:283,line_end:283|char_star:27,char_end:38";
"env,type='identifier'\nline_star:283,line_end:283|char_star:40,char_end:43"[shape="point",fillcolor="#121013",style=filled];
"(self, monkeypatch, env, ref_env, debug),type='parameters'\nline_star:283,line_end:283|char_star:20,char_end:60"->"env,type='identifier'\nline_star:283,line_end:283|char_star:40,char_end:43";
"ref_env,type='identifier'\nline_star:283,line_end:283|char_star:45,char_end:52"[shape="point",fillcolor="#121013",style=filled];
"(self, monkeypatch, env, ref_env, debug),type='parameters'\nline_star:283,line_end:283|char_star:20,char_end:60"->"ref_env,type='identifier'\nline_star:283,line_end:283|char_star:45,char_end:52";
"debug,type='identifier'\nline_star:283,line_end:283|char_star:54,char_end:59"[shape="point",fillcolor="#121013",style=filled];
"(self, monkeypatch, env, ref_env, debug),type='parameters'\nline_star:283,line_end:283|char_star:20,char_end:60"->"debug,type='identifier'\nline_star:283,line_end:283|char_star:54,char_end:59";
"type='INFORMATION BLOCK'\nline_star:284,line_end:286|char_star:8,char_end:35"[shape="point",fillcolor="#121013",style=filled];
"def test_get_env(self, monkeypatch, env, ref_env, debug):\n        monkeypatch.setenv('FLASK_ENV', env)\n        assert get_debug_flag() == debug\n        assert get_env() == ref_env,type='function_definition'\nline_star:283,line_end:286|char_star:4,char_end:35"->"type='INFORMATION BLOCK'\nline_star:284,line_end:286|char_star:8,char_end:35";
"assert get_debug_flag() == debug,type='assert_statement'\nline_star:285,line_end:285|char_star:8,char_end:40"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:284,line_end:286|char_star:8,char_end:35"->"assert get_debug_flag() == debug,type='assert_statement'\nline_star:285,line_end:285|char_star:8,char_end:40";
"get_debug_flag() == debug,type='comparison_operator'\nline_star:285,line_end:285|char_star:15,char_end:40"[shape="box",fillcolor="white",style=filled];
"assert get_debug_flag() == debug,type='assert_statement'\nline_star:285,line_end:285|char_star:8,char_end:40"->"get_debug_flag() == debug,type='comparison_operator'\nline_star:285,line_end:285|char_star:15,char_end:40";
"get_debug_flag(),type='call'\nline_star:285,line_end:285|char_star:15,char_end:31"[shape="box",fillcolor="white",style=filled];
"get_debug_flag() == debug,type='comparison_operator'\nline_star:285,line_end:285|char_star:15,char_end:40"->"get_debug_flag(),type='call'\nline_star:285,line_end:285|char_star:15,char_end:31";
"get_debug_flag,type='identifier'\nline_star:285,line_end:285|char_star:15,char_end:29"[shape="point",fillcolor="#121013",style=filled];
"get_debug_flag(),type='call'\nline_star:285,line_end:285|char_star:15,char_end:31"->"get_debug_flag,type='identifier'\nline_star:285,line_end:285|char_star:15,char_end:29";
"debug,type='identifier'\nline_star:285,line_end:285|char_star:35,char_end:40"[shape="point",fillcolor="#121013",style=filled];
"get_debug_flag() == debug,type='comparison_operator'\nline_star:285,line_end:285|char_star:15,char_end:40"->"debug,type='identifier'\nline_star:285,line_end:285|char_star:35,char_end:40";
"assert get_env() == ref_env,type='assert_statement'\nline_star:286,line_end:286|char_star:8,char_end:35"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:284,line_end:286|char_star:8,char_end:35"->"assert get_env() == ref_env,type='assert_statement'\nline_star:286,line_end:286|char_star:8,char_end:35";
"get_env() == ref_env,type='comparison_operator'\nline_star:286,line_end:286|char_star:15,char_end:35"[shape="box",fillcolor="white",style=filled];
"assert get_env() == ref_env,type='assert_statement'\nline_star:286,line_end:286|char_star:8,char_end:35"->"get_env() == ref_env,type='comparison_operator'\nline_star:286,line_end:286|char_star:15,char_end:35";
"get_env(),type='call'\nline_star:286,line_end:286|char_star:15,char_end:24"[shape="box",fillcolor="white",style=filled];
"get_env() == ref_env,type='comparison_operator'\nline_star:286,line_end:286|char_star:15,char_end:35"->"get_env(),type='call'\nline_star:286,line_end:286|char_star:15,char_end:24";
"get_env,type='identifier'\nline_star:286,line_end:286|char_star:15,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"get_env(),type='call'\nline_star:286,line_end:286|char_star:15,char_end:24"->"get_env,type='identifier'\nline_star:286,line_end:286|char_star:15,char_end:22";
"ref_env,type='identifier'\nline_star:286,line_end:286|char_star:28,char_end:35"[shape="point",fillcolor="#121013",style=filled];
"get_env() == ref_env,type='comparison_operator'\nline_star:286,line_end:286|char_star:15,char_end:35"->"ref_env,type='identifier'\nline_star:286,line_end:286|char_star:28,char_end:35";
"def test_make_response(self):\n        app = flask.Flask(__name__)\n        with app.test_request_context():\n            rv = flask.helpers.make_response()\n            assert rv.status_code == 200\n            assert rv.mimetype == 'text/html'\n\n            rv = flask.helpers.make_response('Hello')\n            assert rv.status_code == 200\n            assert rv.data == b'Hello'\n            assert rv.mimetype == 'text/html',type='function_definition'\nline_star:288,line_end:298|char_star:4,char_end:45"[shape="box",fillcolor="#cee6b4",style=filled];
"type='INFORMATION BLOCK'\nline_star:254,line_end:312|char_star:4,char_end:56"->"def test_make_response(self):\n        app = flask.Flask(__name__)\n        with app.test_request_context():\n            rv = flask.helpers.make_response()\n            assert rv.status_code == 200\n            assert rv.mimetype == 'text/html'\n\n            rv = flask.helpers.make_response('Hello')\n            assert rv.status_code == 200\n            assert rv.data == b'Hello'\n            assert rv.mimetype == 'text/html',type='function_definition'\nline_star:288,line_end:298|char_star:4,char_end:45";
"test_make_response,type='identifier'\nline_star:288,line_end:288|char_star:8,char_end:26"[shape="point",fillcolor="#121013",style=filled];
"def test_make_response(self):\n        app = flask.Flask(__name__)\n        with app.test_request_context():\n            rv = flask.helpers.make_response()\n            assert rv.status_code == 200\n            assert rv.mimetype == 'text/html'\n\n            rv = flask.helpers.make_response('Hello')\n            assert rv.status_code == 200\n            assert rv.data == b'Hello'\n            assert rv.mimetype == 'text/html',type='function_definition'\nline_star:288,line_end:298|char_star:4,char_end:45"->"test_make_response,type='identifier'\nline_star:288,line_end:288|char_star:8,char_end:26";
"(self),type='parameters'\nline_star:288,line_end:288|char_star:26,char_end:32"[shape="box",fillcolor="white",style=filled];
"def test_make_response(self):\n        app = flask.Flask(__name__)\n        with app.test_request_context():\n            rv = flask.helpers.make_response()\n            assert rv.status_code == 200\n            assert rv.mimetype == 'text/html'\n\n            rv = flask.helpers.make_response('Hello')\n            assert rv.status_code == 200\n            assert rv.data == b'Hello'\n            assert rv.mimetype == 'text/html',type='function_definition'\nline_star:288,line_end:298|char_star:4,char_end:45"->"(self),type='parameters'\nline_star:288,line_end:288|char_star:26,char_end:32";
"self,type='identifier'\nline_star:288,line_end:288|char_star:27,char_end:31"[shape="point",fillcolor="#121013",style=filled];
"(self),type='parameters'\nline_star:288,line_end:288|char_star:26,char_end:32"->"self,type='identifier'\nline_star:288,line_end:288|char_star:27,char_end:31";
"type='INFORMATION BLOCK'\nline_star:289,line_end:298|char_star:8,char_end:45"[shape="point",fillcolor="#121013",style=filled];
"def test_make_response(self):\n        app = flask.Flask(__name__)\n        with app.test_request_context():\n            rv = flask.helpers.make_response()\n            assert rv.status_code == 200\n            assert rv.mimetype == 'text/html'\n\n            rv = flask.helpers.make_response('Hello')\n            assert rv.status_code == 200\n            assert rv.data == b'Hello'\n            assert rv.mimetype == 'text/html',type='function_definition'\nline_star:288,line_end:298|char_star:4,char_end:45"->"type='INFORMATION BLOCK'\nline_star:289,line_end:298|char_star:8,char_end:45";
"with app.test_request_context():\n            rv = flask.helpers.make_response()\n            assert rv.status_code == 200\n            assert rv.mimetype == 'text/html'\n\n            rv = flask.helpers.make_response('Hello')\n            assert rv.status_code == 200\n            assert rv.data == b'Hello'\n            assert rv.mimetype == 'text/html',type='with_statement'\nline_star:290,line_end:298|char_star:8,char_end:45"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:289,line_end:298|char_star:8,char_end:45"->"with app.test_request_context():\n            rv = flask.helpers.make_response()\n            assert rv.status_code == 200\n            assert rv.mimetype == 'text/html'\n\n            rv = flask.helpers.make_response('Hello')\n            assert rv.status_code == 200\n            assert rv.data == b'Hello'\n            assert rv.mimetype == 'text/html',type='with_statement'\nline_star:290,line_end:298|char_star:8,char_end:45";
"app.test_request_context(),type='with_clause'\nline_star:290,line_end:290|char_star:13,char_end:39"[shape="box",fillcolor="white",style=filled];
"with app.test_request_context():\n            rv = flask.helpers.make_response()\n            assert rv.status_code == 200\n            assert rv.mimetype == 'text/html'\n\n            rv = flask.helpers.make_response('Hello')\n            assert rv.status_code == 200\n            assert rv.data == b'Hello'\n            assert rv.mimetype == 'text/html',type='with_statement'\nline_star:290,line_end:298|char_star:8,char_end:45"->"app.test_request_context(),type='with_clause'\nline_star:290,line_end:290|char_star:13,char_end:39";
"type='INFORMATION BLOCK'\nline_star:291,line_end:298|char_star:12,char_end:45"[shape="point",fillcolor="#121013",style=filled];
"with app.test_request_context():\n            rv = flask.helpers.make_response()\n            assert rv.status_code == 200\n            assert rv.mimetype == 'text/html'\n\n            rv = flask.helpers.make_response('Hello')\n            assert rv.status_code == 200\n            assert rv.data == b'Hello'\n            assert rv.mimetype == 'text/html',type='with_statement'\nline_star:290,line_end:298|char_star:8,char_end:45"->"type='INFORMATION BLOCK'\nline_star:291,line_end:298|char_star:12,char_end:45";
"assert rv.status_code == 200,type='assert_statement'\nline_star:292,line_end:292|char_star:12,char_end:40"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:291,line_end:298|char_star:12,char_end:45"->"assert rv.status_code == 200,type='assert_statement'\nline_star:292,line_end:292|char_star:12,char_end:40";
"rv.status_code == 200,type='comparison_operator'\nline_star:292,line_end:292|char_star:19,char_end:40"[shape="box",fillcolor="white",style=filled];
"assert rv.status_code == 200,type='assert_statement'\nline_star:292,line_end:292|char_star:12,char_end:40"->"rv.status_code == 200,type='comparison_operator'\nline_star:292,line_end:292|char_star:19,char_end:40";
"rv.status_code,type='attribute'\nline_star:292,line_end:292|char_star:19,char_end:33"[shape="box",fillcolor="white",style=filled];
"rv.status_code == 200,type='comparison_operator'\nline_star:292,line_end:292|char_star:19,char_end:40"->"rv.status_code,type='attribute'\nline_star:292,line_end:292|char_star:19,char_end:33";
"rv,type='identifier'\nline_star:292,line_end:292|char_star:19,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"rv.status_code,type='attribute'\nline_star:292,line_end:292|char_star:19,char_end:33"->"rv,type='identifier'\nline_star:292,line_end:292|char_star:19,char_end:21";
"status_code,type='identifier'\nline_star:292,line_end:292|char_star:22,char_end:33"[shape="point",fillcolor="#121013",style=filled];
"rv.status_code,type='attribute'\nline_star:292,line_end:292|char_star:19,char_end:33"->"status_code,type='identifier'\nline_star:292,line_end:292|char_star:22,char_end:33";
"assert rv.mimetype == 'text/html',type='assert_statement'\nline_star:293,line_end:293|char_star:12,char_end:45"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:291,line_end:298|char_star:12,char_end:45"->"assert rv.mimetype == 'text/html',type='assert_statement'\nline_star:293,line_end:293|char_star:12,char_end:45";
"rv.mimetype == 'text/html',type='comparison_operator'\nline_star:293,line_end:293|char_star:19,char_end:45"[shape="box",fillcolor="white",style=filled];
"assert rv.mimetype == 'text/html',type='assert_statement'\nline_star:293,line_end:293|char_star:12,char_end:45"->"rv.mimetype == 'text/html',type='comparison_operator'\nline_star:293,line_end:293|char_star:19,char_end:45";
"rv.mimetype,type='attribute'\nline_star:293,line_end:293|char_star:19,char_end:30"[shape="box",fillcolor="white",style=filled];
"rv.mimetype == 'text/html',type='comparison_operator'\nline_star:293,line_end:293|char_star:19,char_end:45"->"rv.mimetype,type='attribute'\nline_star:293,line_end:293|char_star:19,char_end:30";
"rv,type='identifier'\nline_star:293,line_end:293|char_star:19,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"rv.mimetype,type='attribute'\nline_star:293,line_end:293|char_star:19,char_end:30"->"rv,type='identifier'\nline_star:293,line_end:293|char_star:19,char_end:21";
"mimetype,type='identifier'\nline_star:293,line_end:293|char_star:22,char_end:30"[shape="point",fillcolor="#121013",style=filled];
"rv.mimetype,type='attribute'\nline_star:293,line_end:293|char_star:19,char_end:30"->"mimetype,type='identifier'\nline_star:293,line_end:293|char_star:22,char_end:30";
"assert rv.status_code == 200,type='assert_statement'\nline_star:296,line_end:296|char_star:12,char_end:40"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:291,line_end:298|char_star:12,char_end:45"->"assert rv.status_code == 200,type='assert_statement'\nline_star:296,line_end:296|char_star:12,char_end:40";
"rv.status_code == 200,type='comparison_operator'\nline_star:296,line_end:296|char_star:19,char_end:40"[shape="box",fillcolor="white",style=filled];
"assert rv.status_code == 200,type='assert_statement'\nline_star:296,line_end:296|char_star:12,char_end:40"->"rv.status_code == 200,type='comparison_operator'\nline_star:296,line_end:296|char_star:19,char_end:40";
"rv.status_code,type='attribute'\nline_star:296,line_end:296|char_star:19,char_end:33"[shape="box",fillcolor="white",style=filled];
"rv.status_code == 200,type='comparison_operator'\nline_star:296,line_end:296|char_star:19,char_end:40"->"rv.status_code,type='attribute'\nline_star:296,line_end:296|char_star:19,char_end:33";
"rv,type='identifier'\nline_star:296,line_end:296|char_star:19,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"rv.status_code,type='attribute'\nline_star:296,line_end:296|char_star:19,char_end:33"->"rv,type='identifier'\nline_star:296,line_end:296|char_star:19,char_end:21";
"status_code,type='identifier'\nline_star:296,line_end:296|char_star:22,char_end:33"[shape="point",fillcolor="#121013",style=filled];
"rv.status_code,type='attribute'\nline_star:296,line_end:296|char_star:19,char_end:33"->"status_code,type='identifier'\nline_star:296,line_end:296|char_star:22,char_end:33";
"assert rv.data == b'Hello',type='assert_statement'\nline_star:297,line_end:297|char_star:12,char_end:38"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:291,line_end:298|char_star:12,char_end:45"->"assert rv.data == b'Hello',type='assert_statement'\nline_star:297,line_end:297|char_star:12,char_end:38";
"rv.data == b'Hello',type='comparison_operator'\nline_star:297,line_end:297|char_star:19,char_end:38"[shape="box",fillcolor="white",style=filled];
"assert rv.data == b'Hello',type='assert_statement'\nline_star:297,line_end:297|char_star:12,char_end:38"->"rv.data == b'Hello',type='comparison_operator'\nline_star:297,line_end:297|char_star:19,char_end:38";
"rv.data,type='attribute'\nline_star:297,line_end:297|char_star:19,char_end:26"[shape="box",fillcolor="white",style=filled];
"rv.data == b'Hello',type='comparison_operator'\nline_star:297,line_end:297|char_star:19,char_end:38"->"rv.data,type='attribute'\nline_star:297,line_end:297|char_star:19,char_end:26";
"rv,type='identifier'\nline_star:297,line_end:297|char_star:19,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"rv.data,type='attribute'\nline_star:297,line_end:297|char_star:19,char_end:26"->"rv,type='identifier'\nline_star:297,line_end:297|char_star:19,char_end:21";
"data,type='identifier'\nline_star:297,line_end:297|char_star:22,char_end:26"[shape="point",fillcolor="#121013",style=filled];
"rv.data,type='attribute'\nline_star:297,line_end:297|char_star:19,char_end:26"->"data,type='identifier'\nline_star:297,line_end:297|char_star:22,char_end:26";
"assert rv.mimetype == 'text/html',type='assert_statement'\nline_star:298,line_end:298|char_star:12,char_end:45"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:291,line_end:298|char_star:12,char_end:45"->"assert rv.mimetype == 'text/html',type='assert_statement'\nline_star:298,line_end:298|char_star:12,char_end:45";
"rv.mimetype == 'text/html',type='comparison_operator'\nline_star:298,line_end:298|char_star:19,char_end:45"[shape="box",fillcolor="white",style=filled];
"assert rv.mimetype == 'text/html',type='assert_statement'\nline_star:298,line_end:298|char_star:12,char_end:45"->"rv.mimetype == 'text/html',type='comparison_operator'\nline_star:298,line_end:298|char_star:19,char_end:45";
"rv.mimetype,type='attribute'\nline_star:298,line_end:298|char_star:19,char_end:30"[shape="box",fillcolor="white",style=filled];
"rv.mimetype == 'text/html',type='comparison_operator'\nline_star:298,line_end:298|char_star:19,char_end:45"->"rv.mimetype,type='attribute'\nline_star:298,line_end:298|char_star:19,char_end:30";
"rv,type='identifier'\nline_star:298,line_end:298|char_star:19,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"rv.mimetype,type='attribute'\nline_star:298,line_end:298|char_star:19,char_end:30"->"rv,type='identifier'\nline_star:298,line_end:298|char_star:19,char_end:21";
"mimetype,type='identifier'\nline_star:298,line_end:298|char_star:22,char_end:30"[shape="point",fillcolor="#121013",style=filled];
"rv.mimetype,type='attribute'\nline_star:298,line_end:298|char_star:19,char_end:30"->"mimetype,type='identifier'\nline_star:298,line_end:298|char_star:22,char_end:30";
"@pytest.mark.parametrize('mode', ('r', 'rb', 'rt'))\n    def test_open_resource(self, mode):\n        app = flask.Flask(__name__)\n\n        with app.open_resource('static/index.html', mode) as f:\n            assert '<h1>Hello World!</h1>' in str(f.read()),type='decorated_definition'\nline_star:300,line_end:305|char_star:4,char_end:59"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:254,line_end:312|char_star:4,char_end:56"->"@pytest.mark.parametrize('mode', ('r', 'rb', 'rt'))\n    def test_open_resource(self, mode):\n        app = flask.Flask(__name__)\n\n        with app.open_resource('static/index.html', mode) as f:\n            assert '<h1>Hello World!</h1>' in str(f.read()),type='decorated_definition'\nline_star:300,line_end:305|char_star:4,char_end:59";
"@pytest.mark.parametrize('mode', ('r', 'rb', 'rt')),type='decorator'\nline_star:300,line_end:300|char_star:4,char_end:55"[shape="box",fillcolor="white",style=filled];
"@pytest.mark.parametrize('mode', ('r', 'rb', 'rt'))\n    def test_open_resource(self, mode):\n        app = flask.Flask(__name__)\n\n        with app.open_resource('static/index.html', mode) as f:\n            assert '<h1>Hello World!</h1>' in str(f.read()),type='decorated_definition'\nline_star:300,line_end:305|char_star:4,char_end:59"->"@pytest.mark.parametrize('mode', ('r', 'rb', 'rt')),type='decorator'\nline_star:300,line_end:300|char_star:4,char_end:55";
"def test_open_resource(self, mode):\n        app = flask.Flask(__name__)\n\n        with app.open_resource('static/index.html', mode) as f:\n            assert '<h1>Hello World!</h1>' in str(f.read()),type='function_definition'\nline_star:301,line_end:305|char_star:4,char_end:59"[shape="box",fillcolor="#cee6b4",style=filled];
"@pytest.mark.parametrize('mode', ('r', 'rb', 'rt'))\n    def test_open_resource(self, mode):\n        app = flask.Flask(__name__)\n\n        with app.open_resource('static/index.html', mode) as f:\n            assert '<h1>Hello World!</h1>' in str(f.read()),type='decorated_definition'\nline_star:300,line_end:305|char_star:4,char_end:59"->"def test_open_resource(self, mode):\n        app = flask.Flask(__name__)\n\n        with app.open_resource('static/index.html', mode) as f:\n            assert '<h1>Hello World!</h1>' in str(f.read()),type='function_definition'\nline_star:301,line_end:305|char_star:4,char_end:59";
"test_open_resource,type='identifier'\nline_star:301,line_end:301|char_star:8,char_end:26"[shape="point",fillcolor="#121013",style=filled];
"def test_open_resource(self, mode):\n        app = flask.Flask(__name__)\n\n        with app.open_resource('static/index.html', mode) as f:\n            assert '<h1>Hello World!</h1>' in str(f.read()),type='function_definition'\nline_star:301,line_end:305|char_star:4,char_end:59"->"test_open_resource,type='identifier'\nline_star:301,line_end:301|char_star:8,char_end:26";
"(self, mode),type='parameters'\nline_star:301,line_end:301|char_star:26,char_end:38"[shape="box",fillcolor="white",style=filled];
"def test_open_resource(self, mode):\n        app = flask.Flask(__name__)\n\n        with app.open_resource('static/index.html', mode) as f:\n            assert '<h1>Hello World!</h1>' in str(f.read()),type='function_definition'\nline_star:301,line_end:305|char_star:4,char_end:59"->"(self, mode),type='parameters'\nline_star:301,line_end:301|char_star:26,char_end:38";
"self,type='identifier'\nline_star:301,line_end:301|char_star:27,char_end:31"[shape="point",fillcolor="#121013",style=filled];
"(self, mode),type='parameters'\nline_star:301,line_end:301|char_star:26,char_end:38"->"self,type='identifier'\nline_star:301,line_end:301|char_star:27,char_end:31";
"mode,type='identifier'\nline_star:301,line_end:301|char_star:33,char_end:37"[shape="point",fillcolor="#121013",style=filled];
"(self, mode),type='parameters'\nline_star:301,line_end:301|char_star:26,char_end:38"->"mode,type='identifier'\nline_star:301,line_end:301|char_star:33,char_end:37";
"type='INFORMATION BLOCK'\nline_star:302,line_end:305|char_star:8,char_end:59"[shape="point",fillcolor="#121013",style=filled];
"def test_open_resource(self, mode):\n        app = flask.Flask(__name__)\n\n        with app.open_resource('static/index.html', mode) as f:\n            assert '<h1>Hello World!</h1>' in str(f.read()),type='function_definition'\nline_star:301,line_end:305|char_star:4,char_end:59"->"type='INFORMATION BLOCK'\nline_star:302,line_end:305|char_star:8,char_end:59";
"with app.open_resource('static/index.html', mode) as f:\n            assert '<h1>Hello World!</h1>' in str(f.read()),type='with_statement'\nline_star:304,line_end:305|char_star:8,char_end:59"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:302,line_end:305|char_star:8,char_end:59"->"with app.open_resource('static/index.html', mode) as f:\n            assert '<h1>Hello World!</h1>' in str(f.read()),type='with_statement'\nline_star:304,line_end:305|char_star:8,char_end:59";
"app.open_resource('static/index.html', mode) as f,type='with_clause'\nline_star:304,line_end:304|char_star:13,char_end:62"[shape="box",fillcolor="white",style=filled];
"with app.open_resource('static/index.html', mode) as f:\n            assert '<h1>Hello World!</h1>' in str(f.read()),type='with_statement'\nline_star:304,line_end:305|char_star:8,char_end:59"->"app.open_resource('static/index.html', mode) as f,type='with_clause'\nline_star:304,line_end:304|char_star:13,char_end:62";
"type='INFORMATION BLOCK'\nline_star:305,line_end:305|char_star:12,char_end:59"[shape="point",fillcolor="#121013",style=filled];
"with app.open_resource('static/index.html', mode) as f:\n            assert '<h1>Hello World!</h1>' in str(f.read()),type='with_statement'\nline_star:304,line_end:305|char_star:8,char_end:59"->"type='INFORMATION BLOCK'\nline_star:305,line_end:305|char_star:12,char_end:59";
"assert '<h1>Hello World!</h1>' in str(f.read()),type='assert_statement'\nline_star:305,line_end:305|char_star:12,char_end:59"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:305,line_end:305|char_star:12,char_end:59"->"assert '<h1>Hello World!</h1>' in str(f.read()),type='assert_statement'\nline_star:305,line_end:305|char_star:12,char_end:59";
"'<h1>Hello World!</h1>' in str(f.read()),type='comparison_operator'\nline_star:305,line_end:305|char_star:19,char_end:59"[shape="box",fillcolor="white",style=filled];
"assert '<h1>Hello World!</h1>' in str(f.read()),type='assert_statement'\nline_star:305,line_end:305|char_star:12,char_end:59"->"'<h1>Hello World!</h1>' in str(f.read()),type='comparison_operator'\nline_star:305,line_end:305|char_star:19,char_end:59";
"str(f.read()),type='call'\nline_star:305,line_end:305|char_star:46,char_end:59"[shape="box",fillcolor="white",style=filled];
"'<h1>Hello World!</h1>' in str(f.read()),type='comparison_operator'\nline_star:305,line_end:305|char_star:19,char_end:59"->"str(f.read()),type='call'\nline_star:305,line_end:305|char_star:46,char_end:59";
"str,type='identifier'\nline_star:305,line_end:305|char_star:46,char_end:49"[shape="point",fillcolor="#121013",style=filled];
"str(f.read()),type='call'\nline_star:305,line_end:305|char_star:46,char_end:59"->"str,type='identifier'\nline_star:305,line_end:305|char_star:46,char_end:49";
"(f.read()),type='argument_list'\nline_star:305,line_end:305|char_star:49,char_end:59"[shape="box",fillcolor="white",style=filled];
"str(f.read()),type='call'\nline_star:305,line_end:305|char_star:46,char_end:59"->"(f.read()),type='argument_list'\nline_star:305,line_end:305|char_star:49,char_end:59";
"f.read(),type='call'\nline_star:305,line_end:305|char_star:50,char_end:58"[shape="box",fillcolor="white",style=filled];
"(f.read()),type='argument_list'\nline_star:305,line_end:305|char_star:49,char_end:59"->"f.read(),type='call'\nline_star:305,line_end:305|char_star:50,char_end:58";
"f.read,type='attribute'\nline_star:305,line_end:305|char_star:50,char_end:56"[shape="box",fillcolor="white",style=filled];
"f.read(),type='call'\nline_star:305,line_end:305|char_star:50,char_end:58"->"f.read,type='attribute'\nline_star:305,line_end:305|char_star:50,char_end:56";
"f,type='identifier'\nline_star:305,line_end:305|char_star:50,char_end:51"[shape="point",fillcolor="#121013",style=filled];
"f.read,type='attribute'\nline_star:305,line_end:305|char_star:50,char_end:56"->"f,type='identifier'\nline_star:305,line_end:305|char_star:50,char_end:51";
"read,type='identifier'\nline_star:305,line_end:305|char_star:52,char_end:56"[shape="point",fillcolor="#121013",style=filled];
"f.read,type='attribute'\nline_star:305,line_end:305|char_star:50,char_end:56"->"read,type='identifier'\nline_star:305,line_end:305|char_star:52,char_end:56";
"@pytest.mark.parametrize('mode', ('w', 'x', 'a', 'r+'))\n    def test_open_resource_exceptions(self, mode):\n        app = flask.Flask(__name__)\n\n        with pytest.raises(ValueError):\n            app.open_resource('static/index.html', mode),type='decorated_definition'\nline_star:307,line_end:312|char_star:4,char_end:56"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:254,line_end:312|char_star:4,char_end:56"->"@pytest.mark.parametrize('mode', ('w', 'x', 'a', 'r+'))\n    def test_open_resource_exceptions(self, mode):\n        app = flask.Flask(__name__)\n\n        with pytest.raises(ValueError):\n            app.open_resource('static/index.html', mode),type='decorated_definition'\nline_star:307,line_end:312|char_star:4,char_end:56";
"@pytest.mark.parametrize('mode', ('w', 'x', 'a', 'r+')),type='decorator'\nline_star:307,line_end:307|char_star:4,char_end:59"[shape="box",fillcolor="white",style=filled];
"@pytest.mark.parametrize('mode', ('w', 'x', 'a', 'r+'))\n    def test_open_resource_exceptions(self, mode):\n        app = flask.Flask(__name__)\n\n        with pytest.raises(ValueError):\n            app.open_resource('static/index.html', mode),type='decorated_definition'\nline_star:307,line_end:312|char_star:4,char_end:56"->"@pytest.mark.parametrize('mode', ('w', 'x', 'a', 'r+')),type='decorator'\nline_star:307,line_end:307|char_star:4,char_end:59";
"def test_open_resource_exceptions(self, mode):\n        app = flask.Flask(__name__)\n\n        with pytest.raises(ValueError):\n            app.open_resource('static/index.html', mode),type='function_definition'\nline_star:308,line_end:312|char_star:4,char_end:56"[shape="box",fillcolor="#cee6b4",style=filled];
"@pytest.mark.parametrize('mode', ('w', 'x', 'a', 'r+'))\n    def test_open_resource_exceptions(self, mode):\n        app = flask.Flask(__name__)\n\n        with pytest.raises(ValueError):\n            app.open_resource('static/index.html', mode),type='decorated_definition'\nline_star:307,line_end:312|char_star:4,char_end:56"->"def test_open_resource_exceptions(self, mode):\n        app = flask.Flask(__name__)\n\n        with pytest.raises(ValueError):\n            app.open_resource('static/index.html', mode),type='function_definition'\nline_star:308,line_end:312|char_star:4,char_end:56";
"test_open_resource_exceptions,type='identifier'\nline_star:308,line_end:308|char_star:8,char_end:37"[shape="point",fillcolor="#121013",style=filled];
"def test_open_resource_exceptions(self, mode):\n        app = flask.Flask(__name__)\n\n        with pytest.raises(ValueError):\n            app.open_resource('static/index.html', mode),type='function_definition'\nline_star:308,line_end:312|char_star:4,char_end:56"->"test_open_resource_exceptions,type='identifier'\nline_star:308,line_end:308|char_star:8,char_end:37";
"(self, mode),type='parameters'\nline_star:308,line_end:308|char_star:37,char_end:49"[shape="box",fillcolor="white",style=filled];
"def test_open_resource_exceptions(self, mode):\n        app = flask.Flask(__name__)\n\n        with pytest.raises(ValueError):\n            app.open_resource('static/index.html', mode),type='function_definition'\nline_star:308,line_end:312|char_star:4,char_end:56"->"(self, mode),type='parameters'\nline_star:308,line_end:308|char_star:37,char_end:49";
"self,type='identifier'\nline_star:308,line_end:308|char_star:38,char_end:42"[shape="point",fillcolor="#121013",style=filled];
"(self, mode),type='parameters'\nline_star:308,line_end:308|char_star:37,char_end:49"->"self,type='identifier'\nline_star:308,line_end:308|char_star:38,char_end:42";
"mode,type='identifier'\nline_star:308,line_end:308|char_star:44,char_end:48"[shape="point",fillcolor="#121013",style=filled];
"(self, mode),type='parameters'\nline_star:308,line_end:308|char_star:37,char_end:49"->"mode,type='identifier'\nline_star:308,line_end:308|char_star:44,char_end:48";
"type='INFORMATION BLOCK'\nline_star:309,line_end:312|char_star:8,char_end:56"[shape="point",fillcolor="#121013",style=filled];
"def test_open_resource_exceptions(self, mode):\n        app = flask.Flask(__name__)\n\n        with pytest.raises(ValueError):\n            app.open_resource('static/index.html', mode),type='function_definition'\nline_star:308,line_end:312|char_star:4,char_end:56"->"type='INFORMATION BLOCK'\nline_star:309,line_end:312|char_star:8,char_end:56";
"with pytest.raises(ValueError):\n            app.open_resource('static/index.html', mode),type='with_statement'\nline_star:311,line_end:312|char_star:8,char_end:56"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:309,line_end:312|char_star:8,char_end:56"->"with pytest.raises(ValueError):\n            app.open_resource('static/index.html', mode),type='with_statement'\nline_star:311,line_end:312|char_star:8,char_end:56";
"pytest.raises(ValueError),type='with_clause'\nline_star:311,line_end:311|char_star:13,char_end:38"[shape="box",fillcolor="white",style=filled];
"with pytest.raises(ValueError):\n            app.open_resource('static/index.html', mode),type='with_statement'\nline_star:311,line_end:312|char_star:8,char_end:56"->"pytest.raises(ValueError),type='with_clause'\nline_star:311,line_end:311|char_star:13,char_end:38";
"type='INFORMATION BLOCK'\nline_star:312,line_end:312|char_star:12,char_end:56"[shape="point",fillcolor="#121013",style=filled];
"with pytest.raises(ValueError):\n            app.open_resource('static/index.html', mode),type='with_statement'\nline_star:311,line_end:312|char_star:8,char_end:56"->"type='INFORMATION BLOCK'\nline_star:312,line_end:312|char_star:12,char_end:56";
"import io\nimport os\nimport pytest\nimport flask\nfrom flask.helpers import get_debug_flag\nfrom flask.helpers import get_env\nfrom flask.views import MethodVie"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"import io\nimport os\nimport pytest\nimport flask\nfrom flask.helpers import get_debug_flag\nfrom flask.helpers import get_env\nfrom flask.views import MethodVie"
}
