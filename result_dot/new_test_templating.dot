digraph G{
rankdir="LR";
"MODULE"[shape="box",fillcolor="white",style=filled];
"import logging,type='import_statement'\nline_star:0,line_end:0|char_star:0,char_end:14"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"import logging,type='import_statement'\nline_star:0,line_end:0|char_star:0,char_end:14";
"import pytest,type='import_statement'\nline_star:2,line_end:2|char_star:0,char_end:13"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"import pytest,type='import_statement'\nline_star:2,line_end:2|char_star:0,char_end:13";
"import werkzeug.serving,type='import_statement'\nline_star:3,line_end:3|char_star:0,char_end:23"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"import werkzeug.serving,type='import_statement'\nline_star:3,line_end:3|char_star:0,char_end:23";
"from jinja2 import TemplateNotFound,type='import_from_statement'\nline_star:4,line_end:4|char_star:0,char_end:35"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"from jinja2 import TemplateNotFound,type='import_from_statement'\nline_star:4,line_end:4|char_star:0,char_end:35";
"import flask,type='import_statement'\nline_star:6,line_end:6|char_star:0,char_end:12"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"import flask,type='import_statement'\nline_star:6,line_end:6|char_star:0,char_end:12";
"def test_context_processing(app, client):\n    @app.context_processor\n    def context_processor():\n        return {'injected_value': 42}\n\n    @app.route('/')\n    def index():\n        return flask.render_template('context_template.html', value=23)\n\n    rv = client.get('/')\n    assert rv.data == b'<p>23|42',type='function_definition'\nline_star:9,line_end:19|char_star:0,char_end:33"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_context_processing(app, client):\n    @app.context_processor\n    def context_processor():\n        return {'injected_value': 42}\n\n    @app.route('/')\n    def index():\n        return flask.render_template('context_template.html', value=23)\n\n    rv = client.get('/')\n    assert rv.data == b'<p>23|42',type='function_definition'\nline_star:9,line_end:19|char_star:0,char_end:33";
"test_context_processing,type='identifier'\nline_star:9,line_end:9|char_star:4,char_end:27"[shape="point",fillcolor="#121013",style=filled];
"def test_context_processing(app, client):\n    @app.context_processor\n    def context_processor():\n        return {'injected_value': 42}\n\n    @app.route('/')\n    def index():\n        return flask.render_template('context_template.html', value=23)\n\n    rv = client.get('/')\n    assert rv.data == b'<p>23|42',type='function_definition'\nline_star:9,line_end:19|char_star:0,char_end:33"->"test_context_processing,type='identifier'\nline_star:9,line_end:9|char_star:4,char_end:27";
"(app, client),type='parameters'\nline_star:9,line_end:9|char_star:27,char_end:40"[shape="box",fillcolor="white",style=filled];
"def test_context_processing(app, client):\n    @app.context_processor\n    def context_processor():\n        return {'injected_value': 42}\n\n    @app.route('/')\n    def index():\n        return flask.render_template('context_template.html', value=23)\n\n    rv = client.get('/')\n    assert rv.data == b'<p>23|42',type='function_definition'\nline_star:9,line_end:19|char_star:0,char_end:33"->"(app, client),type='parameters'\nline_star:9,line_end:9|char_star:27,char_end:40";
"app,type='identifier'\nline_star:9,line_end:9|char_star:28,char_end:31"[shape="point",fillcolor="#121013",style=filled];
"(app, client),type='parameters'\nline_star:9,line_end:9|char_star:27,char_end:40"->"app,type='identifier'\nline_star:9,line_end:9|char_star:28,char_end:31";
"client,type='identifier'\nline_star:9,line_end:9|char_star:33,char_end:39"[shape="point",fillcolor="#121013",style=filled];
"(app, client),type='parameters'\nline_star:9,line_end:9|char_star:27,char_end:40"->"client,type='identifier'\nline_star:9,line_end:9|char_star:33,char_end:39";
"type='INFORMATION BLOCK'\nline_star:10,line_end:19|char_star:4,char_end:33"[shape="point",fillcolor="#121013",style=filled];
"def test_context_processing(app, client):\n    @app.context_processor\n    def context_processor():\n        return {'injected_value': 42}\n\n    @app.route('/')\n    def index():\n        return flask.render_template('context_template.html', value=23)\n\n    rv = client.get('/')\n    assert rv.data == b'<p>23|42',type='function_definition'\nline_star:9,line_end:19|char_star:0,char_end:33"->"type='INFORMATION BLOCK'\nline_star:10,line_end:19|char_star:4,char_end:33";
"@app.context_processor\n    def context_processor():\n        return {'injected_value': 42},type='decorated_definition'\nline_star:10,line_end:12|char_star:4,char_end:37"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:10,line_end:19|char_star:4,char_end:33"->"@app.context_processor\n    def context_processor():\n        return {'injected_value': 42},type='decorated_definition'\nline_star:10,line_end:12|char_star:4,char_end:37";
"@app.context_processor,type='decorator'\nline_star:10,line_end:10|char_star:4,char_end:26"[shape="box",fillcolor="white",style=filled];
"@app.context_processor\n    def context_processor():\n        return {'injected_value': 42},type='decorated_definition'\nline_star:10,line_end:12|char_star:4,char_end:37"->"@app.context_processor,type='decorator'\nline_star:10,line_end:10|char_star:4,char_end:26";
"def context_processor():\n        return {'injected_value': 42},type='function_definition'\nline_star:11,line_end:12|char_star:4,char_end:37"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.context_processor\n    def context_processor():\n        return {'injected_value': 42},type='decorated_definition'\nline_star:10,line_end:12|char_star:4,char_end:37"->"def context_processor():\n        return {'injected_value': 42},type='function_definition'\nline_star:11,line_end:12|char_star:4,char_end:37";
"context_processor,type='identifier'\nline_star:11,line_end:11|char_star:8,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"def context_processor():\n        return {'injected_value': 42},type='function_definition'\nline_star:11,line_end:12|char_star:4,char_end:37"->"context_processor,type='identifier'\nline_star:11,line_end:11|char_star:8,char_end:25";
"type='INFORMATION BLOCK'\nline_star:12,line_end:12|char_star:8,char_end:37"[shape="point",fillcolor="#121013",style=filled];
"def context_processor():\n        return {'injected_value': 42},type='function_definition'\nline_star:11,line_end:12|char_star:4,char_end:37"->"type='INFORMATION BLOCK'\nline_star:12,line_end:12|char_star:8,char_end:37";
"return {'injected_value': 42},type='return_statement'\nline_star:12,line_end:12|char_star:8,char_end:37"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:12,line_end:12|char_star:8,char_end:37"->"return {'injected_value': 42},type='return_statement'\nline_star:12,line_end:12|char_star:8,char_end:37";
"@app.route('/')\n    def index():\n        return flask.render_template('context_template.html', value=23),type='decorated_definition'\nline_star:14,line_end:16|char_star:4,char_end:71"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:10,line_end:19|char_star:4,char_end:33"->"@app.route('/')\n    def index():\n        return flask.render_template('context_template.html', value=23),type='decorated_definition'\nline_star:14,line_end:16|char_star:4,char_end:71";
"@app.route('/'),type='decorator'\nline_star:14,line_end:14|char_star:4,char_end:19"[shape="box",fillcolor="white",style=filled];
"@app.route('/')\n    def index():\n        return flask.render_template('context_template.html', value=23),type='decorated_definition'\nline_star:14,line_end:16|char_star:4,char_end:71"->"@app.route('/'),type='decorator'\nline_star:14,line_end:14|char_star:4,char_end:19";
"def index():\n        return flask.render_template('context_template.html', value=23),type='function_definition'\nline_star:15,line_end:16|char_star:4,char_end:71"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.route('/')\n    def index():\n        return flask.render_template('context_template.html', value=23),type='decorated_definition'\nline_star:14,line_end:16|char_star:4,char_end:71"->"def index():\n        return flask.render_template('context_template.html', value=23),type='function_definition'\nline_star:15,line_end:16|char_star:4,char_end:71";
"index,type='identifier'\nline_star:15,line_end:15|char_star:8,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"def index():\n        return flask.render_template('context_template.html', value=23),type='function_definition'\nline_star:15,line_end:16|char_star:4,char_end:71"->"index,type='identifier'\nline_star:15,line_end:15|char_star:8,char_end:13";
"type='INFORMATION BLOCK'\nline_star:16,line_end:16|char_star:8,char_end:71"[shape="point",fillcolor="#121013",style=filled];
"def index():\n        return flask.render_template('context_template.html', value=23),type='function_definition'\nline_star:15,line_end:16|char_star:4,char_end:71"->"type='INFORMATION BLOCK'\nline_star:16,line_end:16|char_star:8,char_end:71";
"return flask.render_template('context_template.html', value=23),type='return_statement'\nline_star:16,line_end:16|char_star:8,char_end:71"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:16,line_end:16|char_star:8,char_end:71"->"return flask.render_template('context_template.html', value=23),type='return_statement'\nline_star:16,line_end:16|char_star:8,char_end:71";
"assert rv.data == b'<p>23|42',type='assert_statement'\nline_star:19,line_end:19|char_star:4,char_end:33"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:10,line_end:19|char_star:4,char_end:33"->"assert rv.data == b'<p>23|42',type='assert_statement'\nline_star:19,line_end:19|char_star:4,char_end:33";
"rv.data == b'<p>23|42',type='comparison_operator'\nline_star:19,line_end:19|char_star:11,char_end:33"[shape="box",fillcolor="white",style=filled];
"assert rv.data == b'<p>23|42',type='assert_statement'\nline_star:19,line_end:19|char_star:4,char_end:33"->"rv.data == b'<p>23|42',type='comparison_operator'\nline_star:19,line_end:19|char_star:11,char_end:33";
"rv.data,type='attribute'\nline_star:19,line_end:19|char_star:11,char_end:18"[shape="box",fillcolor="white",style=filled];
"rv.data == b'<p>23|42',type='comparison_operator'\nline_star:19,line_end:19|char_star:11,char_end:33"->"rv.data,type='attribute'\nline_star:19,line_end:19|char_star:11,char_end:18";
"rv,type='identifier'\nline_star:19,line_end:19|char_star:11,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"rv.data,type='attribute'\nline_star:19,line_end:19|char_star:11,char_end:18"->"rv,type='identifier'\nline_star:19,line_end:19|char_star:11,char_end:13";
"data,type='identifier'\nline_star:19,line_end:19|char_star:14,char_end:18"[shape="point",fillcolor="#121013",style=filled];
"rv.data,type='attribute'\nline_star:19,line_end:19|char_star:11,char_end:18"->"data,type='identifier'\nline_star:19,line_end:19|char_star:14,char_end:18";
"def test_original_win(app, client):\n    @app.route('/')\n    def index():\n        return flask.render_template_string('{{ config }}', config=42)\n\n    rv = client.get('/')\n    assert rv.data == b'42',type='function_definition'\nline_star:22,line_end:28|char_star:0,char_end:27"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_original_win(app, client):\n    @app.route('/')\n    def index():\n        return flask.render_template_string('{{ config }}', config=42)\n\n    rv = client.get('/')\n    assert rv.data == b'42',type='function_definition'\nline_star:22,line_end:28|char_star:0,char_end:27";
"test_original_win,type='identifier'\nline_star:22,line_end:22|char_star:4,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"def test_original_win(app, client):\n    @app.route('/')\n    def index():\n        return flask.render_template_string('{{ config }}', config=42)\n\n    rv = client.get('/')\n    assert rv.data == b'42',type='function_definition'\nline_star:22,line_end:28|char_star:0,char_end:27"->"test_original_win,type='identifier'\nline_star:22,line_end:22|char_star:4,char_end:21";
"(app, client),type='parameters'\nline_star:22,line_end:22|char_star:21,char_end:34"[shape="box",fillcolor="white",style=filled];
"def test_original_win(app, client):\n    @app.route('/')\n    def index():\n        return flask.render_template_string('{{ config }}', config=42)\n\n    rv = client.get('/')\n    assert rv.data == b'42',type='function_definition'\nline_star:22,line_end:28|char_star:0,char_end:27"->"(app, client),type='parameters'\nline_star:22,line_end:22|char_star:21,char_end:34";
"app,type='identifier'\nline_star:22,line_end:22|char_star:22,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"(app, client),type='parameters'\nline_star:22,line_end:22|char_star:21,char_end:34"->"app,type='identifier'\nline_star:22,line_end:22|char_star:22,char_end:25";
"client,type='identifier'\nline_star:22,line_end:22|char_star:27,char_end:33"[shape="point",fillcolor="#121013",style=filled];
"(app, client),type='parameters'\nline_star:22,line_end:22|char_star:21,char_end:34"->"client,type='identifier'\nline_star:22,line_end:22|char_star:27,char_end:33";
"type='INFORMATION BLOCK'\nline_star:23,line_end:28|char_star:4,char_end:27"[shape="point",fillcolor="#121013",style=filled];
"def test_original_win(app, client):\n    @app.route('/')\n    def index():\n        return flask.render_template_string('{{ config }}', config=42)\n\n    rv = client.get('/')\n    assert rv.data == b'42',type='function_definition'\nline_star:22,line_end:28|char_star:0,char_end:27"->"type='INFORMATION BLOCK'\nline_star:23,line_end:28|char_star:4,char_end:27";
"@app.route('/')\n    def index():\n        return flask.render_template_string('{{ config }}', config=42),type='decorated_definition'\nline_star:23,line_end:25|char_star:4,char_end:70"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:23,line_end:28|char_star:4,char_end:27"->"@app.route('/')\n    def index():\n        return flask.render_template_string('{{ config }}', config=42),type='decorated_definition'\nline_star:23,line_end:25|char_star:4,char_end:70";
"@app.route('/'),type='decorator'\nline_star:23,line_end:23|char_star:4,char_end:19"[shape="box",fillcolor="white",style=filled];
"@app.route('/')\n    def index():\n        return flask.render_template_string('{{ config }}', config=42),type='decorated_definition'\nline_star:23,line_end:25|char_star:4,char_end:70"->"@app.route('/'),type='decorator'\nline_star:23,line_end:23|char_star:4,char_end:19";
"def index():\n        return flask.render_template_string('{{ config }}', config=42),type='function_definition'\nline_star:24,line_end:25|char_star:4,char_end:70"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.route('/')\n    def index():\n        return flask.render_template_string('{{ config }}', config=42),type='decorated_definition'\nline_star:23,line_end:25|char_star:4,char_end:70"->"def index():\n        return flask.render_template_string('{{ config }}', config=42),type='function_definition'\nline_star:24,line_end:25|char_star:4,char_end:70";
"index,type='identifier'\nline_star:24,line_end:24|char_star:8,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"def index():\n        return flask.render_template_string('{{ config }}', config=42),type='function_definition'\nline_star:24,line_end:25|char_star:4,char_end:70"->"index,type='identifier'\nline_star:24,line_end:24|char_star:8,char_end:13";
"type='INFORMATION BLOCK'\nline_star:25,line_end:25|char_star:8,char_end:70"[shape="point",fillcolor="#121013",style=filled];
"def index():\n        return flask.render_template_string('{{ config }}', config=42),type='function_definition'\nline_star:24,line_end:25|char_star:4,char_end:70"->"type='INFORMATION BLOCK'\nline_star:25,line_end:25|char_star:8,char_end:70";
"return flask.render_template_string('{{ config }}', config=42),type='return_statement'\nline_star:25,line_end:25|char_star:8,char_end:70"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:25,line_end:25|char_star:8,char_end:70"->"return flask.render_template_string('{{ config }}', config=42),type='return_statement'\nline_star:25,line_end:25|char_star:8,char_end:70";
"assert rv.data == b'42',type='assert_statement'\nline_star:28,line_end:28|char_star:4,char_end:27"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:23,line_end:28|char_star:4,char_end:27"->"assert rv.data == b'42',type='assert_statement'\nline_star:28,line_end:28|char_star:4,char_end:27";
"rv.data == b'42',type='comparison_operator'\nline_star:28,line_end:28|char_star:11,char_end:27"[shape="box",fillcolor="white",style=filled];
"assert rv.data == b'42',type='assert_statement'\nline_star:28,line_end:28|char_star:4,char_end:27"->"rv.data == b'42',type='comparison_operator'\nline_star:28,line_end:28|char_star:11,char_end:27";
"rv.data,type='attribute'\nline_star:28,line_end:28|char_star:11,char_end:18"[shape="box",fillcolor="white",style=filled];
"rv.data == b'42',type='comparison_operator'\nline_star:28,line_end:28|char_star:11,char_end:27"->"rv.data,type='attribute'\nline_star:28,line_end:28|char_star:11,char_end:18";
"rv,type='identifier'\nline_star:28,line_end:28|char_star:11,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"rv.data,type='attribute'\nline_star:28,line_end:28|char_star:11,char_end:18"->"rv,type='identifier'\nline_star:28,line_end:28|char_star:11,char_end:13";
"data,type='identifier'\nline_star:28,line_end:28|char_star:14,char_end:18"[shape="point",fillcolor="#121013",style=filled];
"rv.data,type='attribute'\nline_star:28,line_end:28|char_star:11,char_end:18"->"data,type='identifier'\nline_star:28,line_end:28|char_star:14,char_end:18";
"def test_request_less_rendering(app, app_ctx):\n    app.config['WORLD_NAME'] = 'Special World'\n\n    @app.context_processor\n    def context_processor():\n        return dict(foo=42)\n\n    rv = flask.render_template_string('Hello {{ config.WORLD_NAME }} {{ foo }}')\n    assert rv == 'Hello Special World 42',type='function_definition'\nline_star:31,line_end:39|char_star:0,char_end:41"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_request_less_rendering(app, app_ctx):\n    app.config['WORLD_NAME'] = 'Special World'\n\n    @app.context_processor\n    def context_processor():\n        return dict(foo=42)\n\n    rv = flask.render_template_string('Hello {{ config.WORLD_NAME }} {{ foo }}')\n    assert rv == 'Hello Special World 42',type='function_definition'\nline_star:31,line_end:39|char_star:0,char_end:41";
"test_request_less_rendering,type='identifier'\nline_star:31,line_end:31|char_star:4,char_end:31"[shape="point",fillcolor="#121013",style=filled];
"def test_request_less_rendering(app, app_ctx):\n    app.config['WORLD_NAME'] = 'Special World'\n\n    @app.context_processor\n    def context_processor():\n        return dict(foo=42)\n\n    rv = flask.render_template_string('Hello {{ config.WORLD_NAME }} {{ foo }}')\n    assert rv == 'Hello Special World 42',type='function_definition'\nline_star:31,line_end:39|char_star:0,char_end:41"->"test_request_less_rendering,type='identifier'\nline_star:31,line_end:31|char_star:4,char_end:31";
"(app, app_ctx),type='parameters'\nline_star:31,line_end:31|char_star:31,char_end:45"[shape="box",fillcolor="white",style=filled];
"def test_request_less_rendering(app, app_ctx):\n    app.config['WORLD_NAME'] = 'Special World'\n\n    @app.context_processor\n    def context_processor():\n        return dict(foo=42)\n\n    rv = flask.render_template_string('Hello {{ config.WORLD_NAME }} {{ foo }}')\n    assert rv == 'Hello Special World 42',type='function_definition'\nline_star:31,line_end:39|char_star:0,char_end:41"->"(app, app_ctx),type='parameters'\nline_star:31,line_end:31|char_star:31,char_end:45";
"app,type='identifier'\nline_star:31,line_end:31|char_star:32,char_end:35"[shape="point",fillcolor="#121013",style=filled];
"(app, app_ctx),type='parameters'\nline_star:31,line_end:31|char_star:31,char_end:45"->"app,type='identifier'\nline_star:31,line_end:31|char_star:32,char_end:35";
"app_ctx,type='identifier'\nline_star:31,line_end:31|char_star:37,char_end:44"[shape="point",fillcolor="#121013",style=filled];
"(app, app_ctx),type='parameters'\nline_star:31,line_end:31|char_star:31,char_end:45"->"app_ctx,type='identifier'\nline_star:31,line_end:31|char_star:37,char_end:44";
"type='INFORMATION BLOCK'\nline_star:32,line_end:39|char_star:4,char_end:41"[shape="point",fillcolor="#121013",style=filled];
"def test_request_less_rendering(app, app_ctx):\n    app.config['WORLD_NAME'] = 'Special World'\n\n    @app.context_processor\n    def context_processor():\n        return dict(foo=42)\n\n    rv = flask.render_template_string('Hello {{ config.WORLD_NAME }} {{ foo }}')\n    assert rv == 'Hello Special World 42',type='function_definition'\nline_star:31,line_end:39|char_star:0,char_end:41"->"type='INFORMATION BLOCK'\nline_star:32,line_end:39|char_star:4,char_end:41";
"@app.context_processor\n    def context_processor():\n        return dict(foo=42),type='decorated_definition'\nline_star:34,line_end:36|char_star:4,char_end:27"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:32,line_end:39|char_star:4,char_end:41"->"@app.context_processor\n    def context_processor():\n        return dict(foo=42),type='decorated_definition'\nline_star:34,line_end:36|char_star:4,char_end:27";
"@app.context_processor,type='decorator'\nline_star:34,line_end:34|char_star:4,char_end:26"[shape="box",fillcolor="white",style=filled];
"@app.context_processor\n    def context_processor():\n        return dict(foo=42),type='decorated_definition'\nline_star:34,line_end:36|char_star:4,char_end:27"->"@app.context_processor,type='decorator'\nline_star:34,line_end:34|char_star:4,char_end:26";
"def context_processor():\n        return dict(foo=42),type='function_definition'\nline_star:35,line_end:36|char_star:4,char_end:27"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.context_processor\n    def context_processor():\n        return dict(foo=42),type='decorated_definition'\nline_star:34,line_end:36|char_star:4,char_end:27"->"def context_processor():\n        return dict(foo=42),type='function_definition'\nline_star:35,line_end:36|char_star:4,char_end:27";
"context_processor,type='identifier'\nline_star:35,line_end:35|char_star:8,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"def context_processor():\n        return dict(foo=42),type='function_definition'\nline_star:35,line_end:36|char_star:4,char_end:27"->"context_processor,type='identifier'\nline_star:35,line_end:35|char_star:8,char_end:25";
"type='INFORMATION BLOCK'\nline_star:36,line_end:36|char_star:8,char_end:27"[shape="point",fillcolor="#121013",style=filled];
"def context_processor():\n        return dict(foo=42),type='function_definition'\nline_star:35,line_end:36|char_star:4,char_end:27"->"type='INFORMATION BLOCK'\nline_star:36,line_end:36|char_star:8,char_end:27";
"return dict(foo=42),type='return_statement'\nline_star:36,line_end:36|char_star:8,char_end:27"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:36,line_end:36|char_star:8,char_end:27"->"return dict(foo=42),type='return_statement'\nline_star:36,line_end:36|char_star:8,char_end:27";
"assert rv == 'Hello Special World 42',type='assert_statement'\nline_star:39,line_end:39|char_star:4,char_end:41"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:32,line_end:39|char_star:4,char_end:41"->"assert rv == 'Hello Special World 42',type='assert_statement'\nline_star:39,line_end:39|char_star:4,char_end:41";
"rv == 'Hello Special World 42',type='comparison_operator'\nline_star:39,line_end:39|char_star:11,char_end:41"[shape="box",fillcolor="white",style=filled];
"assert rv == 'Hello Special World 42',type='assert_statement'\nline_star:39,line_end:39|char_star:4,char_end:41"->"rv == 'Hello Special World 42',type='comparison_operator'\nline_star:39,line_end:39|char_star:11,char_end:41";
"rv,type='identifier'\nline_star:39,line_end:39|char_star:11,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"rv == 'Hello Special World 42',type='comparison_operator'\nline_star:39,line_end:39|char_star:11,char_end:41"->"rv,type='identifier'\nline_star:39,line_end:39|char_star:11,char_end:13";
"def test_standard_context(app, client):\n    @app.route('/')\n    def index():\n        flask.g.foo = 23\n        flask.session['test'] = 'aha'\n        return flask.render_template_string(\n            '''\n            {{ request.args.foo }}\n            {{ g.foo }}\n            {{ config.DEBUG }}\n            {{ session.test }}\n        '''\n        )\n\n    rv = client.get('/?foo=42')\n    assert rv.data.split() == [b'42', b'23', b'False', b'aha'],type='function_definition'\nline_star:42,line_end:57|char_star:0,char_end:62"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_standard_context(app, client):\n    @app.route('/')\n    def index():\n        flask.g.foo = 23\n        flask.session['test'] = 'aha'\n        return flask.render_template_string(\n            '''\n            {{ request.args.foo }}\n            {{ g.foo }}\n            {{ config.DEBUG }}\n            {{ session.test }}\n        '''\n        )\n\n    rv = client.get('/?foo=42')\n    assert rv.data.split() == [b'42', b'23', b'False', b'aha'],type='function_definition'\nline_star:42,line_end:57|char_star:0,char_end:62";
"test_standard_context,type='identifier'\nline_star:42,line_end:42|char_star:4,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"def test_standard_context(app, client):\n    @app.route('/')\n    def index():\n        flask.g.foo = 23\n        flask.session['test'] = 'aha'\n        return flask.render_template_string(\n            '''\n            {{ request.args.foo }}\n            {{ g.foo }}\n            {{ config.DEBUG }}\n            {{ session.test }}\n        '''\n        )\n\n    rv = client.get('/?foo=42')\n    assert rv.data.split() == [b'42', b'23', b'False', b'aha'],type='function_definition'\nline_star:42,line_end:57|char_star:0,char_end:62"->"test_standard_context,type='identifier'\nline_star:42,line_end:42|char_star:4,char_end:25";
"(app, client),type='parameters'\nline_star:42,line_end:42|char_star:25,char_end:38"[shape="box",fillcolor="white",style=filled];
"def test_standard_context(app, client):\n    @app.route('/')\n    def index():\n        flask.g.foo = 23\n        flask.session['test'] = 'aha'\n        return flask.render_template_string(\n            '''\n            {{ request.args.foo }}\n            {{ g.foo }}\n            {{ config.DEBUG }}\n            {{ session.test }}\n        '''\n        )\n\n    rv = client.get('/?foo=42')\n    assert rv.data.split() == [b'42', b'23', b'False', b'aha'],type='function_definition'\nline_star:42,line_end:57|char_star:0,char_end:62"->"(app, client),type='parameters'\nline_star:42,line_end:42|char_star:25,char_end:38";
"app,type='identifier'\nline_star:42,line_end:42|char_star:26,char_end:29"[shape="point",fillcolor="#121013",style=filled];
"(app, client),type='parameters'\nline_star:42,line_end:42|char_star:25,char_end:38"->"app,type='identifier'\nline_star:42,line_end:42|char_star:26,char_end:29";
"client,type='identifier'\nline_star:42,line_end:42|char_star:31,char_end:37"[shape="point",fillcolor="#121013",style=filled];
"(app, client),type='parameters'\nline_star:42,line_end:42|char_star:25,char_end:38"->"client,type='identifier'\nline_star:42,line_end:42|char_star:31,char_end:37";
"type='INFORMATION BLOCK'\nline_star:43,line_end:57|char_star:4,char_end:62"[shape="point",fillcolor="#121013",style=filled];
"def test_standard_context(app, client):\n    @app.route('/')\n    def index():\n        flask.g.foo = 23\n        flask.session['test'] = 'aha'\n        return flask.render_template_string(\n            '''\n            {{ request.args.foo }}\n            {{ g.foo }}\n            {{ config.DEBUG }}\n            {{ session.test }}\n        '''\n        )\n\n    rv = client.get('/?foo=42')\n    assert rv.data.split() == [b'42', b'23', b'False', b'aha'],type='function_definition'\nline_star:42,line_end:57|char_star:0,char_end:62"->"type='INFORMATION BLOCK'\nline_star:43,line_end:57|char_star:4,char_end:62";
"@app.route('/')\n    def index():\n        flask.g.foo = 23\n        flask.session['test'] = 'aha'\n        return flask.render_template_string(\n            '''\n            {{ request.args.foo }}\n            {{ g.foo }}\n            {{ config.DEBUG }}\n            {{ session.test }}\n        '''\n        ),type='decorated_definition'\nline_star:43,line_end:54|char_star:4,char_end:9"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:43,line_end:57|char_star:4,char_end:62"->"@app.route('/')\n    def index():\n        flask.g.foo = 23\n        flask.session['test'] = 'aha'\n        return flask.render_template_string(\n            '''\n            {{ request.args.foo }}\n            {{ g.foo }}\n            {{ config.DEBUG }}\n            {{ session.test }}\n        '''\n        ),type='decorated_definition'\nline_star:43,line_end:54|char_star:4,char_end:9";
"@app.route('/'),type='decorator'\nline_star:43,line_end:43|char_star:4,char_end:19"[shape="box",fillcolor="white",style=filled];
"@app.route('/')\n    def index():\n        flask.g.foo = 23\n        flask.session['test'] = 'aha'\n        return flask.render_template_string(\n            '''\n            {{ request.args.foo }}\n            {{ g.foo }}\n            {{ config.DEBUG }}\n            {{ session.test }}\n        '''\n        ),type='decorated_definition'\nline_star:43,line_end:54|char_star:4,char_end:9"->"@app.route('/'),type='decorator'\nline_star:43,line_end:43|char_star:4,char_end:19";
"def index():\n        flask.g.foo = 23\n        flask.session['test'] = 'aha'\n        return flask.render_template_string(\n            '''\n            {{ request.args.foo }}\n            {{ g.foo }}\n            {{ config.DEBUG }}\n            {{ session.test }}\n        '''\n        ),type='function_definition'\nline_star:44,line_end:54|char_star:4,char_end:9"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.route('/')\n    def index():\n        flask.g.foo = 23\n        flask.session['test'] = 'aha'\n        return flask.render_template_string(\n            '''\n            {{ request.args.foo }}\n            {{ g.foo }}\n            {{ config.DEBUG }}\n            {{ session.test }}\n        '''\n        ),type='decorated_definition'\nline_star:43,line_end:54|char_star:4,char_end:9"->"def index():\n        flask.g.foo = 23\n        flask.session['test'] = 'aha'\n        return flask.render_template_string(\n            '''\n            {{ request.args.foo }}\n            {{ g.foo }}\n            {{ config.DEBUG }}\n            {{ session.test }}\n        '''\n        ),type='function_definition'\nline_star:44,line_end:54|char_star:4,char_end:9";
"index,type='identifier'\nline_star:44,line_end:44|char_star:8,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"def index():\n        flask.g.foo = 23\n        flask.session['test'] = 'aha'\n        return flask.render_template_string(\n            '''\n            {{ request.args.foo }}\n            {{ g.foo }}\n            {{ config.DEBUG }}\n            {{ session.test }}\n        '''\n        ),type='function_definition'\nline_star:44,line_end:54|char_star:4,char_end:9"->"index,type='identifier'\nline_star:44,line_end:44|char_star:8,char_end:13";
"type='INFORMATION BLOCK'\nline_star:45,line_end:54|char_star:8,char_end:9"[shape="point",fillcolor="#121013",style=filled];
"def index():\n        flask.g.foo = 23\n        flask.session['test'] = 'aha'\n        return flask.render_template_string(\n            '''\n            {{ request.args.foo }}\n            {{ g.foo }}\n            {{ config.DEBUG }}\n            {{ session.test }}\n        '''\n        ),type='function_definition'\nline_star:44,line_end:54|char_star:4,char_end:9"->"type='INFORMATION BLOCK'\nline_star:45,line_end:54|char_star:8,char_end:9";
"return flask.render_template_string(\n            '''\n            {{ request.args.foo }}\n            {{ g.foo }}\n            {{ config.DEBUG }}\n            {{ session.test }}\n        '''\n        ),type='return_statement'\nline_star:47,line_end:54|char_star:8,char_end:9"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:45,line_end:54|char_star:8,char_end:9"->"return flask.render_template_string(\n            '''\n            {{ request.args.foo }}\n            {{ g.foo }}\n            {{ config.DEBUG }}\n            {{ session.test }}\n        '''\n        ),type='return_statement'\nline_star:47,line_end:54|char_star:8,char_end:9";
"assert rv.data.split() == [b'42', b'23', b'False', b'aha'],type='assert_statement'\nline_star:57,line_end:57|char_star:4,char_end:62"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:43,line_end:57|char_star:4,char_end:62"->"assert rv.data.split() == [b'42', b'23', b'False', b'aha'],type='assert_statement'\nline_star:57,line_end:57|char_star:4,char_end:62";
"rv.data.split() == [b'42', b'23', b'False', b'aha'],type='comparison_operator'\nline_star:57,line_end:57|char_star:11,char_end:62"[shape="box",fillcolor="white",style=filled];
"assert rv.data.split() == [b'42', b'23', b'False', b'aha'],type='assert_statement'\nline_star:57,line_end:57|char_star:4,char_end:62"->"rv.data.split() == [b'42', b'23', b'False', b'aha'],type='comparison_operator'\nline_star:57,line_end:57|char_star:11,char_end:62";
"rv.data.split(),type='call'\nline_star:57,line_end:57|char_star:11,char_end:26"[shape="box",fillcolor="white",style=filled];
"rv.data.split() == [b'42', b'23', b'False', b'aha'],type='comparison_operator'\nline_star:57,line_end:57|char_star:11,char_end:62"->"rv.data.split(),type='call'\nline_star:57,line_end:57|char_star:11,char_end:26";
"rv.data.split,type='attribute'\nline_star:57,line_end:57|char_star:11,char_end:24"[shape="box",fillcolor="white",style=filled];
"rv.data.split(),type='call'\nline_star:57,line_end:57|char_star:11,char_end:26"->"rv.data.split,type='attribute'\nline_star:57,line_end:57|char_star:11,char_end:24";
"rv.data,type='attribute'\nline_star:57,line_end:57|char_star:11,char_end:18"[shape="box",fillcolor="white",style=filled];
"rv.data.split,type='attribute'\nline_star:57,line_end:57|char_star:11,char_end:24"->"rv.data,type='attribute'\nline_star:57,line_end:57|char_star:11,char_end:18";
"rv,type='identifier'\nline_star:57,line_end:57|char_star:11,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"rv.data,type='attribute'\nline_star:57,line_end:57|char_star:11,char_end:18"->"rv,type='identifier'\nline_star:57,line_end:57|char_star:11,char_end:13";
"data,type='identifier'\nline_star:57,line_end:57|char_star:14,char_end:18"[shape="point",fillcolor="#121013",style=filled];
"rv.data,type='attribute'\nline_star:57,line_end:57|char_star:11,char_end:18"->"data,type='identifier'\nline_star:57,line_end:57|char_star:14,char_end:18";
"split,type='identifier'\nline_star:57,line_end:57|char_star:19,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"rv.data.split,type='attribute'\nline_star:57,line_end:57|char_star:11,char_end:24"->"split,type='identifier'\nline_star:57,line_end:57|char_star:19,char_end:24";
"[b'42', b'23', b'False', b'aha'],type='list'\nline_star:57,line_end:57|char_star:30,char_end:62"[shape="box",fillcolor="white",style=filled];
"rv.data.split() == [b'42', b'23', b'False', b'aha'],type='comparison_operator'\nline_star:57,line_end:57|char_star:11,char_end:62"->"[b'42', b'23', b'False', b'aha'],type='list'\nline_star:57,line_end:57|char_star:30,char_end:62";
"def test_escaping(app, client):\n    text = '<p>Hello World!'\n\n    @app.route('/')\n    def index():\n        return flask.render_template(\n            'escaping_template.html', text=text, html=flask.Markup(text)\n        )\n\n    lines = client.get('/').data.splitlines()\n    assert lines == [\n        b'&lt;p&gt;Hello World!',\n        b'<p>Hello World!',\n        b'<p>Hello World!',\n        b'<p>Hello World!',\n        b'&lt;p&gt;Hello World!',\n        b'<p>Hello World!',\n    ],type='function_definition'\nline_star:60,line_end:77|char_star:0,char_end:5"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_escaping(app, client):\n    text = '<p>Hello World!'\n\n    @app.route('/')\n    def index():\n        return flask.render_template(\n            'escaping_template.html', text=text, html=flask.Markup(text)\n        )\n\n    lines = client.get('/').data.splitlines()\n    assert lines == [\n        b'&lt;p&gt;Hello World!',\n        b'<p>Hello World!',\n        b'<p>Hello World!',\n        b'<p>Hello World!',\n        b'&lt;p&gt;Hello World!',\n        b'<p>Hello World!',\n    ],type='function_definition'\nline_star:60,line_end:77|char_star:0,char_end:5";
"test_escaping,type='identifier'\nline_star:60,line_end:60|char_star:4,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"def test_escaping(app, client):\n    text = '<p>Hello World!'\n\n    @app.route('/')\n    def index():\n        return flask.render_template(\n            'escaping_template.html', text=text, html=flask.Markup(text)\n        )\n\n    lines = client.get('/').data.splitlines()\n    assert lines == [\n        b'&lt;p&gt;Hello World!',\n        b'<p>Hello World!',\n        b'<p>Hello World!',\n        b'<p>Hello World!',\n        b'&lt;p&gt;Hello World!',\n        b'<p>Hello World!',\n    ],type='function_definition'\nline_star:60,line_end:77|char_star:0,char_end:5"->"test_escaping,type='identifier'\nline_star:60,line_end:60|char_star:4,char_end:17";
"(app, client),type='parameters'\nline_star:60,line_end:60|char_star:17,char_end:30"[shape="box",fillcolor="white",style=filled];
"def test_escaping(app, client):\n    text = '<p>Hello World!'\n\n    @app.route('/')\n    def index():\n        return flask.render_template(\n            'escaping_template.html', text=text, html=flask.Markup(text)\n        )\n\n    lines = client.get('/').data.splitlines()\n    assert lines == [\n        b'&lt;p&gt;Hello World!',\n        b'<p>Hello World!',\n        b'<p>Hello World!',\n        b'<p>Hello World!',\n        b'&lt;p&gt;Hello World!',\n        b'<p>Hello World!',\n    ],type='function_definition'\nline_star:60,line_end:77|char_star:0,char_end:5"->"(app, client),type='parameters'\nline_star:60,line_end:60|char_star:17,char_end:30";
"app,type='identifier'\nline_star:60,line_end:60|char_star:18,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"(app, client),type='parameters'\nline_star:60,line_end:60|char_star:17,char_end:30"->"app,type='identifier'\nline_star:60,line_end:60|char_star:18,char_end:21";
"client,type='identifier'\nline_star:60,line_end:60|char_star:23,char_end:29"[shape="point",fillcolor="#121013",style=filled];
"(app, client),type='parameters'\nline_star:60,line_end:60|char_star:17,char_end:30"->"client,type='identifier'\nline_star:60,line_end:60|char_star:23,char_end:29";
"type='INFORMATION BLOCK'\nline_star:61,line_end:77|char_star:4,char_end:5"[shape="point",fillcolor="#121013",style=filled];
"def test_escaping(app, client):\n    text = '<p>Hello World!'\n\n    @app.route('/')\n    def index():\n        return flask.render_template(\n            'escaping_template.html', text=text, html=flask.Markup(text)\n        )\n\n    lines = client.get('/').data.splitlines()\n    assert lines == [\n        b'&lt;p&gt;Hello World!',\n        b'<p>Hello World!',\n        b'<p>Hello World!',\n        b'<p>Hello World!',\n        b'&lt;p&gt;Hello World!',\n        b'<p>Hello World!',\n    ],type='function_definition'\nline_star:60,line_end:77|char_star:0,char_end:5"->"type='INFORMATION BLOCK'\nline_star:61,line_end:77|char_star:4,char_end:5";
"@app.route('/')\n    def index():\n        return flask.render_template(\n            'escaping_template.html', text=text, html=flask.Markup(text)\n        ),type='decorated_definition'\nline_star:63,line_end:67|char_star:4,char_end:9"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:61,line_end:77|char_star:4,char_end:5"->"@app.route('/')\n    def index():\n        return flask.render_template(\n            'escaping_template.html', text=text, html=flask.Markup(text)\n        ),type='decorated_definition'\nline_star:63,line_end:67|char_star:4,char_end:9";
"@app.route('/'),type='decorator'\nline_star:63,line_end:63|char_star:4,char_end:19"[shape="box",fillcolor="white",style=filled];
"@app.route('/')\n    def index():\n        return flask.render_template(\n            'escaping_template.html', text=text, html=flask.Markup(text)\n        ),type='decorated_definition'\nline_star:63,line_end:67|char_star:4,char_end:9"->"@app.route('/'),type='decorator'\nline_star:63,line_end:63|char_star:4,char_end:19";
"def index():\n        return flask.render_template(\n            'escaping_template.html', text=text, html=flask.Markup(text)\n        ),type='function_definition'\nline_star:64,line_end:67|char_star:4,char_end:9"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.route('/')\n    def index():\n        return flask.render_template(\n            'escaping_template.html', text=text, html=flask.Markup(text)\n        ),type='decorated_definition'\nline_star:63,line_end:67|char_star:4,char_end:9"->"def index():\n        return flask.render_template(\n            'escaping_template.html', text=text, html=flask.Markup(text)\n        ),type='function_definition'\nline_star:64,line_end:67|char_star:4,char_end:9";
"index,type='identifier'\nline_star:64,line_end:64|char_star:8,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"def index():\n        return flask.render_template(\n            'escaping_template.html', text=text, html=flask.Markup(text)\n        ),type='function_definition'\nline_star:64,line_end:67|char_star:4,char_end:9"->"index,type='identifier'\nline_star:64,line_end:64|char_star:8,char_end:13";
"type='INFORMATION BLOCK'\nline_star:65,line_end:67|char_star:8,char_end:9"[shape="point",fillcolor="#121013",style=filled];
"def index():\n        return flask.render_template(\n            'escaping_template.html', text=text, html=flask.Markup(text)\n        ),type='function_definition'\nline_star:64,line_end:67|char_star:4,char_end:9"->"type='INFORMATION BLOCK'\nline_star:65,line_end:67|char_star:8,char_end:9";
"return flask.render_template(\n            'escaping_template.html', text=text, html=flask.Markup(text)\n        ),type='return_statement'\nline_star:65,line_end:67|char_star:8,char_end:9"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:65,line_end:67|char_star:8,char_end:9"->"return flask.render_template(\n            'escaping_template.html', text=text, html=flask.Markup(text)\n        ),type='return_statement'\nline_star:65,line_end:67|char_star:8,char_end:9";
"assert lines == [\n        b'&lt;p&gt;Hello World!',\n        b'<p>Hello World!',\n        b'<p>Hello World!',\n        b'<p>Hello World!',\n        b'&lt;p&gt;Hello World!',\n        b'<p>Hello World!',\n    ],type='assert_statement'\nline_star:70,line_end:77|char_star:4,char_end:5"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:61,line_end:77|char_star:4,char_end:5"->"assert lines == [\n        b'&lt;p&gt;Hello World!',\n        b'<p>Hello World!',\n        b'<p>Hello World!',\n        b'<p>Hello World!',\n        b'&lt;p&gt;Hello World!',\n        b'<p>Hello World!',\n    ],type='assert_statement'\nline_star:70,line_end:77|char_star:4,char_end:5";
"lines == [\n        b'&lt;p&gt;Hello World!',\n        b'<p>Hello World!',\n        b'<p>Hello World!',\n        b'<p>Hello World!',\n        b'&lt;p&gt;Hello World!',\n        b'<p>Hello World!',\n    ],type='comparison_operator'\nline_star:70,line_end:77|char_star:11,char_end:5"[shape="box",fillcolor="white",style=filled];
"assert lines == [\n        b'&lt;p&gt;Hello World!',\n        b'<p>Hello World!',\n        b'<p>Hello World!',\n        b'<p>Hello World!',\n        b'&lt;p&gt;Hello World!',\n        b'<p>Hello World!',\n    ],type='assert_statement'\nline_star:70,line_end:77|char_star:4,char_end:5"->"lines == [\n        b'&lt;p&gt;Hello World!',\n        b'<p>Hello World!',\n        b'<p>Hello World!',\n        b'<p>Hello World!',\n        b'&lt;p&gt;Hello World!',\n        b'<p>Hello World!',\n    ],type='comparison_operator'\nline_star:70,line_end:77|char_star:11,char_end:5";
"lines,type='identifier'\nline_star:70,line_end:70|char_star:11,char_end:16"[shape="point",fillcolor="#121013",style=filled];
"lines == [\n        b'&lt;p&gt;Hello World!',\n        b'<p>Hello World!',\n        b'<p>Hello World!',\n        b'<p>Hello World!',\n        b'&lt;p&gt;Hello World!',\n        b'<p>Hello World!',\n    ],type='comparison_operator'\nline_star:70,line_end:77|char_star:11,char_end:5"->"lines,type='identifier'\nline_star:70,line_end:70|char_star:11,char_end:16";
"[\n        b'&lt;p&gt;Hello World!',\n        b'<p>Hello World!',\n        b'<p>Hello World!',\n        b'<p>Hello World!',\n        b'&lt;p&gt;Hello World!',\n        b'<p>Hello World!',\n    ],type='list'\nline_star:70,line_end:77|char_star:20,char_end:5"[shape="box",fillcolor="white",style=filled];
"lines == [\n        b'&lt;p&gt;Hello World!',\n        b'<p>Hello World!',\n        b'<p>Hello World!',\n        b'<p>Hello World!',\n        b'&lt;p&gt;Hello World!',\n        b'<p>Hello World!',\n    ],type='comparison_operator'\nline_star:70,line_end:77|char_star:11,char_end:5"->"[\n        b'&lt;p&gt;Hello World!',\n        b'<p>Hello World!',\n        b'<p>Hello World!',\n        b'<p>Hello World!',\n        b'&lt;p&gt;Hello World!',\n        b'<p>Hello World!',\n    ],type='list'\nline_star:70,line_end:77|char_star:20,char_end:5";
"def test_no_escaping(app, client):\n    text = '<p>Hello World!'\n\n    @app.route('/')\n    def index():\n        return flask.render_template(\n            'non_escaping_template.txt', text=text, html=flask.Markup(text)\n        )\n\n    lines = client.get('/').data.splitlines()\n    assert lines == [\n        b'<p>Hello World!',\n        b'<p>Hello World!',\n        b'<p>Hello World!',\n        b'<p>Hello World!',\n        b'&lt;p&gt;Hello World!',\n        b'<p>Hello World!',\n        b'<p>Hello World!',\n        b'<p>Hello World!',\n    ],type='function_definition'\nline_star:80,line_end:99|char_star:0,char_end:5"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_no_escaping(app, client):\n    text = '<p>Hello World!'\n\n    @app.route('/')\n    def index():\n        return flask.render_template(\n            'non_escaping_template.txt', text=text, html=flask.Markup(text)\n        )\n\n    lines = client.get('/').data.splitlines()\n    assert lines == [\n        b'<p>Hello World!',\n        b'<p>Hello World!',\n        b'<p>Hello World!',\n        b'<p>Hello World!',\n        b'&lt;p&gt;Hello World!',\n        b'<p>Hello World!',\n        b'<p>Hello World!',\n        b'<p>Hello World!',\n    ],type='function_definition'\nline_star:80,line_end:99|char_star:0,char_end:5";
"test_no_escaping,type='identifier'\nline_star:80,line_end:80|char_star:4,char_end:20"[shape="point",fillcolor="#121013",style=filled];
"def test_no_escaping(app, client):\n    text = '<p>Hello World!'\n\n    @app.route('/')\n    def index():\n        return flask.render_template(\n            'non_escaping_template.txt', text=text, html=flask.Markup(text)\n        )\n\n    lines = client.get('/').data.splitlines()\n    assert lines == [\n        b'<p>Hello World!',\n        b'<p>Hello World!',\n        b'<p>Hello World!',\n        b'<p>Hello World!',\n        b'&lt;p&gt;Hello World!',\n        b'<p>Hello World!',\n        b'<p>Hello World!',\n        b'<p>Hello World!',\n    ],type='function_definition'\nline_star:80,line_end:99|char_star:0,char_end:5"->"test_no_escaping,type='identifier'\nline_star:80,line_end:80|char_star:4,char_end:20";
"(app, client),type='parameters'\nline_star:80,line_end:80|char_star:20,char_end:33"[shape="box",fillcolor="white",style=filled];
"def test_no_escaping(app, client):\n    text = '<p>Hello World!'\n\n    @app.route('/')\n    def index():\n        return flask.render_template(\n            'non_escaping_template.txt', text=text, html=flask.Markup(text)\n        )\n\n    lines = client.get('/').data.splitlines()\n    assert lines == [\n        b'<p>Hello World!',\n        b'<p>Hello World!',\n        b'<p>Hello World!',\n        b'<p>Hello World!',\n        b'&lt;p&gt;Hello World!',\n        b'<p>Hello World!',\n        b'<p>Hello World!',\n        b'<p>Hello World!',\n    ],type='function_definition'\nline_star:80,line_end:99|char_star:0,char_end:5"->"(app, client),type='parameters'\nline_star:80,line_end:80|char_star:20,char_end:33";
"app,type='identifier'\nline_star:80,line_end:80|char_star:21,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"(app, client),type='parameters'\nline_star:80,line_end:80|char_star:20,char_end:33"->"app,type='identifier'\nline_star:80,line_end:80|char_star:21,char_end:24";
"client,type='identifier'\nline_star:80,line_end:80|char_star:26,char_end:32"[shape="point",fillcolor="#121013",style=filled];
"(app, client),type='parameters'\nline_star:80,line_end:80|char_star:20,char_end:33"->"client,type='identifier'\nline_star:80,line_end:80|char_star:26,char_end:32";
"type='INFORMATION BLOCK'\nline_star:81,line_end:99|char_star:4,char_end:5"[shape="point",fillcolor="#121013",style=filled];
"def test_no_escaping(app, client):\n    text = '<p>Hello World!'\n\n    @app.route('/')\n    def index():\n        return flask.render_template(\n            'non_escaping_template.txt', text=text, html=flask.Markup(text)\n        )\n\n    lines = client.get('/').data.splitlines()\n    assert lines == [\n        b'<p>Hello World!',\n        b'<p>Hello World!',\n        b'<p>Hello World!',\n        b'<p>Hello World!',\n        b'&lt;p&gt;Hello World!',\n        b'<p>Hello World!',\n        b'<p>Hello World!',\n        b'<p>Hello World!',\n    ],type='function_definition'\nline_star:80,line_end:99|char_star:0,char_end:5"->"type='INFORMATION BLOCK'\nline_star:81,line_end:99|char_star:4,char_end:5";
"@app.route('/')\n    def index():\n        return flask.render_template(\n            'non_escaping_template.txt', text=text, html=flask.Markup(text)\n        ),type='decorated_definition'\nline_star:83,line_end:87|char_star:4,char_end:9"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:81,line_end:99|char_star:4,char_end:5"->"@app.route('/')\n    def index():\n        return flask.render_template(\n            'non_escaping_template.txt', text=text, html=flask.Markup(text)\n        ),type='decorated_definition'\nline_star:83,line_end:87|char_star:4,char_end:9";
"@app.route('/'),type='decorator'\nline_star:83,line_end:83|char_star:4,char_end:19"[shape="box",fillcolor="white",style=filled];
"@app.route('/')\n    def index():\n        return flask.render_template(\n            'non_escaping_template.txt', text=text, html=flask.Markup(text)\n        ),type='decorated_definition'\nline_star:83,line_end:87|char_star:4,char_end:9"->"@app.route('/'),type='decorator'\nline_star:83,line_end:83|char_star:4,char_end:19";
"def index():\n        return flask.render_template(\n            'non_escaping_template.txt', text=text, html=flask.Markup(text)\n        ),type='function_definition'\nline_star:84,line_end:87|char_star:4,char_end:9"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.route('/')\n    def index():\n        return flask.render_template(\n            'non_escaping_template.txt', text=text, html=flask.Markup(text)\n        ),type='decorated_definition'\nline_star:83,line_end:87|char_star:4,char_end:9"->"def index():\n        return flask.render_template(\n            'non_escaping_template.txt', text=text, html=flask.Markup(text)\n        ),type='function_definition'\nline_star:84,line_end:87|char_star:4,char_end:9";
"index,type='identifier'\nline_star:84,line_end:84|char_star:8,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"def index():\n        return flask.render_template(\n            'non_escaping_template.txt', text=text, html=flask.Markup(text)\n        ),type='function_definition'\nline_star:84,line_end:87|char_star:4,char_end:9"->"index,type='identifier'\nline_star:84,line_end:84|char_star:8,char_end:13";
"type='INFORMATION BLOCK'\nline_star:85,line_end:87|char_star:8,char_end:9"[shape="point",fillcolor="#121013",style=filled];
"def index():\n        return flask.render_template(\n            'non_escaping_template.txt', text=text, html=flask.Markup(text)\n        ),type='function_definition'\nline_star:84,line_end:87|char_star:4,char_end:9"->"type='INFORMATION BLOCK'\nline_star:85,line_end:87|char_star:8,char_end:9";
"return flask.render_template(\n            'non_escaping_template.txt', text=text, html=flask.Markup(text)\n        ),type='return_statement'\nline_star:85,line_end:87|char_star:8,char_end:9"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:85,line_end:87|char_star:8,char_end:9"->"return flask.render_template(\n            'non_escaping_template.txt', text=text, html=flask.Markup(text)\n        ),type='return_statement'\nline_star:85,line_end:87|char_star:8,char_end:9";
"assert lines == [\n        b'<p>Hello World!',\n        b'<p>Hello World!',\n        b'<p>Hello World!',\n        b'<p>Hello World!',\n        b'&lt;p&gt;Hello World!',\n        b'<p>Hello World!',\n        b'<p>Hello World!',\n        b'<p>Hello World!',\n    ],type='assert_statement'\nline_star:90,line_end:99|char_star:4,char_end:5"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:81,line_end:99|char_star:4,char_end:5"->"assert lines == [\n        b'<p>Hello World!',\n        b'<p>Hello World!',\n        b'<p>Hello World!',\n        b'<p>Hello World!',\n        b'&lt;p&gt;Hello World!',\n        b'<p>Hello World!',\n        b'<p>Hello World!',\n        b'<p>Hello World!',\n    ],type='assert_statement'\nline_star:90,line_end:99|char_star:4,char_end:5";
"lines == [\n        b'<p>Hello World!',\n        b'<p>Hello World!',\n        b'<p>Hello World!',\n        b'<p>Hello World!',\n        b'&lt;p&gt;Hello World!',\n        b'<p>Hello World!',\n        b'<p>Hello World!',\n        b'<p>Hello World!',\n    ],type='comparison_operator'\nline_star:90,line_end:99|char_star:11,char_end:5"[shape="box",fillcolor="white",style=filled];
"assert lines == [\n        b'<p>Hello World!',\n        b'<p>Hello World!',\n        b'<p>Hello World!',\n        b'<p>Hello World!',\n        b'&lt;p&gt;Hello World!',\n        b'<p>Hello World!',\n        b'<p>Hello World!',\n        b'<p>Hello World!',\n    ],type='assert_statement'\nline_star:90,line_end:99|char_star:4,char_end:5"->"lines == [\n        b'<p>Hello World!',\n        b'<p>Hello World!',\n        b'<p>Hello World!',\n        b'<p>Hello World!',\n        b'&lt;p&gt;Hello World!',\n        b'<p>Hello World!',\n        b'<p>Hello World!',\n        b'<p>Hello World!',\n    ],type='comparison_operator'\nline_star:90,line_end:99|char_star:11,char_end:5";
"lines,type='identifier'\nline_star:90,line_end:90|char_star:11,char_end:16"[shape="point",fillcolor="#121013",style=filled];
"lines == [\n        b'<p>Hello World!',\n        b'<p>Hello World!',\n        b'<p>Hello World!',\n        b'<p>Hello World!',\n        b'&lt;p&gt;Hello World!',\n        b'<p>Hello World!',\n        b'<p>Hello World!',\n        b'<p>Hello World!',\n    ],type='comparison_operator'\nline_star:90,line_end:99|char_star:11,char_end:5"->"lines,type='identifier'\nline_star:90,line_end:90|char_star:11,char_end:16";
"[\n        b'<p>Hello World!',\n        b'<p>Hello World!',\n        b'<p>Hello World!',\n        b'<p>Hello World!',\n        b'&lt;p&gt;Hello World!',\n        b'<p>Hello World!',\n        b'<p>Hello World!',\n        b'<p>Hello World!',\n    ],type='list'\nline_star:90,line_end:99|char_star:20,char_end:5"[shape="box",fillcolor="white",style=filled];
"lines == [\n        b'<p>Hello World!',\n        b'<p>Hello World!',\n        b'<p>Hello World!',\n        b'<p>Hello World!',\n        b'&lt;p&gt;Hello World!',\n        b'<p>Hello World!',\n        b'<p>Hello World!',\n        b'<p>Hello World!',\n    ],type='comparison_operator'\nline_star:90,line_end:99|char_star:11,char_end:5"->"[\n        b'<p>Hello World!',\n        b'<p>Hello World!',\n        b'<p>Hello World!',\n        b'<p>Hello World!',\n        b'&lt;p&gt;Hello World!',\n        b'<p>Hello World!',\n        b'<p>Hello World!',\n        b'<p>Hello World!',\n    ],type='list'\nline_star:90,line_end:99|char_star:20,char_end:5";
"def test_escaping_without_template_filename(app, client, req_ctx):\n    assert flask.render_template_string('{{ foo }}', foo='<test>') == '&lt;test&gt;'\n    assert flask.render_template('mail.txt', foo='<test>') == '<test> Mail',type='function_definition'\nline_star:102,line_end:104|char_star:0,char_end:75"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_escaping_without_template_filename(app, client, req_ctx):\n    assert flask.render_template_string('{{ foo }}', foo='<test>') == '&lt;test&gt;'\n    assert flask.render_template('mail.txt', foo='<test>') == '<test> Mail',type='function_definition'\nline_star:102,line_end:104|char_star:0,char_end:75";
"test_escaping_without_template_filename,type='identifier'\nline_star:102,line_end:102|char_star:4,char_end:43"[shape="point",fillcolor="#121013",style=filled];
"def test_escaping_without_template_filename(app, client, req_ctx):\n    assert flask.render_template_string('{{ foo }}', foo='<test>') == '&lt;test&gt;'\n    assert flask.render_template('mail.txt', foo='<test>') == '<test> Mail',type='function_definition'\nline_star:102,line_end:104|char_star:0,char_end:75"->"test_escaping_without_template_filename,type='identifier'\nline_star:102,line_end:102|char_star:4,char_end:43";
"(app, client, req_ctx),type='parameters'\nline_star:102,line_end:102|char_star:43,char_end:65"[shape="box",fillcolor="white",style=filled];
"def test_escaping_without_template_filename(app, client, req_ctx):\n    assert flask.render_template_string('{{ foo }}', foo='<test>') == '&lt;test&gt;'\n    assert flask.render_template('mail.txt', foo='<test>') == '<test> Mail',type='function_definition'\nline_star:102,line_end:104|char_star:0,char_end:75"->"(app, client, req_ctx),type='parameters'\nline_star:102,line_end:102|char_star:43,char_end:65";
"app,type='identifier'\nline_star:102,line_end:102|char_star:44,char_end:47"[shape="point",fillcolor="#121013",style=filled];
"(app, client, req_ctx),type='parameters'\nline_star:102,line_end:102|char_star:43,char_end:65"->"app,type='identifier'\nline_star:102,line_end:102|char_star:44,char_end:47";
"client,type='identifier'\nline_star:102,line_end:102|char_star:49,char_end:55"[shape="point",fillcolor="#121013",style=filled];
"(app, client, req_ctx),type='parameters'\nline_star:102,line_end:102|char_star:43,char_end:65"->"client,type='identifier'\nline_star:102,line_end:102|char_star:49,char_end:55";
"req_ctx,type='identifier'\nline_star:102,line_end:102|char_star:57,char_end:64"[shape="point",fillcolor="#121013",style=filled];
"(app, client, req_ctx),type='parameters'\nline_star:102,line_end:102|char_star:43,char_end:65"->"req_ctx,type='identifier'\nline_star:102,line_end:102|char_star:57,char_end:64";
"type='INFORMATION BLOCK'\nline_star:103,line_end:104|char_star:4,char_end:75"[shape="point",fillcolor="#121013",style=filled];
"def test_escaping_without_template_filename(app, client, req_ctx):\n    assert flask.render_template_string('{{ foo }}', foo='<test>') == '&lt;test&gt;'\n    assert flask.render_template('mail.txt', foo='<test>') == '<test> Mail',type='function_definition'\nline_star:102,line_end:104|char_star:0,char_end:75"->"type='INFORMATION BLOCK'\nline_star:103,line_end:104|char_star:4,char_end:75";
"assert flask.render_template_string('{{ foo }}', foo='<test>') == '&lt;test&gt;',type='assert_statement'\nline_star:103,line_end:103|char_star:4,char_end:84"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:103,line_end:104|char_star:4,char_end:75"->"assert flask.render_template_string('{{ foo }}', foo='<test>') == '&lt;test&gt;',type='assert_statement'\nline_star:103,line_end:103|char_star:4,char_end:84";
"flask.render_template_string('{{ foo }}', foo='<test>') == '&lt;test&gt;',type='comparison_operator'\nline_star:103,line_end:103|char_star:11,char_end:84"[shape="box",fillcolor="white",style=filled];
"assert flask.render_template_string('{{ foo }}', foo='<test>') == '&lt;test&gt;',type='assert_statement'\nline_star:103,line_end:103|char_star:4,char_end:84"->"flask.render_template_string('{{ foo }}', foo='<test>') == '&lt;test&gt;',type='comparison_operator'\nline_star:103,line_end:103|char_star:11,char_end:84";
"flask.render_template_string('{{ foo }}', foo='<test>'),type='call'\nline_star:103,line_end:103|char_star:11,char_end:66"[shape="box",fillcolor="white",style=filled];
"flask.render_template_string('{{ foo }}', foo='<test>') == '&lt;test&gt;',type='comparison_operator'\nline_star:103,line_end:103|char_star:11,char_end:84"->"flask.render_template_string('{{ foo }}', foo='<test>'),type='call'\nline_star:103,line_end:103|char_star:11,char_end:66";
"flask.render_template_string,type='attribute'\nline_star:103,line_end:103|char_star:11,char_end:39"[shape="box",fillcolor="white",style=filled];
"flask.render_template_string('{{ foo }}', foo='<test>'),type='call'\nline_star:103,line_end:103|char_star:11,char_end:66"->"flask.render_template_string,type='attribute'\nline_star:103,line_end:103|char_star:11,char_end:39";
"flask,type='identifier'\nline_star:103,line_end:103|char_star:11,char_end:16"[shape="point",fillcolor="#121013",style=filled];
"flask.render_template_string,type='attribute'\nline_star:103,line_end:103|char_star:11,char_end:39"->"flask,type='identifier'\nline_star:103,line_end:103|char_star:11,char_end:16";
"render_template_string,type='identifier'\nline_star:103,line_end:103|char_star:17,char_end:39"[shape="point",fillcolor="#121013",style=filled];
"flask.render_template_string,type='attribute'\nline_star:103,line_end:103|char_star:11,char_end:39"->"render_template_string,type='identifier'\nline_star:103,line_end:103|char_star:17,char_end:39";
"('{{ foo }}', foo='<test>'),type='argument_list'\nline_star:103,line_end:103|char_star:39,char_end:66"[shape="box",fillcolor="white",style=filled];
"flask.render_template_string('{{ foo }}', foo='<test>'),type='call'\nline_star:103,line_end:103|char_star:11,char_end:66"->"('{{ foo }}', foo='<test>'),type='argument_list'\nline_star:103,line_end:103|char_star:39,char_end:66";
"foo='<test>',type='keyword_argument'\nline_star:103,line_end:103|char_star:53,char_end:65"[shape="box",fillcolor="white",style=filled];
"('{{ foo }}', foo='<test>'),type='argument_list'\nline_star:103,line_end:103|char_star:39,char_end:66"->"foo='<test>',type='keyword_argument'\nline_star:103,line_end:103|char_star:53,char_end:65";
"foo,type='identifier'\nline_star:103,line_end:103|char_star:53,char_end:56"[shape="point",fillcolor="#121013",style=filled];
"foo='<test>',type='keyword_argument'\nline_star:103,line_end:103|char_star:53,char_end:65"->"foo,type='identifier'\nline_star:103,line_end:103|char_star:53,char_end:56";
"assert flask.render_template('mail.txt', foo='<test>') == '<test> Mail',type='assert_statement'\nline_star:104,line_end:104|char_star:4,char_end:75"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:103,line_end:104|char_star:4,char_end:75"->"assert flask.render_template('mail.txt', foo='<test>') == '<test> Mail',type='assert_statement'\nline_star:104,line_end:104|char_star:4,char_end:75";
"flask.render_template('mail.txt', foo='<test>') == '<test> Mail',type='comparison_operator'\nline_star:104,line_end:104|char_star:11,char_end:75"[shape="box",fillcolor="white",style=filled];
"assert flask.render_template('mail.txt', foo='<test>') == '<test> Mail',type='assert_statement'\nline_star:104,line_end:104|char_star:4,char_end:75"->"flask.render_template('mail.txt', foo='<test>') == '<test> Mail',type='comparison_operator'\nline_star:104,line_end:104|char_star:11,char_end:75";
"flask.render_template('mail.txt', foo='<test>'),type='call'\nline_star:104,line_end:104|char_star:11,char_end:58"[shape="box",fillcolor="white",style=filled];
"flask.render_template('mail.txt', foo='<test>') == '<test> Mail',type='comparison_operator'\nline_star:104,line_end:104|char_star:11,char_end:75"->"flask.render_template('mail.txt', foo='<test>'),type='call'\nline_star:104,line_end:104|char_star:11,char_end:58";
"flask.render_template,type='attribute'\nline_star:104,line_end:104|char_star:11,char_end:32"[shape="box",fillcolor="white",style=filled];
"flask.render_template('mail.txt', foo='<test>'),type='call'\nline_star:104,line_end:104|char_star:11,char_end:58"->"flask.render_template,type='attribute'\nline_star:104,line_end:104|char_star:11,char_end:32";
"flask,type='identifier'\nline_star:104,line_end:104|char_star:11,char_end:16"[shape="point",fillcolor="#121013",style=filled];
"flask.render_template,type='attribute'\nline_star:104,line_end:104|char_star:11,char_end:32"->"flask,type='identifier'\nline_star:104,line_end:104|char_star:11,char_end:16";
"render_template,type='identifier'\nline_star:104,line_end:104|char_star:17,char_end:32"[shape="point",fillcolor="#121013",style=filled];
"flask.render_template,type='attribute'\nline_star:104,line_end:104|char_star:11,char_end:32"->"render_template,type='identifier'\nline_star:104,line_end:104|char_star:17,char_end:32";
"('mail.txt', foo='<test>'),type='argument_list'\nline_star:104,line_end:104|char_star:32,char_end:58"[shape="box",fillcolor="white",style=filled];
"flask.render_template('mail.txt', foo='<test>'),type='call'\nline_star:104,line_end:104|char_star:11,char_end:58"->"('mail.txt', foo='<test>'),type='argument_list'\nline_star:104,line_end:104|char_star:32,char_end:58";
"foo='<test>',type='keyword_argument'\nline_star:104,line_end:104|char_star:45,char_end:57"[shape="box",fillcolor="white",style=filled];
"('mail.txt', foo='<test>'),type='argument_list'\nline_star:104,line_end:104|char_star:32,char_end:58"->"foo='<test>',type='keyword_argument'\nline_star:104,line_end:104|char_star:45,char_end:57";
"foo,type='identifier'\nline_star:104,line_end:104|char_star:45,char_end:48"[shape="point",fillcolor="#121013",style=filled];
"foo='<test>',type='keyword_argument'\nline_star:104,line_end:104|char_star:45,char_end:57"->"foo,type='identifier'\nline_star:104,line_end:104|char_star:45,char_end:48";
"def test_macros(app, req_ctx):\n    macro = flask.get_template_attribute('_macro.html', 'hello')\n    assert macro('World') == 'Hello World!',type='function_definition'\nline_star:107,line_end:109|char_star:0,char_end:43"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_macros(app, req_ctx):\n    macro = flask.get_template_attribute('_macro.html', 'hello')\n    assert macro('World') == 'Hello World!',type='function_definition'\nline_star:107,line_end:109|char_star:0,char_end:43";
"test_macros,type='identifier'\nline_star:107,line_end:107|char_star:4,char_end:15"[shape="point",fillcolor="#121013",style=filled];
"def test_macros(app, req_ctx):\n    macro = flask.get_template_attribute('_macro.html', 'hello')\n    assert macro('World') == 'Hello World!',type='function_definition'\nline_star:107,line_end:109|char_star:0,char_end:43"->"test_macros,type='identifier'\nline_star:107,line_end:107|char_star:4,char_end:15";
"(app, req_ctx),type='parameters'\nline_star:107,line_end:107|char_star:15,char_end:29"[shape="box",fillcolor="white",style=filled];
"def test_macros(app, req_ctx):\n    macro = flask.get_template_attribute('_macro.html', 'hello')\n    assert macro('World') == 'Hello World!',type='function_definition'\nline_star:107,line_end:109|char_star:0,char_end:43"->"(app, req_ctx),type='parameters'\nline_star:107,line_end:107|char_star:15,char_end:29";
"app,type='identifier'\nline_star:107,line_end:107|char_star:16,char_end:19"[shape="point",fillcolor="#121013",style=filled];
"(app, req_ctx),type='parameters'\nline_star:107,line_end:107|char_star:15,char_end:29"->"app,type='identifier'\nline_star:107,line_end:107|char_star:16,char_end:19";
"req_ctx,type='identifier'\nline_star:107,line_end:107|char_star:21,char_end:28"[shape="point",fillcolor="#121013",style=filled];
"(app, req_ctx),type='parameters'\nline_star:107,line_end:107|char_star:15,char_end:29"->"req_ctx,type='identifier'\nline_star:107,line_end:107|char_star:21,char_end:28";
"type='INFORMATION BLOCK'\nline_star:108,line_end:109|char_star:4,char_end:43"[shape="point",fillcolor="#121013",style=filled];
"def test_macros(app, req_ctx):\n    macro = flask.get_template_attribute('_macro.html', 'hello')\n    assert macro('World') == 'Hello World!',type='function_definition'\nline_star:107,line_end:109|char_star:0,char_end:43"->"type='INFORMATION BLOCK'\nline_star:108,line_end:109|char_star:4,char_end:43";
"assert macro('World') == 'Hello World!',type='assert_statement'\nline_star:109,line_end:109|char_star:4,char_end:43"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:108,line_end:109|char_star:4,char_end:43"->"assert macro('World') == 'Hello World!',type='assert_statement'\nline_star:109,line_end:109|char_star:4,char_end:43";
"macro('World') == 'Hello World!',type='comparison_operator'\nline_star:109,line_end:109|char_star:11,char_end:43"[shape="box",fillcolor="white",style=filled];
"assert macro('World') == 'Hello World!',type='assert_statement'\nline_star:109,line_end:109|char_star:4,char_end:43"->"macro('World') == 'Hello World!',type='comparison_operator'\nline_star:109,line_end:109|char_star:11,char_end:43";
"macro('World'),type='call'\nline_star:109,line_end:109|char_star:11,char_end:25"[shape="box",fillcolor="white",style=filled];
"macro('World') == 'Hello World!',type='comparison_operator'\nline_star:109,line_end:109|char_star:11,char_end:43"->"macro('World'),type='call'\nline_star:109,line_end:109|char_star:11,char_end:25";
"macro,type='identifier'\nline_star:109,line_end:109|char_star:11,char_end:16"[shape="point",fillcolor="#121013",style=filled];
"macro('World'),type='call'\nline_star:109,line_end:109|char_star:11,char_end:25"->"macro,type='identifier'\nline_star:109,line_end:109|char_star:11,char_end:16";
"('World'),type='argument_list'\nline_star:109,line_end:109|char_star:16,char_end:25"[shape="box",fillcolor="white",style=filled];
"macro('World'),type='call'\nline_star:109,line_end:109|char_star:11,char_end:25"->"('World'),type='argument_list'\nline_star:109,line_end:109|char_star:16,char_end:25";
"def test_template_filter(app):\n    @app.template_filter()\n    def my_reverse(s):\n        return s[::-1]\n\n    assert 'my_reverse' in app.jinja_env.filters.keys()\n    assert app.jinja_env.filters['my_reverse'] == my_reverse\n    assert app.jinja_env.filters['my_reverse']('abcd') == 'dcba',type='function_definition'\nline_star:112,line_end:119|char_star:0,char_end:64"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_template_filter(app):\n    @app.template_filter()\n    def my_reverse(s):\n        return s[::-1]\n\n    assert 'my_reverse' in app.jinja_env.filters.keys()\n    assert app.jinja_env.filters['my_reverse'] == my_reverse\n    assert app.jinja_env.filters['my_reverse']('abcd') == 'dcba',type='function_definition'\nline_star:112,line_end:119|char_star:0,char_end:64";
"test_template_filter,type='identifier'\nline_star:112,line_end:112|char_star:4,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"def test_template_filter(app):\n    @app.template_filter()\n    def my_reverse(s):\n        return s[::-1]\n\n    assert 'my_reverse' in app.jinja_env.filters.keys()\n    assert app.jinja_env.filters['my_reverse'] == my_reverse\n    assert app.jinja_env.filters['my_reverse']('abcd') == 'dcba',type='function_definition'\nline_star:112,line_end:119|char_star:0,char_end:64"->"test_template_filter,type='identifier'\nline_star:112,line_end:112|char_star:4,char_end:24";
"(app),type='parameters'\nline_star:112,line_end:112|char_star:24,char_end:29"[shape="box",fillcolor="white",style=filled];
"def test_template_filter(app):\n    @app.template_filter()\n    def my_reverse(s):\n        return s[::-1]\n\n    assert 'my_reverse' in app.jinja_env.filters.keys()\n    assert app.jinja_env.filters['my_reverse'] == my_reverse\n    assert app.jinja_env.filters['my_reverse']('abcd') == 'dcba',type='function_definition'\nline_star:112,line_end:119|char_star:0,char_end:64"->"(app),type='parameters'\nline_star:112,line_end:112|char_star:24,char_end:29";
"app,type='identifier'\nline_star:112,line_end:112|char_star:25,char_end:28"[shape="point",fillcolor="#121013",style=filled];
"(app),type='parameters'\nline_star:112,line_end:112|char_star:24,char_end:29"->"app,type='identifier'\nline_star:112,line_end:112|char_star:25,char_end:28";
"type='INFORMATION BLOCK'\nline_star:113,line_end:119|char_star:4,char_end:64"[shape="point",fillcolor="#121013",style=filled];
"def test_template_filter(app):\n    @app.template_filter()\n    def my_reverse(s):\n        return s[::-1]\n\n    assert 'my_reverse' in app.jinja_env.filters.keys()\n    assert app.jinja_env.filters['my_reverse'] == my_reverse\n    assert app.jinja_env.filters['my_reverse']('abcd') == 'dcba',type='function_definition'\nline_star:112,line_end:119|char_star:0,char_end:64"->"type='INFORMATION BLOCK'\nline_star:113,line_end:119|char_star:4,char_end:64";
"@app.template_filter()\n    def my_reverse(s):\n        return s[::-1],type='decorated_definition'\nline_star:113,line_end:115|char_star:4,char_end:22"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:113,line_end:119|char_star:4,char_end:64"->"@app.template_filter()\n    def my_reverse(s):\n        return s[::-1],type='decorated_definition'\nline_star:113,line_end:115|char_star:4,char_end:22";
"@app.template_filter(),type='decorator'\nline_star:113,line_end:113|char_star:4,char_end:26"[shape="box",fillcolor="white",style=filled];
"@app.template_filter()\n    def my_reverse(s):\n        return s[::-1],type='decorated_definition'\nline_star:113,line_end:115|char_star:4,char_end:22"->"@app.template_filter(),type='decorator'\nline_star:113,line_end:113|char_star:4,char_end:26";
"def my_reverse(s):\n        return s[::-1],type='function_definition'\nline_star:114,line_end:115|char_star:4,char_end:22"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.template_filter()\n    def my_reverse(s):\n        return s[::-1],type='decorated_definition'\nline_star:113,line_end:115|char_star:4,char_end:22"->"def my_reverse(s):\n        return s[::-1],type='function_definition'\nline_star:114,line_end:115|char_star:4,char_end:22";
"my_reverse,type='identifier'\nline_star:114,line_end:114|char_star:8,char_end:18"[shape="point",fillcolor="#121013",style=filled];
"def my_reverse(s):\n        return s[::-1],type='function_definition'\nline_star:114,line_end:115|char_star:4,char_end:22"->"my_reverse,type='identifier'\nline_star:114,line_end:114|char_star:8,char_end:18";
"(s),type='parameters'\nline_star:114,line_end:114|char_star:18,char_end:21"[shape="box",fillcolor="white",style=filled];
"def my_reverse(s):\n        return s[::-1],type='function_definition'\nline_star:114,line_end:115|char_star:4,char_end:22"->"(s),type='parameters'\nline_star:114,line_end:114|char_star:18,char_end:21";
"s,type='identifier'\nline_star:114,line_end:114|char_star:19,char_end:20"[shape="point",fillcolor="#121013",style=filled];
"(s),type='parameters'\nline_star:114,line_end:114|char_star:18,char_end:21"->"s,type='identifier'\nline_star:114,line_end:114|char_star:19,char_end:20";
"type='INFORMATION BLOCK'\nline_star:115,line_end:115|char_star:8,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"def my_reverse(s):\n        return s[::-1],type='function_definition'\nline_star:114,line_end:115|char_star:4,char_end:22"->"type='INFORMATION BLOCK'\nline_star:115,line_end:115|char_star:8,char_end:22";
"return s[::-1],type='return_statement'\nline_star:115,line_end:115|char_star:8,char_end:22"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:115,line_end:115|char_star:8,char_end:22"->"return s[::-1],type='return_statement'\nline_star:115,line_end:115|char_star:8,char_end:22";
"assert 'my_reverse' in app.jinja_env.filters.keys(),type='assert_statement'\nline_star:117,line_end:117|char_star:4,char_end:55"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:113,line_end:119|char_star:4,char_end:64"->"assert 'my_reverse' in app.jinja_env.filters.keys(),type='assert_statement'\nline_star:117,line_end:117|char_star:4,char_end:55";
"'my_reverse' in app.jinja_env.filters.keys(),type='comparison_operator'\nline_star:117,line_end:117|char_star:11,char_end:55"[shape="box",fillcolor="white",style=filled];
"assert 'my_reverse' in app.jinja_env.filters.keys(),type='assert_statement'\nline_star:117,line_end:117|char_star:4,char_end:55"->"'my_reverse' in app.jinja_env.filters.keys(),type='comparison_operator'\nline_star:117,line_end:117|char_star:11,char_end:55";
"app.jinja_env.filters.keys(),type='call'\nline_star:117,line_end:117|char_star:27,char_end:55"[shape="box",fillcolor="white",style=filled];
"'my_reverse' in app.jinja_env.filters.keys(),type='comparison_operator'\nline_star:117,line_end:117|char_star:11,char_end:55"->"app.jinja_env.filters.keys(),type='call'\nline_star:117,line_end:117|char_star:27,char_end:55";
"app.jinja_env.filters.keys,type='attribute'\nline_star:117,line_end:117|char_star:27,char_end:53"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.filters.keys(),type='call'\nline_star:117,line_end:117|char_star:27,char_end:55"->"app.jinja_env.filters.keys,type='attribute'\nline_star:117,line_end:117|char_star:27,char_end:53";
"app.jinja_env.filters,type='attribute'\nline_star:117,line_end:117|char_star:27,char_end:48"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.filters.keys,type='attribute'\nline_star:117,line_end:117|char_star:27,char_end:53"->"app.jinja_env.filters,type='attribute'\nline_star:117,line_end:117|char_star:27,char_end:48";
"app.jinja_env,type='attribute'\nline_star:117,line_end:117|char_star:27,char_end:40"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.filters,type='attribute'\nline_star:117,line_end:117|char_star:27,char_end:48"->"app.jinja_env,type='attribute'\nline_star:117,line_end:117|char_star:27,char_end:40";
"app,type='identifier'\nline_star:117,line_end:117|char_star:27,char_end:30"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env,type='attribute'\nline_star:117,line_end:117|char_star:27,char_end:40"->"app,type='identifier'\nline_star:117,line_end:117|char_star:27,char_end:30";
"jinja_env,type='identifier'\nline_star:117,line_end:117|char_star:31,char_end:40"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env,type='attribute'\nline_star:117,line_end:117|char_star:27,char_end:40"->"jinja_env,type='identifier'\nline_star:117,line_end:117|char_star:31,char_end:40";
"filters,type='identifier'\nline_star:117,line_end:117|char_star:41,char_end:48"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env.filters,type='attribute'\nline_star:117,line_end:117|char_star:27,char_end:48"->"filters,type='identifier'\nline_star:117,line_end:117|char_star:41,char_end:48";
"keys,type='identifier'\nline_star:117,line_end:117|char_star:49,char_end:53"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env.filters.keys,type='attribute'\nline_star:117,line_end:117|char_star:27,char_end:53"->"keys,type='identifier'\nline_star:117,line_end:117|char_star:49,char_end:53";
"assert app.jinja_env.filters['my_reverse'] == my_reverse,type='assert_statement'\nline_star:118,line_end:118|char_star:4,char_end:60"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:113,line_end:119|char_star:4,char_end:64"->"assert app.jinja_env.filters['my_reverse'] == my_reverse,type='assert_statement'\nline_star:118,line_end:118|char_star:4,char_end:60";
"app.jinja_env.filters['my_reverse'] == my_reverse,type='comparison_operator'\nline_star:118,line_end:118|char_star:11,char_end:60"[shape="box",fillcolor="white",style=filled];
"assert app.jinja_env.filters['my_reverse'] == my_reverse,type='assert_statement'\nline_star:118,line_end:118|char_star:4,char_end:60"->"app.jinja_env.filters['my_reverse'] == my_reverse,type='comparison_operator'\nline_star:118,line_end:118|char_star:11,char_end:60";
"app.jinja_env.filters['my_reverse'],type='subscript'\nline_star:118,line_end:118|char_star:11,char_end:46"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.filters['my_reverse'] == my_reverse,type='comparison_operator'\nline_star:118,line_end:118|char_star:11,char_end:60"->"app.jinja_env.filters['my_reverse'],type='subscript'\nline_star:118,line_end:118|char_star:11,char_end:46";
"app.jinja_env.filters,type='attribute'\nline_star:118,line_end:118|char_star:11,char_end:32"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.filters['my_reverse'],type='subscript'\nline_star:118,line_end:118|char_star:11,char_end:46"->"app.jinja_env.filters,type='attribute'\nline_star:118,line_end:118|char_star:11,char_end:32";
"app.jinja_env,type='attribute'\nline_star:118,line_end:118|char_star:11,char_end:24"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.filters,type='attribute'\nline_star:118,line_end:118|char_star:11,char_end:32"->"app.jinja_env,type='attribute'\nline_star:118,line_end:118|char_star:11,char_end:24";
"app,type='identifier'\nline_star:118,line_end:118|char_star:11,char_end:14"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env,type='attribute'\nline_star:118,line_end:118|char_star:11,char_end:24"->"app,type='identifier'\nline_star:118,line_end:118|char_star:11,char_end:14";
"jinja_env,type='identifier'\nline_star:118,line_end:118|char_star:15,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env,type='attribute'\nline_star:118,line_end:118|char_star:11,char_end:24"->"jinja_env,type='identifier'\nline_star:118,line_end:118|char_star:15,char_end:24";
"filters,type='identifier'\nline_star:118,line_end:118|char_star:25,char_end:32"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env.filters,type='attribute'\nline_star:118,line_end:118|char_star:11,char_end:32"->"filters,type='identifier'\nline_star:118,line_end:118|char_star:25,char_end:32";
"my_reverse,type='identifier'\nline_star:118,line_end:118|char_star:50,char_end:60"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env.filters['my_reverse'] == my_reverse,type='comparison_operator'\nline_star:118,line_end:118|char_star:11,char_end:60"->"my_reverse,type='identifier'\nline_star:118,line_end:118|char_star:50,char_end:60";
"assert app.jinja_env.filters['my_reverse']('abcd') == 'dcba',type='assert_statement'\nline_star:119,line_end:119|char_star:4,char_end:64"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:113,line_end:119|char_star:4,char_end:64"->"assert app.jinja_env.filters['my_reverse']('abcd') == 'dcba',type='assert_statement'\nline_star:119,line_end:119|char_star:4,char_end:64";
"app.jinja_env.filters['my_reverse']('abcd') == 'dcba',type='comparison_operator'\nline_star:119,line_end:119|char_star:11,char_end:64"[shape="box",fillcolor="white",style=filled];
"assert app.jinja_env.filters['my_reverse']('abcd') == 'dcba',type='assert_statement'\nline_star:119,line_end:119|char_star:4,char_end:64"->"app.jinja_env.filters['my_reverse']('abcd') == 'dcba',type='comparison_operator'\nline_star:119,line_end:119|char_star:11,char_end:64";
"app.jinja_env.filters['my_reverse']('abcd'),type='call'\nline_star:119,line_end:119|char_star:11,char_end:54"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.filters['my_reverse']('abcd') == 'dcba',type='comparison_operator'\nline_star:119,line_end:119|char_star:11,char_end:64"->"app.jinja_env.filters['my_reverse']('abcd'),type='call'\nline_star:119,line_end:119|char_star:11,char_end:54";
"app.jinja_env.filters['my_reverse'],type='subscript'\nline_star:119,line_end:119|char_star:11,char_end:46"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.filters['my_reverse']('abcd'),type='call'\nline_star:119,line_end:119|char_star:11,char_end:54"->"app.jinja_env.filters['my_reverse'],type='subscript'\nline_star:119,line_end:119|char_star:11,char_end:46";
"app.jinja_env.filters,type='attribute'\nline_star:119,line_end:119|char_star:11,char_end:32"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.filters['my_reverse'],type='subscript'\nline_star:119,line_end:119|char_star:11,char_end:46"->"app.jinja_env.filters,type='attribute'\nline_star:119,line_end:119|char_star:11,char_end:32";
"app.jinja_env,type='attribute'\nline_star:119,line_end:119|char_star:11,char_end:24"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.filters,type='attribute'\nline_star:119,line_end:119|char_star:11,char_end:32"->"app.jinja_env,type='attribute'\nline_star:119,line_end:119|char_star:11,char_end:24";
"app,type='identifier'\nline_star:119,line_end:119|char_star:11,char_end:14"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env,type='attribute'\nline_star:119,line_end:119|char_star:11,char_end:24"->"app,type='identifier'\nline_star:119,line_end:119|char_star:11,char_end:14";
"jinja_env,type='identifier'\nline_star:119,line_end:119|char_star:15,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env,type='attribute'\nline_star:119,line_end:119|char_star:11,char_end:24"->"jinja_env,type='identifier'\nline_star:119,line_end:119|char_star:15,char_end:24";
"filters,type='identifier'\nline_star:119,line_end:119|char_star:25,char_end:32"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env.filters,type='attribute'\nline_star:119,line_end:119|char_star:11,char_end:32"->"filters,type='identifier'\nline_star:119,line_end:119|char_star:25,char_end:32";
"('abcd'),type='argument_list'\nline_star:119,line_end:119|char_star:46,char_end:54"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.filters['my_reverse']('abcd'),type='call'\nline_star:119,line_end:119|char_star:11,char_end:54"->"('abcd'),type='argument_list'\nline_star:119,line_end:119|char_star:46,char_end:54";
"def test_add_template_filter(app):\n    def my_reverse(s):\n        return s[::-1]\n\n    app.add_template_filter(my_reverse)\n    assert 'my_reverse' in app.jinja_env.filters.keys()\n    assert app.jinja_env.filters['my_reverse'] == my_reverse\n    assert app.jinja_env.filters['my_reverse']('abcd') == 'dcba',type='function_definition'\nline_star:122,line_end:129|char_star:0,char_end:64"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_add_template_filter(app):\n    def my_reverse(s):\n        return s[::-1]\n\n    app.add_template_filter(my_reverse)\n    assert 'my_reverse' in app.jinja_env.filters.keys()\n    assert app.jinja_env.filters['my_reverse'] == my_reverse\n    assert app.jinja_env.filters['my_reverse']('abcd') == 'dcba',type='function_definition'\nline_star:122,line_end:129|char_star:0,char_end:64";
"test_add_template_filter,type='identifier'\nline_star:122,line_end:122|char_star:4,char_end:28"[shape="point",fillcolor="#121013",style=filled];
"def test_add_template_filter(app):\n    def my_reverse(s):\n        return s[::-1]\n\n    app.add_template_filter(my_reverse)\n    assert 'my_reverse' in app.jinja_env.filters.keys()\n    assert app.jinja_env.filters['my_reverse'] == my_reverse\n    assert app.jinja_env.filters['my_reverse']('abcd') == 'dcba',type='function_definition'\nline_star:122,line_end:129|char_star:0,char_end:64"->"test_add_template_filter,type='identifier'\nline_star:122,line_end:122|char_star:4,char_end:28";
"(app),type='parameters'\nline_star:122,line_end:122|char_star:28,char_end:33"[shape="box",fillcolor="white",style=filled];
"def test_add_template_filter(app):\n    def my_reverse(s):\n        return s[::-1]\n\n    app.add_template_filter(my_reverse)\n    assert 'my_reverse' in app.jinja_env.filters.keys()\n    assert app.jinja_env.filters['my_reverse'] == my_reverse\n    assert app.jinja_env.filters['my_reverse']('abcd') == 'dcba',type='function_definition'\nline_star:122,line_end:129|char_star:0,char_end:64"->"(app),type='parameters'\nline_star:122,line_end:122|char_star:28,char_end:33";
"app,type='identifier'\nline_star:122,line_end:122|char_star:29,char_end:32"[shape="point",fillcolor="#121013",style=filled];
"(app),type='parameters'\nline_star:122,line_end:122|char_star:28,char_end:33"->"app,type='identifier'\nline_star:122,line_end:122|char_star:29,char_end:32";
"type='INFORMATION BLOCK'\nline_star:123,line_end:129|char_star:4,char_end:64"[shape="point",fillcolor="#121013",style=filled];
"def test_add_template_filter(app):\n    def my_reverse(s):\n        return s[::-1]\n\n    app.add_template_filter(my_reverse)\n    assert 'my_reverse' in app.jinja_env.filters.keys()\n    assert app.jinja_env.filters['my_reverse'] == my_reverse\n    assert app.jinja_env.filters['my_reverse']('abcd') == 'dcba',type='function_definition'\nline_star:122,line_end:129|char_star:0,char_end:64"->"type='INFORMATION BLOCK'\nline_star:123,line_end:129|char_star:4,char_end:64";
"def my_reverse(s):\n        return s[::-1],type='function_definition'\nline_star:123,line_end:124|char_star:4,char_end:22"[shape="box",fillcolor="#cee6b4",style=filled];
"type='INFORMATION BLOCK'\nline_star:123,line_end:129|char_star:4,char_end:64"->"def my_reverse(s):\n        return s[::-1],type='function_definition'\nline_star:123,line_end:124|char_star:4,char_end:22";
"my_reverse,type='identifier'\nline_star:123,line_end:123|char_star:8,char_end:18"[shape="point",fillcolor="#121013",style=filled];
"def my_reverse(s):\n        return s[::-1],type='function_definition'\nline_star:123,line_end:124|char_star:4,char_end:22"->"my_reverse,type='identifier'\nline_star:123,line_end:123|char_star:8,char_end:18";
"(s),type='parameters'\nline_star:123,line_end:123|char_star:18,char_end:21"[shape="box",fillcolor="white",style=filled];
"def my_reverse(s):\n        return s[::-1],type='function_definition'\nline_star:123,line_end:124|char_star:4,char_end:22"->"(s),type='parameters'\nline_star:123,line_end:123|char_star:18,char_end:21";
"s,type='identifier'\nline_star:123,line_end:123|char_star:19,char_end:20"[shape="point",fillcolor="#121013",style=filled];
"(s),type='parameters'\nline_star:123,line_end:123|char_star:18,char_end:21"->"s,type='identifier'\nline_star:123,line_end:123|char_star:19,char_end:20";
"type='INFORMATION BLOCK'\nline_star:124,line_end:124|char_star:8,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"def my_reverse(s):\n        return s[::-1],type='function_definition'\nline_star:123,line_end:124|char_star:4,char_end:22"->"type='INFORMATION BLOCK'\nline_star:124,line_end:124|char_star:8,char_end:22";
"return s[::-1],type='return_statement'\nline_star:124,line_end:124|char_star:8,char_end:22"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:124,line_end:124|char_star:8,char_end:22"->"return s[::-1],type='return_statement'\nline_star:124,line_end:124|char_star:8,char_end:22";
"assert 'my_reverse' in app.jinja_env.filters.keys(),type='assert_statement'\nline_star:127,line_end:127|char_star:4,char_end:55"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:123,line_end:129|char_star:4,char_end:64"->"assert 'my_reverse' in app.jinja_env.filters.keys(),type='assert_statement'\nline_star:127,line_end:127|char_star:4,char_end:55";
"'my_reverse' in app.jinja_env.filters.keys(),type='comparison_operator'\nline_star:127,line_end:127|char_star:11,char_end:55"[shape="box",fillcolor="white",style=filled];
"assert 'my_reverse' in app.jinja_env.filters.keys(),type='assert_statement'\nline_star:127,line_end:127|char_star:4,char_end:55"->"'my_reverse' in app.jinja_env.filters.keys(),type='comparison_operator'\nline_star:127,line_end:127|char_star:11,char_end:55";
"app.jinja_env.filters.keys(),type='call'\nline_star:127,line_end:127|char_star:27,char_end:55"[shape="box",fillcolor="white",style=filled];
"'my_reverse' in app.jinja_env.filters.keys(),type='comparison_operator'\nline_star:127,line_end:127|char_star:11,char_end:55"->"app.jinja_env.filters.keys(),type='call'\nline_star:127,line_end:127|char_star:27,char_end:55";
"app.jinja_env.filters.keys,type='attribute'\nline_star:127,line_end:127|char_star:27,char_end:53"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.filters.keys(),type='call'\nline_star:127,line_end:127|char_star:27,char_end:55"->"app.jinja_env.filters.keys,type='attribute'\nline_star:127,line_end:127|char_star:27,char_end:53";
"app.jinja_env.filters,type='attribute'\nline_star:127,line_end:127|char_star:27,char_end:48"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.filters.keys,type='attribute'\nline_star:127,line_end:127|char_star:27,char_end:53"->"app.jinja_env.filters,type='attribute'\nline_star:127,line_end:127|char_star:27,char_end:48";
"app.jinja_env,type='attribute'\nline_star:127,line_end:127|char_star:27,char_end:40"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.filters,type='attribute'\nline_star:127,line_end:127|char_star:27,char_end:48"->"app.jinja_env,type='attribute'\nline_star:127,line_end:127|char_star:27,char_end:40";
"app,type='identifier'\nline_star:127,line_end:127|char_star:27,char_end:30"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env,type='attribute'\nline_star:127,line_end:127|char_star:27,char_end:40"->"app,type='identifier'\nline_star:127,line_end:127|char_star:27,char_end:30";
"jinja_env,type='identifier'\nline_star:127,line_end:127|char_star:31,char_end:40"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env,type='attribute'\nline_star:127,line_end:127|char_star:27,char_end:40"->"jinja_env,type='identifier'\nline_star:127,line_end:127|char_star:31,char_end:40";
"filters,type='identifier'\nline_star:127,line_end:127|char_star:41,char_end:48"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env.filters,type='attribute'\nline_star:127,line_end:127|char_star:27,char_end:48"->"filters,type='identifier'\nline_star:127,line_end:127|char_star:41,char_end:48";
"keys,type='identifier'\nline_star:127,line_end:127|char_star:49,char_end:53"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env.filters.keys,type='attribute'\nline_star:127,line_end:127|char_star:27,char_end:53"->"keys,type='identifier'\nline_star:127,line_end:127|char_star:49,char_end:53";
"assert app.jinja_env.filters['my_reverse'] == my_reverse,type='assert_statement'\nline_star:128,line_end:128|char_star:4,char_end:60"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:123,line_end:129|char_star:4,char_end:64"->"assert app.jinja_env.filters['my_reverse'] == my_reverse,type='assert_statement'\nline_star:128,line_end:128|char_star:4,char_end:60";
"app.jinja_env.filters['my_reverse'] == my_reverse,type='comparison_operator'\nline_star:128,line_end:128|char_star:11,char_end:60"[shape="box",fillcolor="white",style=filled];
"assert app.jinja_env.filters['my_reverse'] == my_reverse,type='assert_statement'\nline_star:128,line_end:128|char_star:4,char_end:60"->"app.jinja_env.filters['my_reverse'] == my_reverse,type='comparison_operator'\nline_star:128,line_end:128|char_star:11,char_end:60";
"app.jinja_env.filters['my_reverse'],type='subscript'\nline_star:128,line_end:128|char_star:11,char_end:46"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.filters['my_reverse'] == my_reverse,type='comparison_operator'\nline_star:128,line_end:128|char_star:11,char_end:60"->"app.jinja_env.filters['my_reverse'],type='subscript'\nline_star:128,line_end:128|char_star:11,char_end:46";
"app.jinja_env.filters,type='attribute'\nline_star:128,line_end:128|char_star:11,char_end:32"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.filters['my_reverse'],type='subscript'\nline_star:128,line_end:128|char_star:11,char_end:46"->"app.jinja_env.filters,type='attribute'\nline_star:128,line_end:128|char_star:11,char_end:32";
"app.jinja_env,type='attribute'\nline_star:128,line_end:128|char_star:11,char_end:24"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.filters,type='attribute'\nline_star:128,line_end:128|char_star:11,char_end:32"->"app.jinja_env,type='attribute'\nline_star:128,line_end:128|char_star:11,char_end:24";
"app,type='identifier'\nline_star:128,line_end:128|char_star:11,char_end:14"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env,type='attribute'\nline_star:128,line_end:128|char_star:11,char_end:24"->"app,type='identifier'\nline_star:128,line_end:128|char_star:11,char_end:14";
"jinja_env,type='identifier'\nline_star:128,line_end:128|char_star:15,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env,type='attribute'\nline_star:128,line_end:128|char_star:11,char_end:24"->"jinja_env,type='identifier'\nline_star:128,line_end:128|char_star:15,char_end:24";
"filters,type='identifier'\nline_star:128,line_end:128|char_star:25,char_end:32"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env.filters,type='attribute'\nline_star:128,line_end:128|char_star:11,char_end:32"->"filters,type='identifier'\nline_star:128,line_end:128|char_star:25,char_end:32";
"my_reverse,type='identifier'\nline_star:128,line_end:128|char_star:50,char_end:60"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env.filters['my_reverse'] == my_reverse,type='comparison_operator'\nline_star:128,line_end:128|char_star:11,char_end:60"->"my_reverse,type='identifier'\nline_star:128,line_end:128|char_star:50,char_end:60";
"assert app.jinja_env.filters['my_reverse']('abcd') == 'dcba',type='assert_statement'\nline_star:129,line_end:129|char_star:4,char_end:64"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:123,line_end:129|char_star:4,char_end:64"->"assert app.jinja_env.filters['my_reverse']('abcd') == 'dcba',type='assert_statement'\nline_star:129,line_end:129|char_star:4,char_end:64";
"app.jinja_env.filters['my_reverse']('abcd') == 'dcba',type='comparison_operator'\nline_star:129,line_end:129|char_star:11,char_end:64"[shape="box",fillcolor="white",style=filled];
"assert app.jinja_env.filters['my_reverse']('abcd') == 'dcba',type='assert_statement'\nline_star:129,line_end:129|char_star:4,char_end:64"->"app.jinja_env.filters['my_reverse']('abcd') == 'dcba',type='comparison_operator'\nline_star:129,line_end:129|char_star:11,char_end:64";
"app.jinja_env.filters['my_reverse']('abcd'),type='call'\nline_star:129,line_end:129|char_star:11,char_end:54"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.filters['my_reverse']('abcd') == 'dcba',type='comparison_operator'\nline_star:129,line_end:129|char_star:11,char_end:64"->"app.jinja_env.filters['my_reverse']('abcd'),type='call'\nline_star:129,line_end:129|char_star:11,char_end:54";
"app.jinja_env.filters['my_reverse'],type='subscript'\nline_star:129,line_end:129|char_star:11,char_end:46"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.filters['my_reverse']('abcd'),type='call'\nline_star:129,line_end:129|char_star:11,char_end:54"->"app.jinja_env.filters['my_reverse'],type='subscript'\nline_star:129,line_end:129|char_star:11,char_end:46";
"app.jinja_env.filters,type='attribute'\nline_star:129,line_end:129|char_star:11,char_end:32"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.filters['my_reverse'],type='subscript'\nline_star:129,line_end:129|char_star:11,char_end:46"->"app.jinja_env.filters,type='attribute'\nline_star:129,line_end:129|char_star:11,char_end:32";
"app.jinja_env,type='attribute'\nline_star:129,line_end:129|char_star:11,char_end:24"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.filters,type='attribute'\nline_star:129,line_end:129|char_star:11,char_end:32"->"app.jinja_env,type='attribute'\nline_star:129,line_end:129|char_star:11,char_end:24";
"app,type='identifier'\nline_star:129,line_end:129|char_star:11,char_end:14"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env,type='attribute'\nline_star:129,line_end:129|char_star:11,char_end:24"->"app,type='identifier'\nline_star:129,line_end:129|char_star:11,char_end:14";
"jinja_env,type='identifier'\nline_star:129,line_end:129|char_star:15,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env,type='attribute'\nline_star:129,line_end:129|char_star:11,char_end:24"->"jinja_env,type='identifier'\nline_star:129,line_end:129|char_star:15,char_end:24";
"filters,type='identifier'\nline_star:129,line_end:129|char_star:25,char_end:32"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env.filters,type='attribute'\nline_star:129,line_end:129|char_star:11,char_end:32"->"filters,type='identifier'\nline_star:129,line_end:129|char_star:25,char_end:32";
"('abcd'),type='argument_list'\nline_star:129,line_end:129|char_star:46,char_end:54"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.filters['my_reverse']('abcd'),type='call'\nline_star:129,line_end:129|char_star:11,char_end:54"->"('abcd'),type='argument_list'\nline_star:129,line_end:129|char_star:46,char_end:54";
"def test_template_filter_with_name(app):\n    @app.template_filter('strrev')\n    def my_reverse(s):\n        return s[::-1]\n\n    assert 'strrev' in app.jinja_env.filters.keys()\n    assert app.jinja_env.filters['strrev'] == my_reverse\n    assert app.jinja_env.filters['strrev']('abcd') == 'dcba',type='function_definition'\nline_star:132,line_end:139|char_star:0,char_end:60"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_template_filter_with_name(app):\n    @app.template_filter('strrev')\n    def my_reverse(s):\n        return s[::-1]\n\n    assert 'strrev' in app.jinja_env.filters.keys()\n    assert app.jinja_env.filters['strrev'] == my_reverse\n    assert app.jinja_env.filters['strrev']('abcd') == 'dcba',type='function_definition'\nline_star:132,line_end:139|char_star:0,char_end:60";
"test_template_filter_with_name,type='identifier'\nline_star:132,line_end:132|char_star:4,char_end:34"[shape="point",fillcolor="#121013",style=filled];
"def test_template_filter_with_name(app):\n    @app.template_filter('strrev')\n    def my_reverse(s):\n        return s[::-1]\n\n    assert 'strrev' in app.jinja_env.filters.keys()\n    assert app.jinja_env.filters['strrev'] == my_reverse\n    assert app.jinja_env.filters['strrev']('abcd') == 'dcba',type='function_definition'\nline_star:132,line_end:139|char_star:0,char_end:60"->"test_template_filter_with_name,type='identifier'\nline_star:132,line_end:132|char_star:4,char_end:34";
"(app),type='parameters'\nline_star:132,line_end:132|char_star:34,char_end:39"[shape="box",fillcolor="white",style=filled];
"def test_template_filter_with_name(app):\n    @app.template_filter('strrev')\n    def my_reverse(s):\n        return s[::-1]\n\n    assert 'strrev' in app.jinja_env.filters.keys()\n    assert app.jinja_env.filters['strrev'] == my_reverse\n    assert app.jinja_env.filters['strrev']('abcd') == 'dcba',type='function_definition'\nline_star:132,line_end:139|char_star:0,char_end:60"->"(app),type='parameters'\nline_star:132,line_end:132|char_star:34,char_end:39";
"app,type='identifier'\nline_star:132,line_end:132|char_star:35,char_end:38"[shape="point",fillcolor="#121013",style=filled];
"(app),type='parameters'\nline_star:132,line_end:132|char_star:34,char_end:39"->"app,type='identifier'\nline_star:132,line_end:132|char_star:35,char_end:38";
"type='INFORMATION BLOCK'\nline_star:133,line_end:139|char_star:4,char_end:60"[shape="point",fillcolor="#121013",style=filled];
"def test_template_filter_with_name(app):\n    @app.template_filter('strrev')\n    def my_reverse(s):\n        return s[::-1]\n\n    assert 'strrev' in app.jinja_env.filters.keys()\n    assert app.jinja_env.filters['strrev'] == my_reverse\n    assert app.jinja_env.filters['strrev']('abcd') == 'dcba',type='function_definition'\nline_star:132,line_end:139|char_star:0,char_end:60"->"type='INFORMATION BLOCK'\nline_star:133,line_end:139|char_star:4,char_end:60";
"@app.template_filter('strrev')\n    def my_reverse(s):\n        return s[::-1],type='decorated_definition'\nline_star:133,line_end:135|char_star:4,char_end:22"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:133,line_end:139|char_star:4,char_end:60"->"@app.template_filter('strrev')\n    def my_reverse(s):\n        return s[::-1],type='decorated_definition'\nline_star:133,line_end:135|char_star:4,char_end:22";
"@app.template_filter('strrev'),type='decorator'\nline_star:133,line_end:133|char_star:4,char_end:34"[shape="box",fillcolor="white",style=filled];
"@app.template_filter('strrev')\n    def my_reverse(s):\n        return s[::-1],type='decorated_definition'\nline_star:133,line_end:135|char_star:4,char_end:22"->"@app.template_filter('strrev'),type='decorator'\nline_star:133,line_end:133|char_star:4,char_end:34";
"def my_reverse(s):\n        return s[::-1],type='function_definition'\nline_star:134,line_end:135|char_star:4,char_end:22"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.template_filter('strrev')\n    def my_reverse(s):\n        return s[::-1],type='decorated_definition'\nline_star:133,line_end:135|char_star:4,char_end:22"->"def my_reverse(s):\n        return s[::-1],type='function_definition'\nline_star:134,line_end:135|char_star:4,char_end:22";
"my_reverse,type='identifier'\nline_star:134,line_end:134|char_star:8,char_end:18"[shape="point",fillcolor="#121013",style=filled];
"def my_reverse(s):\n        return s[::-1],type='function_definition'\nline_star:134,line_end:135|char_star:4,char_end:22"->"my_reverse,type='identifier'\nline_star:134,line_end:134|char_star:8,char_end:18";
"(s),type='parameters'\nline_star:134,line_end:134|char_star:18,char_end:21"[shape="box",fillcolor="white",style=filled];
"def my_reverse(s):\n        return s[::-1],type='function_definition'\nline_star:134,line_end:135|char_star:4,char_end:22"->"(s),type='parameters'\nline_star:134,line_end:134|char_star:18,char_end:21";
"s,type='identifier'\nline_star:134,line_end:134|char_star:19,char_end:20"[shape="point",fillcolor="#121013",style=filled];
"(s),type='parameters'\nline_star:134,line_end:134|char_star:18,char_end:21"->"s,type='identifier'\nline_star:134,line_end:134|char_star:19,char_end:20";
"type='INFORMATION BLOCK'\nline_star:135,line_end:135|char_star:8,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"def my_reverse(s):\n        return s[::-1],type='function_definition'\nline_star:134,line_end:135|char_star:4,char_end:22"->"type='INFORMATION BLOCK'\nline_star:135,line_end:135|char_star:8,char_end:22";
"return s[::-1],type='return_statement'\nline_star:135,line_end:135|char_star:8,char_end:22"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:135,line_end:135|char_star:8,char_end:22"->"return s[::-1],type='return_statement'\nline_star:135,line_end:135|char_star:8,char_end:22";
"assert 'strrev' in app.jinja_env.filters.keys(),type='assert_statement'\nline_star:137,line_end:137|char_star:4,char_end:51"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:133,line_end:139|char_star:4,char_end:60"->"assert 'strrev' in app.jinja_env.filters.keys(),type='assert_statement'\nline_star:137,line_end:137|char_star:4,char_end:51";
"'strrev' in app.jinja_env.filters.keys(),type='comparison_operator'\nline_star:137,line_end:137|char_star:11,char_end:51"[shape="box",fillcolor="white",style=filled];
"assert 'strrev' in app.jinja_env.filters.keys(),type='assert_statement'\nline_star:137,line_end:137|char_star:4,char_end:51"->"'strrev' in app.jinja_env.filters.keys(),type='comparison_operator'\nline_star:137,line_end:137|char_star:11,char_end:51";
"app.jinja_env.filters.keys(),type='call'\nline_star:137,line_end:137|char_star:23,char_end:51"[shape="box",fillcolor="white",style=filled];
"'strrev' in app.jinja_env.filters.keys(),type='comparison_operator'\nline_star:137,line_end:137|char_star:11,char_end:51"->"app.jinja_env.filters.keys(),type='call'\nline_star:137,line_end:137|char_star:23,char_end:51";
"app.jinja_env.filters.keys,type='attribute'\nline_star:137,line_end:137|char_star:23,char_end:49"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.filters.keys(),type='call'\nline_star:137,line_end:137|char_star:23,char_end:51"->"app.jinja_env.filters.keys,type='attribute'\nline_star:137,line_end:137|char_star:23,char_end:49";
"app.jinja_env.filters,type='attribute'\nline_star:137,line_end:137|char_star:23,char_end:44"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.filters.keys,type='attribute'\nline_star:137,line_end:137|char_star:23,char_end:49"->"app.jinja_env.filters,type='attribute'\nline_star:137,line_end:137|char_star:23,char_end:44";
"app.jinja_env,type='attribute'\nline_star:137,line_end:137|char_star:23,char_end:36"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.filters,type='attribute'\nline_star:137,line_end:137|char_star:23,char_end:44"->"app.jinja_env,type='attribute'\nline_star:137,line_end:137|char_star:23,char_end:36";
"app,type='identifier'\nline_star:137,line_end:137|char_star:23,char_end:26"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env,type='attribute'\nline_star:137,line_end:137|char_star:23,char_end:36"->"app,type='identifier'\nline_star:137,line_end:137|char_star:23,char_end:26";
"jinja_env,type='identifier'\nline_star:137,line_end:137|char_star:27,char_end:36"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env,type='attribute'\nline_star:137,line_end:137|char_star:23,char_end:36"->"jinja_env,type='identifier'\nline_star:137,line_end:137|char_star:27,char_end:36";
"filters,type='identifier'\nline_star:137,line_end:137|char_star:37,char_end:44"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env.filters,type='attribute'\nline_star:137,line_end:137|char_star:23,char_end:44"->"filters,type='identifier'\nline_star:137,line_end:137|char_star:37,char_end:44";
"keys,type='identifier'\nline_star:137,line_end:137|char_star:45,char_end:49"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env.filters.keys,type='attribute'\nline_star:137,line_end:137|char_star:23,char_end:49"->"keys,type='identifier'\nline_star:137,line_end:137|char_star:45,char_end:49";
"assert app.jinja_env.filters['strrev'] == my_reverse,type='assert_statement'\nline_star:138,line_end:138|char_star:4,char_end:56"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:133,line_end:139|char_star:4,char_end:60"->"assert app.jinja_env.filters['strrev'] == my_reverse,type='assert_statement'\nline_star:138,line_end:138|char_star:4,char_end:56";
"app.jinja_env.filters['strrev'] == my_reverse,type='comparison_operator'\nline_star:138,line_end:138|char_star:11,char_end:56"[shape="box",fillcolor="white",style=filled];
"assert app.jinja_env.filters['strrev'] == my_reverse,type='assert_statement'\nline_star:138,line_end:138|char_star:4,char_end:56"->"app.jinja_env.filters['strrev'] == my_reverse,type='comparison_operator'\nline_star:138,line_end:138|char_star:11,char_end:56";
"app.jinja_env.filters['strrev'],type='subscript'\nline_star:138,line_end:138|char_star:11,char_end:42"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.filters['strrev'] == my_reverse,type='comparison_operator'\nline_star:138,line_end:138|char_star:11,char_end:56"->"app.jinja_env.filters['strrev'],type='subscript'\nline_star:138,line_end:138|char_star:11,char_end:42";
"app.jinja_env.filters,type='attribute'\nline_star:138,line_end:138|char_star:11,char_end:32"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.filters['strrev'],type='subscript'\nline_star:138,line_end:138|char_star:11,char_end:42"->"app.jinja_env.filters,type='attribute'\nline_star:138,line_end:138|char_star:11,char_end:32";
"app.jinja_env,type='attribute'\nline_star:138,line_end:138|char_star:11,char_end:24"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.filters,type='attribute'\nline_star:138,line_end:138|char_star:11,char_end:32"->"app.jinja_env,type='attribute'\nline_star:138,line_end:138|char_star:11,char_end:24";
"app,type='identifier'\nline_star:138,line_end:138|char_star:11,char_end:14"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env,type='attribute'\nline_star:138,line_end:138|char_star:11,char_end:24"->"app,type='identifier'\nline_star:138,line_end:138|char_star:11,char_end:14";
"jinja_env,type='identifier'\nline_star:138,line_end:138|char_star:15,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env,type='attribute'\nline_star:138,line_end:138|char_star:11,char_end:24"->"jinja_env,type='identifier'\nline_star:138,line_end:138|char_star:15,char_end:24";
"filters,type='identifier'\nline_star:138,line_end:138|char_star:25,char_end:32"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env.filters,type='attribute'\nline_star:138,line_end:138|char_star:11,char_end:32"->"filters,type='identifier'\nline_star:138,line_end:138|char_star:25,char_end:32";
"my_reverse,type='identifier'\nline_star:138,line_end:138|char_star:46,char_end:56"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env.filters['strrev'] == my_reverse,type='comparison_operator'\nline_star:138,line_end:138|char_star:11,char_end:56"->"my_reverse,type='identifier'\nline_star:138,line_end:138|char_star:46,char_end:56";
"assert app.jinja_env.filters['strrev']('abcd') == 'dcba',type='assert_statement'\nline_star:139,line_end:139|char_star:4,char_end:60"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:133,line_end:139|char_star:4,char_end:60"->"assert app.jinja_env.filters['strrev']('abcd') == 'dcba',type='assert_statement'\nline_star:139,line_end:139|char_star:4,char_end:60";
"app.jinja_env.filters['strrev']('abcd') == 'dcba',type='comparison_operator'\nline_star:139,line_end:139|char_star:11,char_end:60"[shape="box",fillcolor="white",style=filled];
"assert app.jinja_env.filters['strrev']('abcd') == 'dcba',type='assert_statement'\nline_star:139,line_end:139|char_star:4,char_end:60"->"app.jinja_env.filters['strrev']('abcd') == 'dcba',type='comparison_operator'\nline_star:139,line_end:139|char_star:11,char_end:60";
"app.jinja_env.filters['strrev']('abcd'),type='call'\nline_star:139,line_end:139|char_star:11,char_end:50"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.filters['strrev']('abcd') == 'dcba',type='comparison_operator'\nline_star:139,line_end:139|char_star:11,char_end:60"->"app.jinja_env.filters['strrev']('abcd'),type='call'\nline_star:139,line_end:139|char_star:11,char_end:50";
"app.jinja_env.filters['strrev'],type='subscript'\nline_star:139,line_end:139|char_star:11,char_end:42"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.filters['strrev']('abcd'),type='call'\nline_star:139,line_end:139|char_star:11,char_end:50"->"app.jinja_env.filters['strrev'],type='subscript'\nline_star:139,line_end:139|char_star:11,char_end:42";
"app.jinja_env.filters,type='attribute'\nline_star:139,line_end:139|char_star:11,char_end:32"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.filters['strrev'],type='subscript'\nline_star:139,line_end:139|char_star:11,char_end:42"->"app.jinja_env.filters,type='attribute'\nline_star:139,line_end:139|char_star:11,char_end:32";
"app.jinja_env,type='attribute'\nline_star:139,line_end:139|char_star:11,char_end:24"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.filters,type='attribute'\nline_star:139,line_end:139|char_star:11,char_end:32"->"app.jinja_env,type='attribute'\nline_star:139,line_end:139|char_star:11,char_end:24";
"app,type='identifier'\nline_star:139,line_end:139|char_star:11,char_end:14"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env,type='attribute'\nline_star:139,line_end:139|char_star:11,char_end:24"->"app,type='identifier'\nline_star:139,line_end:139|char_star:11,char_end:14";
"jinja_env,type='identifier'\nline_star:139,line_end:139|char_star:15,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env,type='attribute'\nline_star:139,line_end:139|char_star:11,char_end:24"->"jinja_env,type='identifier'\nline_star:139,line_end:139|char_star:15,char_end:24";
"filters,type='identifier'\nline_star:139,line_end:139|char_star:25,char_end:32"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env.filters,type='attribute'\nline_star:139,line_end:139|char_star:11,char_end:32"->"filters,type='identifier'\nline_star:139,line_end:139|char_star:25,char_end:32";
"('abcd'),type='argument_list'\nline_star:139,line_end:139|char_star:42,char_end:50"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.filters['strrev']('abcd'),type='call'\nline_star:139,line_end:139|char_star:11,char_end:50"->"('abcd'),type='argument_list'\nline_star:139,line_end:139|char_star:42,char_end:50";
"def test_add_template_filter_with_name(app):\n    def my_reverse(s):\n        return s[::-1]\n\n    app.add_template_filter(my_reverse, 'strrev')\n    assert 'strrev' in app.jinja_env.filters.keys()\n    assert app.jinja_env.filters['strrev'] == my_reverse\n    assert app.jinja_env.filters['strrev']('abcd') == 'dcba',type='function_definition'\nline_star:142,line_end:149|char_star:0,char_end:60"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_add_template_filter_with_name(app):\n    def my_reverse(s):\n        return s[::-1]\n\n    app.add_template_filter(my_reverse, 'strrev')\n    assert 'strrev' in app.jinja_env.filters.keys()\n    assert app.jinja_env.filters['strrev'] == my_reverse\n    assert app.jinja_env.filters['strrev']('abcd') == 'dcba',type='function_definition'\nline_star:142,line_end:149|char_star:0,char_end:60";
"test_add_template_filter_with_name,type='identifier'\nline_star:142,line_end:142|char_star:4,char_end:38"[shape="point",fillcolor="#121013",style=filled];
"def test_add_template_filter_with_name(app):\n    def my_reverse(s):\n        return s[::-1]\n\n    app.add_template_filter(my_reverse, 'strrev')\n    assert 'strrev' in app.jinja_env.filters.keys()\n    assert app.jinja_env.filters['strrev'] == my_reverse\n    assert app.jinja_env.filters['strrev']('abcd') == 'dcba',type='function_definition'\nline_star:142,line_end:149|char_star:0,char_end:60"->"test_add_template_filter_with_name,type='identifier'\nline_star:142,line_end:142|char_star:4,char_end:38";
"(app),type='parameters'\nline_star:142,line_end:142|char_star:38,char_end:43"[shape="box",fillcolor="white",style=filled];
"def test_add_template_filter_with_name(app):\n    def my_reverse(s):\n        return s[::-1]\n\n    app.add_template_filter(my_reverse, 'strrev')\n    assert 'strrev' in app.jinja_env.filters.keys()\n    assert app.jinja_env.filters['strrev'] == my_reverse\n    assert app.jinja_env.filters['strrev']('abcd') == 'dcba',type='function_definition'\nline_star:142,line_end:149|char_star:0,char_end:60"->"(app),type='parameters'\nline_star:142,line_end:142|char_star:38,char_end:43";
"app,type='identifier'\nline_star:142,line_end:142|char_star:39,char_end:42"[shape="point",fillcolor="#121013",style=filled];
"(app),type='parameters'\nline_star:142,line_end:142|char_star:38,char_end:43"->"app,type='identifier'\nline_star:142,line_end:142|char_star:39,char_end:42";
"type='INFORMATION BLOCK'\nline_star:143,line_end:149|char_star:4,char_end:60"[shape="point",fillcolor="#121013",style=filled];
"def test_add_template_filter_with_name(app):\n    def my_reverse(s):\n        return s[::-1]\n\n    app.add_template_filter(my_reverse, 'strrev')\n    assert 'strrev' in app.jinja_env.filters.keys()\n    assert app.jinja_env.filters['strrev'] == my_reverse\n    assert app.jinja_env.filters['strrev']('abcd') == 'dcba',type='function_definition'\nline_star:142,line_end:149|char_star:0,char_end:60"->"type='INFORMATION BLOCK'\nline_star:143,line_end:149|char_star:4,char_end:60";
"def my_reverse(s):\n        return s[::-1],type='function_definition'\nline_star:143,line_end:144|char_star:4,char_end:22"[shape="box",fillcolor="#cee6b4",style=filled];
"type='INFORMATION BLOCK'\nline_star:143,line_end:149|char_star:4,char_end:60"->"def my_reverse(s):\n        return s[::-1],type='function_definition'\nline_star:143,line_end:144|char_star:4,char_end:22";
"my_reverse,type='identifier'\nline_star:143,line_end:143|char_star:8,char_end:18"[shape="point",fillcolor="#121013",style=filled];
"def my_reverse(s):\n        return s[::-1],type='function_definition'\nline_star:143,line_end:144|char_star:4,char_end:22"->"my_reverse,type='identifier'\nline_star:143,line_end:143|char_star:8,char_end:18";
"(s),type='parameters'\nline_star:143,line_end:143|char_star:18,char_end:21"[shape="box",fillcolor="white",style=filled];
"def my_reverse(s):\n        return s[::-1],type='function_definition'\nline_star:143,line_end:144|char_star:4,char_end:22"->"(s),type='parameters'\nline_star:143,line_end:143|char_star:18,char_end:21";
"s,type='identifier'\nline_star:143,line_end:143|char_star:19,char_end:20"[shape="point",fillcolor="#121013",style=filled];
"(s),type='parameters'\nline_star:143,line_end:143|char_star:18,char_end:21"->"s,type='identifier'\nline_star:143,line_end:143|char_star:19,char_end:20";
"type='INFORMATION BLOCK'\nline_star:144,line_end:144|char_star:8,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"def my_reverse(s):\n        return s[::-1],type='function_definition'\nline_star:143,line_end:144|char_star:4,char_end:22"->"type='INFORMATION BLOCK'\nline_star:144,line_end:144|char_star:8,char_end:22";
"return s[::-1],type='return_statement'\nline_star:144,line_end:144|char_star:8,char_end:22"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:144,line_end:144|char_star:8,char_end:22"->"return s[::-1],type='return_statement'\nline_star:144,line_end:144|char_star:8,char_end:22";
"assert 'strrev' in app.jinja_env.filters.keys(),type='assert_statement'\nline_star:147,line_end:147|char_star:4,char_end:51"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:143,line_end:149|char_star:4,char_end:60"->"assert 'strrev' in app.jinja_env.filters.keys(),type='assert_statement'\nline_star:147,line_end:147|char_star:4,char_end:51";
"'strrev' in app.jinja_env.filters.keys(),type='comparison_operator'\nline_star:147,line_end:147|char_star:11,char_end:51"[shape="box",fillcolor="white",style=filled];
"assert 'strrev' in app.jinja_env.filters.keys(),type='assert_statement'\nline_star:147,line_end:147|char_star:4,char_end:51"->"'strrev' in app.jinja_env.filters.keys(),type='comparison_operator'\nline_star:147,line_end:147|char_star:11,char_end:51";
"app.jinja_env.filters.keys(),type='call'\nline_star:147,line_end:147|char_star:23,char_end:51"[shape="box",fillcolor="white",style=filled];
"'strrev' in app.jinja_env.filters.keys(),type='comparison_operator'\nline_star:147,line_end:147|char_star:11,char_end:51"->"app.jinja_env.filters.keys(),type='call'\nline_star:147,line_end:147|char_star:23,char_end:51";
"app.jinja_env.filters.keys,type='attribute'\nline_star:147,line_end:147|char_star:23,char_end:49"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.filters.keys(),type='call'\nline_star:147,line_end:147|char_star:23,char_end:51"->"app.jinja_env.filters.keys,type='attribute'\nline_star:147,line_end:147|char_star:23,char_end:49";
"app.jinja_env.filters,type='attribute'\nline_star:147,line_end:147|char_star:23,char_end:44"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.filters.keys,type='attribute'\nline_star:147,line_end:147|char_star:23,char_end:49"->"app.jinja_env.filters,type='attribute'\nline_star:147,line_end:147|char_star:23,char_end:44";
"app.jinja_env,type='attribute'\nline_star:147,line_end:147|char_star:23,char_end:36"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.filters,type='attribute'\nline_star:147,line_end:147|char_star:23,char_end:44"->"app.jinja_env,type='attribute'\nline_star:147,line_end:147|char_star:23,char_end:36";
"app,type='identifier'\nline_star:147,line_end:147|char_star:23,char_end:26"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env,type='attribute'\nline_star:147,line_end:147|char_star:23,char_end:36"->"app,type='identifier'\nline_star:147,line_end:147|char_star:23,char_end:26";
"jinja_env,type='identifier'\nline_star:147,line_end:147|char_star:27,char_end:36"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env,type='attribute'\nline_star:147,line_end:147|char_star:23,char_end:36"->"jinja_env,type='identifier'\nline_star:147,line_end:147|char_star:27,char_end:36";
"filters,type='identifier'\nline_star:147,line_end:147|char_star:37,char_end:44"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env.filters,type='attribute'\nline_star:147,line_end:147|char_star:23,char_end:44"->"filters,type='identifier'\nline_star:147,line_end:147|char_star:37,char_end:44";
"keys,type='identifier'\nline_star:147,line_end:147|char_star:45,char_end:49"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env.filters.keys,type='attribute'\nline_star:147,line_end:147|char_star:23,char_end:49"->"keys,type='identifier'\nline_star:147,line_end:147|char_star:45,char_end:49";
"assert app.jinja_env.filters['strrev'] == my_reverse,type='assert_statement'\nline_star:148,line_end:148|char_star:4,char_end:56"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:143,line_end:149|char_star:4,char_end:60"->"assert app.jinja_env.filters['strrev'] == my_reverse,type='assert_statement'\nline_star:148,line_end:148|char_star:4,char_end:56";
"app.jinja_env.filters['strrev'] == my_reverse,type='comparison_operator'\nline_star:148,line_end:148|char_star:11,char_end:56"[shape="box",fillcolor="white",style=filled];
"assert app.jinja_env.filters['strrev'] == my_reverse,type='assert_statement'\nline_star:148,line_end:148|char_star:4,char_end:56"->"app.jinja_env.filters['strrev'] == my_reverse,type='comparison_operator'\nline_star:148,line_end:148|char_star:11,char_end:56";
"app.jinja_env.filters['strrev'],type='subscript'\nline_star:148,line_end:148|char_star:11,char_end:42"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.filters['strrev'] == my_reverse,type='comparison_operator'\nline_star:148,line_end:148|char_star:11,char_end:56"->"app.jinja_env.filters['strrev'],type='subscript'\nline_star:148,line_end:148|char_star:11,char_end:42";
"app.jinja_env.filters,type='attribute'\nline_star:148,line_end:148|char_star:11,char_end:32"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.filters['strrev'],type='subscript'\nline_star:148,line_end:148|char_star:11,char_end:42"->"app.jinja_env.filters,type='attribute'\nline_star:148,line_end:148|char_star:11,char_end:32";
"app.jinja_env,type='attribute'\nline_star:148,line_end:148|char_star:11,char_end:24"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.filters,type='attribute'\nline_star:148,line_end:148|char_star:11,char_end:32"->"app.jinja_env,type='attribute'\nline_star:148,line_end:148|char_star:11,char_end:24";
"app,type='identifier'\nline_star:148,line_end:148|char_star:11,char_end:14"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env,type='attribute'\nline_star:148,line_end:148|char_star:11,char_end:24"->"app,type='identifier'\nline_star:148,line_end:148|char_star:11,char_end:14";
"jinja_env,type='identifier'\nline_star:148,line_end:148|char_star:15,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env,type='attribute'\nline_star:148,line_end:148|char_star:11,char_end:24"->"jinja_env,type='identifier'\nline_star:148,line_end:148|char_star:15,char_end:24";
"filters,type='identifier'\nline_star:148,line_end:148|char_star:25,char_end:32"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env.filters,type='attribute'\nline_star:148,line_end:148|char_star:11,char_end:32"->"filters,type='identifier'\nline_star:148,line_end:148|char_star:25,char_end:32";
"my_reverse,type='identifier'\nline_star:148,line_end:148|char_star:46,char_end:56"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env.filters['strrev'] == my_reverse,type='comparison_operator'\nline_star:148,line_end:148|char_star:11,char_end:56"->"my_reverse,type='identifier'\nline_star:148,line_end:148|char_star:46,char_end:56";
"assert app.jinja_env.filters['strrev']('abcd') == 'dcba',type='assert_statement'\nline_star:149,line_end:149|char_star:4,char_end:60"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:143,line_end:149|char_star:4,char_end:60"->"assert app.jinja_env.filters['strrev']('abcd') == 'dcba',type='assert_statement'\nline_star:149,line_end:149|char_star:4,char_end:60";
"app.jinja_env.filters['strrev']('abcd') == 'dcba',type='comparison_operator'\nline_star:149,line_end:149|char_star:11,char_end:60"[shape="box",fillcolor="white",style=filled];
"assert app.jinja_env.filters['strrev']('abcd') == 'dcba',type='assert_statement'\nline_star:149,line_end:149|char_star:4,char_end:60"->"app.jinja_env.filters['strrev']('abcd') == 'dcba',type='comparison_operator'\nline_star:149,line_end:149|char_star:11,char_end:60";
"app.jinja_env.filters['strrev']('abcd'),type='call'\nline_star:149,line_end:149|char_star:11,char_end:50"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.filters['strrev']('abcd') == 'dcba',type='comparison_operator'\nline_star:149,line_end:149|char_star:11,char_end:60"->"app.jinja_env.filters['strrev']('abcd'),type='call'\nline_star:149,line_end:149|char_star:11,char_end:50";
"app.jinja_env.filters['strrev'],type='subscript'\nline_star:149,line_end:149|char_star:11,char_end:42"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.filters['strrev']('abcd'),type='call'\nline_star:149,line_end:149|char_star:11,char_end:50"->"app.jinja_env.filters['strrev'],type='subscript'\nline_star:149,line_end:149|char_star:11,char_end:42";
"app.jinja_env.filters,type='attribute'\nline_star:149,line_end:149|char_star:11,char_end:32"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.filters['strrev'],type='subscript'\nline_star:149,line_end:149|char_star:11,char_end:42"->"app.jinja_env.filters,type='attribute'\nline_star:149,line_end:149|char_star:11,char_end:32";
"app.jinja_env,type='attribute'\nline_star:149,line_end:149|char_star:11,char_end:24"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.filters,type='attribute'\nline_star:149,line_end:149|char_star:11,char_end:32"->"app.jinja_env,type='attribute'\nline_star:149,line_end:149|char_star:11,char_end:24";
"app,type='identifier'\nline_star:149,line_end:149|char_star:11,char_end:14"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env,type='attribute'\nline_star:149,line_end:149|char_star:11,char_end:24"->"app,type='identifier'\nline_star:149,line_end:149|char_star:11,char_end:14";
"jinja_env,type='identifier'\nline_star:149,line_end:149|char_star:15,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env,type='attribute'\nline_star:149,line_end:149|char_star:11,char_end:24"->"jinja_env,type='identifier'\nline_star:149,line_end:149|char_star:15,char_end:24";
"filters,type='identifier'\nline_star:149,line_end:149|char_star:25,char_end:32"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env.filters,type='attribute'\nline_star:149,line_end:149|char_star:11,char_end:32"->"filters,type='identifier'\nline_star:149,line_end:149|char_star:25,char_end:32";
"('abcd'),type='argument_list'\nline_star:149,line_end:149|char_star:42,char_end:50"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.filters['strrev']('abcd'),type='call'\nline_star:149,line_end:149|char_star:11,char_end:50"->"('abcd'),type='argument_list'\nline_star:149,line_end:149|char_star:42,char_end:50";
"def test_template_filter_with_template(app, client):\n    @app.template_filter()\n    def super_reverse(s):\n        return s[::-1]\n\n    @app.route('/')\n    def index():\n        return flask.render_template('template_filter.html', value='abcd')\n\n    rv = client.get('/')\n    assert rv.data == b'dcba',type='function_definition'\nline_star:152,line_end:162|char_star:0,char_end:29"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_template_filter_with_template(app, client):\n    @app.template_filter()\n    def super_reverse(s):\n        return s[::-1]\n\n    @app.route('/')\n    def index():\n        return flask.render_template('template_filter.html', value='abcd')\n\n    rv = client.get('/')\n    assert rv.data == b'dcba',type='function_definition'\nline_star:152,line_end:162|char_star:0,char_end:29";
"test_template_filter_with_template,type='identifier'\nline_star:152,line_end:152|char_star:4,char_end:38"[shape="point",fillcolor="#121013",style=filled];
"def test_template_filter_with_template(app, client):\n    @app.template_filter()\n    def super_reverse(s):\n        return s[::-1]\n\n    @app.route('/')\n    def index():\n        return flask.render_template('template_filter.html', value='abcd')\n\n    rv = client.get('/')\n    assert rv.data == b'dcba',type='function_definition'\nline_star:152,line_end:162|char_star:0,char_end:29"->"test_template_filter_with_template,type='identifier'\nline_star:152,line_end:152|char_star:4,char_end:38";
"(app, client),type='parameters'\nline_star:152,line_end:152|char_star:38,char_end:51"[shape="box",fillcolor="white",style=filled];
"def test_template_filter_with_template(app, client):\n    @app.template_filter()\n    def super_reverse(s):\n        return s[::-1]\n\n    @app.route('/')\n    def index():\n        return flask.render_template('template_filter.html', value='abcd')\n\n    rv = client.get('/')\n    assert rv.data == b'dcba',type='function_definition'\nline_star:152,line_end:162|char_star:0,char_end:29"->"(app, client),type='parameters'\nline_star:152,line_end:152|char_star:38,char_end:51";
"app,type='identifier'\nline_star:152,line_end:152|char_star:39,char_end:42"[shape="point",fillcolor="#121013",style=filled];
"(app, client),type='parameters'\nline_star:152,line_end:152|char_star:38,char_end:51"->"app,type='identifier'\nline_star:152,line_end:152|char_star:39,char_end:42";
"client,type='identifier'\nline_star:152,line_end:152|char_star:44,char_end:50"[shape="point",fillcolor="#121013",style=filled];
"(app, client),type='parameters'\nline_star:152,line_end:152|char_star:38,char_end:51"->"client,type='identifier'\nline_star:152,line_end:152|char_star:44,char_end:50";
"type='INFORMATION BLOCK'\nline_star:153,line_end:162|char_star:4,char_end:29"[shape="point",fillcolor="#121013",style=filled];
"def test_template_filter_with_template(app, client):\n    @app.template_filter()\n    def super_reverse(s):\n        return s[::-1]\n\n    @app.route('/')\n    def index():\n        return flask.render_template('template_filter.html', value='abcd')\n\n    rv = client.get('/')\n    assert rv.data == b'dcba',type='function_definition'\nline_star:152,line_end:162|char_star:0,char_end:29"->"type='INFORMATION BLOCK'\nline_star:153,line_end:162|char_star:4,char_end:29";
"@app.template_filter()\n    def super_reverse(s):\n        return s[::-1],type='decorated_definition'\nline_star:153,line_end:155|char_star:4,char_end:22"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:153,line_end:162|char_star:4,char_end:29"->"@app.template_filter()\n    def super_reverse(s):\n        return s[::-1],type='decorated_definition'\nline_star:153,line_end:155|char_star:4,char_end:22";
"@app.template_filter(),type='decorator'\nline_star:153,line_end:153|char_star:4,char_end:26"[shape="box",fillcolor="white",style=filled];
"@app.template_filter()\n    def super_reverse(s):\n        return s[::-1],type='decorated_definition'\nline_star:153,line_end:155|char_star:4,char_end:22"->"@app.template_filter(),type='decorator'\nline_star:153,line_end:153|char_star:4,char_end:26";
"def super_reverse(s):\n        return s[::-1],type='function_definition'\nline_star:154,line_end:155|char_star:4,char_end:22"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.template_filter()\n    def super_reverse(s):\n        return s[::-1],type='decorated_definition'\nline_star:153,line_end:155|char_star:4,char_end:22"->"def super_reverse(s):\n        return s[::-1],type='function_definition'\nline_star:154,line_end:155|char_star:4,char_end:22";
"super_reverse,type='identifier'\nline_star:154,line_end:154|char_star:8,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"def super_reverse(s):\n        return s[::-1],type='function_definition'\nline_star:154,line_end:155|char_star:4,char_end:22"->"super_reverse,type='identifier'\nline_star:154,line_end:154|char_star:8,char_end:21";
"(s),type='parameters'\nline_star:154,line_end:154|char_star:21,char_end:24"[shape="box",fillcolor="white",style=filled];
"def super_reverse(s):\n        return s[::-1],type='function_definition'\nline_star:154,line_end:155|char_star:4,char_end:22"->"(s),type='parameters'\nline_star:154,line_end:154|char_star:21,char_end:24";
"s,type='identifier'\nline_star:154,line_end:154|char_star:22,char_end:23"[shape="point",fillcolor="#121013",style=filled];
"(s),type='parameters'\nline_star:154,line_end:154|char_star:21,char_end:24"->"s,type='identifier'\nline_star:154,line_end:154|char_star:22,char_end:23";
"type='INFORMATION BLOCK'\nline_star:155,line_end:155|char_star:8,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"def super_reverse(s):\n        return s[::-1],type='function_definition'\nline_star:154,line_end:155|char_star:4,char_end:22"->"type='INFORMATION BLOCK'\nline_star:155,line_end:155|char_star:8,char_end:22";
"return s[::-1],type='return_statement'\nline_star:155,line_end:155|char_star:8,char_end:22"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:155,line_end:155|char_star:8,char_end:22"->"return s[::-1],type='return_statement'\nline_star:155,line_end:155|char_star:8,char_end:22";
"@app.route('/')\n    def index():\n        return flask.render_template('template_filter.html', value='abcd'),type='decorated_definition'\nline_star:157,line_end:159|char_star:4,char_end:74"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:153,line_end:162|char_star:4,char_end:29"->"@app.route('/')\n    def index():\n        return flask.render_template('template_filter.html', value='abcd'),type='decorated_definition'\nline_star:157,line_end:159|char_star:4,char_end:74";
"@app.route('/'),type='decorator'\nline_star:157,line_end:157|char_star:4,char_end:19"[shape="box",fillcolor="white",style=filled];
"@app.route('/')\n    def index():\n        return flask.render_template('template_filter.html', value='abcd'),type='decorated_definition'\nline_star:157,line_end:159|char_star:4,char_end:74"->"@app.route('/'),type='decorator'\nline_star:157,line_end:157|char_star:4,char_end:19";
"def index():\n        return flask.render_template('template_filter.html', value='abcd'),type='function_definition'\nline_star:158,line_end:159|char_star:4,char_end:74"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.route('/')\n    def index():\n        return flask.render_template('template_filter.html', value='abcd'),type='decorated_definition'\nline_star:157,line_end:159|char_star:4,char_end:74"->"def index():\n        return flask.render_template('template_filter.html', value='abcd'),type='function_definition'\nline_star:158,line_end:159|char_star:4,char_end:74";
"index,type='identifier'\nline_star:158,line_end:158|char_star:8,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"def index():\n        return flask.render_template('template_filter.html', value='abcd'),type='function_definition'\nline_star:158,line_end:159|char_star:4,char_end:74"->"index,type='identifier'\nline_star:158,line_end:158|char_star:8,char_end:13";
"type='INFORMATION BLOCK'\nline_star:159,line_end:159|char_star:8,char_end:74"[shape="point",fillcolor="#121013",style=filled];
"def index():\n        return flask.render_template('template_filter.html', value='abcd'),type='function_definition'\nline_star:158,line_end:159|char_star:4,char_end:74"->"type='INFORMATION BLOCK'\nline_star:159,line_end:159|char_star:8,char_end:74";
"return flask.render_template('template_filter.html', value='abcd'),type='return_statement'\nline_star:159,line_end:159|char_star:8,char_end:74"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:159,line_end:159|char_star:8,char_end:74"->"return flask.render_template('template_filter.html', value='abcd'),type='return_statement'\nline_star:159,line_end:159|char_star:8,char_end:74";
"assert rv.data == b'dcba',type='assert_statement'\nline_star:162,line_end:162|char_star:4,char_end:29"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:153,line_end:162|char_star:4,char_end:29"->"assert rv.data == b'dcba',type='assert_statement'\nline_star:162,line_end:162|char_star:4,char_end:29";
"rv.data == b'dcba',type='comparison_operator'\nline_star:162,line_end:162|char_star:11,char_end:29"[shape="box",fillcolor="white",style=filled];
"assert rv.data == b'dcba',type='assert_statement'\nline_star:162,line_end:162|char_star:4,char_end:29"->"rv.data == b'dcba',type='comparison_operator'\nline_star:162,line_end:162|char_star:11,char_end:29";
"rv.data,type='attribute'\nline_star:162,line_end:162|char_star:11,char_end:18"[shape="box",fillcolor="white",style=filled];
"rv.data == b'dcba',type='comparison_operator'\nline_star:162,line_end:162|char_star:11,char_end:29"->"rv.data,type='attribute'\nline_star:162,line_end:162|char_star:11,char_end:18";
"rv,type='identifier'\nline_star:162,line_end:162|char_star:11,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"rv.data,type='attribute'\nline_star:162,line_end:162|char_star:11,char_end:18"->"rv,type='identifier'\nline_star:162,line_end:162|char_star:11,char_end:13";
"data,type='identifier'\nline_star:162,line_end:162|char_star:14,char_end:18"[shape="point",fillcolor="#121013",style=filled];
"rv.data,type='attribute'\nline_star:162,line_end:162|char_star:11,char_end:18"->"data,type='identifier'\nline_star:162,line_end:162|char_star:14,char_end:18";
"def test_add_template_filter_with_template(app, client):\n    def super_reverse(s):\n        return s[::-1]\n\n    app.add_template_filter(super_reverse)\n\n    @app.route('/')\n    def index():\n        return flask.render_template('template_filter.html', value='abcd')\n\n    rv = client.get('/')\n    assert rv.data == b'dcba',type='function_definition'\nline_star:165,line_end:176|char_star:0,char_end:29"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_add_template_filter_with_template(app, client):\n    def super_reverse(s):\n        return s[::-1]\n\n    app.add_template_filter(super_reverse)\n\n    @app.route('/')\n    def index():\n        return flask.render_template('template_filter.html', value='abcd')\n\n    rv = client.get('/')\n    assert rv.data == b'dcba',type='function_definition'\nline_star:165,line_end:176|char_star:0,char_end:29";
"test_add_template_filter_with_template,type='identifier'\nline_star:165,line_end:165|char_star:4,char_end:42"[shape="point",fillcolor="#121013",style=filled];
"def test_add_template_filter_with_template(app, client):\n    def super_reverse(s):\n        return s[::-1]\n\n    app.add_template_filter(super_reverse)\n\n    @app.route('/')\n    def index():\n        return flask.render_template('template_filter.html', value='abcd')\n\n    rv = client.get('/')\n    assert rv.data == b'dcba',type='function_definition'\nline_star:165,line_end:176|char_star:0,char_end:29"->"test_add_template_filter_with_template,type='identifier'\nline_star:165,line_end:165|char_star:4,char_end:42";
"(app, client),type='parameters'\nline_star:165,line_end:165|char_star:42,char_end:55"[shape="box",fillcolor="white",style=filled];
"def test_add_template_filter_with_template(app, client):\n    def super_reverse(s):\n        return s[::-1]\n\n    app.add_template_filter(super_reverse)\n\n    @app.route('/')\n    def index():\n        return flask.render_template('template_filter.html', value='abcd')\n\n    rv = client.get('/')\n    assert rv.data == b'dcba',type='function_definition'\nline_star:165,line_end:176|char_star:0,char_end:29"->"(app, client),type='parameters'\nline_star:165,line_end:165|char_star:42,char_end:55";
"app,type='identifier'\nline_star:165,line_end:165|char_star:43,char_end:46"[shape="point",fillcolor="#121013",style=filled];
"(app, client),type='parameters'\nline_star:165,line_end:165|char_star:42,char_end:55"->"app,type='identifier'\nline_star:165,line_end:165|char_star:43,char_end:46";
"client,type='identifier'\nline_star:165,line_end:165|char_star:48,char_end:54"[shape="point",fillcolor="#121013",style=filled];
"(app, client),type='parameters'\nline_star:165,line_end:165|char_star:42,char_end:55"->"client,type='identifier'\nline_star:165,line_end:165|char_star:48,char_end:54";
"type='INFORMATION BLOCK'\nline_star:166,line_end:176|char_star:4,char_end:29"[shape="point",fillcolor="#121013",style=filled];
"def test_add_template_filter_with_template(app, client):\n    def super_reverse(s):\n        return s[::-1]\n\n    app.add_template_filter(super_reverse)\n\n    @app.route('/')\n    def index():\n        return flask.render_template('template_filter.html', value='abcd')\n\n    rv = client.get('/')\n    assert rv.data == b'dcba',type='function_definition'\nline_star:165,line_end:176|char_star:0,char_end:29"->"type='INFORMATION BLOCK'\nline_star:166,line_end:176|char_star:4,char_end:29";
"def super_reverse(s):\n        return s[::-1],type='function_definition'\nline_star:166,line_end:167|char_star:4,char_end:22"[shape="box",fillcolor="#cee6b4",style=filled];
"type='INFORMATION BLOCK'\nline_star:166,line_end:176|char_star:4,char_end:29"->"def super_reverse(s):\n        return s[::-1],type='function_definition'\nline_star:166,line_end:167|char_star:4,char_end:22";
"super_reverse,type='identifier'\nline_star:166,line_end:166|char_star:8,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"def super_reverse(s):\n        return s[::-1],type='function_definition'\nline_star:166,line_end:167|char_star:4,char_end:22"->"super_reverse,type='identifier'\nline_star:166,line_end:166|char_star:8,char_end:21";
"(s),type='parameters'\nline_star:166,line_end:166|char_star:21,char_end:24"[shape="box",fillcolor="white",style=filled];
"def super_reverse(s):\n        return s[::-1],type='function_definition'\nline_star:166,line_end:167|char_star:4,char_end:22"->"(s),type='parameters'\nline_star:166,line_end:166|char_star:21,char_end:24";
"s,type='identifier'\nline_star:166,line_end:166|char_star:22,char_end:23"[shape="point",fillcolor="#121013",style=filled];
"(s),type='parameters'\nline_star:166,line_end:166|char_star:21,char_end:24"->"s,type='identifier'\nline_star:166,line_end:166|char_star:22,char_end:23";
"type='INFORMATION BLOCK'\nline_star:167,line_end:167|char_star:8,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"def super_reverse(s):\n        return s[::-1],type='function_definition'\nline_star:166,line_end:167|char_star:4,char_end:22"->"type='INFORMATION BLOCK'\nline_star:167,line_end:167|char_star:8,char_end:22";
"return s[::-1],type='return_statement'\nline_star:167,line_end:167|char_star:8,char_end:22"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:167,line_end:167|char_star:8,char_end:22"->"return s[::-1],type='return_statement'\nline_star:167,line_end:167|char_star:8,char_end:22";
"@app.route('/')\n    def index():\n        return flask.render_template('template_filter.html', value='abcd'),type='decorated_definition'\nline_star:171,line_end:173|char_star:4,char_end:74"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:166,line_end:176|char_star:4,char_end:29"->"@app.route('/')\n    def index():\n        return flask.render_template('template_filter.html', value='abcd'),type='decorated_definition'\nline_star:171,line_end:173|char_star:4,char_end:74";
"@app.route('/'),type='decorator'\nline_star:171,line_end:171|char_star:4,char_end:19"[shape="box",fillcolor="white",style=filled];
"@app.route('/')\n    def index():\n        return flask.render_template('template_filter.html', value='abcd'),type='decorated_definition'\nline_star:171,line_end:173|char_star:4,char_end:74"->"@app.route('/'),type='decorator'\nline_star:171,line_end:171|char_star:4,char_end:19";
"def index():\n        return flask.render_template('template_filter.html', value='abcd'),type='function_definition'\nline_star:172,line_end:173|char_star:4,char_end:74"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.route('/')\n    def index():\n        return flask.render_template('template_filter.html', value='abcd'),type='decorated_definition'\nline_star:171,line_end:173|char_star:4,char_end:74"->"def index():\n        return flask.render_template('template_filter.html', value='abcd'),type='function_definition'\nline_star:172,line_end:173|char_star:4,char_end:74";
"index,type='identifier'\nline_star:172,line_end:172|char_star:8,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"def index():\n        return flask.render_template('template_filter.html', value='abcd'),type='function_definition'\nline_star:172,line_end:173|char_star:4,char_end:74"->"index,type='identifier'\nline_star:172,line_end:172|char_star:8,char_end:13";
"type='INFORMATION BLOCK'\nline_star:173,line_end:173|char_star:8,char_end:74"[shape="point",fillcolor="#121013",style=filled];
"def index():\n        return flask.render_template('template_filter.html', value='abcd'),type='function_definition'\nline_star:172,line_end:173|char_star:4,char_end:74"->"type='INFORMATION BLOCK'\nline_star:173,line_end:173|char_star:8,char_end:74";
"return flask.render_template('template_filter.html', value='abcd'),type='return_statement'\nline_star:173,line_end:173|char_star:8,char_end:74"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:173,line_end:173|char_star:8,char_end:74"->"return flask.render_template('template_filter.html', value='abcd'),type='return_statement'\nline_star:173,line_end:173|char_star:8,char_end:74";
"assert rv.data == b'dcba',type='assert_statement'\nline_star:176,line_end:176|char_star:4,char_end:29"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:166,line_end:176|char_star:4,char_end:29"->"assert rv.data == b'dcba',type='assert_statement'\nline_star:176,line_end:176|char_star:4,char_end:29";
"rv.data == b'dcba',type='comparison_operator'\nline_star:176,line_end:176|char_star:11,char_end:29"[shape="box",fillcolor="white",style=filled];
"assert rv.data == b'dcba',type='assert_statement'\nline_star:176,line_end:176|char_star:4,char_end:29"->"rv.data == b'dcba',type='comparison_operator'\nline_star:176,line_end:176|char_star:11,char_end:29";
"rv.data,type='attribute'\nline_star:176,line_end:176|char_star:11,char_end:18"[shape="box",fillcolor="white",style=filled];
"rv.data == b'dcba',type='comparison_operator'\nline_star:176,line_end:176|char_star:11,char_end:29"->"rv.data,type='attribute'\nline_star:176,line_end:176|char_star:11,char_end:18";
"rv,type='identifier'\nline_star:176,line_end:176|char_star:11,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"rv.data,type='attribute'\nline_star:176,line_end:176|char_star:11,char_end:18"->"rv,type='identifier'\nline_star:176,line_end:176|char_star:11,char_end:13";
"data,type='identifier'\nline_star:176,line_end:176|char_star:14,char_end:18"[shape="point",fillcolor="#121013",style=filled];
"rv.data,type='attribute'\nline_star:176,line_end:176|char_star:11,char_end:18"->"data,type='identifier'\nline_star:176,line_end:176|char_star:14,char_end:18";
"def test_template_filter_with_name_and_template(app, client):\n    @app.template_filter('super_reverse')\n    def my_reverse(s):\n        return s[::-1]\n\n    @app.route('/')\n    def index():\n        return flask.render_template('template_filter.html', value='abcd')\n\n    rv = client.get('/')\n    assert rv.data == b'dcba',type='function_definition'\nline_star:179,line_end:189|char_star:0,char_end:29"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_template_filter_with_name_and_template(app, client):\n    @app.template_filter('super_reverse')\n    def my_reverse(s):\n        return s[::-1]\n\n    @app.route('/')\n    def index():\n        return flask.render_template('template_filter.html', value='abcd')\n\n    rv = client.get('/')\n    assert rv.data == b'dcba',type='function_definition'\nline_star:179,line_end:189|char_star:0,char_end:29";
"test_template_filter_with_name_and_template,type='identifier'\nline_star:179,line_end:179|char_star:4,char_end:47"[shape="point",fillcolor="#121013",style=filled];
"def test_template_filter_with_name_and_template(app, client):\n    @app.template_filter('super_reverse')\n    def my_reverse(s):\n        return s[::-1]\n\n    @app.route('/')\n    def index():\n        return flask.render_template('template_filter.html', value='abcd')\n\n    rv = client.get('/')\n    assert rv.data == b'dcba',type='function_definition'\nline_star:179,line_end:189|char_star:0,char_end:29"->"test_template_filter_with_name_and_template,type='identifier'\nline_star:179,line_end:179|char_star:4,char_end:47";
"(app, client),type='parameters'\nline_star:179,line_end:179|char_star:47,char_end:60"[shape="box",fillcolor="white",style=filled];
"def test_template_filter_with_name_and_template(app, client):\n    @app.template_filter('super_reverse')\n    def my_reverse(s):\n        return s[::-1]\n\n    @app.route('/')\n    def index():\n        return flask.render_template('template_filter.html', value='abcd')\n\n    rv = client.get('/')\n    assert rv.data == b'dcba',type='function_definition'\nline_star:179,line_end:189|char_star:0,char_end:29"->"(app, client),type='parameters'\nline_star:179,line_end:179|char_star:47,char_end:60";
"app,type='identifier'\nline_star:179,line_end:179|char_star:48,char_end:51"[shape="point",fillcolor="#121013",style=filled];
"(app, client),type='parameters'\nline_star:179,line_end:179|char_star:47,char_end:60"->"app,type='identifier'\nline_star:179,line_end:179|char_star:48,char_end:51";
"client,type='identifier'\nline_star:179,line_end:179|char_star:53,char_end:59"[shape="point",fillcolor="#121013",style=filled];
"(app, client),type='parameters'\nline_star:179,line_end:179|char_star:47,char_end:60"->"client,type='identifier'\nline_star:179,line_end:179|char_star:53,char_end:59";
"type='INFORMATION BLOCK'\nline_star:180,line_end:189|char_star:4,char_end:29"[shape="point",fillcolor="#121013",style=filled];
"def test_template_filter_with_name_and_template(app, client):\n    @app.template_filter('super_reverse')\n    def my_reverse(s):\n        return s[::-1]\n\n    @app.route('/')\n    def index():\n        return flask.render_template('template_filter.html', value='abcd')\n\n    rv = client.get('/')\n    assert rv.data == b'dcba',type='function_definition'\nline_star:179,line_end:189|char_star:0,char_end:29"->"type='INFORMATION BLOCK'\nline_star:180,line_end:189|char_star:4,char_end:29";
"@app.template_filter('super_reverse')\n    def my_reverse(s):\n        return s[::-1],type='decorated_definition'\nline_star:180,line_end:182|char_star:4,char_end:22"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:180,line_end:189|char_star:4,char_end:29"->"@app.template_filter('super_reverse')\n    def my_reverse(s):\n        return s[::-1],type='decorated_definition'\nline_star:180,line_end:182|char_star:4,char_end:22";
"@app.template_filter('super_reverse'),type='decorator'\nline_star:180,line_end:180|char_star:4,char_end:41"[shape="box",fillcolor="white",style=filled];
"@app.template_filter('super_reverse')\n    def my_reverse(s):\n        return s[::-1],type='decorated_definition'\nline_star:180,line_end:182|char_star:4,char_end:22"->"@app.template_filter('super_reverse'),type='decorator'\nline_star:180,line_end:180|char_star:4,char_end:41";
"def my_reverse(s):\n        return s[::-1],type='function_definition'\nline_star:181,line_end:182|char_star:4,char_end:22"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.template_filter('super_reverse')\n    def my_reverse(s):\n        return s[::-1],type='decorated_definition'\nline_star:180,line_end:182|char_star:4,char_end:22"->"def my_reverse(s):\n        return s[::-1],type='function_definition'\nline_star:181,line_end:182|char_star:4,char_end:22";
"my_reverse,type='identifier'\nline_star:181,line_end:181|char_star:8,char_end:18"[shape="point",fillcolor="#121013",style=filled];
"def my_reverse(s):\n        return s[::-1],type='function_definition'\nline_star:181,line_end:182|char_star:4,char_end:22"->"my_reverse,type='identifier'\nline_star:181,line_end:181|char_star:8,char_end:18";
"(s),type='parameters'\nline_star:181,line_end:181|char_star:18,char_end:21"[shape="box",fillcolor="white",style=filled];
"def my_reverse(s):\n        return s[::-1],type='function_definition'\nline_star:181,line_end:182|char_star:4,char_end:22"->"(s),type='parameters'\nline_star:181,line_end:181|char_star:18,char_end:21";
"s,type='identifier'\nline_star:181,line_end:181|char_star:19,char_end:20"[shape="point",fillcolor="#121013",style=filled];
"(s),type='parameters'\nline_star:181,line_end:181|char_star:18,char_end:21"->"s,type='identifier'\nline_star:181,line_end:181|char_star:19,char_end:20";
"type='INFORMATION BLOCK'\nline_star:182,line_end:182|char_star:8,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"def my_reverse(s):\n        return s[::-1],type='function_definition'\nline_star:181,line_end:182|char_star:4,char_end:22"->"type='INFORMATION BLOCK'\nline_star:182,line_end:182|char_star:8,char_end:22";
"return s[::-1],type='return_statement'\nline_star:182,line_end:182|char_star:8,char_end:22"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:182,line_end:182|char_star:8,char_end:22"->"return s[::-1],type='return_statement'\nline_star:182,line_end:182|char_star:8,char_end:22";
"@app.route('/')\n    def index():\n        return flask.render_template('template_filter.html', value='abcd'),type='decorated_definition'\nline_star:184,line_end:186|char_star:4,char_end:74"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:180,line_end:189|char_star:4,char_end:29"->"@app.route('/')\n    def index():\n        return flask.render_template('template_filter.html', value='abcd'),type='decorated_definition'\nline_star:184,line_end:186|char_star:4,char_end:74";
"@app.route('/'),type='decorator'\nline_star:184,line_end:184|char_star:4,char_end:19"[shape="box",fillcolor="white",style=filled];
"@app.route('/')\n    def index():\n        return flask.render_template('template_filter.html', value='abcd'),type='decorated_definition'\nline_star:184,line_end:186|char_star:4,char_end:74"->"@app.route('/'),type='decorator'\nline_star:184,line_end:184|char_star:4,char_end:19";
"def index():\n        return flask.render_template('template_filter.html', value='abcd'),type='function_definition'\nline_star:185,line_end:186|char_star:4,char_end:74"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.route('/')\n    def index():\n        return flask.render_template('template_filter.html', value='abcd'),type='decorated_definition'\nline_star:184,line_end:186|char_star:4,char_end:74"->"def index():\n        return flask.render_template('template_filter.html', value='abcd'),type='function_definition'\nline_star:185,line_end:186|char_star:4,char_end:74";
"index,type='identifier'\nline_star:185,line_end:185|char_star:8,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"def index():\n        return flask.render_template('template_filter.html', value='abcd'),type='function_definition'\nline_star:185,line_end:186|char_star:4,char_end:74"->"index,type='identifier'\nline_star:185,line_end:185|char_star:8,char_end:13";
"type='INFORMATION BLOCK'\nline_star:186,line_end:186|char_star:8,char_end:74"[shape="point",fillcolor="#121013",style=filled];
"def index():\n        return flask.render_template('template_filter.html', value='abcd'),type='function_definition'\nline_star:185,line_end:186|char_star:4,char_end:74"->"type='INFORMATION BLOCK'\nline_star:186,line_end:186|char_star:8,char_end:74";
"return flask.render_template('template_filter.html', value='abcd'),type='return_statement'\nline_star:186,line_end:186|char_star:8,char_end:74"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:186,line_end:186|char_star:8,char_end:74"->"return flask.render_template('template_filter.html', value='abcd'),type='return_statement'\nline_star:186,line_end:186|char_star:8,char_end:74";
"assert rv.data == b'dcba',type='assert_statement'\nline_star:189,line_end:189|char_star:4,char_end:29"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:180,line_end:189|char_star:4,char_end:29"->"assert rv.data == b'dcba',type='assert_statement'\nline_star:189,line_end:189|char_star:4,char_end:29";
"rv.data == b'dcba',type='comparison_operator'\nline_star:189,line_end:189|char_star:11,char_end:29"[shape="box",fillcolor="white",style=filled];
"assert rv.data == b'dcba',type='assert_statement'\nline_star:189,line_end:189|char_star:4,char_end:29"->"rv.data == b'dcba',type='comparison_operator'\nline_star:189,line_end:189|char_star:11,char_end:29";
"rv.data,type='attribute'\nline_star:189,line_end:189|char_star:11,char_end:18"[shape="box",fillcolor="white",style=filled];
"rv.data == b'dcba',type='comparison_operator'\nline_star:189,line_end:189|char_star:11,char_end:29"->"rv.data,type='attribute'\nline_star:189,line_end:189|char_star:11,char_end:18";
"rv,type='identifier'\nline_star:189,line_end:189|char_star:11,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"rv.data,type='attribute'\nline_star:189,line_end:189|char_star:11,char_end:18"->"rv,type='identifier'\nline_star:189,line_end:189|char_star:11,char_end:13";
"data,type='identifier'\nline_star:189,line_end:189|char_star:14,char_end:18"[shape="point",fillcolor="#121013",style=filled];
"rv.data,type='attribute'\nline_star:189,line_end:189|char_star:11,char_end:18"->"data,type='identifier'\nline_star:189,line_end:189|char_star:14,char_end:18";
"def test_add_template_filter_with_name_and_template(app, client):\n    def my_reverse(s):\n        return s[::-1]\n\n    app.add_template_filter(my_reverse, 'super_reverse')\n\n    @app.route('/')\n    def index():\n        return flask.render_template('template_filter.html', value='abcd')\n\n    rv = client.get('/')\n    assert rv.data == b'dcba',type='function_definition'\nline_star:192,line_end:203|char_star:0,char_end:29"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_add_template_filter_with_name_and_template(app, client):\n    def my_reverse(s):\n        return s[::-1]\n\n    app.add_template_filter(my_reverse, 'super_reverse')\n\n    @app.route('/')\n    def index():\n        return flask.render_template('template_filter.html', value='abcd')\n\n    rv = client.get('/')\n    assert rv.data == b'dcba',type='function_definition'\nline_star:192,line_end:203|char_star:0,char_end:29";
"test_add_template_filter_with_name_and_template,type='identifier'\nline_star:192,line_end:192|char_star:4,char_end:51"[shape="point",fillcolor="#121013",style=filled];
"def test_add_template_filter_with_name_and_template(app, client):\n    def my_reverse(s):\n        return s[::-1]\n\n    app.add_template_filter(my_reverse, 'super_reverse')\n\n    @app.route('/')\n    def index():\n        return flask.render_template('template_filter.html', value='abcd')\n\n    rv = client.get('/')\n    assert rv.data == b'dcba',type='function_definition'\nline_star:192,line_end:203|char_star:0,char_end:29"->"test_add_template_filter_with_name_and_template,type='identifier'\nline_star:192,line_end:192|char_star:4,char_end:51";
"(app, client),type='parameters'\nline_star:192,line_end:192|char_star:51,char_end:64"[shape="box",fillcolor="white",style=filled];
"def test_add_template_filter_with_name_and_template(app, client):\n    def my_reverse(s):\n        return s[::-1]\n\n    app.add_template_filter(my_reverse, 'super_reverse')\n\n    @app.route('/')\n    def index():\n        return flask.render_template('template_filter.html', value='abcd')\n\n    rv = client.get('/')\n    assert rv.data == b'dcba',type='function_definition'\nline_star:192,line_end:203|char_star:0,char_end:29"->"(app, client),type='parameters'\nline_star:192,line_end:192|char_star:51,char_end:64";
"app,type='identifier'\nline_star:192,line_end:192|char_star:52,char_end:55"[shape="point",fillcolor="#121013",style=filled];
"(app, client),type='parameters'\nline_star:192,line_end:192|char_star:51,char_end:64"->"app,type='identifier'\nline_star:192,line_end:192|char_star:52,char_end:55";
"client,type='identifier'\nline_star:192,line_end:192|char_star:57,char_end:63"[shape="point",fillcolor="#121013",style=filled];
"(app, client),type='parameters'\nline_star:192,line_end:192|char_star:51,char_end:64"->"client,type='identifier'\nline_star:192,line_end:192|char_star:57,char_end:63";
"type='INFORMATION BLOCK'\nline_star:193,line_end:203|char_star:4,char_end:29"[shape="point",fillcolor="#121013",style=filled];
"def test_add_template_filter_with_name_and_template(app, client):\n    def my_reverse(s):\n        return s[::-1]\n\n    app.add_template_filter(my_reverse, 'super_reverse')\n\n    @app.route('/')\n    def index():\n        return flask.render_template('template_filter.html', value='abcd')\n\n    rv = client.get('/')\n    assert rv.data == b'dcba',type='function_definition'\nline_star:192,line_end:203|char_star:0,char_end:29"->"type='INFORMATION BLOCK'\nline_star:193,line_end:203|char_star:4,char_end:29";
"def my_reverse(s):\n        return s[::-1],type='function_definition'\nline_star:193,line_end:194|char_star:4,char_end:22"[shape="box",fillcolor="#cee6b4",style=filled];
"type='INFORMATION BLOCK'\nline_star:193,line_end:203|char_star:4,char_end:29"->"def my_reverse(s):\n        return s[::-1],type='function_definition'\nline_star:193,line_end:194|char_star:4,char_end:22";
"my_reverse,type='identifier'\nline_star:193,line_end:193|char_star:8,char_end:18"[shape="point",fillcolor="#121013",style=filled];
"def my_reverse(s):\n        return s[::-1],type='function_definition'\nline_star:193,line_end:194|char_star:4,char_end:22"->"my_reverse,type='identifier'\nline_star:193,line_end:193|char_star:8,char_end:18";
"(s),type='parameters'\nline_star:193,line_end:193|char_star:18,char_end:21"[shape="box",fillcolor="white",style=filled];
"def my_reverse(s):\n        return s[::-1],type='function_definition'\nline_star:193,line_end:194|char_star:4,char_end:22"->"(s),type='parameters'\nline_star:193,line_end:193|char_star:18,char_end:21";
"s,type='identifier'\nline_star:193,line_end:193|char_star:19,char_end:20"[shape="point",fillcolor="#121013",style=filled];
"(s),type='parameters'\nline_star:193,line_end:193|char_star:18,char_end:21"->"s,type='identifier'\nline_star:193,line_end:193|char_star:19,char_end:20";
"type='INFORMATION BLOCK'\nline_star:194,line_end:194|char_star:8,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"def my_reverse(s):\n        return s[::-1],type='function_definition'\nline_star:193,line_end:194|char_star:4,char_end:22"->"type='INFORMATION BLOCK'\nline_star:194,line_end:194|char_star:8,char_end:22";
"return s[::-1],type='return_statement'\nline_star:194,line_end:194|char_star:8,char_end:22"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:194,line_end:194|char_star:8,char_end:22"->"return s[::-1],type='return_statement'\nline_star:194,line_end:194|char_star:8,char_end:22";
"@app.route('/')\n    def index():\n        return flask.render_template('template_filter.html', value='abcd'),type='decorated_definition'\nline_star:198,line_end:200|char_star:4,char_end:74"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:193,line_end:203|char_star:4,char_end:29"->"@app.route('/')\n    def index():\n        return flask.render_template('template_filter.html', value='abcd'),type='decorated_definition'\nline_star:198,line_end:200|char_star:4,char_end:74";
"@app.route('/'),type='decorator'\nline_star:198,line_end:198|char_star:4,char_end:19"[shape="box",fillcolor="white",style=filled];
"@app.route('/')\n    def index():\n        return flask.render_template('template_filter.html', value='abcd'),type='decorated_definition'\nline_star:198,line_end:200|char_star:4,char_end:74"->"@app.route('/'),type='decorator'\nline_star:198,line_end:198|char_star:4,char_end:19";
"def index():\n        return flask.render_template('template_filter.html', value='abcd'),type='function_definition'\nline_star:199,line_end:200|char_star:4,char_end:74"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.route('/')\n    def index():\n        return flask.render_template('template_filter.html', value='abcd'),type='decorated_definition'\nline_star:198,line_end:200|char_star:4,char_end:74"->"def index():\n        return flask.render_template('template_filter.html', value='abcd'),type='function_definition'\nline_star:199,line_end:200|char_star:4,char_end:74";
"index,type='identifier'\nline_star:199,line_end:199|char_star:8,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"def index():\n        return flask.render_template('template_filter.html', value='abcd'),type='function_definition'\nline_star:199,line_end:200|char_star:4,char_end:74"->"index,type='identifier'\nline_star:199,line_end:199|char_star:8,char_end:13";
"type='INFORMATION BLOCK'\nline_star:200,line_end:200|char_star:8,char_end:74"[shape="point",fillcolor="#121013",style=filled];
"def index():\n        return flask.render_template('template_filter.html', value='abcd'),type='function_definition'\nline_star:199,line_end:200|char_star:4,char_end:74"->"type='INFORMATION BLOCK'\nline_star:200,line_end:200|char_star:8,char_end:74";
"return flask.render_template('template_filter.html', value='abcd'),type='return_statement'\nline_star:200,line_end:200|char_star:8,char_end:74"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:200,line_end:200|char_star:8,char_end:74"->"return flask.render_template('template_filter.html', value='abcd'),type='return_statement'\nline_star:200,line_end:200|char_star:8,char_end:74";
"assert rv.data == b'dcba',type='assert_statement'\nline_star:203,line_end:203|char_star:4,char_end:29"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:193,line_end:203|char_star:4,char_end:29"->"assert rv.data == b'dcba',type='assert_statement'\nline_star:203,line_end:203|char_star:4,char_end:29";
"rv.data == b'dcba',type='comparison_operator'\nline_star:203,line_end:203|char_star:11,char_end:29"[shape="box",fillcolor="white",style=filled];
"assert rv.data == b'dcba',type='assert_statement'\nline_star:203,line_end:203|char_star:4,char_end:29"->"rv.data == b'dcba',type='comparison_operator'\nline_star:203,line_end:203|char_star:11,char_end:29";
"rv.data,type='attribute'\nline_star:203,line_end:203|char_star:11,char_end:18"[shape="box",fillcolor="white",style=filled];
"rv.data == b'dcba',type='comparison_operator'\nline_star:203,line_end:203|char_star:11,char_end:29"->"rv.data,type='attribute'\nline_star:203,line_end:203|char_star:11,char_end:18";
"rv,type='identifier'\nline_star:203,line_end:203|char_star:11,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"rv.data,type='attribute'\nline_star:203,line_end:203|char_star:11,char_end:18"->"rv,type='identifier'\nline_star:203,line_end:203|char_star:11,char_end:13";
"data,type='identifier'\nline_star:203,line_end:203|char_star:14,char_end:18"[shape="point",fillcolor="#121013",style=filled];
"rv.data,type='attribute'\nline_star:203,line_end:203|char_star:11,char_end:18"->"data,type='identifier'\nline_star:203,line_end:203|char_star:14,char_end:18";
"def test_template_test(app):\n    @app.template_test()\n    def boolean(value):\n        return isinstance(value, bool)\n\n    assert 'boolean' in app.jinja_env.tests.keys()\n    assert app.jinja_env.tests['boolean'] == boolean\n    assert app.jinja_env.tests['boolean'](False),type='function_definition'\nline_star:206,line_end:213|char_star:0,char_end:48"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_template_test(app):\n    @app.template_test()\n    def boolean(value):\n        return isinstance(value, bool)\n\n    assert 'boolean' in app.jinja_env.tests.keys()\n    assert app.jinja_env.tests['boolean'] == boolean\n    assert app.jinja_env.tests['boolean'](False),type='function_definition'\nline_star:206,line_end:213|char_star:0,char_end:48";
"test_template_test,type='identifier'\nline_star:206,line_end:206|char_star:4,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"def test_template_test(app):\n    @app.template_test()\n    def boolean(value):\n        return isinstance(value, bool)\n\n    assert 'boolean' in app.jinja_env.tests.keys()\n    assert app.jinja_env.tests['boolean'] == boolean\n    assert app.jinja_env.tests['boolean'](False),type='function_definition'\nline_star:206,line_end:213|char_star:0,char_end:48"->"test_template_test,type='identifier'\nline_star:206,line_end:206|char_star:4,char_end:22";
"(app),type='parameters'\nline_star:206,line_end:206|char_star:22,char_end:27"[shape="box",fillcolor="white",style=filled];
"def test_template_test(app):\n    @app.template_test()\n    def boolean(value):\n        return isinstance(value, bool)\n\n    assert 'boolean' in app.jinja_env.tests.keys()\n    assert app.jinja_env.tests['boolean'] == boolean\n    assert app.jinja_env.tests['boolean'](False),type='function_definition'\nline_star:206,line_end:213|char_star:0,char_end:48"->"(app),type='parameters'\nline_star:206,line_end:206|char_star:22,char_end:27";
"app,type='identifier'\nline_star:206,line_end:206|char_star:23,char_end:26"[shape="point",fillcolor="#121013",style=filled];
"(app),type='parameters'\nline_star:206,line_end:206|char_star:22,char_end:27"->"app,type='identifier'\nline_star:206,line_end:206|char_star:23,char_end:26";
"type='INFORMATION BLOCK'\nline_star:207,line_end:213|char_star:4,char_end:48"[shape="point",fillcolor="#121013",style=filled];
"def test_template_test(app):\n    @app.template_test()\n    def boolean(value):\n        return isinstance(value, bool)\n\n    assert 'boolean' in app.jinja_env.tests.keys()\n    assert app.jinja_env.tests['boolean'] == boolean\n    assert app.jinja_env.tests['boolean'](False),type='function_definition'\nline_star:206,line_end:213|char_star:0,char_end:48"->"type='INFORMATION BLOCK'\nline_star:207,line_end:213|char_star:4,char_end:48";
"@app.template_test()\n    def boolean(value):\n        return isinstance(value, bool),type='decorated_definition'\nline_star:207,line_end:209|char_star:4,char_end:38"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:207,line_end:213|char_star:4,char_end:48"->"@app.template_test()\n    def boolean(value):\n        return isinstance(value, bool),type='decorated_definition'\nline_star:207,line_end:209|char_star:4,char_end:38";
"@app.template_test(),type='decorator'\nline_star:207,line_end:207|char_star:4,char_end:24"[shape="box",fillcolor="white",style=filled];
"@app.template_test()\n    def boolean(value):\n        return isinstance(value, bool),type='decorated_definition'\nline_star:207,line_end:209|char_star:4,char_end:38"->"@app.template_test(),type='decorator'\nline_star:207,line_end:207|char_star:4,char_end:24";
"def boolean(value):\n        return isinstance(value, bool),type='function_definition'\nline_star:208,line_end:209|char_star:4,char_end:38"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.template_test()\n    def boolean(value):\n        return isinstance(value, bool),type='decorated_definition'\nline_star:207,line_end:209|char_star:4,char_end:38"->"def boolean(value):\n        return isinstance(value, bool),type='function_definition'\nline_star:208,line_end:209|char_star:4,char_end:38";
"boolean,type='identifier'\nline_star:208,line_end:208|char_star:8,char_end:15"[shape="point",fillcolor="#121013",style=filled];
"def boolean(value):\n        return isinstance(value, bool),type='function_definition'\nline_star:208,line_end:209|char_star:4,char_end:38"->"boolean,type='identifier'\nline_star:208,line_end:208|char_star:8,char_end:15";
"(value),type='parameters'\nline_star:208,line_end:208|char_star:15,char_end:22"[shape="box",fillcolor="white",style=filled];
"def boolean(value):\n        return isinstance(value, bool),type='function_definition'\nline_star:208,line_end:209|char_star:4,char_end:38"->"(value),type='parameters'\nline_star:208,line_end:208|char_star:15,char_end:22";
"value,type='identifier'\nline_star:208,line_end:208|char_star:16,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"(value),type='parameters'\nline_star:208,line_end:208|char_star:15,char_end:22"->"value,type='identifier'\nline_star:208,line_end:208|char_star:16,char_end:21";
"type='INFORMATION BLOCK'\nline_star:209,line_end:209|char_star:8,char_end:38"[shape="point",fillcolor="#121013",style=filled];
"def boolean(value):\n        return isinstance(value, bool),type='function_definition'\nline_star:208,line_end:209|char_star:4,char_end:38"->"type='INFORMATION BLOCK'\nline_star:209,line_end:209|char_star:8,char_end:38";
"return isinstance(value, bool),type='return_statement'\nline_star:209,line_end:209|char_star:8,char_end:38"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:209,line_end:209|char_star:8,char_end:38"->"return isinstance(value, bool),type='return_statement'\nline_star:209,line_end:209|char_star:8,char_end:38";
"assert 'boolean' in app.jinja_env.tests.keys(),type='assert_statement'\nline_star:211,line_end:211|char_star:4,char_end:50"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:207,line_end:213|char_star:4,char_end:48"->"assert 'boolean' in app.jinja_env.tests.keys(),type='assert_statement'\nline_star:211,line_end:211|char_star:4,char_end:50";
"'boolean' in app.jinja_env.tests.keys(),type='comparison_operator'\nline_star:211,line_end:211|char_star:11,char_end:50"[shape="box",fillcolor="white",style=filled];
"assert 'boolean' in app.jinja_env.tests.keys(),type='assert_statement'\nline_star:211,line_end:211|char_star:4,char_end:50"->"'boolean' in app.jinja_env.tests.keys(),type='comparison_operator'\nline_star:211,line_end:211|char_star:11,char_end:50";
"app.jinja_env.tests.keys(),type='call'\nline_star:211,line_end:211|char_star:24,char_end:50"[shape="box",fillcolor="white",style=filled];
"'boolean' in app.jinja_env.tests.keys(),type='comparison_operator'\nline_star:211,line_end:211|char_star:11,char_end:50"->"app.jinja_env.tests.keys(),type='call'\nline_star:211,line_end:211|char_star:24,char_end:50";
"app.jinja_env.tests.keys,type='attribute'\nline_star:211,line_end:211|char_star:24,char_end:48"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.tests.keys(),type='call'\nline_star:211,line_end:211|char_star:24,char_end:50"->"app.jinja_env.tests.keys,type='attribute'\nline_star:211,line_end:211|char_star:24,char_end:48";
"app.jinja_env.tests,type='attribute'\nline_star:211,line_end:211|char_star:24,char_end:43"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.tests.keys,type='attribute'\nline_star:211,line_end:211|char_star:24,char_end:48"->"app.jinja_env.tests,type='attribute'\nline_star:211,line_end:211|char_star:24,char_end:43";
"app.jinja_env,type='attribute'\nline_star:211,line_end:211|char_star:24,char_end:37"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.tests,type='attribute'\nline_star:211,line_end:211|char_star:24,char_end:43"->"app.jinja_env,type='attribute'\nline_star:211,line_end:211|char_star:24,char_end:37";
"app,type='identifier'\nline_star:211,line_end:211|char_star:24,char_end:27"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env,type='attribute'\nline_star:211,line_end:211|char_star:24,char_end:37"->"app,type='identifier'\nline_star:211,line_end:211|char_star:24,char_end:27";
"jinja_env,type='identifier'\nline_star:211,line_end:211|char_star:28,char_end:37"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env,type='attribute'\nline_star:211,line_end:211|char_star:24,char_end:37"->"jinja_env,type='identifier'\nline_star:211,line_end:211|char_star:28,char_end:37";
"tests,type='identifier'\nline_star:211,line_end:211|char_star:38,char_end:43"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env.tests,type='attribute'\nline_star:211,line_end:211|char_star:24,char_end:43"->"tests,type='identifier'\nline_star:211,line_end:211|char_star:38,char_end:43";
"keys,type='identifier'\nline_star:211,line_end:211|char_star:44,char_end:48"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env.tests.keys,type='attribute'\nline_star:211,line_end:211|char_star:24,char_end:48"->"keys,type='identifier'\nline_star:211,line_end:211|char_star:44,char_end:48";
"assert app.jinja_env.tests['boolean'] == boolean,type='assert_statement'\nline_star:212,line_end:212|char_star:4,char_end:52"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:207,line_end:213|char_star:4,char_end:48"->"assert app.jinja_env.tests['boolean'] == boolean,type='assert_statement'\nline_star:212,line_end:212|char_star:4,char_end:52";
"app.jinja_env.tests['boolean'] == boolean,type='comparison_operator'\nline_star:212,line_end:212|char_star:11,char_end:52"[shape="box",fillcolor="white",style=filled];
"assert app.jinja_env.tests['boolean'] == boolean,type='assert_statement'\nline_star:212,line_end:212|char_star:4,char_end:52"->"app.jinja_env.tests['boolean'] == boolean,type='comparison_operator'\nline_star:212,line_end:212|char_star:11,char_end:52";
"app.jinja_env.tests['boolean'],type='subscript'\nline_star:212,line_end:212|char_star:11,char_end:41"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.tests['boolean'] == boolean,type='comparison_operator'\nline_star:212,line_end:212|char_star:11,char_end:52"->"app.jinja_env.tests['boolean'],type='subscript'\nline_star:212,line_end:212|char_star:11,char_end:41";
"app.jinja_env.tests,type='attribute'\nline_star:212,line_end:212|char_star:11,char_end:30"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.tests['boolean'],type='subscript'\nline_star:212,line_end:212|char_star:11,char_end:41"->"app.jinja_env.tests,type='attribute'\nline_star:212,line_end:212|char_star:11,char_end:30";
"app.jinja_env,type='attribute'\nline_star:212,line_end:212|char_star:11,char_end:24"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.tests,type='attribute'\nline_star:212,line_end:212|char_star:11,char_end:30"->"app.jinja_env,type='attribute'\nline_star:212,line_end:212|char_star:11,char_end:24";
"app,type='identifier'\nline_star:212,line_end:212|char_star:11,char_end:14"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env,type='attribute'\nline_star:212,line_end:212|char_star:11,char_end:24"->"app,type='identifier'\nline_star:212,line_end:212|char_star:11,char_end:14";
"jinja_env,type='identifier'\nline_star:212,line_end:212|char_star:15,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env,type='attribute'\nline_star:212,line_end:212|char_star:11,char_end:24"->"jinja_env,type='identifier'\nline_star:212,line_end:212|char_star:15,char_end:24";
"tests,type='identifier'\nline_star:212,line_end:212|char_star:25,char_end:30"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env.tests,type='attribute'\nline_star:212,line_end:212|char_star:11,char_end:30"->"tests,type='identifier'\nline_star:212,line_end:212|char_star:25,char_end:30";
"boolean,type='identifier'\nline_star:212,line_end:212|char_star:45,char_end:52"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env.tests['boolean'] == boolean,type='comparison_operator'\nline_star:212,line_end:212|char_star:11,char_end:52"->"boolean,type='identifier'\nline_star:212,line_end:212|char_star:45,char_end:52";
"assert app.jinja_env.tests['boolean'](False),type='assert_statement'\nline_star:213,line_end:213|char_star:4,char_end:48"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:207,line_end:213|char_star:4,char_end:48"->"assert app.jinja_env.tests['boolean'](False),type='assert_statement'\nline_star:213,line_end:213|char_star:4,char_end:48";
"app.jinja_env.tests['boolean'](False),type='call'\nline_star:213,line_end:213|char_star:11,char_end:48"[shape="box",fillcolor="white",style=filled];
"assert app.jinja_env.tests['boolean'](False),type='assert_statement'\nline_star:213,line_end:213|char_star:4,char_end:48"->"app.jinja_env.tests['boolean'](False),type='call'\nline_star:213,line_end:213|char_star:11,char_end:48";
"app.jinja_env.tests['boolean'],type='subscript'\nline_star:213,line_end:213|char_star:11,char_end:41"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.tests['boolean'](False),type='call'\nline_star:213,line_end:213|char_star:11,char_end:48"->"app.jinja_env.tests['boolean'],type='subscript'\nline_star:213,line_end:213|char_star:11,char_end:41";
"app.jinja_env.tests,type='attribute'\nline_star:213,line_end:213|char_star:11,char_end:30"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.tests['boolean'],type='subscript'\nline_star:213,line_end:213|char_star:11,char_end:41"->"app.jinja_env.tests,type='attribute'\nline_star:213,line_end:213|char_star:11,char_end:30";
"app.jinja_env,type='attribute'\nline_star:213,line_end:213|char_star:11,char_end:24"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.tests,type='attribute'\nline_star:213,line_end:213|char_star:11,char_end:30"->"app.jinja_env,type='attribute'\nline_star:213,line_end:213|char_star:11,char_end:24";
"app,type='identifier'\nline_star:213,line_end:213|char_star:11,char_end:14"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env,type='attribute'\nline_star:213,line_end:213|char_star:11,char_end:24"->"app,type='identifier'\nline_star:213,line_end:213|char_star:11,char_end:14";
"jinja_env,type='identifier'\nline_star:213,line_end:213|char_star:15,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env,type='attribute'\nline_star:213,line_end:213|char_star:11,char_end:24"->"jinja_env,type='identifier'\nline_star:213,line_end:213|char_star:15,char_end:24";
"tests,type='identifier'\nline_star:213,line_end:213|char_star:25,char_end:30"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env.tests,type='attribute'\nline_star:213,line_end:213|char_star:11,char_end:30"->"tests,type='identifier'\nline_star:213,line_end:213|char_star:25,char_end:30";
"(False),type='argument_list'\nline_star:213,line_end:213|char_star:41,char_end:48"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.tests['boolean'](False),type='call'\nline_star:213,line_end:213|char_star:11,char_end:48"->"(False),type='argument_list'\nline_star:213,line_end:213|char_star:41,char_end:48";
"def test_add_template_test(app):\n    def boolean(value):\n        return isinstance(value, bool)\n\n    app.add_template_test(boolean)\n    assert 'boolean' in app.jinja_env.tests.keys()\n    assert app.jinja_env.tests['boolean'] == boolean\n    assert app.jinja_env.tests['boolean'](False),type='function_definition'\nline_star:216,line_end:223|char_star:0,char_end:48"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_add_template_test(app):\n    def boolean(value):\n        return isinstance(value, bool)\n\n    app.add_template_test(boolean)\n    assert 'boolean' in app.jinja_env.tests.keys()\n    assert app.jinja_env.tests['boolean'] == boolean\n    assert app.jinja_env.tests['boolean'](False),type='function_definition'\nline_star:216,line_end:223|char_star:0,char_end:48";
"test_add_template_test,type='identifier'\nline_star:216,line_end:216|char_star:4,char_end:26"[shape="point",fillcolor="#121013",style=filled];
"def test_add_template_test(app):\n    def boolean(value):\n        return isinstance(value, bool)\n\n    app.add_template_test(boolean)\n    assert 'boolean' in app.jinja_env.tests.keys()\n    assert app.jinja_env.tests['boolean'] == boolean\n    assert app.jinja_env.tests['boolean'](False),type='function_definition'\nline_star:216,line_end:223|char_star:0,char_end:48"->"test_add_template_test,type='identifier'\nline_star:216,line_end:216|char_star:4,char_end:26";
"(app),type='parameters'\nline_star:216,line_end:216|char_star:26,char_end:31"[shape="box",fillcolor="white",style=filled];
"def test_add_template_test(app):\n    def boolean(value):\n        return isinstance(value, bool)\n\n    app.add_template_test(boolean)\n    assert 'boolean' in app.jinja_env.tests.keys()\n    assert app.jinja_env.tests['boolean'] == boolean\n    assert app.jinja_env.tests['boolean'](False),type='function_definition'\nline_star:216,line_end:223|char_star:0,char_end:48"->"(app),type='parameters'\nline_star:216,line_end:216|char_star:26,char_end:31";
"app,type='identifier'\nline_star:216,line_end:216|char_star:27,char_end:30"[shape="point",fillcolor="#121013",style=filled];
"(app),type='parameters'\nline_star:216,line_end:216|char_star:26,char_end:31"->"app,type='identifier'\nline_star:216,line_end:216|char_star:27,char_end:30";
"type='INFORMATION BLOCK'\nline_star:217,line_end:223|char_star:4,char_end:48"[shape="point",fillcolor="#121013",style=filled];
"def test_add_template_test(app):\n    def boolean(value):\n        return isinstance(value, bool)\n\n    app.add_template_test(boolean)\n    assert 'boolean' in app.jinja_env.tests.keys()\n    assert app.jinja_env.tests['boolean'] == boolean\n    assert app.jinja_env.tests['boolean'](False),type='function_definition'\nline_star:216,line_end:223|char_star:0,char_end:48"->"type='INFORMATION BLOCK'\nline_star:217,line_end:223|char_star:4,char_end:48";
"def boolean(value):\n        return isinstance(value, bool),type='function_definition'\nline_star:217,line_end:218|char_star:4,char_end:38"[shape="box",fillcolor="#cee6b4",style=filled];
"type='INFORMATION BLOCK'\nline_star:217,line_end:223|char_star:4,char_end:48"->"def boolean(value):\n        return isinstance(value, bool),type='function_definition'\nline_star:217,line_end:218|char_star:4,char_end:38";
"boolean,type='identifier'\nline_star:217,line_end:217|char_star:8,char_end:15"[shape="point",fillcolor="#121013",style=filled];
"def boolean(value):\n        return isinstance(value, bool),type='function_definition'\nline_star:217,line_end:218|char_star:4,char_end:38"->"boolean,type='identifier'\nline_star:217,line_end:217|char_star:8,char_end:15";
"(value),type='parameters'\nline_star:217,line_end:217|char_star:15,char_end:22"[shape="box",fillcolor="white",style=filled];
"def boolean(value):\n        return isinstance(value, bool),type='function_definition'\nline_star:217,line_end:218|char_star:4,char_end:38"->"(value),type='parameters'\nline_star:217,line_end:217|char_star:15,char_end:22";
"value,type='identifier'\nline_star:217,line_end:217|char_star:16,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"(value),type='parameters'\nline_star:217,line_end:217|char_star:15,char_end:22"->"value,type='identifier'\nline_star:217,line_end:217|char_star:16,char_end:21";
"type='INFORMATION BLOCK'\nline_star:218,line_end:218|char_star:8,char_end:38"[shape="point",fillcolor="#121013",style=filled];
"def boolean(value):\n        return isinstance(value, bool),type='function_definition'\nline_star:217,line_end:218|char_star:4,char_end:38"->"type='INFORMATION BLOCK'\nline_star:218,line_end:218|char_star:8,char_end:38";
"return isinstance(value, bool),type='return_statement'\nline_star:218,line_end:218|char_star:8,char_end:38"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:218,line_end:218|char_star:8,char_end:38"->"return isinstance(value, bool),type='return_statement'\nline_star:218,line_end:218|char_star:8,char_end:38";
"assert 'boolean' in app.jinja_env.tests.keys(),type='assert_statement'\nline_star:221,line_end:221|char_star:4,char_end:50"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:217,line_end:223|char_star:4,char_end:48"->"assert 'boolean' in app.jinja_env.tests.keys(),type='assert_statement'\nline_star:221,line_end:221|char_star:4,char_end:50";
"'boolean' in app.jinja_env.tests.keys(),type='comparison_operator'\nline_star:221,line_end:221|char_star:11,char_end:50"[shape="box",fillcolor="white",style=filled];
"assert 'boolean' in app.jinja_env.tests.keys(),type='assert_statement'\nline_star:221,line_end:221|char_star:4,char_end:50"->"'boolean' in app.jinja_env.tests.keys(),type='comparison_operator'\nline_star:221,line_end:221|char_star:11,char_end:50";
"app.jinja_env.tests.keys(),type='call'\nline_star:221,line_end:221|char_star:24,char_end:50"[shape="box",fillcolor="white",style=filled];
"'boolean' in app.jinja_env.tests.keys(),type='comparison_operator'\nline_star:221,line_end:221|char_star:11,char_end:50"->"app.jinja_env.tests.keys(),type='call'\nline_star:221,line_end:221|char_star:24,char_end:50";
"app.jinja_env.tests.keys,type='attribute'\nline_star:221,line_end:221|char_star:24,char_end:48"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.tests.keys(),type='call'\nline_star:221,line_end:221|char_star:24,char_end:50"->"app.jinja_env.tests.keys,type='attribute'\nline_star:221,line_end:221|char_star:24,char_end:48";
"app.jinja_env.tests,type='attribute'\nline_star:221,line_end:221|char_star:24,char_end:43"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.tests.keys,type='attribute'\nline_star:221,line_end:221|char_star:24,char_end:48"->"app.jinja_env.tests,type='attribute'\nline_star:221,line_end:221|char_star:24,char_end:43";
"app.jinja_env,type='attribute'\nline_star:221,line_end:221|char_star:24,char_end:37"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.tests,type='attribute'\nline_star:221,line_end:221|char_star:24,char_end:43"->"app.jinja_env,type='attribute'\nline_star:221,line_end:221|char_star:24,char_end:37";
"app,type='identifier'\nline_star:221,line_end:221|char_star:24,char_end:27"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env,type='attribute'\nline_star:221,line_end:221|char_star:24,char_end:37"->"app,type='identifier'\nline_star:221,line_end:221|char_star:24,char_end:27";
"jinja_env,type='identifier'\nline_star:221,line_end:221|char_star:28,char_end:37"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env,type='attribute'\nline_star:221,line_end:221|char_star:24,char_end:37"->"jinja_env,type='identifier'\nline_star:221,line_end:221|char_star:28,char_end:37";
"tests,type='identifier'\nline_star:221,line_end:221|char_star:38,char_end:43"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env.tests,type='attribute'\nline_star:221,line_end:221|char_star:24,char_end:43"->"tests,type='identifier'\nline_star:221,line_end:221|char_star:38,char_end:43";
"keys,type='identifier'\nline_star:221,line_end:221|char_star:44,char_end:48"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env.tests.keys,type='attribute'\nline_star:221,line_end:221|char_star:24,char_end:48"->"keys,type='identifier'\nline_star:221,line_end:221|char_star:44,char_end:48";
"assert app.jinja_env.tests['boolean'] == boolean,type='assert_statement'\nline_star:222,line_end:222|char_star:4,char_end:52"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:217,line_end:223|char_star:4,char_end:48"->"assert app.jinja_env.tests['boolean'] == boolean,type='assert_statement'\nline_star:222,line_end:222|char_star:4,char_end:52";
"app.jinja_env.tests['boolean'] == boolean,type='comparison_operator'\nline_star:222,line_end:222|char_star:11,char_end:52"[shape="box",fillcolor="white",style=filled];
"assert app.jinja_env.tests['boolean'] == boolean,type='assert_statement'\nline_star:222,line_end:222|char_star:4,char_end:52"->"app.jinja_env.tests['boolean'] == boolean,type='comparison_operator'\nline_star:222,line_end:222|char_star:11,char_end:52";
"app.jinja_env.tests['boolean'],type='subscript'\nline_star:222,line_end:222|char_star:11,char_end:41"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.tests['boolean'] == boolean,type='comparison_operator'\nline_star:222,line_end:222|char_star:11,char_end:52"->"app.jinja_env.tests['boolean'],type='subscript'\nline_star:222,line_end:222|char_star:11,char_end:41";
"app.jinja_env.tests,type='attribute'\nline_star:222,line_end:222|char_star:11,char_end:30"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.tests['boolean'],type='subscript'\nline_star:222,line_end:222|char_star:11,char_end:41"->"app.jinja_env.tests,type='attribute'\nline_star:222,line_end:222|char_star:11,char_end:30";
"app.jinja_env,type='attribute'\nline_star:222,line_end:222|char_star:11,char_end:24"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.tests,type='attribute'\nline_star:222,line_end:222|char_star:11,char_end:30"->"app.jinja_env,type='attribute'\nline_star:222,line_end:222|char_star:11,char_end:24";
"app,type='identifier'\nline_star:222,line_end:222|char_star:11,char_end:14"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env,type='attribute'\nline_star:222,line_end:222|char_star:11,char_end:24"->"app,type='identifier'\nline_star:222,line_end:222|char_star:11,char_end:14";
"jinja_env,type='identifier'\nline_star:222,line_end:222|char_star:15,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env,type='attribute'\nline_star:222,line_end:222|char_star:11,char_end:24"->"jinja_env,type='identifier'\nline_star:222,line_end:222|char_star:15,char_end:24";
"tests,type='identifier'\nline_star:222,line_end:222|char_star:25,char_end:30"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env.tests,type='attribute'\nline_star:222,line_end:222|char_star:11,char_end:30"->"tests,type='identifier'\nline_star:222,line_end:222|char_star:25,char_end:30";
"boolean,type='identifier'\nline_star:222,line_end:222|char_star:45,char_end:52"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env.tests['boolean'] == boolean,type='comparison_operator'\nline_star:222,line_end:222|char_star:11,char_end:52"->"boolean,type='identifier'\nline_star:222,line_end:222|char_star:45,char_end:52";
"assert app.jinja_env.tests['boolean'](False),type='assert_statement'\nline_star:223,line_end:223|char_star:4,char_end:48"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:217,line_end:223|char_star:4,char_end:48"->"assert app.jinja_env.tests['boolean'](False),type='assert_statement'\nline_star:223,line_end:223|char_star:4,char_end:48";
"app.jinja_env.tests['boolean'](False),type='call'\nline_star:223,line_end:223|char_star:11,char_end:48"[shape="box",fillcolor="white",style=filled];
"assert app.jinja_env.tests['boolean'](False),type='assert_statement'\nline_star:223,line_end:223|char_star:4,char_end:48"->"app.jinja_env.tests['boolean'](False),type='call'\nline_star:223,line_end:223|char_star:11,char_end:48";
"app.jinja_env.tests['boolean'],type='subscript'\nline_star:223,line_end:223|char_star:11,char_end:41"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.tests['boolean'](False),type='call'\nline_star:223,line_end:223|char_star:11,char_end:48"->"app.jinja_env.tests['boolean'],type='subscript'\nline_star:223,line_end:223|char_star:11,char_end:41";
"app.jinja_env.tests,type='attribute'\nline_star:223,line_end:223|char_star:11,char_end:30"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.tests['boolean'],type='subscript'\nline_star:223,line_end:223|char_star:11,char_end:41"->"app.jinja_env.tests,type='attribute'\nline_star:223,line_end:223|char_star:11,char_end:30";
"app.jinja_env,type='attribute'\nline_star:223,line_end:223|char_star:11,char_end:24"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.tests,type='attribute'\nline_star:223,line_end:223|char_star:11,char_end:30"->"app.jinja_env,type='attribute'\nline_star:223,line_end:223|char_star:11,char_end:24";
"app,type='identifier'\nline_star:223,line_end:223|char_star:11,char_end:14"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env,type='attribute'\nline_star:223,line_end:223|char_star:11,char_end:24"->"app,type='identifier'\nline_star:223,line_end:223|char_star:11,char_end:14";
"jinja_env,type='identifier'\nline_star:223,line_end:223|char_star:15,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env,type='attribute'\nline_star:223,line_end:223|char_star:11,char_end:24"->"jinja_env,type='identifier'\nline_star:223,line_end:223|char_star:15,char_end:24";
"tests,type='identifier'\nline_star:223,line_end:223|char_star:25,char_end:30"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env.tests,type='attribute'\nline_star:223,line_end:223|char_star:11,char_end:30"->"tests,type='identifier'\nline_star:223,line_end:223|char_star:25,char_end:30";
"(False),type='argument_list'\nline_star:223,line_end:223|char_star:41,char_end:48"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.tests['boolean'](False),type='call'\nline_star:223,line_end:223|char_star:11,char_end:48"->"(False),type='argument_list'\nline_star:223,line_end:223|char_star:41,char_end:48";
"def test_template_test_with_name(app):\n    @app.template_test('boolean')\n    def is_boolean(value):\n        return isinstance(value, bool)\n\n    assert 'boolean' in app.jinja_env.tests.keys()\n    assert app.jinja_env.tests['boolean'] == is_boolean\n    assert app.jinja_env.tests['boolean'](False),type='function_definition'\nline_star:226,line_end:233|char_star:0,char_end:48"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_template_test_with_name(app):\n    @app.template_test('boolean')\n    def is_boolean(value):\n        return isinstance(value, bool)\n\n    assert 'boolean' in app.jinja_env.tests.keys()\n    assert app.jinja_env.tests['boolean'] == is_boolean\n    assert app.jinja_env.tests['boolean'](False),type='function_definition'\nline_star:226,line_end:233|char_star:0,char_end:48";
"test_template_test_with_name,type='identifier'\nline_star:226,line_end:226|char_star:4,char_end:32"[shape="point",fillcolor="#121013",style=filled];
"def test_template_test_with_name(app):\n    @app.template_test('boolean')\n    def is_boolean(value):\n        return isinstance(value, bool)\n\n    assert 'boolean' in app.jinja_env.tests.keys()\n    assert app.jinja_env.tests['boolean'] == is_boolean\n    assert app.jinja_env.tests['boolean'](False),type='function_definition'\nline_star:226,line_end:233|char_star:0,char_end:48"->"test_template_test_with_name,type='identifier'\nline_star:226,line_end:226|char_star:4,char_end:32";
"(app),type='parameters'\nline_star:226,line_end:226|char_star:32,char_end:37"[shape="box",fillcolor="white",style=filled];
"def test_template_test_with_name(app):\n    @app.template_test('boolean')\n    def is_boolean(value):\n        return isinstance(value, bool)\n\n    assert 'boolean' in app.jinja_env.tests.keys()\n    assert app.jinja_env.tests['boolean'] == is_boolean\n    assert app.jinja_env.tests['boolean'](False),type='function_definition'\nline_star:226,line_end:233|char_star:0,char_end:48"->"(app),type='parameters'\nline_star:226,line_end:226|char_star:32,char_end:37";
"app,type='identifier'\nline_star:226,line_end:226|char_star:33,char_end:36"[shape="point",fillcolor="#121013",style=filled];
"(app),type='parameters'\nline_star:226,line_end:226|char_star:32,char_end:37"->"app,type='identifier'\nline_star:226,line_end:226|char_star:33,char_end:36";
"type='INFORMATION BLOCK'\nline_star:227,line_end:233|char_star:4,char_end:48"[shape="point",fillcolor="#121013",style=filled];
"def test_template_test_with_name(app):\n    @app.template_test('boolean')\n    def is_boolean(value):\n        return isinstance(value, bool)\n\n    assert 'boolean' in app.jinja_env.tests.keys()\n    assert app.jinja_env.tests['boolean'] == is_boolean\n    assert app.jinja_env.tests['boolean'](False),type='function_definition'\nline_star:226,line_end:233|char_star:0,char_end:48"->"type='INFORMATION BLOCK'\nline_star:227,line_end:233|char_star:4,char_end:48";
"@app.template_test('boolean')\n    def is_boolean(value):\n        return isinstance(value, bool),type='decorated_definition'\nline_star:227,line_end:229|char_star:4,char_end:38"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:227,line_end:233|char_star:4,char_end:48"->"@app.template_test('boolean')\n    def is_boolean(value):\n        return isinstance(value, bool),type='decorated_definition'\nline_star:227,line_end:229|char_star:4,char_end:38";
"@app.template_test('boolean'),type='decorator'\nline_star:227,line_end:227|char_star:4,char_end:33"[shape="box",fillcolor="white",style=filled];
"@app.template_test('boolean')\n    def is_boolean(value):\n        return isinstance(value, bool),type='decorated_definition'\nline_star:227,line_end:229|char_star:4,char_end:38"->"@app.template_test('boolean'),type='decorator'\nline_star:227,line_end:227|char_star:4,char_end:33";
"def is_boolean(value):\n        return isinstance(value, bool),type='function_definition'\nline_star:228,line_end:229|char_star:4,char_end:38"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.template_test('boolean')\n    def is_boolean(value):\n        return isinstance(value, bool),type='decorated_definition'\nline_star:227,line_end:229|char_star:4,char_end:38"->"def is_boolean(value):\n        return isinstance(value, bool),type='function_definition'\nline_star:228,line_end:229|char_star:4,char_end:38";
"is_boolean,type='identifier'\nline_star:228,line_end:228|char_star:8,char_end:18"[shape="point",fillcolor="#121013",style=filled];
"def is_boolean(value):\n        return isinstance(value, bool),type='function_definition'\nline_star:228,line_end:229|char_star:4,char_end:38"->"is_boolean,type='identifier'\nline_star:228,line_end:228|char_star:8,char_end:18";
"(value),type='parameters'\nline_star:228,line_end:228|char_star:18,char_end:25"[shape="box",fillcolor="white",style=filled];
"def is_boolean(value):\n        return isinstance(value, bool),type='function_definition'\nline_star:228,line_end:229|char_star:4,char_end:38"->"(value),type='parameters'\nline_star:228,line_end:228|char_star:18,char_end:25";
"value,type='identifier'\nline_star:228,line_end:228|char_star:19,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"(value),type='parameters'\nline_star:228,line_end:228|char_star:18,char_end:25"->"value,type='identifier'\nline_star:228,line_end:228|char_star:19,char_end:24";
"type='INFORMATION BLOCK'\nline_star:229,line_end:229|char_star:8,char_end:38"[shape="point",fillcolor="#121013",style=filled];
"def is_boolean(value):\n        return isinstance(value, bool),type='function_definition'\nline_star:228,line_end:229|char_star:4,char_end:38"->"type='INFORMATION BLOCK'\nline_star:229,line_end:229|char_star:8,char_end:38";
"return isinstance(value, bool),type='return_statement'\nline_star:229,line_end:229|char_star:8,char_end:38"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:229,line_end:229|char_star:8,char_end:38"->"return isinstance(value, bool),type='return_statement'\nline_star:229,line_end:229|char_star:8,char_end:38";
"assert 'boolean' in app.jinja_env.tests.keys(),type='assert_statement'\nline_star:231,line_end:231|char_star:4,char_end:50"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:227,line_end:233|char_star:4,char_end:48"->"assert 'boolean' in app.jinja_env.tests.keys(),type='assert_statement'\nline_star:231,line_end:231|char_star:4,char_end:50";
"'boolean' in app.jinja_env.tests.keys(),type='comparison_operator'\nline_star:231,line_end:231|char_star:11,char_end:50"[shape="box",fillcolor="white",style=filled];
"assert 'boolean' in app.jinja_env.tests.keys(),type='assert_statement'\nline_star:231,line_end:231|char_star:4,char_end:50"->"'boolean' in app.jinja_env.tests.keys(),type='comparison_operator'\nline_star:231,line_end:231|char_star:11,char_end:50";
"app.jinja_env.tests.keys(),type='call'\nline_star:231,line_end:231|char_star:24,char_end:50"[shape="box",fillcolor="white",style=filled];
"'boolean' in app.jinja_env.tests.keys(),type='comparison_operator'\nline_star:231,line_end:231|char_star:11,char_end:50"->"app.jinja_env.tests.keys(),type='call'\nline_star:231,line_end:231|char_star:24,char_end:50";
"app.jinja_env.tests.keys,type='attribute'\nline_star:231,line_end:231|char_star:24,char_end:48"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.tests.keys(),type='call'\nline_star:231,line_end:231|char_star:24,char_end:50"->"app.jinja_env.tests.keys,type='attribute'\nline_star:231,line_end:231|char_star:24,char_end:48";
"app.jinja_env.tests,type='attribute'\nline_star:231,line_end:231|char_star:24,char_end:43"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.tests.keys,type='attribute'\nline_star:231,line_end:231|char_star:24,char_end:48"->"app.jinja_env.tests,type='attribute'\nline_star:231,line_end:231|char_star:24,char_end:43";
"app.jinja_env,type='attribute'\nline_star:231,line_end:231|char_star:24,char_end:37"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.tests,type='attribute'\nline_star:231,line_end:231|char_star:24,char_end:43"->"app.jinja_env,type='attribute'\nline_star:231,line_end:231|char_star:24,char_end:37";
"app,type='identifier'\nline_star:231,line_end:231|char_star:24,char_end:27"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env,type='attribute'\nline_star:231,line_end:231|char_star:24,char_end:37"->"app,type='identifier'\nline_star:231,line_end:231|char_star:24,char_end:27";
"jinja_env,type='identifier'\nline_star:231,line_end:231|char_star:28,char_end:37"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env,type='attribute'\nline_star:231,line_end:231|char_star:24,char_end:37"->"jinja_env,type='identifier'\nline_star:231,line_end:231|char_star:28,char_end:37";
"tests,type='identifier'\nline_star:231,line_end:231|char_star:38,char_end:43"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env.tests,type='attribute'\nline_star:231,line_end:231|char_star:24,char_end:43"->"tests,type='identifier'\nline_star:231,line_end:231|char_star:38,char_end:43";
"keys,type='identifier'\nline_star:231,line_end:231|char_star:44,char_end:48"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env.tests.keys,type='attribute'\nline_star:231,line_end:231|char_star:24,char_end:48"->"keys,type='identifier'\nline_star:231,line_end:231|char_star:44,char_end:48";
"assert app.jinja_env.tests['boolean'] == is_boolean,type='assert_statement'\nline_star:232,line_end:232|char_star:4,char_end:55"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:227,line_end:233|char_star:4,char_end:48"->"assert app.jinja_env.tests['boolean'] == is_boolean,type='assert_statement'\nline_star:232,line_end:232|char_star:4,char_end:55";
"app.jinja_env.tests['boolean'] == is_boolean,type='comparison_operator'\nline_star:232,line_end:232|char_star:11,char_end:55"[shape="box",fillcolor="white",style=filled];
"assert app.jinja_env.tests['boolean'] == is_boolean,type='assert_statement'\nline_star:232,line_end:232|char_star:4,char_end:55"->"app.jinja_env.tests['boolean'] == is_boolean,type='comparison_operator'\nline_star:232,line_end:232|char_star:11,char_end:55";
"app.jinja_env.tests['boolean'],type='subscript'\nline_star:232,line_end:232|char_star:11,char_end:41"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.tests['boolean'] == is_boolean,type='comparison_operator'\nline_star:232,line_end:232|char_star:11,char_end:55"->"app.jinja_env.tests['boolean'],type='subscript'\nline_star:232,line_end:232|char_star:11,char_end:41";
"app.jinja_env.tests,type='attribute'\nline_star:232,line_end:232|char_star:11,char_end:30"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.tests['boolean'],type='subscript'\nline_star:232,line_end:232|char_star:11,char_end:41"->"app.jinja_env.tests,type='attribute'\nline_star:232,line_end:232|char_star:11,char_end:30";
"app.jinja_env,type='attribute'\nline_star:232,line_end:232|char_star:11,char_end:24"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.tests,type='attribute'\nline_star:232,line_end:232|char_star:11,char_end:30"->"app.jinja_env,type='attribute'\nline_star:232,line_end:232|char_star:11,char_end:24";
"app,type='identifier'\nline_star:232,line_end:232|char_star:11,char_end:14"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env,type='attribute'\nline_star:232,line_end:232|char_star:11,char_end:24"->"app,type='identifier'\nline_star:232,line_end:232|char_star:11,char_end:14";
"jinja_env,type='identifier'\nline_star:232,line_end:232|char_star:15,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env,type='attribute'\nline_star:232,line_end:232|char_star:11,char_end:24"->"jinja_env,type='identifier'\nline_star:232,line_end:232|char_star:15,char_end:24";
"tests,type='identifier'\nline_star:232,line_end:232|char_star:25,char_end:30"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env.tests,type='attribute'\nline_star:232,line_end:232|char_star:11,char_end:30"->"tests,type='identifier'\nline_star:232,line_end:232|char_star:25,char_end:30";
"is_boolean,type='identifier'\nline_star:232,line_end:232|char_star:45,char_end:55"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env.tests['boolean'] == is_boolean,type='comparison_operator'\nline_star:232,line_end:232|char_star:11,char_end:55"->"is_boolean,type='identifier'\nline_star:232,line_end:232|char_star:45,char_end:55";
"assert app.jinja_env.tests['boolean'](False),type='assert_statement'\nline_star:233,line_end:233|char_star:4,char_end:48"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:227,line_end:233|char_star:4,char_end:48"->"assert app.jinja_env.tests['boolean'](False),type='assert_statement'\nline_star:233,line_end:233|char_star:4,char_end:48";
"app.jinja_env.tests['boolean'](False),type='call'\nline_star:233,line_end:233|char_star:11,char_end:48"[shape="box",fillcolor="white",style=filled];
"assert app.jinja_env.tests['boolean'](False),type='assert_statement'\nline_star:233,line_end:233|char_star:4,char_end:48"->"app.jinja_env.tests['boolean'](False),type='call'\nline_star:233,line_end:233|char_star:11,char_end:48";
"app.jinja_env.tests['boolean'],type='subscript'\nline_star:233,line_end:233|char_star:11,char_end:41"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.tests['boolean'](False),type='call'\nline_star:233,line_end:233|char_star:11,char_end:48"->"app.jinja_env.tests['boolean'],type='subscript'\nline_star:233,line_end:233|char_star:11,char_end:41";
"app.jinja_env.tests,type='attribute'\nline_star:233,line_end:233|char_star:11,char_end:30"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.tests['boolean'],type='subscript'\nline_star:233,line_end:233|char_star:11,char_end:41"->"app.jinja_env.tests,type='attribute'\nline_star:233,line_end:233|char_star:11,char_end:30";
"app.jinja_env,type='attribute'\nline_star:233,line_end:233|char_star:11,char_end:24"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.tests,type='attribute'\nline_star:233,line_end:233|char_star:11,char_end:30"->"app.jinja_env,type='attribute'\nline_star:233,line_end:233|char_star:11,char_end:24";
"app,type='identifier'\nline_star:233,line_end:233|char_star:11,char_end:14"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env,type='attribute'\nline_star:233,line_end:233|char_star:11,char_end:24"->"app,type='identifier'\nline_star:233,line_end:233|char_star:11,char_end:14";
"jinja_env,type='identifier'\nline_star:233,line_end:233|char_star:15,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env,type='attribute'\nline_star:233,line_end:233|char_star:11,char_end:24"->"jinja_env,type='identifier'\nline_star:233,line_end:233|char_star:15,char_end:24";
"tests,type='identifier'\nline_star:233,line_end:233|char_star:25,char_end:30"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env.tests,type='attribute'\nline_star:233,line_end:233|char_star:11,char_end:30"->"tests,type='identifier'\nline_star:233,line_end:233|char_star:25,char_end:30";
"(False),type='argument_list'\nline_star:233,line_end:233|char_star:41,char_end:48"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.tests['boolean'](False),type='call'\nline_star:233,line_end:233|char_star:11,char_end:48"->"(False),type='argument_list'\nline_star:233,line_end:233|char_star:41,char_end:48";
"def test_add_template_test_with_name(app):\n    def is_boolean(value):\n        return isinstance(value, bool)\n\n    app.add_template_test(is_boolean, 'boolean')\n    assert 'boolean' in app.jinja_env.tests.keys()\n    assert app.jinja_env.tests['boolean'] == is_boolean\n    assert app.jinja_env.tests['boolean'](False),type='function_definition'\nline_star:236,line_end:243|char_star:0,char_end:48"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_add_template_test_with_name(app):\n    def is_boolean(value):\n        return isinstance(value, bool)\n\n    app.add_template_test(is_boolean, 'boolean')\n    assert 'boolean' in app.jinja_env.tests.keys()\n    assert app.jinja_env.tests['boolean'] == is_boolean\n    assert app.jinja_env.tests['boolean'](False),type='function_definition'\nline_star:236,line_end:243|char_star:0,char_end:48";
"test_add_template_test_with_name,type='identifier'\nline_star:236,line_end:236|char_star:4,char_end:36"[shape="point",fillcolor="#121013",style=filled];
"def test_add_template_test_with_name(app):\n    def is_boolean(value):\n        return isinstance(value, bool)\n\n    app.add_template_test(is_boolean, 'boolean')\n    assert 'boolean' in app.jinja_env.tests.keys()\n    assert app.jinja_env.tests['boolean'] == is_boolean\n    assert app.jinja_env.tests['boolean'](False),type='function_definition'\nline_star:236,line_end:243|char_star:0,char_end:48"->"test_add_template_test_with_name,type='identifier'\nline_star:236,line_end:236|char_star:4,char_end:36";
"(app),type='parameters'\nline_star:236,line_end:236|char_star:36,char_end:41"[shape="box",fillcolor="white",style=filled];
"def test_add_template_test_with_name(app):\n    def is_boolean(value):\n        return isinstance(value, bool)\n\n    app.add_template_test(is_boolean, 'boolean')\n    assert 'boolean' in app.jinja_env.tests.keys()\n    assert app.jinja_env.tests['boolean'] == is_boolean\n    assert app.jinja_env.tests['boolean'](False),type='function_definition'\nline_star:236,line_end:243|char_star:0,char_end:48"->"(app),type='parameters'\nline_star:236,line_end:236|char_star:36,char_end:41";
"app,type='identifier'\nline_star:236,line_end:236|char_star:37,char_end:40"[shape="point",fillcolor="#121013",style=filled];
"(app),type='parameters'\nline_star:236,line_end:236|char_star:36,char_end:41"->"app,type='identifier'\nline_star:236,line_end:236|char_star:37,char_end:40";
"type='INFORMATION BLOCK'\nline_star:237,line_end:243|char_star:4,char_end:48"[shape="point",fillcolor="#121013",style=filled];
"def test_add_template_test_with_name(app):\n    def is_boolean(value):\n        return isinstance(value, bool)\n\n    app.add_template_test(is_boolean, 'boolean')\n    assert 'boolean' in app.jinja_env.tests.keys()\n    assert app.jinja_env.tests['boolean'] == is_boolean\n    assert app.jinja_env.tests['boolean'](False),type='function_definition'\nline_star:236,line_end:243|char_star:0,char_end:48"->"type='INFORMATION BLOCK'\nline_star:237,line_end:243|char_star:4,char_end:48";
"def is_boolean(value):\n        return isinstance(value, bool),type='function_definition'\nline_star:237,line_end:238|char_star:4,char_end:38"[shape="box",fillcolor="#cee6b4",style=filled];
"type='INFORMATION BLOCK'\nline_star:237,line_end:243|char_star:4,char_end:48"->"def is_boolean(value):\n        return isinstance(value, bool),type='function_definition'\nline_star:237,line_end:238|char_star:4,char_end:38";
"is_boolean,type='identifier'\nline_star:237,line_end:237|char_star:8,char_end:18"[shape="point",fillcolor="#121013",style=filled];
"def is_boolean(value):\n        return isinstance(value, bool),type='function_definition'\nline_star:237,line_end:238|char_star:4,char_end:38"->"is_boolean,type='identifier'\nline_star:237,line_end:237|char_star:8,char_end:18";
"(value),type='parameters'\nline_star:237,line_end:237|char_star:18,char_end:25"[shape="box",fillcolor="white",style=filled];
"def is_boolean(value):\n        return isinstance(value, bool),type='function_definition'\nline_star:237,line_end:238|char_star:4,char_end:38"->"(value),type='parameters'\nline_star:237,line_end:237|char_star:18,char_end:25";
"value,type='identifier'\nline_star:237,line_end:237|char_star:19,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"(value),type='parameters'\nline_star:237,line_end:237|char_star:18,char_end:25"->"value,type='identifier'\nline_star:237,line_end:237|char_star:19,char_end:24";
"type='INFORMATION BLOCK'\nline_star:238,line_end:238|char_star:8,char_end:38"[shape="point",fillcolor="#121013",style=filled];
"def is_boolean(value):\n        return isinstance(value, bool),type='function_definition'\nline_star:237,line_end:238|char_star:4,char_end:38"->"type='INFORMATION BLOCK'\nline_star:238,line_end:238|char_star:8,char_end:38";
"return isinstance(value, bool),type='return_statement'\nline_star:238,line_end:238|char_star:8,char_end:38"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:238,line_end:238|char_star:8,char_end:38"->"return isinstance(value, bool),type='return_statement'\nline_star:238,line_end:238|char_star:8,char_end:38";
"assert 'boolean' in app.jinja_env.tests.keys(),type='assert_statement'\nline_star:241,line_end:241|char_star:4,char_end:50"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:237,line_end:243|char_star:4,char_end:48"->"assert 'boolean' in app.jinja_env.tests.keys(),type='assert_statement'\nline_star:241,line_end:241|char_star:4,char_end:50";
"'boolean' in app.jinja_env.tests.keys(),type='comparison_operator'\nline_star:241,line_end:241|char_star:11,char_end:50"[shape="box",fillcolor="white",style=filled];
"assert 'boolean' in app.jinja_env.tests.keys(),type='assert_statement'\nline_star:241,line_end:241|char_star:4,char_end:50"->"'boolean' in app.jinja_env.tests.keys(),type='comparison_operator'\nline_star:241,line_end:241|char_star:11,char_end:50";
"app.jinja_env.tests.keys(),type='call'\nline_star:241,line_end:241|char_star:24,char_end:50"[shape="box",fillcolor="white",style=filled];
"'boolean' in app.jinja_env.tests.keys(),type='comparison_operator'\nline_star:241,line_end:241|char_star:11,char_end:50"->"app.jinja_env.tests.keys(),type='call'\nline_star:241,line_end:241|char_star:24,char_end:50";
"app.jinja_env.tests.keys,type='attribute'\nline_star:241,line_end:241|char_star:24,char_end:48"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.tests.keys(),type='call'\nline_star:241,line_end:241|char_star:24,char_end:50"->"app.jinja_env.tests.keys,type='attribute'\nline_star:241,line_end:241|char_star:24,char_end:48";
"app.jinja_env.tests,type='attribute'\nline_star:241,line_end:241|char_star:24,char_end:43"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.tests.keys,type='attribute'\nline_star:241,line_end:241|char_star:24,char_end:48"->"app.jinja_env.tests,type='attribute'\nline_star:241,line_end:241|char_star:24,char_end:43";
"app.jinja_env,type='attribute'\nline_star:241,line_end:241|char_star:24,char_end:37"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.tests,type='attribute'\nline_star:241,line_end:241|char_star:24,char_end:43"->"app.jinja_env,type='attribute'\nline_star:241,line_end:241|char_star:24,char_end:37";
"app,type='identifier'\nline_star:241,line_end:241|char_star:24,char_end:27"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env,type='attribute'\nline_star:241,line_end:241|char_star:24,char_end:37"->"app,type='identifier'\nline_star:241,line_end:241|char_star:24,char_end:27";
"jinja_env,type='identifier'\nline_star:241,line_end:241|char_star:28,char_end:37"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env,type='attribute'\nline_star:241,line_end:241|char_star:24,char_end:37"->"jinja_env,type='identifier'\nline_star:241,line_end:241|char_star:28,char_end:37";
"tests,type='identifier'\nline_star:241,line_end:241|char_star:38,char_end:43"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env.tests,type='attribute'\nline_star:241,line_end:241|char_star:24,char_end:43"->"tests,type='identifier'\nline_star:241,line_end:241|char_star:38,char_end:43";
"keys,type='identifier'\nline_star:241,line_end:241|char_star:44,char_end:48"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env.tests.keys,type='attribute'\nline_star:241,line_end:241|char_star:24,char_end:48"->"keys,type='identifier'\nline_star:241,line_end:241|char_star:44,char_end:48";
"assert app.jinja_env.tests['boolean'] == is_boolean,type='assert_statement'\nline_star:242,line_end:242|char_star:4,char_end:55"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:237,line_end:243|char_star:4,char_end:48"->"assert app.jinja_env.tests['boolean'] == is_boolean,type='assert_statement'\nline_star:242,line_end:242|char_star:4,char_end:55";
"app.jinja_env.tests['boolean'] == is_boolean,type='comparison_operator'\nline_star:242,line_end:242|char_star:11,char_end:55"[shape="box",fillcolor="white",style=filled];
"assert app.jinja_env.tests['boolean'] == is_boolean,type='assert_statement'\nline_star:242,line_end:242|char_star:4,char_end:55"->"app.jinja_env.tests['boolean'] == is_boolean,type='comparison_operator'\nline_star:242,line_end:242|char_star:11,char_end:55";
"app.jinja_env.tests['boolean'],type='subscript'\nline_star:242,line_end:242|char_star:11,char_end:41"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.tests['boolean'] == is_boolean,type='comparison_operator'\nline_star:242,line_end:242|char_star:11,char_end:55"->"app.jinja_env.tests['boolean'],type='subscript'\nline_star:242,line_end:242|char_star:11,char_end:41";
"app.jinja_env.tests,type='attribute'\nline_star:242,line_end:242|char_star:11,char_end:30"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.tests['boolean'],type='subscript'\nline_star:242,line_end:242|char_star:11,char_end:41"->"app.jinja_env.tests,type='attribute'\nline_star:242,line_end:242|char_star:11,char_end:30";
"app.jinja_env,type='attribute'\nline_star:242,line_end:242|char_star:11,char_end:24"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.tests,type='attribute'\nline_star:242,line_end:242|char_star:11,char_end:30"->"app.jinja_env,type='attribute'\nline_star:242,line_end:242|char_star:11,char_end:24";
"app,type='identifier'\nline_star:242,line_end:242|char_star:11,char_end:14"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env,type='attribute'\nline_star:242,line_end:242|char_star:11,char_end:24"->"app,type='identifier'\nline_star:242,line_end:242|char_star:11,char_end:14";
"jinja_env,type='identifier'\nline_star:242,line_end:242|char_star:15,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env,type='attribute'\nline_star:242,line_end:242|char_star:11,char_end:24"->"jinja_env,type='identifier'\nline_star:242,line_end:242|char_star:15,char_end:24";
"tests,type='identifier'\nline_star:242,line_end:242|char_star:25,char_end:30"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env.tests,type='attribute'\nline_star:242,line_end:242|char_star:11,char_end:30"->"tests,type='identifier'\nline_star:242,line_end:242|char_star:25,char_end:30";
"is_boolean,type='identifier'\nline_star:242,line_end:242|char_star:45,char_end:55"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env.tests['boolean'] == is_boolean,type='comparison_operator'\nline_star:242,line_end:242|char_star:11,char_end:55"->"is_boolean,type='identifier'\nline_star:242,line_end:242|char_star:45,char_end:55";
"assert app.jinja_env.tests['boolean'](False),type='assert_statement'\nline_star:243,line_end:243|char_star:4,char_end:48"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:237,line_end:243|char_star:4,char_end:48"->"assert app.jinja_env.tests['boolean'](False),type='assert_statement'\nline_star:243,line_end:243|char_star:4,char_end:48";
"app.jinja_env.tests['boolean'](False),type='call'\nline_star:243,line_end:243|char_star:11,char_end:48"[shape="box",fillcolor="white",style=filled];
"assert app.jinja_env.tests['boolean'](False),type='assert_statement'\nline_star:243,line_end:243|char_star:4,char_end:48"->"app.jinja_env.tests['boolean'](False),type='call'\nline_star:243,line_end:243|char_star:11,char_end:48";
"app.jinja_env.tests['boolean'],type='subscript'\nline_star:243,line_end:243|char_star:11,char_end:41"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.tests['boolean'](False),type='call'\nline_star:243,line_end:243|char_star:11,char_end:48"->"app.jinja_env.tests['boolean'],type='subscript'\nline_star:243,line_end:243|char_star:11,char_end:41";
"app.jinja_env.tests,type='attribute'\nline_star:243,line_end:243|char_star:11,char_end:30"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.tests['boolean'],type='subscript'\nline_star:243,line_end:243|char_star:11,char_end:41"->"app.jinja_env.tests,type='attribute'\nline_star:243,line_end:243|char_star:11,char_end:30";
"app.jinja_env,type='attribute'\nline_star:243,line_end:243|char_star:11,char_end:24"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.tests,type='attribute'\nline_star:243,line_end:243|char_star:11,char_end:30"->"app.jinja_env,type='attribute'\nline_star:243,line_end:243|char_star:11,char_end:24";
"app,type='identifier'\nline_star:243,line_end:243|char_star:11,char_end:14"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env,type='attribute'\nline_star:243,line_end:243|char_star:11,char_end:24"->"app,type='identifier'\nline_star:243,line_end:243|char_star:11,char_end:14";
"jinja_env,type='identifier'\nline_star:243,line_end:243|char_star:15,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env,type='attribute'\nline_star:243,line_end:243|char_star:11,char_end:24"->"jinja_env,type='identifier'\nline_star:243,line_end:243|char_star:15,char_end:24";
"tests,type='identifier'\nline_star:243,line_end:243|char_star:25,char_end:30"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env.tests,type='attribute'\nline_star:243,line_end:243|char_star:11,char_end:30"->"tests,type='identifier'\nline_star:243,line_end:243|char_star:25,char_end:30";
"(False),type='argument_list'\nline_star:243,line_end:243|char_star:41,char_end:48"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.tests['boolean'](False),type='call'\nline_star:243,line_end:243|char_star:11,char_end:48"->"(False),type='argument_list'\nline_star:243,line_end:243|char_star:41,char_end:48";
"def test_template_test_with_template(app, client):\n    @app.template_test()\n    def boolean(value):\n        return isinstance(value, bool)\n\n    @app.route('/')\n    def index():\n        return flask.render_template('template_test.html', value=False)\n\n    rv = client.get('/')\n    assert b'Success!' in rv.data,type='function_definition'\nline_star:246,line_end:256|char_star:0,char_end:33"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_template_test_with_template(app, client):\n    @app.template_test()\n    def boolean(value):\n        return isinstance(value, bool)\n\n    @app.route('/')\n    def index():\n        return flask.render_template('template_test.html', value=False)\n\n    rv = client.get('/')\n    assert b'Success!' in rv.data,type='function_definition'\nline_star:246,line_end:256|char_star:0,char_end:33";
"test_template_test_with_template,type='identifier'\nline_star:246,line_end:246|char_star:4,char_end:36"[shape="point",fillcolor="#121013",style=filled];
"def test_template_test_with_template(app, client):\n    @app.template_test()\n    def boolean(value):\n        return isinstance(value, bool)\n\n    @app.route('/')\n    def index():\n        return flask.render_template('template_test.html', value=False)\n\n    rv = client.get('/')\n    assert b'Success!' in rv.data,type='function_definition'\nline_star:246,line_end:256|char_star:0,char_end:33"->"test_template_test_with_template,type='identifier'\nline_star:246,line_end:246|char_star:4,char_end:36";
"(app, client),type='parameters'\nline_star:246,line_end:246|char_star:36,char_end:49"[shape="box",fillcolor="white",style=filled];
"def test_template_test_with_template(app, client):\n    @app.template_test()\n    def boolean(value):\n        return isinstance(value, bool)\n\n    @app.route('/')\n    def index():\n        return flask.render_template('template_test.html', value=False)\n\n    rv = client.get('/')\n    assert b'Success!' in rv.data,type='function_definition'\nline_star:246,line_end:256|char_star:0,char_end:33"->"(app, client),type='parameters'\nline_star:246,line_end:246|char_star:36,char_end:49";
"app,type='identifier'\nline_star:246,line_end:246|char_star:37,char_end:40"[shape="point",fillcolor="#121013",style=filled];
"(app, client),type='parameters'\nline_star:246,line_end:246|char_star:36,char_end:49"->"app,type='identifier'\nline_star:246,line_end:246|char_star:37,char_end:40";
"client,type='identifier'\nline_star:246,line_end:246|char_star:42,char_end:48"[shape="point",fillcolor="#121013",style=filled];
"(app, client),type='parameters'\nline_star:246,line_end:246|char_star:36,char_end:49"->"client,type='identifier'\nline_star:246,line_end:246|char_star:42,char_end:48";
"type='INFORMATION BLOCK'\nline_star:247,line_end:256|char_star:4,char_end:33"[shape="point",fillcolor="#121013",style=filled];
"def test_template_test_with_template(app, client):\n    @app.template_test()\n    def boolean(value):\n        return isinstance(value, bool)\n\n    @app.route('/')\n    def index():\n        return flask.render_template('template_test.html', value=False)\n\n    rv = client.get('/')\n    assert b'Success!' in rv.data,type='function_definition'\nline_star:246,line_end:256|char_star:0,char_end:33"->"type='INFORMATION BLOCK'\nline_star:247,line_end:256|char_star:4,char_end:33";
"@app.template_test()\n    def boolean(value):\n        return isinstance(value, bool),type='decorated_definition'\nline_star:247,line_end:249|char_star:4,char_end:38"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:247,line_end:256|char_star:4,char_end:33"->"@app.template_test()\n    def boolean(value):\n        return isinstance(value, bool),type='decorated_definition'\nline_star:247,line_end:249|char_star:4,char_end:38";
"@app.template_test(),type='decorator'\nline_star:247,line_end:247|char_star:4,char_end:24"[shape="box",fillcolor="white",style=filled];
"@app.template_test()\n    def boolean(value):\n        return isinstance(value, bool),type='decorated_definition'\nline_star:247,line_end:249|char_star:4,char_end:38"->"@app.template_test(),type='decorator'\nline_star:247,line_end:247|char_star:4,char_end:24";
"def boolean(value):\n        return isinstance(value, bool),type='function_definition'\nline_star:248,line_end:249|char_star:4,char_end:38"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.template_test()\n    def boolean(value):\n        return isinstance(value, bool),type='decorated_definition'\nline_star:247,line_end:249|char_star:4,char_end:38"->"def boolean(value):\n        return isinstance(value, bool),type='function_definition'\nline_star:248,line_end:249|char_star:4,char_end:38";
"boolean,type='identifier'\nline_star:248,line_end:248|char_star:8,char_end:15"[shape="point",fillcolor="#121013",style=filled];
"def boolean(value):\n        return isinstance(value, bool),type='function_definition'\nline_star:248,line_end:249|char_star:4,char_end:38"->"boolean,type='identifier'\nline_star:248,line_end:248|char_star:8,char_end:15";
"(value),type='parameters'\nline_star:248,line_end:248|char_star:15,char_end:22"[shape="box",fillcolor="white",style=filled];
"def boolean(value):\n        return isinstance(value, bool),type='function_definition'\nline_star:248,line_end:249|char_star:4,char_end:38"->"(value),type='parameters'\nline_star:248,line_end:248|char_star:15,char_end:22";
"value,type='identifier'\nline_star:248,line_end:248|char_star:16,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"(value),type='parameters'\nline_star:248,line_end:248|char_star:15,char_end:22"->"value,type='identifier'\nline_star:248,line_end:248|char_star:16,char_end:21";
"type='INFORMATION BLOCK'\nline_star:249,line_end:249|char_star:8,char_end:38"[shape="point",fillcolor="#121013",style=filled];
"def boolean(value):\n        return isinstance(value, bool),type='function_definition'\nline_star:248,line_end:249|char_star:4,char_end:38"->"type='INFORMATION BLOCK'\nline_star:249,line_end:249|char_star:8,char_end:38";
"return isinstance(value, bool),type='return_statement'\nline_star:249,line_end:249|char_star:8,char_end:38"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:249,line_end:249|char_star:8,char_end:38"->"return isinstance(value, bool),type='return_statement'\nline_star:249,line_end:249|char_star:8,char_end:38";
"@app.route('/')\n    def index():\n        return flask.render_template('template_test.html', value=False),type='decorated_definition'\nline_star:251,line_end:253|char_star:4,char_end:71"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:247,line_end:256|char_star:4,char_end:33"->"@app.route('/')\n    def index():\n        return flask.render_template('template_test.html', value=False),type='decorated_definition'\nline_star:251,line_end:253|char_star:4,char_end:71";
"@app.route('/'),type='decorator'\nline_star:251,line_end:251|char_star:4,char_end:19"[shape="box",fillcolor="white",style=filled];
"@app.route('/')\n    def index():\n        return flask.render_template('template_test.html', value=False),type='decorated_definition'\nline_star:251,line_end:253|char_star:4,char_end:71"->"@app.route('/'),type='decorator'\nline_star:251,line_end:251|char_star:4,char_end:19";
"def index():\n        return flask.render_template('template_test.html', value=False),type='function_definition'\nline_star:252,line_end:253|char_star:4,char_end:71"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.route('/')\n    def index():\n        return flask.render_template('template_test.html', value=False),type='decorated_definition'\nline_star:251,line_end:253|char_star:4,char_end:71"->"def index():\n        return flask.render_template('template_test.html', value=False),type='function_definition'\nline_star:252,line_end:253|char_star:4,char_end:71";
"index,type='identifier'\nline_star:252,line_end:252|char_star:8,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"def index():\n        return flask.render_template('template_test.html', value=False),type='function_definition'\nline_star:252,line_end:253|char_star:4,char_end:71"->"index,type='identifier'\nline_star:252,line_end:252|char_star:8,char_end:13";
"type='INFORMATION BLOCK'\nline_star:253,line_end:253|char_star:8,char_end:71"[shape="point",fillcolor="#121013",style=filled];
"def index():\n        return flask.render_template('template_test.html', value=False),type='function_definition'\nline_star:252,line_end:253|char_star:4,char_end:71"->"type='INFORMATION BLOCK'\nline_star:253,line_end:253|char_star:8,char_end:71";
"return flask.render_template('template_test.html', value=False),type='return_statement'\nline_star:253,line_end:253|char_star:8,char_end:71"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:253,line_end:253|char_star:8,char_end:71"->"return flask.render_template('template_test.html', value=False),type='return_statement'\nline_star:253,line_end:253|char_star:8,char_end:71";
"assert b'Success!' in rv.data,type='assert_statement'\nline_star:256,line_end:256|char_star:4,char_end:33"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:247,line_end:256|char_star:4,char_end:33"->"assert b'Success!' in rv.data,type='assert_statement'\nline_star:256,line_end:256|char_star:4,char_end:33";
"b'Success!' in rv.data,type='comparison_operator'\nline_star:256,line_end:256|char_star:11,char_end:33"[shape="box",fillcolor="white",style=filled];
"assert b'Success!' in rv.data,type='assert_statement'\nline_star:256,line_end:256|char_star:4,char_end:33"->"b'Success!' in rv.data,type='comparison_operator'\nline_star:256,line_end:256|char_star:11,char_end:33";
"rv.data,type='attribute'\nline_star:256,line_end:256|char_star:26,char_end:33"[shape="box",fillcolor="white",style=filled];
"b'Success!' in rv.data,type='comparison_operator'\nline_star:256,line_end:256|char_star:11,char_end:33"->"rv.data,type='attribute'\nline_star:256,line_end:256|char_star:26,char_end:33";
"rv,type='identifier'\nline_star:256,line_end:256|char_star:26,char_end:28"[shape="point",fillcolor="#121013",style=filled];
"rv.data,type='attribute'\nline_star:256,line_end:256|char_star:26,char_end:33"->"rv,type='identifier'\nline_star:256,line_end:256|char_star:26,char_end:28";
"data,type='identifier'\nline_star:256,line_end:256|char_star:29,char_end:33"[shape="point",fillcolor="#121013",style=filled];
"rv.data,type='attribute'\nline_star:256,line_end:256|char_star:26,char_end:33"->"data,type='identifier'\nline_star:256,line_end:256|char_star:29,char_end:33";
"def test_add_template_test_with_template(app, client):\n    def boolean(value):\n        return isinstance(value, bool)\n\n    app.add_template_test(boolean)\n\n    @app.route('/')\n    def index():\n        return flask.render_template('template_test.html', value=False)\n\n    rv = client.get('/')\n    assert b'Success!' in rv.data,type='function_definition'\nline_star:259,line_end:270|char_star:0,char_end:33"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_add_template_test_with_template(app, client):\n    def boolean(value):\n        return isinstance(value, bool)\n\n    app.add_template_test(boolean)\n\n    @app.route('/')\n    def index():\n        return flask.render_template('template_test.html', value=False)\n\n    rv = client.get('/')\n    assert b'Success!' in rv.data,type='function_definition'\nline_star:259,line_end:270|char_star:0,char_end:33";
"test_add_template_test_with_template,type='identifier'\nline_star:259,line_end:259|char_star:4,char_end:40"[shape="point",fillcolor="#121013",style=filled];
"def test_add_template_test_with_template(app, client):\n    def boolean(value):\n        return isinstance(value, bool)\n\n    app.add_template_test(boolean)\n\n    @app.route('/')\n    def index():\n        return flask.render_template('template_test.html', value=False)\n\n    rv = client.get('/')\n    assert b'Success!' in rv.data,type='function_definition'\nline_star:259,line_end:270|char_star:0,char_end:33"->"test_add_template_test_with_template,type='identifier'\nline_star:259,line_end:259|char_star:4,char_end:40";
"(app, client),type='parameters'\nline_star:259,line_end:259|char_star:40,char_end:53"[shape="box",fillcolor="white",style=filled];
"def test_add_template_test_with_template(app, client):\n    def boolean(value):\n        return isinstance(value, bool)\n\n    app.add_template_test(boolean)\n\n    @app.route('/')\n    def index():\n        return flask.render_template('template_test.html', value=False)\n\n    rv = client.get('/')\n    assert b'Success!' in rv.data,type='function_definition'\nline_star:259,line_end:270|char_star:0,char_end:33"->"(app, client),type='parameters'\nline_star:259,line_end:259|char_star:40,char_end:53";
"app,type='identifier'\nline_star:259,line_end:259|char_star:41,char_end:44"[shape="point",fillcolor="#121013",style=filled];
"(app, client),type='parameters'\nline_star:259,line_end:259|char_star:40,char_end:53"->"app,type='identifier'\nline_star:259,line_end:259|char_star:41,char_end:44";
"client,type='identifier'\nline_star:259,line_end:259|char_star:46,char_end:52"[shape="point",fillcolor="#121013",style=filled];
"(app, client),type='parameters'\nline_star:259,line_end:259|char_star:40,char_end:53"->"client,type='identifier'\nline_star:259,line_end:259|char_star:46,char_end:52";
"type='INFORMATION BLOCK'\nline_star:260,line_end:270|char_star:4,char_end:33"[shape="point",fillcolor="#121013",style=filled];
"def test_add_template_test_with_template(app, client):\n    def boolean(value):\n        return isinstance(value, bool)\n\n    app.add_template_test(boolean)\n\n    @app.route('/')\n    def index():\n        return flask.render_template('template_test.html', value=False)\n\n    rv = client.get('/')\n    assert b'Success!' in rv.data,type='function_definition'\nline_star:259,line_end:270|char_star:0,char_end:33"->"type='INFORMATION BLOCK'\nline_star:260,line_end:270|char_star:4,char_end:33";
"def boolean(value):\n        return isinstance(value, bool),type='function_definition'\nline_star:260,line_end:261|char_star:4,char_end:38"[shape="box",fillcolor="#cee6b4",style=filled];
"type='INFORMATION BLOCK'\nline_star:260,line_end:270|char_star:4,char_end:33"->"def boolean(value):\n        return isinstance(value, bool),type='function_definition'\nline_star:260,line_end:261|char_star:4,char_end:38";
"boolean,type='identifier'\nline_star:260,line_end:260|char_star:8,char_end:15"[shape="point",fillcolor="#121013",style=filled];
"def boolean(value):\n        return isinstance(value, bool),type='function_definition'\nline_star:260,line_end:261|char_star:4,char_end:38"->"boolean,type='identifier'\nline_star:260,line_end:260|char_star:8,char_end:15";
"(value),type='parameters'\nline_star:260,line_end:260|char_star:15,char_end:22"[shape="box",fillcolor="white",style=filled];
"def boolean(value):\n        return isinstance(value, bool),type='function_definition'\nline_star:260,line_end:261|char_star:4,char_end:38"->"(value),type='parameters'\nline_star:260,line_end:260|char_star:15,char_end:22";
"value,type='identifier'\nline_star:260,line_end:260|char_star:16,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"(value),type='parameters'\nline_star:260,line_end:260|char_star:15,char_end:22"->"value,type='identifier'\nline_star:260,line_end:260|char_star:16,char_end:21";
"type='INFORMATION BLOCK'\nline_star:261,line_end:261|char_star:8,char_end:38"[shape="point",fillcolor="#121013",style=filled];
"def boolean(value):\n        return isinstance(value, bool),type='function_definition'\nline_star:260,line_end:261|char_star:4,char_end:38"->"type='INFORMATION BLOCK'\nline_star:261,line_end:261|char_star:8,char_end:38";
"return isinstance(value, bool),type='return_statement'\nline_star:261,line_end:261|char_star:8,char_end:38"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:261,line_end:261|char_star:8,char_end:38"->"return isinstance(value, bool),type='return_statement'\nline_star:261,line_end:261|char_star:8,char_end:38";
"@app.route('/')\n    def index():\n        return flask.render_template('template_test.html', value=False),type='decorated_definition'\nline_star:265,line_end:267|char_star:4,char_end:71"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:260,line_end:270|char_star:4,char_end:33"->"@app.route('/')\n    def index():\n        return flask.render_template('template_test.html', value=False),type='decorated_definition'\nline_star:265,line_end:267|char_star:4,char_end:71";
"@app.route('/'),type='decorator'\nline_star:265,line_end:265|char_star:4,char_end:19"[shape="box",fillcolor="white",style=filled];
"@app.route('/')\n    def index():\n        return flask.render_template('template_test.html', value=False),type='decorated_definition'\nline_star:265,line_end:267|char_star:4,char_end:71"->"@app.route('/'),type='decorator'\nline_star:265,line_end:265|char_star:4,char_end:19";
"def index():\n        return flask.render_template('template_test.html', value=False),type='function_definition'\nline_star:266,line_end:267|char_star:4,char_end:71"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.route('/')\n    def index():\n        return flask.render_template('template_test.html', value=False),type='decorated_definition'\nline_star:265,line_end:267|char_star:4,char_end:71"->"def index():\n        return flask.render_template('template_test.html', value=False),type='function_definition'\nline_star:266,line_end:267|char_star:4,char_end:71";
"index,type='identifier'\nline_star:266,line_end:266|char_star:8,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"def index():\n        return flask.render_template('template_test.html', value=False),type='function_definition'\nline_star:266,line_end:267|char_star:4,char_end:71"->"index,type='identifier'\nline_star:266,line_end:266|char_star:8,char_end:13";
"type='INFORMATION BLOCK'\nline_star:267,line_end:267|char_star:8,char_end:71"[shape="point",fillcolor="#121013",style=filled];
"def index():\n        return flask.render_template('template_test.html', value=False),type='function_definition'\nline_star:266,line_end:267|char_star:4,char_end:71"->"type='INFORMATION BLOCK'\nline_star:267,line_end:267|char_star:8,char_end:71";
"return flask.render_template('template_test.html', value=False),type='return_statement'\nline_star:267,line_end:267|char_star:8,char_end:71"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:267,line_end:267|char_star:8,char_end:71"->"return flask.render_template('template_test.html', value=False),type='return_statement'\nline_star:267,line_end:267|char_star:8,char_end:71";
"assert b'Success!' in rv.data,type='assert_statement'\nline_star:270,line_end:270|char_star:4,char_end:33"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:260,line_end:270|char_star:4,char_end:33"->"assert b'Success!' in rv.data,type='assert_statement'\nline_star:270,line_end:270|char_star:4,char_end:33";
"b'Success!' in rv.data,type='comparison_operator'\nline_star:270,line_end:270|char_star:11,char_end:33"[shape="box",fillcolor="white",style=filled];
"assert b'Success!' in rv.data,type='assert_statement'\nline_star:270,line_end:270|char_star:4,char_end:33"->"b'Success!' in rv.data,type='comparison_operator'\nline_star:270,line_end:270|char_star:11,char_end:33";
"rv.data,type='attribute'\nline_star:270,line_end:270|char_star:26,char_end:33"[shape="box",fillcolor="white",style=filled];
"b'Success!' in rv.data,type='comparison_operator'\nline_star:270,line_end:270|char_star:11,char_end:33"->"rv.data,type='attribute'\nline_star:270,line_end:270|char_star:26,char_end:33";
"rv,type='identifier'\nline_star:270,line_end:270|char_star:26,char_end:28"[shape="point",fillcolor="#121013",style=filled];
"rv.data,type='attribute'\nline_star:270,line_end:270|char_star:26,char_end:33"->"rv,type='identifier'\nline_star:270,line_end:270|char_star:26,char_end:28";
"data,type='identifier'\nline_star:270,line_end:270|char_star:29,char_end:33"[shape="point",fillcolor="#121013",style=filled];
"rv.data,type='attribute'\nline_star:270,line_end:270|char_star:26,char_end:33"->"data,type='identifier'\nline_star:270,line_end:270|char_star:29,char_end:33";
"def test_template_test_with_name_and_template(app, client):\n    @app.template_test('boolean')\n    def is_boolean(value):\n        return isinstance(value, bool)\n\n    @app.route('/')\n    def index():\n        return flask.render_template('template_test.html', value=False)\n\n    rv = client.get('/')\n    assert b'Success!' in rv.data,type='function_definition'\nline_star:273,line_end:283|char_star:0,char_end:33"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_template_test_with_name_and_template(app, client):\n    @app.template_test('boolean')\n    def is_boolean(value):\n        return isinstance(value, bool)\n\n    @app.route('/')\n    def index():\n        return flask.render_template('template_test.html', value=False)\n\n    rv = client.get('/')\n    assert b'Success!' in rv.data,type='function_definition'\nline_star:273,line_end:283|char_star:0,char_end:33";
"test_template_test_with_name_and_template,type='identifier'\nline_star:273,line_end:273|char_star:4,char_end:45"[shape="point",fillcolor="#121013",style=filled];
"def test_template_test_with_name_and_template(app, client):\n    @app.template_test('boolean')\n    def is_boolean(value):\n        return isinstance(value, bool)\n\n    @app.route('/')\n    def index():\n        return flask.render_template('template_test.html', value=False)\n\n    rv = client.get('/')\n    assert b'Success!' in rv.data,type='function_definition'\nline_star:273,line_end:283|char_star:0,char_end:33"->"test_template_test_with_name_and_template,type='identifier'\nline_star:273,line_end:273|char_star:4,char_end:45";
"(app, client),type='parameters'\nline_star:273,line_end:273|char_star:45,char_end:58"[shape="box",fillcolor="white",style=filled];
"def test_template_test_with_name_and_template(app, client):\n    @app.template_test('boolean')\n    def is_boolean(value):\n        return isinstance(value, bool)\n\n    @app.route('/')\n    def index():\n        return flask.render_template('template_test.html', value=False)\n\n    rv = client.get('/')\n    assert b'Success!' in rv.data,type='function_definition'\nline_star:273,line_end:283|char_star:0,char_end:33"->"(app, client),type='parameters'\nline_star:273,line_end:273|char_star:45,char_end:58";
"app,type='identifier'\nline_star:273,line_end:273|char_star:46,char_end:49"[shape="point",fillcolor="#121013",style=filled];
"(app, client),type='parameters'\nline_star:273,line_end:273|char_star:45,char_end:58"->"app,type='identifier'\nline_star:273,line_end:273|char_star:46,char_end:49";
"client,type='identifier'\nline_star:273,line_end:273|char_star:51,char_end:57"[shape="point",fillcolor="#121013",style=filled];
"(app, client),type='parameters'\nline_star:273,line_end:273|char_star:45,char_end:58"->"client,type='identifier'\nline_star:273,line_end:273|char_star:51,char_end:57";
"type='INFORMATION BLOCK'\nline_star:274,line_end:283|char_star:4,char_end:33"[shape="point",fillcolor="#121013",style=filled];
"def test_template_test_with_name_and_template(app, client):\n    @app.template_test('boolean')\n    def is_boolean(value):\n        return isinstance(value, bool)\n\n    @app.route('/')\n    def index():\n        return flask.render_template('template_test.html', value=False)\n\n    rv = client.get('/')\n    assert b'Success!' in rv.data,type='function_definition'\nline_star:273,line_end:283|char_star:0,char_end:33"->"type='INFORMATION BLOCK'\nline_star:274,line_end:283|char_star:4,char_end:33";
"@app.template_test('boolean')\n    def is_boolean(value):\n        return isinstance(value, bool),type='decorated_definition'\nline_star:274,line_end:276|char_star:4,char_end:38"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:274,line_end:283|char_star:4,char_end:33"->"@app.template_test('boolean')\n    def is_boolean(value):\n        return isinstance(value, bool),type='decorated_definition'\nline_star:274,line_end:276|char_star:4,char_end:38";
"@app.template_test('boolean'),type='decorator'\nline_star:274,line_end:274|char_star:4,char_end:33"[shape="box",fillcolor="white",style=filled];
"@app.template_test('boolean')\n    def is_boolean(value):\n        return isinstance(value, bool),type='decorated_definition'\nline_star:274,line_end:276|char_star:4,char_end:38"->"@app.template_test('boolean'),type='decorator'\nline_star:274,line_end:274|char_star:4,char_end:33";
"def is_boolean(value):\n        return isinstance(value, bool),type='function_definition'\nline_star:275,line_end:276|char_star:4,char_end:38"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.template_test('boolean')\n    def is_boolean(value):\n        return isinstance(value, bool),type='decorated_definition'\nline_star:274,line_end:276|char_star:4,char_end:38"->"def is_boolean(value):\n        return isinstance(value, bool),type='function_definition'\nline_star:275,line_end:276|char_star:4,char_end:38";
"is_boolean,type='identifier'\nline_star:275,line_end:275|char_star:8,char_end:18"[shape="point",fillcolor="#121013",style=filled];
"def is_boolean(value):\n        return isinstance(value, bool),type='function_definition'\nline_star:275,line_end:276|char_star:4,char_end:38"->"is_boolean,type='identifier'\nline_star:275,line_end:275|char_star:8,char_end:18";
"(value),type='parameters'\nline_star:275,line_end:275|char_star:18,char_end:25"[shape="box",fillcolor="white",style=filled];
"def is_boolean(value):\n        return isinstance(value, bool),type='function_definition'\nline_star:275,line_end:276|char_star:4,char_end:38"->"(value),type='parameters'\nline_star:275,line_end:275|char_star:18,char_end:25";
"value,type='identifier'\nline_star:275,line_end:275|char_star:19,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"(value),type='parameters'\nline_star:275,line_end:275|char_star:18,char_end:25"->"value,type='identifier'\nline_star:275,line_end:275|char_star:19,char_end:24";
"type='INFORMATION BLOCK'\nline_star:276,line_end:276|char_star:8,char_end:38"[shape="point",fillcolor="#121013",style=filled];
"def is_boolean(value):\n        return isinstance(value, bool),type='function_definition'\nline_star:275,line_end:276|char_star:4,char_end:38"->"type='INFORMATION BLOCK'\nline_star:276,line_end:276|char_star:8,char_end:38";
"return isinstance(value, bool),type='return_statement'\nline_star:276,line_end:276|char_star:8,char_end:38"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:276,line_end:276|char_star:8,char_end:38"->"return isinstance(value, bool),type='return_statement'\nline_star:276,line_end:276|char_star:8,char_end:38";
"@app.route('/')\n    def index():\n        return flask.render_template('template_test.html', value=False),type='decorated_definition'\nline_star:278,line_end:280|char_star:4,char_end:71"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:274,line_end:283|char_star:4,char_end:33"->"@app.route('/')\n    def index():\n        return flask.render_template('template_test.html', value=False),type='decorated_definition'\nline_star:278,line_end:280|char_star:4,char_end:71";
"@app.route('/'),type='decorator'\nline_star:278,line_end:278|char_star:4,char_end:19"[shape="box",fillcolor="white",style=filled];
"@app.route('/')\n    def index():\n        return flask.render_template('template_test.html', value=False),type='decorated_definition'\nline_star:278,line_end:280|char_star:4,char_end:71"->"@app.route('/'),type='decorator'\nline_star:278,line_end:278|char_star:4,char_end:19";
"def index():\n        return flask.render_template('template_test.html', value=False),type='function_definition'\nline_star:279,line_end:280|char_star:4,char_end:71"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.route('/')\n    def index():\n        return flask.render_template('template_test.html', value=False),type='decorated_definition'\nline_star:278,line_end:280|char_star:4,char_end:71"->"def index():\n        return flask.render_template('template_test.html', value=False),type='function_definition'\nline_star:279,line_end:280|char_star:4,char_end:71";
"index,type='identifier'\nline_star:279,line_end:279|char_star:8,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"def index():\n        return flask.render_template('template_test.html', value=False),type='function_definition'\nline_star:279,line_end:280|char_star:4,char_end:71"->"index,type='identifier'\nline_star:279,line_end:279|char_star:8,char_end:13";
"type='INFORMATION BLOCK'\nline_star:280,line_end:280|char_star:8,char_end:71"[shape="point",fillcolor="#121013",style=filled];
"def index():\n        return flask.render_template('template_test.html', value=False),type='function_definition'\nline_star:279,line_end:280|char_star:4,char_end:71"->"type='INFORMATION BLOCK'\nline_star:280,line_end:280|char_star:8,char_end:71";
"return flask.render_template('template_test.html', value=False),type='return_statement'\nline_star:280,line_end:280|char_star:8,char_end:71"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:280,line_end:280|char_star:8,char_end:71"->"return flask.render_template('template_test.html', value=False),type='return_statement'\nline_star:280,line_end:280|char_star:8,char_end:71";
"assert b'Success!' in rv.data,type='assert_statement'\nline_star:283,line_end:283|char_star:4,char_end:33"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:274,line_end:283|char_star:4,char_end:33"->"assert b'Success!' in rv.data,type='assert_statement'\nline_star:283,line_end:283|char_star:4,char_end:33";
"b'Success!' in rv.data,type='comparison_operator'\nline_star:283,line_end:283|char_star:11,char_end:33"[shape="box",fillcolor="white",style=filled];
"assert b'Success!' in rv.data,type='assert_statement'\nline_star:283,line_end:283|char_star:4,char_end:33"->"b'Success!' in rv.data,type='comparison_operator'\nline_star:283,line_end:283|char_star:11,char_end:33";
"rv.data,type='attribute'\nline_star:283,line_end:283|char_star:26,char_end:33"[shape="box",fillcolor="white",style=filled];
"b'Success!' in rv.data,type='comparison_operator'\nline_star:283,line_end:283|char_star:11,char_end:33"->"rv.data,type='attribute'\nline_star:283,line_end:283|char_star:26,char_end:33";
"rv,type='identifier'\nline_star:283,line_end:283|char_star:26,char_end:28"[shape="point",fillcolor="#121013",style=filled];
"rv.data,type='attribute'\nline_star:283,line_end:283|char_star:26,char_end:33"->"rv,type='identifier'\nline_star:283,line_end:283|char_star:26,char_end:28";
"data,type='identifier'\nline_star:283,line_end:283|char_star:29,char_end:33"[shape="point",fillcolor="#121013",style=filled];
"rv.data,type='attribute'\nline_star:283,line_end:283|char_star:26,char_end:33"->"data,type='identifier'\nline_star:283,line_end:283|char_star:29,char_end:33";
"def test_add_template_test_with_name_and_template(app, client):\n    def is_boolean(value):\n        return isinstance(value, bool)\n\n    app.add_template_test(is_boolean, 'boolean')\n\n    @app.route('/')\n    def index():\n        return flask.render_template('template_test.html', value=False)\n\n    rv = client.get('/')\n    assert b'Success!' in rv.data,type='function_definition'\nline_star:286,line_end:297|char_star:0,char_end:33"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_add_template_test_with_name_and_template(app, client):\n    def is_boolean(value):\n        return isinstance(value, bool)\n\n    app.add_template_test(is_boolean, 'boolean')\n\n    @app.route('/')\n    def index():\n        return flask.render_template('template_test.html', value=False)\n\n    rv = client.get('/')\n    assert b'Success!' in rv.data,type='function_definition'\nline_star:286,line_end:297|char_star:0,char_end:33";
"test_add_template_test_with_name_and_template,type='identifier'\nline_star:286,line_end:286|char_star:4,char_end:49"[shape="point",fillcolor="#121013",style=filled];
"def test_add_template_test_with_name_and_template(app, client):\n    def is_boolean(value):\n        return isinstance(value, bool)\n\n    app.add_template_test(is_boolean, 'boolean')\n\n    @app.route('/')\n    def index():\n        return flask.render_template('template_test.html', value=False)\n\n    rv = client.get('/')\n    assert b'Success!' in rv.data,type='function_definition'\nline_star:286,line_end:297|char_star:0,char_end:33"->"test_add_template_test_with_name_and_template,type='identifier'\nline_star:286,line_end:286|char_star:4,char_end:49";
"(app, client),type='parameters'\nline_star:286,line_end:286|char_star:49,char_end:62"[shape="box",fillcolor="white",style=filled];
"def test_add_template_test_with_name_and_template(app, client):\n    def is_boolean(value):\n        return isinstance(value, bool)\n\n    app.add_template_test(is_boolean, 'boolean')\n\n    @app.route('/')\n    def index():\n        return flask.render_template('template_test.html', value=False)\n\n    rv = client.get('/')\n    assert b'Success!' in rv.data,type='function_definition'\nline_star:286,line_end:297|char_star:0,char_end:33"->"(app, client),type='parameters'\nline_star:286,line_end:286|char_star:49,char_end:62";
"app,type='identifier'\nline_star:286,line_end:286|char_star:50,char_end:53"[shape="point",fillcolor="#121013",style=filled];
"(app, client),type='parameters'\nline_star:286,line_end:286|char_star:49,char_end:62"->"app,type='identifier'\nline_star:286,line_end:286|char_star:50,char_end:53";
"client,type='identifier'\nline_star:286,line_end:286|char_star:55,char_end:61"[shape="point",fillcolor="#121013",style=filled];
"(app, client),type='parameters'\nline_star:286,line_end:286|char_star:49,char_end:62"->"client,type='identifier'\nline_star:286,line_end:286|char_star:55,char_end:61";
"type='INFORMATION BLOCK'\nline_star:287,line_end:297|char_star:4,char_end:33"[shape="point",fillcolor="#121013",style=filled];
"def test_add_template_test_with_name_and_template(app, client):\n    def is_boolean(value):\n        return isinstance(value, bool)\n\n    app.add_template_test(is_boolean, 'boolean')\n\n    @app.route('/')\n    def index():\n        return flask.render_template('template_test.html', value=False)\n\n    rv = client.get('/')\n    assert b'Success!' in rv.data,type='function_definition'\nline_star:286,line_end:297|char_star:0,char_end:33"->"type='INFORMATION BLOCK'\nline_star:287,line_end:297|char_star:4,char_end:33";
"def is_boolean(value):\n        return isinstance(value, bool),type='function_definition'\nline_star:287,line_end:288|char_star:4,char_end:38"[shape="box",fillcolor="#cee6b4",style=filled];
"type='INFORMATION BLOCK'\nline_star:287,line_end:297|char_star:4,char_end:33"->"def is_boolean(value):\n        return isinstance(value, bool),type='function_definition'\nline_star:287,line_end:288|char_star:4,char_end:38";
"is_boolean,type='identifier'\nline_star:287,line_end:287|char_star:8,char_end:18"[shape="point",fillcolor="#121013",style=filled];
"def is_boolean(value):\n        return isinstance(value, bool),type='function_definition'\nline_star:287,line_end:288|char_star:4,char_end:38"->"is_boolean,type='identifier'\nline_star:287,line_end:287|char_star:8,char_end:18";
"(value),type='parameters'\nline_star:287,line_end:287|char_star:18,char_end:25"[shape="box",fillcolor="white",style=filled];
"def is_boolean(value):\n        return isinstance(value, bool),type='function_definition'\nline_star:287,line_end:288|char_star:4,char_end:38"->"(value),type='parameters'\nline_star:287,line_end:287|char_star:18,char_end:25";
"value,type='identifier'\nline_star:287,line_end:287|char_star:19,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"(value),type='parameters'\nline_star:287,line_end:287|char_star:18,char_end:25"->"value,type='identifier'\nline_star:287,line_end:287|char_star:19,char_end:24";
"type='INFORMATION BLOCK'\nline_star:288,line_end:288|char_star:8,char_end:38"[shape="point",fillcolor="#121013",style=filled];
"def is_boolean(value):\n        return isinstance(value, bool),type='function_definition'\nline_star:287,line_end:288|char_star:4,char_end:38"->"type='INFORMATION BLOCK'\nline_star:288,line_end:288|char_star:8,char_end:38";
"return isinstance(value, bool),type='return_statement'\nline_star:288,line_end:288|char_star:8,char_end:38"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:288,line_end:288|char_star:8,char_end:38"->"return isinstance(value, bool),type='return_statement'\nline_star:288,line_end:288|char_star:8,char_end:38";
"@app.route('/')\n    def index():\n        return flask.render_template('template_test.html', value=False),type='decorated_definition'\nline_star:292,line_end:294|char_star:4,char_end:71"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:287,line_end:297|char_star:4,char_end:33"->"@app.route('/')\n    def index():\n        return flask.render_template('template_test.html', value=False),type='decorated_definition'\nline_star:292,line_end:294|char_star:4,char_end:71";
"@app.route('/'),type='decorator'\nline_star:292,line_end:292|char_star:4,char_end:19"[shape="box",fillcolor="white",style=filled];
"@app.route('/')\n    def index():\n        return flask.render_template('template_test.html', value=False),type='decorated_definition'\nline_star:292,line_end:294|char_star:4,char_end:71"->"@app.route('/'),type='decorator'\nline_star:292,line_end:292|char_star:4,char_end:19";
"def index():\n        return flask.render_template('template_test.html', value=False),type='function_definition'\nline_star:293,line_end:294|char_star:4,char_end:71"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.route('/')\n    def index():\n        return flask.render_template('template_test.html', value=False),type='decorated_definition'\nline_star:292,line_end:294|char_star:4,char_end:71"->"def index():\n        return flask.render_template('template_test.html', value=False),type='function_definition'\nline_star:293,line_end:294|char_star:4,char_end:71";
"index,type='identifier'\nline_star:293,line_end:293|char_star:8,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"def index():\n        return flask.render_template('template_test.html', value=False),type='function_definition'\nline_star:293,line_end:294|char_star:4,char_end:71"->"index,type='identifier'\nline_star:293,line_end:293|char_star:8,char_end:13";
"type='INFORMATION BLOCK'\nline_star:294,line_end:294|char_star:8,char_end:71"[shape="point",fillcolor="#121013",style=filled];
"def index():\n        return flask.render_template('template_test.html', value=False),type='function_definition'\nline_star:293,line_end:294|char_star:4,char_end:71"->"type='INFORMATION BLOCK'\nline_star:294,line_end:294|char_star:8,char_end:71";
"return flask.render_template('template_test.html', value=False),type='return_statement'\nline_star:294,line_end:294|char_star:8,char_end:71"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:294,line_end:294|char_star:8,char_end:71"->"return flask.render_template('template_test.html', value=False),type='return_statement'\nline_star:294,line_end:294|char_star:8,char_end:71";
"assert b'Success!' in rv.data,type='assert_statement'\nline_star:297,line_end:297|char_star:4,char_end:33"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:287,line_end:297|char_star:4,char_end:33"->"assert b'Success!' in rv.data,type='assert_statement'\nline_star:297,line_end:297|char_star:4,char_end:33";
"b'Success!' in rv.data,type='comparison_operator'\nline_star:297,line_end:297|char_star:11,char_end:33"[shape="box",fillcolor="white",style=filled];
"assert b'Success!' in rv.data,type='assert_statement'\nline_star:297,line_end:297|char_star:4,char_end:33"->"b'Success!' in rv.data,type='comparison_operator'\nline_star:297,line_end:297|char_star:11,char_end:33";
"rv.data,type='attribute'\nline_star:297,line_end:297|char_star:26,char_end:33"[shape="box",fillcolor="white",style=filled];
"b'Success!' in rv.data,type='comparison_operator'\nline_star:297,line_end:297|char_star:11,char_end:33"->"rv.data,type='attribute'\nline_star:297,line_end:297|char_star:26,char_end:33";
"rv,type='identifier'\nline_star:297,line_end:297|char_star:26,char_end:28"[shape="point",fillcolor="#121013",style=filled];
"rv.data,type='attribute'\nline_star:297,line_end:297|char_star:26,char_end:33"->"rv,type='identifier'\nline_star:297,line_end:297|char_star:26,char_end:28";
"data,type='identifier'\nline_star:297,line_end:297|char_star:29,char_end:33"[shape="point",fillcolor="#121013",style=filled];
"rv.data,type='attribute'\nline_star:297,line_end:297|char_star:26,char_end:33"->"data,type='identifier'\nline_star:297,line_end:297|char_star:29,char_end:33";
"def test_add_template_global(app, app_ctx):\n    @app.template_global()\n    def get_stuff():\n        return 42\n\n    assert 'get_stuff' in app.jinja_env.globals.keys()\n    assert app.jinja_env.globals['get_stuff'] == get_stuff\n    assert app.jinja_env.globals['get_stuff'](), 42\n\n    rv = flask.render_template_string('{{ get_stuff() }}')\n    assert rv == '42',type='function_definition'\nline_star:300,line_end:310|char_star:0,char_end:21"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_add_template_global(app, app_ctx):\n    @app.template_global()\n    def get_stuff():\n        return 42\n\n    assert 'get_stuff' in app.jinja_env.globals.keys()\n    assert app.jinja_env.globals['get_stuff'] == get_stuff\n    assert app.jinja_env.globals['get_stuff'](), 42\n\n    rv = flask.render_template_string('{{ get_stuff() }}')\n    assert rv == '42',type='function_definition'\nline_star:300,line_end:310|char_star:0,char_end:21";
"test_add_template_global,type='identifier'\nline_star:300,line_end:300|char_star:4,char_end:28"[shape="point",fillcolor="#121013",style=filled];
"def test_add_template_global(app, app_ctx):\n    @app.template_global()\n    def get_stuff():\n        return 42\n\n    assert 'get_stuff' in app.jinja_env.globals.keys()\n    assert app.jinja_env.globals['get_stuff'] == get_stuff\n    assert app.jinja_env.globals['get_stuff'](), 42\n\n    rv = flask.render_template_string('{{ get_stuff() }}')\n    assert rv == '42',type='function_definition'\nline_star:300,line_end:310|char_star:0,char_end:21"->"test_add_template_global,type='identifier'\nline_star:300,line_end:300|char_star:4,char_end:28";
"(app, app_ctx),type='parameters'\nline_star:300,line_end:300|char_star:28,char_end:42"[shape="box",fillcolor="white",style=filled];
"def test_add_template_global(app, app_ctx):\n    @app.template_global()\n    def get_stuff():\n        return 42\n\n    assert 'get_stuff' in app.jinja_env.globals.keys()\n    assert app.jinja_env.globals['get_stuff'] == get_stuff\n    assert app.jinja_env.globals['get_stuff'](), 42\n\n    rv = flask.render_template_string('{{ get_stuff() }}')\n    assert rv == '42',type='function_definition'\nline_star:300,line_end:310|char_star:0,char_end:21"->"(app, app_ctx),type='parameters'\nline_star:300,line_end:300|char_star:28,char_end:42";
"app,type='identifier'\nline_star:300,line_end:300|char_star:29,char_end:32"[shape="point",fillcolor="#121013",style=filled];
"(app, app_ctx),type='parameters'\nline_star:300,line_end:300|char_star:28,char_end:42"->"app,type='identifier'\nline_star:300,line_end:300|char_star:29,char_end:32";
"app_ctx,type='identifier'\nline_star:300,line_end:300|char_star:34,char_end:41"[shape="point",fillcolor="#121013",style=filled];
"(app, app_ctx),type='parameters'\nline_star:300,line_end:300|char_star:28,char_end:42"->"app_ctx,type='identifier'\nline_star:300,line_end:300|char_star:34,char_end:41";
"type='INFORMATION BLOCK'\nline_star:301,line_end:310|char_star:4,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"def test_add_template_global(app, app_ctx):\n    @app.template_global()\n    def get_stuff():\n        return 42\n\n    assert 'get_stuff' in app.jinja_env.globals.keys()\n    assert app.jinja_env.globals['get_stuff'] == get_stuff\n    assert app.jinja_env.globals['get_stuff'](), 42\n\n    rv = flask.render_template_string('{{ get_stuff() }}')\n    assert rv == '42',type='function_definition'\nline_star:300,line_end:310|char_star:0,char_end:21"->"type='INFORMATION BLOCK'\nline_star:301,line_end:310|char_star:4,char_end:21";
"@app.template_global()\n    def get_stuff():\n        return 42,type='decorated_definition'\nline_star:301,line_end:303|char_star:4,char_end:17"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:301,line_end:310|char_star:4,char_end:21"->"@app.template_global()\n    def get_stuff():\n        return 42,type='decorated_definition'\nline_star:301,line_end:303|char_star:4,char_end:17";
"@app.template_global(),type='decorator'\nline_star:301,line_end:301|char_star:4,char_end:26"[shape="box",fillcolor="white",style=filled];
"@app.template_global()\n    def get_stuff():\n        return 42,type='decorated_definition'\nline_star:301,line_end:303|char_star:4,char_end:17"->"@app.template_global(),type='decorator'\nline_star:301,line_end:301|char_star:4,char_end:26";
"def get_stuff():\n        return 42,type='function_definition'\nline_star:302,line_end:303|char_star:4,char_end:17"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.template_global()\n    def get_stuff():\n        return 42,type='decorated_definition'\nline_star:301,line_end:303|char_star:4,char_end:17"->"def get_stuff():\n        return 42,type='function_definition'\nline_star:302,line_end:303|char_star:4,char_end:17";
"get_stuff,type='identifier'\nline_star:302,line_end:302|char_star:8,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"def get_stuff():\n        return 42,type='function_definition'\nline_star:302,line_end:303|char_star:4,char_end:17"->"get_stuff,type='identifier'\nline_star:302,line_end:302|char_star:8,char_end:17";
"type='INFORMATION BLOCK'\nline_star:303,line_end:303|char_star:8,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"def get_stuff():\n        return 42,type='function_definition'\nline_star:302,line_end:303|char_star:4,char_end:17"->"type='INFORMATION BLOCK'\nline_star:303,line_end:303|char_star:8,char_end:17";
"return 42,type='return_statement'\nline_star:303,line_end:303|char_star:8,char_end:17"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:303,line_end:303|char_star:8,char_end:17"->"return 42,type='return_statement'\nline_star:303,line_end:303|char_star:8,char_end:17";
"assert 'get_stuff' in app.jinja_env.globals.keys(),type='assert_statement'\nline_star:305,line_end:305|char_star:4,char_end:54"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:301,line_end:310|char_star:4,char_end:21"->"assert 'get_stuff' in app.jinja_env.globals.keys(),type='assert_statement'\nline_star:305,line_end:305|char_star:4,char_end:54";
"'get_stuff' in app.jinja_env.globals.keys(),type='comparison_operator'\nline_star:305,line_end:305|char_star:11,char_end:54"[shape="box",fillcolor="white",style=filled];
"assert 'get_stuff' in app.jinja_env.globals.keys(),type='assert_statement'\nline_star:305,line_end:305|char_star:4,char_end:54"->"'get_stuff' in app.jinja_env.globals.keys(),type='comparison_operator'\nline_star:305,line_end:305|char_star:11,char_end:54";
"app.jinja_env.globals.keys(),type='call'\nline_star:305,line_end:305|char_star:26,char_end:54"[shape="box",fillcolor="white",style=filled];
"'get_stuff' in app.jinja_env.globals.keys(),type='comparison_operator'\nline_star:305,line_end:305|char_star:11,char_end:54"->"app.jinja_env.globals.keys(),type='call'\nline_star:305,line_end:305|char_star:26,char_end:54";
"app.jinja_env.globals.keys,type='attribute'\nline_star:305,line_end:305|char_star:26,char_end:52"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.globals.keys(),type='call'\nline_star:305,line_end:305|char_star:26,char_end:54"->"app.jinja_env.globals.keys,type='attribute'\nline_star:305,line_end:305|char_star:26,char_end:52";
"app.jinja_env.globals,type='attribute'\nline_star:305,line_end:305|char_star:26,char_end:47"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.globals.keys,type='attribute'\nline_star:305,line_end:305|char_star:26,char_end:52"->"app.jinja_env.globals,type='attribute'\nline_star:305,line_end:305|char_star:26,char_end:47";
"app.jinja_env,type='attribute'\nline_star:305,line_end:305|char_star:26,char_end:39"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.globals,type='attribute'\nline_star:305,line_end:305|char_star:26,char_end:47"->"app.jinja_env,type='attribute'\nline_star:305,line_end:305|char_star:26,char_end:39";
"app,type='identifier'\nline_star:305,line_end:305|char_star:26,char_end:29"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env,type='attribute'\nline_star:305,line_end:305|char_star:26,char_end:39"->"app,type='identifier'\nline_star:305,line_end:305|char_star:26,char_end:29";
"jinja_env,type='identifier'\nline_star:305,line_end:305|char_star:30,char_end:39"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env,type='attribute'\nline_star:305,line_end:305|char_star:26,char_end:39"->"jinja_env,type='identifier'\nline_star:305,line_end:305|char_star:30,char_end:39";
"globals,type='identifier'\nline_star:305,line_end:305|char_star:40,char_end:47"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env.globals,type='attribute'\nline_star:305,line_end:305|char_star:26,char_end:47"->"globals,type='identifier'\nline_star:305,line_end:305|char_star:40,char_end:47";
"keys,type='identifier'\nline_star:305,line_end:305|char_star:48,char_end:52"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env.globals.keys,type='attribute'\nline_star:305,line_end:305|char_star:26,char_end:52"->"keys,type='identifier'\nline_star:305,line_end:305|char_star:48,char_end:52";
"assert app.jinja_env.globals['get_stuff'] == get_stuff,type='assert_statement'\nline_star:306,line_end:306|char_star:4,char_end:58"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:301,line_end:310|char_star:4,char_end:21"->"assert app.jinja_env.globals['get_stuff'] == get_stuff,type='assert_statement'\nline_star:306,line_end:306|char_star:4,char_end:58";
"app.jinja_env.globals['get_stuff'] == get_stuff,type='comparison_operator'\nline_star:306,line_end:306|char_star:11,char_end:58"[shape="box",fillcolor="white",style=filled];
"assert app.jinja_env.globals['get_stuff'] == get_stuff,type='assert_statement'\nline_star:306,line_end:306|char_star:4,char_end:58"->"app.jinja_env.globals['get_stuff'] == get_stuff,type='comparison_operator'\nline_star:306,line_end:306|char_star:11,char_end:58";
"app.jinja_env.globals['get_stuff'],type='subscript'\nline_star:306,line_end:306|char_star:11,char_end:45"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.globals['get_stuff'] == get_stuff,type='comparison_operator'\nline_star:306,line_end:306|char_star:11,char_end:58"->"app.jinja_env.globals['get_stuff'],type='subscript'\nline_star:306,line_end:306|char_star:11,char_end:45";
"app.jinja_env.globals,type='attribute'\nline_star:306,line_end:306|char_star:11,char_end:32"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.globals['get_stuff'],type='subscript'\nline_star:306,line_end:306|char_star:11,char_end:45"->"app.jinja_env.globals,type='attribute'\nline_star:306,line_end:306|char_star:11,char_end:32";
"app.jinja_env,type='attribute'\nline_star:306,line_end:306|char_star:11,char_end:24"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.globals,type='attribute'\nline_star:306,line_end:306|char_star:11,char_end:32"->"app.jinja_env,type='attribute'\nline_star:306,line_end:306|char_star:11,char_end:24";
"app,type='identifier'\nline_star:306,line_end:306|char_star:11,char_end:14"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env,type='attribute'\nline_star:306,line_end:306|char_star:11,char_end:24"->"app,type='identifier'\nline_star:306,line_end:306|char_star:11,char_end:14";
"jinja_env,type='identifier'\nline_star:306,line_end:306|char_star:15,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env,type='attribute'\nline_star:306,line_end:306|char_star:11,char_end:24"->"jinja_env,type='identifier'\nline_star:306,line_end:306|char_star:15,char_end:24";
"globals,type='identifier'\nline_star:306,line_end:306|char_star:25,char_end:32"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env.globals,type='attribute'\nline_star:306,line_end:306|char_star:11,char_end:32"->"globals,type='identifier'\nline_star:306,line_end:306|char_star:25,char_end:32";
"get_stuff,type='identifier'\nline_star:306,line_end:306|char_star:49,char_end:58"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env.globals['get_stuff'] == get_stuff,type='comparison_operator'\nline_star:306,line_end:306|char_star:11,char_end:58"->"get_stuff,type='identifier'\nline_star:306,line_end:306|char_star:49,char_end:58";
"assert app.jinja_env.globals['get_stuff'](), 42,type='assert_statement'\nline_star:307,line_end:307|char_star:4,char_end:51"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:301,line_end:310|char_star:4,char_end:21"->"assert app.jinja_env.globals['get_stuff'](), 42,type='assert_statement'\nline_star:307,line_end:307|char_star:4,char_end:51";
"app.jinja_env.globals['get_stuff'](),type='call'\nline_star:307,line_end:307|char_star:11,char_end:47"[shape="box",fillcolor="white",style=filled];
"assert app.jinja_env.globals['get_stuff'](), 42,type='assert_statement'\nline_star:307,line_end:307|char_star:4,char_end:51"->"app.jinja_env.globals['get_stuff'](),type='call'\nline_star:307,line_end:307|char_star:11,char_end:47";
"app.jinja_env.globals['get_stuff'],type='subscript'\nline_star:307,line_end:307|char_star:11,char_end:45"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.globals['get_stuff'](),type='call'\nline_star:307,line_end:307|char_star:11,char_end:47"->"app.jinja_env.globals['get_stuff'],type='subscript'\nline_star:307,line_end:307|char_star:11,char_end:45";
"app.jinja_env.globals,type='attribute'\nline_star:307,line_end:307|char_star:11,char_end:32"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.globals['get_stuff'],type='subscript'\nline_star:307,line_end:307|char_star:11,char_end:45"->"app.jinja_env.globals,type='attribute'\nline_star:307,line_end:307|char_star:11,char_end:32";
"app.jinja_env,type='attribute'\nline_star:307,line_end:307|char_star:11,char_end:24"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.globals,type='attribute'\nline_star:307,line_end:307|char_star:11,char_end:32"->"app.jinja_env,type='attribute'\nline_star:307,line_end:307|char_star:11,char_end:24";
"app,type='identifier'\nline_star:307,line_end:307|char_star:11,char_end:14"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env,type='attribute'\nline_star:307,line_end:307|char_star:11,char_end:24"->"app,type='identifier'\nline_star:307,line_end:307|char_star:11,char_end:14";
"jinja_env,type='identifier'\nline_star:307,line_end:307|char_star:15,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env,type='attribute'\nline_star:307,line_end:307|char_star:11,char_end:24"->"jinja_env,type='identifier'\nline_star:307,line_end:307|char_star:15,char_end:24";
"globals,type='identifier'\nline_star:307,line_end:307|char_star:25,char_end:32"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env.globals,type='attribute'\nline_star:307,line_end:307|char_star:11,char_end:32"->"globals,type='identifier'\nline_star:307,line_end:307|char_star:25,char_end:32";
"assert rv == '42',type='assert_statement'\nline_star:310,line_end:310|char_star:4,char_end:21"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:301,line_end:310|char_star:4,char_end:21"->"assert rv == '42',type='assert_statement'\nline_star:310,line_end:310|char_star:4,char_end:21";
"rv == '42',type='comparison_operator'\nline_star:310,line_end:310|char_star:11,char_end:21"[shape="box",fillcolor="white",style=filled];
"assert rv == '42',type='assert_statement'\nline_star:310,line_end:310|char_star:4,char_end:21"->"rv == '42',type='comparison_operator'\nline_star:310,line_end:310|char_star:11,char_end:21";
"rv,type='identifier'\nline_star:310,line_end:310|char_star:11,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"rv == '42',type='comparison_operator'\nline_star:310,line_end:310|char_star:11,char_end:21"->"rv,type='identifier'\nline_star:310,line_end:310|char_star:11,char_end:13";
"def test_custom_template_loader(client):\n    class MyFlask(flask.Flask):\n        def create_global_jinja_loader(self):\n            from jinja2 import DictLoader\n\n            return DictLoader({'index.html': 'Hello Custom World!'})\n\n    app = MyFlask(__name__)\n\n    @app.route('/')\n    def index():\n        return flask.render_template('index.html')\n\n    c = app.test_client()\n    rv = c.get('/')\n    assert rv.data == b'Hello Custom World!',type='function_definition'\nline_star:313,line_end:328|char_star:0,char_end:44"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_custom_template_loader(client):\n    class MyFlask(flask.Flask):\n        def create_global_jinja_loader(self):\n            from jinja2 import DictLoader\n\n            return DictLoader({'index.html': 'Hello Custom World!'})\n\n    app = MyFlask(__name__)\n\n    @app.route('/')\n    def index():\n        return flask.render_template('index.html')\n\n    c = app.test_client()\n    rv = c.get('/')\n    assert rv.data == b'Hello Custom World!',type='function_definition'\nline_star:313,line_end:328|char_star:0,char_end:44";
"test_custom_template_loader,type='identifier'\nline_star:313,line_end:313|char_star:4,char_end:31"[shape="point",fillcolor="#121013",style=filled];
"def test_custom_template_loader(client):\n    class MyFlask(flask.Flask):\n        def create_global_jinja_loader(self):\n            from jinja2 import DictLoader\n\n            return DictLoader({'index.html': 'Hello Custom World!'})\n\n    app = MyFlask(__name__)\n\n    @app.route('/')\n    def index():\n        return flask.render_template('index.html')\n\n    c = app.test_client()\n    rv = c.get('/')\n    assert rv.data == b'Hello Custom World!',type='function_definition'\nline_star:313,line_end:328|char_star:0,char_end:44"->"test_custom_template_loader,type='identifier'\nline_star:313,line_end:313|char_star:4,char_end:31";
"(client),type='parameters'\nline_star:313,line_end:313|char_star:31,char_end:39"[shape="box",fillcolor="white",style=filled];
"def test_custom_template_loader(client):\n    class MyFlask(flask.Flask):\n        def create_global_jinja_loader(self):\n            from jinja2 import DictLoader\n\n            return DictLoader({'index.html': 'Hello Custom World!'})\n\n    app = MyFlask(__name__)\n\n    @app.route('/')\n    def index():\n        return flask.render_template('index.html')\n\n    c = app.test_client()\n    rv = c.get('/')\n    assert rv.data == b'Hello Custom World!',type='function_definition'\nline_star:313,line_end:328|char_star:0,char_end:44"->"(client),type='parameters'\nline_star:313,line_end:313|char_star:31,char_end:39";
"client,type='identifier'\nline_star:313,line_end:313|char_star:32,char_end:38"[shape="point",fillcolor="#121013",style=filled];
"(client),type='parameters'\nline_star:313,line_end:313|char_star:31,char_end:39"->"client,type='identifier'\nline_star:313,line_end:313|char_star:32,char_end:38";
"type='INFORMATION BLOCK'\nline_star:314,line_end:328|char_star:4,char_end:44"[shape="point",fillcolor="#121013",style=filled];
"def test_custom_template_loader(client):\n    class MyFlask(flask.Flask):\n        def create_global_jinja_loader(self):\n            from jinja2 import DictLoader\n\n            return DictLoader({'index.html': 'Hello Custom World!'})\n\n    app = MyFlask(__name__)\n\n    @app.route('/')\n    def index():\n        return flask.render_template('index.html')\n\n    c = app.test_client()\n    rv = c.get('/')\n    assert rv.data == b'Hello Custom World!',type='function_definition'\nline_star:313,line_end:328|char_star:0,char_end:44"->"type='INFORMATION BLOCK'\nline_star:314,line_end:328|char_star:4,char_end:44";
"class MyFlask(flask.Flask):\n        def create_global_jinja_loader(self):\n            from jinja2 import DictLoader\n\n            return DictLoader({'index.html': 'Hello Custom World!'}),type='class_definition'\nline_star:314,line_end:318|char_star:4,char_end:68"[shape="box",fillcolor="#ffdf91",style=filled];
"type='INFORMATION BLOCK'\nline_star:314,line_end:328|char_star:4,char_end:44"->"class MyFlask(flask.Flask):\n        def create_global_jinja_loader(self):\n            from jinja2 import DictLoader\n\n            return DictLoader({'index.html': 'Hello Custom World!'}),type='class_definition'\nline_star:314,line_end:318|char_star:4,char_end:68";
"MyFlask,type='identifier'\nline_star:314,line_end:314|char_star:10,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"class MyFlask(flask.Flask):\n        def create_global_jinja_loader(self):\n            from jinja2 import DictLoader\n\n            return DictLoader({'index.html': 'Hello Custom World!'}),type='class_definition'\nline_star:314,line_end:318|char_star:4,char_end:68"->"MyFlask,type='identifier'\nline_star:314,line_end:314|char_star:10,char_end:17";
"(flask.Flask),type='argument_list'\nline_star:314,line_end:314|char_star:17,char_end:30"[shape="box",fillcolor="white",style=filled];
"class MyFlask(flask.Flask):\n        def create_global_jinja_loader(self):\n            from jinja2 import DictLoader\n\n            return DictLoader({'index.html': 'Hello Custom World!'}),type='class_definition'\nline_star:314,line_end:318|char_star:4,char_end:68"->"(flask.Flask),type='argument_list'\nline_star:314,line_end:314|char_star:17,char_end:30";
"flask.Flask,type='attribute'\nline_star:314,line_end:314|char_star:18,char_end:29"[shape="box",fillcolor="white",style=filled];
"(flask.Flask),type='argument_list'\nline_star:314,line_end:314|char_star:17,char_end:30"->"flask.Flask,type='attribute'\nline_star:314,line_end:314|char_star:18,char_end:29";
"flask,type='identifier'\nline_star:314,line_end:314|char_star:18,char_end:23"[shape="point",fillcolor="#121013",style=filled];
"flask.Flask,type='attribute'\nline_star:314,line_end:314|char_star:18,char_end:29"->"flask,type='identifier'\nline_star:314,line_end:314|char_star:18,char_end:23";
"Flask,type='identifier'\nline_star:314,line_end:314|char_star:24,char_end:29"[shape="point",fillcolor="#121013",style=filled];
"flask.Flask,type='attribute'\nline_star:314,line_end:314|char_star:18,char_end:29"->"Flask,type='identifier'\nline_star:314,line_end:314|char_star:24,char_end:29";
"type='INFORMATION BLOCK'\nline_star:315,line_end:318|char_star:8,char_end:68"[shape="point",fillcolor="#121013",style=filled];
"class MyFlask(flask.Flask):\n        def create_global_jinja_loader(self):\n            from jinja2 import DictLoader\n\n            return DictLoader({'index.html': 'Hello Custom World!'}),type='class_definition'\nline_star:314,line_end:318|char_star:4,char_end:68"->"type='INFORMATION BLOCK'\nline_star:315,line_end:318|char_star:8,char_end:68";
"def create_global_jinja_loader(self):\n            from jinja2 import DictLoader\n\n            return DictLoader({'index.html': 'Hello Custom World!'}),type='function_definition'\nline_star:315,line_end:318|char_star:8,char_end:68"[shape="box",fillcolor="#cee6b4",style=filled];
"type='INFORMATION BLOCK'\nline_star:315,line_end:318|char_star:8,char_end:68"->"def create_global_jinja_loader(self):\n            from jinja2 import DictLoader\n\n            return DictLoader({'index.html': 'Hello Custom World!'}),type='function_definition'\nline_star:315,line_end:318|char_star:8,char_end:68";
"create_global_jinja_loader,type='identifier'\nline_star:315,line_end:315|char_star:12,char_end:38"[shape="point",fillcolor="#121013",style=filled];
"def create_global_jinja_loader(self):\n            from jinja2 import DictLoader\n\n            return DictLoader({'index.html': 'Hello Custom World!'}),type='function_definition'\nline_star:315,line_end:318|char_star:8,char_end:68"->"create_global_jinja_loader,type='identifier'\nline_star:315,line_end:315|char_star:12,char_end:38";
"(self),type='parameters'\nline_star:315,line_end:315|char_star:38,char_end:44"[shape="box",fillcolor="white",style=filled];
"def create_global_jinja_loader(self):\n            from jinja2 import DictLoader\n\n            return DictLoader({'index.html': 'Hello Custom World!'}),type='function_definition'\nline_star:315,line_end:318|char_star:8,char_end:68"->"(self),type='parameters'\nline_star:315,line_end:315|char_star:38,char_end:44";
"self,type='identifier'\nline_star:315,line_end:315|char_star:39,char_end:43"[shape="point",fillcolor="#121013",style=filled];
"(self),type='parameters'\nline_star:315,line_end:315|char_star:38,char_end:44"->"self,type='identifier'\nline_star:315,line_end:315|char_star:39,char_end:43";
"type='INFORMATION BLOCK'\nline_star:316,line_end:318|char_star:12,char_end:68"[shape="point",fillcolor="#121013",style=filled];
"def create_global_jinja_loader(self):\n            from jinja2 import DictLoader\n\n            return DictLoader({'index.html': 'Hello Custom World!'}),type='function_definition'\nline_star:315,line_end:318|char_star:8,char_end:68"->"type='INFORMATION BLOCK'\nline_star:316,line_end:318|char_star:12,char_end:68";
"from jinja2 import DictLoader,type='import_from_statement'\nline_star:316,line_end:316|char_star:12,char_end:41"[shape="box",fillcolor="#f48b29",style=filled];
"type='INFORMATION BLOCK'\nline_star:316,line_end:318|char_star:12,char_end:68"->"from jinja2 import DictLoader,type='import_from_statement'\nline_star:316,line_end:316|char_star:12,char_end:41";
"return DictLoader({'index.html': 'Hello Custom World!'}),type='return_statement'\nline_star:318,line_end:318|char_star:12,char_end:68"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:316,line_end:318|char_star:12,char_end:68"->"return DictLoader({'index.html': 'Hello Custom World!'}),type='return_statement'\nline_star:318,line_end:318|char_star:12,char_end:68";
"@app.route('/')\n    def index():\n        return flask.render_template('index.html'),type='decorated_definition'\nline_star:322,line_end:324|char_star:4,char_end:50"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:314,line_end:328|char_star:4,char_end:44"->"@app.route('/')\n    def index():\n        return flask.render_template('index.html'),type='decorated_definition'\nline_star:322,line_end:324|char_star:4,char_end:50";
"@app.route('/'),type='decorator'\nline_star:322,line_end:322|char_star:4,char_end:19"[shape="box",fillcolor="white",style=filled];
"@app.route('/')\n    def index():\n        return flask.render_template('index.html'),type='decorated_definition'\nline_star:322,line_end:324|char_star:4,char_end:50"->"@app.route('/'),type='decorator'\nline_star:322,line_end:322|char_star:4,char_end:19";
"def index():\n        return flask.render_template('index.html'),type='function_definition'\nline_star:323,line_end:324|char_star:4,char_end:50"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.route('/')\n    def index():\n        return flask.render_template('index.html'),type='decorated_definition'\nline_star:322,line_end:324|char_star:4,char_end:50"->"def index():\n        return flask.render_template('index.html'),type='function_definition'\nline_star:323,line_end:324|char_star:4,char_end:50";
"index,type='identifier'\nline_star:323,line_end:323|char_star:8,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"def index():\n        return flask.render_template('index.html'),type='function_definition'\nline_star:323,line_end:324|char_star:4,char_end:50"->"index,type='identifier'\nline_star:323,line_end:323|char_star:8,char_end:13";
"type='INFORMATION BLOCK'\nline_star:324,line_end:324|char_star:8,char_end:50"[shape="point",fillcolor="#121013",style=filled];
"def index():\n        return flask.render_template('index.html'),type='function_definition'\nline_star:323,line_end:324|char_star:4,char_end:50"->"type='INFORMATION BLOCK'\nline_star:324,line_end:324|char_star:8,char_end:50";
"return flask.render_template('index.html'),type='return_statement'\nline_star:324,line_end:324|char_star:8,char_end:50"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:324,line_end:324|char_star:8,char_end:50"->"return flask.render_template('index.html'),type='return_statement'\nline_star:324,line_end:324|char_star:8,char_end:50";
"assert rv.data == b'Hello Custom World!',type='assert_statement'\nline_star:328,line_end:328|char_star:4,char_end:44"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:314,line_end:328|char_star:4,char_end:44"->"assert rv.data == b'Hello Custom World!',type='assert_statement'\nline_star:328,line_end:328|char_star:4,char_end:44";
"rv.data == b'Hello Custom World!',type='comparison_operator'\nline_star:328,line_end:328|char_star:11,char_end:44"[shape="box",fillcolor="white",style=filled];
"assert rv.data == b'Hello Custom World!',type='assert_statement'\nline_star:328,line_end:328|char_star:4,char_end:44"->"rv.data == b'Hello Custom World!',type='comparison_operator'\nline_star:328,line_end:328|char_star:11,char_end:44";
"rv.data,type='attribute'\nline_star:328,line_end:328|char_star:11,char_end:18"[shape="box",fillcolor="white",style=filled];
"rv.data == b'Hello Custom World!',type='comparison_operator'\nline_star:328,line_end:328|char_star:11,char_end:44"->"rv.data,type='attribute'\nline_star:328,line_end:328|char_star:11,char_end:18";
"rv,type='identifier'\nline_star:328,line_end:328|char_star:11,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"rv.data,type='attribute'\nline_star:328,line_end:328|char_star:11,char_end:18"->"rv,type='identifier'\nline_star:328,line_end:328|char_star:11,char_end:13";
"data,type='identifier'\nline_star:328,line_end:328|char_star:14,char_end:18"[shape="point",fillcolor="#121013",style=filled];
"rv.data,type='attribute'\nline_star:328,line_end:328|char_star:11,char_end:18"->"data,type='identifier'\nline_star:328,line_end:328|char_star:14,char_end:18";
"def test_iterable_loader(app, client):\n    @app.context_processor\n    def context_processor():\n        return {'whiskey': 'Jameson'}\n\n    @app.route('/')\n    def index():\n        return flask.render_template(\n            [\n                'no_template.xml',  # should skip this one\n                'simple_template.html',  # should render this\n                'context_template.html',\n            ],\n            value=23,\n        )\n\n    rv = client.get('/')\n    assert rv.data == b'<h1>Jameson</h1>',type='function_definition'\nline_star:331,line_end:348|char_star:0,char_end:41"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_iterable_loader(app, client):\n    @app.context_processor\n    def context_processor():\n        return {'whiskey': 'Jameson'}\n\n    @app.route('/')\n    def index():\n        return flask.render_template(\n            [\n                'no_template.xml',  # should skip this one\n                'simple_template.html',  # should render this\n                'context_template.html',\n            ],\n            value=23,\n        )\n\n    rv = client.get('/')\n    assert rv.data == b'<h1>Jameson</h1>',type='function_definition'\nline_star:331,line_end:348|char_star:0,char_end:41";
"test_iterable_loader,type='identifier'\nline_star:331,line_end:331|char_star:4,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"def test_iterable_loader(app, client):\n    @app.context_processor\n    def context_processor():\n        return {'whiskey': 'Jameson'}\n\n    @app.route('/')\n    def index():\n        return flask.render_template(\n            [\n                'no_template.xml',  # should skip this one\n                'simple_template.html',  # should render this\n                'context_template.html',\n            ],\n            value=23,\n        )\n\n    rv = client.get('/')\n    assert rv.data == b'<h1>Jameson</h1>',type='function_definition'\nline_star:331,line_end:348|char_star:0,char_end:41"->"test_iterable_loader,type='identifier'\nline_star:331,line_end:331|char_star:4,char_end:24";
"(app, client),type='parameters'\nline_star:331,line_end:331|char_star:24,char_end:37"[shape="box",fillcolor="white",style=filled];
"def test_iterable_loader(app, client):\n    @app.context_processor\n    def context_processor():\n        return {'whiskey': 'Jameson'}\n\n    @app.route('/')\n    def index():\n        return flask.render_template(\n            [\n                'no_template.xml',  # should skip this one\n                'simple_template.html',  # should render this\n                'context_template.html',\n            ],\n            value=23,\n        )\n\n    rv = client.get('/')\n    assert rv.data == b'<h1>Jameson</h1>',type='function_definition'\nline_star:331,line_end:348|char_star:0,char_end:41"->"(app, client),type='parameters'\nline_star:331,line_end:331|char_star:24,char_end:37";
"app,type='identifier'\nline_star:331,line_end:331|char_star:25,char_end:28"[shape="point",fillcolor="#121013",style=filled];
"(app, client),type='parameters'\nline_star:331,line_end:331|char_star:24,char_end:37"->"app,type='identifier'\nline_star:331,line_end:331|char_star:25,char_end:28";
"client,type='identifier'\nline_star:331,line_end:331|char_star:30,char_end:36"[shape="point",fillcolor="#121013",style=filled];
"(app, client),type='parameters'\nline_star:331,line_end:331|char_star:24,char_end:37"->"client,type='identifier'\nline_star:331,line_end:331|char_star:30,char_end:36";
"type='INFORMATION BLOCK'\nline_star:332,line_end:348|char_star:4,char_end:41"[shape="point",fillcolor="#121013",style=filled];
"def test_iterable_loader(app, client):\n    @app.context_processor\n    def context_processor():\n        return {'whiskey': 'Jameson'}\n\n    @app.route('/')\n    def index():\n        return flask.render_template(\n            [\n                'no_template.xml',  # should skip this one\n                'simple_template.html',  # should render this\n                'context_template.html',\n            ],\n            value=23,\n        )\n\n    rv = client.get('/')\n    assert rv.data == b'<h1>Jameson</h1>',type='function_definition'\nline_star:331,line_end:348|char_star:0,char_end:41"->"type='INFORMATION BLOCK'\nline_star:332,line_end:348|char_star:4,char_end:41";
"@app.context_processor\n    def context_processor():\n        return {'whiskey': 'Jameson'},type='decorated_definition'\nline_star:332,line_end:334|char_star:4,char_end:37"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:332,line_end:348|char_star:4,char_end:41"->"@app.context_processor\n    def context_processor():\n        return {'whiskey': 'Jameson'},type='decorated_definition'\nline_star:332,line_end:334|char_star:4,char_end:37";
"@app.context_processor,type='decorator'\nline_star:332,line_end:332|char_star:4,char_end:26"[shape="box",fillcolor="white",style=filled];
"@app.context_processor\n    def context_processor():\n        return {'whiskey': 'Jameson'},type='decorated_definition'\nline_star:332,line_end:334|char_star:4,char_end:37"->"@app.context_processor,type='decorator'\nline_star:332,line_end:332|char_star:4,char_end:26";
"def context_processor():\n        return {'whiskey': 'Jameson'},type='function_definition'\nline_star:333,line_end:334|char_star:4,char_end:37"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.context_processor\n    def context_processor():\n        return {'whiskey': 'Jameson'},type='decorated_definition'\nline_star:332,line_end:334|char_star:4,char_end:37"->"def context_processor():\n        return {'whiskey': 'Jameson'},type='function_definition'\nline_star:333,line_end:334|char_star:4,char_end:37";
"context_processor,type='identifier'\nline_star:333,line_end:333|char_star:8,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"def context_processor():\n        return {'whiskey': 'Jameson'},type='function_definition'\nline_star:333,line_end:334|char_star:4,char_end:37"->"context_processor,type='identifier'\nline_star:333,line_end:333|char_star:8,char_end:25";
"type='INFORMATION BLOCK'\nline_star:334,line_end:334|char_star:8,char_end:37"[shape="point",fillcolor="#121013",style=filled];
"def context_processor():\n        return {'whiskey': 'Jameson'},type='function_definition'\nline_star:333,line_end:334|char_star:4,char_end:37"->"type='INFORMATION BLOCK'\nline_star:334,line_end:334|char_star:8,char_end:37";
"return {'whiskey': 'Jameson'},type='return_statement'\nline_star:334,line_end:334|char_star:8,char_end:37"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:334,line_end:334|char_star:8,char_end:37"->"return {'whiskey': 'Jameson'},type='return_statement'\nline_star:334,line_end:334|char_star:8,char_end:37";
"@app.route('/')\n    def index():\n        return flask.render_template(\n            [\n                'no_template.xml',  # should skip this one\n                'simple_template.html',  # should render this\n                'context_template.html',\n            ],\n            value=23,\n        ),type='decorated_definition'\nline_star:336,line_end:345|char_star:4,char_end:9"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:332,line_end:348|char_star:4,char_end:41"->"@app.route('/')\n    def index():\n        return flask.render_template(\n            [\n                'no_template.xml',  # should skip this one\n                'simple_template.html',  # should render this\n                'context_template.html',\n            ],\n            value=23,\n        ),type='decorated_definition'\nline_star:336,line_end:345|char_star:4,char_end:9";
"@app.route('/'),type='decorator'\nline_star:336,line_end:336|char_star:4,char_end:19"[shape="box",fillcolor="white",style=filled];
"@app.route('/')\n    def index():\n        return flask.render_template(\n            [\n                'no_template.xml',  # should skip this one\n                'simple_template.html',  # should render this\n                'context_template.html',\n            ],\n            value=23,\n        ),type='decorated_definition'\nline_star:336,line_end:345|char_star:4,char_end:9"->"@app.route('/'),type='decorator'\nline_star:336,line_end:336|char_star:4,char_end:19";
"def index():\n        return flask.render_template(\n            [\n                'no_template.xml',  # should skip this one\n                'simple_template.html',  # should render this\n                'context_template.html',\n            ],\n            value=23,\n        ),type='function_definition'\nline_star:337,line_end:345|char_star:4,char_end:9"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.route('/')\n    def index():\n        return flask.render_template(\n            [\n                'no_template.xml',  # should skip this one\n                'simple_template.html',  # should render this\n                'context_template.html',\n            ],\n            value=23,\n        ),type='decorated_definition'\nline_star:336,line_end:345|char_star:4,char_end:9"->"def index():\n        return flask.render_template(\n            [\n                'no_template.xml',  # should skip this one\n                'simple_template.html',  # should render this\n                'context_template.html',\n            ],\n            value=23,\n        ),type='function_definition'\nline_star:337,line_end:345|char_star:4,char_end:9";
"index,type='identifier'\nline_star:337,line_end:337|char_star:8,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"def index():\n        return flask.render_template(\n            [\n                'no_template.xml',  # should skip this one\n                'simple_template.html',  # should render this\n                'context_template.html',\n            ],\n            value=23,\n        ),type='function_definition'\nline_star:337,line_end:345|char_star:4,char_end:9"->"index,type='identifier'\nline_star:337,line_end:337|char_star:8,char_end:13";
"type='INFORMATION BLOCK'\nline_star:338,line_end:345|char_star:8,char_end:9"[shape="point",fillcolor="#121013",style=filled];
"def index():\n        return flask.render_template(\n            [\n                'no_template.xml',  # should skip this one\n                'simple_template.html',  # should render this\n                'context_template.html',\n            ],\n            value=23,\n        ),type='function_definition'\nline_star:337,line_end:345|char_star:4,char_end:9"->"type='INFORMATION BLOCK'\nline_star:338,line_end:345|char_star:8,char_end:9";
"return flask.render_template(\n            [\n                'no_template.xml',  # should skip this one\n                'simple_template.html',  # should render this\n                'context_template.html',\n            ],\n            value=23,\n        ),type='return_statement'\nline_star:338,line_end:345|char_star:8,char_end:9"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:338,line_end:345|char_star:8,char_end:9"->"return flask.render_template(\n            [\n                'no_template.xml',  # should skip this one\n                'simple_template.html',  # should render this\n                'context_template.html',\n            ],\n            value=23,\n        ),type='return_statement'\nline_star:338,line_end:345|char_star:8,char_end:9";
"assert rv.data == b'<h1>Jameson</h1>',type='assert_statement'\nline_star:348,line_end:348|char_star:4,char_end:41"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:332,line_end:348|char_star:4,char_end:41"->"assert rv.data == b'<h1>Jameson</h1>',type='assert_statement'\nline_star:348,line_end:348|char_star:4,char_end:41";
"rv.data == b'<h1>Jameson</h1>',type='comparison_operator'\nline_star:348,line_end:348|char_star:11,char_end:41"[shape="box",fillcolor="white",style=filled];
"assert rv.data == b'<h1>Jameson</h1>',type='assert_statement'\nline_star:348,line_end:348|char_star:4,char_end:41"->"rv.data == b'<h1>Jameson</h1>',type='comparison_operator'\nline_star:348,line_end:348|char_star:11,char_end:41";
"rv.data,type='attribute'\nline_star:348,line_end:348|char_star:11,char_end:18"[shape="box",fillcolor="white",style=filled];
"rv.data == b'<h1>Jameson</h1>',type='comparison_operator'\nline_star:348,line_end:348|char_star:11,char_end:41"->"rv.data,type='attribute'\nline_star:348,line_end:348|char_star:11,char_end:18";
"rv,type='identifier'\nline_star:348,line_end:348|char_star:11,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"rv.data,type='attribute'\nline_star:348,line_end:348|char_star:11,char_end:18"->"rv,type='identifier'\nline_star:348,line_end:348|char_star:11,char_end:13";
"data,type='identifier'\nline_star:348,line_end:348|char_star:14,char_end:18"[shape="point",fillcolor="#121013",style=filled];
"rv.data,type='attribute'\nline_star:348,line_end:348|char_star:11,char_end:18"->"data,type='identifier'\nline_star:348,line_end:348|char_star:14,char_end:18";
"def test_templates_auto_reload(app):\n    # debug is False, config option is None\n    assert app.debug is False\n    assert app.config['TEMPLATES_AUTO_RELOAD'] is None\n    assert app.jinja_env.auto_reload is False\n    # debug is False, config option is False\n    app = flask.Flask(__name__)\n    app.config['TEMPLATES_AUTO_RELOAD'] = False\n    assert app.debug is False\n    assert app.jinja_env.auto_reload is False\n    # debug is False, config option is True\n    app = flask.Flask(__name__)\n    app.config['TEMPLATES_AUTO_RELOAD'] = True\n    assert app.debug is False\n    assert app.jinja_env.auto_reload is True\n    # debug is True, config option is None\n    app = flask.Flask(__name__)\n    app.config['DEBUG'] = True\n    assert app.config['TEMPLATES_AUTO_RELOAD'] is None\n    assert app.jinja_env.auto_reload is True\n    # debug is True, config option is False\n    app = flask.Flask(__name__)\n    app.config['DEBUG'] = True\n    app.config['TEMPLATES_AUTO_RELOAD'] = False\n    assert app.jinja_env.auto_reload is False\n    # debug is True, config option is True\n    app = flask.Flask(__name__)\n    app.config['DEBUG'] = True\n    app.config['TEMPLATES_AUTO_RELOAD'] = True\n    assert app.jinja_env.auto_reload is True,type='function_definition'\nline_star:351,line_end:380|char_star:0,char_end:44"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_templates_auto_reload(app):\n    # debug is False, config option is None\n    assert app.debug is False\n    assert app.config['TEMPLATES_AUTO_RELOAD'] is None\n    assert app.jinja_env.auto_reload is False\n    # debug is False, config option is False\n    app = flask.Flask(__name__)\n    app.config['TEMPLATES_AUTO_RELOAD'] = False\n    assert app.debug is False\n    assert app.jinja_env.auto_reload is False\n    # debug is False, config option is True\n    app = flask.Flask(__name__)\n    app.config['TEMPLATES_AUTO_RELOAD'] = True\n    assert app.debug is False\n    assert app.jinja_env.auto_reload is True\n    # debug is True, config option is None\n    app = flask.Flask(__name__)\n    app.config['DEBUG'] = True\n    assert app.config['TEMPLATES_AUTO_RELOAD'] is None\n    assert app.jinja_env.auto_reload is True\n    # debug is True, config option is False\n    app = flask.Flask(__name__)\n    app.config['DEBUG'] = True\n    app.config['TEMPLATES_AUTO_RELOAD'] = False\n    assert app.jinja_env.auto_reload is False\n    # debug is True, config option is True\n    app = flask.Flask(__name__)\n    app.config['DEBUG'] = True\n    app.config['TEMPLATES_AUTO_RELOAD'] = True\n    assert app.jinja_env.auto_reload is True,type='function_definition'\nline_star:351,line_end:380|char_star:0,char_end:44";
"test_templates_auto_reload,type='identifier'\nline_star:351,line_end:351|char_star:4,char_end:30"[shape="point",fillcolor="#121013",style=filled];
"def test_templates_auto_reload(app):\n    # debug is False, config option is None\n    assert app.debug is False\n    assert app.config['TEMPLATES_AUTO_RELOAD'] is None\n    assert app.jinja_env.auto_reload is False\n    # debug is False, config option is False\n    app = flask.Flask(__name__)\n    app.config['TEMPLATES_AUTO_RELOAD'] = False\n    assert app.debug is False\n    assert app.jinja_env.auto_reload is False\n    # debug is False, config option is True\n    app = flask.Flask(__name__)\n    app.config['TEMPLATES_AUTO_RELOAD'] = True\n    assert app.debug is False\n    assert app.jinja_env.auto_reload is True\n    # debug is True, config option is None\n    app = flask.Flask(__name__)\n    app.config['DEBUG'] = True\n    assert app.config['TEMPLATES_AUTO_RELOAD'] is None\n    assert app.jinja_env.auto_reload is True\n    # debug is True, config option is False\n    app = flask.Flask(__name__)\n    app.config['DEBUG'] = True\n    app.config['TEMPLATES_AUTO_RELOAD'] = False\n    assert app.jinja_env.auto_reload is False\n    # debug is True, config option is True\n    app = flask.Flask(__name__)\n    app.config['DEBUG'] = True\n    app.config['TEMPLATES_AUTO_RELOAD'] = True\n    assert app.jinja_env.auto_reload is True,type='function_definition'\nline_star:351,line_end:380|char_star:0,char_end:44"->"test_templates_auto_reload,type='identifier'\nline_star:351,line_end:351|char_star:4,char_end:30";
"(app),type='parameters'\nline_star:351,line_end:351|char_star:30,char_end:35"[shape="box",fillcolor="white",style=filled];
"def test_templates_auto_reload(app):\n    # debug is False, config option is None\n    assert app.debug is False\n    assert app.config['TEMPLATES_AUTO_RELOAD'] is None\n    assert app.jinja_env.auto_reload is False\n    # debug is False, config option is False\n    app = flask.Flask(__name__)\n    app.config['TEMPLATES_AUTO_RELOAD'] = False\n    assert app.debug is False\n    assert app.jinja_env.auto_reload is False\n    # debug is False, config option is True\n    app = flask.Flask(__name__)\n    app.config['TEMPLATES_AUTO_RELOAD'] = True\n    assert app.debug is False\n    assert app.jinja_env.auto_reload is True\n    # debug is True, config option is None\n    app = flask.Flask(__name__)\n    app.config['DEBUG'] = True\n    assert app.config['TEMPLATES_AUTO_RELOAD'] is None\n    assert app.jinja_env.auto_reload is True\n    # debug is True, config option is False\n    app = flask.Flask(__name__)\n    app.config['DEBUG'] = True\n    app.config['TEMPLATES_AUTO_RELOAD'] = False\n    assert app.jinja_env.auto_reload is False\n    # debug is True, config option is True\n    app = flask.Flask(__name__)\n    app.config['DEBUG'] = True\n    app.config['TEMPLATES_AUTO_RELOAD'] = True\n    assert app.jinja_env.auto_reload is True,type='function_definition'\nline_star:351,line_end:380|char_star:0,char_end:44"->"(app),type='parameters'\nline_star:351,line_end:351|char_star:30,char_end:35";
"app,type='identifier'\nline_star:351,line_end:351|char_star:31,char_end:34"[shape="point",fillcolor="#121013",style=filled];
"(app),type='parameters'\nline_star:351,line_end:351|char_star:30,char_end:35"->"app,type='identifier'\nline_star:351,line_end:351|char_star:31,char_end:34";
"# debug is False, config option is None,type='comment'\nline_star:352,line_end:352|char_star:4,char_end:43"[shape="box",fillcolor="#f0c929",style=filled];
"def test_templates_auto_reload(app):\n    # debug is False, config option is None\n    assert app.debug is False\n    assert app.config['TEMPLATES_AUTO_RELOAD'] is None\n    assert app.jinja_env.auto_reload is False\n    # debug is False, config option is False\n    app = flask.Flask(__name__)\n    app.config['TEMPLATES_AUTO_RELOAD'] = False\n    assert app.debug is False\n    assert app.jinja_env.auto_reload is False\n    # debug is False, config option is True\n    app = flask.Flask(__name__)\n    app.config['TEMPLATES_AUTO_RELOAD'] = True\n    assert app.debug is False\n    assert app.jinja_env.auto_reload is True\n    # debug is True, config option is None\n    app = flask.Flask(__name__)\n    app.config['DEBUG'] = True\n    assert app.config['TEMPLATES_AUTO_RELOAD'] is None\n    assert app.jinja_env.auto_reload is True\n    # debug is True, config option is False\n    app = flask.Flask(__name__)\n    app.config['DEBUG'] = True\n    app.config['TEMPLATES_AUTO_RELOAD'] = False\n    assert app.jinja_env.auto_reload is False\n    # debug is True, config option is True\n    app = flask.Flask(__name__)\n    app.config['DEBUG'] = True\n    app.config['TEMPLATES_AUTO_RELOAD'] = True\n    assert app.jinja_env.auto_reload is True,type='function_definition'\nline_star:351,line_end:380|char_star:0,char_end:44"->"# debug is False, config option is None,type='comment'\nline_star:352,line_end:352|char_star:4,char_end:43";
"type='INFORMATION BLOCK'\nline_star:353,line_end:380|char_star:4,char_end:44"[shape="point",fillcolor="#121013",style=filled];
"def test_templates_auto_reload(app):\n    # debug is False, config option is None\n    assert app.debug is False\n    assert app.config['TEMPLATES_AUTO_RELOAD'] is None\n    assert app.jinja_env.auto_reload is False\n    # debug is False, config option is False\n    app = flask.Flask(__name__)\n    app.config['TEMPLATES_AUTO_RELOAD'] = False\n    assert app.debug is False\n    assert app.jinja_env.auto_reload is False\n    # debug is False, config option is True\n    app = flask.Flask(__name__)\n    app.config['TEMPLATES_AUTO_RELOAD'] = True\n    assert app.debug is False\n    assert app.jinja_env.auto_reload is True\n    # debug is True, config option is None\n    app = flask.Flask(__name__)\n    app.config['DEBUG'] = True\n    assert app.config['TEMPLATES_AUTO_RELOAD'] is None\n    assert app.jinja_env.auto_reload is True\n    # debug is True, config option is False\n    app = flask.Flask(__name__)\n    app.config['DEBUG'] = True\n    app.config['TEMPLATES_AUTO_RELOAD'] = False\n    assert app.jinja_env.auto_reload is False\n    # debug is True, config option is True\n    app = flask.Flask(__name__)\n    app.config['DEBUG'] = True\n    app.config['TEMPLATES_AUTO_RELOAD'] = True\n    assert app.jinja_env.auto_reload is True,type='function_definition'\nline_star:351,line_end:380|char_star:0,char_end:44"->"type='INFORMATION BLOCK'\nline_star:353,line_end:380|char_star:4,char_end:44";
"assert app.debug is False,type='assert_statement'\nline_star:353,line_end:353|char_star:4,char_end:29"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:353,line_end:380|char_star:4,char_end:44"->"assert app.debug is False,type='assert_statement'\nline_star:353,line_end:353|char_star:4,char_end:29";
"app.debug is False,type='comparison_operator'\nline_star:353,line_end:353|char_star:11,char_end:29"[shape="box",fillcolor="white",style=filled];
"assert app.debug is False,type='assert_statement'\nline_star:353,line_end:353|char_star:4,char_end:29"->"app.debug is False,type='comparison_operator'\nline_star:353,line_end:353|char_star:11,char_end:29";
"app.debug,type='attribute'\nline_star:353,line_end:353|char_star:11,char_end:20"[shape="box",fillcolor="white",style=filled];
"app.debug is False,type='comparison_operator'\nline_star:353,line_end:353|char_star:11,char_end:29"->"app.debug,type='attribute'\nline_star:353,line_end:353|char_star:11,char_end:20";
"app,type='identifier'\nline_star:353,line_end:353|char_star:11,char_end:14"[shape="point",fillcolor="#121013",style=filled];
"app.debug,type='attribute'\nline_star:353,line_end:353|char_star:11,char_end:20"->"app,type='identifier'\nline_star:353,line_end:353|char_star:11,char_end:14";
"debug,type='identifier'\nline_star:353,line_end:353|char_star:15,char_end:20"[shape="point",fillcolor="#121013",style=filled];
"app.debug,type='attribute'\nline_star:353,line_end:353|char_star:11,char_end:20"->"debug,type='identifier'\nline_star:353,line_end:353|char_star:15,char_end:20";
"assert app.config['TEMPLATES_AUTO_RELOAD'] is None,type='assert_statement'\nline_star:354,line_end:354|char_star:4,char_end:54"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:353,line_end:380|char_star:4,char_end:44"->"assert app.config['TEMPLATES_AUTO_RELOAD'] is None,type='assert_statement'\nline_star:354,line_end:354|char_star:4,char_end:54";
"app.config['TEMPLATES_AUTO_RELOAD'] is None,type='comparison_operator'\nline_star:354,line_end:354|char_star:11,char_end:54"[shape="box",fillcolor="white",style=filled];
"assert app.config['TEMPLATES_AUTO_RELOAD'] is None,type='assert_statement'\nline_star:354,line_end:354|char_star:4,char_end:54"->"app.config['TEMPLATES_AUTO_RELOAD'] is None,type='comparison_operator'\nline_star:354,line_end:354|char_star:11,char_end:54";
"app.config['TEMPLATES_AUTO_RELOAD'],type='subscript'\nline_star:354,line_end:354|char_star:11,char_end:46"[shape="box",fillcolor="white",style=filled];
"app.config['TEMPLATES_AUTO_RELOAD'] is None,type='comparison_operator'\nline_star:354,line_end:354|char_star:11,char_end:54"->"app.config['TEMPLATES_AUTO_RELOAD'],type='subscript'\nline_star:354,line_end:354|char_star:11,char_end:46";
"app.config,type='attribute'\nline_star:354,line_end:354|char_star:11,char_end:21"[shape="box",fillcolor="white",style=filled];
"app.config['TEMPLATES_AUTO_RELOAD'],type='subscript'\nline_star:354,line_end:354|char_star:11,char_end:46"->"app.config,type='attribute'\nline_star:354,line_end:354|char_star:11,char_end:21";
"app,type='identifier'\nline_star:354,line_end:354|char_star:11,char_end:14"[shape="point",fillcolor="#121013",style=filled];
"app.config,type='attribute'\nline_star:354,line_end:354|char_star:11,char_end:21"->"app,type='identifier'\nline_star:354,line_end:354|char_star:11,char_end:14";
"config,type='identifier'\nline_star:354,line_end:354|char_star:15,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"app.config,type='attribute'\nline_star:354,line_end:354|char_star:11,char_end:21"->"config,type='identifier'\nline_star:354,line_end:354|char_star:15,char_end:21";
"assert app.jinja_env.auto_reload is False,type='assert_statement'\nline_star:355,line_end:355|char_star:4,char_end:45"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:353,line_end:380|char_star:4,char_end:44"->"assert app.jinja_env.auto_reload is False,type='assert_statement'\nline_star:355,line_end:355|char_star:4,char_end:45";
"app.jinja_env.auto_reload is False,type='comparison_operator'\nline_star:355,line_end:355|char_star:11,char_end:45"[shape="box",fillcolor="white",style=filled];
"assert app.jinja_env.auto_reload is False,type='assert_statement'\nline_star:355,line_end:355|char_star:4,char_end:45"->"app.jinja_env.auto_reload is False,type='comparison_operator'\nline_star:355,line_end:355|char_star:11,char_end:45";
"app.jinja_env.auto_reload,type='attribute'\nline_star:355,line_end:355|char_star:11,char_end:36"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.auto_reload is False,type='comparison_operator'\nline_star:355,line_end:355|char_star:11,char_end:45"->"app.jinja_env.auto_reload,type='attribute'\nline_star:355,line_end:355|char_star:11,char_end:36";
"app.jinja_env,type='attribute'\nline_star:355,line_end:355|char_star:11,char_end:24"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.auto_reload,type='attribute'\nline_star:355,line_end:355|char_star:11,char_end:36"->"app.jinja_env,type='attribute'\nline_star:355,line_end:355|char_star:11,char_end:24";
"app,type='identifier'\nline_star:355,line_end:355|char_star:11,char_end:14"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env,type='attribute'\nline_star:355,line_end:355|char_star:11,char_end:24"->"app,type='identifier'\nline_star:355,line_end:355|char_star:11,char_end:14";
"jinja_env,type='identifier'\nline_star:355,line_end:355|char_star:15,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env,type='attribute'\nline_star:355,line_end:355|char_star:11,char_end:24"->"jinja_env,type='identifier'\nline_star:355,line_end:355|char_star:15,char_end:24";
"auto_reload,type='identifier'\nline_star:355,line_end:355|char_star:25,char_end:36"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env.auto_reload,type='attribute'\nline_star:355,line_end:355|char_star:11,char_end:36"->"auto_reload,type='identifier'\nline_star:355,line_end:355|char_star:25,char_end:36";
"# debug is False, config option is False,type='comment'\nline_star:356,line_end:356|char_star:4,char_end:44"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:353,line_end:380|char_star:4,char_end:44"->"# debug is False, config option is False,type='comment'\nline_star:356,line_end:356|char_star:4,char_end:44";
"assert app.debug is False,type='assert_statement'\nline_star:359,line_end:359|char_star:4,char_end:29"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:353,line_end:380|char_star:4,char_end:44"->"assert app.debug is False,type='assert_statement'\nline_star:359,line_end:359|char_star:4,char_end:29";
"app.debug is False,type='comparison_operator'\nline_star:359,line_end:359|char_star:11,char_end:29"[shape="box",fillcolor="white",style=filled];
"assert app.debug is False,type='assert_statement'\nline_star:359,line_end:359|char_star:4,char_end:29"->"app.debug is False,type='comparison_operator'\nline_star:359,line_end:359|char_star:11,char_end:29";
"app.debug,type='attribute'\nline_star:359,line_end:359|char_star:11,char_end:20"[shape="box",fillcolor="white",style=filled];
"app.debug is False,type='comparison_operator'\nline_star:359,line_end:359|char_star:11,char_end:29"->"app.debug,type='attribute'\nline_star:359,line_end:359|char_star:11,char_end:20";
"app,type='identifier'\nline_star:359,line_end:359|char_star:11,char_end:14"[shape="point",fillcolor="#121013",style=filled];
"app.debug,type='attribute'\nline_star:359,line_end:359|char_star:11,char_end:20"->"app,type='identifier'\nline_star:359,line_end:359|char_star:11,char_end:14";
"debug,type='identifier'\nline_star:359,line_end:359|char_star:15,char_end:20"[shape="point",fillcolor="#121013",style=filled];
"app.debug,type='attribute'\nline_star:359,line_end:359|char_star:11,char_end:20"->"debug,type='identifier'\nline_star:359,line_end:359|char_star:15,char_end:20";
"assert app.jinja_env.auto_reload is False,type='assert_statement'\nline_star:360,line_end:360|char_star:4,char_end:45"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:353,line_end:380|char_star:4,char_end:44"->"assert app.jinja_env.auto_reload is False,type='assert_statement'\nline_star:360,line_end:360|char_star:4,char_end:45";
"app.jinja_env.auto_reload is False,type='comparison_operator'\nline_star:360,line_end:360|char_star:11,char_end:45"[shape="box",fillcolor="white",style=filled];
"assert app.jinja_env.auto_reload is False,type='assert_statement'\nline_star:360,line_end:360|char_star:4,char_end:45"->"app.jinja_env.auto_reload is False,type='comparison_operator'\nline_star:360,line_end:360|char_star:11,char_end:45";
"app.jinja_env.auto_reload,type='attribute'\nline_star:360,line_end:360|char_star:11,char_end:36"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.auto_reload is False,type='comparison_operator'\nline_star:360,line_end:360|char_star:11,char_end:45"->"app.jinja_env.auto_reload,type='attribute'\nline_star:360,line_end:360|char_star:11,char_end:36";
"app.jinja_env,type='attribute'\nline_star:360,line_end:360|char_star:11,char_end:24"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.auto_reload,type='attribute'\nline_star:360,line_end:360|char_star:11,char_end:36"->"app.jinja_env,type='attribute'\nline_star:360,line_end:360|char_star:11,char_end:24";
"app,type='identifier'\nline_star:360,line_end:360|char_star:11,char_end:14"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env,type='attribute'\nline_star:360,line_end:360|char_star:11,char_end:24"->"app,type='identifier'\nline_star:360,line_end:360|char_star:11,char_end:14";
"jinja_env,type='identifier'\nline_star:360,line_end:360|char_star:15,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env,type='attribute'\nline_star:360,line_end:360|char_star:11,char_end:24"->"jinja_env,type='identifier'\nline_star:360,line_end:360|char_star:15,char_end:24";
"auto_reload,type='identifier'\nline_star:360,line_end:360|char_star:25,char_end:36"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env.auto_reload,type='attribute'\nline_star:360,line_end:360|char_star:11,char_end:36"->"auto_reload,type='identifier'\nline_star:360,line_end:360|char_star:25,char_end:36";
"# debug is False, config option is True,type='comment'\nline_star:361,line_end:361|char_star:4,char_end:43"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:353,line_end:380|char_star:4,char_end:44"->"# debug is False, config option is True,type='comment'\nline_star:361,line_end:361|char_star:4,char_end:43";
"assert app.debug is False,type='assert_statement'\nline_star:364,line_end:364|char_star:4,char_end:29"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:353,line_end:380|char_star:4,char_end:44"->"assert app.debug is False,type='assert_statement'\nline_star:364,line_end:364|char_star:4,char_end:29";
"app.debug is False,type='comparison_operator'\nline_star:364,line_end:364|char_star:11,char_end:29"[shape="box",fillcolor="white",style=filled];
"assert app.debug is False,type='assert_statement'\nline_star:364,line_end:364|char_star:4,char_end:29"->"app.debug is False,type='comparison_operator'\nline_star:364,line_end:364|char_star:11,char_end:29";
"app.debug,type='attribute'\nline_star:364,line_end:364|char_star:11,char_end:20"[shape="box",fillcolor="white",style=filled];
"app.debug is False,type='comparison_operator'\nline_star:364,line_end:364|char_star:11,char_end:29"->"app.debug,type='attribute'\nline_star:364,line_end:364|char_star:11,char_end:20";
"app,type='identifier'\nline_star:364,line_end:364|char_star:11,char_end:14"[shape="point",fillcolor="#121013",style=filled];
"app.debug,type='attribute'\nline_star:364,line_end:364|char_star:11,char_end:20"->"app,type='identifier'\nline_star:364,line_end:364|char_star:11,char_end:14";
"debug,type='identifier'\nline_star:364,line_end:364|char_star:15,char_end:20"[shape="point",fillcolor="#121013",style=filled];
"app.debug,type='attribute'\nline_star:364,line_end:364|char_star:11,char_end:20"->"debug,type='identifier'\nline_star:364,line_end:364|char_star:15,char_end:20";
"assert app.jinja_env.auto_reload is True,type='assert_statement'\nline_star:365,line_end:365|char_star:4,char_end:44"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:353,line_end:380|char_star:4,char_end:44"->"assert app.jinja_env.auto_reload is True,type='assert_statement'\nline_star:365,line_end:365|char_star:4,char_end:44";
"app.jinja_env.auto_reload is True,type='comparison_operator'\nline_star:365,line_end:365|char_star:11,char_end:44"[shape="box",fillcolor="white",style=filled];
"assert app.jinja_env.auto_reload is True,type='assert_statement'\nline_star:365,line_end:365|char_star:4,char_end:44"->"app.jinja_env.auto_reload is True,type='comparison_operator'\nline_star:365,line_end:365|char_star:11,char_end:44";
"app.jinja_env.auto_reload,type='attribute'\nline_star:365,line_end:365|char_star:11,char_end:36"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.auto_reload is True,type='comparison_operator'\nline_star:365,line_end:365|char_star:11,char_end:44"->"app.jinja_env.auto_reload,type='attribute'\nline_star:365,line_end:365|char_star:11,char_end:36";
"app.jinja_env,type='attribute'\nline_star:365,line_end:365|char_star:11,char_end:24"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.auto_reload,type='attribute'\nline_star:365,line_end:365|char_star:11,char_end:36"->"app.jinja_env,type='attribute'\nline_star:365,line_end:365|char_star:11,char_end:24";
"app,type='identifier'\nline_star:365,line_end:365|char_star:11,char_end:14"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env,type='attribute'\nline_star:365,line_end:365|char_star:11,char_end:24"->"app,type='identifier'\nline_star:365,line_end:365|char_star:11,char_end:14";
"jinja_env,type='identifier'\nline_star:365,line_end:365|char_star:15,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env,type='attribute'\nline_star:365,line_end:365|char_star:11,char_end:24"->"jinja_env,type='identifier'\nline_star:365,line_end:365|char_star:15,char_end:24";
"auto_reload,type='identifier'\nline_star:365,line_end:365|char_star:25,char_end:36"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env.auto_reload,type='attribute'\nline_star:365,line_end:365|char_star:11,char_end:36"->"auto_reload,type='identifier'\nline_star:365,line_end:365|char_star:25,char_end:36";
"# debug is True, config option is None,type='comment'\nline_star:366,line_end:366|char_star:4,char_end:42"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:353,line_end:380|char_star:4,char_end:44"->"# debug is True, config option is None,type='comment'\nline_star:366,line_end:366|char_star:4,char_end:42";
"assert app.config['TEMPLATES_AUTO_RELOAD'] is None,type='assert_statement'\nline_star:369,line_end:369|char_star:4,char_end:54"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:353,line_end:380|char_star:4,char_end:44"->"assert app.config['TEMPLATES_AUTO_RELOAD'] is None,type='assert_statement'\nline_star:369,line_end:369|char_star:4,char_end:54";
"app.config['TEMPLATES_AUTO_RELOAD'] is None,type='comparison_operator'\nline_star:369,line_end:369|char_star:11,char_end:54"[shape="box",fillcolor="white",style=filled];
"assert app.config['TEMPLATES_AUTO_RELOAD'] is None,type='assert_statement'\nline_star:369,line_end:369|char_star:4,char_end:54"->"app.config['TEMPLATES_AUTO_RELOAD'] is None,type='comparison_operator'\nline_star:369,line_end:369|char_star:11,char_end:54";
"app.config['TEMPLATES_AUTO_RELOAD'],type='subscript'\nline_star:369,line_end:369|char_star:11,char_end:46"[shape="box",fillcolor="white",style=filled];
"app.config['TEMPLATES_AUTO_RELOAD'] is None,type='comparison_operator'\nline_star:369,line_end:369|char_star:11,char_end:54"->"app.config['TEMPLATES_AUTO_RELOAD'],type='subscript'\nline_star:369,line_end:369|char_star:11,char_end:46";
"app.config,type='attribute'\nline_star:369,line_end:369|char_star:11,char_end:21"[shape="box",fillcolor="white",style=filled];
"app.config['TEMPLATES_AUTO_RELOAD'],type='subscript'\nline_star:369,line_end:369|char_star:11,char_end:46"->"app.config,type='attribute'\nline_star:369,line_end:369|char_star:11,char_end:21";
"app,type='identifier'\nline_star:369,line_end:369|char_star:11,char_end:14"[shape="point",fillcolor="#121013",style=filled];
"app.config,type='attribute'\nline_star:369,line_end:369|char_star:11,char_end:21"->"app,type='identifier'\nline_star:369,line_end:369|char_star:11,char_end:14";
"config,type='identifier'\nline_star:369,line_end:369|char_star:15,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"app.config,type='attribute'\nline_star:369,line_end:369|char_star:11,char_end:21"->"config,type='identifier'\nline_star:369,line_end:369|char_star:15,char_end:21";
"assert app.jinja_env.auto_reload is True,type='assert_statement'\nline_star:370,line_end:370|char_star:4,char_end:44"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:353,line_end:380|char_star:4,char_end:44"->"assert app.jinja_env.auto_reload is True,type='assert_statement'\nline_star:370,line_end:370|char_star:4,char_end:44";
"app.jinja_env.auto_reload is True,type='comparison_operator'\nline_star:370,line_end:370|char_star:11,char_end:44"[shape="box",fillcolor="white",style=filled];
"assert app.jinja_env.auto_reload is True,type='assert_statement'\nline_star:370,line_end:370|char_star:4,char_end:44"->"app.jinja_env.auto_reload is True,type='comparison_operator'\nline_star:370,line_end:370|char_star:11,char_end:44";
"app.jinja_env.auto_reload,type='attribute'\nline_star:370,line_end:370|char_star:11,char_end:36"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.auto_reload is True,type='comparison_operator'\nline_star:370,line_end:370|char_star:11,char_end:44"->"app.jinja_env.auto_reload,type='attribute'\nline_star:370,line_end:370|char_star:11,char_end:36";
"app.jinja_env,type='attribute'\nline_star:370,line_end:370|char_star:11,char_end:24"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.auto_reload,type='attribute'\nline_star:370,line_end:370|char_star:11,char_end:36"->"app.jinja_env,type='attribute'\nline_star:370,line_end:370|char_star:11,char_end:24";
"app,type='identifier'\nline_star:370,line_end:370|char_star:11,char_end:14"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env,type='attribute'\nline_star:370,line_end:370|char_star:11,char_end:24"->"app,type='identifier'\nline_star:370,line_end:370|char_star:11,char_end:14";
"jinja_env,type='identifier'\nline_star:370,line_end:370|char_star:15,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env,type='attribute'\nline_star:370,line_end:370|char_star:11,char_end:24"->"jinja_env,type='identifier'\nline_star:370,line_end:370|char_star:15,char_end:24";
"auto_reload,type='identifier'\nline_star:370,line_end:370|char_star:25,char_end:36"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env.auto_reload,type='attribute'\nline_star:370,line_end:370|char_star:11,char_end:36"->"auto_reload,type='identifier'\nline_star:370,line_end:370|char_star:25,char_end:36";
"# debug is True, config option is False,type='comment'\nline_star:371,line_end:371|char_star:4,char_end:43"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:353,line_end:380|char_star:4,char_end:44"->"# debug is True, config option is False,type='comment'\nline_star:371,line_end:371|char_star:4,char_end:43";
"assert app.jinja_env.auto_reload is False,type='assert_statement'\nline_star:375,line_end:375|char_star:4,char_end:45"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:353,line_end:380|char_star:4,char_end:44"->"assert app.jinja_env.auto_reload is False,type='assert_statement'\nline_star:375,line_end:375|char_star:4,char_end:45";
"app.jinja_env.auto_reload is False,type='comparison_operator'\nline_star:375,line_end:375|char_star:11,char_end:45"[shape="box",fillcolor="white",style=filled];
"assert app.jinja_env.auto_reload is False,type='assert_statement'\nline_star:375,line_end:375|char_star:4,char_end:45"->"app.jinja_env.auto_reload is False,type='comparison_operator'\nline_star:375,line_end:375|char_star:11,char_end:45";
"app.jinja_env.auto_reload,type='attribute'\nline_star:375,line_end:375|char_star:11,char_end:36"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.auto_reload is False,type='comparison_operator'\nline_star:375,line_end:375|char_star:11,char_end:45"->"app.jinja_env.auto_reload,type='attribute'\nline_star:375,line_end:375|char_star:11,char_end:36";
"app.jinja_env,type='attribute'\nline_star:375,line_end:375|char_star:11,char_end:24"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.auto_reload,type='attribute'\nline_star:375,line_end:375|char_star:11,char_end:36"->"app.jinja_env,type='attribute'\nline_star:375,line_end:375|char_star:11,char_end:24";
"app,type='identifier'\nline_star:375,line_end:375|char_star:11,char_end:14"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env,type='attribute'\nline_star:375,line_end:375|char_star:11,char_end:24"->"app,type='identifier'\nline_star:375,line_end:375|char_star:11,char_end:14";
"jinja_env,type='identifier'\nline_star:375,line_end:375|char_star:15,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env,type='attribute'\nline_star:375,line_end:375|char_star:11,char_end:24"->"jinja_env,type='identifier'\nline_star:375,line_end:375|char_star:15,char_end:24";
"auto_reload,type='identifier'\nline_star:375,line_end:375|char_star:25,char_end:36"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env.auto_reload,type='attribute'\nline_star:375,line_end:375|char_star:11,char_end:36"->"auto_reload,type='identifier'\nline_star:375,line_end:375|char_star:25,char_end:36";
"# debug is True, config option is True,type='comment'\nline_star:376,line_end:376|char_star:4,char_end:42"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:353,line_end:380|char_star:4,char_end:44"->"# debug is True, config option is True,type='comment'\nline_star:376,line_end:376|char_star:4,char_end:42";
"assert app.jinja_env.auto_reload is True,type='assert_statement'\nline_star:380,line_end:380|char_star:4,char_end:44"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:353,line_end:380|char_star:4,char_end:44"->"assert app.jinja_env.auto_reload is True,type='assert_statement'\nline_star:380,line_end:380|char_star:4,char_end:44";
"app.jinja_env.auto_reload is True,type='comparison_operator'\nline_star:380,line_end:380|char_star:11,char_end:44"[shape="box",fillcolor="white",style=filled];
"assert app.jinja_env.auto_reload is True,type='assert_statement'\nline_star:380,line_end:380|char_star:4,char_end:44"->"app.jinja_env.auto_reload is True,type='comparison_operator'\nline_star:380,line_end:380|char_star:11,char_end:44";
"app.jinja_env.auto_reload,type='attribute'\nline_star:380,line_end:380|char_star:11,char_end:36"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.auto_reload is True,type='comparison_operator'\nline_star:380,line_end:380|char_star:11,char_end:44"->"app.jinja_env.auto_reload,type='attribute'\nline_star:380,line_end:380|char_star:11,char_end:36";
"app.jinja_env,type='attribute'\nline_star:380,line_end:380|char_star:11,char_end:24"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.auto_reload,type='attribute'\nline_star:380,line_end:380|char_star:11,char_end:36"->"app.jinja_env,type='attribute'\nline_star:380,line_end:380|char_star:11,char_end:24";
"app,type='identifier'\nline_star:380,line_end:380|char_star:11,char_end:14"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env,type='attribute'\nline_star:380,line_end:380|char_star:11,char_end:24"->"app,type='identifier'\nline_star:380,line_end:380|char_star:11,char_end:14";
"jinja_env,type='identifier'\nline_star:380,line_end:380|char_star:15,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env,type='attribute'\nline_star:380,line_end:380|char_star:11,char_end:24"->"jinja_env,type='identifier'\nline_star:380,line_end:380|char_star:15,char_end:24";
"auto_reload,type='identifier'\nline_star:380,line_end:380|char_star:25,char_end:36"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env.auto_reload,type='attribute'\nline_star:380,line_end:380|char_star:11,char_end:36"->"auto_reload,type='identifier'\nline_star:380,line_end:380|char_star:25,char_end:36";
"def test_templates_auto_reload_debug_run(app, monkeypatch):\n    def run_simple_mock(*args, **kwargs):\n        pass\n\n    monkeypatch.setattr(werkzeug.serving, 'run_simple', run_simple_mock)\n\n    app.run()\n    assert not app.templates_auto_reload\n    assert not app.jinja_env.auto_reload\n\n    app.run(debug=True)\n    assert app.templates_auto_reload\n    assert app.jinja_env.auto_reload,type='function_definition'\nline_star:383,line_end:395|char_star:0,char_end:36"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_templates_auto_reload_debug_run(app, monkeypatch):\n    def run_simple_mock(*args, **kwargs):\n        pass\n\n    monkeypatch.setattr(werkzeug.serving, 'run_simple', run_simple_mock)\n\n    app.run()\n    assert not app.templates_auto_reload\n    assert not app.jinja_env.auto_reload\n\n    app.run(debug=True)\n    assert app.templates_auto_reload\n    assert app.jinja_env.auto_reload,type='function_definition'\nline_star:383,line_end:395|char_star:0,char_end:36";
"test_templates_auto_reload_debug_run,type='identifier'\nline_star:383,line_end:383|char_star:4,char_end:40"[shape="point",fillcolor="#121013",style=filled];
"def test_templates_auto_reload_debug_run(app, monkeypatch):\n    def run_simple_mock(*args, **kwargs):\n        pass\n\n    monkeypatch.setattr(werkzeug.serving, 'run_simple', run_simple_mock)\n\n    app.run()\n    assert not app.templates_auto_reload\n    assert not app.jinja_env.auto_reload\n\n    app.run(debug=True)\n    assert app.templates_auto_reload\n    assert app.jinja_env.auto_reload,type='function_definition'\nline_star:383,line_end:395|char_star:0,char_end:36"->"test_templates_auto_reload_debug_run,type='identifier'\nline_star:383,line_end:383|char_star:4,char_end:40";
"(app, monkeypatch),type='parameters'\nline_star:383,line_end:383|char_star:40,char_end:58"[shape="box",fillcolor="white",style=filled];
"def test_templates_auto_reload_debug_run(app, monkeypatch):\n    def run_simple_mock(*args, **kwargs):\n        pass\n\n    monkeypatch.setattr(werkzeug.serving, 'run_simple', run_simple_mock)\n\n    app.run()\n    assert not app.templates_auto_reload\n    assert not app.jinja_env.auto_reload\n\n    app.run(debug=True)\n    assert app.templates_auto_reload\n    assert app.jinja_env.auto_reload,type='function_definition'\nline_star:383,line_end:395|char_star:0,char_end:36"->"(app, monkeypatch),type='parameters'\nline_star:383,line_end:383|char_star:40,char_end:58";
"app,type='identifier'\nline_star:383,line_end:383|char_star:41,char_end:44"[shape="point",fillcolor="#121013",style=filled];
"(app, monkeypatch),type='parameters'\nline_star:383,line_end:383|char_star:40,char_end:58"->"app,type='identifier'\nline_star:383,line_end:383|char_star:41,char_end:44";
"monkeypatch,type='identifier'\nline_star:383,line_end:383|char_star:46,char_end:57"[shape="point",fillcolor="#121013",style=filled];
"(app, monkeypatch),type='parameters'\nline_star:383,line_end:383|char_star:40,char_end:58"->"monkeypatch,type='identifier'\nline_star:383,line_end:383|char_star:46,char_end:57";
"type='INFORMATION BLOCK'\nline_star:384,line_end:395|char_star:4,char_end:36"[shape="point",fillcolor="#121013",style=filled];
"def test_templates_auto_reload_debug_run(app, monkeypatch):\n    def run_simple_mock(*args, **kwargs):\n        pass\n\n    monkeypatch.setattr(werkzeug.serving, 'run_simple', run_simple_mock)\n\n    app.run()\n    assert not app.templates_auto_reload\n    assert not app.jinja_env.auto_reload\n\n    app.run(debug=True)\n    assert app.templates_auto_reload\n    assert app.jinja_env.auto_reload,type='function_definition'\nline_star:383,line_end:395|char_star:0,char_end:36"->"type='INFORMATION BLOCK'\nline_star:384,line_end:395|char_star:4,char_end:36";
"def run_simple_mock(*args, **kwargs):\n        pass,type='function_definition'\nline_star:384,line_end:385|char_star:4,char_end:12"[shape="box",fillcolor="#cee6b4",style=filled];
"type='INFORMATION BLOCK'\nline_star:384,line_end:395|char_star:4,char_end:36"->"def run_simple_mock(*args, **kwargs):\n        pass,type='function_definition'\nline_star:384,line_end:385|char_star:4,char_end:12";
"run_simple_mock,type='identifier'\nline_star:384,line_end:384|char_star:8,char_end:23"[shape="point",fillcolor="#121013",style=filled];
"def run_simple_mock(*args, **kwargs):\n        pass,type='function_definition'\nline_star:384,line_end:385|char_star:4,char_end:12"->"run_simple_mock,type='identifier'\nline_star:384,line_end:384|char_star:8,char_end:23";
"(*args, **kwargs),type='parameters'\nline_star:384,line_end:384|char_star:23,char_end:40"[shape="box",fillcolor="white",style=filled];
"def run_simple_mock(*args, **kwargs):\n        pass,type='function_definition'\nline_star:384,line_end:385|char_star:4,char_end:12"->"(*args, **kwargs),type='parameters'\nline_star:384,line_end:384|char_star:23,char_end:40";
"*args,type='list_splat_pattern'\nline_star:384,line_end:384|char_star:24,char_end:29"[shape="box",fillcolor="white",style=filled];
"(*args, **kwargs),type='parameters'\nline_star:384,line_end:384|char_star:23,char_end:40"->"*args,type='list_splat_pattern'\nline_star:384,line_end:384|char_star:24,char_end:29";
"*,type='*'\nline_star:384,line_end:384|char_star:24,char_end:25"[shape="box",fillcolor="white",style=filled];
"*args,type='list_splat_pattern'\nline_star:384,line_end:384|char_star:24,char_end:29"->"*,type='*'\nline_star:384,line_end:384|char_star:24,char_end:25";
"args,type='identifier'\nline_star:384,line_end:384|char_star:25,char_end:29"[shape="point",fillcolor="#121013",style=filled];
"*args,type='list_splat_pattern'\nline_star:384,line_end:384|char_star:24,char_end:29"->"args,type='identifier'\nline_star:384,line_end:384|char_star:25,char_end:29";
"**kwargs,type='dictionary_splat_pattern'\nline_star:384,line_end:384|char_star:31,char_end:39"[shape="box",fillcolor="white",style=filled];
"(*args, **kwargs),type='parameters'\nline_star:384,line_end:384|char_star:23,char_end:40"->"**kwargs,type='dictionary_splat_pattern'\nline_star:384,line_end:384|char_star:31,char_end:39";
"**,type='**'\nline_star:384,line_end:384|char_star:31,char_end:33"[shape="box",fillcolor="white",style=filled];
"**kwargs,type='dictionary_splat_pattern'\nline_star:384,line_end:384|char_star:31,char_end:39"->"**,type='**'\nline_star:384,line_end:384|char_star:31,char_end:33";
"kwargs,type='identifier'\nline_star:384,line_end:384|char_star:33,char_end:39"[shape="point",fillcolor="#121013",style=filled];
"**kwargs,type='dictionary_splat_pattern'\nline_star:384,line_end:384|char_star:31,char_end:39"->"kwargs,type='identifier'\nline_star:384,line_end:384|char_star:33,char_end:39";
"type='INFORMATION BLOCK'\nline_star:385,line_end:385|char_star:8,char_end:12"[shape="point",fillcolor="#121013",style=filled];
"def run_simple_mock(*args, **kwargs):\n        pass,type='function_definition'\nline_star:384,line_end:385|char_star:4,char_end:12"->"type='INFORMATION BLOCK'\nline_star:385,line_end:385|char_star:8,char_end:12";
"pass,type='pass_statement'\nline_star:385,line_end:385|char_star:8,char_end:12"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:385,line_end:385|char_star:8,char_end:12"->"pass,type='pass_statement'\nline_star:385,line_end:385|char_star:8,char_end:12";
"pass,type='pass'\nline_star:385,line_end:385|char_star:8,char_end:12"[shape="box",fillcolor="white",style=filled];
"pass,type='pass_statement'\nline_star:385,line_end:385|char_star:8,char_end:12"->"pass,type='pass'\nline_star:385,line_end:385|char_star:8,char_end:12";
"assert not app.templates_auto_reload,type='assert_statement'\nline_star:390,line_end:390|char_star:4,char_end:40"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:384,line_end:395|char_star:4,char_end:36"->"assert not app.templates_auto_reload,type='assert_statement'\nline_star:390,line_end:390|char_star:4,char_end:40";
"not app.templates_auto_reload,type='not_operator'\nline_star:390,line_end:390|char_star:11,char_end:40"[shape="box",fillcolor="white",style=filled];
"assert not app.templates_auto_reload,type='assert_statement'\nline_star:390,line_end:390|char_star:4,char_end:40"->"not app.templates_auto_reload,type='not_operator'\nline_star:390,line_end:390|char_star:11,char_end:40";
"app.templates_auto_reload,type='attribute'\nline_star:390,line_end:390|char_star:15,char_end:40"[shape="box",fillcolor="white",style=filled];
"not app.templates_auto_reload,type='not_operator'\nline_star:390,line_end:390|char_star:11,char_end:40"->"app.templates_auto_reload,type='attribute'\nline_star:390,line_end:390|char_star:15,char_end:40";
"app,type='identifier'\nline_star:390,line_end:390|char_star:15,char_end:18"[shape="point",fillcolor="#121013",style=filled];
"app.templates_auto_reload,type='attribute'\nline_star:390,line_end:390|char_star:15,char_end:40"->"app,type='identifier'\nline_star:390,line_end:390|char_star:15,char_end:18";
"templates_auto_reload,type='identifier'\nline_star:390,line_end:390|char_star:19,char_end:40"[shape="point",fillcolor="#121013",style=filled];
"app.templates_auto_reload,type='attribute'\nline_star:390,line_end:390|char_star:15,char_end:40"->"templates_auto_reload,type='identifier'\nline_star:390,line_end:390|char_star:19,char_end:40";
"assert not app.jinja_env.auto_reload,type='assert_statement'\nline_star:391,line_end:391|char_star:4,char_end:40"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:384,line_end:395|char_star:4,char_end:36"->"assert not app.jinja_env.auto_reload,type='assert_statement'\nline_star:391,line_end:391|char_star:4,char_end:40";
"not app.jinja_env.auto_reload,type='not_operator'\nline_star:391,line_end:391|char_star:11,char_end:40"[shape="box",fillcolor="white",style=filled];
"assert not app.jinja_env.auto_reload,type='assert_statement'\nline_star:391,line_end:391|char_star:4,char_end:40"->"not app.jinja_env.auto_reload,type='not_operator'\nline_star:391,line_end:391|char_star:11,char_end:40";
"app.jinja_env.auto_reload,type='attribute'\nline_star:391,line_end:391|char_star:15,char_end:40"[shape="box",fillcolor="white",style=filled];
"not app.jinja_env.auto_reload,type='not_operator'\nline_star:391,line_end:391|char_star:11,char_end:40"->"app.jinja_env.auto_reload,type='attribute'\nline_star:391,line_end:391|char_star:15,char_end:40";
"app.jinja_env,type='attribute'\nline_star:391,line_end:391|char_star:15,char_end:28"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.auto_reload,type='attribute'\nline_star:391,line_end:391|char_star:15,char_end:40"->"app.jinja_env,type='attribute'\nline_star:391,line_end:391|char_star:15,char_end:28";
"app,type='identifier'\nline_star:391,line_end:391|char_star:15,char_end:18"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env,type='attribute'\nline_star:391,line_end:391|char_star:15,char_end:28"->"app,type='identifier'\nline_star:391,line_end:391|char_star:15,char_end:18";
"jinja_env,type='identifier'\nline_star:391,line_end:391|char_star:19,char_end:28"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env,type='attribute'\nline_star:391,line_end:391|char_star:15,char_end:28"->"jinja_env,type='identifier'\nline_star:391,line_end:391|char_star:19,char_end:28";
"auto_reload,type='identifier'\nline_star:391,line_end:391|char_star:29,char_end:40"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env.auto_reload,type='attribute'\nline_star:391,line_end:391|char_star:15,char_end:40"->"auto_reload,type='identifier'\nline_star:391,line_end:391|char_star:29,char_end:40";
"assert app.templates_auto_reload,type='assert_statement'\nline_star:394,line_end:394|char_star:4,char_end:36"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:384,line_end:395|char_star:4,char_end:36"->"assert app.templates_auto_reload,type='assert_statement'\nline_star:394,line_end:394|char_star:4,char_end:36";
"app.templates_auto_reload,type='attribute'\nline_star:394,line_end:394|char_star:11,char_end:36"[shape="box",fillcolor="white",style=filled];
"assert app.templates_auto_reload,type='assert_statement'\nline_star:394,line_end:394|char_star:4,char_end:36"->"app.templates_auto_reload,type='attribute'\nline_star:394,line_end:394|char_star:11,char_end:36";
"app,type='identifier'\nline_star:394,line_end:394|char_star:11,char_end:14"[shape="point",fillcolor="#121013",style=filled];
"app.templates_auto_reload,type='attribute'\nline_star:394,line_end:394|char_star:11,char_end:36"->"app,type='identifier'\nline_star:394,line_end:394|char_star:11,char_end:14";
"templates_auto_reload,type='identifier'\nline_star:394,line_end:394|char_star:15,char_end:36"[shape="point",fillcolor="#121013",style=filled];
"app.templates_auto_reload,type='attribute'\nline_star:394,line_end:394|char_star:11,char_end:36"->"templates_auto_reload,type='identifier'\nline_star:394,line_end:394|char_star:15,char_end:36";
"assert app.jinja_env.auto_reload,type='assert_statement'\nline_star:395,line_end:395|char_star:4,char_end:36"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:384,line_end:395|char_star:4,char_end:36"->"assert app.jinja_env.auto_reload,type='assert_statement'\nline_star:395,line_end:395|char_star:4,char_end:36";
"app.jinja_env.auto_reload,type='attribute'\nline_star:395,line_end:395|char_star:11,char_end:36"[shape="box",fillcolor="white",style=filled];
"assert app.jinja_env.auto_reload,type='assert_statement'\nline_star:395,line_end:395|char_star:4,char_end:36"->"app.jinja_env.auto_reload,type='attribute'\nline_star:395,line_end:395|char_star:11,char_end:36";
"app.jinja_env,type='attribute'\nline_star:395,line_end:395|char_star:11,char_end:24"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.auto_reload,type='attribute'\nline_star:395,line_end:395|char_star:11,char_end:36"->"app.jinja_env,type='attribute'\nline_star:395,line_end:395|char_star:11,char_end:24";
"app,type='identifier'\nline_star:395,line_end:395|char_star:11,char_end:14"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env,type='attribute'\nline_star:395,line_end:395|char_star:11,char_end:24"->"app,type='identifier'\nline_star:395,line_end:395|char_star:11,char_end:14";
"jinja_env,type='identifier'\nline_star:395,line_end:395|char_star:15,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env,type='attribute'\nline_star:395,line_end:395|char_star:11,char_end:24"->"jinja_env,type='identifier'\nline_star:395,line_end:395|char_star:15,char_end:24";
"auto_reload,type='identifier'\nline_star:395,line_end:395|char_star:25,char_end:36"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env.auto_reload,type='attribute'\nline_star:395,line_end:395|char_star:11,char_end:36"->"auto_reload,type='identifier'\nline_star:395,line_end:395|char_star:25,char_end:36";
"def test_template_loader_debugging(test_apps, monkeypatch):\n    from blueprintapp import app\n\n    called = []\n\n    class _TestHandler(logging.Handler):\n        def handle(self, record):\n            called.append(True)\n            text = str(record.msg)\n            assert '1: trying loader of application 'blueprintapp'' in text\n            assert (\n                '2: trying loader of blueprint 'admin' (blueprintapp.apps.admin)'\n            ) in text\n            assert (\n                'trying loader of blueprint 'frontend' (blueprintapp.apps.frontend)'\n            ) in text\n            assert 'Error: the template could not be found' in text\n            assert (\n                'looked up from an endpoint that belongs to the blueprint 'frontend''\n            ) in text\n            assert 'See https://flask.palletsprojects.com/blueprints/#templates' in text\n\n    with app.test_client() as c:\n        monkeypatch.setitem(app.config, 'EXPLAIN_TEMPLATE_LOADING', True)\n        monkeypatch.setattr(\n            logging.getLogger('blueprintapp'), 'handlers', [_TestHandler()]\n        )\n\n        with pytest.raises(TemplateNotFound) as excinfo:\n            c.get('/missing')\n\n        assert 'missing_template.html' in str(excinfo.value)\n\n    assert len(called) == 1,type='function_definition'\nline_star:398,line_end:431|char_star:0,char_end:27"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_template_loader_debugging(test_apps, monkeypatch):\n    from blueprintapp import app\n\n    called = []\n\n    class _TestHandler(logging.Handler):\n        def handle(self, record):\n            called.append(True)\n            text = str(record.msg)\n            assert '1: trying loader of application 'blueprintapp'' in text\n            assert (\n                '2: trying loader of blueprint 'admin' (blueprintapp.apps.admin)'\n            ) in text\n            assert (\n                'trying loader of blueprint 'frontend' (blueprintapp.apps.frontend)'\n            ) in text\n            assert 'Error: the template could not be found' in text\n            assert (\n                'looked up from an endpoint that belongs to the blueprint 'frontend''\n            ) in text\n            assert 'See https://flask.palletsprojects.com/blueprints/#templates' in text\n\n    with app.test_client() as c:\n        monkeypatch.setitem(app.config, 'EXPLAIN_TEMPLATE_LOADING', True)\n        monkeypatch.setattr(\n            logging.getLogger('blueprintapp'), 'handlers', [_TestHandler()]\n        )\n\n        with pytest.raises(TemplateNotFound) as excinfo:\n            c.get('/missing')\n\n        assert 'missing_template.html' in str(excinfo.value)\n\n    assert len(called) == 1,type='function_definition'\nline_star:398,line_end:431|char_star:0,char_end:27";
"test_template_loader_debugging,type='identifier'\nline_star:398,line_end:398|char_star:4,char_end:34"[shape="point",fillcolor="#121013",style=filled];
"def test_template_loader_debugging(test_apps, monkeypatch):\n    from blueprintapp import app\n\n    called = []\n\n    class _TestHandler(logging.Handler):\n        def handle(self, record):\n            called.append(True)\n            text = str(record.msg)\n            assert '1: trying loader of application 'blueprintapp'' in text\n            assert (\n                '2: trying loader of blueprint 'admin' (blueprintapp.apps.admin)'\n            ) in text\n            assert (\n                'trying loader of blueprint 'frontend' (blueprintapp.apps.frontend)'\n            ) in text\n            assert 'Error: the template could not be found' in text\n            assert (\n                'looked up from an endpoint that belongs to the blueprint 'frontend''\n            ) in text\n            assert 'See https://flask.palletsprojects.com/blueprints/#templates' in text\n\n    with app.test_client() as c:\n        monkeypatch.setitem(app.config, 'EXPLAIN_TEMPLATE_LOADING', True)\n        monkeypatch.setattr(\n            logging.getLogger('blueprintapp'), 'handlers', [_TestHandler()]\n        )\n\n        with pytest.raises(TemplateNotFound) as excinfo:\n            c.get('/missing')\n\n        assert 'missing_template.html' in str(excinfo.value)\n\n    assert len(called) == 1,type='function_definition'\nline_star:398,line_end:431|char_star:0,char_end:27"->"test_template_loader_debugging,type='identifier'\nline_star:398,line_end:398|char_star:4,char_end:34";
"(test_apps, monkeypatch),type='parameters'\nline_star:398,line_end:398|char_star:34,char_end:58"[shape="box",fillcolor="white",style=filled];
"def test_template_loader_debugging(test_apps, monkeypatch):\n    from blueprintapp import app\n\n    called = []\n\n    class _TestHandler(logging.Handler):\n        def handle(self, record):\n            called.append(True)\n            text = str(record.msg)\n            assert '1: trying loader of application 'blueprintapp'' in text\n            assert (\n                '2: trying loader of blueprint 'admin' (blueprintapp.apps.admin)'\n            ) in text\n            assert (\n                'trying loader of blueprint 'frontend' (blueprintapp.apps.frontend)'\n            ) in text\n            assert 'Error: the template could not be found' in text\n            assert (\n                'looked up from an endpoint that belongs to the blueprint 'frontend''\n            ) in text\n            assert 'See https://flask.palletsprojects.com/blueprints/#templates' in text\n\n    with app.test_client() as c:\n        monkeypatch.setitem(app.config, 'EXPLAIN_TEMPLATE_LOADING', True)\n        monkeypatch.setattr(\n            logging.getLogger('blueprintapp'), 'handlers', [_TestHandler()]\n        )\n\n        with pytest.raises(TemplateNotFound) as excinfo:\n            c.get('/missing')\n\n        assert 'missing_template.html' in str(excinfo.value)\n\n    assert len(called) == 1,type='function_definition'\nline_star:398,line_end:431|char_star:0,char_end:27"->"(test_apps, monkeypatch),type='parameters'\nline_star:398,line_end:398|char_star:34,char_end:58";
"test_apps,type='identifier'\nline_star:398,line_end:398|char_star:35,char_end:44"[shape="point",fillcolor="#121013",style=filled];
"(test_apps, monkeypatch),type='parameters'\nline_star:398,line_end:398|char_star:34,char_end:58"->"test_apps,type='identifier'\nline_star:398,line_end:398|char_star:35,char_end:44";
"monkeypatch,type='identifier'\nline_star:398,line_end:398|char_star:46,char_end:57"[shape="point",fillcolor="#121013",style=filled];
"(test_apps, monkeypatch),type='parameters'\nline_star:398,line_end:398|char_star:34,char_end:58"->"monkeypatch,type='identifier'\nline_star:398,line_end:398|char_star:46,char_end:57";
"type='INFORMATION BLOCK'\nline_star:399,line_end:431|char_star:4,char_end:27"[shape="point",fillcolor="#121013",style=filled];
"def test_template_loader_debugging(test_apps, monkeypatch):\n    from blueprintapp import app\n\n    called = []\n\n    class _TestHandler(logging.Handler):\n        def handle(self, record):\n            called.append(True)\n            text = str(record.msg)\n            assert '1: trying loader of application 'blueprintapp'' in text\n            assert (\n                '2: trying loader of blueprint 'admin' (blueprintapp.apps.admin)'\n            ) in text\n            assert (\n                'trying loader of blueprint 'frontend' (blueprintapp.apps.frontend)'\n            ) in text\n            assert 'Error: the template could not be found' in text\n            assert (\n                'looked up from an endpoint that belongs to the blueprint 'frontend''\n            ) in text\n            assert 'See https://flask.palletsprojects.com/blueprints/#templates' in text\n\n    with app.test_client() as c:\n        monkeypatch.setitem(app.config, 'EXPLAIN_TEMPLATE_LOADING', True)\n        monkeypatch.setattr(\n            logging.getLogger('blueprintapp'), 'handlers', [_TestHandler()]\n        )\n\n        with pytest.raises(TemplateNotFound) as excinfo:\n            c.get('/missing')\n\n        assert 'missing_template.html' in str(excinfo.value)\n\n    assert len(called) == 1,type='function_definition'\nline_star:398,line_end:431|char_star:0,char_end:27"->"type='INFORMATION BLOCK'\nline_star:399,line_end:431|char_star:4,char_end:27";
"from blueprintapp import app,type='import_from_statement'\nline_star:399,line_end:399|char_star:4,char_end:32"[shape="box",fillcolor="#f48b29",style=filled];
"type='INFORMATION BLOCK'\nline_star:399,line_end:431|char_star:4,char_end:27"->"from blueprintapp import app,type='import_from_statement'\nline_star:399,line_end:399|char_star:4,char_end:32";
"class _TestHandler(logging.Handler):\n        def handle(self, record):\n            called.append(True)\n            text = str(record.msg)\n            assert '1: trying loader of application 'blueprintapp'' in text\n            assert (\n                '2: trying loader of blueprint 'admin' (blueprintapp.apps.admin)'\n            ) in text\n            assert (\n                'trying loader of blueprint 'frontend' (blueprintapp.apps.frontend)'\n            ) in text\n            assert 'Error: the template could not be found' in text\n            assert (\n                'looked up from an endpoint that belongs to the blueprint 'frontend''\n            ) in text\n            assert 'See https://flask.palletsprojects.com/blueprints/#templates' in text,type='class_definition'\nline_star:403,line_end:418|char_star:4,char_end:88"[shape="box",fillcolor="#ffdf91",style=filled];
"type='INFORMATION BLOCK'\nline_star:399,line_end:431|char_star:4,char_end:27"->"class _TestHandler(logging.Handler):\n        def handle(self, record):\n            called.append(True)\n            text = str(record.msg)\n            assert '1: trying loader of application 'blueprintapp'' in text\n            assert (\n                '2: trying loader of blueprint 'admin' (blueprintapp.apps.admin)'\n            ) in text\n            assert (\n                'trying loader of blueprint 'frontend' (blueprintapp.apps.frontend)'\n            ) in text\n            assert 'Error: the template could not be found' in text\n            assert (\n                'looked up from an endpoint that belongs to the blueprint 'frontend''\n            ) in text\n            assert 'See https://flask.palletsprojects.com/blueprints/#templates' in text,type='class_definition'\nline_star:403,line_end:418|char_star:4,char_end:88";
"_TestHandler,type='identifier'\nline_star:403,line_end:403|char_star:10,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"class _TestHandler(logging.Handler):\n        def handle(self, record):\n            called.append(True)\n            text = str(record.msg)\n            assert '1: trying loader of application 'blueprintapp'' in text\n            assert (\n                '2: trying loader of blueprint 'admin' (blueprintapp.apps.admin)'\n            ) in text\n            assert (\n                'trying loader of blueprint 'frontend' (blueprintapp.apps.frontend)'\n            ) in text\n            assert 'Error: the template could not be found' in text\n            assert (\n                'looked up from an endpoint that belongs to the blueprint 'frontend''\n            ) in text\n            assert 'See https://flask.palletsprojects.com/blueprints/#templates' in text,type='class_definition'\nline_star:403,line_end:418|char_star:4,char_end:88"->"_TestHandler,type='identifier'\nline_star:403,line_end:403|char_star:10,char_end:22";
"(logging.Handler),type='argument_list'\nline_star:403,line_end:403|char_star:22,char_end:39"[shape="box",fillcolor="white",style=filled];
"class _TestHandler(logging.Handler):\n        def handle(self, record):\n            called.append(True)\n            text = str(record.msg)\n            assert '1: trying loader of application 'blueprintapp'' in text\n            assert (\n                '2: trying loader of blueprint 'admin' (blueprintapp.apps.admin)'\n            ) in text\n            assert (\n                'trying loader of blueprint 'frontend' (blueprintapp.apps.frontend)'\n            ) in text\n            assert 'Error: the template could not be found' in text\n            assert (\n                'looked up from an endpoint that belongs to the blueprint 'frontend''\n            ) in text\n            assert 'See https://flask.palletsprojects.com/blueprints/#templates' in text,type='class_definition'\nline_star:403,line_end:418|char_star:4,char_end:88"->"(logging.Handler),type='argument_list'\nline_star:403,line_end:403|char_star:22,char_end:39";
"logging.Handler,type='attribute'\nline_star:403,line_end:403|char_star:23,char_end:38"[shape="box",fillcolor="white",style=filled];
"(logging.Handler),type='argument_list'\nline_star:403,line_end:403|char_star:22,char_end:39"->"logging.Handler,type='attribute'\nline_star:403,line_end:403|char_star:23,char_end:38";
"logging,type='identifier'\nline_star:403,line_end:403|char_star:23,char_end:30"[shape="point",fillcolor="#121013",style=filled];
"logging.Handler,type='attribute'\nline_star:403,line_end:403|char_star:23,char_end:38"->"logging,type='identifier'\nline_star:403,line_end:403|char_star:23,char_end:30";
"Handler,type='identifier'\nline_star:403,line_end:403|char_star:31,char_end:38"[shape="point",fillcolor="#121013",style=filled];
"logging.Handler,type='attribute'\nline_star:403,line_end:403|char_star:23,char_end:38"->"Handler,type='identifier'\nline_star:403,line_end:403|char_star:31,char_end:38";
"type='INFORMATION BLOCK'\nline_star:404,line_end:418|char_star:8,char_end:88"[shape="point",fillcolor="#121013",style=filled];
"class _TestHandler(logging.Handler):\n        def handle(self, record):\n            called.append(True)\n            text = str(record.msg)\n            assert '1: trying loader of application 'blueprintapp'' in text\n            assert (\n                '2: trying loader of blueprint 'admin' (blueprintapp.apps.admin)'\n            ) in text\n            assert (\n                'trying loader of blueprint 'frontend' (blueprintapp.apps.frontend)'\n            ) in text\n            assert 'Error: the template could not be found' in text\n            assert (\n                'looked up from an endpoint that belongs to the blueprint 'frontend''\n            ) in text\n            assert 'See https://flask.palletsprojects.com/blueprints/#templates' in text,type='class_definition'\nline_star:403,line_end:418|char_star:4,char_end:88"->"type='INFORMATION BLOCK'\nline_star:404,line_end:418|char_star:8,char_end:88";
"def handle(self, record):\n            called.append(True)\n            text = str(record.msg)\n            assert '1: trying loader of application 'blueprintapp'' in text\n            assert (\n                '2: trying loader of blueprint 'admin' (blueprintapp.apps.admin)'\n            ) in text\n            assert (\n                'trying loader of blueprint 'frontend' (blueprintapp.apps.frontend)'\n            ) in text\n            assert 'Error: the template could not be found' in text\n            assert (\n                'looked up from an endpoint that belongs to the blueprint 'frontend''\n            ) in text\n            assert 'See https://flask.palletsprojects.com/blueprints/#templates' in text,type='function_definition'\nline_star:404,line_end:418|char_star:8,char_end:88"[shape="box",fillcolor="#cee6b4",style=filled];
"type='INFORMATION BLOCK'\nline_star:404,line_end:418|char_star:8,char_end:88"->"def handle(self, record):\n            called.append(True)\n            text = str(record.msg)\n            assert '1: trying loader of application 'blueprintapp'' in text\n            assert (\n                '2: trying loader of blueprint 'admin' (blueprintapp.apps.admin)'\n            ) in text\n            assert (\n                'trying loader of blueprint 'frontend' (blueprintapp.apps.frontend)'\n            ) in text\n            assert 'Error: the template could not be found' in text\n            assert (\n                'looked up from an endpoint that belongs to the blueprint 'frontend''\n            ) in text\n            assert 'See https://flask.palletsprojects.com/blueprints/#templates' in text,type='function_definition'\nline_star:404,line_end:418|char_star:8,char_end:88";
"handle,type='identifier'\nline_star:404,line_end:404|char_star:12,char_end:18"[shape="point",fillcolor="#121013",style=filled];
"def handle(self, record):\n            called.append(True)\n            text = str(record.msg)\n            assert '1: trying loader of application 'blueprintapp'' in text\n            assert (\n                '2: trying loader of blueprint 'admin' (blueprintapp.apps.admin)'\n            ) in text\n            assert (\n                'trying loader of blueprint 'frontend' (blueprintapp.apps.frontend)'\n            ) in text\n            assert 'Error: the template could not be found' in text\n            assert (\n                'looked up from an endpoint that belongs to the blueprint 'frontend''\n            ) in text\n            assert 'See https://flask.palletsprojects.com/blueprints/#templates' in text,type='function_definition'\nline_star:404,line_end:418|char_star:8,char_end:88"->"handle,type='identifier'\nline_star:404,line_end:404|char_star:12,char_end:18";
"(self, record),type='parameters'\nline_star:404,line_end:404|char_star:18,char_end:32"[shape="box",fillcolor="white",style=filled];
"def handle(self, record):\n            called.append(True)\n            text = str(record.msg)\n            assert '1: trying loader of application 'blueprintapp'' in text\n            assert (\n                '2: trying loader of blueprint 'admin' (blueprintapp.apps.admin)'\n            ) in text\n            assert (\n                'trying loader of blueprint 'frontend' (blueprintapp.apps.frontend)'\n            ) in text\n            assert 'Error: the template could not be found' in text\n            assert (\n                'looked up from an endpoint that belongs to the blueprint 'frontend''\n            ) in text\n            assert 'See https://flask.palletsprojects.com/blueprints/#templates' in text,type='function_definition'\nline_star:404,line_end:418|char_star:8,char_end:88"->"(self, record),type='parameters'\nline_star:404,line_end:404|char_star:18,char_end:32";
"self,type='identifier'\nline_star:404,line_end:404|char_star:19,char_end:23"[shape="point",fillcolor="#121013",style=filled];
"(self, record),type='parameters'\nline_star:404,line_end:404|char_star:18,char_end:32"->"self,type='identifier'\nline_star:404,line_end:404|char_star:19,char_end:23";
"record,type='identifier'\nline_star:404,line_end:404|char_star:25,char_end:31"[shape="point",fillcolor="#121013",style=filled];
"(self, record),type='parameters'\nline_star:404,line_end:404|char_star:18,char_end:32"->"record,type='identifier'\nline_star:404,line_end:404|char_star:25,char_end:31";
"type='INFORMATION BLOCK'\nline_star:405,line_end:418|char_star:12,char_end:88"[shape="point",fillcolor="#121013",style=filled];
"def handle(self, record):\n            called.append(True)\n            text = str(record.msg)\n            assert '1: trying loader of application 'blueprintapp'' in text\n            assert (\n                '2: trying loader of blueprint 'admin' (blueprintapp.apps.admin)'\n            ) in text\n            assert (\n                'trying loader of blueprint 'frontend' (blueprintapp.apps.frontend)'\n            ) in text\n            assert 'Error: the template could not be found' in text\n            assert (\n                'looked up from an endpoint that belongs to the blueprint 'frontend''\n            ) in text\n            assert 'See https://flask.palletsprojects.com/blueprints/#templates' in text,type='function_definition'\nline_star:404,line_end:418|char_star:8,char_end:88"->"type='INFORMATION BLOCK'\nline_star:405,line_end:418|char_star:12,char_end:88";
"assert '1: trying loader of application 'blueprintapp'' in text,type='assert_statement'\nline_star:407,line_end:407|char_star:12,char_end:75"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:405,line_end:418|char_star:12,char_end:88"->"assert '1: trying loader of application 'blueprintapp'' in text,type='assert_statement'\nline_star:407,line_end:407|char_star:12,char_end:75";
"'1: trying loader of application 'blueprintapp'' in text,type='comparison_operator'\nline_star:407,line_end:407|char_star:19,char_end:75"[shape="box",fillcolor="white",style=filled];
"assert '1: trying loader of application 'blueprintapp'' in text,type='assert_statement'\nline_star:407,line_end:407|char_star:12,char_end:75"->"'1: trying loader of application 'blueprintapp'' in text,type='comparison_operator'\nline_star:407,line_end:407|char_star:19,char_end:75";
"text,type='identifier'\nline_star:407,line_end:407|char_star:71,char_end:75"[shape="point",fillcolor="#121013",style=filled];
"'1: trying loader of application 'blueprintapp'' in text,type='comparison_operator'\nline_star:407,line_end:407|char_star:19,char_end:75"->"text,type='identifier'\nline_star:407,line_end:407|char_star:71,char_end:75";
"assert (\n                '2: trying loader of blueprint 'admin' (blueprintapp.apps.admin)'\n            ) in text,type='assert_statement'\nline_star:408,line_end:410|char_star:12,char_end:21"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:405,line_end:418|char_star:12,char_end:88"->"assert (\n                '2: trying loader of blueprint 'admin' (blueprintapp.apps.admin)'\n            ) in text,type='assert_statement'\nline_star:408,line_end:410|char_star:12,char_end:21";
"(\n                '2: trying loader of blueprint 'admin' (blueprintapp.apps.admin)'\n            ) in text,type='comparison_operator'\nline_star:408,line_end:410|char_star:19,char_end:21"[shape="box",fillcolor="white",style=filled];
"assert (\n                '2: trying loader of blueprint 'admin' (blueprintapp.apps.admin)'\n            ) in text,type='assert_statement'\nline_star:408,line_end:410|char_star:12,char_end:21"->"(\n                '2: trying loader of blueprint 'admin' (blueprintapp.apps.admin)'\n            ) in text,type='comparison_operator'\nline_star:408,line_end:410|char_star:19,char_end:21";
"(\n                '2: trying loader of blueprint 'admin' (blueprintapp.apps.admin)'\n            ),type='parenthesized_expression'\nline_star:408,line_end:410|char_star:19,char_end:13"[shape="box",fillcolor="white",style=filled];
"(\n                '2: trying loader of blueprint 'admin' (blueprintapp.apps.admin)'\n            ) in text,type='comparison_operator'\nline_star:408,line_end:410|char_star:19,char_end:21"->"(\n                '2: trying loader of blueprint 'admin' (blueprintapp.apps.admin)'\n            ),type='parenthesized_expression'\nline_star:408,line_end:410|char_star:19,char_end:13";
"text,type='identifier'\nline_star:410,line_end:410|char_star:17,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"(\n                '2: trying loader of blueprint 'admin' (blueprintapp.apps.admin)'\n            ) in text,type='comparison_operator'\nline_star:408,line_end:410|char_star:19,char_end:21"->"text,type='identifier'\nline_star:410,line_end:410|char_star:17,char_end:21";
"assert (\n                'trying loader of blueprint 'frontend' (blueprintapp.apps.frontend)'\n            ) in text,type='assert_statement'\nline_star:411,line_end:413|char_star:12,char_end:21"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:405,line_end:418|char_star:12,char_end:88"->"assert (\n                'trying loader of blueprint 'frontend' (blueprintapp.apps.frontend)'\n            ) in text,type='assert_statement'\nline_star:411,line_end:413|char_star:12,char_end:21";
"(\n                'trying loader of blueprint 'frontend' (blueprintapp.apps.frontend)'\n            ) in text,type='comparison_operator'\nline_star:411,line_end:413|char_star:19,char_end:21"[shape="box",fillcolor="white",style=filled];
"assert (\n                'trying loader of blueprint 'frontend' (blueprintapp.apps.frontend)'\n            ) in text,type='assert_statement'\nline_star:411,line_end:413|char_star:12,char_end:21"->"(\n                'trying loader of blueprint 'frontend' (blueprintapp.apps.frontend)'\n            ) in text,type='comparison_operator'\nline_star:411,line_end:413|char_star:19,char_end:21";
"(\n                'trying loader of blueprint 'frontend' (blueprintapp.apps.frontend)'\n            ),type='parenthesized_expression'\nline_star:411,line_end:413|char_star:19,char_end:13"[shape="box",fillcolor="white",style=filled];
"(\n                'trying loader of blueprint 'frontend' (blueprintapp.apps.frontend)'\n            ) in text,type='comparison_operator'\nline_star:411,line_end:413|char_star:19,char_end:21"->"(\n                'trying loader of blueprint 'frontend' (blueprintapp.apps.frontend)'\n            ),type='parenthesized_expression'\nline_star:411,line_end:413|char_star:19,char_end:13";
"text,type='identifier'\nline_star:413,line_end:413|char_star:17,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"(\n                'trying loader of blueprint 'frontend' (blueprintapp.apps.frontend)'\n            ) in text,type='comparison_operator'\nline_star:411,line_end:413|char_star:19,char_end:21"->"text,type='identifier'\nline_star:413,line_end:413|char_star:17,char_end:21";
"assert 'Error: the template could not be found' in text,type='assert_statement'\nline_star:414,line_end:414|char_star:12,char_end:67"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:405,line_end:418|char_star:12,char_end:88"->"assert 'Error: the template could not be found' in text,type='assert_statement'\nline_star:414,line_end:414|char_star:12,char_end:67";
"'Error: the template could not be found' in text,type='comparison_operator'\nline_star:414,line_end:414|char_star:19,char_end:67"[shape="box",fillcolor="white",style=filled];
"assert 'Error: the template could not be found' in text,type='assert_statement'\nline_star:414,line_end:414|char_star:12,char_end:67"->"'Error: the template could not be found' in text,type='comparison_operator'\nline_star:414,line_end:414|char_star:19,char_end:67";
"text,type='identifier'\nline_star:414,line_end:414|char_star:63,char_end:67"[shape="point",fillcolor="#121013",style=filled];
"'Error: the template could not be found' in text,type='comparison_operator'\nline_star:414,line_end:414|char_star:19,char_end:67"->"text,type='identifier'\nline_star:414,line_end:414|char_star:63,char_end:67";
"assert (\n                'looked up from an endpoint that belongs to the blueprint 'frontend''\n            ) in text,type='assert_statement'\nline_star:415,line_end:417|char_star:12,char_end:21"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:405,line_end:418|char_star:12,char_end:88"->"assert (\n                'looked up from an endpoint that belongs to the blueprint 'frontend''\n            ) in text,type='assert_statement'\nline_star:415,line_end:417|char_star:12,char_end:21";
"(\n                'looked up from an endpoint that belongs to the blueprint 'frontend''\n            ) in text,type='comparison_operator'\nline_star:415,line_end:417|char_star:19,char_end:21"[shape="box",fillcolor="white",style=filled];
"assert (\n                'looked up from an endpoint that belongs to the blueprint 'frontend''\n            ) in text,type='assert_statement'\nline_star:415,line_end:417|char_star:12,char_end:21"->"(\n                'looked up from an endpoint that belongs to the blueprint 'frontend''\n            ) in text,type='comparison_operator'\nline_star:415,line_end:417|char_star:19,char_end:21";
"(\n                'looked up from an endpoint that belongs to the blueprint 'frontend''\n            ),type='parenthesized_expression'\nline_star:415,line_end:417|char_star:19,char_end:13"[shape="box",fillcolor="white",style=filled];
"(\n                'looked up from an endpoint that belongs to the blueprint 'frontend''\n            ) in text,type='comparison_operator'\nline_star:415,line_end:417|char_star:19,char_end:21"->"(\n                'looked up from an endpoint that belongs to the blueprint 'frontend''\n            ),type='parenthesized_expression'\nline_star:415,line_end:417|char_star:19,char_end:13";
"text,type='identifier'\nline_star:417,line_end:417|char_star:17,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"(\n                'looked up from an endpoint that belongs to the blueprint 'frontend''\n            ) in text,type='comparison_operator'\nline_star:415,line_end:417|char_star:19,char_end:21"->"text,type='identifier'\nline_star:417,line_end:417|char_star:17,char_end:21";
"assert 'See https://flask.palletsprojects.com/blueprints/#templates' in text,type='assert_statement'\nline_star:418,line_end:418|char_star:12,char_end:88"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:405,line_end:418|char_star:12,char_end:88"->"assert 'See https://flask.palletsprojects.com/blueprints/#templates' in text,type='assert_statement'\nline_star:418,line_end:418|char_star:12,char_end:88";
"'See https://flask.palletsprojects.com/blueprints/#templates' in text,type='comparison_operator'\nline_star:418,line_end:418|char_star:19,char_end:88"[shape="box",fillcolor="white",style=filled];
"assert 'See https://flask.palletsprojects.com/blueprints/#templates' in text,type='assert_statement'\nline_star:418,line_end:418|char_star:12,char_end:88"->"'See https://flask.palletsprojects.com/blueprints/#templates' in text,type='comparison_operator'\nline_star:418,line_end:418|char_star:19,char_end:88";
"text,type='identifier'\nline_star:418,line_end:418|char_star:84,char_end:88"[shape="point",fillcolor="#121013",style=filled];
"'See https://flask.palletsprojects.com/blueprints/#templates' in text,type='comparison_operator'\nline_star:418,line_end:418|char_star:19,char_end:88"->"text,type='identifier'\nline_star:418,line_end:418|char_star:84,char_end:88";
"with app.test_client() as c:\n        monkeypatch.setitem(app.config, 'EXPLAIN_TEMPLATE_LOADING', True)\n        monkeypatch.setattr(\n            logging.getLogger('blueprintapp'), 'handlers', [_TestHandler()]\n        )\n\n        with pytest.raises(TemplateNotFound) as excinfo:\n            c.get('/missing')\n\n        assert 'missing_template.html' in str(excinfo.value),type='with_statement'\nline_star:420,line_end:429|char_star:4,char_end:60"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:399,line_end:431|char_star:4,char_end:27"->"with app.test_client() as c:\n        monkeypatch.setitem(app.config, 'EXPLAIN_TEMPLATE_LOADING', True)\n        monkeypatch.setattr(\n            logging.getLogger('blueprintapp'), 'handlers', [_TestHandler()]\n        )\n\n        with pytest.raises(TemplateNotFound) as excinfo:\n            c.get('/missing')\n\n        assert 'missing_template.html' in str(excinfo.value),type='with_statement'\nline_star:420,line_end:429|char_star:4,char_end:60";
"app.test_client() as c,type='with_clause'\nline_star:420,line_end:420|char_star:9,char_end:31"[shape="box",fillcolor="white",style=filled];
"with app.test_client() as c:\n        monkeypatch.setitem(app.config, 'EXPLAIN_TEMPLATE_LOADING', True)\n        monkeypatch.setattr(\n            logging.getLogger('blueprintapp'), 'handlers', [_TestHandler()]\n        )\n\n        with pytest.raises(TemplateNotFound) as excinfo:\n            c.get('/missing')\n\n        assert 'missing_template.html' in str(excinfo.value),type='with_statement'\nline_star:420,line_end:429|char_star:4,char_end:60"->"app.test_client() as c,type='with_clause'\nline_star:420,line_end:420|char_star:9,char_end:31";
"type='INFORMATION BLOCK'\nline_star:421,line_end:429|char_star:8,char_end:60"[shape="point",fillcolor="#121013",style=filled];
"with app.test_client() as c:\n        monkeypatch.setitem(app.config, 'EXPLAIN_TEMPLATE_LOADING', True)\n        monkeypatch.setattr(\n            logging.getLogger('blueprintapp'), 'handlers', [_TestHandler()]\n        )\n\n        with pytest.raises(TemplateNotFound) as excinfo:\n            c.get('/missing')\n\n        assert 'missing_template.html' in str(excinfo.value),type='with_statement'\nline_star:420,line_end:429|char_star:4,char_end:60"->"type='INFORMATION BLOCK'\nline_star:421,line_end:429|char_star:8,char_end:60";
"with pytest.raises(TemplateNotFound) as excinfo:\n            c.get('/missing'),type='with_statement'\nline_star:426,line_end:427|char_star:8,char_end:29"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:421,line_end:429|char_star:8,char_end:60"->"with pytest.raises(TemplateNotFound) as excinfo:\n            c.get('/missing'),type='with_statement'\nline_star:426,line_end:427|char_star:8,char_end:29";
"pytest.raises(TemplateNotFound) as excinfo,type='with_clause'\nline_star:426,line_end:426|char_star:13,char_end:55"[shape="box",fillcolor="white",style=filled];
"with pytest.raises(TemplateNotFound) as excinfo:\n            c.get('/missing'),type='with_statement'\nline_star:426,line_end:427|char_star:8,char_end:29"->"pytest.raises(TemplateNotFound) as excinfo,type='with_clause'\nline_star:426,line_end:426|char_star:13,char_end:55";
"type='INFORMATION BLOCK'\nline_star:427,line_end:427|char_star:12,char_end:29"[shape="point",fillcolor="#121013",style=filled];
"with pytest.raises(TemplateNotFound) as excinfo:\n            c.get('/missing'),type='with_statement'\nline_star:426,line_end:427|char_star:8,char_end:29"->"type='INFORMATION BLOCK'\nline_star:427,line_end:427|char_star:12,char_end:29";
"assert 'missing_template.html' in str(excinfo.value),type='assert_statement'\nline_star:429,line_end:429|char_star:8,char_end:60"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:421,line_end:429|char_star:8,char_end:60"->"assert 'missing_template.html' in str(excinfo.value),type='assert_statement'\nline_star:429,line_end:429|char_star:8,char_end:60";
"'missing_template.html' in str(excinfo.value),type='comparison_operator'\nline_star:429,line_end:429|char_star:15,char_end:60"[shape="box",fillcolor="white",style=filled];
"assert 'missing_template.html' in str(excinfo.value),type='assert_statement'\nline_star:429,line_end:429|char_star:8,char_end:60"->"'missing_template.html' in str(excinfo.value),type='comparison_operator'\nline_star:429,line_end:429|char_star:15,char_end:60";
"str(excinfo.value),type='call'\nline_star:429,line_end:429|char_star:42,char_end:60"[shape="box",fillcolor="white",style=filled];
"'missing_template.html' in str(excinfo.value),type='comparison_operator'\nline_star:429,line_end:429|char_star:15,char_end:60"->"str(excinfo.value),type='call'\nline_star:429,line_end:429|char_star:42,char_end:60";
"str,type='identifier'\nline_star:429,line_end:429|char_star:42,char_end:45"[shape="point",fillcolor="#121013",style=filled];
"str(excinfo.value),type='call'\nline_star:429,line_end:429|char_star:42,char_end:60"->"str,type='identifier'\nline_star:429,line_end:429|char_star:42,char_end:45";
"(excinfo.value),type='argument_list'\nline_star:429,line_end:429|char_star:45,char_end:60"[shape="box",fillcolor="white",style=filled];
"str(excinfo.value),type='call'\nline_star:429,line_end:429|char_star:42,char_end:60"->"(excinfo.value),type='argument_list'\nline_star:429,line_end:429|char_star:45,char_end:60";
"excinfo.value,type='attribute'\nline_star:429,line_end:429|char_star:46,char_end:59"[shape="box",fillcolor="white",style=filled];
"(excinfo.value),type='argument_list'\nline_star:429,line_end:429|char_star:45,char_end:60"->"excinfo.value,type='attribute'\nline_star:429,line_end:429|char_star:46,char_end:59";
"excinfo,type='identifier'\nline_star:429,line_end:429|char_star:46,char_end:53"[shape="point",fillcolor="#121013",style=filled];
"excinfo.value,type='attribute'\nline_star:429,line_end:429|char_star:46,char_end:59"->"excinfo,type='identifier'\nline_star:429,line_end:429|char_star:46,char_end:53";
"value,type='identifier'\nline_star:429,line_end:429|char_star:54,char_end:59"[shape="point",fillcolor="#121013",style=filled];
"excinfo.value,type='attribute'\nline_star:429,line_end:429|char_star:46,char_end:59"->"value,type='identifier'\nline_star:429,line_end:429|char_star:54,char_end:59";
"assert len(called) == 1,type='assert_statement'\nline_star:431,line_end:431|char_star:4,char_end:27"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:399,line_end:431|char_star:4,char_end:27"->"assert len(called) == 1,type='assert_statement'\nline_star:431,line_end:431|char_star:4,char_end:27";
"len(called) == 1,type='comparison_operator'\nline_star:431,line_end:431|char_star:11,char_end:27"[shape="box",fillcolor="white",style=filled];
"assert len(called) == 1,type='assert_statement'\nline_star:431,line_end:431|char_star:4,char_end:27"->"len(called) == 1,type='comparison_operator'\nline_star:431,line_end:431|char_star:11,char_end:27";
"len(called),type='call'\nline_star:431,line_end:431|char_star:11,char_end:22"[shape="box",fillcolor="white",style=filled];
"len(called) == 1,type='comparison_operator'\nline_star:431,line_end:431|char_star:11,char_end:27"->"len(called),type='call'\nline_star:431,line_end:431|char_star:11,char_end:22";
"len,type='identifier'\nline_star:431,line_end:431|char_star:11,char_end:14"[shape="point",fillcolor="#121013",style=filled];
"len(called),type='call'\nline_star:431,line_end:431|char_star:11,char_end:22"->"len,type='identifier'\nline_star:431,line_end:431|char_star:11,char_end:14";
"(called),type='argument_list'\nline_star:431,line_end:431|char_star:14,char_end:22"[shape="box",fillcolor="white",style=filled];
"len(called),type='call'\nline_star:431,line_end:431|char_star:11,char_end:22"->"(called),type='argument_list'\nline_star:431,line_end:431|char_star:14,char_end:22";
"called,type='identifier'\nline_star:431,line_end:431|char_star:15,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"(called),type='argument_list'\nline_star:431,line_end:431|char_star:14,char_end:22"->"called,type='identifier'\nline_star:431,line_end:431|char_star:15,char_end:21";
"def test_custom_jinja_env():\n    class CustomEnvironment(flask.templating.Environment):\n        pass\n\n    class CustomFlask(flask.Flask):\n        jinja_environment = CustomEnvironment\n\n    app = CustomFlask(__name__)\n    assert isinstance(app.jinja_env, CustomEnvironment),type='function_definition'\nline_star:434,line_end:442|char_star:0,char_end:55"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_custom_jinja_env():\n    class CustomEnvironment(flask.templating.Environment):\n        pass\n\n    class CustomFlask(flask.Flask):\n        jinja_environment = CustomEnvironment\n\n    app = CustomFlask(__name__)\n    assert isinstance(app.jinja_env, CustomEnvironment),type='function_definition'\nline_star:434,line_end:442|char_star:0,char_end:55";
"test_custom_jinja_env,type='identifier'\nline_star:434,line_end:434|char_star:4,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"def test_custom_jinja_env():\n    class CustomEnvironment(flask.templating.Environment):\n        pass\n\n    class CustomFlask(flask.Flask):\n        jinja_environment = CustomEnvironment\n\n    app = CustomFlask(__name__)\n    assert isinstance(app.jinja_env, CustomEnvironment),type='function_definition'\nline_star:434,line_end:442|char_star:0,char_end:55"->"test_custom_jinja_env,type='identifier'\nline_star:434,line_end:434|char_star:4,char_end:25";
"type='INFORMATION BLOCK'\nline_star:435,line_end:442|char_star:4,char_end:55"[shape="point",fillcolor="#121013",style=filled];
"def test_custom_jinja_env():\n    class CustomEnvironment(flask.templating.Environment):\n        pass\n\n    class CustomFlask(flask.Flask):\n        jinja_environment = CustomEnvironment\n\n    app = CustomFlask(__name__)\n    assert isinstance(app.jinja_env, CustomEnvironment),type='function_definition'\nline_star:434,line_end:442|char_star:0,char_end:55"->"type='INFORMATION BLOCK'\nline_star:435,line_end:442|char_star:4,char_end:55";
"class CustomEnvironment(flask.templating.Environment):\n        pass,type='class_definition'\nline_star:435,line_end:436|char_star:4,char_end:12"[shape="box",fillcolor="#ffdf91",style=filled];
"type='INFORMATION BLOCK'\nline_star:435,line_end:442|char_star:4,char_end:55"->"class CustomEnvironment(flask.templating.Environment):\n        pass,type='class_definition'\nline_star:435,line_end:436|char_star:4,char_end:12";
"CustomEnvironment,type='identifier'\nline_star:435,line_end:435|char_star:10,char_end:27"[shape="point",fillcolor="#121013",style=filled];
"class CustomEnvironment(flask.templating.Environment):\n        pass,type='class_definition'\nline_star:435,line_end:436|char_star:4,char_end:12"->"CustomEnvironment,type='identifier'\nline_star:435,line_end:435|char_star:10,char_end:27";
"(flask.templating.Environment),type='argument_list'\nline_star:435,line_end:435|char_star:27,char_end:57"[shape="box",fillcolor="white",style=filled];
"class CustomEnvironment(flask.templating.Environment):\n        pass,type='class_definition'\nline_star:435,line_end:436|char_star:4,char_end:12"->"(flask.templating.Environment),type='argument_list'\nline_star:435,line_end:435|char_star:27,char_end:57";
"flask.templating.Environment,type='attribute'\nline_star:435,line_end:435|char_star:28,char_end:56"[shape="box",fillcolor="white",style=filled];
"(flask.templating.Environment),type='argument_list'\nline_star:435,line_end:435|char_star:27,char_end:57"->"flask.templating.Environment,type='attribute'\nline_star:435,line_end:435|char_star:28,char_end:56";
"flask.templating,type='attribute'\nline_star:435,line_end:435|char_star:28,char_end:44"[shape="box",fillcolor="white",style=filled];
"flask.templating.Environment,type='attribute'\nline_star:435,line_end:435|char_star:28,char_end:56"->"flask.templating,type='attribute'\nline_star:435,line_end:435|char_star:28,char_end:44";
"flask,type='identifier'\nline_star:435,line_end:435|char_star:28,char_end:33"[shape="point",fillcolor="#121013",style=filled];
"flask.templating,type='attribute'\nline_star:435,line_end:435|char_star:28,char_end:44"->"flask,type='identifier'\nline_star:435,line_end:435|char_star:28,char_end:33";
"templating,type='identifier'\nline_star:435,line_end:435|char_star:34,char_end:44"[shape="point",fillcolor="#121013",style=filled];
"flask.templating,type='attribute'\nline_star:435,line_end:435|char_star:28,char_end:44"->"templating,type='identifier'\nline_star:435,line_end:435|char_star:34,char_end:44";
"Environment,type='identifier'\nline_star:435,line_end:435|char_star:45,char_end:56"[shape="point",fillcolor="#121013",style=filled];
"flask.templating.Environment,type='attribute'\nline_star:435,line_end:435|char_star:28,char_end:56"->"Environment,type='identifier'\nline_star:435,line_end:435|char_star:45,char_end:56";
"type='INFORMATION BLOCK'\nline_star:436,line_end:436|char_star:8,char_end:12"[shape="point",fillcolor="#121013",style=filled];
"class CustomEnvironment(flask.templating.Environment):\n        pass,type='class_definition'\nline_star:435,line_end:436|char_star:4,char_end:12"->"type='INFORMATION BLOCK'\nline_star:436,line_end:436|char_star:8,char_end:12";
"pass,type='pass_statement'\nline_star:436,line_end:436|char_star:8,char_end:12"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:436,line_end:436|char_star:8,char_end:12"->"pass,type='pass_statement'\nline_star:436,line_end:436|char_star:8,char_end:12";
"pass,type='pass'\nline_star:436,line_end:436|char_star:8,char_end:12"[shape="box",fillcolor="white",style=filled];
"pass,type='pass_statement'\nline_star:436,line_end:436|char_star:8,char_end:12"->"pass,type='pass'\nline_star:436,line_end:436|char_star:8,char_end:12";
"class CustomFlask(flask.Flask):\n        jinja_environment = CustomEnvironment,type='class_definition'\nline_star:438,line_end:439|char_star:4,char_end:45"[shape="box",fillcolor="#ffdf91",style=filled];
"type='INFORMATION BLOCK'\nline_star:435,line_end:442|char_star:4,char_end:55"->"class CustomFlask(flask.Flask):\n        jinja_environment = CustomEnvironment,type='class_definition'\nline_star:438,line_end:439|char_star:4,char_end:45";
"CustomFlask,type='identifier'\nline_star:438,line_end:438|char_star:10,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"class CustomFlask(flask.Flask):\n        jinja_environment = CustomEnvironment,type='class_definition'\nline_star:438,line_end:439|char_star:4,char_end:45"->"CustomFlask,type='identifier'\nline_star:438,line_end:438|char_star:10,char_end:21";
"(flask.Flask),type='argument_list'\nline_star:438,line_end:438|char_star:21,char_end:34"[shape="box",fillcolor="white",style=filled];
"class CustomFlask(flask.Flask):\n        jinja_environment = CustomEnvironment,type='class_definition'\nline_star:438,line_end:439|char_star:4,char_end:45"->"(flask.Flask),type='argument_list'\nline_star:438,line_end:438|char_star:21,char_end:34";
"flask.Flask,type='attribute'\nline_star:438,line_end:438|char_star:22,char_end:33"[shape="box",fillcolor="white",style=filled];
"(flask.Flask),type='argument_list'\nline_star:438,line_end:438|char_star:21,char_end:34"->"flask.Flask,type='attribute'\nline_star:438,line_end:438|char_star:22,char_end:33";
"flask,type='identifier'\nline_star:438,line_end:438|char_star:22,char_end:27"[shape="point",fillcolor="#121013",style=filled];
"flask.Flask,type='attribute'\nline_star:438,line_end:438|char_star:22,char_end:33"->"flask,type='identifier'\nline_star:438,line_end:438|char_star:22,char_end:27";
"Flask,type='identifier'\nline_star:438,line_end:438|char_star:28,char_end:33"[shape="point",fillcolor="#121013",style=filled];
"flask.Flask,type='attribute'\nline_star:438,line_end:438|char_star:22,char_end:33"->"Flask,type='identifier'\nline_star:438,line_end:438|char_star:28,char_end:33";
"type='INFORMATION BLOCK'\nline_star:439,line_end:439|char_star:8,char_end:45"[shape="point",fillcolor="#121013",style=filled];
"class CustomFlask(flask.Flask):\n        jinja_environment = CustomEnvironment,type='class_definition'\nline_star:438,line_end:439|char_star:4,char_end:45"->"type='INFORMATION BLOCK'\nline_star:439,line_end:439|char_star:8,char_end:45";
"assert isinstance(app.jinja_env, CustomEnvironment),type='assert_statement'\nline_star:442,line_end:442|char_star:4,char_end:55"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:435,line_end:442|char_star:4,char_end:55"->"assert isinstance(app.jinja_env, CustomEnvironment),type='assert_statement'\nline_star:442,line_end:442|char_star:4,char_end:55";
"isinstance(app.jinja_env, CustomEnvironment),type='call'\nline_star:442,line_end:442|char_star:11,char_end:55"[shape="box",fillcolor="white",style=filled];
"assert isinstance(app.jinja_env, CustomEnvironment),type='assert_statement'\nline_star:442,line_end:442|char_star:4,char_end:55"->"isinstance(app.jinja_env, CustomEnvironment),type='call'\nline_star:442,line_end:442|char_star:11,char_end:55";
"isinstance,type='identifier'\nline_star:442,line_end:442|char_star:11,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"isinstance(app.jinja_env, CustomEnvironment),type='call'\nline_star:442,line_end:442|char_star:11,char_end:55"->"isinstance,type='identifier'\nline_star:442,line_end:442|char_star:11,char_end:21";
"(app.jinja_env, CustomEnvironment),type='argument_list'\nline_star:442,line_end:442|char_star:21,char_end:55"[shape="box",fillcolor="white",style=filled];
"isinstance(app.jinja_env, CustomEnvironment),type='call'\nline_star:442,line_end:442|char_star:11,char_end:55"->"(app.jinja_env, CustomEnvironment),type='argument_list'\nline_star:442,line_end:442|char_star:21,char_end:55";
"app.jinja_env,type='attribute'\nline_star:442,line_end:442|char_star:22,char_end:35"[shape="box",fillcolor="white",style=filled];
"(app.jinja_env, CustomEnvironment),type='argument_list'\nline_star:442,line_end:442|char_star:21,char_end:55"->"app.jinja_env,type='attribute'\nline_star:442,line_end:442|char_star:22,char_end:35";
"app,type='identifier'\nline_star:442,line_end:442|char_star:22,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env,type='attribute'\nline_star:442,line_end:442|char_star:22,char_end:35"->"app,type='identifier'\nline_star:442,line_end:442|char_star:22,char_end:25";
"jinja_env,type='identifier'\nline_star:442,line_end:442|char_star:26,char_end:35"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env,type='attribute'\nline_star:442,line_end:442|char_star:22,char_end:35"->"jinja_env,type='identifier'\nline_star:442,line_end:442|char_star:26,char_end:35";
"CustomEnvironment,type='identifier'\nline_star:442,line_end:442|char_star:37,char_end:54"[shape="point",fillcolor="#121013",style=filled];
"(app.jinja_env, CustomEnvironment),type='argument_list'\nline_star:442,line_end:442|char_star:21,char_end:55"->"CustomEnvironment,type='identifier'\nline_star:442,line_end:442|char_star:37,char_end:54";
"import logging\nimport pytest\nimport werkzeug.serving\nfrom jinja2 import TemplateNotFound\nimport flask\nfrom jinja2 import DictLoader\nfrom blueprintapp import ap"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"import logging\nimport pytest\nimport werkzeug.serving\nfrom jinja2 import TemplateNotFound\nimport flask\nfrom jinja2 import DictLoader\nfrom blueprintapp import ap"
}
