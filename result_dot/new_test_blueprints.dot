digraph G{
rankdir="LR";
"MODULE"[shape="box",fillcolor="white",style=filled];
"import functools,type='import_statement'\nline_star:0,line_end:0|char_star:0,char_end:16"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"import functools,type='import_statement'\nline_star:0,line_end:0|char_star:0,char_end:16";
"import pytest,type='import_statement'\nline_star:2,line_end:2|char_star:0,char_end:13"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"import pytest,type='import_statement'\nline_star:2,line_end:2|char_star:0,char_end:13";
"from jinja2 import TemplateNotFound,type='import_from_statement'\nline_star:3,line_end:3|char_star:0,char_end:35"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"from jinja2 import TemplateNotFound,type='import_from_statement'\nline_star:3,line_end:3|char_star:0,char_end:35";
"from werkzeug.http import parse_cache_control_header,type='import_from_statement'\nline_star:4,line_end:4|char_star:0,char_end:52"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"from werkzeug.http import parse_cache_control_header,type='import_from_statement'\nline_star:4,line_end:4|char_star:0,char_end:52";
"import flask,type='import_statement'\nline_star:6,line_end:6|char_star:0,char_end:12"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"import flask,type='import_statement'\nline_star:6,line_end:6|char_star:0,char_end:12";
"def test_blueprint_specific_error_handling(app, client):\n    frontend = flask.Blueprint('frontend', __name__)\n    backend = flask.Blueprint('backend', __name__)\n    sideend = flask.Blueprint('sideend', __name__)\n\n    @frontend.errorhandler(403)\n    def frontend_forbidden(e):\n        return 'frontend says no', 403\n\n    @frontend.route('/frontend-no')\n    def frontend_no():\n        flask.abort(403)\n\n    @backend.errorhandler(403)\n    def backend_forbidden(e):\n        return 'backend says no', 403\n\n    @backend.route('/backend-no')\n    def backend_no():\n        flask.abort(403)\n\n    @sideend.route('/what-is-a-sideend')\n    def sideend_no():\n        flask.abort(403)\n\n    app.register_blueprint(frontend)\n    app.register_blueprint(backend)\n    app.register_blueprint(sideend)\n\n    @app.errorhandler(403)\n    def app_forbidden(e):\n        return 'application itself says no', 403\n\n    assert client.get('/frontend-no').data == b'frontend says no'\n    assert client.get('/backend-no').data == b'backend says no'\n    assert client.get('/what-is-a-sideend').data == b'application itself says no',type='function_definition'\nline_star:9,line_end:44|char_star:0,char_end:81"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_blueprint_specific_error_handling(app, client):\n    frontend = flask.Blueprint('frontend', __name__)\n    backend = flask.Blueprint('backend', __name__)\n    sideend = flask.Blueprint('sideend', __name__)\n\n    @frontend.errorhandler(403)\n    def frontend_forbidden(e):\n        return 'frontend says no', 403\n\n    @frontend.route('/frontend-no')\n    def frontend_no():\n        flask.abort(403)\n\n    @backend.errorhandler(403)\n    def backend_forbidden(e):\n        return 'backend says no', 403\n\n    @backend.route('/backend-no')\n    def backend_no():\n        flask.abort(403)\n\n    @sideend.route('/what-is-a-sideend')\n    def sideend_no():\n        flask.abort(403)\n\n    app.register_blueprint(frontend)\n    app.register_blueprint(backend)\n    app.register_blueprint(sideend)\n\n    @app.errorhandler(403)\n    def app_forbidden(e):\n        return 'application itself says no', 403\n\n    assert client.get('/frontend-no').data == b'frontend says no'\n    assert client.get('/backend-no').data == b'backend says no'\n    assert client.get('/what-is-a-sideend').data == b'application itself says no',type='function_definition'\nline_star:9,line_end:44|char_star:0,char_end:81";
"test_blueprint_specific_error_handling,type='identifier'\nline_star:9,line_end:9|char_star:4,char_end:42"[shape="point",fillcolor="#121013",style=filled];
"def test_blueprint_specific_error_handling(app, client):\n    frontend = flask.Blueprint('frontend', __name__)\n    backend = flask.Blueprint('backend', __name__)\n    sideend = flask.Blueprint('sideend', __name__)\n\n    @frontend.errorhandler(403)\n    def frontend_forbidden(e):\n        return 'frontend says no', 403\n\n    @frontend.route('/frontend-no')\n    def frontend_no():\n        flask.abort(403)\n\n    @backend.errorhandler(403)\n    def backend_forbidden(e):\n        return 'backend says no', 403\n\n    @backend.route('/backend-no')\n    def backend_no():\n        flask.abort(403)\n\n    @sideend.route('/what-is-a-sideend')\n    def sideend_no():\n        flask.abort(403)\n\n    app.register_blueprint(frontend)\n    app.register_blueprint(backend)\n    app.register_blueprint(sideend)\n\n    @app.errorhandler(403)\n    def app_forbidden(e):\n        return 'application itself says no', 403\n\n    assert client.get('/frontend-no').data == b'frontend says no'\n    assert client.get('/backend-no').data == b'backend says no'\n    assert client.get('/what-is-a-sideend').data == b'application itself says no',type='function_definition'\nline_star:9,line_end:44|char_star:0,char_end:81"->"test_blueprint_specific_error_handling,type='identifier'\nline_star:9,line_end:9|char_star:4,char_end:42";
"(app, client),type='parameters'\nline_star:9,line_end:9|char_star:42,char_end:55"[shape="box",fillcolor="white",style=filled];
"def test_blueprint_specific_error_handling(app, client):\n    frontend = flask.Blueprint('frontend', __name__)\n    backend = flask.Blueprint('backend', __name__)\n    sideend = flask.Blueprint('sideend', __name__)\n\n    @frontend.errorhandler(403)\n    def frontend_forbidden(e):\n        return 'frontend says no', 403\n\n    @frontend.route('/frontend-no')\n    def frontend_no():\n        flask.abort(403)\n\n    @backend.errorhandler(403)\n    def backend_forbidden(e):\n        return 'backend says no', 403\n\n    @backend.route('/backend-no')\n    def backend_no():\n        flask.abort(403)\n\n    @sideend.route('/what-is-a-sideend')\n    def sideend_no():\n        flask.abort(403)\n\n    app.register_blueprint(frontend)\n    app.register_blueprint(backend)\n    app.register_blueprint(sideend)\n\n    @app.errorhandler(403)\n    def app_forbidden(e):\n        return 'application itself says no', 403\n\n    assert client.get('/frontend-no').data == b'frontend says no'\n    assert client.get('/backend-no').data == b'backend says no'\n    assert client.get('/what-is-a-sideend').data == b'application itself says no',type='function_definition'\nline_star:9,line_end:44|char_star:0,char_end:81"->"(app, client),type='parameters'\nline_star:9,line_end:9|char_star:42,char_end:55";
"app,type='identifier'\nline_star:9,line_end:9|char_star:43,char_end:46"[shape="point",fillcolor="#121013",style=filled];
"(app, client),type='parameters'\nline_star:9,line_end:9|char_star:42,char_end:55"->"app,type='identifier'\nline_star:9,line_end:9|char_star:43,char_end:46";
"client,type='identifier'\nline_star:9,line_end:9|char_star:48,char_end:54"[shape="point",fillcolor="#121013",style=filled];
"(app, client),type='parameters'\nline_star:9,line_end:9|char_star:42,char_end:55"->"client,type='identifier'\nline_star:9,line_end:9|char_star:48,char_end:54";
"type='INFORMATION BLOCK'\nline_star:10,line_end:44|char_star:4,char_end:81"[shape="point",fillcolor="#121013",style=filled];
"def test_blueprint_specific_error_handling(app, client):\n    frontend = flask.Blueprint('frontend', __name__)\n    backend = flask.Blueprint('backend', __name__)\n    sideend = flask.Blueprint('sideend', __name__)\n\n    @frontend.errorhandler(403)\n    def frontend_forbidden(e):\n        return 'frontend says no', 403\n\n    @frontend.route('/frontend-no')\n    def frontend_no():\n        flask.abort(403)\n\n    @backend.errorhandler(403)\n    def backend_forbidden(e):\n        return 'backend says no', 403\n\n    @backend.route('/backend-no')\n    def backend_no():\n        flask.abort(403)\n\n    @sideend.route('/what-is-a-sideend')\n    def sideend_no():\n        flask.abort(403)\n\n    app.register_blueprint(frontend)\n    app.register_blueprint(backend)\n    app.register_blueprint(sideend)\n\n    @app.errorhandler(403)\n    def app_forbidden(e):\n        return 'application itself says no', 403\n\n    assert client.get('/frontend-no').data == b'frontend says no'\n    assert client.get('/backend-no').data == b'backend says no'\n    assert client.get('/what-is-a-sideend').data == b'application itself says no',type='function_definition'\nline_star:9,line_end:44|char_star:0,char_end:81"->"type='INFORMATION BLOCK'\nline_star:10,line_end:44|char_star:4,char_end:81";
"@frontend.errorhandler(403)\n    def frontend_forbidden(e):\n        return 'frontend says no', 403,type='decorated_definition'\nline_star:14,line_end:16|char_star:4,char_end:38"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:10,line_end:44|char_star:4,char_end:81"->"@frontend.errorhandler(403)\n    def frontend_forbidden(e):\n        return 'frontend says no', 403,type='decorated_definition'\nline_star:14,line_end:16|char_star:4,char_end:38";
"@frontend.errorhandler(403),type='decorator'\nline_star:14,line_end:14|char_star:4,char_end:31"[shape="box",fillcolor="white",style=filled];
"@frontend.errorhandler(403)\n    def frontend_forbidden(e):\n        return 'frontend says no', 403,type='decorated_definition'\nline_star:14,line_end:16|char_star:4,char_end:38"->"@frontend.errorhandler(403),type='decorator'\nline_star:14,line_end:14|char_star:4,char_end:31";
"def frontend_forbidden(e):\n        return 'frontend says no', 403,type='function_definition'\nline_star:15,line_end:16|char_star:4,char_end:38"[shape="box",fillcolor="#cee6b4",style=filled];
"@frontend.errorhandler(403)\n    def frontend_forbidden(e):\n        return 'frontend says no', 403,type='decorated_definition'\nline_star:14,line_end:16|char_star:4,char_end:38"->"def frontend_forbidden(e):\n        return 'frontend says no', 403,type='function_definition'\nline_star:15,line_end:16|char_star:4,char_end:38";
"frontend_forbidden,type='identifier'\nline_star:15,line_end:15|char_star:8,char_end:26"[shape="point",fillcolor="#121013",style=filled];
"def frontend_forbidden(e):\n        return 'frontend says no', 403,type='function_definition'\nline_star:15,line_end:16|char_star:4,char_end:38"->"frontend_forbidden,type='identifier'\nline_star:15,line_end:15|char_star:8,char_end:26";
"(e),type='parameters'\nline_star:15,line_end:15|char_star:26,char_end:29"[shape="box",fillcolor="white",style=filled];
"def frontend_forbidden(e):\n        return 'frontend says no', 403,type='function_definition'\nline_star:15,line_end:16|char_star:4,char_end:38"->"(e),type='parameters'\nline_star:15,line_end:15|char_star:26,char_end:29";
"e,type='identifier'\nline_star:15,line_end:15|char_star:27,char_end:28"[shape="point",fillcolor="#121013",style=filled];
"(e),type='parameters'\nline_star:15,line_end:15|char_star:26,char_end:29"->"e,type='identifier'\nline_star:15,line_end:15|char_star:27,char_end:28";
"type='INFORMATION BLOCK'\nline_star:16,line_end:16|char_star:8,char_end:38"[shape="point",fillcolor="#121013",style=filled];
"def frontend_forbidden(e):\n        return 'frontend says no', 403,type='function_definition'\nline_star:15,line_end:16|char_star:4,char_end:38"->"type='INFORMATION BLOCK'\nline_star:16,line_end:16|char_star:8,char_end:38";
"return 'frontend says no', 403,type='return_statement'\nline_star:16,line_end:16|char_star:8,char_end:38"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:16,line_end:16|char_star:8,char_end:38"->"return 'frontend says no', 403,type='return_statement'\nline_star:16,line_end:16|char_star:8,char_end:38";
"@frontend.route('/frontend-no')\n    def frontend_no():\n        flask.abort(403),type='decorated_definition'\nline_star:18,line_end:20|char_star:4,char_end:24"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:10,line_end:44|char_star:4,char_end:81"->"@frontend.route('/frontend-no')\n    def frontend_no():\n        flask.abort(403),type='decorated_definition'\nline_star:18,line_end:20|char_star:4,char_end:24";
"@frontend.route('/frontend-no'),type='decorator'\nline_star:18,line_end:18|char_star:4,char_end:35"[shape="box",fillcolor="white",style=filled];
"@frontend.route('/frontend-no')\n    def frontend_no():\n        flask.abort(403),type='decorated_definition'\nline_star:18,line_end:20|char_star:4,char_end:24"->"@frontend.route('/frontend-no'),type='decorator'\nline_star:18,line_end:18|char_star:4,char_end:35";
"def frontend_no():\n        flask.abort(403),type='function_definition'\nline_star:19,line_end:20|char_star:4,char_end:24"[shape="box",fillcolor="#cee6b4",style=filled];
"@frontend.route('/frontend-no')\n    def frontend_no():\n        flask.abort(403),type='decorated_definition'\nline_star:18,line_end:20|char_star:4,char_end:24"->"def frontend_no():\n        flask.abort(403),type='function_definition'\nline_star:19,line_end:20|char_star:4,char_end:24";
"frontend_no,type='identifier'\nline_star:19,line_end:19|char_star:8,char_end:19"[shape="point",fillcolor="#121013",style=filled];
"def frontend_no():\n        flask.abort(403),type='function_definition'\nline_star:19,line_end:20|char_star:4,char_end:24"->"frontend_no,type='identifier'\nline_star:19,line_end:19|char_star:8,char_end:19";
"type='INFORMATION BLOCK'\nline_star:20,line_end:20|char_star:8,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"def frontend_no():\n        flask.abort(403),type='function_definition'\nline_star:19,line_end:20|char_star:4,char_end:24"->"type='INFORMATION BLOCK'\nline_star:20,line_end:20|char_star:8,char_end:24";
"@backend.errorhandler(403)\n    def backend_forbidden(e):\n        return 'backend says no', 403,type='decorated_definition'\nline_star:22,line_end:24|char_star:4,char_end:37"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:10,line_end:44|char_star:4,char_end:81"->"@backend.errorhandler(403)\n    def backend_forbidden(e):\n        return 'backend says no', 403,type='decorated_definition'\nline_star:22,line_end:24|char_star:4,char_end:37";
"@backend.errorhandler(403),type='decorator'\nline_star:22,line_end:22|char_star:4,char_end:30"[shape="box",fillcolor="white",style=filled];
"@backend.errorhandler(403)\n    def backend_forbidden(e):\n        return 'backend says no', 403,type='decorated_definition'\nline_star:22,line_end:24|char_star:4,char_end:37"->"@backend.errorhandler(403),type='decorator'\nline_star:22,line_end:22|char_star:4,char_end:30";
"def backend_forbidden(e):\n        return 'backend says no', 403,type='function_definition'\nline_star:23,line_end:24|char_star:4,char_end:37"[shape="box",fillcolor="#cee6b4",style=filled];
"@backend.errorhandler(403)\n    def backend_forbidden(e):\n        return 'backend says no', 403,type='decorated_definition'\nline_star:22,line_end:24|char_star:4,char_end:37"->"def backend_forbidden(e):\n        return 'backend says no', 403,type='function_definition'\nline_star:23,line_end:24|char_star:4,char_end:37";
"backend_forbidden,type='identifier'\nline_star:23,line_end:23|char_star:8,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"def backend_forbidden(e):\n        return 'backend says no', 403,type='function_definition'\nline_star:23,line_end:24|char_star:4,char_end:37"->"backend_forbidden,type='identifier'\nline_star:23,line_end:23|char_star:8,char_end:25";
"(e),type='parameters'\nline_star:23,line_end:23|char_star:25,char_end:28"[shape="box",fillcolor="white",style=filled];
"def backend_forbidden(e):\n        return 'backend says no', 403,type='function_definition'\nline_star:23,line_end:24|char_star:4,char_end:37"->"(e),type='parameters'\nline_star:23,line_end:23|char_star:25,char_end:28";
"e,type='identifier'\nline_star:23,line_end:23|char_star:26,char_end:27"[shape="point",fillcolor="#121013",style=filled];
"(e),type='parameters'\nline_star:23,line_end:23|char_star:25,char_end:28"->"e,type='identifier'\nline_star:23,line_end:23|char_star:26,char_end:27";
"type='INFORMATION BLOCK'\nline_star:24,line_end:24|char_star:8,char_end:37"[shape="point",fillcolor="#121013",style=filled];
"def backend_forbidden(e):\n        return 'backend says no', 403,type='function_definition'\nline_star:23,line_end:24|char_star:4,char_end:37"->"type='INFORMATION BLOCK'\nline_star:24,line_end:24|char_star:8,char_end:37";
"return 'backend says no', 403,type='return_statement'\nline_star:24,line_end:24|char_star:8,char_end:37"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:24,line_end:24|char_star:8,char_end:37"->"return 'backend says no', 403,type='return_statement'\nline_star:24,line_end:24|char_star:8,char_end:37";
"@backend.route('/backend-no')\n    def backend_no():\n        flask.abort(403),type='decorated_definition'\nline_star:26,line_end:28|char_star:4,char_end:24"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:10,line_end:44|char_star:4,char_end:81"->"@backend.route('/backend-no')\n    def backend_no():\n        flask.abort(403),type='decorated_definition'\nline_star:26,line_end:28|char_star:4,char_end:24";
"@backend.route('/backend-no'),type='decorator'\nline_star:26,line_end:26|char_star:4,char_end:33"[shape="box",fillcolor="white",style=filled];
"@backend.route('/backend-no')\n    def backend_no():\n        flask.abort(403),type='decorated_definition'\nline_star:26,line_end:28|char_star:4,char_end:24"->"@backend.route('/backend-no'),type='decorator'\nline_star:26,line_end:26|char_star:4,char_end:33";
"def backend_no():\n        flask.abort(403),type='function_definition'\nline_star:27,line_end:28|char_star:4,char_end:24"[shape="box",fillcolor="#cee6b4",style=filled];
"@backend.route('/backend-no')\n    def backend_no():\n        flask.abort(403),type='decorated_definition'\nline_star:26,line_end:28|char_star:4,char_end:24"->"def backend_no():\n        flask.abort(403),type='function_definition'\nline_star:27,line_end:28|char_star:4,char_end:24";
"backend_no,type='identifier'\nline_star:27,line_end:27|char_star:8,char_end:18"[shape="point",fillcolor="#121013",style=filled];
"def backend_no():\n        flask.abort(403),type='function_definition'\nline_star:27,line_end:28|char_star:4,char_end:24"->"backend_no,type='identifier'\nline_star:27,line_end:27|char_star:8,char_end:18";
"type='INFORMATION BLOCK'\nline_star:28,line_end:28|char_star:8,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"def backend_no():\n        flask.abort(403),type='function_definition'\nline_star:27,line_end:28|char_star:4,char_end:24"->"type='INFORMATION BLOCK'\nline_star:28,line_end:28|char_star:8,char_end:24";
"@sideend.route('/what-is-a-sideend')\n    def sideend_no():\n        flask.abort(403),type='decorated_definition'\nline_star:30,line_end:32|char_star:4,char_end:24"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:10,line_end:44|char_star:4,char_end:81"->"@sideend.route('/what-is-a-sideend')\n    def sideend_no():\n        flask.abort(403),type='decorated_definition'\nline_star:30,line_end:32|char_star:4,char_end:24";
"@sideend.route('/what-is-a-sideend'),type='decorator'\nline_star:30,line_end:30|char_star:4,char_end:40"[shape="box",fillcolor="white",style=filled];
"@sideend.route('/what-is-a-sideend')\n    def sideend_no():\n        flask.abort(403),type='decorated_definition'\nline_star:30,line_end:32|char_star:4,char_end:24"->"@sideend.route('/what-is-a-sideend'),type='decorator'\nline_star:30,line_end:30|char_star:4,char_end:40";
"def sideend_no():\n        flask.abort(403),type='function_definition'\nline_star:31,line_end:32|char_star:4,char_end:24"[shape="box",fillcolor="#cee6b4",style=filled];
"@sideend.route('/what-is-a-sideend')\n    def sideend_no():\n        flask.abort(403),type='decorated_definition'\nline_star:30,line_end:32|char_star:4,char_end:24"->"def sideend_no():\n        flask.abort(403),type='function_definition'\nline_star:31,line_end:32|char_star:4,char_end:24";
"sideend_no,type='identifier'\nline_star:31,line_end:31|char_star:8,char_end:18"[shape="point",fillcolor="#121013",style=filled];
"def sideend_no():\n        flask.abort(403),type='function_definition'\nline_star:31,line_end:32|char_star:4,char_end:24"->"sideend_no,type='identifier'\nline_star:31,line_end:31|char_star:8,char_end:18";
"type='INFORMATION BLOCK'\nline_star:32,line_end:32|char_star:8,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"def sideend_no():\n        flask.abort(403),type='function_definition'\nline_star:31,line_end:32|char_star:4,char_end:24"->"type='INFORMATION BLOCK'\nline_star:32,line_end:32|char_star:8,char_end:24";
"@app.errorhandler(403)\n    def app_forbidden(e):\n        return 'application itself says no', 403,type='decorated_definition'\nline_star:38,line_end:40|char_star:4,char_end:48"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:10,line_end:44|char_star:4,char_end:81"->"@app.errorhandler(403)\n    def app_forbidden(e):\n        return 'application itself says no', 403,type='decorated_definition'\nline_star:38,line_end:40|char_star:4,char_end:48";
"@app.errorhandler(403),type='decorator'\nline_star:38,line_end:38|char_star:4,char_end:26"[shape="box",fillcolor="white",style=filled];
"@app.errorhandler(403)\n    def app_forbidden(e):\n        return 'application itself says no', 403,type='decorated_definition'\nline_star:38,line_end:40|char_star:4,char_end:48"->"@app.errorhandler(403),type='decorator'\nline_star:38,line_end:38|char_star:4,char_end:26";
"def app_forbidden(e):\n        return 'application itself says no', 403,type='function_definition'\nline_star:39,line_end:40|char_star:4,char_end:48"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.errorhandler(403)\n    def app_forbidden(e):\n        return 'application itself says no', 403,type='decorated_definition'\nline_star:38,line_end:40|char_star:4,char_end:48"->"def app_forbidden(e):\n        return 'application itself says no', 403,type='function_definition'\nline_star:39,line_end:40|char_star:4,char_end:48";
"app_forbidden,type='identifier'\nline_star:39,line_end:39|char_star:8,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"def app_forbidden(e):\n        return 'application itself says no', 403,type='function_definition'\nline_star:39,line_end:40|char_star:4,char_end:48"->"app_forbidden,type='identifier'\nline_star:39,line_end:39|char_star:8,char_end:21";
"(e),type='parameters'\nline_star:39,line_end:39|char_star:21,char_end:24"[shape="box",fillcolor="white",style=filled];
"def app_forbidden(e):\n        return 'application itself says no', 403,type='function_definition'\nline_star:39,line_end:40|char_star:4,char_end:48"->"(e),type='parameters'\nline_star:39,line_end:39|char_star:21,char_end:24";
"e,type='identifier'\nline_star:39,line_end:39|char_star:22,char_end:23"[shape="point",fillcolor="#121013",style=filled];
"(e),type='parameters'\nline_star:39,line_end:39|char_star:21,char_end:24"->"e,type='identifier'\nline_star:39,line_end:39|char_star:22,char_end:23";
"type='INFORMATION BLOCK'\nline_star:40,line_end:40|char_star:8,char_end:48"[shape="point",fillcolor="#121013",style=filled];
"def app_forbidden(e):\n        return 'application itself says no', 403,type='function_definition'\nline_star:39,line_end:40|char_star:4,char_end:48"->"type='INFORMATION BLOCK'\nline_star:40,line_end:40|char_star:8,char_end:48";
"return 'application itself says no', 403,type='return_statement'\nline_star:40,line_end:40|char_star:8,char_end:48"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:40,line_end:40|char_star:8,char_end:48"->"return 'application itself says no', 403,type='return_statement'\nline_star:40,line_end:40|char_star:8,char_end:48";
"assert client.get('/frontend-no').data == b'frontend says no',type='assert_statement'\nline_star:42,line_end:42|char_star:4,char_end:65"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:10,line_end:44|char_star:4,char_end:81"->"assert client.get('/frontend-no').data == b'frontend says no',type='assert_statement'\nline_star:42,line_end:42|char_star:4,char_end:65";
"client.get('/frontend-no').data == b'frontend says no',type='comparison_operator'\nline_star:42,line_end:42|char_star:11,char_end:65"[shape="box",fillcolor="white",style=filled];
"assert client.get('/frontend-no').data == b'frontend says no',type='assert_statement'\nline_star:42,line_end:42|char_star:4,char_end:65"->"client.get('/frontend-no').data == b'frontend says no',type='comparison_operator'\nline_star:42,line_end:42|char_star:11,char_end:65";
"client.get('/frontend-no').data,type='attribute'\nline_star:42,line_end:42|char_star:11,char_end:42"[shape="box",fillcolor="white",style=filled];
"client.get('/frontend-no').data == b'frontend says no',type='comparison_operator'\nline_star:42,line_end:42|char_star:11,char_end:65"->"client.get('/frontend-no').data,type='attribute'\nline_star:42,line_end:42|char_star:11,char_end:42";
"client.get('/frontend-no'),type='call'\nline_star:42,line_end:42|char_star:11,char_end:37"[shape="box",fillcolor="white",style=filled];
"client.get('/frontend-no').data,type='attribute'\nline_star:42,line_end:42|char_star:11,char_end:42"->"client.get('/frontend-no'),type='call'\nline_star:42,line_end:42|char_star:11,char_end:37";
"client.get,type='attribute'\nline_star:42,line_end:42|char_star:11,char_end:21"[shape="box",fillcolor="white",style=filled];
"client.get('/frontend-no'),type='call'\nline_star:42,line_end:42|char_star:11,char_end:37"->"client.get,type='attribute'\nline_star:42,line_end:42|char_star:11,char_end:21";
"client,type='identifier'\nline_star:42,line_end:42|char_star:11,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"client.get,type='attribute'\nline_star:42,line_end:42|char_star:11,char_end:21"->"client,type='identifier'\nline_star:42,line_end:42|char_star:11,char_end:17";
"get,type='identifier'\nline_star:42,line_end:42|char_star:18,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"client.get,type='attribute'\nline_star:42,line_end:42|char_star:11,char_end:21"->"get,type='identifier'\nline_star:42,line_end:42|char_star:18,char_end:21";
"('/frontend-no'),type='argument_list'\nline_star:42,line_end:42|char_star:21,char_end:37"[shape="box",fillcolor="white",style=filled];
"client.get('/frontend-no'),type='call'\nline_star:42,line_end:42|char_star:11,char_end:37"->"('/frontend-no'),type='argument_list'\nline_star:42,line_end:42|char_star:21,char_end:37";
"data,type='identifier'\nline_star:42,line_end:42|char_star:38,char_end:42"[shape="point",fillcolor="#121013",style=filled];
"client.get('/frontend-no').data,type='attribute'\nline_star:42,line_end:42|char_star:11,char_end:42"->"data,type='identifier'\nline_star:42,line_end:42|char_star:38,char_end:42";
"assert client.get('/backend-no').data == b'backend says no',type='assert_statement'\nline_star:43,line_end:43|char_star:4,char_end:63"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:10,line_end:44|char_star:4,char_end:81"->"assert client.get('/backend-no').data == b'backend says no',type='assert_statement'\nline_star:43,line_end:43|char_star:4,char_end:63";
"client.get('/backend-no').data == b'backend says no',type='comparison_operator'\nline_star:43,line_end:43|char_star:11,char_end:63"[shape="box",fillcolor="white",style=filled];
"assert client.get('/backend-no').data == b'backend says no',type='assert_statement'\nline_star:43,line_end:43|char_star:4,char_end:63"->"client.get('/backend-no').data == b'backend says no',type='comparison_operator'\nline_star:43,line_end:43|char_star:11,char_end:63";
"client.get('/backend-no').data,type='attribute'\nline_star:43,line_end:43|char_star:11,char_end:41"[shape="box",fillcolor="white",style=filled];
"client.get('/backend-no').data == b'backend says no',type='comparison_operator'\nline_star:43,line_end:43|char_star:11,char_end:63"->"client.get('/backend-no').data,type='attribute'\nline_star:43,line_end:43|char_star:11,char_end:41";
"client.get('/backend-no'),type='call'\nline_star:43,line_end:43|char_star:11,char_end:36"[shape="box",fillcolor="white",style=filled];
"client.get('/backend-no').data,type='attribute'\nline_star:43,line_end:43|char_star:11,char_end:41"->"client.get('/backend-no'),type='call'\nline_star:43,line_end:43|char_star:11,char_end:36";
"client.get,type='attribute'\nline_star:43,line_end:43|char_star:11,char_end:21"[shape="box",fillcolor="white",style=filled];
"client.get('/backend-no'),type='call'\nline_star:43,line_end:43|char_star:11,char_end:36"->"client.get,type='attribute'\nline_star:43,line_end:43|char_star:11,char_end:21";
"client,type='identifier'\nline_star:43,line_end:43|char_star:11,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"client.get,type='attribute'\nline_star:43,line_end:43|char_star:11,char_end:21"->"client,type='identifier'\nline_star:43,line_end:43|char_star:11,char_end:17";
"get,type='identifier'\nline_star:43,line_end:43|char_star:18,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"client.get,type='attribute'\nline_star:43,line_end:43|char_star:11,char_end:21"->"get,type='identifier'\nline_star:43,line_end:43|char_star:18,char_end:21";
"('/backend-no'),type='argument_list'\nline_star:43,line_end:43|char_star:21,char_end:36"[shape="box",fillcolor="white",style=filled];
"client.get('/backend-no'),type='call'\nline_star:43,line_end:43|char_star:11,char_end:36"->"('/backend-no'),type='argument_list'\nline_star:43,line_end:43|char_star:21,char_end:36";
"data,type='identifier'\nline_star:43,line_end:43|char_star:37,char_end:41"[shape="point",fillcolor="#121013",style=filled];
"client.get('/backend-no').data,type='attribute'\nline_star:43,line_end:43|char_star:11,char_end:41"->"data,type='identifier'\nline_star:43,line_end:43|char_star:37,char_end:41";
"assert client.get('/what-is-a-sideend').data == b'application itself says no',type='assert_statement'\nline_star:44,line_end:44|char_star:4,char_end:81"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:10,line_end:44|char_star:4,char_end:81"->"assert client.get('/what-is-a-sideend').data == b'application itself says no',type='assert_statement'\nline_star:44,line_end:44|char_star:4,char_end:81";
"client.get('/what-is-a-sideend').data == b'application itself says no',type='comparison_operator'\nline_star:44,line_end:44|char_star:11,char_end:81"[shape="box",fillcolor="white",style=filled];
"assert client.get('/what-is-a-sideend').data == b'application itself says no',type='assert_statement'\nline_star:44,line_end:44|char_star:4,char_end:81"->"client.get('/what-is-a-sideend').data == b'application itself says no',type='comparison_operator'\nline_star:44,line_end:44|char_star:11,char_end:81";
"client.get('/what-is-a-sideend').data,type='attribute'\nline_star:44,line_end:44|char_star:11,char_end:48"[shape="box",fillcolor="white",style=filled];
"client.get('/what-is-a-sideend').data == b'application itself says no',type='comparison_operator'\nline_star:44,line_end:44|char_star:11,char_end:81"->"client.get('/what-is-a-sideend').data,type='attribute'\nline_star:44,line_end:44|char_star:11,char_end:48";
"client.get('/what-is-a-sideend'),type='call'\nline_star:44,line_end:44|char_star:11,char_end:43"[shape="box",fillcolor="white",style=filled];
"client.get('/what-is-a-sideend').data,type='attribute'\nline_star:44,line_end:44|char_star:11,char_end:48"->"client.get('/what-is-a-sideend'),type='call'\nline_star:44,line_end:44|char_star:11,char_end:43";
"client.get,type='attribute'\nline_star:44,line_end:44|char_star:11,char_end:21"[shape="box",fillcolor="white",style=filled];
"client.get('/what-is-a-sideend'),type='call'\nline_star:44,line_end:44|char_star:11,char_end:43"->"client.get,type='attribute'\nline_star:44,line_end:44|char_star:11,char_end:21";
"client,type='identifier'\nline_star:44,line_end:44|char_star:11,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"client.get,type='attribute'\nline_star:44,line_end:44|char_star:11,char_end:21"->"client,type='identifier'\nline_star:44,line_end:44|char_star:11,char_end:17";
"get,type='identifier'\nline_star:44,line_end:44|char_star:18,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"client.get,type='attribute'\nline_star:44,line_end:44|char_star:11,char_end:21"->"get,type='identifier'\nline_star:44,line_end:44|char_star:18,char_end:21";
"('/what-is-a-sideend'),type='argument_list'\nline_star:44,line_end:44|char_star:21,char_end:43"[shape="box",fillcolor="white",style=filled];
"client.get('/what-is-a-sideend'),type='call'\nline_star:44,line_end:44|char_star:11,char_end:43"->"('/what-is-a-sideend'),type='argument_list'\nline_star:44,line_end:44|char_star:21,char_end:43";
"data,type='identifier'\nline_star:44,line_end:44|char_star:44,char_end:48"[shape="point",fillcolor="#121013",style=filled];
"client.get('/what-is-a-sideend').data,type='attribute'\nline_star:44,line_end:44|char_star:11,char_end:48"->"data,type='identifier'\nline_star:44,line_end:44|char_star:44,char_end:48";
"def test_blueprint_specific_user_error_handling(app, client):\n    class MyDecoratorException(Exception):\n        pass\n\n    class MyFunctionException(Exception):\n        pass\n\n    blue = flask.Blueprint('blue', __name__)\n\n    @blue.errorhandler(MyDecoratorException)\n    def my_decorator_exception_handler(e):\n        assert isinstance(e, MyDecoratorException)\n        return 'boom'\n\n    def my_function_exception_handler(e):\n        assert isinstance(e, MyFunctionException)\n        return 'bam'\n\n    blue.register_error_handler(MyFunctionException, my_function_exception_handler)\n\n    @blue.route('/decorator')\n    def blue_deco_test():\n        raise MyDecoratorException()\n\n    @blue.route('/function')\n    def blue_func_test():\n        raise MyFunctionException()\n\n    app.register_blueprint(blue)\n\n    assert client.get('/decorator').data == b'boom'\n    assert client.get('/function').data == b'bam',type='function_definition'\nline_star:47,line_end:78|char_star:0,char_end:49"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_blueprint_specific_user_error_handling(app, client):\n    class MyDecoratorException(Exception):\n        pass\n\n    class MyFunctionException(Exception):\n        pass\n\n    blue = flask.Blueprint('blue', __name__)\n\n    @blue.errorhandler(MyDecoratorException)\n    def my_decorator_exception_handler(e):\n        assert isinstance(e, MyDecoratorException)\n        return 'boom'\n\n    def my_function_exception_handler(e):\n        assert isinstance(e, MyFunctionException)\n        return 'bam'\n\n    blue.register_error_handler(MyFunctionException, my_function_exception_handler)\n\n    @blue.route('/decorator')\n    def blue_deco_test():\n        raise MyDecoratorException()\n\n    @blue.route('/function')\n    def blue_func_test():\n        raise MyFunctionException()\n\n    app.register_blueprint(blue)\n\n    assert client.get('/decorator').data == b'boom'\n    assert client.get('/function').data == b'bam',type='function_definition'\nline_star:47,line_end:78|char_star:0,char_end:49";
"test_blueprint_specific_user_error_handling,type='identifier'\nline_star:47,line_end:47|char_star:4,char_end:47"[shape="point",fillcolor="#121013",style=filled];
"def test_blueprint_specific_user_error_handling(app, client):\n    class MyDecoratorException(Exception):\n        pass\n\n    class MyFunctionException(Exception):\n        pass\n\n    blue = flask.Blueprint('blue', __name__)\n\n    @blue.errorhandler(MyDecoratorException)\n    def my_decorator_exception_handler(e):\n        assert isinstance(e, MyDecoratorException)\n        return 'boom'\n\n    def my_function_exception_handler(e):\n        assert isinstance(e, MyFunctionException)\n        return 'bam'\n\n    blue.register_error_handler(MyFunctionException, my_function_exception_handler)\n\n    @blue.route('/decorator')\n    def blue_deco_test():\n        raise MyDecoratorException()\n\n    @blue.route('/function')\n    def blue_func_test():\n        raise MyFunctionException()\n\n    app.register_blueprint(blue)\n\n    assert client.get('/decorator').data == b'boom'\n    assert client.get('/function').data == b'bam',type='function_definition'\nline_star:47,line_end:78|char_star:0,char_end:49"->"test_blueprint_specific_user_error_handling,type='identifier'\nline_star:47,line_end:47|char_star:4,char_end:47";
"(app, client),type='parameters'\nline_star:47,line_end:47|char_star:47,char_end:60"[shape="box",fillcolor="white",style=filled];
"def test_blueprint_specific_user_error_handling(app, client):\n    class MyDecoratorException(Exception):\n        pass\n\n    class MyFunctionException(Exception):\n        pass\n\n    blue = flask.Blueprint('blue', __name__)\n\n    @blue.errorhandler(MyDecoratorException)\n    def my_decorator_exception_handler(e):\n        assert isinstance(e, MyDecoratorException)\n        return 'boom'\n\n    def my_function_exception_handler(e):\n        assert isinstance(e, MyFunctionException)\n        return 'bam'\n\n    blue.register_error_handler(MyFunctionException, my_function_exception_handler)\n\n    @blue.route('/decorator')\n    def blue_deco_test():\n        raise MyDecoratorException()\n\n    @blue.route('/function')\n    def blue_func_test():\n        raise MyFunctionException()\n\n    app.register_blueprint(blue)\n\n    assert client.get('/decorator').data == b'boom'\n    assert client.get('/function').data == b'bam',type='function_definition'\nline_star:47,line_end:78|char_star:0,char_end:49"->"(app, client),type='parameters'\nline_star:47,line_end:47|char_star:47,char_end:60";
"app,type='identifier'\nline_star:47,line_end:47|char_star:48,char_end:51"[shape="point",fillcolor="#121013",style=filled];
"(app, client),type='parameters'\nline_star:47,line_end:47|char_star:47,char_end:60"->"app,type='identifier'\nline_star:47,line_end:47|char_star:48,char_end:51";
"client,type='identifier'\nline_star:47,line_end:47|char_star:53,char_end:59"[shape="point",fillcolor="#121013",style=filled];
"(app, client),type='parameters'\nline_star:47,line_end:47|char_star:47,char_end:60"->"client,type='identifier'\nline_star:47,line_end:47|char_star:53,char_end:59";
"type='INFORMATION BLOCK'\nline_star:48,line_end:78|char_star:4,char_end:49"[shape="point",fillcolor="#121013",style=filled];
"def test_blueprint_specific_user_error_handling(app, client):\n    class MyDecoratorException(Exception):\n        pass\n\n    class MyFunctionException(Exception):\n        pass\n\n    blue = flask.Blueprint('blue', __name__)\n\n    @blue.errorhandler(MyDecoratorException)\n    def my_decorator_exception_handler(e):\n        assert isinstance(e, MyDecoratorException)\n        return 'boom'\n\n    def my_function_exception_handler(e):\n        assert isinstance(e, MyFunctionException)\n        return 'bam'\n\n    blue.register_error_handler(MyFunctionException, my_function_exception_handler)\n\n    @blue.route('/decorator')\n    def blue_deco_test():\n        raise MyDecoratorException()\n\n    @blue.route('/function')\n    def blue_func_test():\n        raise MyFunctionException()\n\n    app.register_blueprint(blue)\n\n    assert client.get('/decorator').data == b'boom'\n    assert client.get('/function').data == b'bam',type='function_definition'\nline_star:47,line_end:78|char_star:0,char_end:49"->"type='INFORMATION BLOCK'\nline_star:48,line_end:78|char_star:4,char_end:49";
"class MyDecoratorException(Exception):\n        pass,type='class_definition'\nline_star:48,line_end:49|char_star:4,char_end:12"[shape="box",fillcolor="#ffdf91",style=filled];
"type='INFORMATION BLOCK'\nline_star:48,line_end:78|char_star:4,char_end:49"->"class MyDecoratorException(Exception):\n        pass,type='class_definition'\nline_star:48,line_end:49|char_star:4,char_end:12";
"MyDecoratorException,type='identifier'\nline_star:48,line_end:48|char_star:10,char_end:30"[shape="point",fillcolor="#121013",style=filled];
"class MyDecoratorException(Exception):\n        pass,type='class_definition'\nline_star:48,line_end:49|char_star:4,char_end:12"->"MyDecoratorException,type='identifier'\nline_star:48,line_end:48|char_star:10,char_end:30";
"(Exception),type='argument_list'\nline_star:48,line_end:48|char_star:30,char_end:41"[shape="box",fillcolor="white",style=filled];
"class MyDecoratorException(Exception):\n        pass,type='class_definition'\nline_star:48,line_end:49|char_star:4,char_end:12"->"(Exception),type='argument_list'\nline_star:48,line_end:48|char_star:30,char_end:41";
"Exception,type='identifier'\nline_star:48,line_end:48|char_star:31,char_end:40"[shape="point",fillcolor="#121013",style=filled];
"(Exception),type='argument_list'\nline_star:48,line_end:48|char_star:30,char_end:41"->"Exception,type='identifier'\nline_star:48,line_end:48|char_star:31,char_end:40";
"type='INFORMATION BLOCK'\nline_star:49,line_end:49|char_star:8,char_end:12"[shape="point",fillcolor="#121013",style=filled];
"class MyDecoratorException(Exception):\n        pass,type='class_definition'\nline_star:48,line_end:49|char_star:4,char_end:12"->"type='INFORMATION BLOCK'\nline_star:49,line_end:49|char_star:8,char_end:12";
"pass,type='pass_statement'\nline_star:49,line_end:49|char_star:8,char_end:12"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:49,line_end:49|char_star:8,char_end:12"->"pass,type='pass_statement'\nline_star:49,line_end:49|char_star:8,char_end:12";
"pass,type='pass'\nline_star:49,line_end:49|char_star:8,char_end:12"[shape="box",fillcolor="white",style=filled];
"pass,type='pass_statement'\nline_star:49,line_end:49|char_star:8,char_end:12"->"pass,type='pass'\nline_star:49,line_end:49|char_star:8,char_end:12";
"class MyFunctionException(Exception):\n        pass,type='class_definition'\nline_star:51,line_end:52|char_star:4,char_end:12"[shape="box",fillcolor="#ffdf91",style=filled];
"type='INFORMATION BLOCK'\nline_star:48,line_end:78|char_star:4,char_end:49"->"class MyFunctionException(Exception):\n        pass,type='class_definition'\nline_star:51,line_end:52|char_star:4,char_end:12";
"MyFunctionException,type='identifier'\nline_star:51,line_end:51|char_star:10,char_end:29"[shape="point",fillcolor="#121013",style=filled];
"class MyFunctionException(Exception):\n        pass,type='class_definition'\nline_star:51,line_end:52|char_star:4,char_end:12"->"MyFunctionException,type='identifier'\nline_star:51,line_end:51|char_star:10,char_end:29";
"(Exception),type='argument_list'\nline_star:51,line_end:51|char_star:29,char_end:40"[shape="box",fillcolor="white",style=filled];
"class MyFunctionException(Exception):\n        pass,type='class_definition'\nline_star:51,line_end:52|char_star:4,char_end:12"->"(Exception),type='argument_list'\nline_star:51,line_end:51|char_star:29,char_end:40";
"Exception,type='identifier'\nline_star:51,line_end:51|char_star:30,char_end:39"[shape="point",fillcolor="#121013",style=filled];
"(Exception),type='argument_list'\nline_star:51,line_end:51|char_star:29,char_end:40"->"Exception,type='identifier'\nline_star:51,line_end:51|char_star:30,char_end:39";
"type='INFORMATION BLOCK'\nline_star:52,line_end:52|char_star:8,char_end:12"[shape="point",fillcolor="#121013",style=filled];
"class MyFunctionException(Exception):\n        pass,type='class_definition'\nline_star:51,line_end:52|char_star:4,char_end:12"->"type='INFORMATION BLOCK'\nline_star:52,line_end:52|char_star:8,char_end:12";
"pass,type='pass_statement'\nline_star:52,line_end:52|char_star:8,char_end:12"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:52,line_end:52|char_star:8,char_end:12"->"pass,type='pass_statement'\nline_star:52,line_end:52|char_star:8,char_end:12";
"pass,type='pass'\nline_star:52,line_end:52|char_star:8,char_end:12"[shape="box",fillcolor="white",style=filled];
"pass,type='pass_statement'\nline_star:52,line_end:52|char_star:8,char_end:12"->"pass,type='pass'\nline_star:52,line_end:52|char_star:8,char_end:12";
"@blue.errorhandler(MyDecoratorException)\n    def my_decorator_exception_handler(e):\n        assert isinstance(e, MyDecoratorException)\n        return 'boom',type='decorated_definition'\nline_star:56,line_end:59|char_star:4,char_end:21"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:48,line_end:78|char_star:4,char_end:49"->"@blue.errorhandler(MyDecoratorException)\n    def my_decorator_exception_handler(e):\n        assert isinstance(e, MyDecoratorException)\n        return 'boom',type='decorated_definition'\nline_star:56,line_end:59|char_star:4,char_end:21";
"@blue.errorhandler(MyDecoratorException),type='decorator'\nline_star:56,line_end:56|char_star:4,char_end:44"[shape="box",fillcolor="white",style=filled];
"@blue.errorhandler(MyDecoratorException)\n    def my_decorator_exception_handler(e):\n        assert isinstance(e, MyDecoratorException)\n        return 'boom',type='decorated_definition'\nline_star:56,line_end:59|char_star:4,char_end:21"->"@blue.errorhandler(MyDecoratorException),type='decorator'\nline_star:56,line_end:56|char_star:4,char_end:44";
"def my_decorator_exception_handler(e):\n        assert isinstance(e, MyDecoratorException)\n        return 'boom',type='function_definition'\nline_star:57,line_end:59|char_star:4,char_end:21"[shape="box",fillcolor="#cee6b4",style=filled];
"@blue.errorhandler(MyDecoratorException)\n    def my_decorator_exception_handler(e):\n        assert isinstance(e, MyDecoratorException)\n        return 'boom',type='decorated_definition'\nline_star:56,line_end:59|char_star:4,char_end:21"->"def my_decorator_exception_handler(e):\n        assert isinstance(e, MyDecoratorException)\n        return 'boom',type='function_definition'\nline_star:57,line_end:59|char_star:4,char_end:21";
"my_decorator_exception_handler,type='identifier'\nline_star:57,line_end:57|char_star:8,char_end:38"[shape="point",fillcolor="#121013",style=filled];
"def my_decorator_exception_handler(e):\n        assert isinstance(e, MyDecoratorException)\n        return 'boom',type='function_definition'\nline_star:57,line_end:59|char_star:4,char_end:21"->"my_decorator_exception_handler,type='identifier'\nline_star:57,line_end:57|char_star:8,char_end:38";
"(e),type='parameters'\nline_star:57,line_end:57|char_star:38,char_end:41"[shape="box",fillcolor="white",style=filled];
"def my_decorator_exception_handler(e):\n        assert isinstance(e, MyDecoratorException)\n        return 'boom',type='function_definition'\nline_star:57,line_end:59|char_star:4,char_end:21"->"(e),type='parameters'\nline_star:57,line_end:57|char_star:38,char_end:41";
"e,type='identifier'\nline_star:57,line_end:57|char_star:39,char_end:40"[shape="point",fillcolor="#121013",style=filled];
"(e),type='parameters'\nline_star:57,line_end:57|char_star:38,char_end:41"->"e,type='identifier'\nline_star:57,line_end:57|char_star:39,char_end:40";
"type='INFORMATION BLOCK'\nline_star:58,line_end:59|char_star:8,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"def my_decorator_exception_handler(e):\n        assert isinstance(e, MyDecoratorException)\n        return 'boom',type='function_definition'\nline_star:57,line_end:59|char_star:4,char_end:21"->"type='INFORMATION BLOCK'\nline_star:58,line_end:59|char_star:8,char_end:21";
"assert isinstance(e, MyDecoratorException),type='assert_statement'\nline_star:58,line_end:58|char_star:8,char_end:50"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:58,line_end:59|char_star:8,char_end:21"->"assert isinstance(e, MyDecoratorException),type='assert_statement'\nline_star:58,line_end:58|char_star:8,char_end:50";
"isinstance(e, MyDecoratorException),type='call'\nline_star:58,line_end:58|char_star:15,char_end:50"[shape="box",fillcolor="white",style=filled];
"assert isinstance(e, MyDecoratorException),type='assert_statement'\nline_star:58,line_end:58|char_star:8,char_end:50"->"isinstance(e, MyDecoratorException),type='call'\nline_star:58,line_end:58|char_star:15,char_end:50";
"isinstance,type='identifier'\nline_star:58,line_end:58|char_star:15,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"isinstance(e, MyDecoratorException),type='call'\nline_star:58,line_end:58|char_star:15,char_end:50"->"isinstance,type='identifier'\nline_star:58,line_end:58|char_star:15,char_end:25";
"(e, MyDecoratorException),type='argument_list'\nline_star:58,line_end:58|char_star:25,char_end:50"[shape="box",fillcolor="white",style=filled];
"isinstance(e, MyDecoratorException),type='call'\nline_star:58,line_end:58|char_star:15,char_end:50"->"(e, MyDecoratorException),type='argument_list'\nline_star:58,line_end:58|char_star:25,char_end:50";
"e,type='identifier'\nline_star:58,line_end:58|char_star:26,char_end:27"[shape="point",fillcolor="#121013",style=filled];
"(e, MyDecoratorException),type='argument_list'\nline_star:58,line_end:58|char_star:25,char_end:50"->"e,type='identifier'\nline_star:58,line_end:58|char_star:26,char_end:27";
"MyDecoratorException,type='identifier'\nline_star:58,line_end:58|char_star:29,char_end:49"[shape="point",fillcolor="#121013",style=filled];
"(e, MyDecoratorException),type='argument_list'\nline_star:58,line_end:58|char_star:25,char_end:50"->"MyDecoratorException,type='identifier'\nline_star:58,line_end:58|char_star:29,char_end:49";
"return 'boom',type='return_statement'\nline_star:59,line_end:59|char_star:8,char_end:21"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:58,line_end:59|char_star:8,char_end:21"->"return 'boom',type='return_statement'\nline_star:59,line_end:59|char_star:8,char_end:21";
"def my_function_exception_handler(e):\n        assert isinstance(e, MyFunctionException)\n        return 'bam',type='function_definition'\nline_star:61,line_end:63|char_star:4,char_end:20"[shape="box",fillcolor="#cee6b4",style=filled];
"type='INFORMATION BLOCK'\nline_star:48,line_end:78|char_star:4,char_end:49"->"def my_function_exception_handler(e):\n        assert isinstance(e, MyFunctionException)\n        return 'bam',type='function_definition'\nline_star:61,line_end:63|char_star:4,char_end:20";
"my_function_exception_handler,type='identifier'\nline_star:61,line_end:61|char_star:8,char_end:37"[shape="point",fillcolor="#121013",style=filled];
"def my_function_exception_handler(e):\n        assert isinstance(e, MyFunctionException)\n        return 'bam',type='function_definition'\nline_star:61,line_end:63|char_star:4,char_end:20"->"my_function_exception_handler,type='identifier'\nline_star:61,line_end:61|char_star:8,char_end:37";
"(e),type='parameters'\nline_star:61,line_end:61|char_star:37,char_end:40"[shape="box",fillcolor="white",style=filled];
"def my_function_exception_handler(e):\n        assert isinstance(e, MyFunctionException)\n        return 'bam',type='function_definition'\nline_star:61,line_end:63|char_star:4,char_end:20"->"(e),type='parameters'\nline_star:61,line_end:61|char_star:37,char_end:40";
"e,type='identifier'\nline_star:61,line_end:61|char_star:38,char_end:39"[shape="point",fillcolor="#121013",style=filled];
"(e),type='parameters'\nline_star:61,line_end:61|char_star:37,char_end:40"->"e,type='identifier'\nline_star:61,line_end:61|char_star:38,char_end:39";
"type='INFORMATION BLOCK'\nline_star:62,line_end:63|char_star:8,char_end:20"[shape="point",fillcolor="#121013",style=filled];
"def my_function_exception_handler(e):\n        assert isinstance(e, MyFunctionException)\n        return 'bam',type='function_definition'\nline_star:61,line_end:63|char_star:4,char_end:20"->"type='INFORMATION BLOCK'\nline_star:62,line_end:63|char_star:8,char_end:20";
"assert isinstance(e, MyFunctionException),type='assert_statement'\nline_star:62,line_end:62|char_star:8,char_end:49"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:62,line_end:63|char_star:8,char_end:20"->"assert isinstance(e, MyFunctionException),type='assert_statement'\nline_star:62,line_end:62|char_star:8,char_end:49";
"isinstance(e, MyFunctionException),type='call'\nline_star:62,line_end:62|char_star:15,char_end:49"[shape="box",fillcolor="white",style=filled];
"assert isinstance(e, MyFunctionException),type='assert_statement'\nline_star:62,line_end:62|char_star:8,char_end:49"->"isinstance(e, MyFunctionException),type='call'\nline_star:62,line_end:62|char_star:15,char_end:49";
"isinstance,type='identifier'\nline_star:62,line_end:62|char_star:15,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"isinstance(e, MyFunctionException),type='call'\nline_star:62,line_end:62|char_star:15,char_end:49"->"isinstance,type='identifier'\nline_star:62,line_end:62|char_star:15,char_end:25";
"(e, MyFunctionException),type='argument_list'\nline_star:62,line_end:62|char_star:25,char_end:49"[shape="box",fillcolor="white",style=filled];
"isinstance(e, MyFunctionException),type='call'\nline_star:62,line_end:62|char_star:15,char_end:49"->"(e, MyFunctionException),type='argument_list'\nline_star:62,line_end:62|char_star:25,char_end:49";
"e,type='identifier'\nline_star:62,line_end:62|char_star:26,char_end:27"[shape="point",fillcolor="#121013",style=filled];
"(e, MyFunctionException),type='argument_list'\nline_star:62,line_end:62|char_star:25,char_end:49"->"e,type='identifier'\nline_star:62,line_end:62|char_star:26,char_end:27";
"MyFunctionException,type='identifier'\nline_star:62,line_end:62|char_star:29,char_end:48"[shape="point",fillcolor="#121013",style=filled];
"(e, MyFunctionException),type='argument_list'\nline_star:62,line_end:62|char_star:25,char_end:49"->"MyFunctionException,type='identifier'\nline_star:62,line_end:62|char_star:29,char_end:48";
"return 'bam',type='return_statement'\nline_star:63,line_end:63|char_star:8,char_end:20"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:62,line_end:63|char_star:8,char_end:20"->"return 'bam',type='return_statement'\nline_star:63,line_end:63|char_star:8,char_end:20";
"@blue.route('/decorator')\n    def blue_deco_test():\n        raise MyDecoratorException(),type='decorated_definition'\nline_star:67,line_end:69|char_star:4,char_end:36"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:48,line_end:78|char_star:4,char_end:49"->"@blue.route('/decorator')\n    def blue_deco_test():\n        raise MyDecoratorException(),type='decorated_definition'\nline_star:67,line_end:69|char_star:4,char_end:36";
"@blue.route('/decorator'),type='decorator'\nline_star:67,line_end:67|char_star:4,char_end:29"[shape="box",fillcolor="white",style=filled];
"@blue.route('/decorator')\n    def blue_deco_test():\n        raise MyDecoratorException(),type='decorated_definition'\nline_star:67,line_end:69|char_star:4,char_end:36"->"@blue.route('/decorator'),type='decorator'\nline_star:67,line_end:67|char_star:4,char_end:29";
"def blue_deco_test():\n        raise MyDecoratorException(),type='function_definition'\nline_star:68,line_end:69|char_star:4,char_end:36"[shape="box",fillcolor="#cee6b4",style=filled];
"@blue.route('/decorator')\n    def blue_deco_test():\n        raise MyDecoratorException(),type='decorated_definition'\nline_star:67,line_end:69|char_star:4,char_end:36"->"def blue_deco_test():\n        raise MyDecoratorException(),type='function_definition'\nline_star:68,line_end:69|char_star:4,char_end:36";
"blue_deco_test,type='identifier'\nline_star:68,line_end:68|char_star:8,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"def blue_deco_test():\n        raise MyDecoratorException(),type='function_definition'\nline_star:68,line_end:69|char_star:4,char_end:36"->"blue_deco_test,type='identifier'\nline_star:68,line_end:68|char_star:8,char_end:22";
"type='INFORMATION BLOCK'\nline_star:69,line_end:69|char_star:8,char_end:36"[shape="point",fillcolor="#121013",style=filled];
"def blue_deco_test():\n        raise MyDecoratorException(),type='function_definition'\nline_star:68,line_end:69|char_star:4,char_end:36"->"type='INFORMATION BLOCK'\nline_star:69,line_end:69|char_star:8,char_end:36";
"raise MyDecoratorException(),type='raise_statement'\nline_star:69,line_end:69|char_star:8,char_end:36"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:69,line_end:69|char_star:8,char_end:36"->"raise MyDecoratorException(),type='raise_statement'\nline_star:69,line_end:69|char_star:8,char_end:36";
"raise,type='raise'\nline_star:69,line_end:69|char_star:8,char_end:13"[shape="box",fillcolor="white",style=filled];
"raise MyDecoratorException(),type='raise_statement'\nline_star:69,line_end:69|char_star:8,char_end:36"->"raise,type='raise'\nline_star:69,line_end:69|char_star:8,char_end:13";
"MyDecoratorException(),type='call'\nline_star:69,line_end:69|char_star:14,char_end:36"[shape="box",fillcolor="white",style=filled];
"raise MyDecoratorException(),type='raise_statement'\nline_star:69,line_end:69|char_star:8,char_end:36"->"MyDecoratorException(),type='call'\nline_star:69,line_end:69|char_star:14,char_end:36";
"MyDecoratorException,type='identifier'\nline_star:69,line_end:69|char_star:14,char_end:34"[shape="point",fillcolor="#121013",style=filled];
"MyDecoratorException(),type='call'\nline_star:69,line_end:69|char_star:14,char_end:36"->"MyDecoratorException,type='identifier'\nline_star:69,line_end:69|char_star:14,char_end:34";
"@blue.route('/function')\n    def blue_func_test():\n        raise MyFunctionException(),type='decorated_definition'\nline_star:71,line_end:73|char_star:4,char_end:35"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:48,line_end:78|char_star:4,char_end:49"->"@blue.route('/function')\n    def blue_func_test():\n        raise MyFunctionException(),type='decorated_definition'\nline_star:71,line_end:73|char_star:4,char_end:35";
"@blue.route('/function'),type='decorator'\nline_star:71,line_end:71|char_star:4,char_end:28"[shape="box",fillcolor="white",style=filled];
"@blue.route('/function')\n    def blue_func_test():\n        raise MyFunctionException(),type='decorated_definition'\nline_star:71,line_end:73|char_star:4,char_end:35"->"@blue.route('/function'),type='decorator'\nline_star:71,line_end:71|char_star:4,char_end:28";
"def blue_func_test():\n        raise MyFunctionException(),type='function_definition'\nline_star:72,line_end:73|char_star:4,char_end:35"[shape="box",fillcolor="#cee6b4",style=filled];
"@blue.route('/function')\n    def blue_func_test():\n        raise MyFunctionException(),type='decorated_definition'\nline_star:71,line_end:73|char_star:4,char_end:35"->"def blue_func_test():\n        raise MyFunctionException(),type='function_definition'\nline_star:72,line_end:73|char_star:4,char_end:35";
"blue_func_test,type='identifier'\nline_star:72,line_end:72|char_star:8,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"def blue_func_test():\n        raise MyFunctionException(),type='function_definition'\nline_star:72,line_end:73|char_star:4,char_end:35"->"blue_func_test,type='identifier'\nline_star:72,line_end:72|char_star:8,char_end:22";
"type='INFORMATION BLOCK'\nline_star:73,line_end:73|char_star:8,char_end:35"[shape="point",fillcolor="#121013",style=filled];
"def blue_func_test():\n        raise MyFunctionException(),type='function_definition'\nline_star:72,line_end:73|char_star:4,char_end:35"->"type='INFORMATION BLOCK'\nline_star:73,line_end:73|char_star:8,char_end:35";
"raise MyFunctionException(),type='raise_statement'\nline_star:73,line_end:73|char_star:8,char_end:35"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:73,line_end:73|char_star:8,char_end:35"->"raise MyFunctionException(),type='raise_statement'\nline_star:73,line_end:73|char_star:8,char_end:35";
"raise,type='raise'\nline_star:73,line_end:73|char_star:8,char_end:13"[shape="box",fillcolor="white",style=filled];
"raise MyFunctionException(),type='raise_statement'\nline_star:73,line_end:73|char_star:8,char_end:35"->"raise,type='raise'\nline_star:73,line_end:73|char_star:8,char_end:13";
"MyFunctionException(),type='call'\nline_star:73,line_end:73|char_star:14,char_end:35"[shape="box",fillcolor="white",style=filled];
"raise MyFunctionException(),type='raise_statement'\nline_star:73,line_end:73|char_star:8,char_end:35"->"MyFunctionException(),type='call'\nline_star:73,line_end:73|char_star:14,char_end:35";
"MyFunctionException,type='identifier'\nline_star:73,line_end:73|char_star:14,char_end:33"[shape="point",fillcolor="#121013",style=filled];
"MyFunctionException(),type='call'\nline_star:73,line_end:73|char_star:14,char_end:35"->"MyFunctionException,type='identifier'\nline_star:73,line_end:73|char_star:14,char_end:33";
"assert client.get('/decorator').data == b'boom',type='assert_statement'\nline_star:77,line_end:77|char_star:4,char_end:51"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:48,line_end:78|char_star:4,char_end:49"->"assert client.get('/decorator').data == b'boom',type='assert_statement'\nline_star:77,line_end:77|char_star:4,char_end:51";
"client.get('/decorator').data == b'boom',type='comparison_operator'\nline_star:77,line_end:77|char_star:11,char_end:51"[shape="box",fillcolor="white",style=filled];
"assert client.get('/decorator').data == b'boom',type='assert_statement'\nline_star:77,line_end:77|char_star:4,char_end:51"->"client.get('/decorator').data == b'boom',type='comparison_operator'\nline_star:77,line_end:77|char_star:11,char_end:51";
"client.get('/decorator').data,type='attribute'\nline_star:77,line_end:77|char_star:11,char_end:40"[shape="box",fillcolor="white",style=filled];
"client.get('/decorator').data == b'boom',type='comparison_operator'\nline_star:77,line_end:77|char_star:11,char_end:51"->"client.get('/decorator').data,type='attribute'\nline_star:77,line_end:77|char_star:11,char_end:40";
"client.get('/decorator'),type='call'\nline_star:77,line_end:77|char_star:11,char_end:35"[shape="box",fillcolor="white",style=filled];
"client.get('/decorator').data,type='attribute'\nline_star:77,line_end:77|char_star:11,char_end:40"->"client.get('/decorator'),type='call'\nline_star:77,line_end:77|char_star:11,char_end:35";
"client.get,type='attribute'\nline_star:77,line_end:77|char_star:11,char_end:21"[shape="box",fillcolor="white",style=filled];
"client.get('/decorator'),type='call'\nline_star:77,line_end:77|char_star:11,char_end:35"->"client.get,type='attribute'\nline_star:77,line_end:77|char_star:11,char_end:21";
"client,type='identifier'\nline_star:77,line_end:77|char_star:11,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"client.get,type='attribute'\nline_star:77,line_end:77|char_star:11,char_end:21"->"client,type='identifier'\nline_star:77,line_end:77|char_star:11,char_end:17";
"get,type='identifier'\nline_star:77,line_end:77|char_star:18,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"client.get,type='attribute'\nline_star:77,line_end:77|char_star:11,char_end:21"->"get,type='identifier'\nline_star:77,line_end:77|char_star:18,char_end:21";
"('/decorator'),type='argument_list'\nline_star:77,line_end:77|char_star:21,char_end:35"[shape="box",fillcolor="white",style=filled];
"client.get('/decorator'),type='call'\nline_star:77,line_end:77|char_star:11,char_end:35"->"('/decorator'),type='argument_list'\nline_star:77,line_end:77|char_star:21,char_end:35";
"data,type='identifier'\nline_star:77,line_end:77|char_star:36,char_end:40"[shape="point",fillcolor="#121013",style=filled];
"client.get('/decorator').data,type='attribute'\nline_star:77,line_end:77|char_star:11,char_end:40"->"data,type='identifier'\nline_star:77,line_end:77|char_star:36,char_end:40";
"assert client.get('/function').data == b'bam',type='assert_statement'\nline_star:78,line_end:78|char_star:4,char_end:49"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:48,line_end:78|char_star:4,char_end:49"->"assert client.get('/function').data == b'bam',type='assert_statement'\nline_star:78,line_end:78|char_star:4,char_end:49";
"client.get('/function').data == b'bam',type='comparison_operator'\nline_star:78,line_end:78|char_star:11,char_end:49"[shape="box",fillcolor="white",style=filled];
"assert client.get('/function').data == b'bam',type='assert_statement'\nline_star:78,line_end:78|char_star:4,char_end:49"->"client.get('/function').data == b'bam',type='comparison_operator'\nline_star:78,line_end:78|char_star:11,char_end:49";
"client.get('/function').data,type='attribute'\nline_star:78,line_end:78|char_star:11,char_end:39"[shape="box",fillcolor="white",style=filled];
"client.get('/function').data == b'bam',type='comparison_operator'\nline_star:78,line_end:78|char_star:11,char_end:49"->"client.get('/function').data,type='attribute'\nline_star:78,line_end:78|char_star:11,char_end:39";
"client.get('/function'),type='call'\nline_star:78,line_end:78|char_star:11,char_end:34"[shape="box",fillcolor="white",style=filled];
"client.get('/function').data,type='attribute'\nline_star:78,line_end:78|char_star:11,char_end:39"->"client.get('/function'),type='call'\nline_star:78,line_end:78|char_star:11,char_end:34";
"client.get,type='attribute'\nline_star:78,line_end:78|char_star:11,char_end:21"[shape="box",fillcolor="white",style=filled];
"client.get('/function'),type='call'\nline_star:78,line_end:78|char_star:11,char_end:34"->"client.get,type='attribute'\nline_star:78,line_end:78|char_star:11,char_end:21";
"client,type='identifier'\nline_star:78,line_end:78|char_star:11,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"client.get,type='attribute'\nline_star:78,line_end:78|char_star:11,char_end:21"->"client,type='identifier'\nline_star:78,line_end:78|char_star:11,char_end:17";
"get,type='identifier'\nline_star:78,line_end:78|char_star:18,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"client.get,type='attribute'\nline_star:78,line_end:78|char_star:11,char_end:21"->"get,type='identifier'\nline_star:78,line_end:78|char_star:18,char_end:21";
"('/function'),type='argument_list'\nline_star:78,line_end:78|char_star:21,char_end:34"[shape="box",fillcolor="white",style=filled];
"client.get('/function'),type='call'\nline_star:78,line_end:78|char_star:11,char_end:34"->"('/function'),type='argument_list'\nline_star:78,line_end:78|char_star:21,char_end:34";
"data,type='identifier'\nline_star:78,line_end:78|char_star:35,char_end:39"[shape="point",fillcolor="#121013",style=filled];
"client.get('/function').data,type='attribute'\nline_star:78,line_end:78|char_star:11,char_end:39"->"data,type='identifier'\nline_star:78,line_end:78|char_star:35,char_end:39";
"def test_blueprint_app_error_handling(app, client):\n    errors = flask.Blueprint('errors', __name__)\n\n    @errors.app_errorhandler(403)\n    def forbidden_handler(e):\n        return 'you shall not pass', 403\n\n    @app.route('/forbidden')\n    def app_forbidden():\n        flask.abort(403)\n\n    forbidden_bp = flask.Blueprint('forbidden_bp', __name__)\n\n    @forbidden_bp.route('/nope')\n    def bp_forbidden():\n        flask.abort(403)\n\n    app.register_blueprint(errors)\n    app.register_blueprint(forbidden_bp)\n\n    assert client.get('/forbidden').data == b'you shall not pass'\n    assert client.get('/nope').data == b'you shall not pass',type='function_definition'\nline_star:81,line_end:102|char_star:0,char_end:60"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_blueprint_app_error_handling(app, client):\n    errors = flask.Blueprint('errors', __name__)\n\n    @errors.app_errorhandler(403)\n    def forbidden_handler(e):\n        return 'you shall not pass', 403\n\n    @app.route('/forbidden')\n    def app_forbidden():\n        flask.abort(403)\n\n    forbidden_bp = flask.Blueprint('forbidden_bp', __name__)\n\n    @forbidden_bp.route('/nope')\n    def bp_forbidden():\n        flask.abort(403)\n\n    app.register_blueprint(errors)\n    app.register_blueprint(forbidden_bp)\n\n    assert client.get('/forbidden').data == b'you shall not pass'\n    assert client.get('/nope').data == b'you shall not pass',type='function_definition'\nline_star:81,line_end:102|char_star:0,char_end:60";
"test_blueprint_app_error_handling,type='identifier'\nline_star:81,line_end:81|char_star:4,char_end:37"[shape="point",fillcolor="#121013",style=filled];
"def test_blueprint_app_error_handling(app, client):\n    errors = flask.Blueprint('errors', __name__)\n\n    @errors.app_errorhandler(403)\n    def forbidden_handler(e):\n        return 'you shall not pass', 403\n\n    @app.route('/forbidden')\n    def app_forbidden():\n        flask.abort(403)\n\n    forbidden_bp = flask.Blueprint('forbidden_bp', __name__)\n\n    @forbidden_bp.route('/nope')\n    def bp_forbidden():\n        flask.abort(403)\n\n    app.register_blueprint(errors)\n    app.register_blueprint(forbidden_bp)\n\n    assert client.get('/forbidden').data == b'you shall not pass'\n    assert client.get('/nope').data == b'you shall not pass',type='function_definition'\nline_star:81,line_end:102|char_star:0,char_end:60"->"test_blueprint_app_error_handling,type='identifier'\nline_star:81,line_end:81|char_star:4,char_end:37";
"(app, client),type='parameters'\nline_star:81,line_end:81|char_star:37,char_end:50"[shape="box",fillcolor="white",style=filled];
"def test_blueprint_app_error_handling(app, client):\n    errors = flask.Blueprint('errors', __name__)\n\n    @errors.app_errorhandler(403)\n    def forbidden_handler(e):\n        return 'you shall not pass', 403\n\n    @app.route('/forbidden')\n    def app_forbidden():\n        flask.abort(403)\n\n    forbidden_bp = flask.Blueprint('forbidden_bp', __name__)\n\n    @forbidden_bp.route('/nope')\n    def bp_forbidden():\n        flask.abort(403)\n\n    app.register_blueprint(errors)\n    app.register_blueprint(forbidden_bp)\n\n    assert client.get('/forbidden').data == b'you shall not pass'\n    assert client.get('/nope').data == b'you shall not pass',type='function_definition'\nline_star:81,line_end:102|char_star:0,char_end:60"->"(app, client),type='parameters'\nline_star:81,line_end:81|char_star:37,char_end:50";
"app,type='identifier'\nline_star:81,line_end:81|char_star:38,char_end:41"[shape="point",fillcolor="#121013",style=filled];
"(app, client),type='parameters'\nline_star:81,line_end:81|char_star:37,char_end:50"->"app,type='identifier'\nline_star:81,line_end:81|char_star:38,char_end:41";
"client,type='identifier'\nline_star:81,line_end:81|char_star:43,char_end:49"[shape="point",fillcolor="#121013",style=filled];
"(app, client),type='parameters'\nline_star:81,line_end:81|char_star:37,char_end:50"->"client,type='identifier'\nline_star:81,line_end:81|char_star:43,char_end:49";
"type='INFORMATION BLOCK'\nline_star:82,line_end:102|char_star:4,char_end:60"[shape="point",fillcolor="#121013",style=filled];
"def test_blueprint_app_error_handling(app, client):\n    errors = flask.Blueprint('errors', __name__)\n\n    @errors.app_errorhandler(403)\n    def forbidden_handler(e):\n        return 'you shall not pass', 403\n\n    @app.route('/forbidden')\n    def app_forbidden():\n        flask.abort(403)\n\n    forbidden_bp = flask.Blueprint('forbidden_bp', __name__)\n\n    @forbidden_bp.route('/nope')\n    def bp_forbidden():\n        flask.abort(403)\n\n    app.register_blueprint(errors)\n    app.register_blueprint(forbidden_bp)\n\n    assert client.get('/forbidden').data == b'you shall not pass'\n    assert client.get('/nope').data == b'you shall not pass',type='function_definition'\nline_star:81,line_end:102|char_star:0,char_end:60"->"type='INFORMATION BLOCK'\nline_star:82,line_end:102|char_star:4,char_end:60";
"@errors.app_errorhandler(403)\n    def forbidden_handler(e):\n        return 'you shall not pass', 403,type='decorated_definition'\nline_star:84,line_end:86|char_star:4,char_end:40"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:82,line_end:102|char_star:4,char_end:60"->"@errors.app_errorhandler(403)\n    def forbidden_handler(e):\n        return 'you shall not pass', 403,type='decorated_definition'\nline_star:84,line_end:86|char_star:4,char_end:40";
"@errors.app_errorhandler(403),type='decorator'\nline_star:84,line_end:84|char_star:4,char_end:33"[shape="box",fillcolor="white",style=filled];
"@errors.app_errorhandler(403)\n    def forbidden_handler(e):\n        return 'you shall not pass', 403,type='decorated_definition'\nline_star:84,line_end:86|char_star:4,char_end:40"->"@errors.app_errorhandler(403),type='decorator'\nline_star:84,line_end:84|char_star:4,char_end:33";
"def forbidden_handler(e):\n        return 'you shall not pass', 403,type='function_definition'\nline_star:85,line_end:86|char_star:4,char_end:40"[shape="box",fillcolor="#cee6b4",style=filled];
"@errors.app_errorhandler(403)\n    def forbidden_handler(e):\n        return 'you shall not pass', 403,type='decorated_definition'\nline_star:84,line_end:86|char_star:4,char_end:40"->"def forbidden_handler(e):\n        return 'you shall not pass', 403,type='function_definition'\nline_star:85,line_end:86|char_star:4,char_end:40";
"forbidden_handler,type='identifier'\nline_star:85,line_end:85|char_star:8,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"def forbidden_handler(e):\n        return 'you shall not pass', 403,type='function_definition'\nline_star:85,line_end:86|char_star:4,char_end:40"->"forbidden_handler,type='identifier'\nline_star:85,line_end:85|char_star:8,char_end:25";
"(e),type='parameters'\nline_star:85,line_end:85|char_star:25,char_end:28"[shape="box",fillcolor="white",style=filled];
"def forbidden_handler(e):\n        return 'you shall not pass', 403,type='function_definition'\nline_star:85,line_end:86|char_star:4,char_end:40"->"(e),type='parameters'\nline_star:85,line_end:85|char_star:25,char_end:28";
"e,type='identifier'\nline_star:85,line_end:85|char_star:26,char_end:27"[shape="point",fillcolor="#121013",style=filled];
"(e),type='parameters'\nline_star:85,line_end:85|char_star:25,char_end:28"->"e,type='identifier'\nline_star:85,line_end:85|char_star:26,char_end:27";
"type='INFORMATION BLOCK'\nline_star:86,line_end:86|char_star:8,char_end:40"[shape="point",fillcolor="#121013",style=filled];
"def forbidden_handler(e):\n        return 'you shall not pass', 403,type='function_definition'\nline_star:85,line_end:86|char_star:4,char_end:40"->"type='INFORMATION BLOCK'\nline_star:86,line_end:86|char_star:8,char_end:40";
"return 'you shall not pass', 403,type='return_statement'\nline_star:86,line_end:86|char_star:8,char_end:40"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:86,line_end:86|char_star:8,char_end:40"->"return 'you shall not pass', 403,type='return_statement'\nline_star:86,line_end:86|char_star:8,char_end:40";
"@app.route('/forbidden')\n    def app_forbidden():\n        flask.abort(403),type='decorated_definition'\nline_star:88,line_end:90|char_star:4,char_end:24"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:82,line_end:102|char_star:4,char_end:60"->"@app.route('/forbidden')\n    def app_forbidden():\n        flask.abort(403),type='decorated_definition'\nline_star:88,line_end:90|char_star:4,char_end:24";
"@app.route('/forbidden'),type='decorator'\nline_star:88,line_end:88|char_star:4,char_end:28"[shape="box",fillcolor="white",style=filled];
"@app.route('/forbidden')\n    def app_forbidden():\n        flask.abort(403),type='decorated_definition'\nline_star:88,line_end:90|char_star:4,char_end:24"->"@app.route('/forbidden'),type='decorator'\nline_star:88,line_end:88|char_star:4,char_end:28";
"def app_forbidden():\n        flask.abort(403),type='function_definition'\nline_star:89,line_end:90|char_star:4,char_end:24"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.route('/forbidden')\n    def app_forbidden():\n        flask.abort(403),type='decorated_definition'\nline_star:88,line_end:90|char_star:4,char_end:24"->"def app_forbidden():\n        flask.abort(403),type='function_definition'\nline_star:89,line_end:90|char_star:4,char_end:24";
"app_forbidden,type='identifier'\nline_star:89,line_end:89|char_star:8,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"def app_forbidden():\n        flask.abort(403),type='function_definition'\nline_star:89,line_end:90|char_star:4,char_end:24"->"app_forbidden,type='identifier'\nline_star:89,line_end:89|char_star:8,char_end:21";
"type='INFORMATION BLOCK'\nline_star:90,line_end:90|char_star:8,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"def app_forbidden():\n        flask.abort(403),type='function_definition'\nline_star:89,line_end:90|char_star:4,char_end:24"->"type='INFORMATION BLOCK'\nline_star:90,line_end:90|char_star:8,char_end:24";
"@forbidden_bp.route('/nope')\n    def bp_forbidden():\n        flask.abort(403),type='decorated_definition'\nline_star:94,line_end:96|char_star:4,char_end:24"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:82,line_end:102|char_star:4,char_end:60"->"@forbidden_bp.route('/nope')\n    def bp_forbidden():\n        flask.abort(403),type='decorated_definition'\nline_star:94,line_end:96|char_star:4,char_end:24";
"@forbidden_bp.route('/nope'),type='decorator'\nline_star:94,line_end:94|char_star:4,char_end:32"[shape="box",fillcolor="white",style=filled];
"@forbidden_bp.route('/nope')\n    def bp_forbidden():\n        flask.abort(403),type='decorated_definition'\nline_star:94,line_end:96|char_star:4,char_end:24"->"@forbidden_bp.route('/nope'),type='decorator'\nline_star:94,line_end:94|char_star:4,char_end:32";
"def bp_forbidden():\n        flask.abort(403),type='function_definition'\nline_star:95,line_end:96|char_star:4,char_end:24"[shape="box",fillcolor="#cee6b4",style=filled];
"@forbidden_bp.route('/nope')\n    def bp_forbidden():\n        flask.abort(403),type='decorated_definition'\nline_star:94,line_end:96|char_star:4,char_end:24"->"def bp_forbidden():\n        flask.abort(403),type='function_definition'\nline_star:95,line_end:96|char_star:4,char_end:24";
"bp_forbidden,type='identifier'\nline_star:95,line_end:95|char_star:8,char_end:20"[shape="point",fillcolor="#121013",style=filled];
"def bp_forbidden():\n        flask.abort(403),type='function_definition'\nline_star:95,line_end:96|char_star:4,char_end:24"->"bp_forbidden,type='identifier'\nline_star:95,line_end:95|char_star:8,char_end:20";
"type='INFORMATION BLOCK'\nline_star:96,line_end:96|char_star:8,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"def bp_forbidden():\n        flask.abort(403),type='function_definition'\nline_star:95,line_end:96|char_star:4,char_end:24"->"type='INFORMATION BLOCK'\nline_star:96,line_end:96|char_star:8,char_end:24";
"assert client.get('/forbidden').data == b'you shall not pass',type='assert_statement'\nline_star:101,line_end:101|char_star:4,char_end:65"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:82,line_end:102|char_star:4,char_end:60"->"assert client.get('/forbidden').data == b'you shall not pass',type='assert_statement'\nline_star:101,line_end:101|char_star:4,char_end:65";
"client.get('/forbidden').data == b'you shall not pass',type='comparison_operator'\nline_star:101,line_end:101|char_star:11,char_end:65"[shape="box",fillcolor="white",style=filled];
"assert client.get('/forbidden').data == b'you shall not pass',type='assert_statement'\nline_star:101,line_end:101|char_star:4,char_end:65"->"client.get('/forbidden').data == b'you shall not pass',type='comparison_operator'\nline_star:101,line_end:101|char_star:11,char_end:65";
"client.get('/forbidden').data,type='attribute'\nline_star:101,line_end:101|char_star:11,char_end:40"[shape="box",fillcolor="white",style=filled];
"client.get('/forbidden').data == b'you shall not pass',type='comparison_operator'\nline_star:101,line_end:101|char_star:11,char_end:65"->"client.get('/forbidden').data,type='attribute'\nline_star:101,line_end:101|char_star:11,char_end:40";
"client.get('/forbidden'),type='call'\nline_star:101,line_end:101|char_star:11,char_end:35"[shape="box",fillcolor="white",style=filled];
"client.get('/forbidden').data,type='attribute'\nline_star:101,line_end:101|char_star:11,char_end:40"->"client.get('/forbidden'),type='call'\nline_star:101,line_end:101|char_star:11,char_end:35";
"client.get,type='attribute'\nline_star:101,line_end:101|char_star:11,char_end:21"[shape="box",fillcolor="white",style=filled];
"client.get('/forbidden'),type='call'\nline_star:101,line_end:101|char_star:11,char_end:35"->"client.get,type='attribute'\nline_star:101,line_end:101|char_star:11,char_end:21";
"client,type='identifier'\nline_star:101,line_end:101|char_star:11,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"client.get,type='attribute'\nline_star:101,line_end:101|char_star:11,char_end:21"->"client,type='identifier'\nline_star:101,line_end:101|char_star:11,char_end:17";
"get,type='identifier'\nline_star:101,line_end:101|char_star:18,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"client.get,type='attribute'\nline_star:101,line_end:101|char_star:11,char_end:21"->"get,type='identifier'\nline_star:101,line_end:101|char_star:18,char_end:21";
"('/forbidden'),type='argument_list'\nline_star:101,line_end:101|char_star:21,char_end:35"[shape="box",fillcolor="white",style=filled];
"client.get('/forbidden'),type='call'\nline_star:101,line_end:101|char_star:11,char_end:35"->"('/forbidden'),type='argument_list'\nline_star:101,line_end:101|char_star:21,char_end:35";
"data,type='identifier'\nline_star:101,line_end:101|char_star:36,char_end:40"[shape="point",fillcolor="#121013",style=filled];
"client.get('/forbidden').data,type='attribute'\nline_star:101,line_end:101|char_star:11,char_end:40"->"data,type='identifier'\nline_star:101,line_end:101|char_star:36,char_end:40";
"assert client.get('/nope').data == b'you shall not pass',type='assert_statement'\nline_star:102,line_end:102|char_star:4,char_end:60"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:82,line_end:102|char_star:4,char_end:60"->"assert client.get('/nope').data == b'you shall not pass',type='assert_statement'\nline_star:102,line_end:102|char_star:4,char_end:60";
"client.get('/nope').data == b'you shall not pass',type='comparison_operator'\nline_star:102,line_end:102|char_star:11,char_end:60"[shape="box",fillcolor="white",style=filled];
"assert client.get('/nope').data == b'you shall not pass',type='assert_statement'\nline_star:102,line_end:102|char_star:4,char_end:60"->"client.get('/nope').data == b'you shall not pass',type='comparison_operator'\nline_star:102,line_end:102|char_star:11,char_end:60";
"client.get('/nope').data,type='attribute'\nline_star:102,line_end:102|char_star:11,char_end:35"[shape="box",fillcolor="white",style=filled];
"client.get('/nope').data == b'you shall not pass',type='comparison_operator'\nline_star:102,line_end:102|char_star:11,char_end:60"->"client.get('/nope').data,type='attribute'\nline_star:102,line_end:102|char_star:11,char_end:35";
"client.get('/nope'),type='call'\nline_star:102,line_end:102|char_star:11,char_end:30"[shape="box",fillcolor="white",style=filled];
"client.get('/nope').data,type='attribute'\nline_star:102,line_end:102|char_star:11,char_end:35"->"client.get('/nope'),type='call'\nline_star:102,line_end:102|char_star:11,char_end:30";
"client.get,type='attribute'\nline_star:102,line_end:102|char_star:11,char_end:21"[shape="box",fillcolor="white",style=filled];
"client.get('/nope'),type='call'\nline_star:102,line_end:102|char_star:11,char_end:30"->"client.get,type='attribute'\nline_star:102,line_end:102|char_star:11,char_end:21";
"client,type='identifier'\nline_star:102,line_end:102|char_star:11,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"client.get,type='attribute'\nline_star:102,line_end:102|char_star:11,char_end:21"->"client,type='identifier'\nline_star:102,line_end:102|char_star:11,char_end:17";
"get,type='identifier'\nline_star:102,line_end:102|char_star:18,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"client.get,type='attribute'\nline_star:102,line_end:102|char_star:11,char_end:21"->"get,type='identifier'\nline_star:102,line_end:102|char_star:18,char_end:21";
"('/nope'),type='argument_list'\nline_star:102,line_end:102|char_star:21,char_end:30"[shape="box",fillcolor="white",style=filled];
"client.get('/nope'),type='call'\nline_star:102,line_end:102|char_star:11,char_end:30"->"('/nope'),type='argument_list'\nline_star:102,line_end:102|char_star:21,char_end:30";
"data,type='identifier'\nline_star:102,line_end:102|char_star:31,char_end:35"[shape="point",fillcolor="#121013",style=filled];
"client.get('/nope').data,type='attribute'\nline_star:102,line_end:102|char_star:11,char_end:35"->"data,type='identifier'\nline_star:102,line_end:102|char_star:31,char_end:35";
"@pytest.mark.parametrize(\n    ('prefix', 'rule', 'url'),\n    (\n        ('', '/', '/'),\n        ('/', '', '/'),\n        ('/', '/', '/'),\n        ('/foo', '', '/foo'),\n        ('/foo/', '', '/foo/'),\n        ('', '/bar', '/bar'),\n        ('/foo/', '/bar', '/foo/bar'),\n        ('/foo/', 'bar', '/foo/bar'),\n        ('/foo', '/bar', '/foo/bar'),\n        ('/foo/', '//bar', '/foo/bar'),\n        ('/foo//', '/bar', '/foo/bar'),\n    ),\n)\ndef test_blueprint_prefix_slash(app, client, prefix, rule, url):\n    bp = flask.Blueprint('test', __name__, url_prefix=prefix)\n\n    @bp.route(rule)\n    def index():\n        return '', 204\n\n    app.register_blueprint(bp)\n    assert client.get(url).status_code == 204,type='decorated_definition'\nline_star:105,line_end:129|char_star:0,char_end:45"[shape="box",fillcolor="#c8c6a7",style=filled];
"MODULE"->"@pytest.mark.parametrize(\n    ('prefix', 'rule', 'url'),\n    (\n        ('', '/', '/'),\n        ('/', '', '/'),\n        ('/', '/', '/'),\n        ('/foo', '', '/foo'),\n        ('/foo/', '', '/foo/'),\n        ('', '/bar', '/bar'),\n        ('/foo/', '/bar', '/foo/bar'),\n        ('/foo/', 'bar', '/foo/bar'),\n        ('/foo', '/bar', '/foo/bar'),\n        ('/foo/', '//bar', '/foo/bar'),\n        ('/foo//', '/bar', '/foo/bar'),\n    ),\n)\ndef test_blueprint_prefix_slash(app, client, prefix, rule, url):\n    bp = flask.Blueprint('test', __name__, url_prefix=prefix)\n\n    @bp.route(rule)\n    def index():\n        return '', 204\n\n    app.register_blueprint(bp)\n    assert client.get(url).status_code == 204,type='decorated_definition'\nline_star:105,line_end:129|char_star:0,char_end:45";
"@pytest.mark.parametrize(\n    ('prefix', 'rule', 'url'),\n    (\n        ('', '/', '/'),\n        ('/', '', '/'),\n        ('/', '/', '/'),\n        ('/foo', '', '/foo'),\n        ('/foo/', '', '/foo/'),\n        ('', '/bar', '/bar'),\n        ('/foo/', '/bar', '/foo/bar'),\n        ('/foo/', 'bar', '/foo/bar'),\n        ('/foo', '/bar', '/foo/bar'),\n        ('/foo/', '//bar', '/foo/bar'),\n        ('/foo//', '/bar', '/foo/bar'),\n    ),\n),type='decorator'\nline_star:105,line_end:120|char_star:0,char_end:1"[shape="box",fillcolor="white",style=filled];
"@pytest.mark.parametrize(\n    ('prefix', 'rule', 'url'),\n    (\n        ('', '/', '/'),\n        ('/', '', '/'),\n        ('/', '/', '/'),\n        ('/foo', '', '/foo'),\n        ('/foo/', '', '/foo/'),\n        ('', '/bar', '/bar'),\n        ('/foo/', '/bar', '/foo/bar'),\n        ('/foo/', 'bar', '/foo/bar'),\n        ('/foo', '/bar', '/foo/bar'),\n        ('/foo/', '//bar', '/foo/bar'),\n        ('/foo//', '/bar', '/foo/bar'),\n    ),\n)\ndef test_blueprint_prefix_slash(app, client, prefix, rule, url):\n    bp = flask.Blueprint('test', __name__, url_prefix=prefix)\n\n    @bp.route(rule)\n    def index():\n        return '', 204\n\n    app.register_blueprint(bp)\n    assert client.get(url).status_code == 204,type='decorated_definition'\nline_star:105,line_end:129|char_star:0,char_end:45"->"@pytest.mark.parametrize(\n    ('prefix', 'rule', 'url'),\n    (\n        ('', '/', '/'),\n        ('/', '', '/'),\n        ('/', '/', '/'),\n        ('/foo', '', '/foo'),\n        ('/foo/', '', '/foo/'),\n        ('', '/bar', '/bar'),\n        ('/foo/', '/bar', '/foo/bar'),\n        ('/foo/', 'bar', '/foo/bar'),\n        ('/foo', '/bar', '/foo/bar'),\n        ('/foo/', '//bar', '/foo/bar'),\n        ('/foo//', '/bar', '/foo/bar'),\n    ),\n),type='decorator'\nline_star:105,line_end:120|char_star:0,char_end:1";
"def test_blueprint_prefix_slash(app, client, prefix, rule, url):\n    bp = flask.Blueprint('test', __name__, url_prefix=prefix)\n\n    @bp.route(rule)\n    def index():\n        return '', 204\n\n    app.register_blueprint(bp)\n    assert client.get(url).status_code == 204,type='function_definition'\nline_star:121,line_end:129|char_star:0,char_end:45"[shape="box",fillcolor="#cee6b4",style=filled];
"@pytest.mark.parametrize(\n    ('prefix', 'rule', 'url'),\n    (\n        ('', '/', '/'),\n        ('/', '', '/'),\n        ('/', '/', '/'),\n        ('/foo', '', '/foo'),\n        ('/foo/', '', '/foo/'),\n        ('', '/bar', '/bar'),\n        ('/foo/', '/bar', '/foo/bar'),\n        ('/foo/', 'bar', '/foo/bar'),\n        ('/foo', '/bar', '/foo/bar'),\n        ('/foo/', '//bar', '/foo/bar'),\n        ('/foo//', '/bar', '/foo/bar'),\n    ),\n)\ndef test_blueprint_prefix_slash(app, client, prefix, rule, url):\n    bp = flask.Blueprint('test', __name__, url_prefix=prefix)\n\n    @bp.route(rule)\n    def index():\n        return '', 204\n\n    app.register_blueprint(bp)\n    assert client.get(url).status_code == 204,type='decorated_definition'\nline_star:105,line_end:129|char_star:0,char_end:45"->"def test_blueprint_prefix_slash(app, client, prefix, rule, url):\n    bp = flask.Blueprint('test', __name__, url_prefix=prefix)\n\n    @bp.route(rule)\n    def index():\n        return '', 204\n\n    app.register_blueprint(bp)\n    assert client.get(url).status_code == 204,type='function_definition'\nline_star:121,line_end:129|char_star:0,char_end:45";
"test_blueprint_prefix_slash,type='identifier'\nline_star:121,line_end:121|char_star:4,char_end:31"[shape="point",fillcolor="#121013",style=filled];
"def test_blueprint_prefix_slash(app, client, prefix, rule, url):\n    bp = flask.Blueprint('test', __name__, url_prefix=prefix)\n\n    @bp.route(rule)\n    def index():\n        return '', 204\n\n    app.register_blueprint(bp)\n    assert client.get(url).status_code == 204,type='function_definition'\nline_star:121,line_end:129|char_star:0,char_end:45"->"test_blueprint_prefix_slash,type='identifier'\nline_star:121,line_end:121|char_star:4,char_end:31";
"(app, client, prefix, rule, url),type='parameters'\nline_star:121,line_end:121|char_star:31,char_end:63"[shape="box",fillcolor="white",style=filled];
"def test_blueprint_prefix_slash(app, client, prefix, rule, url):\n    bp = flask.Blueprint('test', __name__, url_prefix=prefix)\n\n    @bp.route(rule)\n    def index():\n        return '', 204\n\n    app.register_blueprint(bp)\n    assert client.get(url).status_code == 204,type='function_definition'\nline_star:121,line_end:129|char_star:0,char_end:45"->"(app, client, prefix, rule, url),type='parameters'\nline_star:121,line_end:121|char_star:31,char_end:63";
"app,type='identifier'\nline_star:121,line_end:121|char_star:32,char_end:35"[shape="point",fillcolor="#121013",style=filled];
"(app, client, prefix, rule, url),type='parameters'\nline_star:121,line_end:121|char_star:31,char_end:63"->"app,type='identifier'\nline_star:121,line_end:121|char_star:32,char_end:35";
"client,type='identifier'\nline_star:121,line_end:121|char_star:37,char_end:43"[shape="point",fillcolor="#121013",style=filled];
"(app, client, prefix, rule, url),type='parameters'\nline_star:121,line_end:121|char_star:31,char_end:63"->"client,type='identifier'\nline_star:121,line_end:121|char_star:37,char_end:43";
"prefix,type='identifier'\nline_star:121,line_end:121|char_star:45,char_end:51"[shape="point",fillcolor="#121013",style=filled];
"(app, client, prefix, rule, url),type='parameters'\nline_star:121,line_end:121|char_star:31,char_end:63"->"prefix,type='identifier'\nline_star:121,line_end:121|char_star:45,char_end:51";
"rule,type='identifier'\nline_star:121,line_end:121|char_star:53,char_end:57"[shape="point",fillcolor="#121013",style=filled];
"(app, client, prefix, rule, url),type='parameters'\nline_star:121,line_end:121|char_star:31,char_end:63"->"rule,type='identifier'\nline_star:121,line_end:121|char_star:53,char_end:57";
"url,type='identifier'\nline_star:121,line_end:121|char_star:59,char_end:62"[shape="point",fillcolor="#121013",style=filled];
"(app, client, prefix, rule, url),type='parameters'\nline_star:121,line_end:121|char_star:31,char_end:63"->"url,type='identifier'\nline_star:121,line_end:121|char_star:59,char_end:62";
"type='INFORMATION BLOCK'\nline_star:122,line_end:129|char_star:4,char_end:45"[shape="point",fillcolor="#121013",style=filled];
"def test_blueprint_prefix_slash(app, client, prefix, rule, url):\n    bp = flask.Blueprint('test', __name__, url_prefix=prefix)\n\n    @bp.route(rule)\n    def index():\n        return '', 204\n\n    app.register_blueprint(bp)\n    assert client.get(url).status_code == 204,type='function_definition'\nline_star:121,line_end:129|char_star:0,char_end:45"->"type='INFORMATION BLOCK'\nline_star:122,line_end:129|char_star:4,char_end:45";
"@bp.route(rule)\n    def index():\n        return '', 204,type='decorated_definition'\nline_star:124,line_end:126|char_star:4,char_end:22"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:122,line_end:129|char_star:4,char_end:45"->"@bp.route(rule)\n    def index():\n        return '', 204,type='decorated_definition'\nline_star:124,line_end:126|char_star:4,char_end:22";
"@bp.route(rule),type='decorator'\nline_star:124,line_end:124|char_star:4,char_end:19"[shape="box",fillcolor="white",style=filled];
"@bp.route(rule)\n    def index():\n        return '', 204,type='decorated_definition'\nline_star:124,line_end:126|char_star:4,char_end:22"->"@bp.route(rule),type='decorator'\nline_star:124,line_end:124|char_star:4,char_end:19";
"def index():\n        return '', 204,type='function_definition'\nline_star:125,line_end:126|char_star:4,char_end:22"[shape="box",fillcolor="#cee6b4",style=filled];
"@bp.route(rule)\n    def index():\n        return '', 204,type='decorated_definition'\nline_star:124,line_end:126|char_star:4,char_end:22"->"def index():\n        return '', 204,type='function_definition'\nline_star:125,line_end:126|char_star:4,char_end:22";
"index,type='identifier'\nline_star:125,line_end:125|char_star:8,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"def index():\n        return '', 204,type='function_definition'\nline_star:125,line_end:126|char_star:4,char_end:22"->"index,type='identifier'\nline_star:125,line_end:125|char_star:8,char_end:13";
"type='INFORMATION BLOCK'\nline_star:126,line_end:126|char_star:8,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"def index():\n        return '', 204,type='function_definition'\nline_star:125,line_end:126|char_star:4,char_end:22"->"type='INFORMATION BLOCK'\nline_star:126,line_end:126|char_star:8,char_end:22";
"return '', 204,type='return_statement'\nline_star:126,line_end:126|char_star:8,char_end:22"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:126,line_end:126|char_star:8,char_end:22"->"return '', 204,type='return_statement'\nline_star:126,line_end:126|char_star:8,char_end:22";
"assert client.get(url).status_code == 204,type='assert_statement'\nline_star:129,line_end:129|char_star:4,char_end:45"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:122,line_end:129|char_star:4,char_end:45"->"assert client.get(url).status_code == 204,type='assert_statement'\nline_star:129,line_end:129|char_star:4,char_end:45";
"client.get(url).status_code == 204,type='comparison_operator'\nline_star:129,line_end:129|char_star:11,char_end:45"[shape="box",fillcolor="white",style=filled];
"assert client.get(url).status_code == 204,type='assert_statement'\nline_star:129,line_end:129|char_star:4,char_end:45"->"client.get(url).status_code == 204,type='comparison_operator'\nline_star:129,line_end:129|char_star:11,char_end:45";
"client.get(url).status_code,type='attribute'\nline_star:129,line_end:129|char_star:11,char_end:38"[shape="box",fillcolor="white",style=filled];
"client.get(url).status_code == 204,type='comparison_operator'\nline_star:129,line_end:129|char_star:11,char_end:45"->"client.get(url).status_code,type='attribute'\nline_star:129,line_end:129|char_star:11,char_end:38";
"client.get(url),type='call'\nline_star:129,line_end:129|char_star:11,char_end:26"[shape="box",fillcolor="white",style=filled];
"client.get(url).status_code,type='attribute'\nline_star:129,line_end:129|char_star:11,char_end:38"->"client.get(url),type='call'\nline_star:129,line_end:129|char_star:11,char_end:26";
"client.get,type='attribute'\nline_star:129,line_end:129|char_star:11,char_end:21"[shape="box",fillcolor="white",style=filled];
"client.get(url),type='call'\nline_star:129,line_end:129|char_star:11,char_end:26"->"client.get,type='attribute'\nline_star:129,line_end:129|char_star:11,char_end:21";
"client,type='identifier'\nline_star:129,line_end:129|char_star:11,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"client.get,type='attribute'\nline_star:129,line_end:129|char_star:11,char_end:21"->"client,type='identifier'\nline_star:129,line_end:129|char_star:11,char_end:17";
"get,type='identifier'\nline_star:129,line_end:129|char_star:18,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"client.get,type='attribute'\nline_star:129,line_end:129|char_star:11,char_end:21"->"get,type='identifier'\nline_star:129,line_end:129|char_star:18,char_end:21";
"(url),type='argument_list'\nline_star:129,line_end:129|char_star:21,char_end:26"[shape="box",fillcolor="white",style=filled];
"client.get(url),type='call'\nline_star:129,line_end:129|char_star:11,char_end:26"->"(url),type='argument_list'\nline_star:129,line_end:129|char_star:21,char_end:26";
"url,type='identifier'\nline_star:129,line_end:129|char_star:22,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"(url),type='argument_list'\nline_star:129,line_end:129|char_star:21,char_end:26"->"url,type='identifier'\nline_star:129,line_end:129|char_star:22,char_end:25";
"status_code,type='identifier'\nline_star:129,line_end:129|char_star:27,char_end:38"[shape="point",fillcolor="#121013",style=filled];
"client.get(url).status_code,type='attribute'\nline_star:129,line_end:129|char_star:11,char_end:38"->"status_code,type='identifier'\nline_star:129,line_end:129|char_star:27,char_end:38";
"def test_blueprint_url_defaults(app, client):\n    bp = flask.Blueprint('test', __name__)\n\n    @bp.route('/foo', defaults={'baz': 42})\n    def foo(bar, baz):\n        return f'{bar}/{baz:d}'\n\n    @bp.route('/bar')\n    def bar(bar):\n        return str(bar)\n\n    app.register_blueprint(bp, url_prefix='/1', url_defaults={'bar': 23})\n    app.register_blueprint(bp, url_prefix='/2', url_defaults={'bar': 19})\n\n    assert client.get('/1/foo').data == b'23/42'\n    assert client.get('/2/foo').data == b'19/42'\n    assert client.get('/1/bar').data == b'23'\n    assert client.get('/2/bar').data == b'19',type='function_definition'\nline_star:132,line_end:149|char_star:0,char_end:45"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_blueprint_url_defaults(app, client):\n    bp = flask.Blueprint('test', __name__)\n\n    @bp.route('/foo', defaults={'baz': 42})\n    def foo(bar, baz):\n        return f'{bar}/{baz:d}'\n\n    @bp.route('/bar')\n    def bar(bar):\n        return str(bar)\n\n    app.register_blueprint(bp, url_prefix='/1', url_defaults={'bar': 23})\n    app.register_blueprint(bp, url_prefix='/2', url_defaults={'bar': 19})\n\n    assert client.get('/1/foo').data == b'23/42'\n    assert client.get('/2/foo').data == b'19/42'\n    assert client.get('/1/bar').data == b'23'\n    assert client.get('/2/bar').data == b'19',type='function_definition'\nline_star:132,line_end:149|char_star:0,char_end:45";
"test_blueprint_url_defaults,type='identifier'\nline_star:132,line_end:132|char_star:4,char_end:31"[shape="point",fillcolor="#121013",style=filled];
"def test_blueprint_url_defaults(app, client):\n    bp = flask.Blueprint('test', __name__)\n\n    @bp.route('/foo', defaults={'baz': 42})\n    def foo(bar, baz):\n        return f'{bar}/{baz:d}'\n\n    @bp.route('/bar')\n    def bar(bar):\n        return str(bar)\n\n    app.register_blueprint(bp, url_prefix='/1', url_defaults={'bar': 23})\n    app.register_blueprint(bp, url_prefix='/2', url_defaults={'bar': 19})\n\n    assert client.get('/1/foo').data == b'23/42'\n    assert client.get('/2/foo').data == b'19/42'\n    assert client.get('/1/bar').data == b'23'\n    assert client.get('/2/bar').data == b'19',type='function_definition'\nline_star:132,line_end:149|char_star:0,char_end:45"->"test_blueprint_url_defaults,type='identifier'\nline_star:132,line_end:132|char_star:4,char_end:31";
"(app, client),type='parameters'\nline_star:132,line_end:132|char_star:31,char_end:44"[shape="box",fillcolor="white",style=filled];
"def test_blueprint_url_defaults(app, client):\n    bp = flask.Blueprint('test', __name__)\n\n    @bp.route('/foo', defaults={'baz': 42})\n    def foo(bar, baz):\n        return f'{bar}/{baz:d}'\n\n    @bp.route('/bar')\n    def bar(bar):\n        return str(bar)\n\n    app.register_blueprint(bp, url_prefix='/1', url_defaults={'bar': 23})\n    app.register_blueprint(bp, url_prefix='/2', url_defaults={'bar': 19})\n\n    assert client.get('/1/foo').data == b'23/42'\n    assert client.get('/2/foo').data == b'19/42'\n    assert client.get('/1/bar').data == b'23'\n    assert client.get('/2/bar').data == b'19',type='function_definition'\nline_star:132,line_end:149|char_star:0,char_end:45"->"(app, client),type='parameters'\nline_star:132,line_end:132|char_star:31,char_end:44";
"app,type='identifier'\nline_star:132,line_end:132|char_star:32,char_end:35"[shape="point",fillcolor="#121013",style=filled];
"(app, client),type='parameters'\nline_star:132,line_end:132|char_star:31,char_end:44"->"app,type='identifier'\nline_star:132,line_end:132|char_star:32,char_end:35";
"client,type='identifier'\nline_star:132,line_end:132|char_star:37,char_end:43"[shape="point",fillcolor="#121013",style=filled];
"(app, client),type='parameters'\nline_star:132,line_end:132|char_star:31,char_end:44"->"client,type='identifier'\nline_star:132,line_end:132|char_star:37,char_end:43";
"type='INFORMATION BLOCK'\nline_star:133,line_end:149|char_star:4,char_end:45"[shape="point",fillcolor="#121013",style=filled];
"def test_blueprint_url_defaults(app, client):\n    bp = flask.Blueprint('test', __name__)\n\n    @bp.route('/foo', defaults={'baz': 42})\n    def foo(bar, baz):\n        return f'{bar}/{baz:d}'\n\n    @bp.route('/bar')\n    def bar(bar):\n        return str(bar)\n\n    app.register_blueprint(bp, url_prefix='/1', url_defaults={'bar': 23})\n    app.register_blueprint(bp, url_prefix='/2', url_defaults={'bar': 19})\n\n    assert client.get('/1/foo').data == b'23/42'\n    assert client.get('/2/foo').data == b'19/42'\n    assert client.get('/1/bar').data == b'23'\n    assert client.get('/2/bar').data == b'19',type='function_definition'\nline_star:132,line_end:149|char_star:0,char_end:45"->"type='INFORMATION BLOCK'\nline_star:133,line_end:149|char_star:4,char_end:45";
"@bp.route('/foo', defaults={'baz': 42})\n    def foo(bar, baz):\n        return f'{bar}/{baz:d}',type='decorated_definition'\nline_star:135,line_end:137|char_star:4,char_end:31"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:133,line_end:149|char_star:4,char_end:45"->"@bp.route('/foo', defaults={'baz': 42})\n    def foo(bar, baz):\n        return f'{bar}/{baz:d}',type='decorated_definition'\nline_star:135,line_end:137|char_star:4,char_end:31";
"@bp.route('/foo', defaults={'baz': 42}),type='decorator'\nline_star:135,line_end:135|char_star:4,char_end:43"[shape="box",fillcolor="white",style=filled];
"@bp.route('/foo', defaults={'baz': 42})\n    def foo(bar, baz):\n        return f'{bar}/{baz:d}',type='decorated_definition'\nline_star:135,line_end:137|char_star:4,char_end:31"->"@bp.route('/foo', defaults={'baz': 42}),type='decorator'\nline_star:135,line_end:135|char_star:4,char_end:43";
"def foo(bar, baz):\n        return f'{bar}/{baz:d}',type='function_definition'\nline_star:136,line_end:137|char_star:4,char_end:31"[shape="box",fillcolor="#cee6b4",style=filled];
"@bp.route('/foo', defaults={'baz': 42})\n    def foo(bar, baz):\n        return f'{bar}/{baz:d}',type='decorated_definition'\nline_star:135,line_end:137|char_star:4,char_end:31"->"def foo(bar, baz):\n        return f'{bar}/{baz:d}',type='function_definition'\nline_star:136,line_end:137|char_star:4,char_end:31";
"foo,type='identifier'\nline_star:136,line_end:136|char_star:8,char_end:11"[shape="point",fillcolor="#121013",style=filled];
"def foo(bar, baz):\n        return f'{bar}/{baz:d}',type='function_definition'\nline_star:136,line_end:137|char_star:4,char_end:31"->"foo,type='identifier'\nline_star:136,line_end:136|char_star:8,char_end:11";
"(bar, baz),type='parameters'\nline_star:136,line_end:136|char_star:11,char_end:21"[shape="box",fillcolor="white",style=filled];
"def foo(bar, baz):\n        return f'{bar}/{baz:d}',type='function_definition'\nline_star:136,line_end:137|char_star:4,char_end:31"->"(bar, baz),type='parameters'\nline_star:136,line_end:136|char_star:11,char_end:21";
"bar,type='identifier'\nline_star:136,line_end:136|char_star:12,char_end:15"[shape="point",fillcolor="#121013",style=filled];
"(bar, baz),type='parameters'\nline_star:136,line_end:136|char_star:11,char_end:21"->"bar,type='identifier'\nline_star:136,line_end:136|char_star:12,char_end:15";
"baz,type='identifier'\nline_star:136,line_end:136|char_star:17,char_end:20"[shape="point",fillcolor="#121013",style=filled];
"(bar, baz),type='parameters'\nline_star:136,line_end:136|char_star:11,char_end:21"->"baz,type='identifier'\nline_star:136,line_end:136|char_star:17,char_end:20";
"type='INFORMATION BLOCK'\nline_star:137,line_end:137|char_star:8,char_end:31"[shape="point",fillcolor="#121013",style=filled];
"def foo(bar, baz):\n        return f'{bar}/{baz:d}',type='function_definition'\nline_star:136,line_end:137|char_star:4,char_end:31"->"type='INFORMATION BLOCK'\nline_star:137,line_end:137|char_star:8,char_end:31";
"return f'{bar}/{baz:d}',type='return_statement'\nline_star:137,line_end:137|char_star:8,char_end:31"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:137,line_end:137|char_star:8,char_end:31"->"return f'{bar}/{baz:d}',type='return_statement'\nline_star:137,line_end:137|char_star:8,char_end:31";
"@bp.route('/bar')\n    def bar(bar):\n        return str(bar),type='decorated_definition'\nline_star:139,line_end:141|char_star:4,char_end:23"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:133,line_end:149|char_star:4,char_end:45"->"@bp.route('/bar')\n    def bar(bar):\n        return str(bar),type='decorated_definition'\nline_star:139,line_end:141|char_star:4,char_end:23";
"@bp.route('/bar'),type='decorator'\nline_star:139,line_end:139|char_star:4,char_end:21"[shape="box",fillcolor="white",style=filled];
"@bp.route('/bar')\n    def bar(bar):\n        return str(bar),type='decorated_definition'\nline_star:139,line_end:141|char_star:4,char_end:23"->"@bp.route('/bar'),type='decorator'\nline_star:139,line_end:139|char_star:4,char_end:21";
"def bar(bar):\n        return str(bar),type='function_definition'\nline_star:140,line_end:141|char_star:4,char_end:23"[shape="box",fillcolor="#cee6b4",style=filled];
"@bp.route('/bar')\n    def bar(bar):\n        return str(bar),type='decorated_definition'\nline_star:139,line_end:141|char_star:4,char_end:23"->"def bar(bar):\n        return str(bar),type='function_definition'\nline_star:140,line_end:141|char_star:4,char_end:23";
"bar,type='identifier'\nline_star:140,line_end:140|char_star:8,char_end:11"[shape="point",fillcolor="#121013",style=filled];
"def bar(bar):\n        return str(bar),type='function_definition'\nline_star:140,line_end:141|char_star:4,char_end:23"->"bar,type='identifier'\nline_star:140,line_end:140|char_star:8,char_end:11";
"(bar),type='parameters'\nline_star:140,line_end:140|char_star:11,char_end:16"[shape="box",fillcolor="white",style=filled];
"def bar(bar):\n        return str(bar),type='function_definition'\nline_star:140,line_end:141|char_star:4,char_end:23"->"(bar),type='parameters'\nline_star:140,line_end:140|char_star:11,char_end:16";
"bar,type='identifier'\nline_star:140,line_end:140|char_star:12,char_end:15"[shape="point",fillcolor="#121013",style=filled];
"(bar),type='parameters'\nline_star:140,line_end:140|char_star:11,char_end:16"->"bar,type='identifier'\nline_star:140,line_end:140|char_star:12,char_end:15";
"type='INFORMATION BLOCK'\nline_star:141,line_end:141|char_star:8,char_end:23"[shape="point",fillcolor="#121013",style=filled];
"def bar(bar):\n        return str(bar),type='function_definition'\nline_star:140,line_end:141|char_star:4,char_end:23"->"type='INFORMATION BLOCK'\nline_star:141,line_end:141|char_star:8,char_end:23";
"return str(bar),type='return_statement'\nline_star:141,line_end:141|char_star:8,char_end:23"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:141,line_end:141|char_star:8,char_end:23"->"return str(bar),type='return_statement'\nline_star:141,line_end:141|char_star:8,char_end:23";
"assert client.get('/1/foo').data == b'23/42',type='assert_statement'\nline_star:146,line_end:146|char_star:4,char_end:48"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:133,line_end:149|char_star:4,char_end:45"->"assert client.get('/1/foo').data == b'23/42',type='assert_statement'\nline_star:146,line_end:146|char_star:4,char_end:48";
"client.get('/1/foo').data == b'23/42',type='comparison_operator'\nline_star:146,line_end:146|char_star:11,char_end:48"[shape="box",fillcolor="white",style=filled];
"assert client.get('/1/foo').data == b'23/42',type='assert_statement'\nline_star:146,line_end:146|char_star:4,char_end:48"->"client.get('/1/foo').data == b'23/42',type='comparison_operator'\nline_star:146,line_end:146|char_star:11,char_end:48";
"client.get('/1/foo').data,type='attribute'\nline_star:146,line_end:146|char_star:11,char_end:36"[shape="box",fillcolor="white",style=filled];
"client.get('/1/foo').data == b'23/42',type='comparison_operator'\nline_star:146,line_end:146|char_star:11,char_end:48"->"client.get('/1/foo').data,type='attribute'\nline_star:146,line_end:146|char_star:11,char_end:36";
"client.get('/1/foo'),type='call'\nline_star:146,line_end:146|char_star:11,char_end:31"[shape="box",fillcolor="white",style=filled];
"client.get('/1/foo').data,type='attribute'\nline_star:146,line_end:146|char_star:11,char_end:36"->"client.get('/1/foo'),type='call'\nline_star:146,line_end:146|char_star:11,char_end:31";
"client.get,type='attribute'\nline_star:146,line_end:146|char_star:11,char_end:21"[shape="box",fillcolor="white",style=filled];
"client.get('/1/foo'),type='call'\nline_star:146,line_end:146|char_star:11,char_end:31"->"client.get,type='attribute'\nline_star:146,line_end:146|char_star:11,char_end:21";
"client,type='identifier'\nline_star:146,line_end:146|char_star:11,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"client.get,type='attribute'\nline_star:146,line_end:146|char_star:11,char_end:21"->"client,type='identifier'\nline_star:146,line_end:146|char_star:11,char_end:17";
"get,type='identifier'\nline_star:146,line_end:146|char_star:18,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"client.get,type='attribute'\nline_star:146,line_end:146|char_star:11,char_end:21"->"get,type='identifier'\nline_star:146,line_end:146|char_star:18,char_end:21";
"('/1/foo'),type='argument_list'\nline_star:146,line_end:146|char_star:21,char_end:31"[shape="box",fillcolor="white",style=filled];
"client.get('/1/foo'),type='call'\nline_star:146,line_end:146|char_star:11,char_end:31"->"('/1/foo'),type='argument_list'\nline_star:146,line_end:146|char_star:21,char_end:31";
"data,type='identifier'\nline_star:146,line_end:146|char_star:32,char_end:36"[shape="point",fillcolor="#121013",style=filled];
"client.get('/1/foo').data,type='attribute'\nline_star:146,line_end:146|char_star:11,char_end:36"->"data,type='identifier'\nline_star:146,line_end:146|char_star:32,char_end:36";
"assert client.get('/2/foo').data == b'19/42',type='assert_statement'\nline_star:147,line_end:147|char_star:4,char_end:48"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:133,line_end:149|char_star:4,char_end:45"->"assert client.get('/2/foo').data == b'19/42',type='assert_statement'\nline_star:147,line_end:147|char_star:4,char_end:48";
"client.get('/2/foo').data == b'19/42',type='comparison_operator'\nline_star:147,line_end:147|char_star:11,char_end:48"[shape="box",fillcolor="white",style=filled];
"assert client.get('/2/foo').data == b'19/42',type='assert_statement'\nline_star:147,line_end:147|char_star:4,char_end:48"->"client.get('/2/foo').data == b'19/42',type='comparison_operator'\nline_star:147,line_end:147|char_star:11,char_end:48";
"client.get('/2/foo').data,type='attribute'\nline_star:147,line_end:147|char_star:11,char_end:36"[shape="box",fillcolor="white",style=filled];
"client.get('/2/foo').data == b'19/42',type='comparison_operator'\nline_star:147,line_end:147|char_star:11,char_end:48"->"client.get('/2/foo').data,type='attribute'\nline_star:147,line_end:147|char_star:11,char_end:36";
"client.get('/2/foo'),type='call'\nline_star:147,line_end:147|char_star:11,char_end:31"[shape="box",fillcolor="white",style=filled];
"client.get('/2/foo').data,type='attribute'\nline_star:147,line_end:147|char_star:11,char_end:36"->"client.get('/2/foo'),type='call'\nline_star:147,line_end:147|char_star:11,char_end:31";
"client.get,type='attribute'\nline_star:147,line_end:147|char_star:11,char_end:21"[shape="box",fillcolor="white",style=filled];
"client.get('/2/foo'),type='call'\nline_star:147,line_end:147|char_star:11,char_end:31"->"client.get,type='attribute'\nline_star:147,line_end:147|char_star:11,char_end:21";
"client,type='identifier'\nline_star:147,line_end:147|char_star:11,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"client.get,type='attribute'\nline_star:147,line_end:147|char_star:11,char_end:21"->"client,type='identifier'\nline_star:147,line_end:147|char_star:11,char_end:17";
"get,type='identifier'\nline_star:147,line_end:147|char_star:18,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"client.get,type='attribute'\nline_star:147,line_end:147|char_star:11,char_end:21"->"get,type='identifier'\nline_star:147,line_end:147|char_star:18,char_end:21";
"('/2/foo'),type='argument_list'\nline_star:147,line_end:147|char_star:21,char_end:31"[shape="box",fillcolor="white",style=filled];
"client.get('/2/foo'),type='call'\nline_star:147,line_end:147|char_star:11,char_end:31"->"('/2/foo'),type='argument_list'\nline_star:147,line_end:147|char_star:21,char_end:31";
"data,type='identifier'\nline_star:147,line_end:147|char_star:32,char_end:36"[shape="point",fillcolor="#121013",style=filled];
"client.get('/2/foo').data,type='attribute'\nline_star:147,line_end:147|char_star:11,char_end:36"->"data,type='identifier'\nline_star:147,line_end:147|char_star:32,char_end:36";
"assert client.get('/1/bar').data == b'23',type='assert_statement'\nline_star:148,line_end:148|char_star:4,char_end:45"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:133,line_end:149|char_star:4,char_end:45"->"assert client.get('/1/bar').data == b'23',type='assert_statement'\nline_star:148,line_end:148|char_star:4,char_end:45";
"client.get('/1/bar').data == b'23',type='comparison_operator'\nline_star:148,line_end:148|char_star:11,char_end:45"[shape="box",fillcolor="white",style=filled];
"assert client.get('/1/bar').data == b'23',type='assert_statement'\nline_star:148,line_end:148|char_star:4,char_end:45"->"client.get('/1/bar').data == b'23',type='comparison_operator'\nline_star:148,line_end:148|char_star:11,char_end:45";
"client.get('/1/bar').data,type='attribute'\nline_star:148,line_end:148|char_star:11,char_end:36"[shape="box",fillcolor="white",style=filled];
"client.get('/1/bar').data == b'23',type='comparison_operator'\nline_star:148,line_end:148|char_star:11,char_end:45"->"client.get('/1/bar').data,type='attribute'\nline_star:148,line_end:148|char_star:11,char_end:36";
"client.get('/1/bar'),type='call'\nline_star:148,line_end:148|char_star:11,char_end:31"[shape="box",fillcolor="white",style=filled];
"client.get('/1/bar').data,type='attribute'\nline_star:148,line_end:148|char_star:11,char_end:36"->"client.get('/1/bar'),type='call'\nline_star:148,line_end:148|char_star:11,char_end:31";
"client.get,type='attribute'\nline_star:148,line_end:148|char_star:11,char_end:21"[shape="box",fillcolor="white",style=filled];
"client.get('/1/bar'),type='call'\nline_star:148,line_end:148|char_star:11,char_end:31"->"client.get,type='attribute'\nline_star:148,line_end:148|char_star:11,char_end:21";
"client,type='identifier'\nline_star:148,line_end:148|char_star:11,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"client.get,type='attribute'\nline_star:148,line_end:148|char_star:11,char_end:21"->"client,type='identifier'\nline_star:148,line_end:148|char_star:11,char_end:17";
"get,type='identifier'\nline_star:148,line_end:148|char_star:18,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"client.get,type='attribute'\nline_star:148,line_end:148|char_star:11,char_end:21"->"get,type='identifier'\nline_star:148,line_end:148|char_star:18,char_end:21";
"('/1/bar'),type='argument_list'\nline_star:148,line_end:148|char_star:21,char_end:31"[shape="box",fillcolor="white",style=filled];
"client.get('/1/bar'),type='call'\nline_star:148,line_end:148|char_star:11,char_end:31"->"('/1/bar'),type='argument_list'\nline_star:148,line_end:148|char_star:21,char_end:31";
"data,type='identifier'\nline_star:148,line_end:148|char_star:32,char_end:36"[shape="point",fillcolor="#121013",style=filled];
"client.get('/1/bar').data,type='attribute'\nline_star:148,line_end:148|char_star:11,char_end:36"->"data,type='identifier'\nline_star:148,line_end:148|char_star:32,char_end:36";
"assert client.get('/2/bar').data == b'19',type='assert_statement'\nline_star:149,line_end:149|char_star:4,char_end:45"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:133,line_end:149|char_star:4,char_end:45"->"assert client.get('/2/bar').data == b'19',type='assert_statement'\nline_star:149,line_end:149|char_star:4,char_end:45";
"client.get('/2/bar').data == b'19',type='comparison_operator'\nline_star:149,line_end:149|char_star:11,char_end:45"[shape="box",fillcolor="white",style=filled];
"assert client.get('/2/bar').data == b'19',type='assert_statement'\nline_star:149,line_end:149|char_star:4,char_end:45"->"client.get('/2/bar').data == b'19',type='comparison_operator'\nline_star:149,line_end:149|char_star:11,char_end:45";
"client.get('/2/bar').data,type='attribute'\nline_star:149,line_end:149|char_star:11,char_end:36"[shape="box",fillcolor="white",style=filled];
"client.get('/2/bar').data == b'19',type='comparison_operator'\nline_star:149,line_end:149|char_star:11,char_end:45"->"client.get('/2/bar').data,type='attribute'\nline_star:149,line_end:149|char_star:11,char_end:36";
"client.get('/2/bar'),type='call'\nline_star:149,line_end:149|char_star:11,char_end:31"[shape="box",fillcolor="white",style=filled];
"client.get('/2/bar').data,type='attribute'\nline_star:149,line_end:149|char_star:11,char_end:36"->"client.get('/2/bar'),type='call'\nline_star:149,line_end:149|char_star:11,char_end:31";
"client.get,type='attribute'\nline_star:149,line_end:149|char_star:11,char_end:21"[shape="box",fillcolor="white",style=filled];
"client.get('/2/bar'),type='call'\nline_star:149,line_end:149|char_star:11,char_end:31"->"client.get,type='attribute'\nline_star:149,line_end:149|char_star:11,char_end:21";
"client,type='identifier'\nline_star:149,line_end:149|char_star:11,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"client.get,type='attribute'\nline_star:149,line_end:149|char_star:11,char_end:21"->"client,type='identifier'\nline_star:149,line_end:149|char_star:11,char_end:17";
"get,type='identifier'\nline_star:149,line_end:149|char_star:18,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"client.get,type='attribute'\nline_star:149,line_end:149|char_star:11,char_end:21"->"get,type='identifier'\nline_star:149,line_end:149|char_star:18,char_end:21";
"('/2/bar'),type='argument_list'\nline_star:149,line_end:149|char_star:21,char_end:31"[shape="box",fillcolor="white",style=filled];
"client.get('/2/bar'),type='call'\nline_star:149,line_end:149|char_star:11,char_end:31"->"('/2/bar'),type='argument_list'\nline_star:149,line_end:149|char_star:21,char_end:31";
"data,type='identifier'\nline_star:149,line_end:149|char_star:32,char_end:36"[shape="point",fillcolor="#121013",style=filled];
"client.get('/2/bar').data,type='attribute'\nline_star:149,line_end:149|char_star:11,char_end:36"->"data,type='identifier'\nline_star:149,line_end:149|char_star:32,char_end:36";
"def test_blueprint_url_processors(app, client):\n    bp = flask.Blueprint('frontend', __name__, url_prefix='/<lang_code>')\n\n    @bp.url_defaults\n    def add_language_code(endpoint, values):\n        values.setdefault('lang_code', flask.g.lang_code)\n\n    @bp.url_value_preprocessor\n    def pull_lang_code(endpoint, values):\n        flask.g.lang_code = values.pop('lang_code')\n\n    @bp.route('/')\n    def index():\n        return flask.url_for('.about')\n\n    @bp.route('/about')\n    def about():\n        return flask.url_for('.index')\n\n    app.register_blueprint(bp)\n\n    assert client.get('/de/').data == b'/de/about'\n    assert client.get('/de/about').data == b'/de/',type='function_definition'\nline_star:152,line_end:174|char_star:0,char_end:50"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_blueprint_url_processors(app, client):\n    bp = flask.Blueprint('frontend', __name__, url_prefix='/<lang_code>')\n\n    @bp.url_defaults\n    def add_language_code(endpoint, values):\n        values.setdefault('lang_code', flask.g.lang_code)\n\n    @bp.url_value_preprocessor\n    def pull_lang_code(endpoint, values):\n        flask.g.lang_code = values.pop('lang_code')\n\n    @bp.route('/')\n    def index():\n        return flask.url_for('.about')\n\n    @bp.route('/about')\n    def about():\n        return flask.url_for('.index')\n\n    app.register_blueprint(bp)\n\n    assert client.get('/de/').data == b'/de/about'\n    assert client.get('/de/about').data == b'/de/',type='function_definition'\nline_star:152,line_end:174|char_star:0,char_end:50";
"test_blueprint_url_processors,type='identifier'\nline_star:152,line_end:152|char_star:4,char_end:33"[shape="point",fillcolor="#121013",style=filled];
"def test_blueprint_url_processors(app, client):\n    bp = flask.Blueprint('frontend', __name__, url_prefix='/<lang_code>')\n\n    @bp.url_defaults\n    def add_language_code(endpoint, values):\n        values.setdefault('lang_code', flask.g.lang_code)\n\n    @bp.url_value_preprocessor\n    def pull_lang_code(endpoint, values):\n        flask.g.lang_code = values.pop('lang_code')\n\n    @bp.route('/')\n    def index():\n        return flask.url_for('.about')\n\n    @bp.route('/about')\n    def about():\n        return flask.url_for('.index')\n\n    app.register_blueprint(bp)\n\n    assert client.get('/de/').data == b'/de/about'\n    assert client.get('/de/about').data == b'/de/',type='function_definition'\nline_star:152,line_end:174|char_star:0,char_end:50"->"test_blueprint_url_processors,type='identifier'\nline_star:152,line_end:152|char_star:4,char_end:33";
"(app, client),type='parameters'\nline_star:152,line_end:152|char_star:33,char_end:46"[shape="box",fillcolor="white",style=filled];
"def test_blueprint_url_processors(app, client):\n    bp = flask.Blueprint('frontend', __name__, url_prefix='/<lang_code>')\n\n    @bp.url_defaults\n    def add_language_code(endpoint, values):\n        values.setdefault('lang_code', flask.g.lang_code)\n\n    @bp.url_value_preprocessor\n    def pull_lang_code(endpoint, values):\n        flask.g.lang_code = values.pop('lang_code')\n\n    @bp.route('/')\n    def index():\n        return flask.url_for('.about')\n\n    @bp.route('/about')\n    def about():\n        return flask.url_for('.index')\n\n    app.register_blueprint(bp)\n\n    assert client.get('/de/').data == b'/de/about'\n    assert client.get('/de/about').data == b'/de/',type='function_definition'\nline_star:152,line_end:174|char_star:0,char_end:50"->"(app, client),type='parameters'\nline_star:152,line_end:152|char_star:33,char_end:46";
"app,type='identifier'\nline_star:152,line_end:152|char_star:34,char_end:37"[shape="point",fillcolor="#121013",style=filled];
"(app, client),type='parameters'\nline_star:152,line_end:152|char_star:33,char_end:46"->"app,type='identifier'\nline_star:152,line_end:152|char_star:34,char_end:37";
"client,type='identifier'\nline_star:152,line_end:152|char_star:39,char_end:45"[shape="point",fillcolor="#121013",style=filled];
"(app, client),type='parameters'\nline_star:152,line_end:152|char_star:33,char_end:46"->"client,type='identifier'\nline_star:152,line_end:152|char_star:39,char_end:45";
"type='INFORMATION BLOCK'\nline_star:153,line_end:174|char_star:4,char_end:50"[shape="point",fillcolor="#121013",style=filled];
"def test_blueprint_url_processors(app, client):\n    bp = flask.Blueprint('frontend', __name__, url_prefix='/<lang_code>')\n\n    @bp.url_defaults\n    def add_language_code(endpoint, values):\n        values.setdefault('lang_code', flask.g.lang_code)\n\n    @bp.url_value_preprocessor\n    def pull_lang_code(endpoint, values):\n        flask.g.lang_code = values.pop('lang_code')\n\n    @bp.route('/')\n    def index():\n        return flask.url_for('.about')\n\n    @bp.route('/about')\n    def about():\n        return flask.url_for('.index')\n\n    app.register_blueprint(bp)\n\n    assert client.get('/de/').data == b'/de/about'\n    assert client.get('/de/about').data == b'/de/',type='function_definition'\nline_star:152,line_end:174|char_star:0,char_end:50"->"type='INFORMATION BLOCK'\nline_star:153,line_end:174|char_star:4,char_end:50";
"@bp.url_defaults\n    def add_language_code(endpoint, values):\n        values.setdefault('lang_code', flask.g.lang_code),type='decorated_definition'\nline_star:155,line_end:157|char_star:4,char_end:57"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:153,line_end:174|char_star:4,char_end:50"->"@bp.url_defaults\n    def add_language_code(endpoint, values):\n        values.setdefault('lang_code', flask.g.lang_code),type='decorated_definition'\nline_star:155,line_end:157|char_star:4,char_end:57";
"@bp.url_defaults,type='decorator'\nline_star:155,line_end:155|char_star:4,char_end:20"[shape="box",fillcolor="white",style=filled];
"@bp.url_defaults\n    def add_language_code(endpoint, values):\n        values.setdefault('lang_code', flask.g.lang_code),type='decorated_definition'\nline_star:155,line_end:157|char_star:4,char_end:57"->"@bp.url_defaults,type='decorator'\nline_star:155,line_end:155|char_star:4,char_end:20";
"def add_language_code(endpoint, values):\n        values.setdefault('lang_code', flask.g.lang_code),type='function_definition'\nline_star:156,line_end:157|char_star:4,char_end:57"[shape="box",fillcolor="#cee6b4",style=filled];
"@bp.url_defaults\n    def add_language_code(endpoint, values):\n        values.setdefault('lang_code', flask.g.lang_code),type='decorated_definition'\nline_star:155,line_end:157|char_star:4,char_end:57"->"def add_language_code(endpoint, values):\n        values.setdefault('lang_code', flask.g.lang_code),type='function_definition'\nline_star:156,line_end:157|char_star:4,char_end:57";
"add_language_code,type='identifier'\nline_star:156,line_end:156|char_star:8,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"def add_language_code(endpoint, values):\n        values.setdefault('lang_code', flask.g.lang_code),type='function_definition'\nline_star:156,line_end:157|char_star:4,char_end:57"->"add_language_code,type='identifier'\nline_star:156,line_end:156|char_star:8,char_end:25";
"(endpoint, values),type='parameters'\nline_star:156,line_end:156|char_star:25,char_end:43"[shape="box",fillcolor="white",style=filled];
"def add_language_code(endpoint, values):\n        values.setdefault('lang_code', flask.g.lang_code),type='function_definition'\nline_star:156,line_end:157|char_star:4,char_end:57"->"(endpoint, values),type='parameters'\nline_star:156,line_end:156|char_star:25,char_end:43";
"endpoint,type='identifier'\nline_star:156,line_end:156|char_star:26,char_end:34"[shape="point",fillcolor="#121013",style=filled];
"(endpoint, values),type='parameters'\nline_star:156,line_end:156|char_star:25,char_end:43"->"endpoint,type='identifier'\nline_star:156,line_end:156|char_star:26,char_end:34";
"values,type='identifier'\nline_star:156,line_end:156|char_star:36,char_end:42"[shape="point",fillcolor="#121013",style=filled];
"(endpoint, values),type='parameters'\nline_star:156,line_end:156|char_star:25,char_end:43"->"values,type='identifier'\nline_star:156,line_end:156|char_star:36,char_end:42";
"type='INFORMATION BLOCK'\nline_star:157,line_end:157|char_star:8,char_end:57"[shape="point",fillcolor="#121013",style=filled];
"def add_language_code(endpoint, values):\n        values.setdefault('lang_code', flask.g.lang_code),type='function_definition'\nline_star:156,line_end:157|char_star:4,char_end:57"->"type='INFORMATION BLOCK'\nline_star:157,line_end:157|char_star:8,char_end:57";
"@bp.url_value_preprocessor\n    def pull_lang_code(endpoint, values):\n        flask.g.lang_code = values.pop('lang_code'),type='decorated_definition'\nline_star:159,line_end:161|char_star:4,char_end:51"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:153,line_end:174|char_star:4,char_end:50"->"@bp.url_value_preprocessor\n    def pull_lang_code(endpoint, values):\n        flask.g.lang_code = values.pop('lang_code'),type='decorated_definition'\nline_star:159,line_end:161|char_star:4,char_end:51";
"@bp.url_value_preprocessor,type='decorator'\nline_star:159,line_end:159|char_star:4,char_end:30"[shape="box",fillcolor="white",style=filled];
"@bp.url_value_preprocessor\n    def pull_lang_code(endpoint, values):\n        flask.g.lang_code = values.pop('lang_code'),type='decorated_definition'\nline_star:159,line_end:161|char_star:4,char_end:51"->"@bp.url_value_preprocessor,type='decorator'\nline_star:159,line_end:159|char_star:4,char_end:30";
"def pull_lang_code(endpoint, values):\n        flask.g.lang_code = values.pop('lang_code'),type='function_definition'\nline_star:160,line_end:161|char_star:4,char_end:51"[shape="box",fillcolor="#cee6b4",style=filled];
"@bp.url_value_preprocessor\n    def pull_lang_code(endpoint, values):\n        flask.g.lang_code = values.pop('lang_code'),type='decorated_definition'\nline_star:159,line_end:161|char_star:4,char_end:51"->"def pull_lang_code(endpoint, values):\n        flask.g.lang_code = values.pop('lang_code'),type='function_definition'\nline_star:160,line_end:161|char_star:4,char_end:51";
"pull_lang_code,type='identifier'\nline_star:160,line_end:160|char_star:8,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"def pull_lang_code(endpoint, values):\n        flask.g.lang_code = values.pop('lang_code'),type='function_definition'\nline_star:160,line_end:161|char_star:4,char_end:51"->"pull_lang_code,type='identifier'\nline_star:160,line_end:160|char_star:8,char_end:22";
"(endpoint, values),type='parameters'\nline_star:160,line_end:160|char_star:22,char_end:40"[shape="box",fillcolor="white",style=filled];
"def pull_lang_code(endpoint, values):\n        flask.g.lang_code = values.pop('lang_code'),type='function_definition'\nline_star:160,line_end:161|char_star:4,char_end:51"->"(endpoint, values),type='parameters'\nline_star:160,line_end:160|char_star:22,char_end:40";
"endpoint,type='identifier'\nline_star:160,line_end:160|char_star:23,char_end:31"[shape="point",fillcolor="#121013",style=filled];
"(endpoint, values),type='parameters'\nline_star:160,line_end:160|char_star:22,char_end:40"->"endpoint,type='identifier'\nline_star:160,line_end:160|char_star:23,char_end:31";
"values,type='identifier'\nline_star:160,line_end:160|char_star:33,char_end:39"[shape="point",fillcolor="#121013",style=filled];
"(endpoint, values),type='parameters'\nline_star:160,line_end:160|char_star:22,char_end:40"->"values,type='identifier'\nline_star:160,line_end:160|char_star:33,char_end:39";
"type='INFORMATION BLOCK'\nline_star:161,line_end:161|char_star:8,char_end:51"[shape="point",fillcolor="#121013",style=filled];
"def pull_lang_code(endpoint, values):\n        flask.g.lang_code = values.pop('lang_code'),type='function_definition'\nline_star:160,line_end:161|char_star:4,char_end:51"->"type='INFORMATION BLOCK'\nline_star:161,line_end:161|char_star:8,char_end:51";
"@bp.route('/')\n    def index():\n        return flask.url_for('.about'),type='decorated_definition'\nline_star:163,line_end:165|char_star:4,char_end:38"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:153,line_end:174|char_star:4,char_end:50"->"@bp.route('/')\n    def index():\n        return flask.url_for('.about'),type='decorated_definition'\nline_star:163,line_end:165|char_star:4,char_end:38";
"@bp.route('/'),type='decorator'\nline_star:163,line_end:163|char_star:4,char_end:18"[shape="box",fillcolor="white",style=filled];
"@bp.route('/')\n    def index():\n        return flask.url_for('.about'),type='decorated_definition'\nline_star:163,line_end:165|char_star:4,char_end:38"->"@bp.route('/'),type='decorator'\nline_star:163,line_end:163|char_star:4,char_end:18";
"def index():\n        return flask.url_for('.about'),type='function_definition'\nline_star:164,line_end:165|char_star:4,char_end:38"[shape="box",fillcolor="#cee6b4",style=filled];
"@bp.route('/')\n    def index():\n        return flask.url_for('.about'),type='decorated_definition'\nline_star:163,line_end:165|char_star:4,char_end:38"->"def index():\n        return flask.url_for('.about'),type='function_definition'\nline_star:164,line_end:165|char_star:4,char_end:38";
"index,type='identifier'\nline_star:164,line_end:164|char_star:8,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"def index():\n        return flask.url_for('.about'),type='function_definition'\nline_star:164,line_end:165|char_star:4,char_end:38"->"index,type='identifier'\nline_star:164,line_end:164|char_star:8,char_end:13";
"type='INFORMATION BLOCK'\nline_star:165,line_end:165|char_star:8,char_end:38"[shape="point",fillcolor="#121013",style=filled];
"def index():\n        return flask.url_for('.about'),type='function_definition'\nline_star:164,line_end:165|char_star:4,char_end:38"->"type='INFORMATION BLOCK'\nline_star:165,line_end:165|char_star:8,char_end:38";
"return flask.url_for('.about'),type='return_statement'\nline_star:165,line_end:165|char_star:8,char_end:38"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:165,line_end:165|char_star:8,char_end:38"->"return flask.url_for('.about'),type='return_statement'\nline_star:165,line_end:165|char_star:8,char_end:38";
"@bp.route('/about')\n    def about():\n        return flask.url_for('.index'),type='decorated_definition'\nline_star:167,line_end:169|char_star:4,char_end:38"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:153,line_end:174|char_star:4,char_end:50"->"@bp.route('/about')\n    def about():\n        return flask.url_for('.index'),type='decorated_definition'\nline_star:167,line_end:169|char_star:4,char_end:38";
"@bp.route('/about'),type='decorator'\nline_star:167,line_end:167|char_star:4,char_end:23"[shape="box",fillcolor="white",style=filled];
"@bp.route('/about')\n    def about():\n        return flask.url_for('.index'),type='decorated_definition'\nline_star:167,line_end:169|char_star:4,char_end:38"->"@bp.route('/about'),type='decorator'\nline_star:167,line_end:167|char_star:4,char_end:23";
"def about():\n        return flask.url_for('.index'),type='function_definition'\nline_star:168,line_end:169|char_star:4,char_end:38"[shape="box",fillcolor="#cee6b4",style=filled];
"@bp.route('/about')\n    def about():\n        return flask.url_for('.index'),type='decorated_definition'\nline_star:167,line_end:169|char_star:4,char_end:38"->"def about():\n        return flask.url_for('.index'),type='function_definition'\nline_star:168,line_end:169|char_star:4,char_end:38";
"about,type='identifier'\nline_star:168,line_end:168|char_star:8,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"def about():\n        return flask.url_for('.index'),type='function_definition'\nline_star:168,line_end:169|char_star:4,char_end:38"->"about,type='identifier'\nline_star:168,line_end:168|char_star:8,char_end:13";
"type='INFORMATION BLOCK'\nline_star:169,line_end:169|char_star:8,char_end:38"[shape="point",fillcolor="#121013",style=filled];
"def about():\n        return flask.url_for('.index'),type='function_definition'\nline_star:168,line_end:169|char_star:4,char_end:38"->"type='INFORMATION BLOCK'\nline_star:169,line_end:169|char_star:8,char_end:38";
"return flask.url_for('.index'),type='return_statement'\nline_star:169,line_end:169|char_star:8,char_end:38"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:169,line_end:169|char_star:8,char_end:38"->"return flask.url_for('.index'),type='return_statement'\nline_star:169,line_end:169|char_star:8,char_end:38";
"assert client.get('/de/').data == b'/de/about',type='assert_statement'\nline_star:173,line_end:173|char_star:4,char_end:50"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:153,line_end:174|char_star:4,char_end:50"->"assert client.get('/de/').data == b'/de/about',type='assert_statement'\nline_star:173,line_end:173|char_star:4,char_end:50";
"client.get('/de/').data == b'/de/about',type='comparison_operator'\nline_star:173,line_end:173|char_star:11,char_end:50"[shape="box",fillcolor="white",style=filled];
"assert client.get('/de/').data == b'/de/about',type='assert_statement'\nline_star:173,line_end:173|char_star:4,char_end:50"->"client.get('/de/').data == b'/de/about',type='comparison_operator'\nline_star:173,line_end:173|char_star:11,char_end:50";
"client.get('/de/').data,type='attribute'\nline_star:173,line_end:173|char_star:11,char_end:34"[shape="box",fillcolor="white",style=filled];
"client.get('/de/').data == b'/de/about',type='comparison_operator'\nline_star:173,line_end:173|char_star:11,char_end:50"->"client.get('/de/').data,type='attribute'\nline_star:173,line_end:173|char_star:11,char_end:34";
"client.get('/de/'),type='call'\nline_star:173,line_end:173|char_star:11,char_end:29"[shape="box",fillcolor="white",style=filled];
"client.get('/de/').data,type='attribute'\nline_star:173,line_end:173|char_star:11,char_end:34"->"client.get('/de/'),type='call'\nline_star:173,line_end:173|char_star:11,char_end:29";
"client.get,type='attribute'\nline_star:173,line_end:173|char_star:11,char_end:21"[shape="box",fillcolor="white",style=filled];
"client.get('/de/'),type='call'\nline_star:173,line_end:173|char_star:11,char_end:29"->"client.get,type='attribute'\nline_star:173,line_end:173|char_star:11,char_end:21";
"client,type='identifier'\nline_star:173,line_end:173|char_star:11,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"client.get,type='attribute'\nline_star:173,line_end:173|char_star:11,char_end:21"->"client,type='identifier'\nline_star:173,line_end:173|char_star:11,char_end:17";
"get,type='identifier'\nline_star:173,line_end:173|char_star:18,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"client.get,type='attribute'\nline_star:173,line_end:173|char_star:11,char_end:21"->"get,type='identifier'\nline_star:173,line_end:173|char_star:18,char_end:21";
"('/de/'),type='argument_list'\nline_star:173,line_end:173|char_star:21,char_end:29"[shape="box",fillcolor="white",style=filled];
"client.get('/de/'),type='call'\nline_star:173,line_end:173|char_star:11,char_end:29"->"('/de/'),type='argument_list'\nline_star:173,line_end:173|char_star:21,char_end:29";
"data,type='identifier'\nline_star:173,line_end:173|char_star:30,char_end:34"[shape="point",fillcolor="#121013",style=filled];
"client.get('/de/').data,type='attribute'\nline_star:173,line_end:173|char_star:11,char_end:34"->"data,type='identifier'\nline_star:173,line_end:173|char_star:30,char_end:34";
"assert client.get('/de/about').data == b'/de/',type='assert_statement'\nline_star:174,line_end:174|char_star:4,char_end:50"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:153,line_end:174|char_star:4,char_end:50"->"assert client.get('/de/about').data == b'/de/',type='assert_statement'\nline_star:174,line_end:174|char_star:4,char_end:50";
"client.get('/de/about').data == b'/de/',type='comparison_operator'\nline_star:174,line_end:174|char_star:11,char_end:50"[shape="box",fillcolor="white",style=filled];
"assert client.get('/de/about').data == b'/de/',type='assert_statement'\nline_star:174,line_end:174|char_star:4,char_end:50"->"client.get('/de/about').data == b'/de/',type='comparison_operator'\nline_star:174,line_end:174|char_star:11,char_end:50";
"client.get('/de/about').data,type='attribute'\nline_star:174,line_end:174|char_star:11,char_end:39"[shape="box",fillcolor="white",style=filled];
"client.get('/de/about').data == b'/de/',type='comparison_operator'\nline_star:174,line_end:174|char_star:11,char_end:50"->"client.get('/de/about').data,type='attribute'\nline_star:174,line_end:174|char_star:11,char_end:39";
"client.get('/de/about'),type='call'\nline_star:174,line_end:174|char_star:11,char_end:34"[shape="box",fillcolor="white",style=filled];
"client.get('/de/about').data,type='attribute'\nline_star:174,line_end:174|char_star:11,char_end:39"->"client.get('/de/about'),type='call'\nline_star:174,line_end:174|char_star:11,char_end:34";
"client.get,type='attribute'\nline_star:174,line_end:174|char_star:11,char_end:21"[shape="box",fillcolor="white",style=filled];
"client.get('/de/about'),type='call'\nline_star:174,line_end:174|char_star:11,char_end:34"->"client.get,type='attribute'\nline_star:174,line_end:174|char_star:11,char_end:21";
"client,type='identifier'\nline_star:174,line_end:174|char_star:11,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"client.get,type='attribute'\nline_star:174,line_end:174|char_star:11,char_end:21"->"client,type='identifier'\nline_star:174,line_end:174|char_star:11,char_end:17";
"get,type='identifier'\nline_star:174,line_end:174|char_star:18,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"client.get,type='attribute'\nline_star:174,line_end:174|char_star:11,char_end:21"->"get,type='identifier'\nline_star:174,line_end:174|char_star:18,char_end:21";
"('/de/about'),type='argument_list'\nline_star:174,line_end:174|char_star:21,char_end:34"[shape="box",fillcolor="white",style=filled];
"client.get('/de/about'),type='call'\nline_star:174,line_end:174|char_star:11,char_end:34"->"('/de/about'),type='argument_list'\nline_star:174,line_end:174|char_star:21,char_end:34";
"data,type='identifier'\nline_star:174,line_end:174|char_star:35,char_end:39"[shape="point",fillcolor="#121013",style=filled];
"client.get('/de/about').data,type='attribute'\nline_star:174,line_end:174|char_star:11,char_end:39"->"data,type='identifier'\nline_star:174,line_end:174|char_star:35,char_end:39";
"def test_templates_and_static(test_apps):\n    from blueprintapp import app\n\n    client = app.test_client()\n\n    rv = client.get('/')\n    assert rv.data == b'Hello from the Frontend'\n    rv = client.get('/admin/')\n    assert rv.data == b'Hello from the Admin'\n    rv = client.get('/admin/index2')\n    assert rv.data == b'Hello from the Admin'\n    rv = client.get('/admin/static/test.txt')\n    assert rv.data.strip() == b'Admin File'\n    rv.close()\n    rv = client.get('/admin/static/css/test.css')\n    assert rv.data.strip() == b'/* nested file */'\n    rv.close()\n\n    # try/finally, in case other tests use this app for Blueprint tests.\n    max_age_default = app.config['SEND_FILE_MAX_AGE_DEFAULT']\n    try:\n        expected_max_age = 3600\n        if app.config['SEND_FILE_MAX_AGE_DEFAULT'] == expected_max_age:\n            expected_max_age = 7200\n        app.config['SEND_FILE_MAX_AGE_DEFAULT'] = expected_max_age\n        rv = client.get('/admin/static/css/test.css')\n        cc = parse_cache_control_header(rv.headers['Cache-Control'])\n        assert cc.max_age == expected_max_age\n        rv.close()\n    finally:\n        app.config['SEND_FILE_MAX_AGE_DEFAULT'] = max_age_default\n\n    with app.test_request_context():\n        assert (\n            flask.url_for('admin.static', filename='test.txt')\n            == '/admin/static/test.txt'\n        )\n\n    with app.test_request_context():\n        with pytest.raises(TemplateNotFound) as e:\n            flask.render_template('missing.html')\n        assert e.value.name == 'missing.html'\n\n    with flask.Flask(__name__).test_request_context():\n        assert flask.render_template('nested/nested.txt') == 'I'm nested',type='function_definition'\nline_star:177,line_end:221|char_star:0,char_end:73"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_templates_and_static(test_apps):\n    from blueprintapp import app\n\n    client = app.test_client()\n\n    rv = client.get('/')\n    assert rv.data == b'Hello from the Frontend'\n    rv = client.get('/admin/')\n    assert rv.data == b'Hello from the Admin'\n    rv = client.get('/admin/index2')\n    assert rv.data == b'Hello from the Admin'\n    rv = client.get('/admin/static/test.txt')\n    assert rv.data.strip() == b'Admin File'\n    rv.close()\n    rv = client.get('/admin/static/css/test.css')\n    assert rv.data.strip() == b'/* nested file */'\n    rv.close()\n\n    # try/finally, in case other tests use this app for Blueprint tests.\n    max_age_default = app.config['SEND_FILE_MAX_AGE_DEFAULT']\n    try:\n        expected_max_age = 3600\n        if app.config['SEND_FILE_MAX_AGE_DEFAULT'] == expected_max_age:\n            expected_max_age = 7200\n        app.config['SEND_FILE_MAX_AGE_DEFAULT'] = expected_max_age\n        rv = client.get('/admin/static/css/test.css')\n        cc = parse_cache_control_header(rv.headers['Cache-Control'])\n        assert cc.max_age == expected_max_age\n        rv.close()\n    finally:\n        app.config['SEND_FILE_MAX_AGE_DEFAULT'] = max_age_default\n\n    with app.test_request_context():\n        assert (\n            flask.url_for('admin.static', filename='test.txt')\n            == '/admin/static/test.txt'\n        )\n\n    with app.test_request_context():\n        with pytest.raises(TemplateNotFound) as e:\n            flask.render_template('missing.html')\n        assert e.value.name == 'missing.html'\n\n    with flask.Flask(__name__).test_request_context():\n        assert flask.render_template('nested/nested.txt') == 'I'm nested',type='function_definition'\nline_star:177,line_end:221|char_star:0,char_end:73";
"test_templates_and_static,type='identifier'\nline_star:177,line_end:177|char_star:4,char_end:29"[shape="point",fillcolor="#121013",style=filled];
"def test_templates_and_static(test_apps):\n    from blueprintapp import app\n\n    client = app.test_client()\n\n    rv = client.get('/')\n    assert rv.data == b'Hello from the Frontend'\n    rv = client.get('/admin/')\n    assert rv.data == b'Hello from the Admin'\n    rv = client.get('/admin/index2')\n    assert rv.data == b'Hello from the Admin'\n    rv = client.get('/admin/static/test.txt')\n    assert rv.data.strip() == b'Admin File'\n    rv.close()\n    rv = client.get('/admin/static/css/test.css')\n    assert rv.data.strip() == b'/* nested file */'\n    rv.close()\n\n    # try/finally, in case other tests use this app for Blueprint tests.\n    max_age_default = app.config['SEND_FILE_MAX_AGE_DEFAULT']\n    try:\n        expected_max_age = 3600\n        if app.config['SEND_FILE_MAX_AGE_DEFAULT'] == expected_max_age:\n            expected_max_age = 7200\n        app.config['SEND_FILE_MAX_AGE_DEFAULT'] = expected_max_age\n        rv = client.get('/admin/static/css/test.css')\n        cc = parse_cache_control_header(rv.headers['Cache-Control'])\n        assert cc.max_age == expected_max_age\n        rv.close()\n    finally:\n        app.config['SEND_FILE_MAX_AGE_DEFAULT'] = max_age_default\n\n    with app.test_request_context():\n        assert (\n            flask.url_for('admin.static', filename='test.txt')\n            == '/admin/static/test.txt'\n        )\n\n    with app.test_request_context():\n        with pytest.raises(TemplateNotFound) as e:\n            flask.render_template('missing.html')\n        assert e.value.name == 'missing.html'\n\n    with flask.Flask(__name__).test_request_context():\n        assert flask.render_template('nested/nested.txt') == 'I'm nested',type='function_definition'\nline_star:177,line_end:221|char_star:0,char_end:73"->"test_templates_and_static,type='identifier'\nline_star:177,line_end:177|char_star:4,char_end:29";
"(test_apps),type='parameters'\nline_star:177,line_end:177|char_star:29,char_end:40"[shape="box",fillcolor="white",style=filled];
"def test_templates_and_static(test_apps):\n    from blueprintapp import app\n\n    client = app.test_client()\n\n    rv = client.get('/')\n    assert rv.data == b'Hello from the Frontend'\n    rv = client.get('/admin/')\n    assert rv.data == b'Hello from the Admin'\n    rv = client.get('/admin/index2')\n    assert rv.data == b'Hello from the Admin'\n    rv = client.get('/admin/static/test.txt')\n    assert rv.data.strip() == b'Admin File'\n    rv.close()\n    rv = client.get('/admin/static/css/test.css')\n    assert rv.data.strip() == b'/* nested file */'\n    rv.close()\n\n    # try/finally, in case other tests use this app for Blueprint tests.\n    max_age_default = app.config['SEND_FILE_MAX_AGE_DEFAULT']\n    try:\n        expected_max_age = 3600\n        if app.config['SEND_FILE_MAX_AGE_DEFAULT'] == expected_max_age:\n            expected_max_age = 7200\n        app.config['SEND_FILE_MAX_AGE_DEFAULT'] = expected_max_age\n        rv = client.get('/admin/static/css/test.css')\n        cc = parse_cache_control_header(rv.headers['Cache-Control'])\n        assert cc.max_age == expected_max_age\n        rv.close()\n    finally:\n        app.config['SEND_FILE_MAX_AGE_DEFAULT'] = max_age_default\n\n    with app.test_request_context():\n        assert (\n            flask.url_for('admin.static', filename='test.txt')\n            == '/admin/static/test.txt'\n        )\n\n    with app.test_request_context():\n        with pytest.raises(TemplateNotFound) as e:\n            flask.render_template('missing.html')\n        assert e.value.name == 'missing.html'\n\n    with flask.Flask(__name__).test_request_context():\n        assert flask.render_template('nested/nested.txt') == 'I'm nested',type='function_definition'\nline_star:177,line_end:221|char_star:0,char_end:73"->"(test_apps),type='parameters'\nline_star:177,line_end:177|char_star:29,char_end:40";
"test_apps,type='identifier'\nline_star:177,line_end:177|char_star:30,char_end:39"[shape="point",fillcolor="#121013",style=filled];
"(test_apps),type='parameters'\nline_star:177,line_end:177|char_star:29,char_end:40"->"test_apps,type='identifier'\nline_star:177,line_end:177|char_star:30,char_end:39";
"type='INFORMATION BLOCK'\nline_star:178,line_end:221|char_star:4,char_end:73"[shape="point",fillcolor="#121013",style=filled];
"def test_templates_and_static(test_apps):\n    from blueprintapp import app\n\n    client = app.test_client()\n\n    rv = client.get('/')\n    assert rv.data == b'Hello from the Frontend'\n    rv = client.get('/admin/')\n    assert rv.data == b'Hello from the Admin'\n    rv = client.get('/admin/index2')\n    assert rv.data == b'Hello from the Admin'\n    rv = client.get('/admin/static/test.txt')\n    assert rv.data.strip() == b'Admin File'\n    rv.close()\n    rv = client.get('/admin/static/css/test.css')\n    assert rv.data.strip() == b'/* nested file */'\n    rv.close()\n\n    # try/finally, in case other tests use this app for Blueprint tests.\n    max_age_default = app.config['SEND_FILE_MAX_AGE_DEFAULT']\n    try:\n        expected_max_age = 3600\n        if app.config['SEND_FILE_MAX_AGE_DEFAULT'] == expected_max_age:\n            expected_max_age = 7200\n        app.config['SEND_FILE_MAX_AGE_DEFAULT'] = expected_max_age\n        rv = client.get('/admin/static/css/test.css')\n        cc = parse_cache_control_header(rv.headers['Cache-Control'])\n        assert cc.max_age == expected_max_age\n        rv.close()\n    finally:\n        app.config['SEND_FILE_MAX_AGE_DEFAULT'] = max_age_default\n\n    with app.test_request_context():\n        assert (\n            flask.url_for('admin.static', filename='test.txt')\n            == '/admin/static/test.txt'\n        )\n\n    with app.test_request_context():\n        with pytest.raises(TemplateNotFound) as e:\n            flask.render_template('missing.html')\n        assert e.value.name == 'missing.html'\n\n    with flask.Flask(__name__).test_request_context():\n        assert flask.render_template('nested/nested.txt') == 'I'm nested',type='function_definition'\nline_star:177,line_end:221|char_star:0,char_end:73"->"type='INFORMATION BLOCK'\nline_star:178,line_end:221|char_star:4,char_end:73";
"from blueprintapp import app,type='import_from_statement'\nline_star:178,line_end:178|char_star:4,char_end:32"[shape="box",fillcolor="#f48b29",style=filled];
"type='INFORMATION BLOCK'\nline_star:178,line_end:221|char_star:4,char_end:73"->"from blueprintapp import app,type='import_from_statement'\nline_star:178,line_end:178|char_star:4,char_end:32";
"assert rv.data == b'Hello from the Frontend',type='assert_statement'\nline_star:183,line_end:183|char_star:4,char_end:48"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:178,line_end:221|char_star:4,char_end:73"->"assert rv.data == b'Hello from the Frontend',type='assert_statement'\nline_star:183,line_end:183|char_star:4,char_end:48";
"rv.data == b'Hello from the Frontend',type='comparison_operator'\nline_star:183,line_end:183|char_star:11,char_end:48"[shape="box",fillcolor="white",style=filled];
"assert rv.data == b'Hello from the Frontend',type='assert_statement'\nline_star:183,line_end:183|char_star:4,char_end:48"->"rv.data == b'Hello from the Frontend',type='comparison_operator'\nline_star:183,line_end:183|char_star:11,char_end:48";
"rv.data,type='attribute'\nline_star:183,line_end:183|char_star:11,char_end:18"[shape="box",fillcolor="white",style=filled];
"rv.data == b'Hello from the Frontend',type='comparison_operator'\nline_star:183,line_end:183|char_star:11,char_end:48"->"rv.data,type='attribute'\nline_star:183,line_end:183|char_star:11,char_end:18";
"rv,type='identifier'\nline_star:183,line_end:183|char_star:11,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"rv.data,type='attribute'\nline_star:183,line_end:183|char_star:11,char_end:18"->"rv,type='identifier'\nline_star:183,line_end:183|char_star:11,char_end:13";
"data,type='identifier'\nline_star:183,line_end:183|char_star:14,char_end:18"[shape="point",fillcolor="#121013",style=filled];
"rv.data,type='attribute'\nline_star:183,line_end:183|char_star:11,char_end:18"->"data,type='identifier'\nline_star:183,line_end:183|char_star:14,char_end:18";
"assert rv.data == b'Hello from the Admin',type='assert_statement'\nline_star:185,line_end:185|char_star:4,char_end:45"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:178,line_end:221|char_star:4,char_end:73"->"assert rv.data == b'Hello from the Admin',type='assert_statement'\nline_star:185,line_end:185|char_star:4,char_end:45";
"rv.data == b'Hello from the Admin',type='comparison_operator'\nline_star:185,line_end:185|char_star:11,char_end:45"[shape="box",fillcolor="white",style=filled];
"assert rv.data == b'Hello from the Admin',type='assert_statement'\nline_star:185,line_end:185|char_star:4,char_end:45"->"rv.data == b'Hello from the Admin',type='comparison_operator'\nline_star:185,line_end:185|char_star:11,char_end:45";
"rv.data,type='attribute'\nline_star:185,line_end:185|char_star:11,char_end:18"[shape="box",fillcolor="white",style=filled];
"rv.data == b'Hello from the Admin',type='comparison_operator'\nline_star:185,line_end:185|char_star:11,char_end:45"->"rv.data,type='attribute'\nline_star:185,line_end:185|char_star:11,char_end:18";
"rv,type='identifier'\nline_star:185,line_end:185|char_star:11,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"rv.data,type='attribute'\nline_star:185,line_end:185|char_star:11,char_end:18"->"rv,type='identifier'\nline_star:185,line_end:185|char_star:11,char_end:13";
"data,type='identifier'\nline_star:185,line_end:185|char_star:14,char_end:18"[shape="point",fillcolor="#121013",style=filled];
"rv.data,type='attribute'\nline_star:185,line_end:185|char_star:11,char_end:18"->"data,type='identifier'\nline_star:185,line_end:185|char_star:14,char_end:18";
"assert rv.data == b'Hello from the Admin',type='assert_statement'\nline_star:187,line_end:187|char_star:4,char_end:45"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:178,line_end:221|char_star:4,char_end:73"->"assert rv.data == b'Hello from the Admin',type='assert_statement'\nline_star:187,line_end:187|char_star:4,char_end:45";
"rv.data == b'Hello from the Admin',type='comparison_operator'\nline_star:187,line_end:187|char_star:11,char_end:45"[shape="box",fillcolor="white",style=filled];
"assert rv.data == b'Hello from the Admin',type='assert_statement'\nline_star:187,line_end:187|char_star:4,char_end:45"->"rv.data == b'Hello from the Admin',type='comparison_operator'\nline_star:187,line_end:187|char_star:11,char_end:45";
"rv.data,type='attribute'\nline_star:187,line_end:187|char_star:11,char_end:18"[shape="box",fillcolor="white",style=filled];
"rv.data == b'Hello from the Admin',type='comparison_operator'\nline_star:187,line_end:187|char_star:11,char_end:45"->"rv.data,type='attribute'\nline_star:187,line_end:187|char_star:11,char_end:18";
"rv,type='identifier'\nline_star:187,line_end:187|char_star:11,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"rv.data,type='attribute'\nline_star:187,line_end:187|char_star:11,char_end:18"->"rv,type='identifier'\nline_star:187,line_end:187|char_star:11,char_end:13";
"data,type='identifier'\nline_star:187,line_end:187|char_star:14,char_end:18"[shape="point",fillcolor="#121013",style=filled];
"rv.data,type='attribute'\nline_star:187,line_end:187|char_star:11,char_end:18"->"data,type='identifier'\nline_star:187,line_end:187|char_star:14,char_end:18";
"assert rv.data.strip() == b'Admin File',type='assert_statement'\nline_star:189,line_end:189|char_star:4,char_end:43"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:178,line_end:221|char_star:4,char_end:73"->"assert rv.data.strip() == b'Admin File',type='assert_statement'\nline_star:189,line_end:189|char_star:4,char_end:43";
"rv.data.strip() == b'Admin File',type='comparison_operator'\nline_star:189,line_end:189|char_star:11,char_end:43"[shape="box",fillcolor="white",style=filled];
"assert rv.data.strip() == b'Admin File',type='assert_statement'\nline_star:189,line_end:189|char_star:4,char_end:43"->"rv.data.strip() == b'Admin File',type='comparison_operator'\nline_star:189,line_end:189|char_star:11,char_end:43";
"rv.data.strip(),type='call'\nline_star:189,line_end:189|char_star:11,char_end:26"[shape="box",fillcolor="white",style=filled];
"rv.data.strip() == b'Admin File',type='comparison_operator'\nline_star:189,line_end:189|char_star:11,char_end:43"->"rv.data.strip(),type='call'\nline_star:189,line_end:189|char_star:11,char_end:26";
"rv.data.strip,type='attribute'\nline_star:189,line_end:189|char_star:11,char_end:24"[shape="box",fillcolor="white",style=filled];
"rv.data.strip(),type='call'\nline_star:189,line_end:189|char_star:11,char_end:26"->"rv.data.strip,type='attribute'\nline_star:189,line_end:189|char_star:11,char_end:24";
"rv.data,type='attribute'\nline_star:189,line_end:189|char_star:11,char_end:18"[shape="box",fillcolor="white",style=filled];
"rv.data.strip,type='attribute'\nline_star:189,line_end:189|char_star:11,char_end:24"->"rv.data,type='attribute'\nline_star:189,line_end:189|char_star:11,char_end:18";
"rv,type='identifier'\nline_star:189,line_end:189|char_star:11,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"rv.data,type='attribute'\nline_star:189,line_end:189|char_star:11,char_end:18"->"rv,type='identifier'\nline_star:189,line_end:189|char_star:11,char_end:13";
"data,type='identifier'\nline_star:189,line_end:189|char_star:14,char_end:18"[shape="point",fillcolor="#121013",style=filled];
"rv.data,type='attribute'\nline_star:189,line_end:189|char_star:11,char_end:18"->"data,type='identifier'\nline_star:189,line_end:189|char_star:14,char_end:18";
"strip,type='identifier'\nline_star:189,line_end:189|char_star:19,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"rv.data.strip,type='attribute'\nline_star:189,line_end:189|char_star:11,char_end:24"->"strip,type='identifier'\nline_star:189,line_end:189|char_star:19,char_end:24";
"assert rv.data.strip() == b'/* nested file */',type='assert_statement'\nline_star:192,line_end:192|char_star:4,char_end:50"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:178,line_end:221|char_star:4,char_end:73"->"assert rv.data.strip() == b'/* nested file */',type='assert_statement'\nline_star:192,line_end:192|char_star:4,char_end:50";
"rv.data.strip() == b'/* nested file */',type='comparison_operator'\nline_star:192,line_end:192|char_star:11,char_end:50"[shape="box",fillcolor="white",style=filled];
"assert rv.data.strip() == b'/* nested file */',type='assert_statement'\nline_star:192,line_end:192|char_star:4,char_end:50"->"rv.data.strip() == b'/* nested file */',type='comparison_operator'\nline_star:192,line_end:192|char_star:11,char_end:50";
"rv.data.strip(),type='call'\nline_star:192,line_end:192|char_star:11,char_end:26"[shape="box",fillcolor="white",style=filled];
"rv.data.strip() == b'/* nested file */',type='comparison_operator'\nline_star:192,line_end:192|char_star:11,char_end:50"->"rv.data.strip(),type='call'\nline_star:192,line_end:192|char_star:11,char_end:26";
"rv.data.strip,type='attribute'\nline_star:192,line_end:192|char_star:11,char_end:24"[shape="box",fillcolor="white",style=filled];
"rv.data.strip(),type='call'\nline_star:192,line_end:192|char_star:11,char_end:26"->"rv.data.strip,type='attribute'\nline_star:192,line_end:192|char_star:11,char_end:24";
"rv.data,type='attribute'\nline_star:192,line_end:192|char_star:11,char_end:18"[shape="box",fillcolor="white",style=filled];
"rv.data.strip,type='attribute'\nline_star:192,line_end:192|char_star:11,char_end:24"->"rv.data,type='attribute'\nline_star:192,line_end:192|char_star:11,char_end:18";
"rv,type='identifier'\nline_star:192,line_end:192|char_star:11,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"rv.data,type='attribute'\nline_star:192,line_end:192|char_star:11,char_end:18"->"rv,type='identifier'\nline_star:192,line_end:192|char_star:11,char_end:13";
"data,type='identifier'\nline_star:192,line_end:192|char_star:14,char_end:18"[shape="point",fillcolor="#121013",style=filled];
"rv.data,type='attribute'\nline_star:192,line_end:192|char_star:11,char_end:18"->"data,type='identifier'\nline_star:192,line_end:192|char_star:14,char_end:18";
"strip,type='identifier'\nline_star:192,line_end:192|char_star:19,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"rv.data.strip,type='attribute'\nline_star:192,line_end:192|char_star:11,char_end:24"->"strip,type='identifier'\nline_star:192,line_end:192|char_star:19,char_end:24";
"# try/finally, in case other tests use this app for Blueprint tests.,type='comment'\nline_star:195,line_end:195|char_star:4,char_end:72"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:178,line_end:221|char_star:4,char_end:73"->"# try/finally, in case other tests use this app for Blueprint tests.,type='comment'\nline_star:195,line_end:195|char_star:4,char_end:72";
"try:\n        expected_max_age = 3600\n        if app.config['SEND_FILE_MAX_AGE_DEFAULT'] == expected_max_age:\n            expected_max_age = 7200\n        app.config['SEND_FILE_MAX_AGE_DEFAULT'] = expected_max_age\n        rv = client.get('/admin/static/css/test.css')\n        cc = parse_cache_control_header(rv.headers['Cache-Control'])\n        assert cc.max_age == expected_max_age\n        rv.close()\n    finally:\n        app.config['SEND_FILE_MAX_AGE_DEFAULT'] = max_age_default,type='try_statement'\nline_star:197,line_end:207|char_star:4,char_end:65"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:178,line_end:221|char_star:4,char_end:73"->"try:\n        expected_max_age = 3600\n        if app.config['SEND_FILE_MAX_AGE_DEFAULT'] == expected_max_age:\n            expected_max_age = 7200\n        app.config['SEND_FILE_MAX_AGE_DEFAULT'] = expected_max_age\n        rv = client.get('/admin/static/css/test.css')\n        cc = parse_cache_control_header(rv.headers['Cache-Control'])\n        assert cc.max_age == expected_max_age\n        rv.close()\n    finally:\n        app.config['SEND_FILE_MAX_AGE_DEFAULT'] = max_age_default,type='try_statement'\nline_star:197,line_end:207|char_star:4,char_end:65";
"try,type='try'\nline_star:197,line_end:197|char_star:4,char_end:7"[shape="box",fillcolor="white",style=filled];
"try:\n        expected_max_age = 3600\n        if app.config['SEND_FILE_MAX_AGE_DEFAULT'] == expected_max_age:\n            expected_max_age = 7200\n        app.config['SEND_FILE_MAX_AGE_DEFAULT'] = expected_max_age\n        rv = client.get('/admin/static/css/test.css')\n        cc = parse_cache_control_header(rv.headers['Cache-Control'])\n        assert cc.max_age == expected_max_age\n        rv.close()\n    finally:\n        app.config['SEND_FILE_MAX_AGE_DEFAULT'] = max_age_default,type='try_statement'\nline_star:197,line_end:207|char_star:4,char_end:65"->"try,type='try'\nline_star:197,line_end:197|char_star:4,char_end:7";
"type='INFORMATION BLOCK'\nline_star:198,line_end:205|char_star:8,char_end:18"[shape="point",fillcolor="#121013",style=filled];
"try:\n        expected_max_age = 3600\n        if app.config['SEND_FILE_MAX_AGE_DEFAULT'] == expected_max_age:\n            expected_max_age = 7200\n        app.config['SEND_FILE_MAX_AGE_DEFAULT'] = expected_max_age\n        rv = client.get('/admin/static/css/test.css')\n        cc = parse_cache_control_header(rv.headers['Cache-Control'])\n        assert cc.max_age == expected_max_age\n        rv.close()\n    finally:\n        app.config['SEND_FILE_MAX_AGE_DEFAULT'] = max_age_default,type='try_statement'\nline_star:197,line_end:207|char_star:4,char_end:65"->"type='INFORMATION BLOCK'\nline_star:198,line_end:205|char_star:8,char_end:18";
"if app.config['SEND_FILE_MAX_AGE_DEFAULT'] == expected_max_age:\n            expected_max_age = 7200,type='if_statement'\nline_star:199,line_end:200|char_star:8,char_end:35"[shape="box",fillcolor="#9ecca4",style=filled];
"type='INFORMATION BLOCK'\nline_star:198,line_end:205|char_star:8,char_end:18"->"if app.config['SEND_FILE_MAX_AGE_DEFAULT'] == expected_max_age:\n            expected_max_age = 7200,type='if_statement'\nline_star:199,line_end:200|char_star:8,char_end:35";
"assert cc.max_age == expected_max_age,type='assert_statement'\nline_star:204,line_end:204|char_star:8,char_end:45"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:198,line_end:205|char_star:8,char_end:18"->"assert cc.max_age == expected_max_age,type='assert_statement'\nline_star:204,line_end:204|char_star:8,char_end:45";
"cc.max_age == expected_max_age,type='comparison_operator'\nline_star:204,line_end:204|char_star:15,char_end:45"[shape="box",fillcolor="white",style=filled];
"assert cc.max_age == expected_max_age,type='assert_statement'\nline_star:204,line_end:204|char_star:8,char_end:45"->"cc.max_age == expected_max_age,type='comparison_operator'\nline_star:204,line_end:204|char_star:15,char_end:45";
"cc.max_age,type='attribute'\nline_star:204,line_end:204|char_star:15,char_end:25"[shape="box",fillcolor="white",style=filled];
"cc.max_age == expected_max_age,type='comparison_operator'\nline_star:204,line_end:204|char_star:15,char_end:45"->"cc.max_age,type='attribute'\nline_star:204,line_end:204|char_star:15,char_end:25";
"cc,type='identifier'\nline_star:204,line_end:204|char_star:15,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"cc.max_age,type='attribute'\nline_star:204,line_end:204|char_star:15,char_end:25"->"cc,type='identifier'\nline_star:204,line_end:204|char_star:15,char_end:17";
"max_age,type='identifier'\nline_star:204,line_end:204|char_star:18,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"cc.max_age,type='attribute'\nline_star:204,line_end:204|char_star:15,char_end:25"->"max_age,type='identifier'\nline_star:204,line_end:204|char_star:18,char_end:25";
"expected_max_age,type='identifier'\nline_star:204,line_end:204|char_star:29,char_end:45"[shape="point",fillcolor="#121013",style=filled];
"cc.max_age == expected_max_age,type='comparison_operator'\nline_star:204,line_end:204|char_star:15,char_end:45"->"expected_max_age,type='identifier'\nline_star:204,line_end:204|char_star:29,char_end:45";
"finally:\n        app.config['SEND_FILE_MAX_AGE_DEFAULT'] = max_age_default,type='finally_clause'\nline_star:206,line_end:207|char_star:4,char_end:65"[shape="box",fillcolor="white",style=filled];
"try:\n        expected_max_age = 3600\n        if app.config['SEND_FILE_MAX_AGE_DEFAULT'] == expected_max_age:\n            expected_max_age = 7200\n        app.config['SEND_FILE_MAX_AGE_DEFAULT'] = expected_max_age\n        rv = client.get('/admin/static/css/test.css')\n        cc = parse_cache_control_header(rv.headers['Cache-Control'])\n        assert cc.max_age == expected_max_age\n        rv.close()\n    finally:\n        app.config['SEND_FILE_MAX_AGE_DEFAULT'] = max_age_default,type='try_statement'\nline_star:197,line_end:207|char_star:4,char_end:65"->"finally:\n        app.config['SEND_FILE_MAX_AGE_DEFAULT'] = max_age_default,type='finally_clause'\nline_star:206,line_end:207|char_star:4,char_end:65";
"finally,type='finally'\nline_star:206,line_end:206|char_star:4,char_end:11"[shape="box",fillcolor="white",style=filled];
"finally:\n        app.config['SEND_FILE_MAX_AGE_DEFAULT'] = max_age_default,type='finally_clause'\nline_star:206,line_end:207|char_star:4,char_end:65"->"finally,type='finally'\nline_star:206,line_end:206|char_star:4,char_end:11";
"type='INFORMATION BLOCK'\nline_star:207,line_end:207|char_star:8,char_end:65"[shape="point",fillcolor="#121013",style=filled];
"finally:\n        app.config['SEND_FILE_MAX_AGE_DEFAULT'] = max_age_default,type='finally_clause'\nline_star:206,line_end:207|char_star:4,char_end:65"->"type='INFORMATION BLOCK'\nline_star:207,line_end:207|char_star:8,char_end:65";
"with app.test_request_context():\n        assert (\n            flask.url_for('admin.static', filename='test.txt')\n            == '/admin/static/test.txt'\n        ),type='with_statement'\nline_star:209,line_end:213|char_star:4,char_end:9"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:178,line_end:221|char_star:4,char_end:73"->"with app.test_request_context():\n        assert (\n            flask.url_for('admin.static', filename='test.txt')\n            == '/admin/static/test.txt'\n        ),type='with_statement'\nline_star:209,line_end:213|char_star:4,char_end:9";
"app.test_request_context(),type='with_clause'\nline_star:209,line_end:209|char_star:9,char_end:35"[shape="box",fillcolor="white",style=filled];
"with app.test_request_context():\n        assert (\n            flask.url_for('admin.static', filename='test.txt')\n            == '/admin/static/test.txt'\n        ),type='with_statement'\nline_star:209,line_end:213|char_star:4,char_end:9"->"app.test_request_context(),type='with_clause'\nline_star:209,line_end:209|char_star:9,char_end:35";
"type='INFORMATION BLOCK'\nline_star:210,line_end:213|char_star:8,char_end:9"[shape="point",fillcolor="#121013",style=filled];
"with app.test_request_context():\n        assert (\n            flask.url_for('admin.static', filename='test.txt')\n            == '/admin/static/test.txt'\n        ),type='with_statement'\nline_star:209,line_end:213|char_star:4,char_end:9"->"type='INFORMATION BLOCK'\nline_star:210,line_end:213|char_star:8,char_end:9";
"assert (\n            flask.url_for('admin.static', filename='test.txt')\n            == '/admin/static/test.txt'\n        ),type='assert_statement'\nline_star:210,line_end:213|char_star:8,char_end:9"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:210,line_end:213|char_star:8,char_end:9"->"assert (\n            flask.url_for('admin.static', filename='test.txt')\n            == '/admin/static/test.txt'\n        ),type='assert_statement'\nline_star:210,line_end:213|char_star:8,char_end:9";
"(\n            flask.url_for('admin.static', filename='test.txt')\n            == '/admin/static/test.txt'\n        ),type='parenthesized_expression'\nline_star:210,line_end:213|char_star:15,char_end:9"[shape="box",fillcolor="white",style=filled];
"assert (\n            flask.url_for('admin.static', filename='test.txt')\n            == '/admin/static/test.txt'\n        ),type='assert_statement'\nline_star:210,line_end:213|char_star:8,char_end:9"->"(\n            flask.url_for('admin.static', filename='test.txt')\n            == '/admin/static/test.txt'\n        ),type='parenthesized_expression'\nline_star:210,line_end:213|char_star:15,char_end:9";
"flask.url_for('admin.static', filename='test.txt')\n            == '/admin/static/test.txt',type='comparison_operator'\nline_star:211,line_end:212|char_star:12,char_end:39"[shape="box",fillcolor="white",style=filled];
"(\n            flask.url_for('admin.static', filename='test.txt')\n            == '/admin/static/test.txt'\n        ),type='parenthesized_expression'\nline_star:210,line_end:213|char_star:15,char_end:9"->"flask.url_for('admin.static', filename='test.txt')\n            == '/admin/static/test.txt',type='comparison_operator'\nline_star:211,line_end:212|char_star:12,char_end:39";
"flask.url_for('admin.static', filename='test.txt'),type='call'\nline_star:211,line_end:211|char_star:12,char_end:62"[shape="box",fillcolor="white",style=filled];
"flask.url_for('admin.static', filename='test.txt')\n            == '/admin/static/test.txt',type='comparison_operator'\nline_star:211,line_end:212|char_star:12,char_end:39"->"flask.url_for('admin.static', filename='test.txt'),type='call'\nline_star:211,line_end:211|char_star:12,char_end:62";
"flask.url_for,type='attribute'\nline_star:211,line_end:211|char_star:12,char_end:25"[shape="box",fillcolor="white",style=filled];
"flask.url_for('admin.static', filename='test.txt'),type='call'\nline_star:211,line_end:211|char_star:12,char_end:62"->"flask.url_for,type='attribute'\nline_star:211,line_end:211|char_star:12,char_end:25";
"flask,type='identifier'\nline_star:211,line_end:211|char_star:12,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"flask.url_for,type='attribute'\nline_star:211,line_end:211|char_star:12,char_end:25"->"flask,type='identifier'\nline_star:211,line_end:211|char_star:12,char_end:17";
"url_for,type='identifier'\nline_star:211,line_end:211|char_star:18,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"flask.url_for,type='attribute'\nline_star:211,line_end:211|char_star:12,char_end:25"->"url_for,type='identifier'\nline_star:211,line_end:211|char_star:18,char_end:25";
"('admin.static', filename='test.txt'),type='argument_list'\nline_star:211,line_end:211|char_star:25,char_end:62"[shape="box",fillcolor="white",style=filled];
"flask.url_for('admin.static', filename='test.txt'),type='call'\nline_star:211,line_end:211|char_star:12,char_end:62"->"('admin.static', filename='test.txt'),type='argument_list'\nline_star:211,line_end:211|char_star:25,char_end:62";
"filename='test.txt',type='keyword_argument'\nline_star:211,line_end:211|char_star:42,char_end:61"[shape="box",fillcolor="white",style=filled];
"('admin.static', filename='test.txt'),type='argument_list'\nline_star:211,line_end:211|char_star:25,char_end:62"->"filename='test.txt',type='keyword_argument'\nline_star:211,line_end:211|char_star:42,char_end:61";
"filename,type='identifier'\nline_star:211,line_end:211|char_star:42,char_end:50"[shape="point",fillcolor="#121013",style=filled];
"filename='test.txt',type='keyword_argument'\nline_star:211,line_end:211|char_star:42,char_end:61"->"filename,type='identifier'\nline_star:211,line_end:211|char_star:42,char_end:50";
"with app.test_request_context():\n        with pytest.raises(TemplateNotFound) as e:\n            flask.render_template('missing.html')\n        assert e.value.name == 'missing.html',type='with_statement'\nline_star:215,line_end:218|char_star:4,char_end:45"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:178,line_end:221|char_star:4,char_end:73"->"with app.test_request_context():\n        with pytest.raises(TemplateNotFound) as e:\n            flask.render_template('missing.html')\n        assert e.value.name == 'missing.html',type='with_statement'\nline_star:215,line_end:218|char_star:4,char_end:45";
"app.test_request_context(),type='with_clause'\nline_star:215,line_end:215|char_star:9,char_end:35"[shape="box",fillcolor="white",style=filled];
"with app.test_request_context():\n        with pytest.raises(TemplateNotFound) as e:\n            flask.render_template('missing.html')\n        assert e.value.name == 'missing.html',type='with_statement'\nline_star:215,line_end:218|char_star:4,char_end:45"->"app.test_request_context(),type='with_clause'\nline_star:215,line_end:215|char_star:9,char_end:35";
"type='INFORMATION BLOCK'\nline_star:216,line_end:218|char_star:8,char_end:45"[shape="point",fillcolor="#121013",style=filled];
"with app.test_request_context():\n        with pytest.raises(TemplateNotFound) as e:\n            flask.render_template('missing.html')\n        assert e.value.name == 'missing.html',type='with_statement'\nline_star:215,line_end:218|char_star:4,char_end:45"->"type='INFORMATION BLOCK'\nline_star:216,line_end:218|char_star:8,char_end:45";
"with pytest.raises(TemplateNotFound) as e:\n            flask.render_template('missing.html'),type='with_statement'\nline_star:216,line_end:217|char_star:8,char_end:49"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:216,line_end:218|char_star:8,char_end:45"->"with pytest.raises(TemplateNotFound) as e:\n            flask.render_template('missing.html'),type='with_statement'\nline_star:216,line_end:217|char_star:8,char_end:49";
"pytest.raises(TemplateNotFound) as e,type='with_clause'\nline_star:216,line_end:216|char_star:13,char_end:49"[shape="box",fillcolor="white",style=filled];
"with pytest.raises(TemplateNotFound) as e:\n            flask.render_template('missing.html'),type='with_statement'\nline_star:216,line_end:217|char_star:8,char_end:49"->"pytest.raises(TemplateNotFound) as e,type='with_clause'\nline_star:216,line_end:216|char_star:13,char_end:49";
"type='INFORMATION BLOCK'\nline_star:217,line_end:217|char_star:12,char_end:49"[shape="point",fillcolor="#121013",style=filled];
"with pytest.raises(TemplateNotFound) as e:\n            flask.render_template('missing.html'),type='with_statement'\nline_star:216,line_end:217|char_star:8,char_end:49"->"type='INFORMATION BLOCK'\nline_star:217,line_end:217|char_star:12,char_end:49";
"assert e.value.name == 'missing.html',type='assert_statement'\nline_star:218,line_end:218|char_star:8,char_end:45"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:216,line_end:218|char_star:8,char_end:45"->"assert e.value.name == 'missing.html',type='assert_statement'\nline_star:218,line_end:218|char_star:8,char_end:45";
"e.value.name == 'missing.html',type='comparison_operator'\nline_star:218,line_end:218|char_star:15,char_end:45"[shape="box",fillcolor="white",style=filled];
"assert e.value.name == 'missing.html',type='assert_statement'\nline_star:218,line_end:218|char_star:8,char_end:45"->"e.value.name == 'missing.html',type='comparison_operator'\nline_star:218,line_end:218|char_star:15,char_end:45";
"e.value.name,type='attribute'\nline_star:218,line_end:218|char_star:15,char_end:27"[shape="box",fillcolor="white",style=filled];
"e.value.name == 'missing.html',type='comparison_operator'\nline_star:218,line_end:218|char_star:15,char_end:45"->"e.value.name,type='attribute'\nline_star:218,line_end:218|char_star:15,char_end:27";
"e.value,type='attribute'\nline_star:218,line_end:218|char_star:15,char_end:22"[shape="box",fillcolor="white",style=filled];
"e.value.name,type='attribute'\nline_star:218,line_end:218|char_star:15,char_end:27"->"e.value,type='attribute'\nline_star:218,line_end:218|char_star:15,char_end:22";
"e,type='identifier'\nline_star:218,line_end:218|char_star:15,char_end:16"[shape="point",fillcolor="#121013",style=filled];
"e.value,type='attribute'\nline_star:218,line_end:218|char_star:15,char_end:22"->"e,type='identifier'\nline_star:218,line_end:218|char_star:15,char_end:16";
"value,type='identifier'\nline_star:218,line_end:218|char_star:17,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"e.value,type='attribute'\nline_star:218,line_end:218|char_star:15,char_end:22"->"value,type='identifier'\nline_star:218,line_end:218|char_star:17,char_end:22";
"name,type='identifier'\nline_star:218,line_end:218|char_star:23,char_end:27"[shape="point",fillcolor="#121013",style=filled];
"e.value.name,type='attribute'\nline_star:218,line_end:218|char_star:15,char_end:27"->"name,type='identifier'\nline_star:218,line_end:218|char_star:23,char_end:27";
"with flask.Flask(__name__).test_request_context():\n        assert flask.render_template('nested/nested.txt') == 'I'm nested',type='with_statement'\nline_star:220,line_end:221|char_star:4,char_end:73"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:178,line_end:221|char_star:4,char_end:73"->"with flask.Flask(__name__).test_request_context():\n        assert flask.render_template('nested/nested.txt') == 'I'm nested',type='with_statement'\nline_star:220,line_end:221|char_star:4,char_end:73";
"flask.Flask(__name__).test_request_context(),type='with_clause'\nline_star:220,line_end:220|char_star:9,char_end:53"[shape="box",fillcolor="white",style=filled];
"with flask.Flask(__name__).test_request_context():\n        assert flask.render_template('nested/nested.txt') == 'I'm nested',type='with_statement'\nline_star:220,line_end:221|char_star:4,char_end:73"->"flask.Flask(__name__).test_request_context(),type='with_clause'\nline_star:220,line_end:220|char_star:9,char_end:53";
"type='INFORMATION BLOCK'\nline_star:221,line_end:221|char_star:8,char_end:73"[shape="point",fillcolor="#121013",style=filled];
"with flask.Flask(__name__).test_request_context():\n        assert flask.render_template('nested/nested.txt') == 'I'm nested',type='with_statement'\nline_star:220,line_end:221|char_star:4,char_end:73"->"type='INFORMATION BLOCK'\nline_star:221,line_end:221|char_star:8,char_end:73";
"assert flask.render_template('nested/nested.txt') == 'I'm nested',type='assert_statement'\nline_star:221,line_end:221|char_star:8,char_end:73"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:221,line_end:221|char_star:8,char_end:73"->"assert flask.render_template('nested/nested.txt') == 'I'm nested',type='assert_statement'\nline_star:221,line_end:221|char_star:8,char_end:73";
"flask.render_template('nested/nested.txt') == 'I'm nested',type='comparison_operator'\nline_star:221,line_end:221|char_star:15,char_end:73"[shape="box",fillcolor="white",style=filled];
"assert flask.render_template('nested/nested.txt') == 'I'm nested',type='assert_statement'\nline_star:221,line_end:221|char_star:8,char_end:73"->"flask.render_template('nested/nested.txt') == 'I'm nested',type='comparison_operator'\nline_star:221,line_end:221|char_star:15,char_end:73";
"flask.render_template('nested/nested.txt'),type='call'\nline_star:221,line_end:221|char_star:15,char_end:57"[shape="box",fillcolor="white",style=filled];
"flask.render_template('nested/nested.txt') == 'I'm nested',type='comparison_operator'\nline_star:221,line_end:221|char_star:15,char_end:73"->"flask.render_template('nested/nested.txt'),type='call'\nline_star:221,line_end:221|char_star:15,char_end:57";
"flask.render_template,type='attribute'\nline_star:221,line_end:221|char_star:15,char_end:36"[shape="box",fillcolor="white",style=filled];
"flask.render_template('nested/nested.txt'),type='call'\nline_star:221,line_end:221|char_star:15,char_end:57"->"flask.render_template,type='attribute'\nline_star:221,line_end:221|char_star:15,char_end:36";
"flask,type='identifier'\nline_star:221,line_end:221|char_star:15,char_end:20"[shape="point",fillcolor="#121013",style=filled];
"flask.render_template,type='attribute'\nline_star:221,line_end:221|char_star:15,char_end:36"->"flask,type='identifier'\nline_star:221,line_end:221|char_star:15,char_end:20";
"render_template,type='identifier'\nline_star:221,line_end:221|char_star:21,char_end:36"[shape="point",fillcolor="#121013",style=filled];
"flask.render_template,type='attribute'\nline_star:221,line_end:221|char_star:15,char_end:36"->"render_template,type='identifier'\nline_star:221,line_end:221|char_star:21,char_end:36";
"('nested/nested.txt'),type='argument_list'\nline_star:221,line_end:221|char_star:36,char_end:57"[shape="box",fillcolor="white",style=filled];
"flask.render_template('nested/nested.txt'),type='call'\nline_star:221,line_end:221|char_star:15,char_end:57"->"('nested/nested.txt'),type='argument_list'\nline_star:221,line_end:221|char_star:36,char_end:57";
"def test_default_static_max_age(app):\n    class MyBlueprint(flask.Blueprint):\n        def get_send_file_max_age(self, filename):\n            return 100\n\n    blueprint = MyBlueprint('blueprint', __name__, static_folder='static')\n    app.register_blueprint(blueprint)\n\n    # try/finally, in case other tests use this app for Blueprint tests.\n    max_age_default = app.config['SEND_FILE_MAX_AGE_DEFAULT']\n    try:\n        with app.test_request_context():\n            unexpected_max_age = 3600\n            if app.config['SEND_FILE_MAX_AGE_DEFAULT'] == unexpected_max_age:\n                unexpected_max_age = 7200\n            app.config['SEND_FILE_MAX_AGE_DEFAULT'] = unexpected_max_age\n            rv = blueprint.send_static_file('index.html')\n            cc = parse_cache_control_header(rv.headers['Cache-Control'])\n            assert cc.max_age == 100\n            rv.close()\n    finally:\n        app.config['SEND_FILE_MAX_AGE_DEFAULT'] = max_age_default,type='function_definition'\nline_star:224,line_end:245|char_star:0,char_end:65"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_default_static_max_age(app):\n    class MyBlueprint(flask.Blueprint):\n        def get_send_file_max_age(self, filename):\n            return 100\n\n    blueprint = MyBlueprint('blueprint', __name__, static_folder='static')\n    app.register_blueprint(blueprint)\n\n    # try/finally, in case other tests use this app for Blueprint tests.\n    max_age_default = app.config['SEND_FILE_MAX_AGE_DEFAULT']\n    try:\n        with app.test_request_context():\n            unexpected_max_age = 3600\n            if app.config['SEND_FILE_MAX_AGE_DEFAULT'] == unexpected_max_age:\n                unexpected_max_age = 7200\n            app.config['SEND_FILE_MAX_AGE_DEFAULT'] = unexpected_max_age\n            rv = blueprint.send_static_file('index.html')\n            cc = parse_cache_control_header(rv.headers['Cache-Control'])\n            assert cc.max_age == 100\n            rv.close()\n    finally:\n        app.config['SEND_FILE_MAX_AGE_DEFAULT'] = max_age_default,type='function_definition'\nline_star:224,line_end:245|char_star:0,char_end:65";
"test_default_static_max_age,type='identifier'\nline_star:224,line_end:224|char_star:4,char_end:31"[shape="point",fillcolor="#121013",style=filled];
"def test_default_static_max_age(app):\n    class MyBlueprint(flask.Blueprint):\n        def get_send_file_max_age(self, filename):\n            return 100\n\n    blueprint = MyBlueprint('blueprint', __name__, static_folder='static')\n    app.register_blueprint(blueprint)\n\n    # try/finally, in case other tests use this app for Blueprint tests.\n    max_age_default = app.config['SEND_FILE_MAX_AGE_DEFAULT']\n    try:\n        with app.test_request_context():\n            unexpected_max_age = 3600\n            if app.config['SEND_FILE_MAX_AGE_DEFAULT'] == unexpected_max_age:\n                unexpected_max_age = 7200\n            app.config['SEND_FILE_MAX_AGE_DEFAULT'] = unexpected_max_age\n            rv = blueprint.send_static_file('index.html')\n            cc = parse_cache_control_header(rv.headers['Cache-Control'])\n            assert cc.max_age == 100\n            rv.close()\n    finally:\n        app.config['SEND_FILE_MAX_AGE_DEFAULT'] = max_age_default,type='function_definition'\nline_star:224,line_end:245|char_star:0,char_end:65"->"test_default_static_max_age,type='identifier'\nline_star:224,line_end:224|char_star:4,char_end:31";
"(app),type='parameters'\nline_star:224,line_end:224|char_star:31,char_end:36"[shape="box",fillcolor="white",style=filled];
"def test_default_static_max_age(app):\n    class MyBlueprint(flask.Blueprint):\n        def get_send_file_max_age(self, filename):\n            return 100\n\n    blueprint = MyBlueprint('blueprint', __name__, static_folder='static')\n    app.register_blueprint(blueprint)\n\n    # try/finally, in case other tests use this app for Blueprint tests.\n    max_age_default = app.config['SEND_FILE_MAX_AGE_DEFAULT']\n    try:\n        with app.test_request_context():\n            unexpected_max_age = 3600\n            if app.config['SEND_FILE_MAX_AGE_DEFAULT'] == unexpected_max_age:\n                unexpected_max_age = 7200\n            app.config['SEND_FILE_MAX_AGE_DEFAULT'] = unexpected_max_age\n            rv = blueprint.send_static_file('index.html')\n            cc = parse_cache_control_header(rv.headers['Cache-Control'])\n            assert cc.max_age == 100\n            rv.close()\n    finally:\n        app.config['SEND_FILE_MAX_AGE_DEFAULT'] = max_age_default,type='function_definition'\nline_star:224,line_end:245|char_star:0,char_end:65"->"(app),type='parameters'\nline_star:224,line_end:224|char_star:31,char_end:36";
"app,type='identifier'\nline_star:224,line_end:224|char_star:32,char_end:35"[shape="point",fillcolor="#121013",style=filled];
"(app),type='parameters'\nline_star:224,line_end:224|char_star:31,char_end:36"->"app,type='identifier'\nline_star:224,line_end:224|char_star:32,char_end:35";
"type='INFORMATION BLOCK'\nline_star:225,line_end:245|char_star:4,char_end:65"[shape="point",fillcolor="#121013",style=filled];
"def test_default_static_max_age(app):\n    class MyBlueprint(flask.Blueprint):\n        def get_send_file_max_age(self, filename):\n            return 100\n\n    blueprint = MyBlueprint('blueprint', __name__, static_folder='static')\n    app.register_blueprint(blueprint)\n\n    # try/finally, in case other tests use this app for Blueprint tests.\n    max_age_default = app.config['SEND_FILE_MAX_AGE_DEFAULT']\n    try:\n        with app.test_request_context():\n            unexpected_max_age = 3600\n            if app.config['SEND_FILE_MAX_AGE_DEFAULT'] == unexpected_max_age:\n                unexpected_max_age = 7200\n            app.config['SEND_FILE_MAX_AGE_DEFAULT'] = unexpected_max_age\n            rv = blueprint.send_static_file('index.html')\n            cc = parse_cache_control_header(rv.headers['Cache-Control'])\n            assert cc.max_age == 100\n            rv.close()\n    finally:\n        app.config['SEND_FILE_MAX_AGE_DEFAULT'] = max_age_default,type='function_definition'\nline_star:224,line_end:245|char_star:0,char_end:65"->"type='INFORMATION BLOCK'\nline_star:225,line_end:245|char_star:4,char_end:65";
"class MyBlueprint(flask.Blueprint):\n        def get_send_file_max_age(self, filename):\n            return 100,type='class_definition'\nline_star:225,line_end:227|char_star:4,char_end:22"[shape="box",fillcolor="#ffdf91",style=filled];
"type='INFORMATION BLOCK'\nline_star:225,line_end:245|char_star:4,char_end:65"->"class MyBlueprint(flask.Blueprint):\n        def get_send_file_max_age(self, filename):\n            return 100,type='class_definition'\nline_star:225,line_end:227|char_star:4,char_end:22";
"MyBlueprint,type='identifier'\nline_star:225,line_end:225|char_star:10,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"class MyBlueprint(flask.Blueprint):\n        def get_send_file_max_age(self, filename):\n            return 100,type='class_definition'\nline_star:225,line_end:227|char_star:4,char_end:22"->"MyBlueprint,type='identifier'\nline_star:225,line_end:225|char_star:10,char_end:21";
"(flask.Blueprint),type='argument_list'\nline_star:225,line_end:225|char_star:21,char_end:38"[shape="box",fillcolor="white",style=filled];
"class MyBlueprint(flask.Blueprint):\n        def get_send_file_max_age(self, filename):\n            return 100,type='class_definition'\nline_star:225,line_end:227|char_star:4,char_end:22"->"(flask.Blueprint),type='argument_list'\nline_star:225,line_end:225|char_star:21,char_end:38";
"flask.Blueprint,type='attribute'\nline_star:225,line_end:225|char_star:22,char_end:37"[shape="box",fillcolor="white",style=filled];
"(flask.Blueprint),type='argument_list'\nline_star:225,line_end:225|char_star:21,char_end:38"->"flask.Blueprint,type='attribute'\nline_star:225,line_end:225|char_star:22,char_end:37";
"flask,type='identifier'\nline_star:225,line_end:225|char_star:22,char_end:27"[shape="point",fillcolor="#121013",style=filled];
"flask.Blueprint,type='attribute'\nline_star:225,line_end:225|char_star:22,char_end:37"->"flask,type='identifier'\nline_star:225,line_end:225|char_star:22,char_end:27";
"Blueprint,type='identifier'\nline_star:225,line_end:225|char_star:28,char_end:37"[shape="point",fillcolor="#121013",style=filled];
"flask.Blueprint,type='attribute'\nline_star:225,line_end:225|char_star:22,char_end:37"->"Blueprint,type='identifier'\nline_star:225,line_end:225|char_star:28,char_end:37";
"type='INFORMATION BLOCK'\nline_star:226,line_end:227|char_star:8,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"class MyBlueprint(flask.Blueprint):\n        def get_send_file_max_age(self, filename):\n            return 100,type='class_definition'\nline_star:225,line_end:227|char_star:4,char_end:22"->"type='INFORMATION BLOCK'\nline_star:226,line_end:227|char_star:8,char_end:22";
"def get_send_file_max_age(self, filename):\n            return 100,type='function_definition'\nline_star:226,line_end:227|char_star:8,char_end:22"[shape="box",fillcolor="#cee6b4",style=filled];
"type='INFORMATION BLOCK'\nline_star:226,line_end:227|char_star:8,char_end:22"->"def get_send_file_max_age(self, filename):\n            return 100,type='function_definition'\nline_star:226,line_end:227|char_star:8,char_end:22";
"get_send_file_max_age,type='identifier'\nline_star:226,line_end:226|char_star:12,char_end:33"[shape="point",fillcolor="#121013",style=filled];
"def get_send_file_max_age(self, filename):\n            return 100,type='function_definition'\nline_star:226,line_end:227|char_star:8,char_end:22"->"get_send_file_max_age,type='identifier'\nline_star:226,line_end:226|char_star:12,char_end:33";
"(self, filename),type='parameters'\nline_star:226,line_end:226|char_star:33,char_end:49"[shape="box",fillcolor="white",style=filled];
"def get_send_file_max_age(self, filename):\n            return 100,type='function_definition'\nline_star:226,line_end:227|char_star:8,char_end:22"->"(self, filename),type='parameters'\nline_star:226,line_end:226|char_star:33,char_end:49";
"self,type='identifier'\nline_star:226,line_end:226|char_star:34,char_end:38"[shape="point",fillcolor="#121013",style=filled];
"(self, filename),type='parameters'\nline_star:226,line_end:226|char_star:33,char_end:49"->"self,type='identifier'\nline_star:226,line_end:226|char_star:34,char_end:38";
"filename,type='identifier'\nline_star:226,line_end:226|char_star:40,char_end:48"[shape="point",fillcolor="#121013",style=filled];
"(self, filename),type='parameters'\nline_star:226,line_end:226|char_star:33,char_end:49"->"filename,type='identifier'\nline_star:226,line_end:226|char_star:40,char_end:48";
"type='INFORMATION BLOCK'\nline_star:227,line_end:227|char_star:12,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"def get_send_file_max_age(self, filename):\n            return 100,type='function_definition'\nline_star:226,line_end:227|char_star:8,char_end:22"->"type='INFORMATION BLOCK'\nline_star:227,line_end:227|char_star:12,char_end:22";
"return 100,type='return_statement'\nline_star:227,line_end:227|char_star:12,char_end:22"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:227,line_end:227|char_star:12,char_end:22"->"return 100,type='return_statement'\nline_star:227,line_end:227|char_star:12,char_end:22";
"# try/finally, in case other tests use this app for Blueprint tests.,type='comment'\nline_star:232,line_end:232|char_star:4,char_end:72"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:225,line_end:245|char_star:4,char_end:65"->"# try/finally, in case other tests use this app for Blueprint tests.,type='comment'\nline_star:232,line_end:232|char_star:4,char_end:72";
"try:\n        with app.test_request_context():\n            unexpected_max_age = 3600\n            if app.config['SEND_FILE_MAX_AGE_DEFAULT'] == unexpected_max_age:\n                unexpected_max_age = 7200\n            app.config['SEND_FILE_MAX_AGE_DEFAULT'] = unexpected_max_age\n            rv = blueprint.send_static_file('index.html')\n            cc = parse_cache_control_header(rv.headers['Cache-Control'])\n            assert cc.max_age == 100\n            rv.close()\n    finally:\n        app.config['SEND_FILE_MAX_AGE_DEFAULT'] = max_age_default,type='try_statement'\nline_star:234,line_end:245|char_star:4,char_end:65"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:225,line_end:245|char_star:4,char_end:65"->"try:\n        with app.test_request_context():\n            unexpected_max_age = 3600\n            if app.config['SEND_FILE_MAX_AGE_DEFAULT'] == unexpected_max_age:\n                unexpected_max_age = 7200\n            app.config['SEND_FILE_MAX_AGE_DEFAULT'] = unexpected_max_age\n            rv = blueprint.send_static_file('index.html')\n            cc = parse_cache_control_header(rv.headers['Cache-Control'])\n            assert cc.max_age == 100\n            rv.close()\n    finally:\n        app.config['SEND_FILE_MAX_AGE_DEFAULT'] = max_age_default,type='try_statement'\nline_star:234,line_end:245|char_star:4,char_end:65";
"try,type='try'\nline_star:234,line_end:234|char_star:4,char_end:7"[shape="box",fillcolor="white",style=filled];
"try:\n        with app.test_request_context():\n            unexpected_max_age = 3600\n            if app.config['SEND_FILE_MAX_AGE_DEFAULT'] == unexpected_max_age:\n                unexpected_max_age = 7200\n            app.config['SEND_FILE_MAX_AGE_DEFAULT'] = unexpected_max_age\n            rv = blueprint.send_static_file('index.html')\n            cc = parse_cache_control_header(rv.headers['Cache-Control'])\n            assert cc.max_age == 100\n            rv.close()\n    finally:\n        app.config['SEND_FILE_MAX_AGE_DEFAULT'] = max_age_default,type='try_statement'\nline_star:234,line_end:245|char_star:4,char_end:65"->"try,type='try'\nline_star:234,line_end:234|char_star:4,char_end:7";
"type='INFORMATION BLOCK'\nline_star:235,line_end:243|char_star:8,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"try:\n        with app.test_request_context():\n            unexpected_max_age = 3600\n            if app.config['SEND_FILE_MAX_AGE_DEFAULT'] == unexpected_max_age:\n                unexpected_max_age = 7200\n            app.config['SEND_FILE_MAX_AGE_DEFAULT'] = unexpected_max_age\n            rv = blueprint.send_static_file('index.html')\n            cc = parse_cache_control_header(rv.headers['Cache-Control'])\n            assert cc.max_age == 100\n            rv.close()\n    finally:\n        app.config['SEND_FILE_MAX_AGE_DEFAULT'] = max_age_default,type='try_statement'\nline_star:234,line_end:245|char_star:4,char_end:65"->"type='INFORMATION BLOCK'\nline_star:235,line_end:243|char_star:8,char_end:22";
"with app.test_request_context():\n            unexpected_max_age = 3600\n            if app.config['SEND_FILE_MAX_AGE_DEFAULT'] == unexpected_max_age:\n                unexpected_max_age = 7200\n            app.config['SEND_FILE_MAX_AGE_DEFAULT'] = unexpected_max_age\n            rv = blueprint.send_static_file('index.html')\n            cc = parse_cache_control_header(rv.headers['Cache-Control'])\n            assert cc.max_age == 100\n            rv.close(),type='with_statement'\nline_star:235,line_end:243|char_star:8,char_end:22"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:235,line_end:243|char_star:8,char_end:22"->"with app.test_request_context():\n            unexpected_max_age = 3600\n            if app.config['SEND_FILE_MAX_AGE_DEFAULT'] == unexpected_max_age:\n                unexpected_max_age = 7200\n            app.config['SEND_FILE_MAX_AGE_DEFAULT'] = unexpected_max_age\n            rv = blueprint.send_static_file('index.html')\n            cc = parse_cache_control_header(rv.headers['Cache-Control'])\n            assert cc.max_age == 100\n            rv.close(),type='with_statement'\nline_star:235,line_end:243|char_star:8,char_end:22";
"app.test_request_context(),type='with_clause'\nline_star:235,line_end:235|char_star:13,char_end:39"[shape="box",fillcolor="white",style=filled];
"with app.test_request_context():\n            unexpected_max_age = 3600\n            if app.config['SEND_FILE_MAX_AGE_DEFAULT'] == unexpected_max_age:\n                unexpected_max_age = 7200\n            app.config['SEND_FILE_MAX_AGE_DEFAULT'] = unexpected_max_age\n            rv = blueprint.send_static_file('index.html')\n            cc = parse_cache_control_header(rv.headers['Cache-Control'])\n            assert cc.max_age == 100\n            rv.close(),type='with_statement'\nline_star:235,line_end:243|char_star:8,char_end:22"->"app.test_request_context(),type='with_clause'\nline_star:235,line_end:235|char_star:13,char_end:39";
"type='INFORMATION BLOCK'\nline_star:236,line_end:243|char_star:12,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"with app.test_request_context():\n            unexpected_max_age = 3600\n            if app.config['SEND_FILE_MAX_AGE_DEFAULT'] == unexpected_max_age:\n                unexpected_max_age = 7200\n            app.config['SEND_FILE_MAX_AGE_DEFAULT'] = unexpected_max_age\n            rv = blueprint.send_static_file('index.html')\n            cc = parse_cache_control_header(rv.headers['Cache-Control'])\n            assert cc.max_age == 100\n            rv.close(),type='with_statement'\nline_star:235,line_end:243|char_star:8,char_end:22"->"type='INFORMATION BLOCK'\nline_star:236,line_end:243|char_star:12,char_end:22";
"if app.config['SEND_FILE_MAX_AGE_DEFAULT'] == unexpected_max_age:\n                unexpected_max_age = 7200,type='if_statement'\nline_star:237,line_end:238|char_star:12,char_end:41"[shape="box",fillcolor="#9ecca4",style=filled];
"type='INFORMATION BLOCK'\nline_star:236,line_end:243|char_star:12,char_end:22"->"if app.config['SEND_FILE_MAX_AGE_DEFAULT'] == unexpected_max_age:\n                unexpected_max_age = 7200,type='if_statement'\nline_star:237,line_end:238|char_star:12,char_end:41";
"assert cc.max_age == 100,type='assert_statement'\nline_star:242,line_end:242|char_star:12,char_end:36"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:236,line_end:243|char_star:12,char_end:22"->"assert cc.max_age == 100,type='assert_statement'\nline_star:242,line_end:242|char_star:12,char_end:36";
"cc.max_age == 100,type='comparison_operator'\nline_star:242,line_end:242|char_star:19,char_end:36"[shape="box",fillcolor="white",style=filled];
"assert cc.max_age == 100,type='assert_statement'\nline_star:242,line_end:242|char_star:12,char_end:36"->"cc.max_age == 100,type='comparison_operator'\nline_star:242,line_end:242|char_star:19,char_end:36";
"cc.max_age,type='attribute'\nline_star:242,line_end:242|char_star:19,char_end:29"[shape="box",fillcolor="white",style=filled];
"cc.max_age == 100,type='comparison_operator'\nline_star:242,line_end:242|char_star:19,char_end:36"->"cc.max_age,type='attribute'\nline_star:242,line_end:242|char_star:19,char_end:29";
"cc,type='identifier'\nline_star:242,line_end:242|char_star:19,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"cc.max_age,type='attribute'\nline_star:242,line_end:242|char_star:19,char_end:29"->"cc,type='identifier'\nline_star:242,line_end:242|char_star:19,char_end:21";
"max_age,type='identifier'\nline_star:242,line_end:242|char_star:22,char_end:29"[shape="point",fillcolor="#121013",style=filled];
"cc.max_age,type='attribute'\nline_star:242,line_end:242|char_star:19,char_end:29"->"max_age,type='identifier'\nline_star:242,line_end:242|char_star:22,char_end:29";
"finally:\n        app.config['SEND_FILE_MAX_AGE_DEFAULT'] = max_age_default,type='finally_clause'\nline_star:244,line_end:245|char_star:4,char_end:65"[shape="box",fillcolor="white",style=filled];
"try:\n        with app.test_request_context():\n            unexpected_max_age = 3600\n            if app.config['SEND_FILE_MAX_AGE_DEFAULT'] == unexpected_max_age:\n                unexpected_max_age = 7200\n            app.config['SEND_FILE_MAX_AGE_DEFAULT'] = unexpected_max_age\n            rv = blueprint.send_static_file('index.html')\n            cc = parse_cache_control_header(rv.headers['Cache-Control'])\n            assert cc.max_age == 100\n            rv.close()\n    finally:\n        app.config['SEND_FILE_MAX_AGE_DEFAULT'] = max_age_default,type='try_statement'\nline_star:234,line_end:245|char_star:4,char_end:65"->"finally:\n        app.config['SEND_FILE_MAX_AGE_DEFAULT'] = max_age_default,type='finally_clause'\nline_star:244,line_end:245|char_star:4,char_end:65";
"finally,type='finally'\nline_star:244,line_end:244|char_star:4,char_end:11"[shape="box",fillcolor="white",style=filled];
"finally:\n        app.config['SEND_FILE_MAX_AGE_DEFAULT'] = max_age_default,type='finally_clause'\nline_star:244,line_end:245|char_star:4,char_end:65"->"finally,type='finally'\nline_star:244,line_end:244|char_star:4,char_end:11";
"type='INFORMATION BLOCK'\nline_star:245,line_end:245|char_star:8,char_end:65"[shape="point",fillcolor="#121013",style=filled];
"finally:\n        app.config['SEND_FILE_MAX_AGE_DEFAULT'] = max_age_default,type='finally_clause'\nline_star:244,line_end:245|char_star:4,char_end:65"->"type='INFORMATION BLOCK'\nline_star:245,line_end:245|char_star:8,char_end:65";
"def test_templates_list(test_apps):\n    from blueprintapp import app\n\n    templates = sorted(app.jinja_env.list_templates())\n    assert templates == ['admin/index.html', 'frontend/index.html'],type='function_definition'\nline_star:248,line_end:252|char_star:0,char_end:67"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_templates_list(test_apps):\n    from blueprintapp import app\n\n    templates = sorted(app.jinja_env.list_templates())\n    assert templates == ['admin/index.html', 'frontend/index.html'],type='function_definition'\nline_star:248,line_end:252|char_star:0,char_end:67";
"test_templates_list,type='identifier'\nline_star:248,line_end:248|char_star:4,char_end:23"[shape="point",fillcolor="#121013",style=filled];
"def test_templates_list(test_apps):\n    from blueprintapp import app\n\n    templates = sorted(app.jinja_env.list_templates())\n    assert templates == ['admin/index.html', 'frontend/index.html'],type='function_definition'\nline_star:248,line_end:252|char_star:0,char_end:67"->"test_templates_list,type='identifier'\nline_star:248,line_end:248|char_star:4,char_end:23";
"(test_apps),type='parameters'\nline_star:248,line_end:248|char_star:23,char_end:34"[shape="box",fillcolor="white",style=filled];
"def test_templates_list(test_apps):\n    from blueprintapp import app\n\n    templates = sorted(app.jinja_env.list_templates())\n    assert templates == ['admin/index.html', 'frontend/index.html'],type='function_definition'\nline_star:248,line_end:252|char_star:0,char_end:67"->"(test_apps),type='parameters'\nline_star:248,line_end:248|char_star:23,char_end:34";
"test_apps,type='identifier'\nline_star:248,line_end:248|char_star:24,char_end:33"[shape="point",fillcolor="#121013",style=filled];
"(test_apps),type='parameters'\nline_star:248,line_end:248|char_star:23,char_end:34"->"test_apps,type='identifier'\nline_star:248,line_end:248|char_star:24,char_end:33";
"type='INFORMATION BLOCK'\nline_star:249,line_end:252|char_star:4,char_end:67"[shape="point",fillcolor="#121013",style=filled];
"def test_templates_list(test_apps):\n    from blueprintapp import app\n\n    templates = sorted(app.jinja_env.list_templates())\n    assert templates == ['admin/index.html', 'frontend/index.html'],type='function_definition'\nline_star:248,line_end:252|char_star:0,char_end:67"->"type='INFORMATION BLOCK'\nline_star:249,line_end:252|char_star:4,char_end:67";
"from blueprintapp import app,type='import_from_statement'\nline_star:249,line_end:249|char_star:4,char_end:32"[shape="box",fillcolor="#f48b29",style=filled];
"type='INFORMATION BLOCK'\nline_star:249,line_end:252|char_star:4,char_end:67"->"from blueprintapp import app,type='import_from_statement'\nline_star:249,line_end:249|char_star:4,char_end:32";
"assert templates == ['admin/index.html', 'frontend/index.html'],type='assert_statement'\nline_star:252,line_end:252|char_star:4,char_end:67"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:249,line_end:252|char_star:4,char_end:67"->"assert templates == ['admin/index.html', 'frontend/index.html'],type='assert_statement'\nline_star:252,line_end:252|char_star:4,char_end:67";
"templates == ['admin/index.html', 'frontend/index.html'],type='comparison_operator'\nline_star:252,line_end:252|char_star:11,char_end:67"[shape="box",fillcolor="white",style=filled];
"assert templates == ['admin/index.html', 'frontend/index.html'],type='assert_statement'\nline_star:252,line_end:252|char_star:4,char_end:67"->"templates == ['admin/index.html', 'frontend/index.html'],type='comparison_operator'\nline_star:252,line_end:252|char_star:11,char_end:67";
"templates,type='identifier'\nline_star:252,line_end:252|char_star:11,char_end:20"[shape="point",fillcolor="#121013",style=filled];
"templates == ['admin/index.html', 'frontend/index.html'],type='comparison_operator'\nline_star:252,line_end:252|char_star:11,char_end:67"->"templates,type='identifier'\nline_star:252,line_end:252|char_star:11,char_end:20";
"['admin/index.html', 'frontend/index.html'],type='list'\nline_star:252,line_end:252|char_star:24,char_end:67"[shape="box",fillcolor="white",style=filled];
"templates == ['admin/index.html', 'frontend/index.html'],type='comparison_operator'\nline_star:252,line_end:252|char_star:11,char_end:67"->"['admin/index.html', 'frontend/index.html'],type='list'\nline_star:252,line_end:252|char_star:24,char_end:67";
"def test_dotted_names(app, client):\n    frontend = flask.Blueprint('myapp.frontend', __name__)\n    backend = flask.Blueprint('myapp.backend', __name__)\n\n    @frontend.route('/fe')\n    def frontend_index():\n        return flask.url_for('myapp.backend.backend_index')\n\n    @frontend.route('/fe2')\n    def frontend_page2():\n        return flask.url_for('.frontend_index')\n\n    @backend.route('/be')\n    def backend_index():\n        return flask.url_for('myapp.frontend.frontend_index')\n\n    app.register_blueprint(frontend)\n    app.register_blueprint(backend)\n\n    assert client.get('/fe').data.strip() == b'/be'\n    assert client.get('/fe2').data.strip() == b'/fe'\n    assert client.get('/be').data.strip() == b'/fe',type='function_definition'\nline_star:255,line_end:276|char_star:0,char_end:51"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_dotted_names(app, client):\n    frontend = flask.Blueprint('myapp.frontend', __name__)\n    backend = flask.Blueprint('myapp.backend', __name__)\n\n    @frontend.route('/fe')\n    def frontend_index():\n        return flask.url_for('myapp.backend.backend_index')\n\n    @frontend.route('/fe2')\n    def frontend_page2():\n        return flask.url_for('.frontend_index')\n\n    @backend.route('/be')\n    def backend_index():\n        return flask.url_for('myapp.frontend.frontend_index')\n\n    app.register_blueprint(frontend)\n    app.register_blueprint(backend)\n\n    assert client.get('/fe').data.strip() == b'/be'\n    assert client.get('/fe2').data.strip() == b'/fe'\n    assert client.get('/be').data.strip() == b'/fe',type='function_definition'\nline_star:255,line_end:276|char_star:0,char_end:51";
"test_dotted_names,type='identifier'\nline_star:255,line_end:255|char_star:4,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"def test_dotted_names(app, client):\n    frontend = flask.Blueprint('myapp.frontend', __name__)\n    backend = flask.Blueprint('myapp.backend', __name__)\n\n    @frontend.route('/fe')\n    def frontend_index():\n        return flask.url_for('myapp.backend.backend_index')\n\n    @frontend.route('/fe2')\n    def frontend_page2():\n        return flask.url_for('.frontend_index')\n\n    @backend.route('/be')\n    def backend_index():\n        return flask.url_for('myapp.frontend.frontend_index')\n\n    app.register_blueprint(frontend)\n    app.register_blueprint(backend)\n\n    assert client.get('/fe').data.strip() == b'/be'\n    assert client.get('/fe2').data.strip() == b'/fe'\n    assert client.get('/be').data.strip() == b'/fe',type='function_definition'\nline_star:255,line_end:276|char_star:0,char_end:51"->"test_dotted_names,type='identifier'\nline_star:255,line_end:255|char_star:4,char_end:21";
"(app, client),type='parameters'\nline_star:255,line_end:255|char_star:21,char_end:34"[shape="box",fillcolor="white",style=filled];
"def test_dotted_names(app, client):\n    frontend = flask.Blueprint('myapp.frontend', __name__)\n    backend = flask.Blueprint('myapp.backend', __name__)\n\n    @frontend.route('/fe')\n    def frontend_index():\n        return flask.url_for('myapp.backend.backend_index')\n\n    @frontend.route('/fe2')\n    def frontend_page2():\n        return flask.url_for('.frontend_index')\n\n    @backend.route('/be')\n    def backend_index():\n        return flask.url_for('myapp.frontend.frontend_index')\n\n    app.register_blueprint(frontend)\n    app.register_blueprint(backend)\n\n    assert client.get('/fe').data.strip() == b'/be'\n    assert client.get('/fe2').data.strip() == b'/fe'\n    assert client.get('/be').data.strip() == b'/fe',type='function_definition'\nline_star:255,line_end:276|char_star:0,char_end:51"->"(app, client),type='parameters'\nline_star:255,line_end:255|char_star:21,char_end:34";
"app,type='identifier'\nline_star:255,line_end:255|char_star:22,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"(app, client),type='parameters'\nline_star:255,line_end:255|char_star:21,char_end:34"->"app,type='identifier'\nline_star:255,line_end:255|char_star:22,char_end:25";
"client,type='identifier'\nline_star:255,line_end:255|char_star:27,char_end:33"[shape="point",fillcolor="#121013",style=filled];
"(app, client),type='parameters'\nline_star:255,line_end:255|char_star:21,char_end:34"->"client,type='identifier'\nline_star:255,line_end:255|char_star:27,char_end:33";
"type='INFORMATION BLOCK'\nline_star:256,line_end:276|char_star:4,char_end:51"[shape="point",fillcolor="#121013",style=filled];
"def test_dotted_names(app, client):\n    frontend = flask.Blueprint('myapp.frontend', __name__)\n    backend = flask.Blueprint('myapp.backend', __name__)\n\n    @frontend.route('/fe')\n    def frontend_index():\n        return flask.url_for('myapp.backend.backend_index')\n\n    @frontend.route('/fe2')\n    def frontend_page2():\n        return flask.url_for('.frontend_index')\n\n    @backend.route('/be')\n    def backend_index():\n        return flask.url_for('myapp.frontend.frontend_index')\n\n    app.register_blueprint(frontend)\n    app.register_blueprint(backend)\n\n    assert client.get('/fe').data.strip() == b'/be'\n    assert client.get('/fe2').data.strip() == b'/fe'\n    assert client.get('/be').data.strip() == b'/fe',type='function_definition'\nline_star:255,line_end:276|char_star:0,char_end:51"->"type='INFORMATION BLOCK'\nline_star:256,line_end:276|char_star:4,char_end:51";
"@frontend.route('/fe')\n    def frontend_index():\n        return flask.url_for('myapp.backend.backend_index'),type='decorated_definition'\nline_star:259,line_end:261|char_star:4,char_end:59"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:256,line_end:276|char_star:4,char_end:51"->"@frontend.route('/fe')\n    def frontend_index():\n        return flask.url_for('myapp.backend.backend_index'),type='decorated_definition'\nline_star:259,line_end:261|char_star:4,char_end:59";
"@frontend.route('/fe'),type='decorator'\nline_star:259,line_end:259|char_star:4,char_end:26"[shape="box",fillcolor="white",style=filled];
"@frontend.route('/fe')\n    def frontend_index():\n        return flask.url_for('myapp.backend.backend_index'),type='decorated_definition'\nline_star:259,line_end:261|char_star:4,char_end:59"->"@frontend.route('/fe'),type='decorator'\nline_star:259,line_end:259|char_star:4,char_end:26";
"def frontend_index():\n        return flask.url_for('myapp.backend.backend_index'),type='function_definition'\nline_star:260,line_end:261|char_star:4,char_end:59"[shape="box",fillcolor="#cee6b4",style=filled];
"@frontend.route('/fe')\n    def frontend_index():\n        return flask.url_for('myapp.backend.backend_index'),type='decorated_definition'\nline_star:259,line_end:261|char_star:4,char_end:59"->"def frontend_index():\n        return flask.url_for('myapp.backend.backend_index'),type='function_definition'\nline_star:260,line_end:261|char_star:4,char_end:59";
"frontend_index,type='identifier'\nline_star:260,line_end:260|char_star:8,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"def frontend_index():\n        return flask.url_for('myapp.backend.backend_index'),type='function_definition'\nline_star:260,line_end:261|char_star:4,char_end:59"->"frontend_index,type='identifier'\nline_star:260,line_end:260|char_star:8,char_end:22";
"type='INFORMATION BLOCK'\nline_star:261,line_end:261|char_star:8,char_end:59"[shape="point",fillcolor="#121013",style=filled];
"def frontend_index():\n        return flask.url_for('myapp.backend.backend_index'),type='function_definition'\nline_star:260,line_end:261|char_star:4,char_end:59"->"type='INFORMATION BLOCK'\nline_star:261,line_end:261|char_star:8,char_end:59";
"return flask.url_for('myapp.backend.backend_index'),type='return_statement'\nline_star:261,line_end:261|char_star:8,char_end:59"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:261,line_end:261|char_star:8,char_end:59"->"return flask.url_for('myapp.backend.backend_index'),type='return_statement'\nline_star:261,line_end:261|char_star:8,char_end:59";
"@frontend.route('/fe2')\n    def frontend_page2():\n        return flask.url_for('.frontend_index'),type='decorated_definition'\nline_star:263,line_end:265|char_star:4,char_end:47"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:256,line_end:276|char_star:4,char_end:51"->"@frontend.route('/fe2')\n    def frontend_page2():\n        return flask.url_for('.frontend_index'),type='decorated_definition'\nline_star:263,line_end:265|char_star:4,char_end:47";
"@frontend.route('/fe2'),type='decorator'\nline_star:263,line_end:263|char_star:4,char_end:27"[shape="box",fillcolor="white",style=filled];
"@frontend.route('/fe2')\n    def frontend_page2():\n        return flask.url_for('.frontend_index'),type='decorated_definition'\nline_star:263,line_end:265|char_star:4,char_end:47"->"@frontend.route('/fe2'),type='decorator'\nline_star:263,line_end:263|char_star:4,char_end:27";
"def frontend_page2():\n        return flask.url_for('.frontend_index'),type='function_definition'\nline_star:264,line_end:265|char_star:4,char_end:47"[shape="box",fillcolor="#cee6b4",style=filled];
"@frontend.route('/fe2')\n    def frontend_page2():\n        return flask.url_for('.frontend_index'),type='decorated_definition'\nline_star:263,line_end:265|char_star:4,char_end:47"->"def frontend_page2():\n        return flask.url_for('.frontend_index'),type='function_definition'\nline_star:264,line_end:265|char_star:4,char_end:47";
"frontend_page2,type='identifier'\nline_star:264,line_end:264|char_star:8,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"def frontend_page2():\n        return flask.url_for('.frontend_index'),type='function_definition'\nline_star:264,line_end:265|char_star:4,char_end:47"->"frontend_page2,type='identifier'\nline_star:264,line_end:264|char_star:8,char_end:22";
"type='INFORMATION BLOCK'\nline_star:265,line_end:265|char_star:8,char_end:47"[shape="point",fillcolor="#121013",style=filled];
"def frontend_page2():\n        return flask.url_for('.frontend_index'),type='function_definition'\nline_star:264,line_end:265|char_star:4,char_end:47"->"type='INFORMATION BLOCK'\nline_star:265,line_end:265|char_star:8,char_end:47";
"return flask.url_for('.frontend_index'),type='return_statement'\nline_star:265,line_end:265|char_star:8,char_end:47"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:265,line_end:265|char_star:8,char_end:47"->"return flask.url_for('.frontend_index'),type='return_statement'\nline_star:265,line_end:265|char_star:8,char_end:47";
"@backend.route('/be')\n    def backend_index():\n        return flask.url_for('myapp.frontend.frontend_index'),type='decorated_definition'\nline_star:267,line_end:269|char_star:4,char_end:61"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:256,line_end:276|char_star:4,char_end:51"->"@backend.route('/be')\n    def backend_index():\n        return flask.url_for('myapp.frontend.frontend_index'),type='decorated_definition'\nline_star:267,line_end:269|char_star:4,char_end:61";
"@backend.route('/be'),type='decorator'\nline_star:267,line_end:267|char_star:4,char_end:25"[shape="box",fillcolor="white",style=filled];
"@backend.route('/be')\n    def backend_index():\n        return flask.url_for('myapp.frontend.frontend_index'),type='decorated_definition'\nline_star:267,line_end:269|char_star:4,char_end:61"->"@backend.route('/be'),type='decorator'\nline_star:267,line_end:267|char_star:4,char_end:25";
"def backend_index():\n        return flask.url_for('myapp.frontend.frontend_index'),type='function_definition'\nline_star:268,line_end:269|char_star:4,char_end:61"[shape="box",fillcolor="#cee6b4",style=filled];
"@backend.route('/be')\n    def backend_index():\n        return flask.url_for('myapp.frontend.frontend_index'),type='decorated_definition'\nline_star:267,line_end:269|char_star:4,char_end:61"->"def backend_index():\n        return flask.url_for('myapp.frontend.frontend_index'),type='function_definition'\nline_star:268,line_end:269|char_star:4,char_end:61";
"backend_index,type='identifier'\nline_star:268,line_end:268|char_star:8,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"def backend_index():\n        return flask.url_for('myapp.frontend.frontend_index'),type='function_definition'\nline_star:268,line_end:269|char_star:4,char_end:61"->"backend_index,type='identifier'\nline_star:268,line_end:268|char_star:8,char_end:21";
"type='INFORMATION BLOCK'\nline_star:269,line_end:269|char_star:8,char_end:61"[shape="point",fillcolor="#121013",style=filled];
"def backend_index():\n        return flask.url_for('myapp.frontend.frontend_index'),type='function_definition'\nline_star:268,line_end:269|char_star:4,char_end:61"->"type='INFORMATION BLOCK'\nline_star:269,line_end:269|char_star:8,char_end:61";
"return flask.url_for('myapp.frontend.frontend_index'),type='return_statement'\nline_star:269,line_end:269|char_star:8,char_end:61"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:269,line_end:269|char_star:8,char_end:61"->"return flask.url_for('myapp.frontend.frontend_index'),type='return_statement'\nline_star:269,line_end:269|char_star:8,char_end:61";
"assert client.get('/fe').data.strip() == b'/be',type='assert_statement'\nline_star:274,line_end:274|char_star:4,char_end:51"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:256,line_end:276|char_star:4,char_end:51"->"assert client.get('/fe').data.strip() == b'/be',type='assert_statement'\nline_star:274,line_end:274|char_star:4,char_end:51";
"client.get('/fe').data.strip() == b'/be',type='comparison_operator'\nline_star:274,line_end:274|char_star:11,char_end:51"[shape="box",fillcolor="white",style=filled];
"assert client.get('/fe').data.strip() == b'/be',type='assert_statement'\nline_star:274,line_end:274|char_star:4,char_end:51"->"client.get('/fe').data.strip() == b'/be',type='comparison_operator'\nline_star:274,line_end:274|char_star:11,char_end:51";
"client.get('/fe').data.strip(),type='call'\nline_star:274,line_end:274|char_star:11,char_end:41"[shape="box",fillcolor="white",style=filled];
"client.get('/fe').data.strip() == b'/be',type='comparison_operator'\nline_star:274,line_end:274|char_star:11,char_end:51"->"client.get('/fe').data.strip(),type='call'\nline_star:274,line_end:274|char_star:11,char_end:41";
"client.get('/fe').data.strip,type='attribute'\nline_star:274,line_end:274|char_star:11,char_end:39"[shape="box",fillcolor="white",style=filled];
"client.get('/fe').data.strip(),type='call'\nline_star:274,line_end:274|char_star:11,char_end:41"->"client.get('/fe').data.strip,type='attribute'\nline_star:274,line_end:274|char_star:11,char_end:39";
"client.get('/fe').data,type='attribute'\nline_star:274,line_end:274|char_star:11,char_end:33"[shape="box",fillcolor="white",style=filled];
"client.get('/fe').data.strip,type='attribute'\nline_star:274,line_end:274|char_star:11,char_end:39"->"client.get('/fe').data,type='attribute'\nline_star:274,line_end:274|char_star:11,char_end:33";
"client.get('/fe'),type='call'\nline_star:274,line_end:274|char_star:11,char_end:28"[shape="box",fillcolor="white",style=filled];
"client.get('/fe').data,type='attribute'\nline_star:274,line_end:274|char_star:11,char_end:33"->"client.get('/fe'),type='call'\nline_star:274,line_end:274|char_star:11,char_end:28";
"client.get,type='attribute'\nline_star:274,line_end:274|char_star:11,char_end:21"[shape="box",fillcolor="white",style=filled];
"client.get('/fe'),type='call'\nline_star:274,line_end:274|char_star:11,char_end:28"->"client.get,type='attribute'\nline_star:274,line_end:274|char_star:11,char_end:21";
"client,type='identifier'\nline_star:274,line_end:274|char_star:11,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"client.get,type='attribute'\nline_star:274,line_end:274|char_star:11,char_end:21"->"client,type='identifier'\nline_star:274,line_end:274|char_star:11,char_end:17";
"get,type='identifier'\nline_star:274,line_end:274|char_star:18,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"client.get,type='attribute'\nline_star:274,line_end:274|char_star:11,char_end:21"->"get,type='identifier'\nline_star:274,line_end:274|char_star:18,char_end:21";
"('/fe'),type='argument_list'\nline_star:274,line_end:274|char_star:21,char_end:28"[shape="box",fillcolor="white",style=filled];
"client.get('/fe'),type='call'\nline_star:274,line_end:274|char_star:11,char_end:28"->"('/fe'),type='argument_list'\nline_star:274,line_end:274|char_star:21,char_end:28";
"data,type='identifier'\nline_star:274,line_end:274|char_star:29,char_end:33"[shape="point",fillcolor="#121013",style=filled];
"client.get('/fe').data,type='attribute'\nline_star:274,line_end:274|char_star:11,char_end:33"->"data,type='identifier'\nline_star:274,line_end:274|char_star:29,char_end:33";
"strip,type='identifier'\nline_star:274,line_end:274|char_star:34,char_end:39"[shape="point",fillcolor="#121013",style=filled];
"client.get('/fe').data.strip,type='attribute'\nline_star:274,line_end:274|char_star:11,char_end:39"->"strip,type='identifier'\nline_star:274,line_end:274|char_star:34,char_end:39";
"assert client.get('/fe2').data.strip() == b'/fe',type='assert_statement'\nline_star:275,line_end:275|char_star:4,char_end:52"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:256,line_end:276|char_star:4,char_end:51"->"assert client.get('/fe2').data.strip() == b'/fe',type='assert_statement'\nline_star:275,line_end:275|char_star:4,char_end:52";
"client.get('/fe2').data.strip() == b'/fe',type='comparison_operator'\nline_star:275,line_end:275|char_star:11,char_end:52"[shape="box",fillcolor="white",style=filled];
"assert client.get('/fe2').data.strip() == b'/fe',type='assert_statement'\nline_star:275,line_end:275|char_star:4,char_end:52"->"client.get('/fe2').data.strip() == b'/fe',type='comparison_operator'\nline_star:275,line_end:275|char_star:11,char_end:52";
"client.get('/fe2').data.strip(),type='call'\nline_star:275,line_end:275|char_star:11,char_end:42"[shape="box",fillcolor="white",style=filled];
"client.get('/fe2').data.strip() == b'/fe',type='comparison_operator'\nline_star:275,line_end:275|char_star:11,char_end:52"->"client.get('/fe2').data.strip(),type='call'\nline_star:275,line_end:275|char_star:11,char_end:42";
"client.get('/fe2').data.strip,type='attribute'\nline_star:275,line_end:275|char_star:11,char_end:40"[shape="box",fillcolor="white",style=filled];
"client.get('/fe2').data.strip(),type='call'\nline_star:275,line_end:275|char_star:11,char_end:42"->"client.get('/fe2').data.strip,type='attribute'\nline_star:275,line_end:275|char_star:11,char_end:40";
"client.get('/fe2').data,type='attribute'\nline_star:275,line_end:275|char_star:11,char_end:34"[shape="box",fillcolor="white",style=filled];
"client.get('/fe2').data.strip,type='attribute'\nline_star:275,line_end:275|char_star:11,char_end:40"->"client.get('/fe2').data,type='attribute'\nline_star:275,line_end:275|char_star:11,char_end:34";
"client.get('/fe2'),type='call'\nline_star:275,line_end:275|char_star:11,char_end:29"[shape="box",fillcolor="white",style=filled];
"client.get('/fe2').data,type='attribute'\nline_star:275,line_end:275|char_star:11,char_end:34"->"client.get('/fe2'),type='call'\nline_star:275,line_end:275|char_star:11,char_end:29";
"client.get,type='attribute'\nline_star:275,line_end:275|char_star:11,char_end:21"[shape="box",fillcolor="white",style=filled];
"client.get('/fe2'),type='call'\nline_star:275,line_end:275|char_star:11,char_end:29"->"client.get,type='attribute'\nline_star:275,line_end:275|char_star:11,char_end:21";
"client,type='identifier'\nline_star:275,line_end:275|char_star:11,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"client.get,type='attribute'\nline_star:275,line_end:275|char_star:11,char_end:21"->"client,type='identifier'\nline_star:275,line_end:275|char_star:11,char_end:17";
"get,type='identifier'\nline_star:275,line_end:275|char_star:18,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"client.get,type='attribute'\nline_star:275,line_end:275|char_star:11,char_end:21"->"get,type='identifier'\nline_star:275,line_end:275|char_star:18,char_end:21";
"('/fe2'),type='argument_list'\nline_star:275,line_end:275|char_star:21,char_end:29"[shape="box",fillcolor="white",style=filled];
"client.get('/fe2'),type='call'\nline_star:275,line_end:275|char_star:11,char_end:29"->"('/fe2'),type='argument_list'\nline_star:275,line_end:275|char_star:21,char_end:29";
"data,type='identifier'\nline_star:275,line_end:275|char_star:30,char_end:34"[shape="point",fillcolor="#121013",style=filled];
"client.get('/fe2').data,type='attribute'\nline_star:275,line_end:275|char_star:11,char_end:34"->"data,type='identifier'\nline_star:275,line_end:275|char_star:30,char_end:34";
"strip,type='identifier'\nline_star:275,line_end:275|char_star:35,char_end:40"[shape="point",fillcolor="#121013",style=filled];
"client.get('/fe2').data.strip,type='attribute'\nline_star:275,line_end:275|char_star:11,char_end:40"->"strip,type='identifier'\nline_star:275,line_end:275|char_star:35,char_end:40";
"assert client.get('/be').data.strip() == b'/fe',type='assert_statement'\nline_star:276,line_end:276|char_star:4,char_end:51"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:256,line_end:276|char_star:4,char_end:51"->"assert client.get('/be').data.strip() == b'/fe',type='assert_statement'\nline_star:276,line_end:276|char_star:4,char_end:51";
"client.get('/be').data.strip() == b'/fe',type='comparison_operator'\nline_star:276,line_end:276|char_star:11,char_end:51"[shape="box",fillcolor="white",style=filled];
"assert client.get('/be').data.strip() == b'/fe',type='assert_statement'\nline_star:276,line_end:276|char_star:4,char_end:51"->"client.get('/be').data.strip() == b'/fe',type='comparison_operator'\nline_star:276,line_end:276|char_star:11,char_end:51";
"client.get('/be').data.strip(),type='call'\nline_star:276,line_end:276|char_star:11,char_end:41"[shape="box",fillcolor="white",style=filled];
"client.get('/be').data.strip() == b'/fe',type='comparison_operator'\nline_star:276,line_end:276|char_star:11,char_end:51"->"client.get('/be').data.strip(),type='call'\nline_star:276,line_end:276|char_star:11,char_end:41";
"client.get('/be').data.strip,type='attribute'\nline_star:276,line_end:276|char_star:11,char_end:39"[shape="box",fillcolor="white",style=filled];
"client.get('/be').data.strip(),type='call'\nline_star:276,line_end:276|char_star:11,char_end:41"->"client.get('/be').data.strip,type='attribute'\nline_star:276,line_end:276|char_star:11,char_end:39";
"client.get('/be').data,type='attribute'\nline_star:276,line_end:276|char_star:11,char_end:33"[shape="box",fillcolor="white",style=filled];
"client.get('/be').data.strip,type='attribute'\nline_star:276,line_end:276|char_star:11,char_end:39"->"client.get('/be').data,type='attribute'\nline_star:276,line_end:276|char_star:11,char_end:33";
"client.get('/be'),type='call'\nline_star:276,line_end:276|char_star:11,char_end:28"[shape="box",fillcolor="white",style=filled];
"client.get('/be').data,type='attribute'\nline_star:276,line_end:276|char_star:11,char_end:33"->"client.get('/be'),type='call'\nline_star:276,line_end:276|char_star:11,char_end:28";
"client.get,type='attribute'\nline_star:276,line_end:276|char_star:11,char_end:21"[shape="box",fillcolor="white",style=filled];
"client.get('/be'),type='call'\nline_star:276,line_end:276|char_star:11,char_end:28"->"client.get,type='attribute'\nline_star:276,line_end:276|char_star:11,char_end:21";
"client,type='identifier'\nline_star:276,line_end:276|char_star:11,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"client.get,type='attribute'\nline_star:276,line_end:276|char_star:11,char_end:21"->"client,type='identifier'\nline_star:276,line_end:276|char_star:11,char_end:17";
"get,type='identifier'\nline_star:276,line_end:276|char_star:18,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"client.get,type='attribute'\nline_star:276,line_end:276|char_star:11,char_end:21"->"get,type='identifier'\nline_star:276,line_end:276|char_star:18,char_end:21";
"('/be'),type='argument_list'\nline_star:276,line_end:276|char_star:21,char_end:28"[shape="box",fillcolor="white",style=filled];
"client.get('/be'),type='call'\nline_star:276,line_end:276|char_star:11,char_end:28"->"('/be'),type='argument_list'\nline_star:276,line_end:276|char_star:21,char_end:28";
"data,type='identifier'\nline_star:276,line_end:276|char_star:29,char_end:33"[shape="point",fillcolor="#121013",style=filled];
"client.get('/be').data,type='attribute'\nline_star:276,line_end:276|char_star:11,char_end:33"->"data,type='identifier'\nline_star:276,line_end:276|char_star:29,char_end:33";
"strip,type='identifier'\nline_star:276,line_end:276|char_star:34,char_end:39"[shape="point",fillcolor="#121013",style=filled];
"client.get('/be').data.strip,type='attribute'\nline_star:276,line_end:276|char_star:11,char_end:39"->"strip,type='identifier'\nline_star:276,line_end:276|char_star:34,char_end:39";
"def test_dotted_names_from_app(app, client):\n    test = flask.Blueprint('test', __name__)\n\n    @app.route('/')\n    def app_index():\n        return flask.url_for('test.index')\n\n    @test.route('/test/')\n    def index():\n        return flask.url_for('app_index')\n\n    app.register_blueprint(test)\n\n    rv = client.get('/')\n    assert rv.data == b'/test/',type='function_definition'\nline_star:279,line_end:293|char_star:0,char_end:31"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_dotted_names_from_app(app, client):\n    test = flask.Blueprint('test', __name__)\n\n    @app.route('/')\n    def app_index():\n        return flask.url_for('test.index')\n\n    @test.route('/test/')\n    def index():\n        return flask.url_for('app_index')\n\n    app.register_blueprint(test)\n\n    rv = client.get('/')\n    assert rv.data == b'/test/',type='function_definition'\nline_star:279,line_end:293|char_star:0,char_end:31";
"test_dotted_names_from_app,type='identifier'\nline_star:279,line_end:279|char_star:4,char_end:30"[shape="point",fillcolor="#121013",style=filled];
"def test_dotted_names_from_app(app, client):\n    test = flask.Blueprint('test', __name__)\n\n    @app.route('/')\n    def app_index():\n        return flask.url_for('test.index')\n\n    @test.route('/test/')\n    def index():\n        return flask.url_for('app_index')\n\n    app.register_blueprint(test)\n\n    rv = client.get('/')\n    assert rv.data == b'/test/',type='function_definition'\nline_star:279,line_end:293|char_star:0,char_end:31"->"test_dotted_names_from_app,type='identifier'\nline_star:279,line_end:279|char_star:4,char_end:30";
"(app, client),type='parameters'\nline_star:279,line_end:279|char_star:30,char_end:43"[shape="box",fillcolor="white",style=filled];
"def test_dotted_names_from_app(app, client):\n    test = flask.Blueprint('test', __name__)\n\n    @app.route('/')\n    def app_index():\n        return flask.url_for('test.index')\n\n    @test.route('/test/')\n    def index():\n        return flask.url_for('app_index')\n\n    app.register_blueprint(test)\n\n    rv = client.get('/')\n    assert rv.data == b'/test/',type='function_definition'\nline_star:279,line_end:293|char_star:0,char_end:31"->"(app, client),type='parameters'\nline_star:279,line_end:279|char_star:30,char_end:43";
"app,type='identifier'\nline_star:279,line_end:279|char_star:31,char_end:34"[shape="point",fillcolor="#121013",style=filled];
"(app, client),type='parameters'\nline_star:279,line_end:279|char_star:30,char_end:43"->"app,type='identifier'\nline_star:279,line_end:279|char_star:31,char_end:34";
"client,type='identifier'\nline_star:279,line_end:279|char_star:36,char_end:42"[shape="point",fillcolor="#121013",style=filled];
"(app, client),type='parameters'\nline_star:279,line_end:279|char_star:30,char_end:43"->"client,type='identifier'\nline_star:279,line_end:279|char_star:36,char_end:42";
"type='INFORMATION BLOCK'\nline_star:280,line_end:293|char_star:4,char_end:31"[shape="point",fillcolor="#121013",style=filled];
"def test_dotted_names_from_app(app, client):\n    test = flask.Blueprint('test', __name__)\n\n    @app.route('/')\n    def app_index():\n        return flask.url_for('test.index')\n\n    @test.route('/test/')\n    def index():\n        return flask.url_for('app_index')\n\n    app.register_blueprint(test)\n\n    rv = client.get('/')\n    assert rv.data == b'/test/',type='function_definition'\nline_star:279,line_end:293|char_star:0,char_end:31"->"type='INFORMATION BLOCK'\nline_star:280,line_end:293|char_star:4,char_end:31";
"@app.route('/')\n    def app_index():\n        return flask.url_for('test.index'),type='decorated_definition'\nline_star:282,line_end:284|char_star:4,char_end:42"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:280,line_end:293|char_star:4,char_end:31"->"@app.route('/')\n    def app_index():\n        return flask.url_for('test.index'),type='decorated_definition'\nline_star:282,line_end:284|char_star:4,char_end:42";
"@app.route('/'),type='decorator'\nline_star:282,line_end:282|char_star:4,char_end:19"[shape="box",fillcolor="white",style=filled];
"@app.route('/')\n    def app_index():\n        return flask.url_for('test.index'),type='decorated_definition'\nline_star:282,line_end:284|char_star:4,char_end:42"->"@app.route('/'),type='decorator'\nline_star:282,line_end:282|char_star:4,char_end:19";
"def app_index():\n        return flask.url_for('test.index'),type='function_definition'\nline_star:283,line_end:284|char_star:4,char_end:42"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.route('/')\n    def app_index():\n        return flask.url_for('test.index'),type='decorated_definition'\nline_star:282,line_end:284|char_star:4,char_end:42"->"def app_index():\n        return flask.url_for('test.index'),type='function_definition'\nline_star:283,line_end:284|char_star:4,char_end:42";
"app_index,type='identifier'\nline_star:283,line_end:283|char_star:8,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"def app_index():\n        return flask.url_for('test.index'),type='function_definition'\nline_star:283,line_end:284|char_star:4,char_end:42"->"app_index,type='identifier'\nline_star:283,line_end:283|char_star:8,char_end:17";
"type='INFORMATION BLOCK'\nline_star:284,line_end:284|char_star:8,char_end:42"[shape="point",fillcolor="#121013",style=filled];
"def app_index():\n        return flask.url_for('test.index'),type='function_definition'\nline_star:283,line_end:284|char_star:4,char_end:42"->"type='INFORMATION BLOCK'\nline_star:284,line_end:284|char_star:8,char_end:42";
"return flask.url_for('test.index'),type='return_statement'\nline_star:284,line_end:284|char_star:8,char_end:42"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:284,line_end:284|char_star:8,char_end:42"->"return flask.url_for('test.index'),type='return_statement'\nline_star:284,line_end:284|char_star:8,char_end:42";
"@test.route('/test/')\n    def index():\n        return flask.url_for('app_index'),type='decorated_definition'\nline_star:286,line_end:288|char_star:4,char_end:41"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:280,line_end:293|char_star:4,char_end:31"->"@test.route('/test/')\n    def index():\n        return flask.url_for('app_index'),type='decorated_definition'\nline_star:286,line_end:288|char_star:4,char_end:41";
"@test.route('/test/'),type='decorator'\nline_star:286,line_end:286|char_star:4,char_end:25"[shape="box",fillcolor="white",style=filled];
"@test.route('/test/')\n    def index():\n        return flask.url_for('app_index'),type='decorated_definition'\nline_star:286,line_end:288|char_star:4,char_end:41"->"@test.route('/test/'),type='decorator'\nline_star:286,line_end:286|char_star:4,char_end:25";
"def index():\n        return flask.url_for('app_index'),type='function_definition'\nline_star:287,line_end:288|char_star:4,char_end:41"[shape="box",fillcolor="#cee6b4",style=filled];
"@test.route('/test/')\n    def index():\n        return flask.url_for('app_index'),type='decorated_definition'\nline_star:286,line_end:288|char_star:4,char_end:41"->"def index():\n        return flask.url_for('app_index'),type='function_definition'\nline_star:287,line_end:288|char_star:4,char_end:41";
"index,type='identifier'\nline_star:287,line_end:287|char_star:8,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"def index():\n        return flask.url_for('app_index'),type='function_definition'\nline_star:287,line_end:288|char_star:4,char_end:41"->"index,type='identifier'\nline_star:287,line_end:287|char_star:8,char_end:13";
"type='INFORMATION BLOCK'\nline_star:288,line_end:288|char_star:8,char_end:41"[shape="point",fillcolor="#121013",style=filled];
"def index():\n        return flask.url_for('app_index'),type='function_definition'\nline_star:287,line_end:288|char_star:4,char_end:41"->"type='INFORMATION BLOCK'\nline_star:288,line_end:288|char_star:8,char_end:41";
"return flask.url_for('app_index'),type='return_statement'\nline_star:288,line_end:288|char_star:8,char_end:41"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:288,line_end:288|char_star:8,char_end:41"->"return flask.url_for('app_index'),type='return_statement'\nline_star:288,line_end:288|char_star:8,char_end:41";
"assert rv.data == b'/test/',type='assert_statement'\nline_star:293,line_end:293|char_star:4,char_end:31"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:280,line_end:293|char_star:4,char_end:31"->"assert rv.data == b'/test/',type='assert_statement'\nline_star:293,line_end:293|char_star:4,char_end:31";
"rv.data == b'/test/',type='comparison_operator'\nline_star:293,line_end:293|char_star:11,char_end:31"[shape="box",fillcolor="white",style=filled];
"assert rv.data == b'/test/',type='assert_statement'\nline_star:293,line_end:293|char_star:4,char_end:31"->"rv.data == b'/test/',type='comparison_operator'\nline_star:293,line_end:293|char_star:11,char_end:31";
"rv.data,type='attribute'\nline_star:293,line_end:293|char_star:11,char_end:18"[shape="box",fillcolor="white",style=filled];
"rv.data == b'/test/',type='comparison_operator'\nline_star:293,line_end:293|char_star:11,char_end:31"->"rv.data,type='attribute'\nline_star:293,line_end:293|char_star:11,char_end:18";
"rv,type='identifier'\nline_star:293,line_end:293|char_star:11,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"rv.data,type='attribute'\nline_star:293,line_end:293|char_star:11,char_end:18"->"rv,type='identifier'\nline_star:293,line_end:293|char_star:11,char_end:13";
"data,type='identifier'\nline_star:293,line_end:293|char_star:14,char_end:18"[shape="point",fillcolor="#121013",style=filled];
"rv.data,type='attribute'\nline_star:293,line_end:293|char_star:11,char_end:18"->"data,type='identifier'\nline_star:293,line_end:293|char_star:14,char_end:18";
"def test_empty_url_defaults(app, client):\n    bp = flask.Blueprint('bp', __name__)\n\n    @bp.route('/', defaults={'page': 1})\n    @bp.route('/page/<int:page>')\n    def something(page):\n        return str(page)\n\n    app.register_blueprint(bp)\n\n    assert client.get('/').data == b'1'\n    assert client.get('/page/2').data == b'2',type='function_definition'\nline_star:296,line_end:307|char_star:0,char_end:45"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_empty_url_defaults(app, client):\n    bp = flask.Blueprint('bp', __name__)\n\n    @bp.route('/', defaults={'page': 1})\n    @bp.route('/page/<int:page>')\n    def something(page):\n        return str(page)\n\n    app.register_blueprint(bp)\n\n    assert client.get('/').data == b'1'\n    assert client.get('/page/2').data == b'2',type='function_definition'\nline_star:296,line_end:307|char_star:0,char_end:45";
"test_empty_url_defaults,type='identifier'\nline_star:296,line_end:296|char_star:4,char_end:27"[shape="point",fillcolor="#121013",style=filled];
"def test_empty_url_defaults(app, client):\n    bp = flask.Blueprint('bp', __name__)\n\n    @bp.route('/', defaults={'page': 1})\n    @bp.route('/page/<int:page>')\n    def something(page):\n        return str(page)\n\n    app.register_blueprint(bp)\n\n    assert client.get('/').data == b'1'\n    assert client.get('/page/2').data == b'2',type='function_definition'\nline_star:296,line_end:307|char_star:0,char_end:45"->"test_empty_url_defaults,type='identifier'\nline_star:296,line_end:296|char_star:4,char_end:27";
"(app, client),type='parameters'\nline_star:296,line_end:296|char_star:27,char_end:40"[shape="box",fillcolor="white",style=filled];
"def test_empty_url_defaults(app, client):\n    bp = flask.Blueprint('bp', __name__)\n\n    @bp.route('/', defaults={'page': 1})\n    @bp.route('/page/<int:page>')\n    def something(page):\n        return str(page)\n\n    app.register_blueprint(bp)\n\n    assert client.get('/').data == b'1'\n    assert client.get('/page/2').data == b'2',type='function_definition'\nline_star:296,line_end:307|char_star:0,char_end:45"->"(app, client),type='parameters'\nline_star:296,line_end:296|char_star:27,char_end:40";
"app,type='identifier'\nline_star:296,line_end:296|char_star:28,char_end:31"[shape="point",fillcolor="#121013",style=filled];
"(app, client),type='parameters'\nline_star:296,line_end:296|char_star:27,char_end:40"->"app,type='identifier'\nline_star:296,line_end:296|char_star:28,char_end:31";
"client,type='identifier'\nline_star:296,line_end:296|char_star:33,char_end:39"[shape="point",fillcolor="#121013",style=filled];
"(app, client),type='parameters'\nline_star:296,line_end:296|char_star:27,char_end:40"->"client,type='identifier'\nline_star:296,line_end:296|char_star:33,char_end:39";
"type='INFORMATION BLOCK'\nline_star:297,line_end:307|char_star:4,char_end:45"[shape="point",fillcolor="#121013",style=filled];
"def test_empty_url_defaults(app, client):\n    bp = flask.Blueprint('bp', __name__)\n\n    @bp.route('/', defaults={'page': 1})\n    @bp.route('/page/<int:page>')\n    def something(page):\n        return str(page)\n\n    app.register_blueprint(bp)\n\n    assert client.get('/').data == b'1'\n    assert client.get('/page/2').data == b'2',type='function_definition'\nline_star:296,line_end:307|char_star:0,char_end:45"->"type='INFORMATION BLOCK'\nline_star:297,line_end:307|char_star:4,char_end:45";
"@bp.route('/', defaults={'page': 1})\n    @bp.route('/page/<int:page>')\n    def something(page):\n        return str(page),type='decorated_definition'\nline_star:299,line_end:302|char_star:4,char_end:24"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:297,line_end:307|char_star:4,char_end:45"->"@bp.route('/', defaults={'page': 1})\n    @bp.route('/page/<int:page>')\n    def something(page):\n        return str(page),type='decorated_definition'\nline_star:299,line_end:302|char_star:4,char_end:24";
"@bp.route('/', defaults={'page': 1}),type='decorator'\nline_star:299,line_end:299|char_star:4,char_end:40"[shape="box",fillcolor="white",style=filled];
"@bp.route('/', defaults={'page': 1})\n    @bp.route('/page/<int:page>')\n    def something(page):\n        return str(page),type='decorated_definition'\nline_star:299,line_end:302|char_star:4,char_end:24"->"@bp.route('/', defaults={'page': 1}),type='decorator'\nline_star:299,line_end:299|char_star:4,char_end:40";
"@bp.route('/page/<int:page>'),type='decorator'\nline_star:300,line_end:300|char_star:4,char_end:33"[shape="box",fillcolor="white",style=filled];
"@bp.route('/', defaults={'page': 1})\n    @bp.route('/page/<int:page>')\n    def something(page):\n        return str(page),type='decorated_definition'\nline_star:299,line_end:302|char_star:4,char_end:24"->"@bp.route('/page/<int:page>'),type='decorator'\nline_star:300,line_end:300|char_star:4,char_end:33";
"def something(page):\n        return str(page),type='function_definition'\nline_star:301,line_end:302|char_star:4,char_end:24"[shape="box",fillcolor="#cee6b4",style=filled];
"@bp.route('/', defaults={'page': 1})\n    @bp.route('/page/<int:page>')\n    def something(page):\n        return str(page),type='decorated_definition'\nline_star:299,line_end:302|char_star:4,char_end:24"->"def something(page):\n        return str(page),type='function_definition'\nline_star:301,line_end:302|char_star:4,char_end:24";
"something,type='identifier'\nline_star:301,line_end:301|char_star:8,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"def something(page):\n        return str(page),type='function_definition'\nline_star:301,line_end:302|char_star:4,char_end:24"->"something,type='identifier'\nline_star:301,line_end:301|char_star:8,char_end:17";
"(page),type='parameters'\nline_star:301,line_end:301|char_star:17,char_end:23"[shape="box",fillcolor="white",style=filled];
"def something(page):\n        return str(page),type='function_definition'\nline_star:301,line_end:302|char_star:4,char_end:24"->"(page),type='parameters'\nline_star:301,line_end:301|char_star:17,char_end:23";
"page,type='identifier'\nline_star:301,line_end:301|char_star:18,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"(page),type='parameters'\nline_star:301,line_end:301|char_star:17,char_end:23"->"page,type='identifier'\nline_star:301,line_end:301|char_star:18,char_end:22";
"type='INFORMATION BLOCK'\nline_star:302,line_end:302|char_star:8,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"def something(page):\n        return str(page),type='function_definition'\nline_star:301,line_end:302|char_star:4,char_end:24"->"type='INFORMATION BLOCK'\nline_star:302,line_end:302|char_star:8,char_end:24";
"return str(page),type='return_statement'\nline_star:302,line_end:302|char_star:8,char_end:24"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:302,line_end:302|char_star:8,char_end:24"->"return str(page),type='return_statement'\nline_star:302,line_end:302|char_star:8,char_end:24";
"assert client.get('/').data == b'1',type='assert_statement'\nline_star:306,line_end:306|char_star:4,char_end:39"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:297,line_end:307|char_star:4,char_end:45"->"assert client.get('/').data == b'1',type='assert_statement'\nline_star:306,line_end:306|char_star:4,char_end:39";
"client.get('/').data == b'1',type='comparison_operator'\nline_star:306,line_end:306|char_star:11,char_end:39"[shape="box",fillcolor="white",style=filled];
"assert client.get('/').data == b'1',type='assert_statement'\nline_star:306,line_end:306|char_star:4,char_end:39"->"client.get('/').data == b'1',type='comparison_operator'\nline_star:306,line_end:306|char_star:11,char_end:39";
"client.get('/').data,type='attribute'\nline_star:306,line_end:306|char_star:11,char_end:31"[shape="box",fillcolor="white",style=filled];
"client.get('/').data == b'1',type='comparison_operator'\nline_star:306,line_end:306|char_star:11,char_end:39"->"client.get('/').data,type='attribute'\nline_star:306,line_end:306|char_star:11,char_end:31";
"client.get('/'),type='call'\nline_star:306,line_end:306|char_star:11,char_end:26"[shape="box",fillcolor="white",style=filled];
"client.get('/').data,type='attribute'\nline_star:306,line_end:306|char_star:11,char_end:31"->"client.get('/'),type='call'\nline_star:306,line_end:306|char_star:11,char_end:26";
"client.get,type='attribute'\nline_star:306,line_end:306|char_star:11,char_end:21"[shape="box",fillcolor="white",style=filled];
"client.get('/'),type='call'\nline_star:306,line_end:306|char_star:11,char_end:26"->"client.get,type='attribute'\nline_star:306,line_end:306|char_star:11,char_end:21";
"client,type='identifier'\nline_star:306,line_end:306|char_star:11,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"client.get,type='attribute'\nline_star:306,line_end:306|char_star:11,char_end:21"->"client,type='identifier'\nline_star:306,line_end:306|char_star:11,char_end:17";
"get,type='identifier'\nline_star:306,line_end:306|char_star:18,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"client.get,type='attribute'\nline_star:306,line_end:306|char_star:11,char_end:21"->"get,type='identifier'\nline_star:306,line_end:306|char_star:18,char_end:21";
"('/'),type='argument_list'\nline_star:306,line_end:306|char_star:21,char_end:26"[shape="box",fillcolor="white",style=filled];
"client.get('/'),type='call'\nline_star:306,line_end:306|char_star:11,char_end:26"->"('/'),type='argument_list'\nline_star:306,line_end:306|char_star:21,char_end:26";
"data,type='identifier'\nline_star:306,line_end:306|char_star:27,char_end:31"[shape="point",fillcolor="#121013",style=filled];
"client.get('/').data,type='attribute'\nline_star:306,line_end:306|char_star:11,char_end:31"->"data,type='identifier'\nline_star:306,line_end:306|char_star:27,char_end:31";
"assert client.get('/page/2').data == b'2',type='assert_statement'\nline_star:307,line_end:307|char_star:4,char_end:45"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:297,line_end:307|char_star:4,char_end:45"->"assert client.get('/page/2').data == b'2',type='assert_statement'\nline_star:307,line_end:307|char_star:4,char_end:45";
"client.get('/page/2').data == b'2',type='comparison_operator'\nline_star:307,line_end:307|char_star:11,char_end:45"[shape="box",fillcolor="white",style=filled];
"assert client.get('/page/2').data == b'2',type='assert_statement'\nline_star:307,line_end:307|char_star:4,char_end:45"->"client.get('/page/2').data == b'2',type='comparison_operator'\nline_star:307,line_end:307|char_star:11,char_end:45";
"client.get('/page/2').data,type='attribute'\nline_star:307,line_end:307|char_star:11,char_end:37"[shape="box",fillcolor="white",style=filled];
"client.get('/page/2').data == b'2',type='comparison_operator'\nline_star:307,line_end:307|char_star:11,char_end:45"->"client.get('/page/2').data,type='attribute'\nline_star:307,line_end:307|char_star:11,char_end:37";
"client.get('/page/2'),type='call'\nline_star:307,line_end:307|char_star:11,char_end:32"[shape="box",fillcolor="white",style=filled];
"client.get('/page/2').data,type='attribute'\nline_star:307,line_end:307|char_star:11,char_end:37"->"client.get('/page/2'),type='call'\nline_star:307,line_end:307|char_star:11,char_end:32";
"client.get,type='attribute'\nline_star:307,line_end:307|char_star:11,char_end:21"[shape="box",fillcolor="white",style=filled];
"client.get('/page/2'),type='call'\nline_star:307,line_end:307|char_star:11,char_end:32"->"client.get,type='attribute'\nline_star:307,line_end:307|char_star:11,char_end:21";
"client,type='identifier'\nline_star:307,line_end:307|char_star:11,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"client.get,type='attribute'\nline_star:307,line_end:307|char_star:11,char_end:21"->"client,type='identifier'\nline_star:307,line_end:307|char_star:11,char_end:17";
"get,type='identifier'\nline_star:307,line_end:307|char_star:18,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"client.get,type='attribute'\nline_star:307,line_end:307|char_star:11,char_end:21"->"get,type='identifier'\nline_star:307,line_end:307|char_star:18,char_end:21";
"('/page/2'),type='argument_list'\nline_star:307,line_end:307|char_star:21,char_end:32"[shape="box",fillcolor="white",style=filled];
"client.get('/page/2'),type='call'\nline_star:307,line_end:307|char_star:11,char_end:32"->"('/page/2'),type='argument_list'\nline_star:307,line_end:307|char_star:21,char_end:32";
"data,type='identifier'\nline_star:307,line_end:307|char_star:33,char_end:37"[shape="point",fillcolor="#121013",style=filled];
"client.get('/page/2').data,type='attribute'\nline_star:307,line_end:307|char_star:11,char_end:37"->"data,type='identifier'\nline_star:307,line_end:307|char_star:33,char_end:37";
"def test_route_decorator_custom_endpoint(app, client):\n    bp = flask.Blueprint('bp', __name__)\n\n    @bp.route('/foo')\n    def foo():\n        return flask.request.endpoint\n\n    @bp.route('/bar', endpoint='bar')\n    def foo_bar():\n        return flask.request.endpoint\n\n    @bp.route('/bar/123', endpoint='123')\n    def foo_bar_foo():\n        return flask.request.endpoint\n\n    @bp.route('/bar/foo')\n    def bar_foo():\n        return flask.request.endpoint\n\n    app.register_blueprint(bp, url_prefix='/py')\n\n    @app.route('/')\n    def index():\n        return flask.request.endpoint\n\n    assert client.get('/').data == b'index'\n    assert client.get('/py/foo').data == b'bp.foo'\n    assert client.get('/py/bar').data == b'bp.bar'\n    assert client.get('/py/bar/123').data == b'bp.123'\n    assert client.get('/py/bar/foo').data == b'bp.bar_foo',type='function_definition'\nline_star:310,line_end:339|char_star:0,char_end:58"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_route_decorator_custom_endpoint(app, client):\n    bp = flask.Blueprint('bp', __name__)\n\n    @bp.route('/foo')\n    def foo():\n        return flask.request.endpoint\n\n    @bp.route('/bar', endpoint='bar')\n    def foo_bar():\n        return flask.request.endpoint\n\n    @bp.route('/bar/123', endpoint='123')\n    def foo_bar_foo():\n        return flask.request.endpoint\n\n    @bp.route('/bar/foo')\n    def bar_foo():\n        return flask.request.endpoint\n\n    app.register_blueprint(bp, url_prefix='/py')\n\n    @app.route('/')\n    def index():\n        return flask.request.endpoint\n\n    assert client.get('/').data == b'index'\n    assert client.get('/py/foo').data == b'bp.foo'\n    assert client.get('/py/bar').data == b'bp.bar'\n    assert client.get('/py/bar/123').data == b'bp.123'\n    assert client.get('/py/bar/foo').data == b'bp.bar_foo',type='function_definition'\nline_star:310,line_end:339|char_star:0,char_end:58";
"test_route_decorator_custom_endpoint,type='identifier'\nline_star:310,line_end:310|char_star:4,char_end:40"[shape="point",fillcolor="#121013",style=filled];
"def test_route_decorator_custom_endpoint(app, client):\n    bp = flask.Blueprint('bp', __name__)\n\n    @bp.route('/foo')\n    def foo():\n        return flask.request.endpoint\n\n    @bp.route('/bar', endpoint='bar')\n    def foo_bar():\n        return flask.request.endpoint\n\n    @bp.route('/bar/123', endpoint='123')\n    def foo_bar_foo():\n        return flask.request.endpoint\n\n    @bp.route('/bar/foo')\n    def bar_foo():\n        return flask.request.endpoint\n\n    app.register_blueprint(bp, url_prefix='/py')\n\n    @app.route('/')\n    def index():\n        return flask.request.endpoint\n\n    assert client.get('/').data == b'index'\n    assert client.get('/py/foo').data == b'bp.foo'\n    assert client.get('/py/bar').data == b'bp.bar'\n    assert client.get('/py/bar/123').data == b'bp.123'\n    assert client.get('/py/bar/foo').data == b'bp.bar_foo',type='function_definition'\nline_star:310,line_end:339|char_star:0,char_end:58"->"test_route_decorator_custom_endpoint,type='identifier'\nline_star:310,line_end:310|char_star:4,char_end:40";
"(app, client),type='parameters'\nline_star:310,line_end:310|char_star:40,char_end:53"[shape="box",fillcolor="white",style=filled];
"def test_route_decorator_custom_endpoint(app, client):\n    bp = flask.Blueprint('bp', __name__)\n\n    @bp.route('/foo')\n    def foo():\n        return flask.request.endpoint\n\n    @bp.route('/bar', endpoint='bar')\n    def foo_bar():\n        return flask.request.endpoint\n\n    @bp.route('/bar/123', endpoint='123')\n    def foo_bar_foo():\n        return flask.request.endpoint\n\n    @bp.route('/bar/foo')\n    def bar_foo():\n        return flask.request.endpoint\n\n    app.register_blueprint(bp, url_prefix='/py')\n\n    @app.route('/')\n    def index():\n        return flask.request.endpoint\n\n    assert client.get('/').data == b'index'\n    assert client.get('/py/foo').data == b'bp.foo'\n    assert client.get('/py/bar').data == b'bp.bar'\n    assert client.get('/py/bar/123').data == b'bp.123'\n    assert client.get('/py/bar/foo').data == b'bp.bar_foo',type='function_definition'\nline_star:310,line_end:339|char_star:0,char_end:58"->"(app, client),type='parameters'\nline_star:310,line_end:310|char_star:40,char_end:53";
"app,type='identifier'\nline_star:310,line_end:310|char_star:41,char_end:44"[shape="point",fillcolor="#121013",style=filled];
"(app, client),type='parameters'\nline_star:310,line_end:310|char_star:40,char_end:53"->"app,type='identifier'\nline_star:310,line_end:310|char_star:41,char_end:44";
"client,type='identifier'\nline_star:310,line_end:310|char_star:46,char_end:52"[shape="point",fillcolor="#121013",style=filled];
"(app, client),type='parameters'\nline_star:310,line_end:310|char_star:40,char_end:53"->"client,type='identifier'\nline_star:310,line_end:310|char_star:46,char_end:52";
"type='INFORMATION BLOCK'\nline_star:311,line_end:339|char_star:4,char_end:58"[shape="point",fillcolor="#121013",style=filled];
"def test_route_decorator_custom_endpoint(app, client):\n    bp = flask.Blueprint('bp', __name__)\n\n    @bp.route('/foo')\n    def foo():\n        return flask.request.endpoint\n\n    @bp.route('/bar', endpoint='bar')\n    def foo_bar():\n        return flask.request.endpoint\n\n    @bp.route('/bar/123', endpoint='123')\n    def foo_bar_foo():\n        return flask.request.endpoint\n\n    @bp.route('/bar/foo')\n    def bar_foo():\n        return flask.request.endpoint\n\n    app.register_blueprint(bp, url_prefix='/py')\n\n    @app.route('/')\n    def index():\n        return flask.request.endpoint\n\n    assert client.get('/').data == b'index'\n    assert client.get('/py/foo').data == b'bp.foo'\n    assert client.get('/py/bar').data == b'bp.bar'\n    assert client.get('/py/bar/123').data == b'bp.123'\n    assert client.get('/py/bar/foo').data == b'bp.bar_foo',type='function_definition'\nline_star:310,line_end:339|char_star:0,char_end:58"->"type='INFORMATION BLOCK'\nline_star:311,line_end:339|char_star:4,char_end:58";
"@bp.route('/foo')\n    def foo():\n        return flask.request.endpoint,type='decorated_definition'\nline_star:313,line_end:315|char_star:4,char_end:37"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:311,line_end:339|char_star:4,char_end:58"->"@bp.route('/foo')\n    def foo():\n        return flask.request.endpoint,type='decorated_definition'\nline_star:313,line_end:315|char_star:4,char_end:37";
"@bp.route('/foo'),type='decorator'\nline_star:313,line_end:313|char_star:4,char_end:21"[shape="box",fillcolor="white",style=filled];
"@bp.route('/foo')\n    def foo():\n        return flask.request.endpoint,type='decorated_definition'\nline_star:313,line_end:315|char_star:4,char_end:37"->"@bp.route('/foo'),type='decorator'\nline_star:313,line_end:313|char_star:4,char_end:21";
"def foo():\n        return flask.request.endpoint,type='function_definition'\nline_star:314,line_end:315|char_star:4,char_end:37"[shape="box",fillcolor="#cee6b4",style=filled];
"@bp.route('/foo')\n    def foo():\n        return flask.request.endpoint,type='decorated_definition'\nline_star:313,line_end:315|char_star:4,char_end:37"->"def foo():\n        return flask.request.endpoint,type='function_definition'\nline_star:314,line_end:315|char_star:4,char_end:37";
"foo,type='identifier'\nline_star:314,line_end:314|char_star:8,char_end:11"[shape="point",fillcolor="#121013",style=filled];
"def foo():\n        return flask.request.endpoint,type='function_definition'\nline_star:314,line_end:315|char_star:4,char_end:37"->"foo,type='identifier'\nline_star:314,line_end:314|char_star:8,char_end:11";
"type='INFORMATION BLOCK'\nline_star:315,line_end:315|char_star:8,char_end:37"[shape="point",fillcolor="#121013",style=filled];
"def foo():\n        return flask.request.endpoint,type='function_definition'\nline_star:314,line_end:315|char_star:4,char_end:37"->"type='INFORMATION BLOCK'\nline_star:315,line_end:315|char_star:8,char_end:37";
"return flask.request.endpoint,type='return_statement'\nline_star:315,line_end:315|char_star:8,char_end:37"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:315,line_end:315|char_star:8,char_end:37"->"return flask.request.endpoint,type='return_statement'\nline_star:315,line_end:315|char_star:8,char_end:37";
"@bp.route('/bar', endpoint='bar')\n    def foo_bar():\n        return flask.request.endpoint,type='decorated_definition'\nline_star:317,line_end:319|char_star:4,char_end:37"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:311,line_end:339|char_star:4,char_end:58"->"@bp.route('/bar', endpoint='bar')\n    def foo_bar():\n        return flask.request.endpoint,type='decorated_definition'\nline_star:317,line_end:319|char_star:4,char_end:37";
"@bp.route('/bar', endpoint='bar'),type='decorator'\nline_star:317,line_end:317|char_star:4,char_end:37"[shape="box",fillcolor="white",style=filled];
"@bp.route('/bar', endpoint='bar')\n    def foo_bar():\n        return flask.request.endpoint,type='decorated_definition'\nline_star:317,line_end:319|char_star:4,char_end:37"->"@bp.route('/bar', endpoint='bar'),type='decorator'\nline_star:317,line_end:317|char_star:4,char_end:37";
"def foo_bar():\n        return flask.request.endpoint,type='function_definition'\nline_star:318,line_end:319|char_star:4,char_end:37"[shape="box",fillcolor="#cee6b4",style=filled];
"@bp.route('/bar', endpoint='bar')\n    def foo_bar():\n        return flask.request.endpoint,type='decorated_definition'\nline_star:317,line_end:319|char_star:4,char_end:37"->"def foo_bar():\n        return flask.request.endpoint,type='function_definition'\nline_star:318,line_end:319|char_star:4,char_end:37";
"foo_bar,type='identifier'\nline_star:318,line_end:318|char_star:8,char_end:15"[shape="point",fillcolor="#121013",style=filled];
"def foo_bar():\n        return flask.request.endpoint,type='function_definition'\nline_star:318,line_end:319|char_star:4,char_end:37"->"foo_bar,type='identifier'\nline_star:318,line_end:318|char_star:8,char_end:15";
"type='INFORMATION BLOCK'\nline_star:319,line_end:319|char_star:8,char_end:37"[shape="point",fillcolor="#121013",style=filled];
"def foo_bar():\n        return flask.request.endpoint,type='function_definition'\nline_star:318,line_end:319|char_star:4,char_end:37"->"type='INFORMATION BLOCK'\nline_star:319,line_end:319|char_star:8,char_end:37";
"return flask.request.endpoint,type='return_statement'\nline_star:319,line_end:319|char_star:8,char_end:37"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:319,line_end:319|char_star:8,char_end:37"->"return flask.request.endpoint,type='return_statement'\nline_star:319,line_end:319|char_star:8,char_end:37";
"@bp.route('/bar/123', endpoint='123')\n    def foo_bar_foo():\n        return flask.request.endpoint,type='decorated_definition'\nline_star:321,line_end:323|char_star:4,char_end:37"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:311,line_end:339|char_star:4,char_end:58"->"@bp.route('/bar/123', endpoint='123')\n    def foo_bar_foo():\n        return flask.request.endpoint,type='decorated_definition'\nline_star:321,line_end:323|char_star:4,char_end:37";
"@bp.route('/bar/123', endpoint='123'),type='decorator'\nline_star:321,line_end:321|char_star:4,char_end:41"[shape="box",fillcolor="white",style=filled];
"@bp.route('/bar/123', endpoint='123')\n    def foo_bar_foo():\n        return flask.request.endpoint,type='decorated_definition'\nline_star:321,line_end:323|char_star:4,char_end:37"->"@bp.route('/bar/123', endpoint='123'),type='decorator'\nline_star:321,line_end:321|char_star:4,char_end:41";
"def foo_bar_foo():\n        return flask.request.endpoint,type='function_definition'\nline_star:322,line_end:323|char_star:4,char_end:37"[shape="box",fillcolor="#cee6b4",style=filled];
"@bp.route('/bar/123', endpoint='123')\n    def foo_bar_foo():\n        return flask.request.endpoint,type='decorated_definition'\nline_star:321,line_end:323|char_star:4,char_end:37"->"def foo_bar_foo():\n        return flask.request.endpoint,type='function_definition'\nline_star:322,line_end:323|char_star:4,char_end:37";
"foo_bar_foo,type='identifier'\nline_star:322,line_end:322|char_star:8,char_end:19"[shape="point",fillcolor="#121013",style=filled];
"def foo_bar_foo():\n        return flask.request.endpoint,type='function_definition'\nline_star:322,line_end:323|char_star:4,char_end:37"->"foo_bar_foo,type='identifier'\nline_star:322,line_end:322|char_star:8,char_end:19";
"type='INFORMATION BLOCK'\nline_star:323,line_end:323|char_star:8,char_end:37"[shape="point",fillcolor="#121013",style=filled];
"def foo_bar_foo():\n        return flask.request.endpoint,type='function_definition'\nline_star:322,line_end:323|char_star:4,char_end:37"->"type='INFORMATION BLOCK'\nline_star:323,line_end:323|char_star:8,char_end:37";
"return flask.request.endpoint,type='return_statement'\nline_star:323,line_end:323|char_star:8,char_end:37"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:323,line_end:323|char_star:8,char_end:37"->"return flask.request.endpoint,type='return_statement'\nline_star:323,line_end:323|char_star:8,char_end:37";
"@bp.route('/bar/foo')\n    def bar_foo():\n        return flask.request.endpoint,type='decorated_definition'\nline_star:325,line_end:327|char_star:4,char_end:37"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:311,line_end:339|char_star:4,char_end:58"->"@bp.route('/bar/foo')\n    def bar_foo():\n        return flask.request.endpoint,type='decorated_definition'\nline_star:325,line_end:327|char_star:4,char_end:37";
"@bp.route('/bar/foo'),type='decorator'\nline_star:325,line_end:325|char_star:4,char_end:25"[shape="box",fillcolor="white",style=filled];
"@bp.route('/bar/foo')\n    def bar_foo():\n        return flask.request.endpoint,type='decorated_definition'\nline_star:325,line_end:327|char_star:4,char_end:37"->"@bp.route('/bar/foo'),type='decorator'\nline_star:325,line_end:325|char_star:4,char_end:25";
"def bar_foo():\n        return flask.request.endpoint,type='function_definition'\nline_star:326,line_end:327|char_star:4,char_end:37"[shape="box",fillcolor="#cee6b4",style=filled];
"@bp.route('/bar/foo')\n    def bar_foo():\n        return flask.request.endpoint,type='decorated_definition'\nline_star:325,line_end:327|char_star:4,char_end:37"->"def bar_foo():\n        return flask.request.endpoint,type='function_definition'\nline_star:326,line_end:327|char_star:4,char_end:37";
"bar_foo,type='identifier'\nline_star:326,line_end:326|char_star:8,char_end:15"[shape="point",fillcolor="#121013",style=filled];
"def bar_foo():\n        return flask.request.endpoint,type='function_definition'\nline_star:326,line_end:327|char_star:4,char_end:37"->"bar_foo,type='identifier'\nline_star:326,line_end:326|char_star:8,char_end:15";
"type='INFORMATION BLOCK'\nline_star:327,line_end:327|char_star:8,char_end:37"[shape="point",fillcolor="#121013",style=filled];
"def bar_foo():\n        return flask.request.endpoint,type='function_definition'\nline_star:326,line_end:327|char_star:4,char_end:37"->"type='INFORMATION BLOCK'\nline_star:327,line_end:327|char_star:8,char_end:37";
"return flask.request.endpoint,type='return_statement'\nline_star:327,line_end:327|char_star:8,char_end:37"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:327,line_end:327|char_star:8,char_end:37"->"return flask.request.endpoint,type='return_statement'\nline_star:327,line_end:327|char_star:8,char_end:37";
"@app.route('/')\n    def index():\n        return flask.request.endpoint,type='decorated_definition'\nline_star:331,line_end:333|char_star:4,char_end:37"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:311,line_end:339|char_star:4,char_end:58"->"@app.route('/')\n    def index():\n        return flask.request.endpoint,type='decorated_definition'\nline_star:331,line_end:333|char_star:4,char_end:37";
"@app.route('/'),type='decorator'\nline_star:331,line_end:331|char_star:4,char_end:19"[shape="box",fillcolor="white",style=filled];
"@app.route('/')\n    def index():\n        return flask.request.endpoint,type='decorated_definition'\nline_star:331,line_end:333|char_star:4,char_end:37"->"@app.route('/'),type='decorator'\nline_star:331,line_end:331|char_star:4,char_end:19";
"def index():\n        return flask.request.endpoint,type='function_definition'\nline_star:332,line_end:333|char_star:4,char_end:37"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.route('/')\n    def index():\n        return flask.request.endpoint,type='decorated_definition'\nline_star:331,line_end:333|char_star:4,char_end:37"->"def index():\n        return flask.request.endpoint,type='function_definition'\nline_star:332,line_end:333|char_star:4,char_end:37";
"index,type='identifier'\nline_star:332,line_end:332|char_star:8,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"def index():\n        return flask.request.endpoint,type='function_definition'\nline_star:332,line_end:333|char_star:4,char_end:37"->"index,type='identifier'\nline_star:332,line_end:332|char_star:8,char_end:13";
"type='INFORMATION BLOCK'\nline_star:333,line_end:333|char_star:8,char_end:37"[shape="point",fillcolor="#121013",style=filled];
"def index():\n        return flask.request.endpoint,type='function_definition'\nline_star:332,line_end:333|char_star:4,char_end:37"->"type='INFORMATION BLOCK'\nline_star:333,line_end:333|char_star:8,char_end:37";
"return flask.request.endpoint,type='return_statement'\nline_star:333,line_end:333|char_star:8,char_end:37"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:333,line_end:333|char_star:8,char_end:37"->"return flask.request.endpoint,type='return_statement'\nline_star:333,line_end:333|char_star:8,char_end:37";
"assert client.get('/').data == b'index',type='assert_statement'\nline_star:335,line_end:335|char_star:4,char_end:43"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:311,line_end:339|char_star:4,char_end:58"->"assert client.get('/').data == b'index',type='assert_statement'\nline_star:335,line_end:335|char_star:4,char_end:43";
"client.get('/').data == b'index',type='comparison_operator'\nline_star:335,line_end:335|char_star:11,char_end:43"[shape="box",fillcolor="white",style=filled];
"assert client.get('/').data == b'index',type='assert_statement'\nline_star:335,line_end:335|char_star:4,char_end:43"->"client.get('/').data == b'index',type='comparison_operator'\nline_star:335,line_end:335|char_star:11,char_end:43";
"client.get('/').data,type='attribute'\nline_star:335,line_end:335|char_star:11,char_end:31"[shape="box",fillcolor="white",style=filled];
"client.get('/').data == b'index',type='comparison_operator'\nline_star:335,line_end:335|char_star:11,char_end:43"->"client.get('/').data,type='attribute'\nline_star:335,line_end:335|char_star:11,char_end:31";
"client.get('/'),type='call'\nline_star:335,line_end:335|char_star:11,char_end:26"[shape="box",fillcolor="white",style=filled];
"client.get('/').data,type='attribute'\nline_star:335,line_end:335|char_star:11,char_end:31"->"client.get('/'),type='call'\nline_star:335,line_end:335|char_star:11,char_end:26";
"client.get,type='attribute'\nline_star:335,line_end:335|char_star:11,char_end:21"[shape="box",fillcolor="white",style=filled];
"client.get('/'),type='call'\nline_star:335,line_end:335|char_star:11,char_end:26"->"client.get,type='attribute'\nline_star:335,line_end:335|char_star:11,char_end:21";
"client,type='identifier'\nline_star:335,line_end:335|char_star:11,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"client.get,type='attribute'\nline_star:335,line_end:335|char_star:11,char_end:21"->"client,type='identifier'\nline_star:335,line_end:335|char_star:11,char_end:17";
"get,type='identifier'\nline_star:335,line_end:335|char_star:18,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"client.get,type='attribute'\nline_star:335,line_end:335|char_star:11,char_end:21"->"get,type='identifier'\nline_star:335,line_end:335|char_star:18,char_end:21";
"('/'),type='argument_list'\nline_star:335,line_end:335|char_star:21,char_end:26"[shape="box",fillcolor="white",style=filled];
"client.get('/'),type='call'\nline_star:335,line_end:335|char_star:11,char_end:26"->"('/'),type='argument_list'\nline_star:335,line_end:335|char_star:21,char_end:26";
"data,type='identifier'\nline_star:335,line_end:335|char_star:27,char_end:31"[shape="point",fillcolor="#121013",style=filled];
"client.get('/').data,type='attribute'\nline_star:335,line_end:335|char_star:11,char_end:31"->"data,type='identifier'\nline_star:335,line_end:335|char_star:27,char_end:31";
"assert client.get('/py/foo').data == b'bp.foo',type='assert_statement'\nline_star:336,line_end:336|char_star:4,char_end:50"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:311,line_end:339|char_star:4,char_end:58"->"assert client.get('/py/foo').data == b'bp.foo',type='assert_statement'\nline_star:336,line_end:336|char_star:4,char_end:50";
"client.get('/py/foo').data == b'bp.foo',type='comparison_operator'\nline_star:336,line_end:336|char_star:11,char_end:50"[shape="box",fillcolor="white",style=filled];
"assert client.get('/py/foo').data == b'bp.foo',type='assert_statement'\nline_star:336,line_end:336|char_star:4,char_end:50"->"client.get('/py/foo').data == b'bp.foo',type='comparison_operator'\nline_star:336,line_end:336|char_star:11,char_end:50";
"client.get('/py/foo').data,type='attribute'\nline_star:336,line_end:336|char_star:11,char_end:37"[shape="box",fillcolor="white",style=filled];
"client.get('/py/foo').data == b'bp.foo',type='comparison_operator'\nline_star:336,line_end:336|char_star:11,char_end:50"->"client.get('/py/foo').data,type='attribute'\nline_star:336,line_end:336|char_star:11,char_end:37";
"client.get('/py/foo'),type='call'\nline_star:336,line_end:336|char_star:11,char_end:32"[shape="box",fillcolor="white",style=filled];
"client.get('/py/foo').data,type='attribute'\nline_star:336,line_end:336|char_star:11,char_end:37"->"client.get('/py/foo'),type='call'\nline_star:336,line_end:336|char_star:11,char_end:32";
"client.get,type='attribute'\nline_star:336,line_end:336|char_star:11,char_end:21"[shape="box",fillcolor="white",style=filled];
"client.get('/py/foo'),type='call'\nline_star:336,line_end:336|char_star:11,char_end:32"->"client.get,type='attribute'\nline_star:336,line_end:336|char_star:11,char_end:21";
"client,type='identifier'\nline_star:336,line_end:336|char_star:11,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"client.get,type='attribute'\nline_star:336,line_end:336|char_star:11,char_end:21"->"client,type='identifier'\nline_star:336,line_end:336|char_star:11,char_end:17";
"get,type='identifier'\nline_star:336,line_end:336|char_star:18,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"client.get,type='attribute'\nline_star:336,line_end:336|char_star:11,char_end:21"->"get,type='identifier'\nline_star:336,line_end:336|char_star:18,char_end:21";
"('/py/foo'),type='argument_list'\nline_star:336,line_end:336|char_star:21,char_end:32"[shape="box",fillcolor="white",style=filled];
"client.get('/py/foo'),type='call'\nline_star:336,line_end:336|char_star:11,char_end:32"->"('/py/foo'),type='argument_list'\nline_star:336,line_end:336|char_star:21,char_end:32";
"data,type='identifier'\nline_star:336,line_end:336|char_star:33,char_end:37"[shape="point",fillcolor="#121013",style=filled];
"client.get('/py/foo').data,type='attribute'\nline_star:336,line_end:336|char_star:11,char_end:37"->"data,type='identifier'\nline_star:336,line_end:336|char_star:33,char_end:37";
"assert client.get('/py/bar').data == b'bp.bar',type='assert_statement'\nline_star:337,line_end:337|char_star:4,char_end:50"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:311,line_end:339|char_star:4,char_end:58"->"assert client.get('/py/bar').data == b'bp.bar',type='assert_statement'\nline_star:337,line_end:337|char_star:4,char_end:50";
"client.get('/py/bar').data == b'bp.bar',type='comparison_operator'\nline_star:337,line_end:337|char_star:11,char_end:50"[shape="box",fillcolor="white",style=filled];
"assert client.get('/py/bar').data == b'bp.bar',type='assert_statement'\nline_star:337,line_end:337|char_star:4,char_end:50"->"client.get('/py/bar').data == b'bp.bar',type='comparison_operator'\nline_star:337,line_end:337|char_star:11,char_end:50";
"client.get('/py/bar').data,type='attribute'\nline_star:337,line_end:337|char_star:11,char_end:37"[shape="box",fillcolor="white",style=filled];
"client.get('/py/bar').data == b'bp.bar',type='comparison_operator'\nline_star:337,line_end:337|char_star:11,char_end:50"->"client.get('/py/bar').data,type='attribute'\nline_star:337,line_end:337|char_star:11,char_end:37";
"client.get('/py/bar'),type='call'\nline_star:337,line_end:337|char_star:11,char_end:32"[shape="box",fillcolor="white",style=filled];
"client.get('/py/bar').data,type='attribute'\nline_star:337,line_end:337|char_star:11,char_end:37"->"client.get('/py/bar'),type='call'\nline_star:337,line_end:337|char_star:11,char_end:32";
"client.get,type='attribute'\nline_star:337,line_end:337|char_star:11,char_end:21"[shape="box",fillcolor="white",style=filled];
"client.get('/py/bar'),type='call'\nline_star:337,line_end:337|char_star:11,char_end:32"->"client.get,type='attribute'\nline_star:337,line_end:337|char_star:11,char_end:21";
"client,type='identifier'\nline_star:337,line_end:337|char_star:11,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"client.get,type='attribute'\nline_star:337,line_end:337|char_star:11,char_end:21"->"client,type='identifier'\nline_star:337,line_end:337|char_star:11,char_end:17";
"get,type='identifier'\nline_star:337,line_end:337|char_star:18,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"client.get,type='attribute'\nline_star:337,line_end:337|char_star:11,char_end:21"->"get,type='identifier'\nline_star:337,line_end:337|char_star:18,char_end:21";
"('/py/bar'),type='argument_list'\nline_star:337,line_end:337|char_star:21,char_end:32"[shape="box",fillcolor="white",style=filled];
"client.get('/py/bar'),type='call'\nline_star:337,line_end:337|char_star:11,char_end:32"->"('/py/bar'),type='argument_list'\nline_star:337,line_end:337|char_star:21,char_end:32";
"data,type='identifier'\nline_star:337,line_end:337|char_star:33,char_end:37"[shape="point",fillcolor="#121013",style=filled];
"client.get('/py/bar').data,type='attribute'\nline_star:337,line_end:337|char_star:11,char_end:37"->"data,type='identifier'\nline_star:337,line_end:337|char_star:33,char_end:37";
"assert client.get('/py/bar/123').data == b'bp.123',type='assert_statement'\nline_star:338,line_end:338|char_star:4,char_end:54"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:311,line_end:339|char_star:4,char_end:58"->"assert client.get('/py/bar/123').data == b'bp.123',type='assert_statement'\nline_star:338,line_end:338|char_star:4,char_end:54";
"client.get('/py/bar/123').data == b'bp.123',type='comparison_operator'\nline_star:338,line_end:338|char_star:11,char_end:54"[shape="box",fillcolor="white",style=filled];
"assert client.get('/py/bar/123').data == b'bp.123',type='assert_statement'\nline_star:338,line_end:338|char_star:4,char_end:54"->"client.get('/py/bar/123').data == b'bp.123',type='comparison_operator'\nline_star:338,line_end:338|char_star:11,char_end:54";
"client.get('/py/bar/123').data,type='attribute'\nline_star:338,line_end:338|char_star:11,char_end:41"[shape="box",fillcolor="white",style=filled];
"client.get('/py/bar/123').data == b'bp.123',type='comparison_operator'\nline_star:338,line_end:338|char_star:11,char_end:54"->"client.get('/py/bar/123').data,type='attribute'\nline_star:338,line_end:338|char_star:11,char_end:41";
"client.get('/py/bar/123'),type='call'\nline_star:338,line_end:338|char_star:11,char_end:36"[shape="box",fillcolor="white",style=filled];
"client.get('/py/bar/123').data,type='attribute'\nline_star:338,line_end:338|char_star:11,char_end:41"->"client.get('/py/bar/123'),type='call'\nline_star:338,line_end:338|char_star:11,char_end:36";
"client.get,type='attribute'\nline_star:338,line_end:338|char_star:11,char_end:21"[shape="box",fillcolor="white",style=filled];
"client.get('/py/bar/123'),type='call'\nline_star:338,line_end:338|char_star:11,char_end:36"->"client.get,type='attribute'\nline_star:338,line_end:338|char_star:11,char_end:21";
"client,type='identifier'\nline_star:338,line_end:338|char_star:11,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"client.get,type='attribute'\nline_star:338,line_end:338|char_star:11,char_end:21"->"client,type='identifier'\nline_star:338,line_end:338|char_star:11,char_end:17";
"get,type='identifier'\nline_star:338,line_end:338|char_star:18,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"client.get,type='attribute'\nline_star:338,line_end:338|char_star:11,char_end:21"->"get,type='identifier'\nline_star:338,line_end:338|char_star:18,char_end:21";
"('/py/bar/123'),type='argument_list'\nline_star:338,line_end:338|char_star:21,char_end:36"[shape="box",fillcolor="white",style=filled];
"client.get('/py/bar/123'),type='call'\nline_star:338,line_end:338|char_star:11,char_end:36"->"('/py/bar/123'),type='argument_list'\nline_star:338,line_end:338|char_star:21,char_end:36";
"data,type='identifier'\nline_star:338,line_end:338|char_star:37,char_end:41"[shape="point",fillcolor="#121013",style=filled];
"client.get('/py/bar/123').data,type='attribute'\nline_star:338,line_end:338|char_star:11,char_end:41"->"data,type='identifier'\nline_star:338,line_end:338|char_star:37,char_end:41";
"assert client.get('/py/bar/foo').data == b'bp.bar_foo',type='assert_statement'\nline_star:339,line_end:339|char_star:4,char_end:58"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:311,line_end:339|char_star:4,char_end:58"->"assert client.get('/py/bar/foo').data == b'bp.bar_foo',type='assert_statement'\nline_star:339,line_end:339|char_star:4,char_end:58";
"client.get('/py/bar/foo').data == b'bp.bar_foo',type='comparison_operator'\nline_star:339,line_end:339|char_star:11,char_end:58"[shape="box",fillcolor="white",style=filled];
"assert client.get('/py/bar/foo').data == b'bp.bar_foo',type='assert_statement'\nline_star:339,line_end:339|char_star:4,char_end:58"->"client.get('/py/bar/foo').data == b'bp.bar_foo',type='comparison_operator'\nline_star:339,line_end:339|char_star:11,char_end:58";
"client.get('/py/bar/foo').data,type='attribute'\nline_star:339,line_end:339|char_star:11,char_end:41"[shape="box",fillcolor="white",style=filled];
"client.get('/py/bar/foo').data == b'bp.bar_foo',type='comparison_operator'\nline_star:339,line_end:339|char_star:11,char_end:58"->"client.get('/py/bar/foo').data,type='attribute'\nline_star:339,line_end:339|char_star:11,char_end:41";
"client.get('/py/bar/foo'),type='call'\nline_star:339,line_end:339|char_star:11,char_end:36"[shape="box",fillcolor="white",style=filled];
"client.get('/py/bar/foo').data,type='attribute'\nline_star:339,line_end:339|char_star:11,char_end:41"->"client.get('/py/bar/foo'),type='call'\nline_star:339,line_end:339|char_star:11,char_end:36";
"client.get,type='attribute'\nline_star:339,line_end:339|char_star:11,char_end:21"[shape="box",fillcolor="white",style=filled];
"client.get('/py/bar/foo'),type='call'\nline_star:339,line_end:339|char_star:11,char_end:36"->"client.get,type='attribute'\nline_star:339,line_end:339|char_star:11,char_end:21";
"client,type='identifier'\nline_star:339,line_end:339|char_star:11,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"client.get,type='attribute'\nline_star:339,line_end:339|char_star:11,char_end:21"->"client,type='identifier'\nline_star:339,line_end:339|char_star:11,char_end:17";
"get,type='identifier'\nline_star:339,line_end:339|char_star:18,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"client.get,type='attribute'\nline_star:339,line_end:339|char_star:11,char_end:21"->"get,type='identifier'\nline_star:339,line_end:339|char_star:18,char_end:21";
"('/py/bar/foo'),type='argument_list'\nline_star:339,line_end:339|char_star:21,char_end:36"[shape="box",fillcolor="white",style=filled];
"client.get('/py/bar/foo'),type='call'\nline_star:339,line_end:339|char_star:11,char_end:36"->"('/py/bar/foo'),type='argument_list'\nline_star:339,line_end:339|char_star:21,char_end:36";
"data,type='identifier'\nline_star:339,line_end:339|char_star:37,char_end:41"[shape="point",fillcolor="#121013",style=filled];
"client.get('/py/bar/foo').data,type='attribute'\nline_star:339,line_end:339|char_star:11,char_end:41"->"data,type='identifier'\nline_star:339,line_end:339|char_star:37,char_end:41";
"def test_route_decorator_custom_endpoint_with_dots(app, client):\n    bp = flask.Blueprint('bp', __name__)\n\n    @bp.route('/foo')\n    def foo():\n        return flask.request.endpoint\n\n    try:\n\n        @bp.route('/bar', endpoint='bar.bar')\n        def foo_bar():\n            return flask.request.endpoint\n\n    except AssertionError:\n        pass\n    else:\n        raise AssertionError('expected AssertionError not raised')\n\n    try:\n\n        @bp.route('/bar/123', endpoint='bar.123')\n        def foo_bar_foo():\n            return flask.request.endpoint\n\n    except AssertionError:\n        pass\n    else:\n        raise AssertionError('expected AssertionError not raised')\n\n    def foo_foo_foo():\n        pass\n\n    pytest.raises(\n        AssertionError,\n        lambda: bp.add_url_rule('/bar/123', endpoint='bar.123', view_func=foo_foo_foo),\n    )\n\n    pytest.raises(\n        AssertionError, bp.route('/bar/123', endpoint='bar.123'), lambda: None\n    )\n\n    foo_foo_foo.__name__ = 'bar.123'\n\n    pytest.raises(\n        AssertionError, lambda: bp.add_url_rule('/bar/123', view_func=foo_foo_foo)\n    )\n\n    bp.add_url_rule(\n        '/bar/456', endpoint='foofoofoo', view_func=functools.partial(foo_foo_foo)\n    )\n\n    app.register_blueprint(bp, url_prefix='/py')\n\n    assert client.get('/py/foo').data == b'bp.foo'\n    # The rule's didn't actually made it through\n    rv = client.get('/py/bar')\n    assert rv.status_code == 404\n    rv = client.get('/py/bar/123')\n    assert rv.status_code == 404,type='function_definition'\nline_star:342,line_end:400|char_star:0,char_end:32"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_route_decorator_custom_endpoint_with_dots(app, client):\n    bp = flask.Blueprint('bp', __name__)\n\n    @bp.route('/foo')\n    def foo():\n        return flask.request.endpoint\n\n    try:\n\n        @bp.route('/bar', endpoint='bar.bar')\n        def foo_bar():\n            return flask.request.endpoint\n\n    except AssertionError:\n        pass\n    else:\n        raise AssertionError('expected AssertionError not raised')\n\n    try:\n\n        @bp.route('/bar/123', endpoint='bar.123')\n        def foo_bar_foo():\n            return flask.request.endpoint\n\n    except AssertionError:\n        pass\n    else:\n        raise AssertionError('expected AssertionError not raised')\n\n    def foo_foo_foo():\n        pass\n\n    pytest.raises(\n        AssertionError,\n        lambda: bp.add_url_rule('/bar/123', endpoint='bar.123', view_func=foo_foo_foo),\n    )\n\n    pytest.raises(\n        AssertionError, bp.route('/bar/123', endpoint='bar.123'), lambda: None\n    )\n\n    foo_foo_foo.__name__ = 'bar.123'\n\n    pytest.raises(\n        AssertionError, lambda: bp.add_url_rule('/bar/123', view_func=foo_foo_foo)\n    )\n\n    bp.add_url_rule(\n        '/bar/456', endpoint='foofoofoo', view_func=functools.partial(foo_foo_foo)\n    )\n\n    app.register_blueprint(bp, url_prefix='/py')\n\n    assert client.get('/py/foo').data == b'bp.foo'\n    # The rule's didn't actually made it through\n    rv = client.get('/py/bar')\n    assert rv.status_code == 404\n    rv = client.get('/py/bar/123')\n    assert rv.status_code == 404,type='function_definition'\nline_star:342,line_end:400|char_star:0,char_end:32";
"test_route_decorator_custom_endpoint_with_dots,type='identifier'\nline_star:342,line_end:342|char_star:4,char_end:50"[shape="point",fillcolor="#121013",style=filled];
"def test_route_decorator_custom_endpoint_with_dots(app, client):\n    bp = flask.Blueprint('bp', __name__)\n\n    @bp.route('/foo')\n    def foo():\n        return flask.request.endpoint\n\n    try:\n\n        @bp.route('/bar', endpoint='bar.bar')\n        def foo_bar():\n            return flask.request.endpoint\n\n    except AssertionError:\n        pass\n    else:\n        raise AssertionError('expected AssertionError not raised')\n\n    try:\n\n        @bp.route('/bar/123', endpoint='bar.123')\n        def foo_bar_foo():\n            return flask.request.endpoint\n\n    except AssertionError:\n        pass\n    else:\n        raise AssertionError('expected AssertionError not raised')\n\n    def foo_foo_foo():\n        pass\n\n    pytest.raises(\n        AssertionError,\n        lambda: bp.add_url_rule('/bar/123', endpoint='bar.123', view_func=foo_foo_foo),\n    )\n\n    pytest.raises(\n        AssertionError, bp.route('/bar/123', endpoint='bar.123'), lambda: None\n    )\n\n    foo_foo_foo.__name__ = 'bar.123'\n\n    pytest.raises(\n        AssertionError, lambda: bp.add_url_rule('/bar/123', view_func=foo_foo_foo)\n    )\n\n    bp.add_url_rule(\n        '/bar/456', endpoint='foofoofoo', view_func=functools.partial(foo_foo_foo)\n    )\n\n    app.register_blueprint(bp, url_prefix='/py')\n\n    assert client.get('/py/foo').data == b'bp.foo'\n    # The rule's didn't actually made it through\n    rv = client.get('/py/bar')\n    assert rv.status_code == 404\n    rv = client.get('/py/bar/123')\n    assert rv.status_code == 404,type='function_definition'\nline_star:342,line_end:400|char_star:0,char_end:32"->"test_route_decorator_custom_endpoint_with_dots,type='identifier'\nline_star:342,line_end:342|char_star:4,char_end:50";
"(app, client),type='parameters'\nline_star:342,line_end:342|char_star:50,char_end:63"[shape="box",fillcolor="white",style=filled];
"def test_route_decorator_custom_endpoint_with_dots(app, client):\n    bp = flask.Blueprint('bp', __name__)\n\n    @bp.route('/foo')\n    def foo():\n        return flask.request.endpoint\n\n    try:\n\n        @bp.route('/bar', endpoint='bar.bar')\n        def foo_bar():\n            return flask.request.endpoint\n\n    except AssertionError:\n        pass\n    else:\n        raise AssertionError('expected AssertionError not raised')\n\n    try:\n\n        @bp.route('/bar/123', endpoint='bar.123')\n        def foo_bar_foo():\n            return flask.request.endpoint\n\n    except AssertionError:\n        pass\n    else:\n        raise AssertionError('expected AssertionError not raised')\n\n    def foo_foo_foo():\n        pass\n\n    pytest.raises(\n        AssertionError,\n        lambda: bp.add_url_rule('/bar/123', endpoint='bar.123', view_func=foo_foo_foo),\n    )\n\n    pytest.raises(\n        AssertionError, bp.route('/bar/123', endpoint='bar.123'), lambda: None\n    )\n\n    foo_foo_foo.__name__ = 'bar.123'\n\n    pytest.raises(\n        AssertionError, lambda: bp.add_url_rule('/bar/123', view_func=foo_foo_foo)\n    )\n\n    bp.add_url_rule(\n        '/bar/456', endpoint='foofoofoo', view_func=functools.partial(foo_foo_foo)\n    )\n\n    app.register_blueprint(bp, url_prefix='/py')\n\n    assert client.get('/py/foo').data == b'bp.foo'\n    # The rule's didn't actually made it through\n    rv = client.get('/py/bar')\n    assert rv.status_code == 404\n    rv = client.get('/py/bar/123')\n    assert rv.status_code == 404,type='function_definition'\nline_star:342,line_end:400|char_star:0,char_end:32"->"(app, client),type='parameters'\nline_star:342,line_end:342|char_star:50,char_end:63";
"app,type='identifier'\nline_star:342,line_end:342|char_star:51,char_end:54"[shape="point",fillcolor="#121013",style=filled];
"(app, client),type='parameters'\nline_star:342,line_end:342|char_star:50,char_end:63"->"app,type='identifier'\nline_star:342,line_end:342|char_star:51,char_end:54";
"client,type='identifier'\nline_star:342,line_end:342|char_star:56,char_end:62"[shape="point",fillcolor="#121013",style=filled];
"(app, client),type='parameters'\nline_star:342,line_end:342|char_star:50,char_end:63"->"client,type='identifier'\nline_star:342,line_end:342|char_star:56,char_end:62";
"type='INFORMATION BLOCK'\nline_star:343,line_end:400|char_star:4,char_end:32"[shape="point",fillcolor="#121013",style=filled];
"def test_route_decorator_custom_endpoint_with_dots(app, client):\n    bp = flask.Blueprint('bp', __name__)\n\n    @bp.route('/foo')\n    def foo():\n        return flask.request.endpoint\n\n    try:\n\n        @bp.route('/bar', endpoint='bar.bar')\n        def foo_bar():\n            return flask.request.endpoint\n\n    except AssertionError:\n        pass\n    else:\n        raise AssertionError('expected AssertionError not raised')\n\n    try:\n\n        @bp.route('/bar/123', endpoint='bar.123')\n        def foo_bar_foo():\n            return flask.request.endpoint\n\n    except AssertionError:\n        pass\n    else:\n        raise AssertionError('expected AssertionError not raised')\n\n    def foo_foo_foo():\n        pass\n\n    pytest.raises(\n        AssertionError,\n        lambda: bp.add_url_rule('/bar/123', endpoint='bar.123', view_func=foo_foo_foo),\n    )\n\n    pytest.raises(\n        AssertionError, bp.route('/bar/123', endpoint='bar.123'), lambda: None\n    )\n\n    foo_foo_foo.__name__ = 'bar.123'\n\n    pytest.raises(\n        AssertionError, lambda: bp.add_url_rule('/bar/123', view_func=foo_foo_foo)\n    )\n\n    bp.add_url_rule(\n        '/bar/456', endpoint='foofoofoo', view_func=functools.partial(foo_foo_foo)\n    )\n\n    app.register_blueprint(bp, url_prefix='/py')\n\n    assert client.get('/py/foo').data == b'bp.foo'\n    # The rule's didn't actually made it through\n    rv = client.get('/py/bar')\n    assert rv.status_code == 404\n    rv = client.get('/py/bar/123')\n    assert rv.status_code == 404,type='function_definition'\nline_star:342,line_end:400|char_star:0,char_end:32"->"type='INFORMATION BLOCK'\nline_star:343,line_end:400|char_star:4,char_end:32";
"@bp.route('/foo')\n    def foo():\n        return flask.request.endpoint,type='decorated_definition'\nline_star:345,line_end:347|char_star:4,char_end:37"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:343,line_end:400|char_star:4,char_end:32"->"@bp.route('/foo')\n    def foo():\n        return flask.request.endpoint,type='decorated_definition'\nline_star:345,line_end:347|char_star:4,char_end:37";
"@bp.route('/foo'),type='decorator'\nline_star:345,line_end:345|char_star:4,char_end:21"[shape="box",fillcolor="white",style=filled];
"@bp.route('/foo')\n    def foo():\n        return flask.request.endpoint,type='decorated_definition'\nline_star:345,line_end:347|char_star:4,char_end:37"->"@bp.route('/foo'),type='decorator'\nline_star:345,line_end:345|char_star:4,char_end:21";
"def foo():\n        return flask.request.endpoint,type='function_definition'\nline_star:346,line_end:347|char_star:4,char_end:37"[shape="box",fillcolor="#cee6b4",style=filled];
"@bp.route('/foo')\n    def foo():\n        return flask.request.endpoint,type='decorated_definition'\nline_star:345,line_end:347|char_star:4,char_end:37"->"def foo():\n        return flask.request.endpoint,type='function_definition'\nline_star:346,line_end:347|char_star:4,char_end:37";
"foo,type='identifier'\nline_star:346,line_end:346|char_star:8,char_end:11"[shape="point",fillcolor="#121013",style=filled];
"def foo():\n        return flask.request.endpoint,type='function_definition'\nline_star:346,line_end:347|char_star:4,char_end:37"->"foo,type='identifier'\nline_star:346,line_end:346|char_star:8,char_end:11";
"type='INFORMATION BLOCK'\nline_star:347,line_end:347|char_star:8,char_end:37"[shape="point",fillcolor="#121013",style=filled];
"def foo():\n        return flask.request.endpoint,type='function_definition'\nline_star:346,line_end:347|char_star:4,char_end:37"->"type='INFORMATION BLOCK'\nline_star:347,line_end:347|char_star:8,char_end:37";
"return flask.request.endpoint,type='return_statement'\nline_star:347,line_end:347|char_star:8,char_end:37"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:347,line_end:347|char_star:8,char_end:37"->"return flask.request.endpoint,type='return_statement'\nline_star:347,line_end:347|char_star:8,char_end:37";
"try:\n\n        @bp.route('/bar', endpoint='bar.bar')\n        def foo_bar():\n            return flask.request.endpoint\n\n    except AssertionError:\n        pass\n    else:\n        raise AssertionError('expected AssertionError not raised'),type='try_statement'\nline_star:349,line_end:358|char_star:4,char_end:66"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:343,line_end:400|char_star:4,char_end:32"->"try:\n\n        @bp.route('/bar', endpoint='bar.bar')\n        def foo_bar():\n            return flask.request.endpoint\n\n    except AssertionError:\n        pass\n    else:\n        raise AssertionError('expected AssertionError not raised'),type='try_statement'\nline_star:349,line_end:358|char_star:4,char_end:66";
"try,type='try'\nline_star:349,line_end:349|char_star:4,char_end:7"[shape="box",fillcolor="white",style=filled];
"try:\n\n        @bp.route('/bar', endpoint='bar.bar')\n        def foo_bar():\n            return flask.request.endpoint\n\n    except AssertionError:\n        pass\n    else:\n        raise AssertionError('expected AssertionError not raised'),type='try_statement'\nline_star:349,line_end:358|char_star:4,char_end:66"->"try,type='try'\nline_star:349,line_end:349|char_star:4,char_end:7";
"type='INFORMATION BLOCK'\nline_star:351,line_end:353|char_star:8,char_end:41"[shape="point",fillcolor="#121013",style=filled];
"try:\n\n        @bp.route('/bar', endpoint='bar.bar')\n        def foo_bar():\n            return flask.request.endpoint\n\n    except AssertionError:\n        pass\n    else:\n        raise AssertionError('expected AssertionError not raised'),type='try_statement'\nline_star:349,line_end:358|char_star:4,char_end:66"->"type='INFORMATION BLOCK'\nline_star:351,line_end:353|char_star:8,char_end:41";
"@bp.route('/bar', endpoint='bar.bar')\n        def foo_bar():\n            return flask.request.endpoint,type='decorated_definition'\nline_star:351,line_end:353|char_star:8,char_end:41"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:351,line_end:353|char_star:8,char_end:41"->"@bp.route('/bar', endpoint='bar.bar')\n        def foo_bar():\n            return flask.request.endpoint,type='decorated_definition'\nline_star:351,line_end:353|char_star:8,char_end:41";
"@bp.route('/bar', endpoint='bar.bar'),type='decorator'\nline_star:351,line_end:351|char_star:8,char_end:45"[shape="box",fillcolor="white",style=filled];
"@bp.route('/bar', endpoint='bar.bar')\n        def foo_bar():\n            return flask.request.endpoint,type='decorated_definition'\nline_star:351,line_end:353|char_star:8,char_end:41"->"@bp.route('/bar', endpoint='bar.bar'),type='decorator'\nline_star:351,line_end:351|char_star:8,char_end:45";
"def foo_bar():\n            return flask.request.endpoint,type='function_definition'\nline_star:352,line_end:353|char_star:8,char_end:41"[shape="box",fillcolor="#cee6b4",style=filled];
"@bp.route('/bar', endpoint='bar.bar')\n        def foo_bar():\n            return flask.request.endpoint,type='decorated_definition'\nline_star:351,line_end:353|char_star:8,char_end:41"->"def foo_bar():\n            return flask.request.endpoint,type='function_definition'\nline_star:352,line_end:353|char_star:8,char_end:41";
"foo_bar,type='identifier'\nline_star:352,line_end:352|char_star:12,char_end:19"[shape="point",fillcolor="#121013",style=filled];
"def foo_bar():\n            return flask.request.endpoint,type='function_definition'\nline_star:352,line_end:353|char_star:8,char_end:41"->"foo_bar,type='identifier'\nline_star:352,line_end:352|char_star:12,char_end:19";
"type='INFORMATION BLOCK'\nline_star:353,line_end:353|char_star:12,char_end:41"[shape="point",fillcolor="#121013",style=filled];
"def foo_bar():\n            return flask.request.endpoint,type='function_definition'\nline_star:352,line_end:353|char_star:8,char_end:41"->"type='INFORMATION BLOCK'\nline_star:353,line_end:353|char_star:12,char_end:41";
"return flask.request.endpoint,type='return_statement'\nline_star:353,line_end:353|char_star:12,char_end:41"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:353,line_end:353|char_star:12,char_end:41"->"return flask.request.endpoint,type='return_statement'\nline_star:353,line_end:353|char_star:12,char_end:41";
"except AssertionError:\n        pass,type='except_clause'\nline_star:355,line_end:356|char_star:4,char_end:12"[shape="box",fillcolor="white",style=filled];
"try:\n\n        @bp.route('/bar', endpoint='bar.bar')\n        def foo_bar():\n            return flask.request.endpoint\n\n    except AssertionError:\n        pass\n    else:\n        raise AssertionError('expected AssertionError not raised'),type='try_statement'\nline_star:349,line_end:358|char_star:4,char_end:66"->"except AssertionError:\n        pass,type='except_clause'\nline_star:355,line_end:356|char_star:4,char_end:12";
"except,type='except'\nline_star:355,line_end:355|char_star:4,char_end:10"[shape="box",fillcolor="white",style=filled];
"except AssertionError:\n        pass,type='except_clause'\nline_star:355,line_end:356|char_star:4,char_end:12"->"except,type='except'\nline_star:355,line_end:355|char_star:4,char_end:10";
"AssertionError,type='identifier'\nline_star:355,line_end:355|char_star:11,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"except AssertionError:\n        pass,type='except_clause'\nline_star:355,line_end:356|char_star:4,char_end:12"->"AssertionError,type='identifier'\nline_star:355,line_end:355|char_star:11,char_end:25";
"type='INFORMATION BLOCK'\nline_star:356,line_end:356|char_star:8,char_end:12"[shape="point",fillcolor="#121013",style=filled];
"except AssertionError:\n        pass,type='except_clause'\nline_star:355,line_end:356|char_star:4,char_end:12"->"type='INFORMATION BLOCK'\nline_star:356,line_end:356|char_star:8,char_end:12";
"pass,type='pass_statement'\nline_star:356,line_end:356|char_star:8,char_end:12"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:356,line_end:356|char_star:8,char_end:12"->"pass,type='pass_statement'\nline_star:356,line_end:356|char_star:8,char_end:12";
"pass,type='pass'\nline_star:356,line_end:356|char_star:8,char_end:12"[shape="box",fillcolor="white",style=filled];
"pass,type='pass_statement'\nline_star:356,line_end:356|char_star:8,char_end:12"->"pass,type='pass'\nline_star:356,line_end:356|char_star:8,char_end:12";
"else:\n        raise AssertionError('expected AssertionError not raised'),type='else_clause'\nline_star:357,line_end:358|char_star:4,char_end:66"[shape="box",fillcolor="white",style=filled];
"try:\n\n        @bp.route('/bar', endpoint='bar.bar')\n        def foo_bar():\n            return flask.request.endpoint\n\n    except AssertionError:\n        pass\n    else:\n        raise AssertionError('expected AssertionError not raised'),type='try_statement'\nline_star:349,line_end:358|char_star:4,char_end:66"->"else:\n        raise AssertionError('expected AssertionError not raised'),type='else_clause'\nline_star:357,line_end:358|char_star:4,char_end:66";
"else,type='else'\nline_star:357,line_end:357|char_star:4,char_end:8"[shape="box",fillcolor="white",style=filled];
"else:\n        raise AssertionError('expected AssertionError not raised'),type='else_clause'\nline_star:357,line_end:358|char_star:4,char_end:66"->"else,type='else'\nline_star:357,line_end:357|char_star:4,char_end:8";
"type='INFORMATION BLOCK'\nline_star:358,line_end:358|char_star:8,char_end:66"[shape="point",fillcolor="#121013",style=filled];
"else:\n        raise AssertionError('expected AssertionError not raised'),type='else_clause'\nline_star:357,line_end:358|char_star:4,char_end:66"->"type='INFORMATION BLOCK'\nline_star:358,line_end:358|char_star:8,char_end:66";
"raise AssertionError('expected AssertionError not raised'),type='raise_statement'\nline_star:358,line_end:358|char_star:8,char_end:66"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:358,line_end:358|char_star:8,char_end:66"->"raise AssertionError('expected AssertionError not raised'),type='raise_statement'\nline_star:358,line_end:358|char_star:8,char_end:66";
"raise,type='raise'\nline_star:358,line_end:358|char_star:8,char_end:13"[shape="box",fillcolor="white",style=filled];
"raise AssertionError('expected AssertionError not raised'),type='raise_statement'\nline_star:358,line_end:358|char_star:8,char_end:66"->"raise,type='raise'\nline_star:358,line_end:358|char_star:8,char_end:13";
"AssertionError('expected AssertionError not raised'),type='call'\nline_star:358,line_end:358|char_star:14,char_end:66"[shape="box",fillcolor="white",style=filled];
"raise AssertionError('expected AssertionError not raised'),type='raise_statement'\nline_star:358,line_end:358|char_star:8,char_end:66"->"AssertionError('expected AssertionError not raised'),type='call'\nline_star:358,line_end:358|char_star:14,char_end:66";
"AssertionError,type='identifier'\nline_star:358,line_end:358|char_star:14,char_end:28"[shape="point",fillcolor="#121013",style=filled];
"AssertionError('expected AssertionError not raised'),type='call'\nline_star:358,line_end:358|char_star:14,char_end:66"->"AssertionError,type='identifier'\nline_star:358,line_end:358|char_star:14,char_end:28";
"('expected AssertionError not raised'),type='argument_list'\nline_star:358,line_end:358|char_star:28,char_end:66"[shape="box",fillcolor="white",style=filled];
"AssertionError('expected AssertionError not raised'),type='call'\nline_star:358,line_end:358|char_star:14,char_end:66"->"('expected AssertionError not raised'),type='argument_list'\nline_star:358,line_end:358|char_star:28,char_end:66";
"try:\n\n        @bp.route('/bar/123', endpoint='bar.123')\n        def foo_bar_foo():\n            return flask.request.endpoint\n\n    except AssertionError:\n        pass\n    else:\n        raise AssertionError('expected AssertionError not raised'),type='try_statement'\nline_star:360,line_end:369|char_star:4,char_end:66"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:343,line_end:400|char_star:4,char_end:32"->"try:\n\n        @bp.route('/bar/123', endpoint='bar.123')\n        def foo_bar_foo():\n            return flask.request.endpoint\n\n    except AssertionError:\n        pass\n    else:\n        raise AssertionError('expected AssertionError not raised'),type='try_statement'\nline_star:360,line_end:369|char_star:4,char_end:66";
"try,type='try'\nline_star:360,line_end:360|char_star:4,char_end:7"[shape="box",fillcolor="white",style=filled];
"try:\n\n        @bp.route('/bar/123', endpoint='bar.123')\n        def foo_bar_foo():\n            return flask.request.endpoint\n\n    except AssertionError:\n        pass\n    else:\n        raise AssertionError('expected AssertionError not raised'),type='try_statement'\nline_star:360,line_end:369|char_star:4,char_end:66"->"try,type='try'\nline_star:360,line_end:360|char_star:4,char_end:7";
"type='INFORMATION BLOCK'\nline_star:362,line_end:364|char_star:8,char_end:41"[shape="point",fillcolor="#121013",style=filled];
"try:\n\n        @bp.route('/bar/123', endpoint='bar.123')\n        def foo_bar_foo():\n            return flask.request.endpoint\n\n    except AssertionError:\n        pass\n    else:\n        raise AssertionError('expected AssertionError not raised'),type='try_statement'\nline_star:360,line_end:369|char_star:4,char_end:66"->"type='INFORMATION BLOCK'\nline_star:362,line_end:364|char_star:8,char_end:41";
"@bp.route('/bar/123', endpoint='bar.123')\n        def foo_bar_foo():\n            return flask.request.endpoint,type='decorated_definition'\nline_star:362,line_end:364|char_star:8,char_end:41"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:362,line_end:364|char_star:8,char_end:41"->"@bp.route('/bar/123', endpoint='bar.123')\n        def foo_bar_foo():\n            return flask.request.endpoint,type='decorated_definition'\nline_star:362,line_end:364|char_star:8,char_end:41";
"@bp.route('/bar/123', endpoint='bar.123'),type='decorator'\nline_star:362,line_end:362|char_star:8,char_end:49"[shape="box",fillcolor="white",style=filled];
"@bp.route('/bar/123', endpoint='bar.123')\n        def foo_bar_foo():\n            return flask.request.endpoint,type='decorated_definition'\nline_star:362,line_end:364|char_star:8,char_end:41"->"@bp.route('/bar/123', endpoint='bar.123'),type='decorator'\nline_star:362,line_end:362|char_star:8,char_end:49";
"def foo_bar_foo():\n            return flask.request.endpoint,type='function_definition'\nline_star:363,line_end:364|char_star:8,char_end:41"[shape="box",fillcolor="#cee6b4",style=filled];
"@bp.route('/bar/123', endpoint='bar.123')\n        def foo_bar_foo():\n            return flask.request.endpoint,type='decorated_definition'\nline_star:362,line_end:364|char_star:8,char_end:41"->"def foo_bar_foo():\n            return flask.request.endpoint,type='function_definition'\nline_star:363,line_end:364|char_star:8,char_end:41";
"foo_bar_foo,type='identifier'\nline_star:363,line_end:363|char_star:12,char_end:23"[shape="point",fillcolor="#121013",style=filled];
"def foo_bar_foo():\n            return flask.request.endpoint,type='function_definition'\nline_star:363,line_end:364|char_star:8,char_end:41"->"foo_bar_foo,type='identifier'\nline_star:363,line_end:363|char_star:12,char_end:23";
"type='INFORMATION BLOCK'\nline_star:364,line_end:364|char_star:12,char_end:41"[shape="point",fillcolor="#121013",style=filled];
"def foo_bar_foo():\n            return flask.request.endpoint,type='function_definition'\nline_star:363,line_end:364|char_star:8,char_end:41"->"type='INFORMATION BLOCK'\nline_star:364,line_end:364|char_star:12,char_end:41";
"return flask.request.endpoint,type='return_statement'\nline_star:364,line_end:364|char_star:12,char_end:41"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:364,line_end:364|char_star:12,char_end:41"->"return flask.request.endpoint,type='return_statement'\nline_star:364,line_end:364|char_star:12,char_end:41";
"except AssertionError:\n        pass,type='except_clause'\nline_star:366,line_end:367|char_star:4,char_end:12"[shape="box",fillcolor="white",style=filled];
"try:\n\n        @bp.route('/bar/123', endpoint='bar.123')\n        def foo_bar_foo():\n            return flask.request.endpoint\n\n    except AssertionError:\n        pass\n    else:\n        raise AssertionError('expected AssertionError not raised'),type='try_statement'\nline_star:360,line_end:369|char_star:4,char_end:66"->"except AssertionError:\n        pass,type='except_clause'\nline_star:366,line_end:367|char_star:4,char_end:12";
"except,type='except'\nline_star:366,line_end:366|char_star:4,char_end:10"[shape="box",fillcolor="white",style=filled];
"except AssertionError:\n        pass,type='except_clause'\nline_star:366,line_end:367|char_star:4,char_end:12"->"except,type='except'\nline_star:366,line_end:366|char_star:4,char_end:10";
"AssertionError,type='identifier'\nline_star:366,line_end:366|char_star:11,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"except AssertionError:\n        pass,type='except_clause'\nline_star:366,line_end:367|char_star:4,char_end:12"->"AssertionError,type='identifier'\nline_star:366,line_end:366|char_star:11,char_end:25";
"type='INFORMATION BLOCK'\nline_star:367,line_end:367|char_star:8,char_end:12"[shape="point",fillcolor="#121013",style=filled];
"except AssertionError:\n        pass,type='except_clause'\nline_star:366,line_end:367|char_star:4,char_end:12"->"type='INFORMATION BLOCK'\nline_star:367,line_end:367|char_star:8,char_end:12";
"pass,type='pass_statement'\nline_star:367,line_end:367|char_star:8,char_end:12"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:367,line_end:367|char_star:8,char_end:12"->"pass,type='pass_statement'\nline_star:367,line_end:367|char_star:8,char_end:12";
"pass,type='pass'\nline_star:367,line_end:367|char_star:8,char_end:12"[shape="box",fillcolor="white",style=filled];
"pass,type='pass_statement'\nline_star:367,line_end:367|char_star:8,char_end:12"->"pass,type='pass'\nline_star:367,line_end:367|char_star:8,char_end:12";
"else:\n        raise AssertionError('expected AssertionError not raised'),type='else_clause'\nline_star:368,line_end:369|char_star:4,char_end:66"[shape="box",fillcolor="white",style=filled];
"try:\n\n        @bp.route('/bar/123', endpoint='bar.123')\n        def foo_bar_foo():\n            return flask.request.endpoint\n\n    except AssertionError:\n        pass\n    else:\n        raise AssertionError('expected AssertionError not raised'),type='try_statement'\nline_star:360,line_end:369|char_star:4,char_end:66"->"else:\n        raise AssertionError('expected AssertionError not raised'),type='else_clause'\nline_star:368,line_end:369|char_star:4,char_end:66";
"else,type='else'\nline_star:368,line_end:368|char_star:4,char_end:8"[shape="box",fillcolor="white",style=filled];
"else:\n        raise AssertionError('expected AssertionError not raised'),type='else_clause'\nline_star:368,line_end:369|char_star:4,char_end:66"->"else,type='else'\nline_star:368,line_end:368|char_star:4,char_end:8";
"type='INFORMATION BLOCK'\nline_star:369,line_end:369|char_star:8,char_end:66"[shape="point",fillcolor="#121013",style=filled];
"else:\n        raise AssertionError('expected AssertionError not raised'),type='else_clause'\nline_star:368,line_end:369|char_star:4,char_end:66"->"type='INFORMATION BLOCK'\nline_star:369,line_end:369|char_star:8,char_end:66";
"raise AssertionError('expected AssertionError not raised'),type='raise_statement'\nline_star:369,line_end:369|char_star:8,char_end:66"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:369,line_end:369|char_star:8,char_end:66"->"raise AssertionError('expected AssertionError not raised'),type='raise_statement'\nline_star:369,line_end:369|char_star:8,char_end:66";
"raise,type='raise'\nline_star:369,line_end:369|char_star:8,char_end:13"[shape="box",fillcolor="white",style=filled];
"raise AssertionError('expected AssertionError not raised'),type='raise_statement'\nline_star:369,line_end:369|char_star:8,char_end:66"->"raise,type='raise'\nline_star:369,line_end:369|char_star:8,char_end:13";
"AssertionError('expected AssertionError not raised'),type='call'\nline_star:369,line_end:369|char_star:14,char_end:66"[shape="box",fillcolor="white",style=filled];
"raise AssertionError('expected AssertionError not raised'),type='raise_statement'\nline_star:369,line_end:369|char_star:8,char_end:66"->"AssertionError('expected AssertionError not raised'),type='call'\nline_star:369,line_end:369|char_star:14,char_end:66";
"AssertionError,type='identifier'\nline_star:369,line_end:369|char_star:14,char_end:28"[shape="point",fillcolor="#121013",style=filled];
"AssertionError('expected AssertionError not raised'),type='call'\nline_star:369,line_end:369|char_star:14,char_end:66"->"AssertionError,type='identifier'\nline_star:369,line_end:369|char_star:14,char_end:28";
"('expected AssertionError not raised'),type='argument_list'\nline_star:369,line_end:369|char_star:28,char_end:66"[shape="box",fillcolor="white",style=filled];
"AssertionError('expected AssertionError not raised'),type='call'\nline_star:369,line_end:369|char_star:14,char_end:66"->"('expected AssertionError not raised'),type='argument_list'\nline_star:369,line_end:369|char_star:28,char_end:66";
"def foo_foo_foo():\n        pass,type='function_definition'\nline_star:371,line_end:372|char_star:4,char_end:12"[shape="box",fillcolor="#cee6b4",style=filled];
"type='INFORMATION BLOCK'\nline_star:343,line_end:400|char_star:4,char_end:32"->"def foo_foo_foo():\n        pass,type='function_definition'\nline_star:371,line_end:372|char_star:4,char_end:12";
"foo_foo_foo,type='identifier'\nline_star:371,line_end:371|char_star:8,char_end:19"[shape="point",fillcolor="#121013",style=filled];
"def foo_foo_foo():\n        pass,type='function_definition'\nline_star:371,line_end:372|char_star:4,char_end:12"->"foo_foo_foo,type='identifier'\nline_star:371,line_end:371|char_star:8,char_end:19";
"type='INFORMATION BLOCK'\nline_star:372,line_end:372|char_star:8,char_end:12"[shape="point",fillcolor="#121013",style=filled];
"def foo_foo_foo():\n        pass,type='function_definition'\nline_star:371,line_end:372|char_star:4,char_end:12"->"type='INFORMATION BLOCK'\nline_star:372,line_end:372|char_star:8,char_end:12";
"pass,type='pass_statement'\nline_star:372,line_end:372|char_star:8,char_end:12"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:372,line_end:372|char_star:8,char_end:12"->"pass,type='pass_statement'\nline_star:372,line_end:372|char_star:8,char_end:12";
"pass,type='pass'\nline_star:372,line_end:372|char_star:8,char_end:12"[shape="box",fillcolor="white",style=filled];
"pass,type='pass_statement'\nline_star:372,line_end:372|char_star:8,char_end:12"->"pass,type='pass'\nline_star:372,line_end:372|char_star:8,char_end:12";
"assert client.get('/py/foo').data == b'bp.foo',type='assert_statement'\nline_star:395,line_end:395|char_star:4,char_end:50"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:343,line_end:400|char_star:4,char_end:32"->"assert client.get('/py/foo').data == b'bp.foo',type='assert_statement'\nline_star:395,line_end:395|char_star:4,char_end:50";
"client.get('/py/foo').data == b'bp.foo',type='comparison_operator'\nline_star:395,line_end:395|char_star:11,char_end:50"[shape="box",fillcolor="white",style=filled];
"assert client.get('/py/foo').data == b'bp.foo',type='assert_statement'\nline_star:395,line_end:395|char_star:4,char_end:50"->"client.get('/py/foo').data == b'bp.foo',type='comparison_operator'\nline_star:395,line_end:395|char_star:11,char_end:50";
"client.get('/py/foo').data,type='attribute'\nline_star:395,line_end:395|char_star:11,char_end:37"[shape="box",fillcolor="white",style=filled];
"client.get('/py/foo').data == b'bp.foo',type='comparison_operator'\nline_star:395,line_end:395|char_star:11,char_end:50"->"client.get('/py/foo').data,type='attribute'\nline_star:395,line_end:395|char_star:11,char_end:37";
"client.get('/py/foo'),type='call'\nline_star:395,line_end:395|char_star:11,char_end:32"[shape="box",fillcolor="white",style=filled];
"client.get('/py/foo').data,type='attribute'\nline_star:395,line_end:395|char_star:11,char_end:37"->"client.get('/py/foo'),type='call'\nline_star:395,line_end:395|char_star:11,char_end:32";
"client.get,type='attribute'\nline_star:395,line_end:395|char_star:11,char_end:21"[shape="box",fillcolor="white",style=filled];
"client.get('/py/foo'),type='call'\nline_star:395,line_end:395|char_star:11,char_end:32"->"client.get,type='attribute'\nline_star:395,line_end:395|char_star:11,char_end:21";
"client,type='identifier'\nline_star:395,line_end:395|char_star:11,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"client.get,type='attribute'\nline_star:395,line_end:395|char_star:11,char_end:21"->"client,type='identifier'\nline_star:395,line_end:395|char_star:11,char_end:17";
"get,type='identifier'\nline_star:395,line_end:395|char_star:18,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"client.get,type='attribute'\nline_star:395,line_end:395|char_star:11,char_end:21"->"get,type='identifier'\nline_star:395,line_end:395|char_star:18,char_end:21";
"('/py/foo'),type='argument_list'\nline_star:395,line_end:395|char_star:21,char_end:32"[shape="box",fillcolor="white",style=filled];
"client.get('/py/foo'),type='call'\nline_star:395,line_end:395|char_star:11,char_end:32"->"('/py/foo'),type='argument_list'\nline_star:395,line_end:395|char_star:21,char_end:32";
"data,type='identifier'\nline_star:395,line_end:395|char_star:33,char_end:37"[shape="point",fillcolor="#121013",style=filled];
"client.get('/py/foo').data,type='attribute'\nline_star:395,line_end:395|char_star:11,char_end:37"->"data,type='identifier'\nline_star:395,line_end:395|char_star:33,char_end:37";
"# The rule's didn't actually made it through,type='comment'\nline_star:396,line_end:396|char_star:4,char_end:48"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:343,line_end:400|char_star:4,char_end:32"->"# The rule's didn't actually made it through,type='comment'\nline_star:396,line_end:396|char_star:4,char_end:48";
"assert rv.status_code == 404,type='assert_statement'\nline_star:398,line_end:398|char_star:4,char_end:32"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:343,line_end:400|char_star:4,char_end:32"->"assert rv.status_code == 404,type='assert_statement'\nline_star:398,line_end:398|char_star:4,char_end:32";
"rv.status_code == 404,type='comparison_operator'\nline_star:398,line_end:398|char_star:11,char_end:32"[shape="box",fillcolor="white",style=filled];
"assert rv.status_code == 404,type='assert_statement'\nline_star:398,line_end:398|char_star:4,char_end:32"->"rv.status_code == 404,type='comparison_operator'\nline_star:398,line_end:398|char_star:11,char_end:32";
"rv.status_code,type='attribute'\nline_star:398,line_end:398|char_star:11,char_end:25"[shape="box",fillcolor="white",style=filled];
"rv.status_code == 404,type='comparison_operator'\nline_star:398,line_end:398|char_star:11,char_end:32"->"rv.status_code,type='attribute'\nline_star:398,line_end:398|char_star:11,char_end:25";
"rv,type='identifier'\nline_star:398,line_end:398|char_star:11,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"rv.status_code,type='attribute'\nline_star:398,line_end:398|char_star:11,char_end:25"->"rv,type='identifier'\nline_star:398,line_end:398|char_star:11,char_end:13";
"status_code,type='identifier'\nline_star:398,line_end:398|char_star:14,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"rv.status_code,type='attribute'\nline_star:398,line_end:398|char_star:11,char_end:25"->"status_code,type='identifier'\nline_star:398,line_end:398|char_star:14,char_end:25";
"assert rv.status_code == 404,type='assert_statement'\nline_star:400,line_end:400|char_star:4,char_end:32"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:343,line_end:400|char_star:4,char_end:32"->"assert rv.status_code == 404,type='assert_statement'\nline_star:400,line_end:400|char_star:4,char_end:32";
"rv.status_code == 404,type='comparison_operator'\nline_star:400,line_end:400|char_star:11,char_end:32"[shape="box",fillcolor="white",style=filled];
"assert rv.status_code == 404,type='assert_statement'\nline_star:400,line_end:400|char_star:4,char_end:32"->"rv.status_code == 404,type='comparison_operator'\nline_star:400,line_end:400|char_star:11,char_end:32";
"rv.status_code,type='attribute'\nline_star:400,line_end:400|char_star:11,char_end:25"[shape="box",fillcolor="white",style=filled];
"rv.status_code == 404,type='comparison_operator'\nline_star:400,line_end:400|char_star:11,char_end:32"->"rv.status_code,type='attribute'\nline_star:400,line_end:400|char_star:11,char_end:25";
"rv,type='identifier'\nline_star:400,line_end:400|char_star:11,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"rv.status_code,type='attribute'\nline_star:400,line_end:400|char_star:11,char_end:25"->"rv,type='identifier'\nline_star:400,line_end:400|char_star:11,char_end:13";
"status_code,type='identifier'\nline_star:400,line_end:400|char_star:14,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"rv.status_code,type='attribute'\nline_star:400,line_end:400|char_star:11,char_end:25"->"status_code,type='identifier'\nline_star:400,line_end:400|char_star:14,char_end:25";
"def test_endpoint_decorator(app, client):\n    from werkzeug.routing import Rule\n\n    app.url_map.add(Rule('/foo', endpoint='bar'))\n\n    bp = flask.Blueprint('bp', __name__)\n\n    @bp.endpoint('bar')\n    def foobar():\n        return flask.request.endpoint\n\n    app.register_blueprint(bp, url_prefix='/bp_prefix')\n\n    assert client.get('/foo').data == b'bar'\n    assert client.get('/bp_prefix/bar').status_code == 404,type='function_definition'\nline_star:403,line_end:417|char_star:0,char_end:58"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_endpoint_decorator(app, client):\n    from werkzeug.routing import Rule\n\n    app.url_map.add(Rule('/foo', endpoint='bar'))\n\n    bp = flask.Blueprint('bp', __name__)\n\n    @bp.endpoint('bar')\n    def foobar():\n        return flask.request.endpoint\n\n    app.register_blueprint(bp, url_prefix='/bp_prefix')\n\n    assert client.get('/foo').data == b'bar'\n    assert client.get('/bp_prefix/bar').status_code == 404,type='function_definition'\nline_star:403,line_end:417|char_star:0,char_end:58";
"test_endpoint_decorator,type='identifier'\nline_star:403,line_end:403|char_star:4,char_end:27"[shape="point",fillcolor="#121013",style=filled];
"def test_endpoint_decorator(app, client):\n    from werkzeug.routing import Rule\n\n    app.url_map.add(Rule('/foo', endpoint='bar'))\n\n    bp = flask.Blueprint('bp', __name__)\n\n    @bp.endpoint('bar')\n    def foobar():\n        return flask.request.endpoint\n\n    app.register_blueprint(bp, url_prefix='/bp_prefix')\n\n    assert client.get('/foo').data == b'bar'\n    assert client.get('/bp_prefix/bar').status_code == 404,type='function_definition'\nline_star:403,line_end:417|char_star:0,char_end:58"->"test_endpoint_decorator,type='identifier'\nline_star:403,line_end:403|char_star:4,char_end:27";
"(app, client),type='parameters'\nline_star:403,line_end:403|char_star:27,char_end:40"[shape="box",fillcolor="white",style=filled];
"def test_endpoint_decorator(app, client):\n    from werkzeug.routing import Rule\n\n    app.url_map.add(Rule('/foo', endpoint='bar'))\n\n    bp = flask.Blueprint('bp', __name__)\n\n    @bp.endpoint('bar')\n    def foobar():\n        return flask.request.endpoint\n\n    app.register_blueprint(bp, url_prefix='/bp_prefix')\n\n    assert client.get('/foo').data == b'bar'\n    assert client.get('/bp_prefix/bar').status_code == 404,type='function_definition'\nline_star:403,line_end:417|char_star:0,char_end:58"->"(app, client),type='parameters'\nline_star:403,line_end:403|char_star:27,char_end:40";
"app,type='identifier'\nline_star:403,line_end:403|char_star:28,char_end:31"[shape="point",fillcolor="#121013",style=filled];
"(app, client),type='parameters'\nline_star:403,line_end:403|char_star:27,char_end:40"->"app,type='identifier'\nline_star:403,line_end:403|char_star:28,char_end:31";
"client,type='identifier'\nline_star:403,line_end:403|char_star:33,char_end:39"[shape="point",fillcolor="#121013",style=filled];
"(app, client),type='parameters'\nline_star:403,line_end:403|char_star:27,char_end:40"->"client,type='identifier'\nline_star:403,line_end:403|char_star:33,char_end:39";
"type='INFORMATION BLOCK'\nline_star:404,line_end:417|char_star:4,char_end:58"[shape="point",fillcolor="#121013",style=filled];
"def test_endpoint_decorator(app, client):\n    from werkzeug.routing import Rule\n\n    app.url_map.add(Rule('/foo', endpoint='bar'))\n\n    bp = flask.Blueprint('bp', __name__)\n\n    @bp.endpoint('bar')\n    def foobar():\n        return flask.request.endpoint\n\n    app.register_blueprint(bp, url_prefix='/bp_prefix')\n\n    assert client.get('/foo').data == b'bar'\n    assert client.get('/bp_prefix/bar').status_code == 404,type='function_definition'\nline_star:403,line_end:417|char_star:0,char_end:58"->"type='INFORMATION BLOCK'\nline_star:404,line_end:417|char_star:4,char_end:58";
"from werkzeug.routing import Rule,type='import_from_statement'\nline_star:404,line_end:404|char_star:4,char_end:37"[shape="box",fillcolor="#f48b29",style=filled];
"type='INFORMATION BLOCK'\nline_star:404,line_end:417|char_star:4,char_end:58"->"from werkzeug.routing import Rule,type='import_from_statement'\nline_star:404,line_end:404|char_star:4,char_end:37";
"@bp.endpoint('bar')\n    def foobar():\n        return flask.request.endpoint,type='decorated_definition'\nline_star:410,line_end:412|char_star:4,char_end:37"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:404,line_end:417|char_star:4,char_end:58"->"@bp.endpoint('bar')\n    def foobar():\n        return flask.request.endpoint,type='decorated_definition'\nline_star:410,line_end:412|char_star:4,char_end:37";
"@bp.endpoint('bar'),type='decorator'\nline_star:410,line_end:410|char_star:4,char_end:23"[shape="box",fillcolor="white",style=filled];
"@bp.endpoint('bar')\n    def foobar():\n        return flask.request.endpoint,type='decorated_definition'\nline_star:410,line_end:412|char_star:4,char_end:37"->"@bp.endpoint('bar'),type='decorator'\nline_star:410,line_end:410|char_star:4,char_end:23";
"def foobar():\n        return flask.request.endpoint,type='function_definition'\nline_star:411,line_end:412|char_star:4,char_end:37"[shape="box",fillcolor="#cee6b4",style=filled];
"@bp.endpoint('bar')\n    def foobar():\n        return flask.request.endpoint,type='decorated_definition'\nline_star:410,line_end:412|char_star:4,char_end:37"->"def foobar():\n        return flask.request.endpoint,type='function_definition'\nline_star:411,line_end:412|char_star:4,char_end:37";
"foobar,type='identifier'\nline_star:411,line_end:411|char_star:8,char_end:14"[shape="point",fillcolor="#121013",style=filled];
"def foobar():\n        return flask.request.endpoint,type='function_definition'\nline_star:411,line_end:412|char_star:4,char_end:37"->"foobar,type='identifier'\nline_star:411,line_end:411|char_star:8,char_end:14";
"type='INFORMATION BLOCK'\nline_star:412,line_end:412|char_star:8,char_end:37"[shape="point",fillcolor="#121013",style=filled];
"def foobar():\n        return flask.request.endpoint,type='function_definition'\nline_star:411,line_end:412|char_star:4,char_end:37"->"type='INFORMATION BLOCK'\nline_star:412,line_end:412|char_star:8,char_end:37";
"return flask.request.endpoint,type='return_statement'\nline_star:412,line_end:412|char_star:8,char_end:37"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:412,line_end:412|char_star:8,char_end:37"->"return flask.request.endpoint,type='return_statement'\nline_star:412,line_end:412|char_star:8,char_end:37";
"assert client.get('/foo').data == b'bar',type='assert_statement'\nline_star:416,line_end:416|char_star:4,char_end:44"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:404,line_end:417|char_star:4,char_end:58"->"assert client.get('/foo').data == b'bar',type='assert_statement'\nline_star:416,line_end:416|char_star:4,char_end:44";
"client.get('/foo').data == b'bar',type='comparison_operator'\nline_star:416,line_end:416|char_star:11,char_end:44"[shape="box",fillcolor="white",style=filled];
"assert client.get('/foo').data == b'bar',type='assert_statement'\nline_star:416,line_end:416|char_star:4,char_end:44"->"client.get('/foo').data == b'bar',type='comparison_operator'\nline_star:416,line_end:416|char_star:11,char_end:44";
"client.get('/foo').data,type='attribute'\nline_star:416,line_end:416|char_star:11,char_end:34"[shape="box",fillcolor="white",style=filled];
"client.get('/foo').data == b'bar',type='comparison_operator'\nline_star:416,line_end:416|char_star:11,char_end:44"->"client.get('/foo').data,type='attribute'\nline_star:416,line_end:416|char_star:11,char_end:34";
"client.get('/foo'),type='call'\nline_star:416,line_end:416|char_star:11,char_end:29"[shape="box",fillcolor="white",style=filled];
"client.get('/foo').data,type='attribute'\nline_star:416,line_end:416|char_star:11,char_end:34"->"client.get('/foo'),type='call'\nline_star:416,line_end:416|char_star:11,char_end:29";
"client.get,type='attribute'\nline_star:416,line_end:416|char_star:11,char_end:21"[shape="box",fillcolor="white",style=filled];
"client.get('/foo'),type='call'\nline_star:416,line_end:416|char_star:11,char_end:29"->"client.get,type='attribute'\nline_star:416,line_end:416|char_star:11,char_end:21";
"client,type='identifier'\nline_star:416,line_end:416|char_star:11,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"client.get,type='attribute'\nline_star:416,line_end:416|char_star:11,char_end:21"->"client,type='identifier'\nline_star:416,line_end:416|char_star:11,char_end:17";
"get,type='identifier'\nline_star:416,line_end:416|char_star:18,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"client.get,type='attribute'\nline_star:416,line_end:416|char_star:11,char_end:21"->"get,type='identifier'\nline_star:416,line_end:416|char_star:18,char_end:21";
"('/foo'),type='argument_list'\nline_star:416,line_end:416|char_star:21,char_end:29"[shape="box",fillcolor="white",style=filled];
"client.get('/foo'),type='call'\nline_star:416,line_end:416|char_star:11,char_end:29"->"('/foo'),type='argument_list'\nline_star:416,line_end:416|char_star:21,char_end:29";
"data,type='identifier'\nline_star:416,line_end:416|char_star:30,char_end:34"[shape="point",fillcolor="#121013",style=filled];
"client.get('/foo').data,type='attribute'\nline_star:416,line_end:416|char_star:11,char_end:34"->"data,type='identifier'\nline_star:416,line_end:416|char_star:30,char_end:34";
"assert client.get('/bp_prefix/bar').status_code == 404,type='assert_statement'\nline_star:417,line_end:417|char_star:4,char_end:58"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:404,line_end:417|char_star:4,char_end:58"->"assert client.get('/bp_prefix/bar').status_code == 404,type='assert_statement'\nline_star:417,line_end:417|char_star:4,char_end:58";
"client.get('/bp_prefix/bar').status_code == 404,type='comparison_operator'\nline_star:417,line_end:417|char_star:11,char_end:58"[shape="box",fillcolor="white",style=filled];
"assert client.get('/bp_prefix/bar').status_code == 404,type='assert_statement'\nline_star:417,line_end:417|char_star:4,char_end:58"->"client.get('/bp_prefix/bar').status_code == 404,type='comparison_operator'\nline_star:417,line_end:417|char_star:11,char_end:58";
"client.get('/bp_prefix/bar').status_code,type='attribute'\nline_star:417,line_end:417|char_star:11,char_end:51"[shape="box",fillcolor="white",style=filled];
"client.get('/bp_prefix/bar').status_code == 404,type='comparison_operator'\nline_star:417,line_end:417|char_star:11,char_end:58"->"client.get('/bp_prefix/bar').status_code,type='attribute'\nline_star:417,line_end:417|char_star:11,char_end:51";
"client.get('/bp_prefix/bar'),type='call'\nline_star:417,line_end:417|char_star:11,char_end:39"[shape="box",fillcolor="white",style=filled];
"client.get('/bp_prefix/bar').status_code,type='attribute'\nline_star:417,line_end:417|char_star:11,char_end:51"->"client.get('/bp_prefix/bar'),type='call'\nline_star:417,line_end:417|char_star:11,char_end:39";
"client.get,type='attribute'\nline_star:417,line_end:417|char_star:11,char_end:21"[shape="box",fillcolor="white",style=filled];
"client.get('/bp_prefix/bar'),type='call'\nline_star:417,line_end:417|char_star:11,char_end:39"->"client.get,type='attribute'\nline_star:417,line_end:417|char_star:11,char_end:21";
"client,type='identifier'\nline_star:417,line_end:417|char_star:11,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"client.get,type='attribute'\nline_star:417,line_end:417|char_star:11,char_end:21"->"client,type='identifier'\nline_star:417,line_end:417|char_star:11,char_end:17";
"get,type='identifier'\nline_star:417,line_end:417|char_star:18,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"client.get,type='attribute'\nline_star:417,line_end:417|char_star:11,char_end:21"->"get,type='identifier'\nline_star:417,line_end:417|char_star:18,char_end:21";
"('/bp_prefix/bar'),type='argument_list'\nline_star:417,line_end:417|char_star:21,char_end:39"[shape="box",fillcolor="white",style=filled];
"client.get('/bp_prefix/bar'),type='call'\nline_star:417,line_end:417|char_star:11,char_end:39"->"('/bp_prefix/bar'),type='argument_list'\nline_star:417,line_end:417|char_star:21,char_end:39";
"status_code,type='identifier'\nline_star:417,line_end:417|char_star:40,char_end:51"[shape="point",fillcolor="#121013",style=filled];
"client.get('/bp_prefix/bar').status_code,type='attribute'\nline_star:417,line_end:417|char_star:11,char_end:51"->"status_code,type='identifier'\nline_star:417,line_end:417|char_star:40,char_end:51";
"def test_template_filter(app):\n    bp = flask.Blueprint('bp', __name__)\n\n    @bp.app_template_filter()\n    def my_reverse(s):\n        return s[::-1]\n\n    app.register_blueprint(bp, url_prefix='/py')\n    assert 'my_reverse' in app.jinja_env.filters.keys()\n    assert app.jinja_env.filters['my_reverse'] == my_reverse\n    assert app.jinja_env.filters['my_reverse']('abcd') == 'dcba',type='function_definition'\nline_star:420,line_end:430|char_star:0,char_end:64"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_template_filter(app):\n    bp = flask.Blueprint('bp', __name__)\n\n    @bp.app_template_filter()\n    def my_reverse(s):\n        return s[::-1]\n\n    app.register_blueprint(bp, url_prefix='/py')\n    assert 'my_reverse' in app.jinja_env.filters.keys()\n    assert app.jinja_env.filters['my_reverse'] == my_reverse\n    assert app.jinja_env.filters['my_reverse']('abcd') == 'dcba',type='function_definition'\nline_star:420,line_end:430|char_star:0,char_end:64";
"test_template_filter,type='identifier'\nline_star:420,line_end:420|char_star:4,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"def test_template_filter(app):\n    bp = flask.Blueprint('bp', __name__)\n\n    @bp.app_template_filter()\n    def my_reverse(s):\n        return s[::-1]\n\n    app.register_blueprint(bp, url_prefix='/py')\n    assert 'my_reverse' in app.jinja_env.filters.keys()\n    assert app.jinja_env.filters['my_reverse'] == my_reverse\n    assert app.jinja_env.filters['my_reverse']('abcd') == 'dcba',type='function_definition'\nline_star:420,line_end:430|char_star:0,char_end:64"->"test_template_filter,type='identifier'\nline_star:420,line_end:420|char_star:4,char_end:24";
"(app),type='parameters'\nline_star:420,line_end:420|char_star:24,char_end:29"[shape="box",fillcolor="white",style=filled];
"def test_template_filter(app):\n    bp = flask.Blueprint('bp', __name__)\n\n    @bp.app_template_filter()\n    def my_reverse(s):\n        return s[::-1]\n\n    app.register_blueprint(bp, url_prefix='/py')\n    assert 'my_reverse' in app.jinja_env.filters.keys()\n    assert app.jinja_env.filters['my_reverse'] == my_reverse\n    assert app.jinja_env.filters['my_reverse']('abcd') == 'dcba',type='function_definition'\nline_star:420,line_end:430|char_star:0,char_end:64"->"(app),type='parameters'\nline_star:420,line_end:420|char_star:24,char_end:29";
"app,type='identifier'\nline_star:420,line_end:420|char_star:25,char_end:28"[shape="point",fillcolor="#121013",style=filled];
"(app),type='parameters'\nline_star:420,line_end:420|char_star:24,char_end:29"->"app,type='identifier'\nline_star:420,line_end:420|char_star:25,char_end:28";
"type='INFORMATION BLOCK'\nline_star:421,line_end:430|char_star:4,char_end:64"[shape="point",fillcolor="#121013",style=filled];
"def test_template_filter(app):\n    bp = flask.Blueprint('bp', __name__)\n\n    @bp.app_template_filter()\n    def my_reverse(s):\n        return s[::-1]\n\n    app.register_blueprint(bp, url_prefix='/py')\n    assert 'my_reverse' in app.jinja_env.filters.keys()\n    assert app.jinja_env.filters['my_reverse'] == my_reverse\n    assert app.jinja_env.filters['my_reverse']('abcd') == 'dcba',type='function_definition'\nline_star:420,line_end:430|char_star:0,char_end:64"->"type='INFORMATION BLOCK'\nline_star:421,line_end:430|char_star:4,char_end:64";
"@bp.app_template_filter()\n    def my_reverse(s):\n        return s[::-1],type='decorated_definition'\nline_star:423,line_end:425|char_star:4,char_end:22"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:421,line_end:430|char_star:4,char_end:64"->"@bp.app_template_filter()\n    def my_reverse(s):\n        return s[::-1],type='decorated_definition'\nline_star:423,line_end:425|char_star:4,char_end:22";
"@bp.app_template_filter(),type='decorator'\nline_star:423,line_end:423|char_star:4,char_end:29"[shape="box",fillcolor="white",style=filled];
"@bp.app_template_filter()\n    def my_reverse(s):\n        return s[::-1],type='decorated_definition'\nline_star:423,line_end:425|char_star:4,char_end:22"->"@bp.app_template_filter(),type='decorator'\nline_star:423,line_end:423|char_star:4,char_end:29";
"def my_reverse(s):\n        return s[::-1],type='function_definition'\nline_star:424,line_end:425|char_star:4,char_end:22"[shape="box",fillcolor="#cee6b4",style=filled];
"@bp.app_template_filter()\n    def my_reverse(s):\n        return s[::-1],type='decorated_definition'\nline_star:423,line_end:425|char_star:4,char_end:22"->"def my_reverse(s):\n        return s[::-1],type='function_definition'\nline_star:424,line_end:425|char_star:4,char_end:22";
"my_reverse,type='identifier'\nline_star:424,line_end:424|char_star:8,char_end:18"[shape="point",fillcolor="#121013",style=filled];
"def my_reverse(s):\n        return s[::-1],type='function_definition'\nline_star:424,line_end:425|char_star:4,char_end:22"->"my_reverse,type='identifier'\nline_star:424,line_end:424|char_star:8,char_end:18";
"(s),type='parameters'\nline_star:424,line_end:424|char_star:18,char_end:21"[shape="box",fillcolor="white",style=filled];
"def my_reverse(s):\n        return s[::-1],type='function_definition'\nline_star:424,line_end:425|char_star:4,char_end:22"->"(s),type='parameters'\nline_star:424,line_end:424|char_star:18,char_end:21";
"s,type='identifier'\nline_star:424,line_end:424|char_star:19,char_end:20"[shape="point",fillcolor="#121013",style=filled];
"(s),type='parameters'\nline_star:424,line_end:424|char_star:18,char_end:21"->"s,type='identifier'\nline_star:424,line_end:424|char_star:19,char_end:20";
"type='INFORMATION BLOCK'\nline_star:425,line_end:425|char_star:8,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"def my_reverse(s):\n        return s[::-1],type='function_definition'\nline_star:424,line_end:425|char_star:4,char_end:22"->"type='INFORMATION BLOCK'\nline_star:425,line_end:425|char_star:8,char_end:22";
"return s[::-1],type='return_statement'\nline_star:425,line_end:425|char_star:8,char_end:22"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:425,line_end:425|char_star:8,char_end:22"->"return s[::-1],type='return_statement'\nline_star:425,line_end:425|char_star:8,char_end:22";
"assert 'my_reverse' in app.jinja_env.filters.keys(),type='assert_statement'\nline_star:428,line_end:428|char_star:4,char_end:55"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:421,line_end:430|char_star:4,char_end:64"->"assert 'my_reverse' in app.jinja_env.filters.keys(),type='assert_statement'\nline_star:428,line_end:428|char_star:4,char_end:55";
"'my_reverse' in app.jinja_env.filters.keys(),type='comparison_operator'\nline_star:428,line_end:428|char_star:11,char_end:55"[shape="box",fillcolor="white",style=filled];
"assert 'my_reverse' in app.jinja_env.filters.keys(),type='assert_statement'\nline_star:428,line_end:428|char_star:4,char_end:55"->"'my_reverse' in app.jinja_env.filters.keys(),type='comparison_operator'\nline_star:428,line_end:428|char_star:11,char_end:55";
"app.jinja_env.filters.keys(),type='call'\nline_star:428,line_end:428|char_star:27,char_end:55"[shape="box",fillcolor="white",style=filled];
"'my_reverse' in app.jinja_env.filters.keys(),type='comparison_operator'\nline_star:428,line_end:428|char_star:11,char_end:55"->"app.jinja_env.filters.keys(),type='call'\nline_star:428,line_end:428|char_star:27,char_end:55";
"app.jinja_env.filters.keys,type='attribute'\nline_star:428,line_end:428|char_star:27,char_end:53"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.filters.keys(),type='call'\nline_star:428,line_end:428|char_star:27,char_end:55"->"app.jinja_env.filters.keys,type='attribute'\nline_star:428,line_end:428|char_star:27,char_end:53";
"app.jinja_env.filters,type='attribute'\nline_star:428,line_end:428|char_star:27,char_end:48"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.filters.keys,type='attribute'\nline_star:428,line_end:428|char_star:27,char_end:53"->"app.jinja_env.filters,type='attribute'\nline_star:428,line_end:428|char_star:27,char_end:48";
"app.jinja_env,type='attribute'\nline_star:428,line_end:428|char_star:27,char_end:40"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.filters,type='attribute'\nline_star:428,line_end:428|char_star:27,char_end:48"->"app.jinja_env,type='attribute'\nline_star:428,line_end:428|char_star:27,char_end:40";
"app,type='identifier'\nline_star:428,line_end:428|char_star:27,char_end:30"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env,type='attribute'\nline_star:428,line_end:428|char_star:27,char_end:40"->"app,type='identifier'\nline_star:428,line_end:428|char_star:27,char_end:30";
"jinja_env,type='identifier'\nline_star:428,line_end:428|char_star:31,char_end:40"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env,type='attribute'\nline_star:428,line_end:428|char_star:27,char_end:40"->"jinja_env,type='identifier'\nline_star:428,line_end:428|char_star:31,char_end:40";
"filters,type='identifier'\nline_star:428,line_end:428|char_star:41,char_end:48"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env.filters,type='attribute'\nline_star:428,line_end:428|char_star:27,char_end:48"->"filters,type='identifier'\nline_star:428,line_end:428|char_star:41,char_end:48";
"keys,type='identifier'\nline_star:428,line_end:428|char_star:49,char_end:53"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env.filters.keys,type='attribute'\nline_star:428,line_end:428|char_star:27,char_end:53"->"keys,type='identifier'\nline_star:428,line_end:428|char_star:49,char_end:53";
"assert app.jinja_env.filters['my_reverse'] == my_reverse,type='assert_statement'\nline_star:429,line_end:429|char_star:4,char_end:60"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:421,line_end:430|char_star:4,char_end:64"->"assert app.jinja_env.filters['my_reverse'] == my_reverse,type='assert_statement'\nline_star:429,line_end:429|char_star:4,char_end:60";
"app.jinja_env.filters['my_reverse'] == my_reverse,type='comparison_operator'\nline_star:429,line_end:429|char_star:11,char_end:60"[shape="box",fillcolor="white",style=filled];
"assert app.jinja_env.filters['my_reverse'] == my_reverse,type='assert_statement'\nline_star:429,line_end:429|char_star:4,char_end:60"->"app.jinja_env.filters['my_reverse'] == my_reverse,type='comparison_operator'\nline_star:429,line_end:429|char_star:11,char_end:60";
"app.jinja_env.filters['my_reverse'],type='subscript'\nline_star:429,line_end:429|char_star:11,char_end:46"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.filters['my_reverse'] == my_reverse,type='comparison_operator'\nline_star:429,line_end:429|char_star:11,char_end:60"->"app.jinja_env.filters['my_reverse'],type='subscript'\nline_star:429,line_end:429|char_star:11,char_end:46";
"app.jinja_env.filters,type='attribute'\nline_star:429,line_end:429|char_star:11,char_end:32"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.filters['my_reverse'],type='subscript'\nline_star:429,line_end:429|char_star:11,char_end:46"->"app.jinja_env.filters,type='attribute'\nline_star:429,line_end:429|char_star:11,char_end:32";
"app.jinja_env,type='attribute'\nline_star:429,line_end:429|char_star:11,char_end:24"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.filters,type='attribute'\nline_star:429,line_end:429|char_star:11,char_end:32"->"app.jinja_env,type='attribute'\nline_star:429,line_end:429|char_star:11,char_end:24";
"app,type='identifier'\nline_star:429,line_end:429|char_star:11,char_end:14"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env,type='attribute'\nline_star:429,line_end:429|char_star:11,char_end:24"->"app,type='identifier'\nline_star:429,line_end:429|char_star:11,char_end:14";
"jinja_env,type='identifier'\nline_star:429,line_end:429|char_star:15,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env,type='attribute'\nline_star:429,line_end:429|char_star:11,char_end:24"->"jinja_env,type='identifier'\nline_star:429,line_end:429|char_star:15,char_end:24";
"filters,type='identifier'\nline_star:429,line_end:429|char_star:25,char_end:32"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env.filters,type='attribute'\nline_star:429,line_end:429|char_star:11,char_end:32"->"filters,type='identifier'\nline_star:429,line_end:429|char_star:25,char_end:32";
"my_reverse,type='identifier'\nline_star:429,line_end:429|char_star:50,char_end:60"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env.filters['my_reverse'] == my_reverse,type='comparison_operator'\nline_star:429,line_end:429|char_star:11,char_end:60"->"my_reverse,type='identifier'\nline_star:429,line_end:429|char_star:50,char_end:60";
"assert app.jinja_env.filters['my_reverse']('abcd') == 'dcba',type='assert_statement'\nline_star:430,line_end:430|char_star:4,char_end:64"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:421,line_end:430|char_star:4,char_end:64"->"assert app.jinja_env.filters['my_reverse']('abcd') == 'dcba',type='assert_statement'\nline_star:430,line_end:430|char_star:4,char_end:64";
"app.jinja_env.filters['my_reverse']('abcd') == 'dcba',type='comparison_operator'\nline_star:430,line_end:430|char_star:11,char_end:64"[shape="box",fillcolor="white",style=filled];
"assert app.jinja_env.filters['my_reverse']('abcd') == 'dcba',type='assert_statement'\nline_star:430,line_end:430|char_star:4,char_end:64"->"app.jinja_env.filters['my_reverse']('abcd') == 'dcba',type='comparison_operator'\nline_star:430,line_end:430|char_star:11,char_end:64";
"app.jinja_env.filters['my_reverse']('abcd'),type='call'\nline_star:430,line_end:430|char_star:11,char_end:54"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.filters['my_reverse']('abcd') == 'dcba',type='comparison_operator'\nline_star:430,line_end:430|char_star:11,char_end:64"->"app.jinja_env.filters['my_reverse']('abcd'),type='call'\nline_star:430,line_end:430|char_star:11,char_end:54";
"app.jinja_env.filters['my_reverse'],type='subscript'\nline_star:430,line_end:430|char_star:11,char_end:46"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.filters['my_reverse']('abcd'),type='call'\nline_star:430,line_end:430|char_star:11,char_end:54"->"app.jinja_env.filters['my_reverse'],type='subscript'\nline_star:430,line_end:430|char_star:11,char_end:46";
"app.jinja_env.filters,type='attribute'\nline_star:430,line_end:430|char_star:11,char_end:32"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.filters['my_reverse'],type='subscript'\nline_star:430,line_end:430|char_star:11,char_end:46"->"app.jinja_env.filters,type='attribute'\nline_star:430,line_end:430|char_star:11,char_end:32";
"app.jinja_env,type='attribute'\nline_star:430,line_end:430|char_star:11,char_end:24"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.filters,type='attribute'\nline_star:430,line_end:430|char_star:11,char_end:32"->"app.jinja_env,type='attribute'\nline_star:430,line_end:430|char_star:11,char_end:24";
"app,type='identifier'\nline_star:430,line_end:430|char_star:11,char_end:14"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env,type='attribute'\nline_star:430,line_end:430|char_star:11,char_end:24"->"app,type='identifier'\nline_star:430,line_end:430|char_star:11,char_end:14";
"jinja_env,type='identifier'\nline_star:430,line_end:430|char_star:15,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env,type='attribute'\nline_star:430,line_end:430|char_star:11,char_end:24"->"jinja_env,type='identifier'\nline_star:430,line_end:430|char_star:15,char_end:24";
"filters,type='identifier'\nline_star:430,line_end:430|char_star:25,char_end:32"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env.filters,type='attribute'\nline_star:430,line_end:430|char_star:11,char_end:32"->"filters,type='identifier'\nline_star:430,line_end:430|char_star:25,char_end:32";
"('abcd'),type='argument_list'\nline_star:430,line_end:430|char_star:46,char_end:54"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.filters['my_reverse']('abcd'),type='call'\nline_star:430,line_end:430|char_star:11,char_end:54"->"('abcd'),type='argument_list'\nline_star:430,line_end:430|char_star:46,char_end:54";
"def test_add_template_filter(app):\n    bp = flask.Blueprint('bp', __name__)\n\n    def my_reverse(s):\n        return s[::-1]\n\n    bp.add_app_template_filter(my_reverse)\n    app.register_blueprint(bp, url_prefix='/py')\n    assert 'my_reverse' in app.jinja_env.filters.keys()\n    assert app.jinja_env.filters['my_reverse'] == my_reverse\n    assert app.jinja_env.filters['my_reverse']('abcd') == 'dcba',type='function_definition'\nline_star:433,line_end:443|char_star:0,char_end:64"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_add_template_filter(app):\n    bp = flask.Blueprint('bp', __name__)\n\n    def my_reverse(s):\n        return s[::-1]\n\n    bp.add_app_template_filter(my_reverse)\n    app.register_blueprint(bp, url_prefix='/py')\n    assert 'my_reverse' in app.jinja_env.filters.keys()\n    assert app.jinja_env.filters['my_reverse'] == my_reverse\n    assert app.jinja_env.filters['my_reverse']('abcd') == 'dcba',type='function_definition'\nline_star:433,line_end:443|char_star:0,char_end:64";
"test_add_template_filter,type='identifier'\nline_star:433,line_end:433|char_star:4,char_end:28"[shape="point",fillcolor="#121013",style=filled];
"def test_add_template_filter(app):\n    bp = flask.Blueprint('bp', __name__)\n\n    def my_reverse(s):\n        return s[::-1]\n\n    bp.add_app_template_filter(my_reverse)\n    app.register_blueprint(bp, url_prefix='/py')\n    assert 'my_reverse' in app.jinja_env.filters.keys()\n    assert app.jinja_env.filters['my_reverse'] == my_reverse\n    assert app.jinja_env.filters['my_reverse']('abcd') == 'dcba',type='function_definition'\nline_star:433,line_end:443|char_star:0,char_end:64"->"test_add_template_filter,type='identifier'\nline_star:433,line_end:433|char_star:4,char_end:28";
"(app),type='parameters'\nline_star:433,line_end:433|char_star:28,char_end:33"[shape="box",fillcolor="white",style=filled];
"def test_add_template_filter(app):\n    bp = flask.Blueprint('bp', __name__)\n\n    def my_reverse(s):\n        return s[::-1]\n\n    bp.add_app_template_filter(my_reverse)\n    app.register_blueprint(bp, url_prefix='/py')\n    assert 'my_reverse' in app.jinja_env.filters.keys()\n    assert app.jinja_env.filters['my_reverse'] == my_reverse\n    assert app.jinja_env.filters['my_reverse']('abcd') == 'dcba',type='function_definition'\nline_star:433,line_end:443|char_star:0,char_end:64"->"(app),type='parameters'\nline_star:433,line_end:433|char_star:28,char_end:33";
"app,type='identifier'\nline_star:433,line_end:433|char_star:29,char_end:32"[shape="point",fillcolor="#121013",style=filled];
"(app),type='parameters'\nline_star:433,line_end:433|char_star:28,char_end:33"->"app,type='identifier'\nline_star:433,line_end:433|char_star:29,char_end:32";
"type='INFORMATION BLOCK'\nline_star:434,line_end:443|char_star:4,char_end:64"[shape="point",fillcolor="#121013",style=filled];
"def test_add_template_filter(app):\n    bp = flask.Blueprint('bp', __name__)\n\n    def my_reverse(s):\n        return s[::-1]\n\n    bp.add_app_template_filter(my_reverse)\n    app.register_blueprint(bp, url_prefix='/py')\n    assert 'my_reverse' in app.jinja_env.filters.keys()\n    assert app.jinja_env.filters['my_reverse'] == my_reverse\n    assert app.jinja_env.filters['my_reverse']('abcd') == 'dcba',type='function_definition'\nline_star:433,line_end:443|char_star:0,char_end:64"->"type='INFORMATION BLOCK'\nline_star:434,line_end:443|char_star:4,char_end:64";
"def my_reverse(s):\n        return s[::-1],type='function_definition'\nline_star:436,line_end:437|char_star:4,char_end:22"[shape="box",fillcolor="#cee6b4",style=filled];
"type='INFORMATION BLOCK'\nline_star:434,line_end:443|char_star:4,char_end:64"->"def my_reverse(s):\n        return s[::-1],type='function_definition'\nline_star:436,line_end:437|char_star:4,char_end:22";
"my_reverse,type='identifier'\nline_star:436,line_end:436|char_star:8,char_end:18"[shape="point",fillcolor="#121013",style=filled];
"def my_reverse(s):\n        return s[::-1],type='function_definition'\nline_star:436,line_end:437|char_star:4,char_end:22"->"my_reverse,type='identifier'\nline_star:436,line_end:436|char_star:8,char_end:18";
"(s),type='parameters'\nline_star:436,line_end:436|char_star:18,char_end:21"[shape="box",fillcolor="white",style=filled];
"def my_reverse(s):\n        return s[::-1],type='function_definition'\nline_star:436,line_end:437|char_star:4,char_end:22"->"(s),type='parameters'\nline_star:436,line_end:436|char_star:18,char_end:21";
"s,type='identifier'\nline_star:436,line_end:436|char_star:19,char_end:20"[shape="point",fillcolor="#121013",style=filled];
"(s),type='parameters'\nline_star:436,line_end:436|char_star:18,char_end:21"->"s,type='identifier'\nline_star:436,line_end:436|char_star:19,char_end:20";
"type='INFORMATION BLOCK'\nline_star:437,line_end:437|char_star:8,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"def my_reverse(s):\n        return s[::-1],type='function_definition'\nline_star:436,line_end:437|char_star:4,char_end:22"->"type='INFORMATION BLOCK'\nline_star:437,line_end:437|char_star:8,char_end:22";
"return s[::-1],type='return_statement'\nline_star:437,line_end:437|char_star:8,char_end:22"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:437,line_end:437|char_star:8,char_end:22"->"return s[::-1],type='return_statement'\nline_star:437,line_end:437|char_star:8,char_end:22";
"assert 'my_reverse' in app.jinja_env.filters.keys(),type='assert_statement'\nline_star:441,line_end:441|char_star:4,char_end:55"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:434,line_end:443|char_star:4,char_end:64"->"assert 'my_reverse' in app.jinja_env.filters.keys(),type='assert_statement'\nline_star:441,line_end:441|char_star:4,char_end:55";
"'my_reverse' in app.jinja_env.filters.keys(),type='comparison_operator'\nline_star:441,line_end:441|char_star:11,char_end:55"[shape="box",fillcolor="white",style=filled];
"assert 'my_reverse' in app.jinja_env.filters.keys(),type='assert_statement'\nline_star:441,line_end:441|char_star:4,char_end:55"->"'my_reverse' in app.jinja_env.filters.keys(),type='comparison_operator'\nline_star:441,line_end:441|char_star:11,char_end:55";
"app.jinja_env.filters.keys(),type='call'\nline_star:441,line_end:441|char_star:27,char_end:55"[shape="box",fillcolor="white",style=filled];
"'my_reverse' in app.jinja_env.filters.keys(),type='comparison_operator'\nline_star:441,line_end:441|char_star:11,char_end:55"->"app.jinja_env.filters.keys(),type='call'\nline_star:441,line_end:441|char_star:27,char_end:55";
"app.jinja_env.filters.keys,type='attribute'\nline_star:441,line_end:441|char_star:27,char_end:53"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.filters.keys(),type='call'\nline_star:441,line_end:441|char_star:27,char_end:55"->"app.jinja_env.filters.keys,type='attribute'\nline_star:441,line_end:441|char_star:27,char_end:53";
"app.jinja_env.filters,type='attribute'\nline_star:441,line_end:441|char_star:27,char_end:48"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.filters.keys,type='attribute'\nline_star:441,line_end:441|char_star:27,char_end:53"->"app.jinja_env.filters,type='attribute'\nline_star:441,line_end:441|char_star:27,char_end:48";
"app.jinja_env,type='attribute'\nline_star:441,line_end:441|char_star:27,char_end:40"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.filters,type='attribute'\nline_star:441,line_end:441|char_star:27,char_end:48"->"app.jinja_env,type='attribute'\nline_star:441,line_end:441|char_star:27,char_end:40";
"app,type='identifier'\nline_star:441,line_end:441|char_star:27,char_end:30"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env,type='attribute'\nline_star:441,line_end:441|char_star:27,char_end:40"->"app,type='identifier'\nline_star:441,line_end:441|char_star:27,char_end:30";
"jinja_env,type='identifier'\nline_star:441,line_end:441|char_star:31,char_end:40"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env,type='attribute'\nline_star:441,line_end:441|char_star:27,char_end:40"->"jinja_env,type='identifier'\nline_star:441,line_end:441|char_star:31,char_end:40";
"filters,type='identifier'\nline_star:441,line_end:441|char_star:41,char_end:48"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env.filters,type='attribute'\nline_star:441,line_end:441|char_star:27,char_end:48"->"filters,type='identifier'\nline_star:441,line_end:441|char_star:41,char_end:48";
"keys,type='identifier'\nline_star:441,line_end:441|char_star:49,char_end:53"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env.filters.keys,type='attribute'\nline_star:441,line_end:441|char_star:27,char_end:53"->"keys,type='identifier'\nline_star:441,line_end:441|char_star:49,char_end:53";
"assert app.jinja_env.filters['my_reverse'] == my_reverse,type='assert_statement'\nline_star:442,line_end:442|char_star:4,char_end:60"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:434,line_end:443|char_star:4,char_end:64"->"assert app.jinja_env.filters['my_reverse'] == my_reverse,type='assert_statement'\nline_star:442,line_end:442|char_star:4,char_end:60";
"app.jinja_env.filters['my_reverse'] == my_reverse,type='comparison_operator'\nline_star:442,line_end:442|char_star:11,char_end:60"[shape="box",fillcolor="white",style=filled];
"assert app.jinja_env.filters['my_reverse'] == my_reverse,type='assert_statement'\nline_star:442,line_end:442|char_star:4,char_end:60"->"app.jinja_env.filters['my_reverse'] == my_reverse,type='comparison_operator'\nline_star:442,line_end:442|char_star:11,char_end:60";
"app.jinja_env.filters['my_reverse'],type='subscript'\nline_star:442,line_end:442|char_star:11,char_end:46"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.filters['my_reverse'] == my_reverse,type='comparison_operator'\nline_star:442,line_end:442|char_star:11,char_end:60"->"app.jinja_env.filters['my_reverse'],type='subscript'\nline_star:442,line_end:442|char_star:11,char_end:46";
"app.jinja_env.filters,type='attribute'\nline_star:442,line_end:442|char_star:11,char_end:32"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.filters['my_reverse'],type='subscript'\nline_star:442,line_end:442|char_star:11,char_end:46"->"app.jinja_env.filters,type='attribute'\nline_star:442,line_end:442|char_star:11,char_end:32";
"app.jinja_env,type='attribute'\nline_star:442,line_end:442|char_star:11,char_end:24"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.filters,type='attribute'\nline_star:442,line_end:442|char_star:11,char_end:32"->"app.jinja_env,type='attribute'\nline_star:442,line_end:442|char_star:11,char_end:24";
"app,type='identifier'\nline_star:442,line_end:442|char_star:11,char_end:14"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env,type='attribute'\nline_star:442,line_end:442|char_star:11,char_end:24"->"app,type='identifier'\nline_star:442,line_end:442|char_star:11,char_end:14";
"jinja_env,type='identifier'\nline_star:442,line_end:442|char_star:15,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env,type='attribute'\nline_star:442,line_end:442|char_star:11,char_end:24"->"jinja_env,type='identifier'\nline_star:442,line_end:442|char_star:15,char_end:24";
"filters,type='identifier'\nline_star:442,line_end:442|char_star:25,char_end:32"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env.filters,type='attribute'\nline_star:442,line_end:442|char_star:11,char_end:32"->"filters,type='identifier'\nline_star:442,line_end:442|char_star:25,char_end:32";
"my_reverse,type='identifier'\nline_star:442,line_end:442|char_star:50,char_end:60"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env.filters['my_reverse'] == my_reverse,type='comparison_operator'\nline_star:442,line_end:442|char_star:11,char_end:60"->"my_reverse,type='identifier'\nline_star:442,line_end:442|char_star:50,char_end:60";
"assert app.jinja_env.filters['my_reverse']('abcd') == 'dcba',type='assert_statement'\nline_star:443,line_end:443|char_star:4,char_end:64"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:434,line_end:443|char_star:4,char_end:64"->"assert app.jinja_env.filters['my_reverse']('abcd') == 'dcba',type='assert_statement'\nline_star:443,line_end:443|char_star:4,char_end:64";
"app.jinja_env.filters['my_reverse']('abcd') == 'dcba',type='comparison_operator'\nline_star:443,line_end:443|char_star:11,char_end:64"[shape="box",fillcolor="white",style=filled];
"assert app.jinja_env.filters['my_reverse']('abcd') == 'dcba',type='assert_statement'\nline_star:443,line_end:443|char_star:4,char_end:64"->"app.jinja_env.filters['my_reverse']('abcd') == 'dcba',type='comparison_operator'\nline_star:443,line_end:443|char_star:11,char_end:64";
"app.jinja_env.filters['my_reverse']('abcd'),type='call'\nline_star:443,line_end:443|char_star:11,char_end:54"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.filters['my_reverse']('abcd') == 'dcba',type='comparison_operator'\nline_star:443,line_end:443|char_star:11,char_end:64"->"app.jinja_env.filters['my_reverse']('abcd'),type='call'\nline_star:443,line_end:443|char_star:11,char_end:54";
"app.jinja_env.filters['my_reverse'],type='subscript'\nline_star:443,line_end:443|char_star:11,char_end:46"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.filters['my_reverse']('abcd'),type='call'\nline_star:443,line_end:443|char_star:11,char_end:54"->"app.jinja_env.filters['my_reverse'],type='subscript'\nline_star:443,line_end:443|char_star:11,char_end:46";
"app.jinja_env.filters,type='attribute'\nline_star:443,line_end:443|char_star:11,char_end:32"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.filters['my_reverse'],type='subscript'\nline_star:443,line_end:443|char_star:11,char_end:46"->"app.jinja_env.filters,type='attribute'\nline_star:443,line_end:443|char_star:11,char_end:32";
"app.jinja_env,type='attribute'\nline_star:443,line_end:443|char_star:11,char_end:24"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.filters,type='attribute'\nline_star:443,line_end:443|char_star:11,char_end:32"->"app.jinja_env,type='attribute'\nline_star:443,line_end:443|char_star:11,char_end:24";
"app,type='identifier'\nline_star:443,line_end:443|char_star:11,char_end:14"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env,type='attribute'\nline_star:443,line_end:443|char_star:11,char_end:24"->"app,type='identifier'\nline_star:443,line_end:443|char_star:11,char_end:14";
"jinja_env,type='identifier'\nline_star:443,line_end:443|char_star:15,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env,type='attribute'\nline_star:443,line_end:443|char_star:11,char_end:24"->"jinja_env,type='identifier'\nline_star:443,line_end:443|char_star:15,char_end:24";
"filters,type='identifier'\nline_star:443,line_end:443|char_star:25,char_end:32"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env.filters,type='attribute'\nline_star:443,line_end:443|char_star:11,char_end:32"->"filters,type='identifier'\nline_star:443,line_end:443|char_star:25,char_end:32";
"('abcd'),type='argument_list'\nline_star:443,line_end:443|char_star:46,char_end:54"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.filters['my_reverse']('abcd'),type='call'\nline_star:443,line_end:443|char_star:11,char_end:54"->"('abcd'),type='argument_list'\nline_star:443,line_end:443|char_star:46,char_end:54";
"def test_template_filter_with_name(app):\n    bp = flask.Blueprint('bp', __name__)\n\n    @bp.app_template_filter('strrev')\n    def my_reverse(s):\n        return s[::-1]\n\n    app.register_blueprint(bp, url_prefix='/py')\n    assert 'strrev' in app.jinja_env.filters.keys()\n    assert app.jinja_env.filters['strrev'] == my_reverse\n    assert app.jinja_env.filters['strrev']('abcd') == 'dcba',type='function_definition'\nline_star:446,line_end:456|char_star:0,char_end:60"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_template_filter_with_name(app):\n    bp = flask.Blueprint('bp', __name__)\n\n    @bp.app_template_filter('strrev')\n    def my_reverse(s):\n        return s[::-1]\n\n    app.register_blueprint(bp, url_prefix='/py')\n    assert 'strrev' in app.jinja_env.filters.keys()\n    assert app.jinja_env.filters['strrev'] == my_reverse\n    assert app.jinja_env.filters['strrev']('abcd') == 'dcba',type='function_definition'\nline_star:446,line_end:456|char_star:0,char_end:60";
"test_template_filter_with_name,type='identifier'\nline_star:446,line_end:446|char_star:4,char_end:34"[shape="point",fillcolor="#121013",style=filled];
"def test_template_filter_with_name(app):\n    bp = flask.Blueprint('bp', __name__)\n\n    @bp.app_template_filter('strrev')\n    def my_reverse(s):\n        return s[::-1]\n\n    app.register_blueprint(bp, url_prefix='/py')\n    assert 'strrev' in app.jinja_env.filters.keys()\n    assert app.jinja_env.filters['strrev'] == my_reverse\n    assert app.jinja_env.filters['strrev']('abcd') == 'dcba',type='function_definition'\nline_star:446,line_end:456|char_star:0,char_end:60"->"test_template_filter_with_name,type='identifier'\nline_star:446,line_end:446|char_star:4,char_end:34";
"(app),type='parameters'\nline_star:446,line_end:446|char_star:34,char_end:39"[shape="box",fillcolor="white",style=filled];
"def test_template_filter_with_name(app):\n    bp = flask.Blueprint('bp', __name__)\n\n    @bp.app_template_filter('strrev')\n    def my_reverse(s):\n        return s[::-1]\n\n    app.register_blueprint(bp, url_prefix='/py')\n    assert 'strrev' in app.jinja_env.filters.keys()\n    assert app.jinja_env.filters['strrev'] == my_reverse\n    assert app.jinja_env.filters['strrev']('abcd') == 'dcba',type='function_definition'\nline_star:446,line_end:456|char_star:0,char_end:60"->"(app),type='parameters'\nline_star:446,line_end:446|char_star:34,char_end:39";
"app,type='identifier'\nline_star:446,line_end:446|char_star:35,char_end:38"[shape="point",fillcolor="#121013",style=filled];
"(app),type='parameters'\nline_star:446,line_end:446|char_star:34,char_end:39"->"app,type='identifier'\nline_star:446,line_end:446|char_star:35,char_end:38";
"type='INFORMATION BLOCK'\nline_star:447,line_end:456|char_star:4,char_end:60"[shape="point",fillcolor="#121013",style=filled];
"def test_template_filter_with_name(app):\n    bp = flask.Blueprint('bp', __name__)\n\n    @bp.app_template_filter('strrev')\n    def my_reverse(s):\n        return s[::-1]\n\n    app.register_blueprint(bp, url_prefix='/py')\n    assert 'strrev' in app.jinja_env.filters.keys()\n    assert app.jinja_env.filters['strrev'] == my_reverse\n    assert app.jinja_env.filters['strrev']('abcd') == 'dcba',type='function_definition'\nline_star:446,line_end:456|char_star:0,char_end:60"->"type='INFORMATION BLOCK'\nline_star:447,line_end:456|char_star:4,char_end:60";
"@bp.app_template_filter('strrev')\n    def my_reverse(s):\n        return s[::-1],type='decorated_definition'\nline_star:449,line_end:451|char_star:4,char_end:22"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:447,line_end:456|char_star:4,char_end:60"->"@bp.app_template_filter('strrev')\n    def my_reverse(s):\n        return s[::-1],type='decorated_definition'\nline_star:449,line_end:451|char_star:4,char_end:22";
"@bp.app_template_filter('strrev'),type='decorator'\nline_star:449,line_end:449|char_star:4,char_end:37"[shape="box",fillcolor="white",style=filled];
"@bp.app_template_filter('strrev')\n    def my_reverse(s):\n        return s[::-1],type='decorated_definition'\nline_star:449,line_end:451|char_star:4,char_end:22"->"@bp.app_template_filter('strrev'),type='decorator'\nline_star:449,line_end:449|char_star:4,char_end:37";
"def my_reverse(s):\n        return s[::-1],type='function_definition'\nline_star:450,line_end:451|char_star:4,char_end:22"[shape="box",fillcolor="#cee6b4",style=filled];
"@bp.app_template_filter('strrev')\n    def my_reverse(s):\n        return s[::-1],type='decorated_definition'\nline_star:449,line_end:451|char_star:4,char_end:22"->"def my_reverse(s):\n        return s[::-1],type='function_definition'\nline_star:450,line_end:451|char_star:4,char_end:22";
"my_reverse,type='identifier'\nline_star:450,line_end:450|char_star:8,char_end:18"[shape="point",fillcolor="#121013",style=filled];
"def my_reverse(s):\n        return s[::-1],type='function_definition'\nline_star:450,line_end:451|char_star:4,char_end:22"->"my_reverse,type='identifier'\nline_star:450,line_end:450|char_star:8,char_end:18";
"(s),type='parameters'\nline_star:450,line_end:450|char_star:18,char_end:21"[shape="box",fillcolor="white",style=filled];
"def my_reverse(s):\n        return s[::-1],type='function_definition'\nline_star:450,line_end:451|char_star:4,char_end:22"->"(s),type='parameters'\nline_star:450,line_end:450|char_star:18,char_end:21";
"s,type='identifier'\nline_star:450,line_end:450|char_star:19,char_end:20"[shape="point",fillcolor="#121013",style=filled];
"(s),type='parameters'\nline_star:450,line_end:450|char_star:18,char_end:21"->"s,type='identifier'\nline_star:450,line_end:450|char_star:19,char_end:20";
"type='INFORMATION BLOCK'\nline_star:451,line_end:451|char_star:8,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"def my_reverse(s):\n        return s[::-1],type='function_definition'\nline_star:450,line_end:451|char_star:4,char_end:22"->"type='INFORMATION BLOCK'\nline_star:451,line_end:451|char_star:8,char_end:22";
"return s[::-1],type='return_statement'\nline_star:451,line_end:451|char_star:8,char_end:22"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:451,line_end:451|char_star:8,char_end:22"->"return s[::-1],type='return_statement'\nline_star:451,line_end:451|char_star:8,char_end:22";
"assert 'strrev' in app.jinja_env.filters.keys(),type='assert_statement'\nline_star:454,line_end:454|char_star:4,char_end:51"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:447,line_end:456|char_star:4,char_end:60"->"assert 'strrev' in app.jinja_env.filters.keys(),type='assert_statement'\nline_star:454,line_end:454|char_star:4,char_end:51";
"'strrev' in app.jinja_env.filters.keys(),type='comparison_operator'\nline_star:454,line_end:454|char_star:11,char_end:51"[shape="box",fillcolor="white",style=filled];
"assert 'strrev' in app.jinja_env.filters.keys(),type='assert_statement'\nline_star:454,line_end:454|char_star:4,char_end:51"->"'strrev' in app.jinja_env.filters.keys(),type='comparison_operator'\nline_star:454,line_end:454|char_star:11,char_end:51";
"app.jinja_env.filters.keys(),type='call'\nline_star:454,line_end:454|char_star:23,char_end:51"[shape="box",fillcolor="white",style=filled];
"'strrev' in app.jinja_env.filters.keys(),type='comparison_operator'\nline_star:454,line_end:454|char_star:11,char_end:51"->"app.jinja_env.filters.keys(),type='call'\nline_star:454,line_end:454|char_star:23,char_end:51";
"app.jinja_env.filters.keys,type='attribute'\nline_star:454,line_end:454|char_star:23,char_end:49"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.filters.keys(),type='call'\nline_star:454,line_end:454|char_star:23,char_end:51"->"app.jinja_env.filters.keys,type='attribute'\nline_star:454,line_end:454|char_star:23,char_end:49";
"app.jinja_env.filters,type='attribute'\nline_star:454,line_end:454|char_star:23,char_end:44"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.filters.keys,type='attribute'\nline_star:454,line_end:454|char_star:23,char_end:49"->"app.jinja_env.filters,type='attribute'\nline_star:454,line_end:454|char_star:23,char_end:44";
"app.jinja_env,type='attribute'\nline_star:454,line_end:454|char_star:23,char_end:36"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.filters,type='attribute'\nline_star:454,line_end:454|char_star:23,char_end:44"->"app.jinja_env,type='attribute'\nline_star:454,line_end:454|char_star:23,char_end:36";
"app,type='identifier'\nline_star:454,line_end:454|char_star:23,char_end:26"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env,type='attribute'\nline_star:454,line_end:454|char_star:23,char_end:36"->"app,type='identifier'\nline_star:454,line_end:454|char_star:23,char_end:26";
"jinja_env,type='identifier'\nline_star:454,line_end:454|char_star:27,char_end:36"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env,type='attribute'\nline_star:454,line_end:454|char_star:23,char_end:36"->"jinja_env,type='identifier'\nline_star:454,line_end:454|char_star:27,char_end:36";
"filters,type='identifier'\nline_star:454,line_end:454|char_star:37,char_end:44"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env.filters,type='attribute'\nline_star:454,line_end:454|char_star:23,char_end:44"->"filters,type='identifier'\nline_star:454,line_end:454|char_star:37,char_end:44";
"keys,type='identifier'\nline_star:454,line_end:454|char_star:45,char_end:49"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env.filters.keys,type='attribute'\nline_star:454,line_end:454|char_star:23,char_end:49"->"keys,type='identifier'\nline_star:454,line_end:454|char_star:45,char_end:49";
"assert app.jinja_env.filters['strrev'] == my_reverse,type='assert_statement'\nline_star:455,line_end:455|char_star:4,char_end:56"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:447,line_end:456|char_star:4,char_end:60"->"assert app.jinja_env.filters['strrev'] == my_reverse,type='assert_statement'\nline_star:455,line_end:455|char_star:4,char_end:56";
"app.jinja_env.filters['strrev'] == my_reverse,type='comparison_operator'\nline_star:455,line_end:455|char_star:11,char_end:56"[shape="box",fillcolor="white",style=filled];
"assert app.jinja_env.filters['strrev'] == my_reverse,type='assert_statement'\nline_star:455,line_end:455|char_star:4,char_end:56"->"app.jinja_env.filters['strrev'] == my_reverse,type='comparison_operator'\nline_star:455,line_end:455|char_star:11,char_end:56";
"app.jinja_env.filters['strrev'],type='subscript'\nline_star:455,line_end:455|char_star:11,char_end:42"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.filters['strrev'] == my_reverse,type='comparison_operator'\nline_star:455,line_end:455|char_star:11,char_end:56"->"app.jinja_env.filters['strrev'],type='subscript'\nline_star:455,line_end:455|char_star:11,char_end:42";
"app.jinja_env.filters,type='attribute'\nline_star:455,line_end:455|char_star:11,char_end:32"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.filters['strrev'],type='subscript'\nline_star:455,line_end:455|char_star:11,char_end:42"->"app.jinja_env.filters,type='attribute'\nline_star:455,line_end:455|char_star:11,char_end:32";
"app.jinja_env,type='attribute'\nline_star:455,line_end:455|char_star:11,char_end:24"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.filters,type='attribute'\nline_star:455,line_end:455|char_star:11,char_end:32"->"app.jinja_env,type='attribute'\nline_star:455,line_end:455|char_star:11,char_end:24";
"app,type='identifier'\nline_star:455,line_end:455|char_star:11,char_end:14"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env,type='attribute'\nline_star:455,line_end:455|char_star:11,char_end:24"->"app,type='identifier'\nline_star:455,line_end:455|char_star:11,char_end:14";
"jinja_env,type='identifier'\nline_star:455,line_end:455|char_star:15,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env,type='attribute'\nline_star:455,line_end:455|char_star:11,char_end:24"->"jinja_env,type='identifier'\nline_star:455,line_end:455|char_star:15,char_end:24";
"filters,type='identifier'\nline_star:455,line_end:455|char_star:25,char_end:32"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env.filters,type='attribute'\nline_star:455,line_end:455|char_star:11,char_end:32"->"filters,type='identifier'\nline_star:455,line_end:455|char_star:25,char_end:32";
"my_reverse,type='identifier'\nline_star:455,line_end:455|char_star:46,char_end:56"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env.filters['strrev'] == my_reverse,type='comparison_operator'\nline_star:455,line_end:455|char_star:11,char_end:56"->"my_reverse,type='identifier'\nline_star:455,line_end:455|char_star:46,char_end:56";
"assert app.jinja_env.filters['strrev']('abcd') == 'dcba',type='assert_statement'\nline_star:456,line_end:456|char_star:4,char_end:60"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:447,line_end:456|char_star:4,char_end:60"->"assert app.jinja_env.filters['strrev']('abcd') == 'dcba',type='assert_statement'\nline_star:456,line_end:456|char_star:4,char_end:60";
"app.jinja_env.filters['strrev']('abcd') == 'dcba',type='comparison_operator'\nline_star:456,line_end:456|char_star:11,char_end:60"[shape="box",fillcolor="white",style=filled];
"assert app.jinja_env.filters['strrev']('abcd') == 'dcba',type='assert_statement'\nline_star:456,line_end:456|char_star:4,char_end:60"->"app.jinja_env.filters['strrev']('abcd') == 'dcba',type='comparison_operator'\nline_star:456,line_end:456|char_star:11,char_end:60";
"app.jinja_env.filters['strrev']('abcd'),type='call'\nline_star:456,line_end:456|char_star:11,char_end:50"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.filters['strrev']('abcd') == 'dcba',type='comparison_operator'\nline_star:456,line_end:456|char_star:11,char_end:60"->"app.jinja_env.filters['strrev']('abcd'),type='call'\nline_star:456,line_end:456|char_star:11,char_end:50";
"app.jinja_env.filters['strrev'],type='subscript'\nline_star:456,line_end:456|char_star:11,char_end:42"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.filters['strrev']('abcd'),type='call'\nline_star:456,line_end:456|char_star:11,char_end:50"->"app.jinja_env.filters['strrev'],type='subscript'\nline_star:456,line_end:456|char_star:11,char_end:42";
"app.jinja_env.filters,type='attribute'\nline_star:456,line_end:456|char_star:11,char_end:32"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.filters['strrev'],type='subscript'\nline_star:456,line_end:456|char_star:11,char_end:42"->"app.jinja_env.filters,type='attribute'\nline_star:456,line_end:456|char_star:11,char_end:32";
"app.jinja_env,type='attribute'\nline_star:456,line_end:456|char_star:11,char_end:24"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.filters,type='attribute'\nline_star:456,line_end:456|char_star:11,char_end:32"->"app.jinja_env,type='attribute'\nline_star:456,line_end:456|char_star:11,char_end:24";
"app,type='identifier'\nline_star:456,line_end:456|char_star:11,char_end:14"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env,type='attribute'\nline_star:456,line_end:456|char_star:11,char_end:24"->"app,type='identifier'\nline_star:456,line_end:456|char_star:11,char_end:14";
"jinja_env,type='identifier'\nline_star:456,line_end:456|char_star:15,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env,type='attribute'\nline_star:456,line_end:456|char_star:11,char_end:24"->"jinja_env,type='identifier'\nline_star:456,line_end:456|char_star:15,char_end:24";
"filters,type='identifier'\nline_star:456,line_end:456|char_star:25,char_end:32"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env.filters,type='attribute'\nline_star:456,line_end:456|char_star:11,char_end:32"->"filters,type='identifier'\nline_star:456,line_end:456|char_star:25,char_end:32";
"('abcd'),type='argument_list'\nline_star:456,line_end:456|char_star:42,char_end:50"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.filters['strrev']('abcd'),type='call'\nline_star:456,line_end:456|char_star:11,char_end:50"->"('abcd'),type='argument_list'\nline_star:456,line_end:456|char_star:42,char_end:50";
"def test_add_template_filter_with_name(app):\n    bp = flask.Blueprint('bp', __name__)\n\n    def my_reverse(s):\n        return s[::-1]\n\n    bp.add_app_template_filter(my_reverse, 'strrev')\n    app.register_blueprint(bp, url_prefix='/py')\n    assert 'strrev' in app.jinja_env.filters.keys()\n    assert app.jinja_env.filters['strrev'] == my_reverse\n    assert app.jinja_env.filters['strrev']('abcd') == 'dcba',type='function_definition'\nline_star:459,line_end:469|char_star:0,char_end:60"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_add_template_filter_with_name(app):\n    bp = flask.Blueprint('bp', __name__)\n\n    def my_reverse(s):\n        return s[::-1]\n\n    bp.add_app_template_filter(my_reverse, 'strrev')\n    app.register_blueprint(bp, url_prefix='/py')\n    assert 'strrev' in app.jinja_env.filters.keys()\n    assert app.jinja_env.filters['strrev'] == my_reverse\n    assert app.jinja_env.filters['strrev']('abcd') == 'dcba',type='function_definition'\nline_star:459,line_end:469|char_star:0,char_end:60";
"test_add_template_filter_with_name,type='identifier'\nline_star:459,line_end:459|char_star:4,char_end:38"[shape="point",fillcolor="#121013",style=filled];
"def test_add_template_filter_with_name(app):\n    bp = flask.Blueprint('bp', __name__)\n\n    def my_reverse(s):\n        return s[::-1]\n\n    bp.add_app_template_filter(my_reverse, 'strrev')\n    app.register_blueprint(bp, url_prefix='/py')\n    assert 'strrev' in app.jinja_env.filters.keys()\n    assert app.jinja_env.filters['strrev'] == my_reverse\n    assert app.jinja_env.filters['strrev']('abcd') == 'dcba',type='function_definition'\nline_star:459,line_end:469|char_star:0,char_end:60"->"test_add_template_filter_with_name,type='identifier'\nline_star:459,line_end:459|char_star:4,char_end:38";
"(app),type='parameters'\nline_star:459,line_end:459|char_star:38,char_end:43"[shape="box",fillcolor="white",style=filled];
"def test_add_template_filter_with_name(app):\n    bp = flask.Blueprint('bp', __name__)\n\n    def my_reverse(s):\n        return s[::-1]\n\n    bp.add_app_template_filter(my_reverse, 'strrev')\n    app.register_blueprint(bp, url_prefix='/py')\n    assert 'strrev' in app.jinja_env.filters.keys()\n    assert app.jinja_env.filters['strrev'] == my_reverse\n    assert app.jinja_env.filters['strrev']('abcd') == 'dcba',type='function_definition'\nline_star:459,line_end:469|char_star:0,char_end:60"->"(app),type='parameters'\nline_star:459,line_end:459|char_star:38,char_end:43";
"app,type='identifier'\nline_star:459,line_end:459|char_star:39,char_end:42"[shape="point",fillcolor="#121013",style=filled];
"(app),type='parameters'\nline_star:459,line_end:459|char_star:38,char_end:43"->"app,type='identifier'\nline_star:459,line_end:459|char_star:39,char_end:42";
"type='INFORMATION BLOCK'\nline_star:460,line_end:469|char_star:4,char_end:60"[shape="point",fillcolor="#121013",style=filled];
"def test_add_template_filter_with_name(app):\n    bp = flask.Blueprint('bp', __name__)\n\n    def my_reverse(s):\n        return s[::-1]\n\n    bp.add_app_template_filter(my_reverse, 'strrev')\n    app.register_blueprint(bp, url_prefix='/py')\n    assert 'strrev' in app.jinja_env.filters.keys()\n    assert app.jinja_env.filters['strrev'] == my_reverse\n    assert app.jinja_env.filters['strrev']('abcd') == 'dcba',type='function_definition'\nline_star:459,line_end:469|char_star:0,char_end:60"->"type='INFORMATION BLOCK'\nline_star:460,line_end:469|char_star:4,char_end:60";
"def my_reverse(s):\n        return s[::-1],type='function_definition'\nline_star:462,line_end:463|char_star:4,char_end:22"[shape="box",fillcolor="#cee6b4",style=filled];
"type='INFORMATION BLOCK'\nline_star:460,line_end:469|char_star:4,char_end:60"->"def my_reverse(s):\n        return s[::-1],type='function_definition'\nline_star:462,line_end:463|char_star:4,char_end:22";
"my_reverse,type='identifier'\nline_star:462,line_end:462|char_star:8,char_end:18"[shape="point",fillcolor="#121013",style=filled];
"def my_reverse(s):\n        return s[::-1],type='function_definition'\nline_star:462,line_end:463|char_star:4,char_end:22"->"my_reverse,type='identifier'\nline_star:462,line_end:462|char_star:8,char_end:18";
"(s),type='parameters'\nline_star:462,line_end:462|char_star:18,char_end:21"[shape="box",fillcolor="white",style=filled];
"def my_reverse(s):\n        return s[::-1],type='function_definition'\nline_star:462,line_end:463|char_star:4,char_end:22"->"(s),type='parameters'\nline_star:462,line_end:462|char_star:18,char_end:21";
"s,type='identifier'\nline_star:462,line_end:462|char_star:19,char_end:20"[shape="point",fillcolor="#121013",style=filled];
"(s),type='parameters'\nline_star:462,line_end:462|char_star:18,char_end:21"->"s,type='identifier'\nline_star:462,line_end:462|char_star:19,char_end:20";
"type='INFORMATION BLOCK'\nline_star:463,line_end:463|char_star:8,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"def my_reverse(s):\n        return s[::-1],type='function_definition'\nline_star:462,line_end:463|char_star:4,char_end:22"->"type='INFORMATION BLOCK'\nline_star:463,line_end:463|char_star:8,char_end:22";
"return s[::-1],type='return_statement'\nline_star:463,line_end:463|char_star:8,char_end:22"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:463,line_end:463|char_star:8,char_end:22"->"return s[::-1],type='return_statement'\nline_star:463,line_end:463|char_star:8,char_end:22";
"assert 'strrev' in app.jinja_env.filters.keys(),type='assert_statement'\nline_star:467,line_end:467|char_star:4,char_end:51"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:460,line_end:469|char_star:4,char_end:60"->"assert 'strrev' in app.jinja_env.filters.keys(),type='assert_statement'\nline_star:467,line_end:467|char_star:4,char_end:51";
"'strrev' in app.jinja_env.filters.keys(),type='comparison_operator'\nline_star:467,line_end:467|char_star:11,char_end:51"[shape="box",fillcolor="white",style=filled];
"assert 'strrev' in app.jinja_env.filters.keys(),type='assert_statement'\nline_star:467,line_end:467|char_star:4,char_end:51"->"'strrev' in app.jinja_env.filters.keys(),type='comparison_operator'\nline_star:467,line_end:467|char_star:11,char_end:51";
"app.jinja_env.filters.keys(),type='call'\nline_star:467,line_end:467|char_star:23,char_end:51"[shape="box",fillcolor="white",style=filled];
"'strrev' in app.jinja_env.filters.keys(),type='comparison_operator'\nline_star:467,line_end:467|char_star:11,char_end:51"->"app.jinja_env.filters.keys(),type='call'\nline_star:467,line_end:467|char_star:23,char_end:51";
"app.jinja_env.filters.keys,type='attribute'\nline_star:467,line_end:467|char_star:23,char_end:49"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.filters.keys(),type='call'\nline_star:467,line_end:467|char_star:23,char_end:51"->"app.jinja_env.filters.keys,type='attribute'\nline_star:467,line_end:467|char_star:23,char_end:49";
"app.jinja_env.filters,type='attribute'\nline_star:467,line_end:467|char_star:23,char_end:44"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.filters.keys,type='attribute'\nline_star:467,line_end:467|char_star:23,char_end:49"->"app.jinja_env.filters,type='attribute'\nline_star:467,line_end:467|char_star:23,char_end:44";
"app.jinja_env,type='attribute'\nline_star:467,line_end:467|char_star:23,char_end:36"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.filters,type='attribute'\nline_star:467,line_end:467|char_star:23,char_end:44"->"app.jinja_env,type='attribute'\nline_star:467,line_end:467|char_star:23,char_end:36";
"app,type='identifier'\nline_star:467,line_end:467|char_star:23,char_end:26"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env,type='attribute'\nline_star:467,line_end:467|char_star:23,char_end:36"->"app,type='identifier'\nline_star:467,line_end:467|char_star:23,char_end:26";
"jinja_env,type='identifier'\nline_star:467,line_end:467|char_star:27,char_end:36"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env,type='attribute'\nline_star:467,line_end:467|char_star:23,char_end:36"->"jinja_env,type='identifier'\nline_star:467,line_end:467|char_star:27,char_end:36";
"filters,type='identifier'\nline_star:467,line_end:467|char_star:37,char_end:44"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env.filters,type='attribute'\nline_star:467,line_end:467|char_star:23,char_end:44"->"filters,type='identifier'\nline_star:467,line_end:467|char_star:37,char_end:44";
"keys,type='identifier'\nline_star:467,line_end:467|char_star:45,char_end:49"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env.filters.keys,type='attribute'\nline_star:467,line_end:467|char_star:23,char_end:49"->"keys,type='identifier'\nline_star:467,line_end:467|char_star:45,char_end:49";
"assert app.jinja_env.filters['strrev'] == my_reverse,type='assert_statement'\nline_star:468,line_end:468|char_star:4,char_end:56"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:460,line_end:469|char_star:4,char_end:60"->"assert app.jinja_env.filters['strrev'] == my_reverse,type='assert_statement'\nline_star:468,line_end:468|char_star:4,char_end:56";
"app.jinja_env.filters['strrev'] == my_reverse,type='comparison_operator'\nline_star:468,line_end:468|char_star:11,char_end:56"[shape="box",fillcolor="white",style=filled];
"assert app.jinja_env.filters['strrev'] == my_reverse,type='assert_statement'\nline_star:468,line_end:468|char_star:4,char_end:56"->"app.jinja_env.filters['strrev'] == my_reverse,type='comparison_operator'\nline_star:468,line_end:468|char_star:11,char_end:56";
"app.jinja_env.filters['strrev'],type='subscript'\nline_star:468,line_end:468|char_star:11,char_end:42"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.filters['strrev'] == my_reverse,type='comparison_operator'\nline_star:468,line_end:468|char_star:11,char_end:56"->"app.jinja_env.filters['strrev'],type='subscript'\nline_star:468,line_end:468|char_star:11,char_end:42";
"app.jinja_env.filters,type='attribute'\nline_star:468,line_end:468|char_star:11,char_end:32"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.filters['strrev'],type='subscript'\nline_star:468,line_end:468|char_star:11,char_end:42"->"app.jinja_env.filters,type='attribute'\nline_star:468,line_end:468|char_star:11,char_end:32";
"app.jinja_env,type='attribute'\nline_star:468,line_end:468|char_star:11,char_end:24"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.filters,type='attribute'\nline_star:468,line_end:468|char_star:11,char_end:32"->"app.jinja_env,type='attribute'\nline_star:468,line_end:468|char_star:11,char_end:24";
"app,type='identifier'\nline_star:468,line_end:468|char_star:11,char_end:14"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env,type='attribute'\nline_star:468,line_end:468|char_star:11,char_end:24"->"app,type='identifier'\nline_star:468,line_end:468|char_star:11,char_end:14";
"jinja_env,type='identifier'\nline_star:468,line_end:468|char_star:15,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env,type='attribute'\nline_star:468,line_end:468|char_star:11,char_end:24"->"jinja_env,type='identifier'\nline_star:468,line_end:468|char_star:15,char_end:24";
"filters,type='identifier'\nline_star:468,line_end:468|char_star:25,char_end:32"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env.filters,type='attribute'\nline_star:468,line_end:468|char_star:11,char_end:32"->"filters,type='identifier'\nline_star:468,line_end:468|char_star:25,char_end:32";
"my_reverse,type='identifier'\nline_star:468,line_end:468|char_star:46,char_end:56"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env.filters['strrev'] == my_reverse,type='comparison_operator'\nline_star:468,line_end:468|char_star:11,char_end:56"->"my_reverse,type='identifier'\nline_star:468,line_end:468|char_star:46,char_end:56";
"assert app.jinja_env.filters['strrev']('abcd') == 'dcba',type='assert_statement'\nline_star:469,line_end:469|char_star:4,char_end:60"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:460,line_end:469|char_star:4,char_end:60"->"assert app.jinja_env.filters['strrev']('abcd') == 'dcba',type='assert_statement'\nline_star:469,line_end:469|char_star:4,char_end:60";
"app.jinja_env.filters['strrev']('abcd') == 'dcba',type='comparison_operator'\nline_star:469,line_end:469|char_star:11,char_end:60"[shape="box",fillcolor="white",style=filled];
"assert app.jinja_env.filters['strrev']('abcd') == 'dcba',type='assert_statement'\nline_star:469,line_end:469|char_star:4,char_end:60"->"app.jinja_env.filters['strrev']('abcd') == 'dcba',type='comparison_operator'\nline_star:469,line_end:469|char_star:11,char_end:60";
"app.jinja_env.filters['strrev']('abcd'),type='call'\nline_star:469,line_end:469|char_star:11,char_end:50"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.filters['strrev']('abcd') == 'dcba',type='comparison_operator'\nline_star:469,line_end:469|char_star:11,char_end:60"->"app.jinja_env.filters['strrev']('abcd'),type='call'\nline_star:469,line_end:469|char_star:11,char_end:50";
"app.jinja_env.filters['strrev'],type='subscript'\nline_star:469,line_end:469|char_star:11,char_end:42"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.filters['strrev']('abcd'),type='call'\nline_star:469,line_end:469|char_star:11,char_end:50"->"app.jinja_env.filters['strrev'],type='subscript'\nline_star:469,line_end:469|char_star:11,char_end:42";
"app.jinja_env.filters,type='attribute'\nline_star:469,line_end:469|char_star:11,char_end:32"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.filters['strrev'],type='subscript'\nline_star:469,line_end:469|char_star:11,char_end:42"->"app.jinja_env.filters,type='attribute'\nline_star:469,line_end:469|char_star:11,char_end:32";
"app.jinja_env,type='attribute'\nline_star:469,line_end:469|char_star:11,char_end:24"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.filters,type='attribute'\nline_star:469,line_end:469|char_star:11,char_end:32"->"app.jinja_env,type='attribute'\nline_star:469,line_end:469|char_star:11,char_end:24";
"app,type='identifier'\nline_star:469,line_end:469|char_star:11,char_end:14"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env,type='attribute'\nline_star:469,line_end:469|char_star:11,char_end:24"->"app,type='identifier'\nline_star:469,line_end:469|char_star:11,char_end:14";
"jinja_env,type='identifier'\nline_star:469,line_end:469|char_star:15,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env,type='attribute'\nline_star:469,line_end:469|char_star:11,char_end:24"->"jinja_env,type='identifier'\nline_star:469,line_end:469|char_star:15,char_end:24";
"filters,type='identifier'\nline_star:469,line_end:469|char_star:25,char_end:32"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env.filters,type='attribute'\nline_star:469,line_end:469|char_star:11,char_end:32"->"filters,type='identifier'\nline_star:469,line_end:469|char_star:25,char_end:32";
"('abcd'),type='argument_list'\nline_star:469,line_end:469|char_star:42,char_end:50"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.filters['strrev']('abcd'),type='call'\nline_star:469,line_end:469|char_star:11,char_end:50"->"('abcd'),type='argument_list'\nline_star:469,line_end:469|char_star:42,char_end:50";
"def test_template_filter_with_template(app, client):\n    bp = flask.Blueprint('bp', __name__)\n\n    @bp.app_template_filter()\n    def super_reverse(s):\n        return s[::-1]\n\n    app.register_blueprint(bp, url_prefix='/py')\n\n    @app.route('/')\n    def index():\n        return flask.render_template('template_filter.html', value='abcd')\n\n    rv = client.get('/')\n    assert rv.data == b'dcba',type='function_definition'\nline_star:472,line_end:486|char_star:0,char_end:29"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_template_filter_with_template(app, client):\n    bp = flask.Blueprint('bp', __name__)\n\n    @bp.app_template_filter()\n    def super_reverse(s):\n        return s[::-1]\n\n    app.register_blueprint(bp, url_prefix='/py')\n\n    @app.route('/')\n    def index():\n        return flask.render_template('template_filter.html', value='abcd')\n\n    rv = client.get('/')\n    assert rv.data == b'dcba',type='function_definition'\nline_star:472,line_end:486|char_star:0,char_end:29";
"test_template_filter_with_template,type='identifier'\nline_star:472,line_end:472|char_star:4,char_end:38"[shape="point",fillcolor="#121013",style=filled];
"def test_template_filter_with_template(app, client):\n    bp = flask.Blueprint('bp', __name__)\n\n    @bp.app_template_filter()\n    def super_reverse(s):\n        return s[::-1]\n\n    app.register_blueprint(bp, url_prefix='/py')\n\n    @app.route('/')\n    def index():\n        return flask.render_template('template_filter.html', value='abcd')\n\n    rv = client.get('/')\n    assert rv.data == b'dcba',type='function_definition'\nline_star:472,line_end:486|char_star:0,char_end:29"->"test_template_filter_with_template,type='identifier'\nline_star:472,line_end:472|char_star:4,char_end:38";
"(app, client),type='parameters'\nline_star:472,line_end:472|char_star:38,char_end:51"[shape="box",fillcolor="white",style=filled];
"def test_template_filter_with_template(app, client):\n    bp = flask.Blueprint('bp', __name__)\n\n    @bp.app_template_filter()\n    def super_reverse(s):\n        return s[::-1]\n\n    app.register_blueprint(bp, url_prefix='/py')\n\n    @app.route('/')\n    def index():\n        return flask.render_template('template_filter.html', value='abcd')\n\n    rv = client.get('/')\n    assert rv.data == b'dcba',type='function_definition'\nline_star:472,line_end:486|char_star:0,char_end:29"->"(app, client),type='parameters'\nline_star:472,line_end:472|char_star:38,char_end:51";
"app,type='identifier'\nline_star:472,line_end:472|char_star:39,char_end:42"[shape="point",fillcolor="#121013",style=filled];
"(app, client),type='parameters'\nline_star:472,line_end:472|char_star:38,char_end:51"->"app,type='identifier'\nline_star:472,line_end:472|char_star:39,char_end:42";
"client,type='identifier'\nline_star:472,line_end:472|char_star:44,char_end:50"[shape="point",fillcolor="#121013",style=filled];
"(app, client),type='parameters'\nline_star:472,line_end:472|char_star:38,char_end:51"->"client,type='identifier'\nline_star:472,line_end:472|char_star:44,char_end:50";
"type='INFORMATION BLOCK'\nline_star:473,line_end:486|char_star:4,char_end:29"[shape="point",fillcolor="#121013",style=filled];
"def test_template_filter_with_template(app, client):\n    bp = flask.Blueprint('bp', __name__)\n\n    @bp.app_template_filter()\n    def super_reverse(s):\n        return s[::-1]\n\n    app.register_blueprint(bp, url_prefix='/py')\n\n    @app.route('/')\n    def index():\n        return flask.render_template('template_filter.html', value='abcd')\n\n    rv = client.get('/')\n    assert rv.data == b'dcba',type='function_definition'\nline_star:472,line_end:486|char_star:0,char_end:29"->"type='INFORMATION BLOCK'\nline_star:473,line_end:486|char_star:4,char_end:29";
"@bp.app_template_filter()\n    def super_reverse(s):\n        return s[::-1],type='decorated_definition'\nline_star:475,line_end:477|char_star:4,char_end:22"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:473,line_end:486|char_star:4,char_end:29"->"@bp.app_template_filter()\n    def super_reverse(s):\n        return s[::-1],type='decorated_definition'\nline_star:475,line_end:477|char_star:4,char_end:22";
"@bp.app_template_filter(),type='decorator'\nline_star:475,line_end:475|char_star:4,char_end:29"[shape="box",fillcolor="white",style=filled];
"@bp.app_template_filter()\n    def super_reverse(s):\n        return s[::-1],type='decorated_definition'\nline_star:475,line_end:477|char_star:4,char_end:22"->"@bp.app_template_filter(),type='decorator'\nline_star:475,line_end:475|char_star:4,char_end:29";
"def super_reverse(s):\n        return s[::-1],type='function_definition'\nline_star:476,line_end:477|char_star:4,char_end:22"[shape="box",fillcolor="#cee6b4",style=filled];
"@bp.app_template_filter()\n    def super_reverse(s):\n        return s[::-1],type='decorated_definition'\nline_star:475,line_end:477|char_star:4,char_end:22"->"def super_reverse(s):\n        return s[::-1],type='function_definition'\nline_star:476,line_end:477|char_star:4,char_end:22";
"super_reverse,type='identifier'\nline_star:476,line_end:476|char_star:8,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"def super_reverse(s):\n        return s[::-1],type='function_definition'\nline_star:476,line_end:477|char_star:4,char_end:22"->"super_reverse,type='identifier'\nline_star:476,line_end:476|char_star:8,char_end:21";
"(s),type='parameters'\nline_star:476,line_end:476|char_star:21,char_end:24"[shape="box",fillcolor="white",style=filled];
"def super_reverse(s):\n        return s[::-1],type='function_definition'\nline_star:476,line_end:477|char_star:4,char_end:22"->"(s),type='parameters'\nline_star:476,line_end:476|char_star:21,char_end:24";
"s,type='identifier'\nline_star:476,line_end:476|char_star:22,char_end:23"[shape="point",fillcolor="#121013",style=filled];
"(s),type='parameters'\nline_star:476,line_end:476|char_star:21,char_end:24"->"s,type='identifier'\nline_star:476,line_end:476|char_star:22,char_end:23";
"type='INFORMATION BLOCK'\nline_star:477,line_end:477|char_star:8,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"def super_reverse(s):\n        return s[::-1],type='function_definition'\nline_star:476,line_end:477|char_star:4,char_end:22"->"type='INFORMATION BLOCK'\nline_star:477,line_end:477|char_star:8,char_end:22";
"return s[::-1],type='return_statement'\nline_star:477,line_end:477|char_star:8,char_end:22"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:477,line_end:477|char_star:8,char_end:22"->"return s[::-1],type='return_statement'\nline_star:477,line_end:477|char_star:8,char_end:22";
"@app.route('/')\n    def index():\n        return flask.render_template('template_filter.html', value='abcd'),type='decorated_definition'\nline_star:481,line_end:483|char_star:4,char_end:74"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:473,line_end:486|char_star:4,char_end:29"->"@app.route('/')\n    def index():\n        return flask.render_template('template_filter.html', value='abcd'),type='decorated_definition'\nline_star:481,line_end:483|char_star:4,char_end:74";
"@app.route('/'),type='decorator'\nline_star:481,line_end:481|char_star:4,char_end:19"[shape="box",fillcolor="white",style=filled];
"@app.route('/')\n    def index():\n        return flask.render_template('template_filter.html', value='abcd'),type='decorated_definition'\nline_star:481,line_end:483|char_star:4,char_end:74"->"@app.route('/'),type='decorator'\nline_star:481,line_end:481|char_star:4,char_end:19";
"def index():\n        return flask.render_template('template_filter.html', value='abcd'),type='function_definition'\nline_star:482,line_end:483|char_star:4,char_end:74"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.route('/')\n    def index():\n        return flask.render_template('template_filter.html', value='abcd'),type='decorated_definition'\nline_star:481,line_end:483|char_star:4,char_end:74"->"def index():\n        return flask.render_template('template_filter.html', value='abcd'),type='function_definition'\nline_star:482,line_end:483|char_star:4,char_end:74";
"index,type='identifier'\nline_star:482,line_end:482|char_star:8,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"def index():\n        return flask.render_template('template_filter.html', value='abcd'),type='function_definition'\nline_star:482,line_end:483|char_star:4,char_end:74"->"index,type='identifier'\nline_star:482,line_end:482|char_star:8,char_end:13";
"type='INFORMATION BLOCK'\nline_star:483,line_end:483|char_star:8,char_end:74"[shape="point",fillcolor="#121013",style=filled];
"def index():\n        return flask.render_template('template_filter.html', value='abcd'),type='function_definition'\nline_star:482,line_end:483|char_star:4,char_end:74"->"type='INFORMATION BLOCK'\nline_star:483,line_end:483|char_star:8,char_end:74";
"return flask.render_template('template_filter.html', value='abcd'),type='return_statement'\nline_star:483,line_end:483|char_star:8,char_end:74"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:483,line_end:483|char_star:8,char_end:74"->"return flask.render_template('template_filter.html', value='abcd'),type='return_statement'\nline_star:483,line_end:483|char_star:8,char_end:74";
"assert rv.data == b'dcba',type='assert_statement'\nline_star:486,line_end:486|char_star:4,char_end:29"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:473,line_end:486|char_star:4,char_end:29"->"assert rv.data == b'dcba',type='assert_statement'\nline_star:486,line_end:486|char_star:4,char_end:29";
"rv.data == b'dcba',type='comparison_operator'\nline_star:486,line_end:486|char_star:11,char_end:29"[shape="box",fillcolor="white",style=filled];
"assert rv.data == b'dcba',type='assert_statement'\nline_star:486,line_end:486|char_star:4,char_end:29"->"rv.data == b'dcba',type='comparison_operator'\nline_star:486,line_end:486|char_star:11,char_end:29";
"rv.data,type='attribute'\nline_star:486,line_end:486|char_star:11,char_end:18"[shape="box",fillcolor="white",style=filled];
"rv.data == b'dcba',type='comparison_operator'\nline_star:486,line_end:486|char_star:11,char_end:29"->"rv.data,type='attribute'\nline_star:486,line_end:486|char_star:11,char_end:18";
"rv,type='identifier'\nline_star:486,line_end:486|char_star:11,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"rv.data,type='attribute'\nline_star:486,line_end:486|char_star:11,char_end:18"->"rv,type='identifier'\nline_star:486,line_end:486|char_star:11,char_end:13";
"data,type='identifier'\nline_star:486,line_end:486|char_star:14,char_end:18"[shape="point",fillcolor="#121013",style=filled];
"rv.data,type='attribute'\nline_star:486,line_end:486|char_star:11,char_end:18"->"data,type='identifier'\nline_star:486,line_end:486|char_star:14,char_end:18";
"def test_template_filter_after_route_with_template(app, client):\n    @app.route('/')\n    def index():\n        return flask.render_template('template_filter.html', value='abcd')\n\n    bp = flask.Blueprint('bp', __name__)\n\n    @bp.app_template_filter()\n    def super_reverse(s):\n        return s[::-1]\n\n    app.register_blueprint(bp, url_prefix='/py')\n    rv = client.get('/')\n    assert rv.data == b'dcba',type='function_definition'\nline_star:489,line_end:502|char_star:0,char_end:29"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_template_filter_after_route_with_template(app, client):\n    @app.route('/')\n    def index():\n        return flask.render_template('template_filter.html', value='abcd')\n\n    bp = flask.Blueprint('bp', __name__)\n\n    @bp.app_template_filter()\n    def super_reverse(s):\n        return s[::-1]\n\n    app.register_blueprint(bp, url_prefix='/py')\n    rv = client.get('/')\n    assert rv.data == b'dcba',type='function_definition'\nline_star:489,line_end:502|char_star:0,char_end:29";
"test_template_filter_after_route_with_template,type='identifier'\nline_star:489,line_end:489|char_star:4,char_end:50"[shape="point",fillcolor="#121013",style=filled];
"def test_template_filter_after_route_with_template(app, client):\n    @app.route('/')\n    def index():\n        return flask.render_template('template_filter.html', value='abcd')\n\n    bp = flask.Blueprint('bp', __name__)\n\n    @bp.app_template_filter()\n    def super_reverse(s):\n        return s[::-1]\n\n    app.register_blueprint(bp, url_prefix='/py')\n    rv = client.get('/')\n    assert rv.data == b'dcba',type='function_definition'\nline_star:489,line_end:502|char_star:0,char_end:29"->"test_template_filter_after_route_with_template,type='identifier'\nline_star:489,line_end:489|char_star:4,char_end:50";
"(app, client),type='parameters'\nline_star:489,line_end:489|char_star:50,char_end:63"[shape="box",fillcolor="white",style=filled];
"def test_template_filter_after_route_with_template(app, client):\n    @app.route('/')\n    def index():\n        return flask.render_template('template_filter.html', value='abcd')\n\n    bp = flask.Blueprint('bp', __name__)\n\n    @bp.app_template_filter()\n    def super_reverse(s):\n        return s[::-1]\n\n    app.register_blueprint(bp, url_prefix='/py')\n    rv = client.get('/')\n    assert rv.data == b'dcba',type='function_definition'\nline_star:489,line_end:502|char_star:0,char_end:29"->"(app, client),type='parameters'\nline_star:489,line_end:489|char_star:50,char_end:63";
"app,type='identifier'\nline_star:489,line_end:489|char_star:51,char_end:54"[shape="point",fillcolor="#121013",style=filled];
"(app, client),type='parameters'\nline_star:489,line_end:489|char_star:50,char_end:63"->"app,type='identifier'\nline_star:489,line_end:489|char_star:51,char_end:54";
"client,type='identifier'\nline_star:489,line_end:489|char_star:56,char_end:62"[shape="point",fillcolor="#121013",style=filled];
"(app, client),type='parameters'\nline_star:489,line_end:489|char_star:50,char_end:63"->"client,type='identifier'\nline_star:489,line_end:489|char_star:56,char_end:62";
"type='INFORMATION BLOCK'\nline_star:490,line_end:502|char_star:4,char_end:29"[shape="point",fillcolor="#121013",style=filled];
"def test_template_filter_after_route_with_template(app, client):\n    @app.route('/')\n    def index():\n        return flask.render_template('template_filter.html', value='abcd')\n\n    bp = flask.Blueprint('bp', __name__)\n\n    @bp.app_template_filter()\n    def super_reverse(s):\n        return s[::-1]\n\n    app.register_blueprint(bp, url_prefix='/py')\n    rv = client.get('/')\n    assert rv.data == b'dcba',type='function_definition'\nline_star:489,line_end:502|char_star:0,char_end:29"->"type='INFORMATION BLOCK'\nline_star:490,line_end:502|char_star:4,char_end:29";
"@app.route('/')\n    def index():\n        return flask.render_template('template_filter.html', value='abcd'),type='decorated_definition'\nline_star:490,line_end:492|char_star:4,char_end:74"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:490,line_end:502|char_star:4,char_end:29"->"@app.route('/')\n    def index():\n        return flask.render_template('template_filter.html', value='abcd'),type='decorated_definition'\nline_star:490,line_end:492|char_star:4,char_end:74";
"@app.route('/'),type='decorator'\nline_star:490,line_end:490|char_star:4,char_end:19"[shape="box",fillcolor="white",style=filled];
"@app.route('/')\n    def index():\n        return flask.render_template('template_filter.html', value='abcd'),type='decorated_definition'\nline_star:490,line_end:492|char_star:4,char_end:74"->"@app.route('/'),type='decorator'\nline_star:490,line_end:490|char_star:4,char_end:19";
"def index():\n        return flask.render_template('template_filter.html', value='abcd'),type='function_definition'\nline_star:491,line_end:492|char_star:4,char_end:74"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.route('/')\n    def index():\n        return flask.render_template('template_filter.html', value='abcd'),type='decorated_definition'\nline_star:490,line_end:492|char_star:4,char_end:74"->"def index():\n        return flask.render_template('template_filter.html', value='abcd'),type='function_definition'\nline_star:491,line_end:492|char_star:4,char_end:74";
"index,type='identifier'\nline_star:491,line_end:491|char_star:8,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"def index():\n        return flask.render_template('template_filter.html', value='abcd'),type='function_definition'\nline_star:491,line_end:492|char_star:4,char_end:74"->"index,type='identifier'\nline_star:491,line_end:491|char_star:8,char_end:13";
"type='INFORMATION BLOCK'\nline_star:492,line_end:492|char_star:8,char_end:74"[shape="point",fillcolor="#121013",style=filled];
"def index():\n        return flask.render_template('template_filter.html', value='abcd'),type='function_definition'\nline_star:491,line_end:492|char_star:4,char_end:74"->"type='INFORMATION BLOCK'\nline_star:492,line_end:492|char_star:8,char_end:74";
"return flask.render_template('template_filter.html', value='abcd'),type='return_statement'\nline_star:492,line_end:492|char_star:8,char_end:74"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:492,line_end:492|char_star:8,char_end:74"->"return flask.render_template('template_filter.html', value='abcd'),type='return_statement'\nline_star:492,line_end:492|char_star:8,char_end:74";
"@bp.app_template_filter()\n    def super_reverse(s):\n        return s[::-1],type='decorated_definition'\nline_star:496,line_end:498|char_star:4,char_end:22"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:490,line_end:502|char_star:4,char_end:29"->"@bp.app_template_filter()\n    def super_reverse(s):\n        return s[::-1],type='decorated_definition'\nline_star:496,line_end:498|char_star:4,char_end:22";
"@bp.app_template_filter(),type='decorator'\nline_star:496,line_end:496|char_star:4,char_end:29"[shape="box",fillcolor="white",style=filled];
"@bp.app_template_filter()\n    def super_reverse(s):\n        return s[::-1],type='decorated_definition'\nline_star:496,line_end:498|char_star:4,char_end:22"->"@bp.app_template_filter(),type='decorator'\nline_star:496,line_end:496|char_star:4,char_end:29";
"def super_reverse(s):\n        return s[::-1],type='function_definition'\nline_star:497,line_end:498|char_star:4,char_end:22"[shape="box",fillcolor="#cee6b4",style=filled];
"@bp.app_template_filter()\n    def super_reverse(s):\n        return s[::-1],type='decorated_definition'\nline_star:496,line_end:498|char_star:4,char_end:22"->"def super_reverse(s):\n        return s[::-1],type='function_definition'\nline_star:497,line_end:498|char_star:4,char_end:22";
"super_reverse,type='identifier'\nline_star:497,line_end:497|char_star:8,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"def super_reverse(s):\n        return s[::-1],type='function_definition'\nline_star:497,line_end:498|char_star:4,char_end:22"->"super_reverse,type='identifier'\nline_star:497,line_end:497|char_star:8,char_end:21";
"(s),type='parameters'\nline_star:497,line_end:497|char_star:21,char_end:24"[shape="box",fillcolor="white",style=filled];
"def super_reverse(s):\n        return s[::-1],type='function_definition'\nline_star:497,line_end:498|char_star:4,char_end:22"->"(s),type='parameters'\nline_star:497,line_end:497|char_star:21,char_end:24";
"s,type='identifier'\nline_star:497,line_end:497|char_star:22,char_end:23"[shape="point",fillcolor="#121013",style=filled];
"(s),type='parameters'\nline_star:497,line_end:497|char_star:21,char_end:24"->"s,type='identifier'\nline_star:497,line_end:497|char_star:22,char_end:23";
"type='INFORMATION BLOCK'\nline_star:498,line_end:498|char_star:8,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"def super_reverse(s):\n        return s[::-1],type='function_definition'\nline_star:497,line_end:498|char_star:4,char_end:22"->"type='INFORMATION BLOCK'\nline_star:498,line_end:498|char_star:8,char_end:22";
"return s[::-1],type='return_statement'\nline_star:498,line_end:498|char_star:8,char_end:22"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:498,line_end:498|char_star:8,char_end:22"->"return s[::-1],type='return_statement'\nline_star:498,line_end:498|char_star:8,char_end:22";
"assert rv.data == b'dcba',type='assert_statement'\nline_star:502,line_end:502|char_star:4,char_end:29"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:490,line_end:502|char_star:4,char_end:29"->"assert rv.data == b'dcba',type='assert_statement'\nline_star:502,line_end:502|char_star:4,char_end:29";
"rv.data == b'dcba',type='comparison_operator'\nline_star:502,line_end:502|char_star:11,char_end:29"[shape="box",fillcolor="white",style=filled];
"assert rv.data == b'dcba',type='assert_statement'\nline_star:502,line_end:502|char_star:4,char_end:29"->"rv.data == b'dcba',type='comparison_operator'\nline_star:502,line_end:502|char_star:11,char_end:29";
"rv.data,type='attribute'\nline_star:502,line_end:502|char_star:11,char_end:18"[shape="box",fillcolor="white",style=filled];
"rv.data == b'dcba',type='comparison_operator'\nline_star:502,line_end:502|char_star:11,char_end:29"->"rv.data,type='attribute'\nline_star:502,line_end:502|char_star:11,char_end:18";
"rv,type='identifier'\nline_star:502,line_end:502|char_star:11,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"rv.data,type='attribute'\nline_star:502,line_end:502|char_star:11,char_end:18"->"rv,type='identifier'\nline_star:502,line_end:502|char_star:11,char_end:13";
"data,type='identifier'\nline_star:502,line_end:502|char_star:14,char_end:18"[shape="point",fillcolor="#121013",style=filled];
"rv.data,type='attribute'\nline_star:502,line_end:502|char_star:11,char_end:18"->"data,type='identifier'\nline_star:502,line_end:502|char_star:14,char_end:18";
"def test_add_template_filter_with_template(app, client):\n    bp = flask.Blueprint('bp', __name__)\n\n    def super_reverse(s):\n        return s[::-1]\n\n    bp.add_app_template_filter(super_reverse)\n    app.register_blueprint(bp, url_prefix='/py')\n\n    @app.route('/')\n    def index():\n        return flask.render_template('template_filter.html', value='abcd')\n\n    rv = client.get('/')\n    assert rv.data == b'dcba',type='function_definition'\nline_star:505,line_end:519|char_star:0,char_end:29"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_add_template_filter_with_template(app, client):\n    bp = flask.Blueprint('bp', __name__)\n\n    def super_reverse(s):\n        return s[::-1]\n\n    bp.add_app_template_filter(super_reverse)\n    app.register_blueprint(bp, url_prefix='/py')\n\n    @app.route('/')\n    def index():\n        return flask.render_template('template_filter.html', value='abcd')\n\n    rv = client.get('/')\n    assert rv.data == b'dcba',type='function_definition'\nline_star:505,line_end:519|char_star:0,char_end:29";
"test_add_template_filter_with_template,type='identifier'\nline_star:505,line_end:505|char_star:4,char_end:42"[shape="point",fillcolor="#121013",style=filled];
"def test_add_template_filter_with_template(app, client):\n    bp = flask.Blueprint('bp', __name__)\n\n    def super_reverse(s):\n        return s[::-1]\n\n    bp.add_app_template_filter(super_reverse)\n    app.register_blueprint(bp, url_prefix='/py')\n\n    @app.route('/')\n    def index():\n        return flask.render_template('template_filter.html', value='abcd')\n\n    rv = client.get('/')\n    assert rv.data == b'dcba',type='function_definition'\nline_star:505,line_end:519|char_star:0,char_end:29"->"test_add_template_filter_with_template,type='identifier'\nline_star:505,line_end:505|char_star:4,char_end:42";
"(app, client),type='parameters'\nline_star:505,line_end:505|char_star:42,char_end:55"[shape="box",fillcolor="white",style=filled];
"def test_add_template_filter_with_template(app, client):\n    bp = flask.Blueprint('bp', __name__)\n\n    def super_reverse(s):\n        return s[::-1]\n\n    bp.add_app_template_filter(super_reverse)\n    app.register_blueprint(bp, url_prefix='/py')\n\n    @app.route('/')\n    def index():\n        return flask.render_template('template_filter.html', value='abcd')\n\n    rv = client.get('/')\n    assert rv.data == b'dcba',type='function_definition'\nline_star:505,line_end:519|char_star:0,char_end:29"->"(app, client),type='parameters'\nline_star:505,line_end:505|char_star:42,char_end:55";
"app,type='identifier'\nline_star:505,line_end:505|char_star:43,char_end:46"[shape="point",fillcolor="#121013",style=filled];
"(app, client),type='parameters'\nline_star:505,line_end:505|char_star:42,char_end:55"->"app,type='identifier'\nline_star:505,line_end:505|char_star:43,char_end:46";
"client,type='identifier'\nline_star:505,line_end:505|char_star:48,char_end:54"[shape="point",fillcolor="#121013",style=filled];
"(app, client),type='parameters'\nline_star:505,line_end:505|char_star:42,char_end:55"->"client,type='identifier'\nline_star:505,line_end:505|char_star:48,char_end:54";
"type='INFORMATION BLOCK'\nline_star:506,line_end:519|char_star:4,char_end:29"[shape="point",fillcolor="#121013",style=filled];
"def test_add_template_filter_with_template(app, client):\n    bp = flask.Blueprint('bp', __name__)\n\n    def super_reverse(s):\n        return s[::-1]\n\n    bp.add_app_template_filter(super_reverse)\n    app.register_blueprint(bp, url_prefix='/py')\n\n    @app.route('/')\n    def index():\n        return flask.render_template('template_filter.html', value='abcd')\n\n    rv = client.get('/')\n    assert rv.data == b'dcba',type='function_definition'\nline_star:505,line_end:519|char_star:0,char_end:29"->"type='INFORMATION BLOCK'\nline_star:506,line_end:519|char_star:4,char_end:29";
"def super_reverse(s):\n        return s[::-1],type='function_definition'\nline_star:508,line_end:509|char_star:4,char_end:22"[shape="box",fillcolor="#cee6b4",style=filled];
"type='INFORMATION BLOCK'\nline_star:506,line_end:519|char_star:4,char_end:29"->"def super_reverse(s):\n        return s[::-1],type='function_definition'\nline_star:508,line_end:509|char_star:4,char_end:22";
"super_reverse,type='identifier'\nline_star:508,line_end:508|char_star:8,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"def super_reverse(s):\n        return s[::-1],type='function_definition'\nline_star:508,line_end:509|char_star:4,char_end:22"->"super_reverse,type='identifier'\nline_star:508,line_end:508|char_star:8,char_end:21";
"(s),type='parameters'\nline_star:508,line_end:508|char_star:21,char_end:24"[shape="box",fillcolor="white",style=filled];
"def super_reverse(s):\n        return s[::-1],type='function_definition'\nline_star:508,line_end:509|char_star:4,char_end:22"->"(s),type='parameters'\nline_star:508,line_end:508|char_star:21,char_end:24";
"s,type='identifier'\nline_star:508,line_end:508|char_star:22,char_end:23"[shape="point",fillcolor="#121013",style=filled];
"(s),type='parameters'\nline_star:508,line_end:508|char_star:21,char_end:24"->"s,type='identifier'\nline_star:508,line_end:508|char_star:22,char_end:23";
"type='INFORMATION BLOCK'\nline_star:509,line_end:509|char_star:8,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"def super_reverse(s):\n        return s[::-1],type='function_definition'\nline_star:508,line_end:509|char_star:4,char_end:22"->"type='INFORMATION BLOCK'\nline_star:509,line_end:509|char_star:8,char_end:22";
"return s[::-1],type='return_statement'\nline_star:509,line_end:509|char_star:8,char_end:22"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:509,line_end:509|char_star:8,char_end:22"->"return s[::-1],type='return_statement'\nline_star:509,line_end:509|char_star:8,char_end:22";
"@app.route('/')\n    def index():\n        return flask.render_template('template_filter.html', value='abcd'),type='decorated_definition'\nline_star:514,line_end:516|char_star:4,char_end:74"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:506,line_end:519|char_star:4,char_end:29"->"@app.route('/')\n    def index():\n        return flask.render_template('template_filter.html', value='abcd'),type='decorated_definition'\nline_star:514,line_end:516|char_star:4,char_end:74";
"@app.route('/'),type='decorator'\nline_star:514,line_end:514|char_star:4,char_end:19"[shape="box",fillcolor="white",style=filled];
"@app.route('/')\n    def index():\n        return flask.render_template('template_filter.html', value='abcd'),type='decorated_definition'\nline_star:514,line_end:516|char_star:4,char_end:74"->"@app.route('/'),type='decorator'\nline_star:514,line_end:514|char_star:4,char_end:19";
"def index():\n        return flask.render_template('template_filter.html', value='abcd'),type='function_definition'\nline_star:515,line_end:516|char_star:4,char_end:74"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.route('/')\n    def index():\n        return flask.render_template('template_filter.html', value='abcd'),type='decorated_definition'\nline_star:514,line_end:516|char_star:4,char_end:74"->"def index():\n        return flask.render_template('template_filter.html', value='abcd'),type='function_definition'\nline_star:515,line_end:516|char_star:4,char_end:74";
"index,type='identifier'\nline_star:515,line_end:515|char_star:8,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"def index():\n        return flask.render_template('template_filter.html', value='abcd'),type='function_definition'\nline_star:515,line_end:516|char_star:4,char_end:74"->"index,type='identifier'\nline_star:515,line_end:515|char_star:8,char_end:13";
"type='INFORMATION BLOCK'\nline_star:516,line_end:516|char_star:8,char_end:74"[shape="point",fillcolor="#121013",style=filled];
"def index():\n        return flask.render_template('template_filter.html', value='abcd'),type='function_definition'\nline_star:515,line_end:516|char_star:4,char_end:74"->"type='INFORMATION BLOCK'\nline_star:516,line_end:516|char_star:8,char_end:74";
"return flask.render_template('template_filter.html', value='abcd'),type='return_statement'\nline_star:516,line_end:516|char_star:8,char_end:74"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:516,line_end:516|char_star:8,char_end:74"->"return flask.render_template('template_filter.html', value='abcd'),type='return_statement'\nline_star:516,line_end:516|char_star:8,char_end:74";
"assert rv.data == b'dcba',type='assert_statement'\nline_star:519,line_end:519|char_star:4,char_end:29"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:506,line_end:519|char_star:4,char_end:29"->"assert rv.data == b'dcba',type='assert_statement'\nline_star:519,line_end:519|char_star:4,char_end:29";
"rv.data == b'dcba',type='comparison_operator'\nline_star:519,line_end:519|char_star:11,char_end:29"[shape="box",fillcolor="white",style=filled];
"assert rv.data == b'dcba',type='assert_statement'\nline_star:519,line_end:519|char_star:4,char_end:29"->"rv.data == b'dcba',type='comparison_operator'\nline_star:519,line_end:519|char_star:11,char_end:29";
"rv.data,type='attribute'\nline_star:519,line_end:519|char_star:11,char_end:18"[shape="box",fillcolor="white",style=filled];
"rv.data == b'dcba',type='comparison_operator'\nline_star:519,line_end:519|char_star:11,char_end:29"->"rv.data,type='attribute'\nline_star:519,line_end:519|char_star:11,char_end:18";
"rv,type='identifier'\nline_star:519,line_end:519|char_star:11,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"rv.data,type='attribute'\nline_star:519,line_end:519|char_star:11,char_end:18"->"rv,type='identifier'\nline_star:519,line_end:519|char_star:11,char_end:13";
"data,type='identifier'\nline_star:519,line_end:519|char_star:14,char_end:18"[shape="point",fillcolor="#121013",style=filled];
"rv.data,type='attribute'\nline_star:519,line_end:519|char_star:11,char_end:18"->"data,type='identifier'\nline_star:519,line_end:519|char_star:14,char_end:18";
"def test_template_filter_with_name_and_template(app, client):\n    bp = flask.Blueprint('bp', __name__)\n\n    @bp.app_template_filter('super_reverse')\n    def my_reverse(s):\n        return s[::-1]\n\n    app.register_blueprint(bp, url_prefix='/py')\n\n    @app.route('/')\n    def index():\n        return flask.render_template('template_filter.html', value='abcd')\n\n    rv = client.get('/')\n    assert rv.data == b'dcba',type='function_definition'\nline_star:522,line_end:536|char_star:0,char_end:29"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_template_filter_with_name_and_template(app, client):\n    bp = flask.Blueprint('bp', __name__)\n\n    @bp.app_template_filter('super_reverse')\n    def my_reverse(s):\n        return s[::-1]\n\n    app.register_blueprint(bp, url_prefix='/py')\n\n    @app.route('/')\n    def index():\n        return flask.render_template('template_filter.html', value='abcd')\n\n    rv = client.get('/')\n    assert rv.data == b'dcba',type='function_definition'\nline_star:522,line_end:536|char_star:0,char_end:29";
"test_template_filter_with_name_and_template,type='identifier'\nline_star:522,line_end:522|char_star:4,char_end:47"[shape="point",fillcolor="#121013",style=filled];
"def test_template_filter_with_name_and_template(app, client):\n    bp = flask.Blueprint('bp', __name__)\n\n    @bp.app_template_filter('super_reverse')\n    def my_reverse(s):\n        return s[::-1]\n\n    app.register_blueprint(bp, url_prefix='/py')\n\n    @app.route('/')\n    def index():\n        return flask.render_template('template_filter.html', value='abcd')\n\n    rv = client.get('/')\n    assert rv.data == b'dcba',type='function_definition'\nline_star:522,line_end:536|char_star:0,char_end:29"->"test_template_filter_with_name_and_template,type='identifier'\nline_star:522,line_end:522|char_star:4,char_end:47";
"(app, client),type='parameters'\nline_star:522,line_end:522|char_star:47,char_end:60"[shape="box",fillcolor="white",style=filled];
"def test_template_filter_with_name_and_template(app, client):\n    bp = flask.Blueprint('bp', __name__)\n\n    @bp.app_template_filter('super_reverse')\n    def my_reverse(s):\n        return s[::-1]\n\n    app.register_blueprint(bp, url_prefix='/py')\n\n    @app.route('/')\n    def index():\n        return flask.render_template('template_filter.html', value='abcd')\n\n    rv = client.get('/')\n    assert rv.data == b'dcba',type='function_definition'\nline_star:522,line_end:536|char_star:0,char_end:29"->"(app, client),type='parameters'\nline_star:522,line_end:522|char_star:47,char_end:60";
"app,type='identifier'\nline_star:522,line_end:522|char_star:48,char_end:51"[shape="point",fillcolor="#121013",style=filled];
"(app, client),type='parameters'\nline_star:522,line_end:522|char_star:47,char_end:60"->"app,type='identifier'\nline_star:522,line_end:522|char_star:48,char_end:51";
"client,type='identifier'\nline_star:522,line_end:522|char_star:53,char_end:59"[shape="point",fillcolor="#121013",style=filled];
"(app, client),type='parameters'\nline_star:522,line_end:522|char_star:47,char_end:60"->"client,type='identifier'\nline_star:522,line_end:522|char_star:53,char_end:59";
"type='INFORMATION BLOCK'\nline_star:523,line_end:536|char_star:4,char_end:29"[shape="point",fillcolor="#121013",style=filled];
"def test_template_filter_with_name_and_template(app, client):\n    bp = flask.Blueprint('bp', __name__)\n\n    @bp.app_template_filter('super_reverse')\n    def my_reverse(s):\n        return s[::-1]\n\n    app.register_blueprint(bp, url_prefix='/py')\n\n    @app.route('/')\n    def index():\n        return flask.render_template('template_filter.html', value='abcd')\n\n    rv = client.get('/')\n    assert rv.data == b'dcba',type='function_definition'\nline_star:522,line_end:536|char_star:0,char_end:29"->"type='INFORMATION BLOCK'\nline_star:523,line_end:536|char_star:4,char_end:29";
"@bp.app_template_filter('super_reverse')\n    def my_reverse(s):\n        return s[::-1],type='decorated_definition'\nline_star:525,line_end:527|char_star:4,char_end:22"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:523,line_end:536|char_star:4,char_end:29"->"@bp.app_template_filter('super_reverse')\n    def my_reverse(s):\n        return s[::-1],type='decorated_definition'\nline_star:525,line_end:527|char_star:4,char_end:22";
"@bp.app_template_filter('super_reverse'),type='decorator'\nline_star:525,line_end:525|char_star:4,char_end:44"[shape="box",fillcolor="white",style=filled];
"@bp.app_template_filter('super_reverse')\n    def my_reverse(s):\n        return s[::-1],type='decorated_definition'\nline_star:525,line_end:527|char_star:4,char_end:22"->"@bp.app_template_filter('super_reverse'),type='decorator'\nline_star:525,line_end:525|char_star:4,char_end:44";
"def my_reverse(s):\n        return s[::-1],type='function_definition'\nline_star:526,line_end:527|char_star:4,char_end:22"[shape="box",fillcolor="#cee6b4",style=filled];
"@bp.app_template_filter('super_reverse')\n    def my_reverse(s):\n        return s[::-1],type='decorated_definition'\nline_star:525,line_end:527|char_star:4,char_end:22"->"def my_reverse(s):\n        return s[::-1],type='function_definition'\nline_star:526,line_end:527|char_star:4,char_end:22";
"my_reverse,type='identifier'\nline_star:526,line_end:526|char_star:8,char_end:18"[shape="point",fillcolor="#121013",style=filled];
"def my_reverse(s):\n        return s[::-1],type='function_definition'\nline_star:526,line_end:527|char_star:4,char_end:22"->"my_reverse,type='identifier'\nline_star:526,line_end:526|char_star:8,char_end:18";
"(s),type='parameters'\nline_star:526,line_end:526|char_star:18,char_end:21"[shape="box",fillcolor="white",style=filled];
"def my_reverse(s):\n        return s[::-1],type='function_definition'\nline_star:526,line_end:527|char_star:4,char_end:22"->"(s),type='parameters'\nline_star:526,line_end:526|char_star:18,char_end:21";
"s,type='identifier'\nline_star:526,line_end:526|char_star:19,char_end:20"[shape="point",fillcolor="#121013",style=filled];
"(s),type='parameters'\nline_star:526,line_end:526|char_star:18,char_end:21"->"s,type='identifier'\nline_star:526,line_end:526|char_star:19,char_end:20";
"type='INFORMATION BLOCK'\nline_star:527,line_end:527|char_star:8,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"def my_reverse(s):\n        return s[::-1],type='function_definition'\nline_star:526,line_end:527|char_star:4,char_end:22"->"type='INFORMATION BLOCK'\nline_star:527,line_end:527|char_star:8,char_end:22";
"return s[::-1],type='return_statement'\nline_star:527,line_end:527|char_star:8,char_end:22"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:527,line_end:527|char_star:8,char_end:22"->"return s[::-1],type='return_statement'\nline_star:527,line_end:527|char_star:8,char_end:22";
"@app.route('/')\n    def index():\n        return flask.render_template('template_filter.html', value='abcd'),type='decorated_definition'\nline_star:531,line_end:533|char_star:4,char_end:74"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:523,line_end:536|char_star:4,char_end:29"->"@app.route('/')\n    def index():\n        return flask.render_template('template_filter.html', value='abcd'),type='decorated_definition'\nline_star:531,line_end:533|char_star:4,char_end:74";
"@app.route('/'),type='decorator'\nline_star:531,line_end:531|char_star:4,char_end:19"[shape="box",fillcolor="white",style=filled];
"@app.route('/')\n    def index():\n        return flask.render_template('template_filter.html', value='abcd'),type='decorated_definition'\nline_star:531,line_end:533|char_star:4,char_end:74"->"@app.route('/'),type='decorator'\nline_star:531,line_end:531|char_star:4,char_end:19";
"def index():\n        return flask.render_template('template_filter.html', value='abcd'),type='function_definition'\nline_star:532,line_end:533|char_star:4,char_end:74"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.route('/')\n    def index():\n        return flask.render_template('template_filter.html', value='abcd'),type='decorated_definition'\nline_star:531,line_end:533|char_star:4,char_end:74"->"def index():\n        return flask.render_template('template_filter.html', value='abcd'),type='function_definition'\nline_star:532,line_end:533|char_star:4,char_end:74";
"index,type='identifier'\nline_star:532,line_end:532|char_star:8,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"def index():\n        return flask.render_template('template_filter.html', value='abcd'),type='function_definition'\nline_star:532,line_end:533|char_star:4,char_end:74"->"index,type='identifier'\nline_star:532,line_end:532|char_star:8,char_end:13";
"type='INFORMATION BLOCK'\nline_star:533,line_end:533|char_star:8,char_end:74"[shape="point",fillcolor="#121013",style=filled];
"def index():\n        return flask.render_template('template_filter.html', value='abcd'),type='function_definition'\nline_star:532,line_end:533|char_star:4,char_end:74"->"type='INFORMATION BLOCK'\nline_star:533,line_end:533|char_star:8,char_end:74";
"return flask.render_template('template_filter.html', value='abcd'),type='return_statement'\nline_star:533,line_end:533|char_star:8,char_end:74"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:533,line_end:533|char_star:8,char_end:74"->"return flask.render_template('template_filter.html', value='abcd'),type='return_statement'\nline_star:533,line_end:533|char_star:8,char_end:74";
"assert rv.data == b'dcba',type='assert_statement'\nline_star:536,line_end:536|char_star:4,char_end:29"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:523,line_end:536|char_star:4,char_end:29"->"assert rv.data == b'dcba',type='assert_statement'\nline_star:536,line_end:536|char_star:4,char_end:29";
"rv.data == b'dcba',type='comparison_operator'\nline_star:536,line_end:536|char_star:11,char_end:29"[shape="box",fillcolor="white",style=filled];
"assert rv.data == b'dcba',type='assert_statement'\nline_star:536,line_end:536|char_star:4,char_end:29"->"rv.data == b'dcba',type='comparison_operator'\nline_star:536,line_end:536|char_star:11,char_end:29";
"rv.data,type='attribute'\nline_star:536,line_end:536|char_star:11,char_end:18"[shape="box",fillcolor="white",style=filled];
"rv.data == b'dcba',type='comparison_operator'\nline_star:536,line_end:536|char_star:11,char_end:29"->"rv.data,type='attribute'\nline_star:536,line_end:536|char_star:11,char_end:18";
"rv,type='identifier'\nline_star:536,line_end:536|char_star:11,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"rv.data,type='attribute'\nline_star:536,line_end:536|char_star:11,char_end:18"->"rv,type='identifier'\nline_star:536,line_end:536|char_star:11,char_end:13";
"data,type='identifier'\nline_star:536,line_end:536|char_star:14,char_end:18"[shape="point",fillcolor="#121013",style=filled];
"rv.data,type='attribute'\nline_star:536,line_end:536|char_star:11,char_end:18"->"data,type='identifier'\nline_star:536,line_end:536|char_star:14,char_end:18";
"def test_add_template_filter_with_name_and_template(app, client):\n    bp = flask.Blueprint('bp', __name__)\n\n    def my_reverse(s):\n        return s[::-1]\n\n    bp.add_app_template_filter(my_reverse, 'super_reverse')\n    app.register_blueprint(bp, url_prefix='/py')\n\n    @app.route('/')\n    def index():\n        return flask.render_template('template_filter.html', value='abcd')\n\n    rv = client.get('/')\n    assert rv.data == b'dcba',type='function_definition'\nline_star:539,line_end:553|char_star:0,char_end:29"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_add_template_filter_with_name_and_template(app, client):\n    bp = flask.Blueprint('bp', __name__)\n\n    def my_reverse(s):\n        return s[::-1]\n\n    bp.add_app_template_filter(my_reverse, 'super_reverse')\n    app.register_blueprint(bp, url_prefix='/py')\n\n    @app.route('/')\n    def index():\n        return flask.render_template('template_filter.html', value='abcd')\n\n    rv = client.get('/')\n    assert rv.data == b'dcba',type='function_definition'\nline_star:539,line_end:553|char_star:0,char_end:29";
"test_add_template_filter_with_name_and_template,type='identifier'\nline_star:539,line_end:539|char_star:4,char_end:51"[shape="point",fillcolor="#121013",style=filled];
"def test_add_template_filter_with_name_and_template(app, client):\n    bp = flask.Blueprint('bp', __name__)\n\n    def my_reverse(s):\n        return s[::-1]\n\n    bp.add_app_template_filter(my_reverse, 'super_reverse')\n    app.register_blueprint(bp, url_prefix='/py')\n\n    @app.route('/')\n    def index():\n        return flask.render_template('template_filter.html', value='abcd')\n\n    rv = client.get('/')\n    assert rv.data == b'dcba',type='function_definition'\nline_star:539,line_end:553|char_star:0,char_end:29"->"test_add_template_filter_with_name_and_template,type='identifier'\nline_star:539,line_end:539|char_star:4,char_end:51";
"(app, client),type='parameters'\nline_star:539,line_end:539|char_star:51,char_end:64"[shape="box",fillcolor="white",style=filled];
"def test_add_template_filter_with_name_and_template(app, client):\n    bp = flask.Blueprint('bp', __name__)\n\n    def my_reverse(s):\n        return s[::-1]\n\n    bp.add_app_template_filter(my_reverse, 'super_reverse')\n    app.register_blueprint(bp, url_prefix='/py')\n\n    @app.route('/')\n    def index():\n        return flask.render_template('template_filter.html', value='abcd')\n\n    rv = client.get('/')\n    assert rv.data == b'dcba',type='function_definition'\nline_star:539,line_end:553|char_star:0,char_end:29"->"(app, client),type='parameters'\nline_star:539,line_end:539|char_star:51,char_end:64";
"app,type='identifier'\nline_star:539,line_end:539|char_star:52,char_end:55"[shape="point",fillcolor="#121013",style=filled];
"(app, client),type='parameters'\nline_star:539,line_end:539|char_star:51,char_end:64"->"app,type='identifier'\nline_star:539,line_end:539|char_star:52,char_end:55";
"client,type='identifier'\nline_star:539,line_end:539|char_star:57,char_end:63"[shape="point",fillcolor="#121013",style=filled];
"(app, client),type='parameters'\nline_star:539,line_end:539|char_star:51,char_end:64"->"client,type='identifier'\nline_star:539,line_end:539|char_star:57,char_end:63";
"type='INFORMATION BLOCK'\nline_star:540,line_end:553|char_star:4,char_end:29"[shape="point",fillcolor="#121013",style=filled];
"def test_add_template_filter_with_name_and_template(app, client):\n    bp = flask.Blueprint('bp', __name__)\n\n    def my_reverse(s):\n        return s[::-1]\n\n    bp.add_app_template_filter(my_reverse, 'super_reverse')\n    app.register_blueprint(bp, url_prefix='/py')\n\n    @app.route('/')\n    def index():\n        return flask.render_template('template_filter.html', value='abcd')\n\n    rv = client.get('/')\n    assert rv.data == b'dcba',type='function_definition'\nline_star:539,line_end:553|char_star:0,char_end:29"->"type='INFORMATION BLOCK'\nline_star:540,line_end:553|char_star:4,char_end:29";
"def my_reverse(s):\n        return s[::-1],type='function_definition'\nline_star:542,line_end:543|char_star:4,char_end:22"[shape="box",fillcolor="#cee6b4",style=filled];
"type='INFORMATION BLOCK'\nline_star:540,line_end:553|char_star:4,char_end:29"->"def my_reverse(s):\n        return s[::-1],type='function_definition'\nline_star:542,line_end:543|char_star:4,char_end:22";
"my_reverse,type='identifier'\nline_star:542,line_end:542|char_star:8,char_end:18"[shape="point",fillcolor="#121013",style=filled];
"def my_reverse(s):\n        return s[::-1],type='function_definition'\nline_star:542,line_end:543|char_star:4,char_end:22"->"my_reverse,type='identifier'\nline_star:542,line_end:542|char_star:8,char_end:18";
"(s),type='parameters'\nline_star:542,line_end:542|char_star:18,char_end:21"[shape="box",fillcolor="white",style=filled];
"def my_reverse(s):\n        return s[::-1],type='function_definition'\nline_star:542,line_end:543|char_star:4,char_end:22"->"(s),type='parameters'\nline_star:542,line_end:542|char_star:18,char_end:21";
"s,type='identifier'\nline_star:542,line_end:542|char_star:19,char_end:20"[shape="point",fillcolor="#121013",style=filled];
"(s),type='parameters'\nline_star:542,line_end:542|char_star:18,char_end:21"->"s,type='identifier'\nline_star:542,line_end:542|char_star:19,char_end:20";
"type='INFORMATION BLOCK'\nline_star:543,line_end:543|char_star:8,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"def my_reverse(s):\n        return s[::-1],type='function_definition'\nline_star:542,line_end:543|char_star:4,char_end:22"->"type='INFORMATION BLOCK'\nline_star:543,line_end:543|char_star:8,char_end:22";
"return s[::-1],type='return_statement'\nline_star:543,line_end:543|char_star:8,char_end:22"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:543,line_end:543|char_star:8,char_end:22"->"return s[::-1],type='return_statement'\nline_star:543,line_end:543|char_star:8,char_end:22";
"@app.route('/')\n    def index():\n        return flask.render_template('template_filter.html', value='abcd'),type='decorated_definition'\nline_star:548,line_end:550|char_star:4,char_end:74"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:540,line_end:553|char_star:4,char_end:29"->"@app.route('/')\n    def index():\n        return flask.render_template('template_filter.html', value='abcd'),type='decorated_definition'\nline_star:548,line_end:550|char_star:4,char_end:74";
"@app.route('/'),type='decorator'\nline_star:548,line_end:548|char_star:4,char_end:19"[shape="box",fillcolor="white",style=filled];
"@app.route('/')\n    def index():\n        return flask.render_template('template_filter.html', value='abcd'),type='decorated_definition'\nline_star:548,line_end:550|char_star:4,char_end:74"->"@app.route('/'),type='decorator'\nline_star:548,line_end:548|char_star:4,char_end:19";
"def index():\n        return flask.render_template('template_filter.html', value='abcd'),type='function_definition'\nline_star:549,line_end:550|char_star:4,char_end:74"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.route('/')\n    def index():\n        return flask.render_template('template_filter.html', value='abcd'),type='decorated_definition'\nline_star:548,line_end:550|char_star:4,char_end:74"->"def index():\n        return flask.render_template('template_filter.html', value='abcd'),type='function_definition'\nline_star:549,line_end:550|char_star:4,char_end:74";
"index,type='identifier'\nline_star:549,line_end:549|char_star:8,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"def index():\n        return flask.render_template('template_filter.html', value='abcd'),type='function_definition'\nline_star:549,line_end:550|char_star:4,char_end:74"->"index,type='identifier'\nline_star:549,line_end:549|char_star:8,char_end:13";
"type='INFORMATION BLOCK'\nline_star:550,line_end:550|char_star:8,char_end:74"[shape="point",fillcolor="#121013",style=filled];
"def index():\n        return flask.render_template('template_filter.html', value='abcd'),type='function_definition'\nline_star:549,line_end:550|char_star:4,char_end:74"->"type='INFORMATION BLOCK'\nline_star:550,line_end:550|char_star:8,char_end:74";
"return flask.render_template('template_filter.html', value='abcd'),type='return_statement'\nline_star:550,line_end:550|char_star:8,char_end:74"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:550,line_end:550|char_star:8,char_end:74"->"return flask.render_template('template_filter.html', value='abcd'),type='return_statement'\nline_star:550,line_end:550|char_star:8,char_end:74";
"assert rv.data == b'dcba',type='assert_statement'\nline_star:553,line_end:553|char_star:4,char_end:29"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:540,line_end:553|char_star:4,char_end:29"->"assert rv.data == b'dcba',type='assert_statement'\nline_star:553,line_end:553|char_star:4,char_end:29";
"rv.data == b'dcba',type='comparison_operator'\nline_star:553,line_end:553|char_star:11,char_end:29"[shape="box",fillcolor="white",style=filled];
"assert rv.data == b'dcba',type='assert_statement'\nline_star:553,line_end:553|char_star:4,char_end:29"->"rv.data == b'dcba',type='comparison_operator'\nline_star:553,line_end:553|char_star:11,char_end:29";
"rv.data,type='attribute'\nline_star:553,line_end:553|char_star:11,char_end:18"[shape="box",fillcolor="white",style=filled];
"rv.data == b'dcba',type='comparison_operator'\nline_star:553,line_end:553|char_star:11,char_end:29"->"rv.data,type='attribute'\nline_star:553,line_end:553|char_star:11,char_end:18";
"rv,type='identifier'\nline_star:553,line_end:553|char_star:11,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"rv.data,type='attribute'\nline_star:553,line_end:553|char_star:11,char_end:18"->"rv,type='identifier'\nline_star:553,line_end:553|char_star:11,char_end:13";
"data,type='identifier'\nline_star:553,line_end:553|char_star:14,char_end:18"[shape="point",fillcolor="#121013",style=filled];
"rv.data,type='attribute'\nline_star:553,line_end:553|char_star:11,char_end:18"->"data,type='identifier'\nline_star:553,line_end:553|char_star:14,char_end:18";
"def test_template_test(app):\n    bp = flask.Blueprint('bp', __name__)\n\n    @bp.app_template_test()\n    def is_boolean(value):\n        return isinstance(value, bool)\n\n    app.register_blueprint(bp, url_prefix='/py')\n    assert 'is_boolean' in app.jinja_env.tests.keys()\n    assert app.jinja_env.tests['is_boolean'] == is_boolean\n    assert app.jinja_env.tests['is_boolean'](False),type='function_definition'\nline_star:556,line_end:566|char_star:0,char_end:51"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_template_test(app):\n    bp = flask.Blueprint('bp', __name__)\n\n    @bp.app_template_test()\n    def is_boolean(value):\n        return isinstance(value, bool)\n\n    app.register_blueprint(bp, url_prefix='/py')\n    assert 'is_boolean' in app.jinja_env.tests.keys()\n    assert app.jinja_env.tests['is_boolean'] == is_boolean\n    assert app.jinja_env.tests['is_boolean'](False),type='function_definition'\nline_star:556,line_end:566|char_star:0,char_end:51";
"test_template_test,type='identifier'\nline_star:556,line_end:556|char_star:4,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"def test_template_test(app):\n    bp = flask.Blueprint('bp', __name__)\n\n    @bp.app_template_test()\n    def is_boolean(value):\n        return isinstance(value, bool)\n\n    app.register_blueprint(bp, url_prefix='/py')\n    assert 'is_boolean' in app.jinja_env.tests.keys()\n    assert app.jinja_env.tests['is_boolean'] == is_boolean\n    assert app.jinja_env.tests['is_boolean'](False),type='function_definition'\nline_star:556,line_end:566|char_star:0,char_end:51"->"test_template_test,type='identifier'\nline_star:556,line_end:556|char_star:4,char_end:22";
"(app),type='parameters'\nline_star:556,line_end:556|char_star:22,char_end:27"[shape="box",fillcolor="white",style=filled];
"def test_template_test(app):\n    bp = flask.Blueprint('bp', __name__)\n\n    @bp.app_template_test()\n    def is_boolean(value):\n        return isinstance(value, bool)\n\n    app.register_blueprint(bp, url_prefix='/py')\n    assert 'is_boolean' in app.jinja_env.tests.keys()\n    assert app.jinja_env.tests['is_boolean'] == is_boolean\n    assert app.jinja_env.tests['is_boolean'](False),type='function_definition'\nline_star:556,line_end:566|char_star:0,char_end:51"->"(app),type='parameters'\nline_star:556,line_end:556|char_star:22,char_end:27";
"app,type='identifier'\nline_star:556,line_end:556|char_star:23,char_end:26"[shape="point",fillcolor="#121013",style=filled];
"(app),type='parameters'\nline_star:556,line_end:556|char_star:22,char_end:27"->"app,type='identifier'\nline_star:556,line_end:556|char_star:23,char_end:26";
"type='INFORMATION BLOCK'\nline_star:557,line_end:566|char_star:4,char_end:51"[shape="point",fillcolor="#121013",style=filled];
"def test_template_test(app):\n    bp = flask.Blueprint('bp', __name__)\n\n    @bp.app_template_test()\n    def is_boolean(value):\n        return isinstance(value, bool)\n\n    app.register_blueprint(bp, url_prefix='/py')\n    assert 'is_boolean' in app.jinja_env.tests.keys()\n    assert app.jinja_env.tests['is_boolean'] == is_boolean\n    assert app.jinja_env.tests['is_boolean'](False),type='function_definition'\nline_star:556,line_end:566|char_star:0,char_end:51"->"type='INFORMATION BLOCK'\nline_star:557,line_end:566|char_star:4,char_end:51";
"@bp.app_template_test()\n    def is_boolean(value):\n        return isinstance(value, bool),type='decorated_definition'\nline_star:559,line_end:561|char_star:4,char_end:38"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:557,line_end:566|char_star:4,char_end:51"->"@bp.app_template_test()\n    def is_boolean(value):\n        return isinstance(value, bool),type='decorated_definition'\nline_star:559,line_end:561|char_star:4,char_end:38";
"@bp.app_template_test(),type='decorator'\nline_star:559,line_end:559|char_star:4,char_end:27"[shape="box",fillcolor="white",style=filled];
"@bp.app_template_test()\n    def is_boolean(value):\n        return isinstance(value, bool),type='decorated_definition'\nline_star:559,line_end:561|char_star:4,char_end:38"->"@bp.app_template_test(),type='decorator'\nline_star:559,line_end:559|char_star:4,char_end:27";
"def is_boolean(value):\n        return isinstance(value, bool),type='function_definition'\nline_star:560,line_end:561|char_star:4,char_end:38"[shape="box",fillcolor="#cee6b4",style=filled];
"@bp.app_template_test()\n    def is_boolean(value):\n        return isinstance(value, bool),type='decorated_definition'\nline_star:559,line_end:561|char_star:4,char_end:38"->"def is_boolean(value):\n        return isinstance(value, bool),type='function_definition'\nline_star:560,line_end:561|char_star:4,char_end:38";
"is_boolean,type='identifier'\nline_star:560,line_end:560|char_star:8,char_end:18"[shape="point",fillcolor="#121013",style=filled];
"def is_boolean(value):\n        return isinstance(value, bool),type='function_definition'\nline_star:560,line_end:561|char_star:4,char_end:38"->"is_boolean,type='identifier'\nline_star:560,line_end:560|char_star:8,char_end:18";
"(value),type='parameters'\nline_star:560,line_end:560|char_star:18,char_end:25"[shape="box",fillcolor="white",style=filled];
"def is_boolean(value):\n        return isinstance(value, bool),type='function_definition'\nline_star:560,line_end:561|char_star:4,char_end:38"->"(value),type='parameters'\nline_star:560,line_end:560|char_star:18,char_end:25";
"value,type='identifier'\nline_star:560,line_end:560|char_star:19,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"(value),type='parameters'\nline_star:560,line_end:560|char_star:18,char_end:25"->"value,type='identifier'\nline_star:560,line_end:560|char_star:19,char_end:24";
"type='INFORMATION BLOCK'\nline_star:561,line_end:561|char_star:8,char_end:38"[shape="point",fillcolor="#121013",style=filled];
"def is_boolean(value):\n        return isinstance(value, bool),type='function_definition'\nline_star:560,line_end:561|char_star:4,char_end:38"->"type='INFORMATION BLOCK'\nline_star:561,line_end:561|char_star:8,char_end:38";
"return isinstance(value, bool),type='return_statement'\nline_star:561,line_end:561|char_star:8,char_end:38"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:561,line_end:561|char_star:8,char_end:38"->"return isinstance(value, bool),type='return_statement'\nline_star:561,line_end:561|char_star:8,char_end:38";
"assert 'is_boolean' in app.jinja_env.tests.keys(),type='assert_statement'\nline_star:564,line_end:564|char_star:4,char_end:53"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:557,line_end:566|char_star:4,char_end:51"->"assert 'is_boolean' in app.jinja_env.tests.keys(),type='assert_statement'\nline_star:564,line_end:564|char_star:4,char_end:53";
"'is_boolean' in app.jinja_env.tests.keys(),type='comparison_operator'\nline_star:564,line_end:564|char_star:11,char_end:53"[shape="box",fillcolor="white",style=filled];
"assert 'is_boolean' in app.jinja_env.tests.keys(),type='assert_statement'\nline_star:564,line_end:564|char_star:4,char_end:53"->"'is_boolean' in app.jinja_env.tests.keys(),type='comparison_operator'\nline_star:564,line_end:564|char_star:11,char_end:53";
"app.jinja_env.tests.keys(),type='call'\nline_star:564,line_end:564|char_star:27,char_end:53"[shape="box",fillcolor="white",style=filled];
"'is_boolean' in app.jinja_env.tests.keys(),type='comparison_operator'\nline_star:564,line_end:564|char_star:11,char_end:53"->"app.jinja_env.tests.keys(),type='call'\nline_star:564,line_end:564|char_star:27,char_end:53";
"app.jinja_env.tests.keys,type='attribute'\nline_star:564,line_end:564|char_star:27,char_end:51"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.tests.keys(),type='call'\nline_star:564,line_end:564|char_star:27,char_end:53"->"app.jinja_env.tests.keys,type='attribute'\nline_star:564,line_end:564|char_star:27,char_end:51";
"app.jinja_env.tests,type='attribute'\nline_star:564,line_end:564|char_star:27,char_end:46"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.tests.keys,type='attribute'\nline_star:564,line_end:564|char_star:27,char_end:51"->"app.jinja_env.tests,type='attribute'\nline_star:564,line_end:564|char_star:27,char_end:46";
"app.jinja_env,type='attribute'\nline_star:564,line_end:564|char_star:27,char_end:40"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.tests,type='attribute'\nline_star:564,line_end:564|char_star:27,char_end:46"->"app.jinja_env,type='attribute'\nline_star:564,line_end:564|char_star:27,char_end:40";
"app,type='identifier'\nline_star:564,line_end:564|char_star:27,char_end:30"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env,type='attribute'\nline_star:564,line_end:564|char_star:27,char_end:40"->"app,type='identifier'\nline_star:564,line_end:564|char_star:27,char_end:30";
"jinja_env,type='identifier'\nline_star:564,line_end:564|char_star:31,char_end:40"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env,type='attribute'\nline_star:564,line_end:564|char_star:27,char_end:40"->"jinja_env,type='identifier'\nline_star:564,line_end:564|char_star:31,char_end:40";
"tests,type='identifier'\nline_star:564,line_end:564|char_star:41,char_end:46"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env.tests,type='attribute'\nline_star:564,line_end:564|char_star:27,char_end:46"->"tests,type='identifier'\nline_star:564,line_end:564|char_star:41,char_end:46";
"keys,type='identifier'\nline_star:564,line_end:564|char_star:47,char_end:51"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env.tests.keys,type='attribute'\nline_star:564,line_end:564|char_star:27,char_end:51"->"keys,type='identifier'\nline_star:564,line_end:564|char_star:47,char_end:51";
"assert app.jinja_env.tests['is_boolean'] == is_boolean,type='assert_statement'\nline_star:565,line_end:565|char_star:4,char_end:58"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:557,line_end:566|char_star:4,char_end:51"->"assert app.jinja_env.tests['is_boolean'] == is_boolean,type='assert_statement'\nline_star:565,line_end:565|char_star:4,char_end:58";
"app.jinja_env.tests['is_boolean'] == is_boolean,type='comparison_operator'\nline_star:565,line_end:565|char_star:11,char_end:58"[shape="box",fillcolor="white",style=filled];
"assert app.jinja_env.tests['is_boolean'] == is_boolean,type='assert_statement'\nline_star:565,line_end:565|char_star:4,char_end:58"->"app.jinja_env.tests['is_boolean'] == is_boolean,type='comparison_operator'\nline_star:565,line_end:565|char_star:11,char_end:58";
"app.jinja_env.tests['is_boolean'],type='subscript'\nline_star:565,line_end:565|char_star:11,char_end:44"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.tests['is_boolean'] == is_boolean,type='comparison_operator'\nline_star:565,line_end:565|char_star:11,char_end:58"->"app.jinja_env.tests['is_boolean'],type='subscript'\nline_star:565,line_end:565|char_star:11,char_end:44";
"app.jinja_env.tests,type='attribute'\nline_star:565,line_end:565|char_star:11,char_end:30"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.tests['is_boolean'],type='subscript'\nline_star:565,line_end:565|char_star:11,char_end:44"->"app.jinja_env.tests,type='attribute'\nline_star:565,line_end:565|char_star:11,char_end:30";
"app.jinja_env,type='attribute'\nline_star:565,line_end:565|char_star:11,char_end:24"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.tests,type='attribute'\nline_star:565,line_end:565|char_star:11,char_end:30"->"app.jinja_env,type='attribute'\nline_star:565,line_end:565|char_star:11,char_end:24";
"app,type='identifier'\nline_star:565,line_end:565|char_star:11,char_end:14"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env,type='attribute'\nline_star:565,line_end:565|char_star:11,char_end:24"->"app,type='identifier'\nline_star:565,line_end:565|char_star:11,char_end:14";
"jinja_env,type='identifier'\nline_star:565,line_end:565|char_star:15,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env,type='attribute'\nline_star:565,line_end:565|char_star:11,char_end:24"->"jinja_env,type='identifier'\nline_star:565,line_end:565|char_star:15,char_end:24";
"tests,type='identifier'\nline_star:565,line_end:565|char_star:25,char_end:30"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env.tests,type='attribute'\nline_star:565,line_end:565|char_star:11,char_end:30"->"tests,type='identifier'\nline_star:565,line_end:565|char_star:25,char_end:30";
"is_boolean,type='identifier'\nline_star:565,line_end:565|char_star:48,char_end:58"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env.tests['is_boolean'] == is_boolean,type='comparison_operator'\nline_star:565,line_end:565|char_star:11,char_end:58"->"is_boolean,type='identifier'\nline_star:565,line_end:565|char_star:48,char_end:58";
"assert app.jinja_env.tests['is_boolean'](False),type='assert_statement'\nline_star:566,line_end:566|char_star:4,char_end:51"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:557,line_end:566|char_star:4,char_end:51"->"assert app.jinja_env.tests['is_boolean'](False),type='assert_statement'\nline_star:566,line_end:566|char_star:4,char_end:51";
"app.jinja_env.tests['is_boolean'](False),type='call'\nline_star:566,line_end:566|char_star:11,char_end:51"[shape="box",fillcolor="white",style=filled];
"assert app.jinja_env.tests['is_boolean'](False),type='assert_statement'\nline_star:566,line_end:566|char_star:4,char_end:51"->"app.jinja_env.tests['is_boolean'](False),type='call'\nline_star:566,line_end:566|char_star:11,char_end:51";
"app.jinja_env.tests['is_boolean'],type='subscript'\nline_star:566,line_end:566|char_star:11,char_end:44"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.tests['is_boolean'](False),type='call'\nline_star:566,line_end:566|char_star:11,char_end:51"->"app.jinja_env.tests['is_boolean'],type='subscript'\nline_star:566,line_end:566|char_star:11,char_end:44";
"app.jinja_env.tests,type='attribute'\nline_star:566,line_end:566|char_star:11,char_end:30"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.tests['is_boolean'],type='subscript'\nline_star:566,line_end:566|char_star:11,char_end:44"->"app.jinja_env.tests,type='attribute'\nline_star:566,line_end:566|char_star:11,char_end:30";
"app.jinja_env,type='attribute'\nline_star:566,line_end:566|char_star:11,char_end:24"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.tests,type='attribute'\nline_star:566,line_end:566|char_star:11,char_end:30"->"app.jinja_env,type='attribute'\nline_star:566,line_end:566|char_star:11,char_end:24";
"app,type='identifier'\nline_star:566,line_end:566|char_star:11,char_end:14"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env,type='attribute'\nline_star:566,line_end:566|char_star:11,char_end:24"->"app,type='identifier'\nline_star:566,line_end:566|char_star:11,char_end:14";
"jinja_env,type='identifier'\nline_star:566,line_end:566|char_star:15,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env,type='attribute'\nline_star:566,line_end:566|char_star:11,char_end:24"->"jinja_env,type='identifier'\nline_star:566,line_end:566|char_star:15,char_end:24";
"tests,type='identifier'\nline_star:566,line_end:566|char_star:25,char_end:30"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env.tests,type='attribute'\nline_star:566,line_end:566|char_star:11,char_end:30"->"tests,type='identifier'\nline_star:566,line_end:566|char_star:25,char_end:30";
"(False),type='argument_list'\nline_star:566,line_end:566|char_star:44,char_end:51"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.tests['is_boolean'](False),type='call'\nline_star:566,line_end:566|char_star:11,char_end:51"->"(False),type='argument_list'\nline_star:566,line_end:566|char_star:44,char_end:51";
"def test_add_template_test(app):\n    bp = flask.Blueprint('bp', __name__)\n\n    def is_boolean(value):\n        return isinstance(value, bool)\n\n    bp.add_app_template_test(is_boolean)\n    app.register_blueprint(bp, url_prefix='/py')\n    assert 'is_boolean' in app.jinja_env.tests.keys()\n    assert app.jinja_env.tests['is_boolean'] == is_boolean\n    assert app.jinja_env.tests['is_boolean'](False),type='function_definition'\nline_star:569,line_end:579|char_star:0,char_end:51"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_add_template_test(app):\n    bp = flask.Blueprint('bp', __name__)\n\n    def is_boolean(value):\n        return isinstance(value, bool)\n\n    bp.add_app_template_test(is_boolean)\n    app.register_blueprint(bp, url_prefix='/py')\n    assert 'is_boolean' in app.jinja_env.tests.keys()\n    assert app.jinja_env.tests['is_boolean'] == is_boolean\n    assert app.jinja_env.tests['is_boolean'](False),type='function_definition'\nline_star:569,line_end:579|char_star:0,char_end:51";
"test_add_template_test,type='identifier'\nline_star:569,line_end:569|char_star:4,char_end:26"[shape="point",fillcolor="#121013",style=filled];
"def test_add_template_test(app):\n    bp = flask.Blueprint('bp', __name__)\n\n    def is_boolean(value):\n        return isinstance(value, bool)\n\n    bp.add_app_template_test(is_boolean)\n    app.register_blueprint(bp, url_prefix='/py')\n    assert 'is_boolean' in app.jinja_env.tests.keys()\n    assert app.jinja_env.tests['is_boolean'] == is_boolean\n    assert app.jinja_env.tests['is_boolean'](False),type='function_definition'\nline_star:569,line_end:579|char_star:0,char_end:51"->"test_add_template_test,type='identifier'\nline_star:569,line_end:569|char_star:4,char_end:26";
"(app),type='parameters'\nline_star:569,line_end:569|char_star:26,char_end:31"[shape="box",fillcolor="white",style=filled];
"def test_add_template_test(app):\n    bp = flask.Blueprint('bp', __name__)\n\n    def is_boolean(value):\n        return isinstance(value, bool)\n\n    bp.add_app_template_test(is_boolean)\n    app.register_blueprint(bp, url_prefix='/py')\n    assert 'is_boolean' in app.jinja_env.tests.keys()\n    assert app.jinja_env.tests['is_boolean'] == is_boolean\n    assert app.jinja_env.tests['is_boolean'](False),type='function_definition'\nline_star:569,line_end:579|char_star:0,char_end:51"->"(app),type='parameters'\nline_star:569,line_end:569|char_star:26,char_end:31";
"app,type='identifier'\nline_star:569,line_end:569|char_star:27,char_end:30"[shape="point",fillcolor="#121013",style=filled];
"(app),type='parameters'\nline_star:569,line_end:569|char_star:26,char_end:31"->"app,type='identifier'\nline_star:569,line_end:569|char_star:27,char_end:30";
"type='INFORMATION BLOCK'\nline_star:570,line_end:579|char_star:4,char_end:51"[shape="point",fillcolor="#121013",style=filled];
"def test_add_template_test(app):\n    bp = flask.Blueprint('bp', __name__)\n\n    def is_boolean(value):\n        return isinstance(value, bool)\n\n    bp.add_app_template_test(is_boolean)\n    app.register_blueprint(bp, url_prefix='/py')\n    assert 'is_boolean' in app.jinja_env.tests.keys()\n    assert app.jinja_env.tests['is_boolean'] == is_boolean\n    assert app.jinja_env.tests['is_boolean'](False),type='function_definition'\nline_star:569,line_end:579|char_star:0,char_end:51"->"type='INFORMATION BLOCK'\nline_star:570,line_end:579|char_star:4,char_end:51";
"def is_boolean(value):\n        return isinstance(value, bool),type='function_definition'\nline_star:572,line_end:573|char_star:4,char_end:38"[shape="box",fillcolor="#cee6b4",style=filled];
"type='INFORMATION BLOCK'\nline_star:570,line_end:579|char_star:4,char_end:51"->"def is_boolean(value):\n        return isinstance(value, bool),type='function_definition'\nline_star:572,line_end:573|char_star:4,char_end:38";
"is_boolean,type='identifier'\nline_star:572,line_end:572|char_star:8,char_end:18"[shape="point",fillcolor="#121013",style=filled];
"def is_boolean(value):\n        return isinstance(value, bool),type='function_definition'\nline_star:572,line_end:573|char_star:4,char_end:38"->"is_boolean,type='identifier'\nline_star:572,line_end:572|char_star:8,char_end:18";
"(value),type='parameters'\nline_star:572,line_end:572|char_star:18,char_end:25"[shape="box",fillcolor="white",style=filled];
"def is_boolean(value):\n        return isinstance(value, bool),type='function_definition'\nline_star:572,line_end:573|char_star:4,char_end:38"->"(value),type='parameters'\nline_star:572,line_end:572|char_star:18,char_end:25";
"value,type='identifier'\nline_star:572,line_end:572|char_star:19,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"(value),type='parameters'\nline_star:572,line_end:572|char_star:18,char_end:25"->"value,type='identifier'\nline_star:572,line_end:572|char_star:19,char_end:24";
"type='INFORMATION BLOCK'\nline_star:573,line_end:573|char_star:8,char_end:38"[shape="point",fillcolor="#121013",style=filled];
"def is_boolean(value):\n        return isinstance(value, bool),type='function_definition'\nline_star:572,line_end:573|char_star:4,char_end:38"->"type='INFORMATION BLOCK'\nline_star:573,line_end:573|char_star:8,char_end:38";
"return isinstance(value, bool),type='return_statement'\nline_star:573,line_end:573|char_star:8,char_end:38"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:573,line_end:573|char_star:8,char_end:38"->"return isinstance(value, bool),type='return_statement'\nline_star:573,line_end:573|char_star:8,char_end:38";
"assert 'is_boolean' in app.jinja_env.tests.keys(),type='assert_statement'\nline_star:577,line_end:577|char_star:4,char_end:53"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:570,line_end:579|char_star:4,char_end:51"->"assert 'is_boolean' in app.jinja_env.tests.keys(),type='assert_statement'\nline_star:577,line_end:577|char_star:4,char_end:53";
"'is_boolean' in app.jinja_env.tests.keys(),type='comparison_operator'\nline_star:577,line_end:577|char_star:11,char_end:53"[shape="box",fillcolor="white",style=filled];
"assert 'is_boolean' in app.jinja_env.tests.keys(),type='assert_statement'\nline_star:577,line_end:577|char_star:4,char_end:53"->"'is_boolean' in app.jinja_env.tests.keys(),type='comparison_operator'\nline_star:577,line_end:577|char_star:11,char_end:53";
"app.jinja_env.tests.keys(),type='call'\nline_star:577,line_end:577|char_star:27,char_end:53"[shape="box",fillcolor="white",style=filled];
"'is_boolean' in app.jinja_env.tests.keys(),type='comparison_operator'\nline_star:577,line_end:577|char_star:11,char_end:53"->"app.jinja_env.tests.keys(),type='call'\nline_star:577,line_end:577|char_star:27,char_end:53";
"app.jinja_env.tests.keys,type='attribute'\nline_star:577,line_end:577|char_star:27,char_end:51"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.tests.keys(),type='call'\nline_star:577,line_end:577|char_star:27,char_end:53"->"app.jinja_env.tests.keys,type='attribute'\nline_star:577,line_end:577|char_star:27,char_end:51";
"app.jinja_env.tests,type='attribute'\nline_star:577,line_end:577|char_star:27,char_end:46"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.tests.keys,type='attribute'\nline_star:577,line_end:577|char_star:27,char_end:51"->"app.jinja_env.tests,type='attribute'\nline_star:577,line_end:577|char_star:27,char_end:46";
"app.jinja_env,type='attribute'\nline_star:577,line_end:577|char_star:27,char_end:40"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.tests,type='attribute'\nline_star:577,line_end:577|char_star:27,char_end:46"->"app.jinja_env,type='attribute'\nline_star:577,line_end:577|char_star:27,char_end:40";
"app,type='identifier'\nline_star:577,line_end:577|char_star:27,char_end:30"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env,type='attribute'\nline_star:577,line_end:577|char_star:27,char_end:40"->"app,type='identifier'\nline_star:577,line_end:577|char_star:27,char_end:30";
"jinja_env,type='identifier'\nline_star:577,line_end:577|char_star:31,char_end:40"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env,type='attribute'\nline_star:577,line_end:577|char_star:27,char_end:40"->"jinja_env,type='identifier'\nline_star:577,line_end:577|char_star:31,char_end:40";
"tests,type='identifier'\nline_star:577,line_end:577|char_star:41,char_end:46"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env.tests,type='attribute'\nline_star:577,line_end:577|char_star:27,char_end:46"->"tests,type='identifier'\nline_star:577,line_end:577|char_star:41,char_end:46";
"keys,type='identifier'\nline_star:577,line_end:577|char_star:47,char_end:51"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env.tests.keys,type='attribute'\nline_star:577,line_end:577|char_star:27,char_end:51"->"keys,type='identifier'\nline_star:577,line_end:577|char_star:47,char_end:51";
"assert app.jinja_env.tests['is_boolean'] == is_boolean,type='assert_statement'\nline_star:578,line_end:578|char_star:4,char_end:58"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:570,line_end:579|char_star:4,char_end:51"->"assert app.jinja_env.tests['is_boolean'] == is_boolean,type='assert_statement'\nline_star:578,line_end:578|char_star:4,char_end:58";
"app.jinja_env.tests['is_boolean'] == is_boolean,type='comparison_operator'\nline_star:578,line_end:578|char_star:11,char_end:58"[shape="box",fillcolor="white",style=filled];
"assert app.jinja_env.tests['is_boolean'] == is_boolean,type='assert_statement'\nline_star:578,line_end:578|char_star:4,char_end:58"->"app.jinja_env.tests['is_boolean'] == is_boolean,type='comparison_operator'\nline_star:578,line_end:578|char_star:11,char_end:58";
"app.jinja_env.tests['is_boolean'],type='subscript'\nline_star:578,line_end:578|char_star:11,char_end:44"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.tests['is_boolean'] == is_boolean,type='comparison_operator'\nline_star:578,line_end:578|char_star:11,char_end:58"->"app.jinja_env.tests['is_boolean'],type='subscript'\nline_star:578,line_end:578|char_star:11,char_end:44";
"app.jinja_env.tests,type='attribute'\nline_star:578,line_end:578|char_star:11,char_end:30"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.tests['is_boolean'],type='subscript'\nline_star:578,line_end:578|char_star:11,char_end:44"->"app.jinja_env.tests,type='attribute'\nline_star:578,line_end:578|char_star:11,char_end:30";
"app.jinja_env,type='attribute'\nline_star:578,line_end:578|char_star:11,char_end:24"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.tests,type='attribute'\nline_star:578,line_end:578|char_star:11,char_end:30"->"app.jinja_env,type='attribute'\nline_star:578,line_end:578|char_star:11,char_end:24";
"app,type='identifier'\nline_star:578,line_end:578|char_star:11,char_end:14"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env,type='attribute'\nline_star:578,line_end:578|char_star:11,char_end:24"->"app,type='identifier'\nline_star:578,line_end:578|char_star:11,char_end:14";
"jinja_env,type='identifier'\nline_star:578,line_end:578|char_star:15,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env,type='attribute'\nline_star:578,line_end:578|char_star:11,char_end:24"->"jinja_env,type='identifier'\nline_star:578,line_end:578|char_star:15,char_end:24";
"tests,type='identifier'\nline_star:578,line_end:578|char_star:25,char_end:30"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env.tests,type='attribute'\nline_star:578,line_end:578|char_star:11,char_end:30"->"tests,type='identifier'\nline_star:578,line_end:578|char_star:25,char_end:30";
"is_boolean,type='identifier'\nline_star:578,line_end:578|char_star:48,char_end:58"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env.tests['is_boolean'] == is_boolean,type='comparison_operator'\nline_star:578,line_end:578|char_star:11,char_end:58"->"is_boolean,type='identifier'\nline_star:578,line_end:578|char_star:48,char_end:58";
"assert app.jinja_env.tests['is_boolean'](False),type='assert_statement'\nline_star:579,line_end:579|char_star:4,char_end:51"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:570,line_end:579|char_star:4,char_end:51"->"assert app.jinja_env.tests['is_boolean'](False),type='assert_statement'\nline_star:579,line_end:579|char_star:4,char_end:51";
"app.jinja_env.tests['is_boolean'](False),type='call'\nline_star:579,line_end:579|char_star:11,char_end:51"[shape="box",fillcolor="white",style=filled];
"assert app.jinja_env.tests['is_boolean'](False),type='assert_statement'\nline_star:579,line_end:579|char_star:4,char_end:51"->"app.jinja_env.tests['is_boolean'](False),type='call'\nline_star:579,line_end:579|char_star:11,char_end:51";
"app.jinja_env.tests['is_boolean'],type='subscript'\nline_star:579,line_end:579|char_star:11,char_end:44"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.tests['is_boolean'](False),type='call'\nline_star:579,line_end:579|char_star:11,char_end:51"->"app.jinja_env.tests['is_boolean'],type='subscript'\nline_star:579,line_end:579|char_star:11,char_end:44";
"app.jinja_env.tests,type='attribute'\nline_star:579,line_end:579|char_star:11,char_end:30"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.tests['is_boolean'],type='subscript'\nline_star:579,line_end:579|char_star:11,char_end:44"->"app.jinja_env.tests,type='attribute'\nline_star:579,line_end:579|char_star:11,char_end:30";
"app.jinja_env,type='attribute'\nline_star:579,line_end:579|char_star:11,char_end:24"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.tests,type='attribute'\nline_star:579,line_end:579|char_star:11,char_end:30"->"app.jinja_env,type='attribute'\nline_star:579,line_end:579|char_star:11,char_end:24";
"app,type='identifier'\nline_star:579,line_end:579|char_star:11,char_end:14"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env,type='attribute'\nline_star:579,line_end:579|char_star:11,char_end:24"->"app,type='identifier'\nline_star:579,line_end:579|char_star:11,char_end:14";
"jinja_env,type='identifier'\nline_star:579,line_end:579|char_star:15,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env,type='attribute'\nline_star:579,line_end:579|char_star:11,char_end:24"->"jinja_env,type='identifier'\nline_star:579,line_end:579|char_star:15,char_end:24";
"tests,type='identifier'\nline_star:579,line_end:579|char_star:25,char_end:30"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env.tests,type='attribute'\nline_star:579,line_end:579|char_star:11,char_end:30"->"tests,type='identifier'\nline_star:579,line_end:579|char_star:25,char_end:30";
"(False),type='argument_list'\nline_star:579,line_end:579|char_star:44,char_end:51"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.tests['is_boolean'](False),type='call'\nline_star:579,line_end:579|char_star:11,char_end:51"->"(False),type='argument_list'\nline_star:579,line_end:579|char_star:44,char_end:51";
"def test_template_test_with_name(app):\n    bp = flask.Blueprint('bp', __name__)\n\n    @bp.app_template_test('boolean')\n    def is_boolean(value):\n        return isinstance(value, bool)\n\n    app.register_blueprint(bp, url_prefix='/py')\n    assert 'boolean' in app.jinja_env.tests.keys()\n    assert app.jinja_env.tests['boolean'] == is_boolean\n    assert app.jinja_env.tests['boolean'](False),type='function_definition'\nline_star:582,line_end:592|char_star:0,char_end:48"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_template_test_with_name(app):\n    bp = flask.Blueprint('bp', __name__)\n\n    @bp.app_template_test('boolean')\n    def is_boolean(value):\n        return isinstance(value, bool)\n\n    app.register_blueprint(bp, url_prefix='/py')\n    assert 'boolean' in app.jinja_env.tests.keys()\n    assert app.jinja_env.tests['boolean'] == is_boolean\n    assert app.jinja_env.tests['boolean'](False),type='function_definition'\nline_star:582,line_end:592|char_star:0,char_end:48";
"test_template_test_with_name,type='identifier'\nline_star:582,line_end:582|char_star:4,char_end:32"[shape="point",fillcolor="#121013",style=filled];
"def test_template_test_with_name(app):\n    bp = flask.Blueprint('bp', __name__)\n\n    @bp.app_template_test('boolean')\n    def is_boolean(value):\n        return isinstance(value, bool)\n\n    app.register_blueprint(bp, url_prefix='/py')\n    assert 'boolean' in app.jinja_env.tests.keys()\n    assert app.jinja_env.tests['boolean'] == is_boolean\n    assert app.jinja_env.tests['boolean'](False),type='function_definition'\nline_star:582,line_end:592|char_star:0,char_end:48"->"test_template_test_with_name,type='identifier'\nline_star:582,line_end:582|char_star:4,char_end:32";
"(app),type='parameters'\nline_star:582,line_end:582|char_star:32,char_end:37"[shape="box",fillcolor="white",style=filled];
"def test_template_test_with_name(app):\n    bp = flask.Blueprint('bp', __name__)\n\n    @bp.app_template_test('boolean')\n    def is_boolean(value):\n        return isinstance(value, bool)\n\n    app.register_blueprint(bp, url_prefix='/py')\n    assert 'boolean' in app.jinja_env.tests.keys()\n    assert app.jinja_env.tests['boolean'] == is_boolean\n    assert app.jinja_env.tests['boolean'](False),type='function_definition'\nline_star:582,line_end:592|char_star:0,char_end:48"->"(app),type='parameters'\nline_star:582,line_end:582|char_star:32,char_end:37";
"app,type='identifier'\nline_star:582,line_end:582|char_star:33,char_end:36"[shape="point",fillcolor="#121013",style=filled];
"(app),type='parameters'\nline_star:582,line_end:582|char_star:32,char_end:37"->"app,type='identifier'\nline_star:582,line_end:582|char_star:33,char_end:36";
"type='INFORMATION BLOCK'\nline_star:583,line_end:592|char_star:4,char_end:48"[shape="point",fillcolor="#121013",style=filled];
"def test_template_test_with_name(app):\n    bp = flask.Blueprint('bp', __name__)\n\n    @bp.app_template_test('boolean')\n    def is_boolean(value):\n        return isinstance(value, bool)\n\n    app.register_blueprint(bp, url_prefix='/py')\n    assert 'boolean' in app.jinja_env.tests.keys()\n    assert app.jinja_env.tests['boolean'] == is_boolean\n    assert app.jinja_env.tests['boolean'](False),type='function_definition'\nline_star:582,line_end:592|char_star:0,char_end:48"->"type='INFORMATION BLOCK'\nline_star:583,line_end:592|char_star:4,char_end:48";
"@bp.app_template_test('boolean')\n    def is_boolean(value):\n        return isinstance(value, bool),type='decorated_definition'\nline_star:585,line_end:587|char_star:4,char_end:38"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:583,line_end:592|char_star:4,char_end:48"->"@bp.app_template_test('boolean')\n    def is_boolean(value):\n        return isinstance(value, bool),type='decorated_definition'\nline_star:585,line_end:587|char_star:4,char_end:38";
"@bp.app_template_test('boolean'),type='decorator'\nline_star:585,line_end:585|char_star:4,char_end:36"[shape="box",fillcolor="white",style=filled];
"@bp.app_template_test('boolean')\n    def is_boolean(value):\n        return isinstance(value, bool),type='decorated_definition'\nline_star:585,line_end:587|char_star:4,char_end:38"->"@bp.app_template_test('boolean'),type='decorator'\nline_star:585,line_end:585|char_star:4,char_end:36";
"def is_boolean(value):\n        return isinstance(value, bool),type='function_definition'\nline_star:586,line_end:587|char_star:4,char_end:38"[shape="box",fillcolor="#cee6b4",style=filled];
"@bp.app_template_test('boolean')\n    def is_boolean(value):\n        return isinstance(value, bool),type='decorated_definition'\nline_star:585,line_end:587|char_star:4,char_end:38"->"def is_boolean(value):\n        return isinstance(value, bool),type='function_definition'\nline_star:586,line_end:587|char_star:4,char_end:38";
"is_boolean,type='identifier'\nline_star:586,line_end:586|char_star:8,char_end:18"[shape="point",fillcolor="#121013",style=filled];
"def is_boolean(value):\n        return isinstance(value, bool),type='function_definition'\nline_star:586,line_end:587|char_star:4,char_end:38"->"is_boolean,type='identifier'\nline_star:586,line_end:586|char_star:8,char_end:18";
"(value),type='parameters'\nline_star:586,line_end:586|char_star:18,char_end:25"[shape="box",fillcolor="white",style=filled];
"def is_boolean(value):\n        return isinstance(value, bool),type='function_definition'\nline_star:586,line_end:587|char_star:4,char_end:38"->"(value),type='parameters'\nline_star:586,line_end:586|char_star:18,char_end:25";
"value,type='identifier'\nline_star:586,line_end:586|char_star:19,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"(value),type='parameters'\nline_star:586,line_end:586|char_star:18,char_end:25"->"value,type='identifier'\nline_star:586,line_end:586|char_star:19,char_end:24";
"type='INFORMATION BLOCK'\nline_star:587,line_end:587|char_star:8,char_end:38"[shape="point",fillcolor="#121013",style=filled];
"def is_boolean(value):\n        return isinstance(value, bool),type='function_definition'\nline_star:586,line_end:587|char_star:4,char_end:38"->"type='INFORMATION BLOCK'\nline_star:587,line_end:587|char_star:8,char_end:38";
"return isinstance(value, bool),type='return_statement'\nline_star:587,line_end:587|char_star:8,char_end:38"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:587,line_end:587|char_star:8,char_end:38"->"return isinstance(value, bool),type='return_statement'\nline_star:587,line_end:587|char_star:8,char_end:38";
"assert 'boolean' in app.jinja_env.tests.keys(),type='assert_statement'\nline_star:590,line_end:590|char_star:4,char_end:50"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:583,line_end:592|char_star:4,char_end:48"->"assert 'boolean' in app.jinja_env.tests.keys(),type='assert_statement'\nline_star:590,line_end:590|char_star:4,char_end:50";
"'boolean' in app.jinja_env.tests.keys(),type='comparison_operator'\nline_star:590,line_end:590|char_star:11,char_end:50"[shape="box",fillcolor="white",style=filled];
"assert 'boolean' in app.jinja_env.tests.keys(),type='assert_statement'\nline_star:590,line_end:590|char_star:4,char_end:50"->"'boolean' in app.jinja_env.tests.keys(),type='comparison_operator'\nline_star:590,line_end:590|char_star:11,char_end:50";
"app.jinja_env.tests.keys(),type='call'\nline_star:590,line_end:590|char_star:24,char_end:50"[shape="box",fillcolor="white",style=filled];
"'boolean' in app.jinja_env.tests.keys(),type='comparison_operator'\nline_star:590,line_end:590|char_star:11,char_end:50"->"app.jinja_env.tests.keys(),type='call'\nline_star:590,line_end:590|char_star:24,char_end:50";
"app.jinja_env.tests.keys,type='attribute'\nline_star:590,line_end:590|char_star:24,char_end:48"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.tests.keys(),type='call'\nline_star:590,line_end:590|char_star:24,char_end:50"->"app.jinja_env.tests.keys,type='attribute'\nline_star:590,line_end:590|char_star:24,char_end:48";
"app.jinja_env.tests,type='attribute'\nline_star:590,line_end:590|char_star:24,char_end:43"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.tests.keys,type='attribute'\nline_star:590,line_end:590|char_star:24,char_end:48"->"app.jinja_env.tests,type='attribute'\nline_star:590,line_end:590|char_star:24,char_end:43";
"app.jinja_env,type='attribute'\nline_star:590,line_end:590|char_star:24,char_end:37"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.tests,type='attribute'\nline_star:590,line_end:590|char_star:24,char_end:43"->"app.jinja_env,type='attribute'\nline_star:590,line_end:590|char_star:24,char_end:37";
"app,type='identifier'\nline_star:590,line_end:590|char_star:24,char_end:27"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env,type='attribute'\nline_star:590,line_end:590|char_star:24,char_end:37"->"app,type='identifier'\nline_star:590,line_end:590|char_star:24,char_end:27";
"jinja_env,type='identifier'\nline_star:590,line_end:590|char_star:28,char_end:37"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env,type='attribute'\nline_star:590,line_end:590|char_star:24,char_end:37"->"jinja_env,type='identifier'\nline_star:590,line_end:590|char_star:28,char_end:37";
"tests,type='identifier'\nline_star:590,line_end:590|char_star:38,char_end:43"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env.tests,type='attribute'\nline_star:590,line_end:590|char_star:24,char_end:43"->"tests,type='identifier'\nline_star:590,line_end:590|char_star:38,char_end:43";
"keys,type='identifier'\nline_star:590,line_end:590|char_star:44,char_end:48"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env.tests.keys,type='attribute'\nline_star:590,line_end:590|char_star:24,char_end:48"->"keys,type='identifier'\nline_star:590,line_end:590|char_star:44,char_end:48";
"assert app.jinja_env.tests['boolean'] == is_boolean,type='assert_statement'\nline_star:591,line_end:591|char_star:4,char_end:55"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:583,line_end:592|char_star:4,char_end:48"->"assert app.jinja_env.tests['boolean'] == is_boolean,type='assert_statement'\nline_star:591,line_end:591|char_star:4,char_end:55";
"app.jinja_env.tests['boolean'] == is_boolean,type='comparison_operator'\nline_star:591,line_end:591|char_star:11,char_end:55"[shape="box",fillcolor="white",style=filled];
"assert app.jinja_env.tests['boolean'] == is_boolean,type='assert_statement'\nline_star:591,line_end:591|char_star:4,char_end:55"->"app.jinja_env.tests['boolean'] == is_boolean,type='comparison_operator'\nline_star:591,line_end:591|char_star:11,char_end:55";
"app.jinja_env.tests['boolean'],type='subscript'\nline_star:591,line_end:591|char_star:11,char_end:41"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.tests['boolean'] == is_boolean,type='comparison_operator'\nline_star:591,line_end:591|char_star:11,char_end:55"->"app.jinja_env.tests['boolean'],type='subscript'\nline_star:591,line_end:591|char_star:11,char_end:41";
"app.jinja_env.tests,type='attribute'\nline_star:591,line_end:591|char_star:11,char_end:30"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.tests['boolean'],type='subscript'\nline_star:591,line_end:591|char_star:11,char_end:41"->"app.jinja_env.tests,type='attribute'\nline_star:591,line_end:591|char_star:11,char_end:30";
"app.jinja_env,type='attribute'\nline_star:591,line_end:591|char_star:11,char_end:24"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.tests,type='attribute'\nline_star:591,line_end:591|char_star:11,char_end:30"->"app.jinja_env,type='attribute'\nline_star:591,line_end:591|char_star:11,char_end:24";
"app,type='identifier'\nline_star:591,line_end:591|char_star:11,char_end:14"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env,type='attribute'\nline_star:591,line_end:591|char_star:11,char_end:24"->"app,type='identifier'\nline_star:591,line_end:591|char_star:11,char_end:14";
"jinja_env,type='identifier'\nline_star:591,line_end:591|char_star:15,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env,type='attribute'\nline_star:591,line_end:591|char_star:11,char_end:24"->"jinja_env,type='identifier'\nline_star:591,line_end:591|char_star:15,char_end:24";
"tests,type='identifier'\nline_star:591,line_end:591|char_star:25,char_end:30"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env.tests,type='attribute'\nline_star:591,line_end:591|char_star:11,char_end:30"->"tests,type='identifier'\nline_star:591,line_end:591|char_star:25,char_end:30";
"is_boolean,type='identifier'\nline_star:591,line_end:591|char_star:45,char_end:55"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env.tests['boolean'] == is_boolean,type='comparison_operator'\nline_star:591,line_end:591|char_star:11,char_end:55"->"is_boolean,type='identifier'\nline_star:591,line_end:591|char_star:45,char_end:55";
"assert app.jinja_env.tests['boolean'](False),type='assert_statement'\nline_star:592,line_end:592|char_star:4,char_end:48"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:583,line_end:592|char_star:4,char_end:48"->"assert app.jinja_env.tests['boolean'](False),type='assert_statement'\nline_star:592,line_end:592|char_star:4,char_end:48";
"app.jinja_env.tests['boolean'](False),type='call'\nline_star:592,line_end:592|char_star:11,char_end:48"[shape="box",fillcolor="white",style=filled];
"assert app.jinja_env.tests['boolean'](False),type='assert_statement'\nline_star:592,line_end:592|char_star:4,char_end:48"->"app.jinja_env.tests['boolean'](False),type='call'\nline_star:592,line_end:592|char_star:11,char_end:48";
"app.jinja_env.tests['boolean'],type='subscript'\nline_star:592,line_end:592|char_star:11,char_end:41"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.tests['boolean'](False),type='call'\nline_star:592,line_end:592|char_star:11,char_end:48"->"app.jinja_env.tests['boolean'],type='subscript'\nline_star:592,line_end:592|char_star:11,char_end:41";
"app.jinja_env.tests,type='attribute'\nline_star:592,line_end:592|char_star:11,char_end:30"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.tests['boolean'],type='subscript'\nline_star:592,line_end:592|char_star:11,char_end:41"->"app.jinja_env.tests,type='attribute'\nline_star:592,line_end:592|char_star:11,char_end:30";
"app.jinja_env,type='attribute'\nline_star:592,line_end:592|char_star:11,char_end:24"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.tests,type='attribute'\nline_star:592,line_end:592|char_star:11,char_end:30"->"app.jinja_env,type='attribute'\nline_star:592,line_end:592|char_star:11,char_end:24";
"app,type='identifier'\nline_star:592,line_end:592|char_star:11,char_end:14"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env,type='attribute'\nline_star:592,line_end:592|char_star:11,char_end:24"->"app,type='identifier'\nline_star:592,line_end:592|char_star:11,char_end:14";
"jinja_env,type='identifier'\nline_star:592,line_end:592|char_star:15,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env,type='attribute'\nline_star:592,line_end:592|char_star:11,char_end:24"->"jinja_env,type='identifier'\nline_star:592,line_end:592|char_star:15,char_end:24";
"tests,type='identifier'\nline_star:592,line_end:592|char_star:25,char_end:30"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env.tests,type='attribute'\nline_star:592,line_end:592|char_star:11,char_end:30"->"tests,type='identifier'\nline_star:592,line_end:592|char_star:25,char_end:30";
"(False),type='argument_list'\nline_star:592,line_end:592|char_star:41,char_end:48"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.tests['boolean'](False),type='call'\nline_star:592,line_end:592|char_star:11,char_end:48"->"(False),type='argument_list'\nline_star:592,line_end:592|char_star:41,char_end:48";
"def test_add_template_test_with_name(app):\n    bp = flask.Blueprint('bp', __name__)\n\n    def is_boolean(value):\n        return isinstance(value, bool)\n\n    bp.add_app_template_test(is_boolean, 'boolean')\n    app.register_blueprint(bp, url_prefix='/py')\n    assert 'boolean' in app.jinja_env.tests.keys()\n    assert app.jinja_env.tests['boolean'] == is_boolean\n    assert app.jinja_env.tests['boolean'](False),type='function_definition'\nline_star:595,line_end:605|char_star:0,char_end:48"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_add_template_test_with_name(app):\n    bp = flask.Blueprint('bp', __name__)\n\n    def is_boolean(value):\n        return isinstance(value, bool)\n\n    bp.add_app_template_test(is_boolean, 'boolean')\n    app.register_blueprint(bp, url_prefix='/py')\n    assert 'boolean' in app.jinja_env.tests.keys()\n    assert app.jinja_env.tests['boolean'] == is_boolean\n    assert app.jinja_env.tests['boolean'](False),type='function_definition'\nline_star:595,line_end:605|char_star:0,char_end:48";
"test_add_template_test_with_name,type='identifier'\nline_star:595,line_end:595|char_star:4,char_end:36"[shape="point",fillcolor="#121013",style=filled];
"def test_add_template_test_with_name(app):\n    bp = flask.Blueprint('bp', __name__)\n\n    def is_boolean(value):\n        return isinstance(value, bool)\n\n    bp.add_app_template_test(is_boolean, 'boolean')\n    app.register_blueprint(bp, url_prefix='/py')\n    assert 'boolean' in app.jinja_env.tests.keys()\n    assert app.jinja_env.tests['boolean'] == is_boolean\n    assert app.jinja_env.tests['boolean'](False),type='function_definition'\nline_star:595,line_end:605|char_star:0,char_end:48"->"test_add_template_test_with_name,type='identifier'\nline_star:595,line_end:595|char_star:4,char_end:36";
"(app),type='parameters'\nline_star:595,line_end:595|char_star:36,char_end:41"[shape="box",fillcolor="white",style=filled];
"def test_add_template_test_with_name(app):\n    bp = flask.Blueprint('bp', __name__)\n\n    def is_boolean(value):\n        return isinstance(value, bool)\n\n    bp.add_app_template_test(is_boolean, 'boolean')\n    app.register_blueprint(bp, url_prefix='/py')\n    assert 'boolean' in app.jinja_env.tests.keys()\n    assert app.jinja_env.tests['boolean'] == is_boolean\n    assert app.jinja_env.tests['boolean'](False),type='function_definition'\nline_star:595,line_end:605|char_star:0,char_end:48"->"(app),type='parameters'\nline_star:595,line_end:595|char_star:36,char_end:41";
"app,type='identifier'\nline_star:595,line_end:595|char_star:37,char_end:40"[shape="point",fillcolor="#121013",style=filled];
"(app),type='parameters'\nline_star:595,line_end:595|char_star:36,char_end:41"->"app,type='identifier'\nline_star:595,line_end:595|char_star:37,char_end:40";
"type='INFORMATION BLOCK'\nline_star:596,line_end:605|char_star:4,char_end:48"[shape="point",fillcolor="#121013",style=filled];
"def test_add_template_test_with_name(app):\n    bp = flask.Blueprint('bp', __name__)\n\n    def is_boolean(value):\n        return isinstance(value, bool)\n\n    bp.add_app_template_test(is_boolean, 'boolean')\n    app.register_blueprint(bp, url_prefix='/py')\n    assert 'boolean' in app.jinja_env.tests.keys()\n    assert app.jinja_env.tests['boolean'] == is_boolean\n    assert app.jinja_env.tests['boolean'](False),type='function_definition'\nline_star:595,line_end:605|char_star:0,char_end:48"->"type='INFORMATION BLOCK'\nline_star:596,line_end:605|char_star:4,char_end:48";
"def is_boolean(value):\n        return isinstance(value, bool),type='function_definition'\nline_star:598,line_end:599|char_star:4,char_end:38"[shape="box",fillcolor="#cee6b4",style=filled];
"type='INFORMATION BLOCK'\nline_star:596,line_end:605|char_star:4,char_end:48"->"def is_boolean(value):\n        return isinstance(value, bool),type='function_definition'\nline_star:598,line_end:599|char_star:4,char_end:38";
"is_boolean,type='identifier'\nline_star:598,line_end:598|char_star:8,char_end:18"[shape="point",fillcolor="#121013",style=filled];
"def is_boolean(value):\n        return isinstance(value, bool),type='function_definition'\nline_star:598,line_end:599|char_star:4,char_end:38"->"is_boolean,type='identifier'\nline_star:598,line_end:598|char_star:8,char_end:18";
"(value),type='parameters'\nline_star:598,line_end:598|char_star:18,char_end:25"[shape="box",fillcolor="white",style=filled];
"def is_boolean(value):\n        return isinstance(value, bool),type='function_definition'\nline_star:598,line_end:599|char_star:4,char_end:38"->"(value),type='parameters'\nline_star:598,line_end:598|char_star:18,char_end:25";
"value,type='identifier'\nline_star:598,line_end:598|char_star:19,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"(value),type='parameters'\nline_star:598,line_end:598|char_star:18,char_end:25"->"value,type='identifier'\nline_star:598,line_end:598|char_star:19,char_end:24";
"type='INFORMATION BLOCK'\nline_star:599,line_end:599|char_star:8,char_end:38"[shape="point",fillcolor="#121013",style=filled];
"def is_boolean(value):\n        return isinstance(value, bool),type='function_definition'\nline_star:598,line_end:599|char_star:4,char_end:38"->"type='INFORMATION BLOCK'\nline_star:599,line_end:599|char_star:8,char_end:38";
"return isinstance(value, bool),type='return_statement'\nline_star:599,line_end:599|char_star:8,char_end:38"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:599,line_end:599|char_star:8,char_end:38"->"return isinstance(value, bool),type='return_statement'\nline_star:599,line_end:599|char_star:8,char_end:38";
"assert 'boolean' in app.jinja_env.tests.keys(),type='assert_statement'\nline_star:603,line_end:603|char_star:4,char_end:50"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:596,line_end:605|char_star:4,char_end:48"->"assert 'boolean' in app.jinja_env.tests.keys(),type='assert_statement'\nline_star:603,line_end:603|char_star:4,char_end:50";
"'boolean' in app.jinja_env.tests.keys(),type='comparison_operator'\nline_star:603,line_end:603|char_star:11,char_end:50"[shape="box",fillcolor="white",style=filled];
"assert 'boolean' in app.jinja_env.tests.keys(),type='assert_statement'\nline_star:603,line_end:603|char_star:4,char_end:50"->"'boolean' in app.jinja_env.tests.keys(),type='comparison_operator'\nline_star:603,line_end:603|char_star:11,char_end:50";
"app.jinja_env.tests.keys(),type='call'\nline_star:603,line_end:603|char_star:24,char_end:50"[shape="box",fillcolor="white",style=filled];
"'boolean' in app.jinja_env.tests.keys(),type='comparison_operator'\nline_star:603,line_end:603|char_star:11,char_end:50"->"app.jinja_env.tests.keys(),type='call'\nline_star:603,line_end:603|char_star:24,char_end:50";
"app.jinja_env.tests.keys,type='attribute'\nline_star:603,line_end:603|char_star:24,char_end:48"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.tests.keys(),type='call'\nline_star:603,line_end:603|char_star:24,char_end:50"->"app.jinja_env.tests.keys,type='attribute'\nline_star:603,line_end:603|char_star:24,char_end:48";
"app.jinja_env.tests,type='attribute'\nline_star:603,line_end:603|char_star:24,char_end:43"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.tests.keys,type='attribute'\nline_star:603,line_end:603|char_star:24,char_end:48"->"app.jinja_env.tests,type='attribute'\nline_star:603,line_end:603|char_star:24,char_end:43";
"app.jinja_env,type='attribute'\nline_star:603,line_end:603|char_star:24,char_end:37"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.tests,type='attribute'\nline_star:603,line_end:603|char_star:24,char_end:43"->"app.jinja_env,type='attribute'\nline_star:603,line_end:603|char_star:24,char_end:37";
"app,type='identifier'\nline_star:603,line_end:603|char_star:24,char_end:27"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env,type='attribute'\nline_star:603,line_end:603|char_star:24,char_end:37"->"app,type='identifier'\nline_star:603,line_end:603|char_star:24,char_end:27";
"jinja_env,type='identifier'\nline_star:603,line_end:603|char_star:28,char_end:37"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env,type='attribute'\nline_star:603,line_end:603|char_star:24,char_end:37"->"jinja_env,type='identifier'\nline_star:603,line_end:603|char_star:28,char_end:37";
"tests,type='identifier'\nline_star:603,line_end:603|char_star:38,char_end:43"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env.tests,type='attribute'\nline_star:603,line_end:603|char_star:24,char_end:43"->"tests,type='identifier'\nline_star:603,line_end:603|char_star:38,char_end:43";
"keys,type='identifier'\nline_star:603,line_end:603|char_star:44,char_end:48"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env.tests.keys,type='attribute'\nline_star:603,line_end:603|char_star:24,char_end:48"->"keys,type='identifier'\nline_star:603,line_end:603|char_star:44,char_end:48";
"assert app.jinja_env.tests['boolean'] == is_boolean,type='assert_statement'\nline_star:604,line_end:604|char_star:4,char_end:55"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:596,line_end:605|char_star:4,char_end:48"->"assert app.jinja_env.tests['boolean'] == is_boolean,type='assert_statement'\nline_star:604,line_end:604|char_star:4,char_end:55";
"app.jinja_env.tests['boolean'] == is_boolean,type='comparison_operator'\nline_star:604,line_end:604|char_star:11,char_end:55"[shape="box",fillcolor="white",style=filled];
"assert app.jinja_env.tests['boolean'] == is_boolean,type='assert_statement'\nline_star:604,line_end:604|char_star:4,char_end:55"->"app.jinja_env.tests['boolean'] == is_boolean,type='comparison_operator'\nline_star:604,line_end:604|char_star:11,char_end:55";
"app.jinja_env.tests['boolean'],type='subscript'\nline_star:604,line_end:604|char_star:11,char_end:41"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.tests['boolean'] == is_boolean,type='comparison_operator'\nline_star:604,line_end:604|char_star:11,char_end:55"->"app.jinja_env.tests['boolean'],type='subscript'\nline_star:604,line_end:604|char_star:11,char_end:41";
"app.jinja_env.tests,type='attribute'\nline_star:604,line_end:604|char_star:11,char_end:30"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.tests['boolean'],type='subscript'\nline_star:604,line_end:604|char_star:11,char_end:41"->"app.jinja_env.tests,type='attribute'\nline_star:604,line_end:604|char_star:11,char_end:30";
"app.jinja_env,type='attribute'\nline_star:604,line_end:604|char_star:11,char_end:24"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.tests,type='attribute'\nline_star:604,line_end:604|char_star:11,char_end:30"->"app.jinja_env,type='attribute'\nline_star:604,line_end:604|char_star:11,char_end:24";
"app,type='identifier'\nline_star:604,line_end:604|char_star:11,char_end:14"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env,type='attribute'\nline_star:604,line_end:604|char_star:11,char_end:24"->"app,type='identifier'\nline_star:604,line_end:604|char_star:11,char_end:14";
"jinja_env,type='identifier'\nline_star:604,line_end:604|char_star:15,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env,type='attribute'\nline_star:604,line_end:604|char_star:11,char_end:24"->"jinja_env,type='identifier'\nline_star:604,line_end:604|char_star:15,char_end:24";
"tests,type='identifier'\nline_star:604,line_end:604|char_star:25,char_end:30"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env.tests,type='attribute'\nline_star:604,line_end:604|char_star:11,char_end:30"->"tests,type='identifier'\nline_star:604,line_end:604|char_star:25,char_end:30";
"is_boolean,type='identifier'\nline_star:604,line_end:604|char_star:45,char_end:55"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env.tests['boolean'] == is_boolean,type='comparison_operator'\nline_star:604,line_end:604|char_star:11,char_end:55"->"is_boolean,type='identifier'\nline_star:604,line_end:604|char_star:45,char_end:55";
"assert app.jinja_env.tests['boolean'](False),type='assert_statement'\nline_star:605,line_end:605|char_star:4,char_end:48"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:596,line_end:605|char_star:4,char_end:48"->"assert app.jinja_env.tests['boolean'](False),type='assert_statement'\nline_star:605,line_end:605|char_star:4,char_end:48";
"app.jinja_env.tests['boolean'](False),type='call'\nline_star:605,line_end:605|char_star:11,char_end:48"[shape="box",fillcolor="white",style=filled];
"assert app.jinja_env.tests['boolean'](False),type='assert_statement'\nline_star:605,line_end:605|char_star:4,char_end:48"->"app.jinja_env.tests['boolean'](False),type='call'\nline_star:605,line_end:605|char_star:11,char_end:48";
"app.jinja_env.tests['boolean'],type='subscript'\nline_star:605,line_end:605|char_star:11,char_end:41"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.tests['boolean'](False),type='call'\nline_star:605,line_end:605|char_star:11,char_end:48"->"app.jinja_env.tests['boolean'],type='subscript'\nline_star:605,line_end:605|char_star:11,char_end:41";
"app.jinja_env.tests,type='attribute'\nline_star:605,line_end:605|char_star:11,char_end:30"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.tests['boolean'],type='subscript'\nline_star:605,line_end:605|char_star:11,char_end:41"->"app.jinja_env.tests,type='attribute'\nline_star:605,line_end:605|char_star:11,char_end:30";
"app.jinja_env,type='attribute'\nline_star:605,line_end:605|char_star:11,char_end:24"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.tests,type='attribute'\nline_star:605,line_end:605|char_star:11,char_end:30"->"app.jinja_env,type='attribute'\nline_star:605,line_end:605|char_star:11,char_end:24";
"app,type='identifier'\nline_star:605,line_end:605|char_star:11,char_end:14"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env,type='attribute'\nline_star:605,line_end:605|char_star:11,char_end:24"->"app,type='identifier'\nline_star:605,line_end:605|char_star:11,char_end:14";
"jinja_env,type='identifier'\nline_star:605,line_end:605|char_star:15,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env,type='attribute'\nline_star:605,line_end:605|char_star:11,char_end:24"->"jinja_env,type='identifier'\nline_star:605,line_end:605|char_star:15,char_end:24";
"tests,type='identifier'\nline_star:605,line_end:605|char_star:25,char_end:30"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env.tests,type='attribute'\nline_star:605,line_end:605|char_star:11,char_end:30"->"tests,type='identifier'\nline_star:605,line_end:605|char_star:25,char_end:30";
"(False),type='argument_list'\nline_star:605,line_end:605|char_star:41,char_end:48"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.tests['boolean'](False),type='call'\nline_star:605,line_end:605|char_star:11,char_end:48"->"(False),type='argument_list'\nline_star:605,line_end:605|char_star:41,char_end:48";
"def test_template_test_with_template(app, client):\n    bp = flask.Blueprint('bp', __name__)\n\n    @bp.app_template_test()\n    def boolean(value):\n        return isinstance(value, bool)\n\n    app.register_blueprint(bp, url_prefix='/py')\n\n    @app.route('/')\n    def index():\n        return flask.render_template('template_test.html', value=False)\n\n    rv = client.get('/')\n    assert b'Success!' in rv.data,type='function_definition'\nline_star:608,line_end:622|char_star:0,char_end:33"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_template_test_with_template(app, client):\n    bp = flask.Blueprint('bp', __name__)\n\n    @bp.app_template_test()\n    def boolean(value):\n        return isinstance(value, bool)\n\n    app.register_blueprint(bp, url_prefix='/py')\n\n    @app.route('/')\n    def index():\n        return flask.render_template('template_test.html', value=False)\n\n    rv = client.get('/')\n    assert b'Success!' in rv.data,type='function_definition'\nline_star:608,line_end:622|char_star:0,char_end:33";
"test_template_test_with_template,type='identifier'\nline_star:608,line_end:608|char_star:4,char_end:36"[shape="point",fillcolor="#121013",style=filled];
"def test_template_test_with_template(app, client):\n    bp = flask.Blueprint('bp', __name__)\n\n    @bp.app_template_test()\n    def boolean(value):\n        return isinstance(value, bool)\n\n    app.register_blueprint(bp, url_prefix='/py')\n\n    @app.route('/')\n    def index():\n        return flask.render_template('template_test.html', value=False)\n\n    rv = client.get('/')\n    assert b'Success!' in rv.data,type='function_definition'\nline_star:608,line_end:622|char_star:0,char_end:33"->"test_template_test_with_template,type='identifier'\nline_star:608,line_end:608|char_star:4,char_end:36";
"(app, client),type='parameters'\nline_star:608,line_end:608|char_star:36,char_end:49"[shape="box",fillcolor="white",style=filled];
"def test_template_test_with_template(app, client):\n    bp = flask.Blueprint('bp', __name__)\n\n    @bp.app_template_test()\n    def boolean(value):\n        return isinstance(value, bool)\n\n    app.register_blueprint(bp, url_prefix='/py')\n\n    @app.route('/')\n    def index():\n        return flask.render_template('template_test.html', value=False)\n\n    rv = client.get('/')\n    assert b'Success!' in rv.data,type='function_definition'\nline_star:608,line_end:622|char_star:0,char_end:33"->"(app, client),type='parameters'\nline_star:608,line_end:608|char_star:36,char_end:49";
"app,type='identifier'\nline_star:608,line_end:608|char_star:37,char_end:40"[shape="point",fillcolor="#121013",style=filled];
"(app, client),type='parameters'\nline_star:608,line_end:608|char_star:36,char_end:49"->"app,type='identifier'\nline_star:608,line_end:608|char_star:37,char_end:40";
"client,type='identifier'\nline_star:608,line_end:608|char_star:42,char_end:48"[shape="point",fillcolor="#121013",style=filled];
"(app, client),type='parameters'\nline_star:608,line_end:608|char_star:36,char_end:49"->"client,type='identifier'\nline_star:608,line_end:608|char_star:42,char_end:48";
"type='INFORMATION BLOCK'\nline_star:609,line_end:622|char_star:4,char_end:33"[shape="point",fillcolor="#121013",style=filled];
"def test_template_test_with_template(app, client):\n    bp = flask.Blueprint('bp', __name__)\n\n    @bp.app_template_test()\n    def boolean(value):\n        return isinstance(value, bool)\n\n    app.register_blueprint(bp, url_prefix='/py')\n\n    @app.route('/')\n    def index():\n        return flask.render_template('template_test.html', value=False)\n\n    rv = client.get('/')\n    assert b'Success!' in rv.data,type='function_definition'\nline_star:608,line_end:622|char_star:0,char_end:33"->"type='INFORMATION BLOCK'\nline_star:609,line_end:622|char_star:4,char_end:33";
"@bp.app_template_test()\n    def boolean(value):\n        return isinstance(value, bool),type='decorated_definition'\nline_star:611,line_end:613|char_star:4,char_end:38"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:609,line_end:622|char_star:4,char_end:33"->"@bp.app_template_test()\n    def boolean(value):\n        return isinstance(value, bool),type='decorated_definition'\nline_star:611,line_end:613|char_star:4,char_end:38";
"@bp.app_template_test(),type='decorator'\nline_star:611,line_end:611|char_star:4,char_end:27"[shape="box",fillcolor="white",style=filled];
"@bp.app_template_test()\n    def boolean(value):\n        return isinstance(value, bool),type='decorated_definition'\nline_star:611,line_end:613|char_star:4,char_end:38"->"@bp.app_template_test(),type='decorator'\nline_star:611,line_end:611|char_star:4,char_end:27";
"def boolean(value):\n        return isinstance(value, bool),type='function_definition'\nline_star:612,line_end:613|char_star:4,char_end:38"[shape="box",fillcolor="#cee6b4",style=filled];
"@bp.app_template_test()\n    def boolean(value):\n        return isinstance(value, bool),type='decorated_definition'\nline_star:611,line_end:613|char_star:4,char_end:38"->"def boolean(value):\n        return isinstance(value, bool),type='function_definition'\nline_star:612,line_end:613|char_star:4,char_end:38";
"boolean,type='identifier'\nline_star:612,line_end:612|char_star:8,char_end:15"[shape="point",fillcolor="#121013",style=filled];
"def boolean(value):\n        return isinstance(value, bool),type='function_definition'\nline_star:612,line_end:613|char_star:4,char_end:38"->"boolean,type='identifier'\nline_star:612,line_end:612|char_star:8,char_end:15";
"(value),type='parameters'\nline_star:612,line_end:612|char_star:15,char_end:22"[shape="box",fillcolor="white",style=filled];
"def boolean(value):\n        return isinstance(value, bool),type='function_definition'\nline_star:612,line_end:613|char_star:4,char_end:38"->"(value),type='parameters'\nline_star:612,line_end:612|char_star:15,char_end:22";
"value,type='identifier'\nline_star:612,line_end:612|char_star:16,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"(value),type='parameters'\nline_star:612,line_end:612|char_star:15,char_end:22"->"value,type='identifier'\nline_star:612,line_end:612|char_star:16,char_end:21";
"type='INFORMATION BLOCK'\nline_star:613,line_end:613|char_star:8,char_end:38"[shape="point",fillcolor="#121013",style=filled];
"def boolean(value):\n        return isinstance(value, bool),type='function_definition'\nline_star:612,line_end:613|char_star:4,char_end:38"->"type='INFORMATION BLOCK'\nline_star:613,line_end:613|char_star:8,char_end:38";
"return isinstance(value, bool),type='return_statement'\nline_star:613,line_end:613|char_star:8,char_end:38"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:613,line_end:613|char_star:8,char_end:38"->"return isinstance(value, bool),type='return_statement'\nline_star:613,line_end:613|char_star:8,char_end:38";
"@app.route('/')\n    def index():\n        return flask.render_template('template_test.html', value=False),type='decorated_definition'\nline_star:617,line_end:619|char_star:4,char_end:71"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:609,line_end:622|char_star:4,char_end:33"->"@app.route('/')\n    def index():\n        return flask.render_template('template_test.html', value=False),type='decorated_definition'\nline_star:617,line_end:619|char_star:4,char_end:71";
"@app.route('/'),type='decorator'\nline_star:617,line_end:617|char_star:4,char_end:19"[shape="box",fillcolor="white",style=filled];
"@app.route('/')\n    def index():\n        return flask.render_template('template_test.html', value=False),type='decorated_definition'\nline_star:617,line_end:619|char_star:4,char_end:71"->"@app.route('/'),type='decorator'\nline_star:617,line_end:617|char_star:4,char_end:19";
"def index():\n        return flask.render_template('template_test.html', value=False),type='function_definition'\nline_star:618,line_end:619|char_star:4,char_end:71"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.route('/')\n    def index():\n        return flask.render_template('template_test.html', value=False),type='decorated_definition'\nline_star:617,line_end:619|char_star:4,char_end:71"->"def index():\n        return flask.render_template('template_test.html', value=False),type='function_definition'\nline_star:618,line_end:619|char_star:4,char_end:71";
"index,type='identifier'\nline_star:618,line_end:618|char_star:8,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"def index():\n        return flask.render_template('template_test.html', value=False),type='function_definition'\nline_star:618,line_end:619|char_star:4,char_end:71"->"index,type='identifier'\nline_star:618,line_end:618|char_star:8,char_end:13";
"type='INFORMATION BLOCK'\nline_star:619,line_end:619|char_star:8,char_end:71"[shape="point",fillcolor="#121013",style=filled];
"def index():\n        return flask.render_template('template_test.html', value=False),type='function_definition'\nline_star:618,line_end:619|char_star:4,char_end:71"->"type='INFORMATION BLOCK'\nline_star:619,line_end:619|char_star:8,char_end:71";
"return flask.render_template('template_test.html', value=False),type='return_statement'\nline_star:619,line_end:619|char_star:8,char_end:71"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:619,line_end:619|char_star:8,char_end:71"->"return flask.render_template('template_test.html', value=False),type='return_statement'\nline_star:619,line_end:619|char_star:8,char_end:71";
"assert b'Success!' in rv.data,type='assert_statement'\nline_star:622,line_end:622|char_star:4,char_end:33"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:609,line_end:622|char_star:4,char_end:33"->"assert b'Success!' in rv.data,type='assert_statement'\nline_star:622,line_end:622|char_star:4,char_end:33";
"b'Success!' in rv.data,type='comparison_operator'\nline_star:622,line_end:622|char_star:11,char_end:33"[shape="box",fillcolor="white",style=filled];
"assert b'Success!' in rv.data,type='assert_statement'\nline_star:622,line_end:622|char_star:4,char_end:33"->"b'Success!' in rv.data,type='comparison_operator'\nline_star:622,line_end:622|char_star:11,char_end:33";
"rv.data,type='attribute'\nline_star:622,line_end:622|char_star:26,char_end:33"[shape="box",fillcolor="white",style=filled];
"b'Success!' in rv.data,type='comparison_operator'\nline_star:622,line_end:622|char_star:11,char_end:33"->"rv.data,type='attribute'\nline_star:622,line_end:622|char_star:26,char_end:33";
"rv,type='identifier'\nline_star:622,line_end:622|char_star:26,char_end:28"[shape="point",fillcolor="#121013",style=filled];
"rv.data,type='attribute'\nline_star:622,line_end:622|char_star:26,char_end:33"->"rv,type='identifier'\nline_star:622,line_end:622|char_star:26,char_end:28";
"data,type='identifier'\nline_star:622,line_end:622|char_star:29,char_end:33"[shape="point",fillcolor="#121013",style=filled];
"rv.data,type='attribute'\nline_star:622,line_end:622|char_star:26,char_end:33"->"data,type='identifier'\nline_star:622,line_end:622|char_star:29,char_end:33";
"def test_template_test_after_route_with_template(app, client):\n    @app.route('/')\n    def index():\n        return flask.render_template('template_test.html', value=False)\n\n    bp = flask.Blueprint('bp', __name__)\n\n    @bp.app_template_test()\n    def boolean(value):\n        return isinstance(value, bool)\n\n    app.register_blueprint(bp, url_prefix='/py')\n    rv = client.get('/')\n    assert b'Success!' in rv.data,type='function_definition'\nline_star:625,line_end:638|char_star:0,char_end:33"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_template_test_after_route_with_template(app, client):\n    @app.route('/')\n    def index():\n        return flask.render_template('template_test.html', value=False)\n\n    bp = flask.Blueprint('bp', __name__)\n\n    @bp.app_template_test()\n    def boolean(value):\n        return isinstance(value, bool)\n\n    app.register_blueprint(bp, url_prefix='/py')\n    rv = client.get('/')\n    assert b'Success!' in rv.data,type='function_definition'\nline_star:625,line_end:638|char_star:0,char_end:33";
"test_template_test_after_route_with_template,type='identifier'\nline_star:625,line_end:625|char_star:4,char_end:48"[shape="point",fillcolor="#121013",style=filled];
"def test_template_test_after_route_with_template(app, client):\n    @app.route('/')\n    def index():\n        return flask.render_template('template_test.html', value=False)\n\n    bp = flask.Blueprint('bp', __name__)\n\n    @bp.app_template_test()\n    def boolean(value):\n        return isinstance(value, bool)\n\n    app.register_blueprint(bp, url_prefix='/py')\n    rv = client.get('/')\n    assert b'Success!' in rv.data,type='function_definition'\nline_star:625,line_end:638|char_star:0,char_end:33"->"test_template_test_after_route_with_template,type='identifier'\nline_star:625,line_end:625|char_star:4,char_end:48";
"(app, client),type='parameters'\nline_star:625,line_end:625|char_star:48,char_end:61"[shape="box",fillcolor="white",style=filled];
"def test_template_test_after_route_with_template(app, client):\n    @app.route('/')\n    def index():\n        return flask.render_template('template_test.html', value=False)\n\n    bp = flask.Blueprint('bp', __name__)\n\n    @bp.app_template_test()\n    def boolean(value):\n        return isinstance(value, bool)\n\n    app.register_blueprint(bp, url_prefix='/py')\n    rv = client.get('/')\n    assert b'Success!' in rv.data,type='function_definition'\nline_star:625,line_end:638|char_star:0,char_end:33"->"(app, client),type='parameters'\nline_star:625,line_end:625|char_star:48,char_end:61";
"app,type='identifier'\nline_star:625,line_end:625|char_star:49,char_end:52"[shape="point",fillcolor="#121013",style=filled];
"(app, client),type='parameters'\nline_star:625,line_end:625|char_star:48,char_end:61"->"app,type='identifier'\nline_star:625,line_end:625|char_star:49,char_end:52";
"client,type='identifier'\nline_star:625,line_end:625|char_star:54,char_end:60"[shape="point",fillcolor="#121013",style=filled];
"(app, client),type='parameters'\nline_star:625,line_end:625|char_star:48,char_end:61"->"client,type='identifier'\nline_star:625,line_end:625|char_star:54,char_end:60";
"type='INFORMATION BLOCK'\nline_star:626,line_end:638|char_star:4,char_end:33"[shape="point",fillcolor="#121013",style=filled];
"def test_template_test_after_route_with_template(app, client):\n    @app.route('/')\n    def index():\n        return flask.render_template('template_test.html', value=False)\n\n    bp = flask.Blueprint('bp', __name__)\n\n    @bp.app_template_test()\n    def boolean(value):\n        return isinstance(value, bool)\n\n    app.register_blueprint(bp, url_prefix='/py')\n    rv = client.get('/')\n    assert b'Success!' in rv.data,type='function_definition'\nline_star:625,line_end:638|char_star:0,char_end:33"->"type='INFORMATION BLOCK'\nline_star:626,line_end:638|char_star:4,char_end:33";
"@app.route('/')\n    def index():\n        return flask.render_template('template_test.html', value=False),type='decorated_definition'\nline_star:626,line_end:628|char_star:4,char_end:71"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:626,line_end:638|char_star:4,char_end:33"->"@app.route('/')\n    def index():\n        return flask.render_template('template_test.html', value=False),type='decorated_definition'\nline_star:626,line_end:628|char_star:4,char_end:71";
"@app.route('/'),type='decorator'\nline_star:626,line_end:626|char_star:4,char_end:19"[shape="box",fillcolor="white",style=filled];
"@app.route('/')\n    def index():\n        return flask.render_template('template_test.html', value=False),type='decorated_definition'\nline_star:626,line_end:628|char_star:4,char_end:71"->"@app.route('/'),type='decorator'\nline_star:626,line_end:626|char_star:4,char_end:19";
"def index():\n        return flask.render_template('template_test.html', value=False),type='function_definition'\nline_star:627,line_end:628|char_star:4,char_end:71"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.route('/')\n    def index():\n        return flask.render_template('template_test.html', value=False),type='decorated_definition'\nline_star:626,line_end:628|char_star:4,char_end:71"->"def index():\n        return flask.render_template('template_test.html', value=False),type='function_definition'\nline_star:627,line_end:628|char_star:4,char_end:71";
"index,type='identifier'\nline_star:627,line_end:627|char_star:8,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"def index():\n        return flask.render_template('template_test.html', value=False),type='function_definition'\nline_star:627,line_end:628|char_star:4,char_end:71"->"index,type='identifier'\nline_star:627,line_end:627|char_star:8,char_end:13";
"type='INFORMATION BLOCK'\nline_star:628,line_end:628|char_star:8,char_end:71"[shape="point",fillcolor="#121013",style=filled];
"def index():\n        return flask.render_template('template_test.html', value=False),type='function_definition'\nline_star:627,line_end:628|char_star:4,char_end:71"->"type='INFORMATION BLOCK'\nline_star:628,line_end:628|char_star:8,char_end:71";
"return flask.render_template('template_test.html', value=False),type='return_statement'\nline_star:628,line_end:628|char_star:8,char_end:71"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:628,line_end:628|char_star:8,char_end:71"->"return flask.render_template('template_test.html', value=False),type='return_statement'\nline_star:628,line_end:628|char_star:8,char_end:71";
"@bp.app_template_test()\n    def boolean(value):\n        return isinstance(value, bool),type='decorated_definition'\nline_star:632,line_end:634|char_star:4,char_end:38"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:626,line_end:638|char_star:4,char_end:33"->"@bp.app_template_test()\n    def boolean(value):\n        return isinstance(value, bool),type='decorated_definition'\nline_star:632,line_end:634|char_star:4,char_end:38";
"@bp.app_template_test(),type='decorator'\nline_star:632,line_end:632|char_star:4,char_end:27"[shape="box",fillcolor="white",style=filled];
"@bp.app_template_test()\n    def boolean(value):\n        return isinstance(value, bool),type='decorated_definition'\nline_star:632,line_end:634|char_star:4,char_end:38"->"@bp.app_template_test(),type='decorator'\nline_star:632,line_end:632|char_star:4,char_end:27";
"def boolean(value):\n        return isinstance(value, bool),type='function_definition'\nline_star:633,line_end:634|char_star:4,char_end:38"[shape="box",fillcolor="#cee6b4",style=filled];
"@bp.app_template_test()\n    def boolean(value):\n        return isinstance(value, bool),type='decorated_definition'\nline_star:632,line_end:634|char_star:4,char_end:38"->"def boolean(value):\n        return isinstance(value, bool),type='function_definition'\nline_star:633,line_end:634|char_star:4,char_end:38";
"boolean,type='identifier'\nline_star:633,line_end:633|char_star:8,char_end:15"[shape="point",fillcolor="#121013",style=filled];
"def boolean(value):\n        return isinstance(value, bool),type='function_definition'\nline_star:633,line_end:634|char_star:4,char_end:38"->"boolean,type='identifier'\nline_star:633,line_end:633|char_star:8,char_end:15";
"(value),type='parameters'\nline_star:633,line_end:633|char_star:15,char_end:22"[shape="box",fillcolor="white",style=filled];
"def boolean(value):\n        return isinstance(value, bool),type='function_definition'\nline_star:633,line_end:634|char_star:4,char_end:38"->"(value),type='parameters'\nline_star:633,line_end:633|char_star:15,char_end:22";
"value,type='identifier'\nline_star:633,line_end:633|char_star:16,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"(value),type='parameters'\nline_star:633,line_end:633|char_star:15,char_end:22"->"value,type='identifier'\nline_star:633,line_end:633|char_star:16,char_end:21";
"type='INFORMATION BLOCK'\nline_star:634,line_end:634|char_star:8,char_end:38"[shape="point",fillcolor="#121013",style=filled];
"def boolean(value):\n        return isinstance(value, bool),type='function_definition'\nline_star:633,line_end:634|char_star:4,char_end:38"->"type='INFORMATION BLOCK'\nline_star:634,line_end:634|char_star:8,char_end:38";
"return isinstance(value, bool),type='return_statement'\nline_star:634,line_end:634|char_star:8,char_end:38"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:634,line_end:634|char_star:8,char_end:38"->"return isinstance(value, bool),type='return_statement'\nline_star:634,line_end:634|char_star:8,char_end:38";
"assert b'Success!' in rv.data,type='assert_statement'\nline_star:638,line_end:638|char_star:4,char_end:33"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:626,line_end:638|char_star:4,char_end:33"->"assert b'Success!' in rv.data,type='assert_statement'\nline_star:638,line_end:638|char_star:4,char_end:33";
"b'Success!' in rv.data,type='comparison_operator'\nline_star:638,line_end:638|char_star:11,char_end:33"[shape="box",fillcolor="white",style=filled];
"assert b'Success!' in rv.data,type='assert_statement'\nline_star:638,line_end:638|char_star:4,char_end:33"->"b'Success!' in rv.data,type='comparison_operator'\nline_star:638,line_end:638|char_star:11,char_end:33";
"rv.data,type='attribute'\nline_star:638,line_end:638|char_star:26,char_end:33"[shape="box",fillcolor="white",style=filled];
"b'Success!' in rv.data,type='comparison_operator'\nline_star:638,line_end:638|char_star:11,char_end:33"->"rv.data,type='attribute'\nline_star:638,line_end:638|char_star:26,char_end:33";
"rv,type='identifier'\nline_star:638,line_end:638|char_star:26,char_end:28"[shape="point",fillcolor="#121013",style=filled];
"rv.data,type='attribute'\nline_star:638,line_end:638|char_star:26,char_end:33"->"rv,type='identifier'\nline_star:638,line_end:638|char_star:26,char_end:28";
"data,type='identifier'\nline_star:638,line_end:638|char_star:29,char_end:33"[shape="point",fillcolor="#121013",style=filled];
"rv.data,type='attribute'\nline_star:638,line_end:638|char_star:26,char_end:33"->"data,type='identifier'\nline_star:638,line_end:638|char_star:29,char_end:33";
"def test_add_template_test_with_template(app, client):\n    bp = flask.Blueprint('bp', __name__)\n\n    def boolean(value):\n        return isinstance(value, bool)\n\n    bp.add_app_template_test(boolean)\n    app.register_blueprint(bp, url_prefix='/py')\n\n    @app.route('/')\n    def index():\n        return flask.render_template('template_test.html', value=False)\n\n    rv = client.get('/')\n    assert b'Success!' in rv.data,type='function_definition'\nline_star:641,line_end:655|char_star:0,char_end:33"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_add_template_test_with_template(app, client):\n    bp = flask.Blueprint('bp', __name__)\n\n    def boolean(value):\n        return isinstance(value, bool)\n\n    bp.add_app_template_test(boolean)\n    app.register_blueprint(bp, url_prefix='/py')\n\n    @app.route('/')\n    def index():\n        return flask.render_template('template_test.html', value=False)\n\n    rv = client.get('/')\n    assert b'Success!' in rv.data,type='function_definition'\nline_star:641,line_end:655|char_star:0,char_end:33";
"test_add_template_test_with_template,type='identifier'\nline_star:641,line_end:641|char_star:4,char_end:40"[shape="point",fillcolor="#121013",style=filled];
"def test_add_template_test_with_template(app, client):\n    bp = flask.Blueprint('bp', __name__)\n\n    def boolean(value):\n        return isinstance(value, bool)\n\n    bp.add_app_template_test(boolean)\n    app.register_blueprint(bp, url_prefix='/py')\n\n    @app.route('/')\n    def index():\n        return flask.render_template('template_test.html', value=False)\n\n    rv = client.get('/')\n    assert b'Success!' in rv.data,type='function_definition'\nline_star:641,line_end:655|char_star:0,char_end:33"->"test_add_template_test_with_template,type='identifier'\nline_star:641,line_end:641|char_star:4,char_end:40";
"(app, client),type='parameters'\nline_star:641,line_end:641|char_star:40,char_end:53"[shape="box",fillcolor="white",style=filled];
"def test_add_template_test_with_template(app, client):\n    bp = flask.Blueprint('bp', __name__)\n\n    def boolean(value):\n        return isinstance(value, bool)\n\n    bp.add_app_template_test(boolean)\n    app.register_blueprint(bp, url_prefix='/py')\n\n    @app.route('/')\n    def index():\n        return flask.render_template('template_test.html', value=False)\n\n    rv = client.get('/')\n    assert b'Success!' in rv.data,type='function_definition'\nline_star:641,line_end:655|char_star:0,char_end:33"->"(app, client),type='parameters'\nline_star:641,line_end:641|char_star:40,char_end:53";
"app,type='identifier'\nline_star:641,line_end:641|char_star:41,char_end:44"[shape="point",fillcolor="#121013",style=filled];
"(app, client),type='parameters'\nline_star:641,line_end:641|char_star:40,char_end:53"->"app,type='identifier'\nline_star:641,line_end:641|char_star:41,char_end:44";
"client,type='identifier'\nline_star:641,line_end:641|char_star:46,char_end:52"[shape="point",fillcolor="#121013",style=filled];
"(app, client),type='parameters'\nline_star:641,line_end:641|char_star:40,char_end:53"->"client,type='identifier'\nline_star:641,line_end:641|char_star:46,char_end:52";
"type='INFORMATION BLOCK'\nline_star:642,line_end:655|char_star:4,char_end:33"[shape="point",fillcolor="#121013",style=filled];
"def test_add_template_test_with_template(app, client):\n    bp = flask.Blueprint('bp', __name__)\n\n    def boolean(value):\n        return isinstance(value, bool)\n\n    bp.add_app_template_test(boolean)\n    app.register_blueprint(bp, url_prefix='/py')\n\n    @app.route('/')\n    def index():\n        return flask.render_template('template_test.html', value=False)\n\n    rv = client.get('/')\n    assert b'Success!' in rv.data,type='function_definition'\nline_star:641,line_end:655|char_star:0,char_end:33"->"type='INFORMATION BLOCK'\nline_star:642,line_end:655|char_star:4,char_end:33";
"def boolean(value):\n        return isinstance(value, bool),type='function_definition'\nline_star:644,line_end:645|char_star:4,char_end:38"[shape="box",fillcolor="#cee6b4",style=filled];
"type='INFORMATION BLOCK'\nline_star:642,line_end:655|char_star:4,char_end:33"->"def boolean(value):\n        return isinstance(value, bool),type='function_definition'\nline_star:644,line_end:645|char_star:4,char_end:38";
"boolean,type='identifier'\nline_star:644,line_end:644|char_star:8,char_end:15"[shape="point",fillcolor="#121013",style=filled];
"def boolean(value):\n        return isinstance(value, bool),type='function_definition'\nline_star:644,line_end:645|char_star:4,char_end:38"->"boolean,type='identifier'\nline_star:644,line_end:644|char_star:8,char_end:15";
"(value),type='parameters'\nline_star:644,line_end:644|char_star:15,char_end:22"[shape="box",fillcolor="white",style=filled];
"def boolean(value):\n        return isinstance(value, bool),type='function_definition'\nline_star:644,line_end:645|char_star:4,char_end:38"->"(value),type='parameters'\nline_star:644,line_end:644|char_star:15,char_end:22";
"value,type='identifier'\nline_star:644,line_end:644|char_star:16,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"(value),type='parameters'\nline_star:644,line_end:644|char_star:15,char_end:22"->"value,type='identifier'\nline_star:644,line_end:644|char_star:16,char_end:21";
"type='INFORMATION BLOCK'\nline_star:645,line_end:645|char_star:8,char_end:38"[shape="point",fillcolor="#121013",style=filled];
"def boolean(value):\n        return isinstance(value, bool),type='function_definition'\nline_star:644,line_end:645|char_star:4,char_end:38"->"type='INFORMATION BLOCK'\nline_star:645,line_end:645|char_star:8,char_end:38";
"return isinstance(value, bool),type='return_statement'\nline_star:645,line_end:645|char_star:8,char_end:38"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:645,line_end:645|char_star:8,char_end:38"->"return isinstance(value, bool),type='return_statement'\nline_star:645,line_end:645|char_star:8,char_end:38";
"@app.route('/')\n    def index():\n        return flask.render_template('template_test.html', value=False),type='decorated_definition'\nline_star:650,line_end:652|char_star:4,char_end:71"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:642,line_end:655|char_star:4,char_end:33"->"@app.route('/')\n    def index():\n        return flask.render_template('template_test.html', value=False),type='decorated_definition'\nline_star:650,line_end:652|char_star:4,char_end:71";
"@app.route('/'),type='decorator'\nline_star:650,line_end:650|char_star:4,char_end:19"[shape="box",fillcolor="white",style=filled];
"@app.route('/')\n    def index():\n        return flask.render_template('template_test.html', value=False),type='decorated_definition'\nline_star:650,line_end:652|char_star:4,char_end:71"->"@app.route('/'),type='decorator'\nline_star:650,line_end:650|char_star:4,char_end:19";
"def index():\n        return flask.render_template('template_test.html', value=False),type='function_definition'\nline_star:651,line_end:652|char_star:4,char_end:71"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.route('/')\n    def index():\n        return flask.render_template('template_test.html', value=False),type='decorated_definition'\nline_star:650,line_end:652|char_star:4,char_end:71"->"def index():\n        return flask.render_template('template_test.html', value=False),type='function_definition'\nline_star:651,line_end:652|char_star:4,char_end:71";
"index,type='identifier'\nline_star:651,line_end:651|char_star:8,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"def index():\n        return flask.render_template('template_test.html', value=False),type='function_definition'\nline_star:651,line_end:652|char_star:4,char_end:71"->"index,type='identifier'\nline_star:651,line_end:651|char_star:8,char_end:13";
"type='INFORMATION BLOCK'\nline_star:652,line_end:652|char_star:8,char_end:71"[shape="point",fillcolor="#121013",style=filled];
"def index():\n        return flask.render_template('template_test.html', value=False),type='function_definition'\nline_star:651,line_end:652|char_star:4,char_end:71"->"type='INFORMATION BLOCK'\nline_star:652,line_end:652|char_star:8,char_end:71";
"return flask.render_template('template_test.html', value=False),type='return_statement'\nline_star:652,line_end:652|char_star:8,char_end:71"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:652,line_end:652|char_star:8,char_end:71"->"return flask.render_template('template_test.html', value=False),type='return_statement'\nline_star:652,line_end:652|char_star:8,char_end:71";
"assert b'Success!' in rv.data,type='assert_statement'\nline_star:655,line_end:655|char_star:4,char_end:33"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:642,line_end:655|char_star:4,char_end:33"->"assert b'Success!' in rv.data,type='assert_statement'\nline_star:655,line_end:655|char_star:4,char_end:33";
"b'Success!' in rv.data,type='comparison_operator'\nline_star:655,line_end:655|char_star:11,char_end:33"[shape="box",fillcolor="white",style=filled];
"assert b'Success!' in rv.data,type='assert_statement'\nline_star:655,line_end:655|char_star:4,char_end:33"->"b'Success!' in rv.data,type='comparison_operator'\nline_star:655,line_end:655|char_star:11,char_end:33";
"rv.data,type='attribute'\nline_star:655,line_end:655|char_star:26,char_end:33"[shape="box",fillcolor="white",style=filled];
"b'Success!' in rv.data,type='comparison_operator'\nline_star:655,line_end:655|char_star:11,char_end:33"->"rv.data,type='attribute'\nline_star:655,line_end:655|char_star:26,char_end:33";
"rv,type='identifier'\nline_star:655,line_end:655|char_star:26,char_end:28"[shape="point",fillcolor="#121013",style=filled];
"rv.data,type='attribute'\nline_star:655,line_end:655|char_star:26,char_end:33"->"rv,type='identifier'\nline_star:655,line_end:655|char_star:26,char_end:28";
"data,type='identifier'\nline_star:655,line_end:655|char_star:29,char_end:33"[shape="point",fillcolor="#121013",style=filled];
"rv.data,type='attribute'\nline_star:655,line_end:655|char_star:26,char_end:33"->"data,type='identifier'\nline_star:655,line_end:655|char_star:29,char_end:33";
"def test_template_test_with_name_and_template(app, client):\n    bp = flask.Blueprint('bp', __name__)\n\n    @bp.app_template_test('boolean')\n    def is_boolean(value):\n        return isinstance(value, bool)\n\n    app.register_blueprint(bp, url_prefix='/py')\n\n    @app.route('/')\n    def index():\n        return flask.render_template('template_test.html', value=False)\n\n    rv = client.get('/')\n    assert b'Success!' in rv.data,type='function_definition'\nline_star:658,line_end:672|char_star:0,char_end:33"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_template_test_with_name_and_template(app, client):\n    bp = flask.Blueprint('bp', __name__)\n\n    @bp.app_template_test('boolean')\n    def is_boolean(value):\n        return isinstance(value, bool)\n\n    app.register_blueprint(bp, url_prefix='/py')\n\n    @app.route('/')\n    def index():\n        return flask.render_template('template_test.html', value=False)\n\n    rv = client.get('/')\n    assert b'Success!' in rv.data,type='function_definition'\nline_star:658,line_end:672|char_star:0,char_end:33";
"test_template_test_with_name_and_template,type='identifier'\nline_star:658,line_end:658|char_star:4,char_end:45"[shape="point",fillcolor="#121013",style=filled];
"def test_template_test_with_name_and_template(app, client):\n    bp = flask.Blueprint('bp', __name__)\n\n    @bp.app_template_test('boolean')\n    def is_boolean(value):\n        return isinstance(value, bool)\n\n    app.register_blueprint(bp, url_prefix='/py')\n\n    @app.route('/')\n    def index():\n        return flask.render_template('template_test.html', value=False)\n\n    rv = client.get('/')\n    assert b'Success!' in rv.data,type='function_definition'\nline_star:658,line_end:672|char_star:0,char_end:33"->"test_template_test_with_name_and_template,type='identifier'\nline_star:658,line_end:658|char_star:4,char_end:45";
"(app, client),type='parameters'\nline_star:658,line_end:658|char_star:45,char_end:58"[shape="box",fillcolor="white",style=filled];
"def test_template_test_with_name_and_template(app, client):\n    bp = flask.Blueprint('bp', __name__)\n\n    @bp.app_template_test('boolean')\n    def is_boolean(value):\n        return isinstance(value, bool)\n\n    app.register_blueprint(bp, url_prefix='/py')\n\n    @app.route('/')\n    def index():\n        return flask.render_template('template_test.html', value=False)\n\n    rv = client.get('/')\n    assert b'Success!' in rv.data,type='function_definition'\nline_star:658,line_end:672|char_star:0,char_end:33"->"(app, client),type='parameters'\nline_star:658,line_end:658|char_star:45,char_end:58";
"app,type='identifier'\nline_star:658,line_end:658|char_star:46,char_end:49"[shape="point",fillcolor="#121013",style=filled];
"(app, client),type='parameters'\nline_star:658,line_end:658|char_star:45,char_end:58"->"app,type='identifier'\nline_star:658,line_end:658|char_star:46,char_end:49";
"client,type='identifier'\nline_star:658,line_end:658|char_star:51,char_end:57"[shape="point",fillcolor="#121013",style=filled];
"(app, client),type='parameters'\nline_star:658,line_end:658|char_star:45,char_end:58"->"client,type='identifier'\nline_star:658,line_end:658|char_star:51,char_end:57";
"type='INFORMATION BLOCK'\nline_star:659,line_end:672|char_star:4,char_end:33"[shape="point",fillcolor="#121013",style=filled];
"def test_template_test_with_name_and_template(app, client):\n    bp = flask.Blueprint('bp', __name__)\n\n    @bp.app_template_test('boolean')\n    def is_boolean(value):\n        return isinstance(value, bool)\n\n    app.register_blueprint(bp, url_prefix='/py')\n\n    @app.route('/')\n    def index():\n        return flask.render_template('template_test.html', value=False)\n\n    rv = client.get('/')\n    assert b'Success!' in rv.data,type='function_definition'\nline_star:658,line_end:672|char_star:0,char_end:33"->"type='INFORMATION BLOCK'\nline_star:659,line_end:672|char_star:4,char_end:33";
"@bp.app_template_test('boolean')\n    def is_boolean(value):\n        return isinstance(value, bool),type='decorated_definition'\nline_star:661,line_end:663|char_star:4,char_end:38"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:659,line_end:672|char_star:4,char_end:33"->"@bp.app_template_test('boolean')\n    def is_boolean(value):\n        return isinstance(value, bool),type='decorated_definition'\nline_star:661,line_end:663|char_star:4,char_end:38";
"@bp.app_template_test('boolean'),type='decorator'\nline_star:661,line_end:661|char_star:4,char_end:36"[shape="box",fillcolor="white",style=filled];
"@bp.app_template_test('boolean')\n    def is_boolean(value):\n        return isinstance(value, bool),type='decorated_definition'\nline_star:661,line_end:663|char_star:4,char_end:38"->"@bp.app_template_test('boolean'),type='decorator'\nline_star:661,line_end:661|char_star:4,char_end:36";
"def is_boolean(value):\n        return isinstance(value, bool),type='function_definition'\nline_star:662,line_end:663|char_star:4,char_end:38"[shape="box",fillcolor="#cee6b4",style=filled];
"@bp.app_template_test('boolean')\n    def is_boolean(value):\n        return isinstance(value, bool),type='decorated_definition'\nline_star:661,line_end:663|char_star:4,char_end:38"->"def is_boolean(value):\n        return isinstance(value, bool),type='function_definition'\nline_star:662,line_end:663|char_star:4,char_end:38";
"is_boolean,type='identifier'\nline_star:662,line_end:662|char_star:8,char_end:18"[shape="point",fillcolor="#121013",style=filled];
"def is_boolean(value):\n        return isinstance(value, bool),type='function_definition'\nline_star:662,line_end:663|char_star:4,char_end:38"->"is_boolean,type='identifier'\nline_star:662,line_end:662|char_star:8,char_end:18";
"(value),type='parameters'\nline_star:662,line_end:662|char_star:18,char_end:25"[shape="box",fillcolor="white",style=filled];
"def is_boolean(value):\n        return isinstance(value, bool),type='function_definition'\nline_star:662,line_end:663|char_star:4,char_end:38"->"(value),type='parameters'\nline_star:662,line_end:662|char_star:18,char_end:25";
"value,type='identifier'\nline_star:662,line_end:662|char_star:19,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"(value),type='parameters'\nline_star:662,line_end:662|char_star:18,char_end:25"->"value,type='identifier'\nline_star:662,line_end:662|char_star:19,char_end:24";
"type='INFORMATION BLOCK'\nline_star:663,line_end:663|char_star:8,char_end:38"[shape="point",fillcolor="#121013",style=filled];
"def is_boolean(value):\n        return isinstance(value, bool),type='function_definition'\nline_star:662,line_end:663|char_star:4,char_end:38"->"type='INFORMATION BLOCK'\nline_star:663,line_end:663|char_star:8,char_end:38";
"return isinstance(value, bool),type='return_statement'\nline_star:663,line_end:663|char_star:8,char_end:38"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:663,line_end:663|char_star:8,char_end:38"->"return isinstance(value, bool),type='return_statement'\nline_star:663,line_end:663|char_star:8,char_end:38";
"@app.route('/')\n    def index():\n        return flask.render_template('template_test.html', value=False),type='decorated_definition'\nline_star:667,line_end:669|char_star:4,char_end:71"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:659,line_end:672|char_star:4,char_end:33"->"@app.route('/')\n    def index():\n        return flask.render_template('template_test.html', value=False),type='decorated_definition'\nline_star:667,line_end:669|char_star:4,char_end:71";
"@app.route('/'),type='decorator'\nline_star:667,line_end:667|char_star:4,char_end:19"[shape="box",fillcolor="white",style=filled];
"@app.route('/')\n    def index():\n        return flask.render_template('template_test.html', value=False),type='decorated_definition'\nline_star:667,line_end:669|char_star:4,char_end:71"->"@app.route('/'),type='decorator'\nline_star:667,line_end:667|char_star:4,char_end:19";
"def index():\n        return flask.render_template('template_test.html', value=False),type='function_definition'\nline_star:668,line_end:669|char_star:4,char_end:71"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.route('/')\n    def index():\n        return flask.render_template('template_test.html', value=False),type='decorated_definition'\nline_star:667,line_end:669|char_star:4,char_end:71"->"def index():\n        return flask.render_template('template_test.html', value=False),type='function_definition'\nline_star:668,line_end:669|char_star:4,char_end:71";
"index,type='identifier'\nline_star:668,line_end:668|char_star:8,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"def index():\n        return flask.render_template('template_test.html', value=False),type='function_definition'\nline_star:668,line_end:669|char_star:4,char_end:71"->"index,type='identifier'\nline_star:668,line_end:668|char_star:8,char_end:13";
"type='INFORMATION BLOCK'\nline_star:669,line_end:669|char_star:8,char_end:71"[shape="point",fillcolor="#121013",style=filled];
"def index():\n        return flask.render_template('template_test.html', value=False),type='function_definition'\nline_star:668,line_end:669|char_star:4,char_end:71"->"type='INFORMATION BLOCK'\nline_star:669,line_end:669|char_star:8,char_end:71";
"return flask.render_template('template_test.html', value=False),type='return_statement'\nline_star:669,line_end:669|char_star:8,char_end:71"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:669,line_end:669|char_star:8,char_end:71"->"return flask.render_template('template_test.html', value=False),type='return_statement'\nline_star:669,line_end:669|char_star:8,char_end:71";
"assert b'Success!' in rv.data,type='assert_statement'\nline_star:672,line_end:672|char_star:4,char_end:33"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:659,line_end:672|char_star:4,char_end:33"->"assert b'Success!' in rv.data,type='assert_statement'\nline_star:672,line_end:672|char_star:4,char_end:33";
"b'Success!' in rv.data,type='comparison_operator'\nline_star:672,line_end:672|char_star:11,char_end:33"[shape="box",fillcolor="white",style=filled];
"assert b'Success!' in rv.data,type='assert_statement'\nline_star:672,line_end:672|char_star:4,char_end:33"->"b'Success!' in rv.data,type='comparison_operator'\nline_star:672,line_end:672|char_star:11,char_end:33";
"rv.data,type='attribute'\nline_star:672,line_end:672|char_star:26,char_end:33"[shape="box",fillcolor="white",style=filled];
"b'Success!' in rv.data,type='comparison_operator'\nline_star:672,line_end:672|char_star:11,char_end:33"->"rv.data,type='attribute'\nline_star:672,line_end:672|char_star:26,char_end:33";
"rv,type='identifier'\nline_star:672,line_end:672|char_star:26,char_end:28"[shape="point",fillcolor="#121013",style=filled];
"rv.data,type='attribute'\nline_star:672,line_end:672|char_star:26,char_end:33"->"rv,type='identifier'\nline_star:672,line_end:672|char_star:26,char_end:28";
"data,type='identifier'\nline_star:672,line_end:672|char_star:29,char_end:33"[shape="point",fillcolor="#121013",style=filled];
"rv.data,type='attribute'\nline_star:672,line_end:672|char_star:26,char_end:33"->"data,type='identifier'\nline_star:672,line_end:672|char_star:29,char_end:33";
"def test_add_template_test_with_name_and_template(app, client):\n    bp = flask.Blueprint('bp', __name__)\n\n    def is_boolean(value):\n        return isinstance(value, bool)\n\n    bp.add_app_template_test(is_boolean, 'boolean')\n    app.register_blueprint(bp, url_prefix='/py')\n\n    @app.route('/')\n    def index():\n        return flask.render_template('template_test.html', value=False)\n\n    rv = client.get('/')\n    assert b'Success!' in rv.data,type='function_definition'\nline_star:675,line_end:689|char_star:0,char_end:33"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_add_template_test_with_name_and_template(app, client):\n    bp = flask.Blueprint('bp', __name__)\n\n    def is_boolean(value):\n        return isinstance(value, bool)\n\n    bp.add_app_template_test(is_boolean, 'boolean')\n    app.register_blueprint(bp, url_prefix='/py')\n\n    @app.route('/')\n    def index():\n        return flask.render_template('template_test.html', value=False)\n\n    rv = client.get('/')\n    assert b'Success!' in rv.data,type='function_definition'\nline_star:675,line_end:689|char_star:0,char_end:33";
"test_add_template_test_with_name_and_template,type='identifier'\nline_star:675,line_end:675|char_star:4,char_end:49"[shape="point",fillcolor="#121013",style=filled];
"def test_add_template_test_with_name_and_template(app, client):\n    bp = flask.Blueprint('bp', __name__)\n\n    def is_boolean(value):\n        return isinstance(value, bool)\n\n    bp.add_app_template_test(is_boolean, 'boolean')\n    app.register_blueprint(bp, url_prefix='/py')\n\n    @app.route('/')\n    def index():\n        return flask.render_template('template_test.html', value=False)\n\n    rv = client.get('/')\n    assert b'Success!' in rv.data,type='function_definition'\nline_star:675,line_end:689|char_star:0,char_end:33"->"test_add_template_test_with_name_and_template,type='identifier'\nline_star:675,line_end:675|char_star:4,char_end:49";
"(app, client),type='parameters'\nline_star:675,line_end:675|char_star:49,char_end:62"[shape="box",fillcolor="white",style=filled];
"def test_add_template_test_with_name_and_template(app, client):\n    bp = flask.Blueprint('bp', __name__)\n\n    def is_boolean(value):\n        return isinstance(value, bool)\n\n    bp.add_app_template_test(is_boolean, 'boolean')\n    app.register_blueprint(bp, url_prefix='/py')\n\n    @app.route('/')\n    def index():\n        return flask.render_template('template_test.html', value=False)\n\n    rv = client.get('/')\n    assert b'Success!' in rv.data,type='function_definition'\nline_star:675,line_end:689|char_star:0,char_end:33"->"(app, client),type='parameters'\nline_star:675,line_end:675|char_star:49,char_end:62";
"app,type='identifier'\nline_star:675,line_end:675|char_star:50,char_end:53"[shape="point",fillcolor="#121013",style=filled];
"(app, client),type='parameters'\nline_star:675,line_end:675|char_star:49,char_end:62"->"app,type='identifier'\nline_star:675,line_end:675|char_star:50,char_end:53";
"client,type='identifier'\nline_star:675,line_end:675|char_star:55,char_end:61"[shape="point",fillcolor="#121013",style=filled];
"(app, client),type='parameters'\nline_star:675,line_end:675|char_star:49,char_end:62"->"client,type='identifier'\nline_star:675,line_end:675|char_star:55,char_end:61";
"type='INFORMATION BLOCK'\nline_star:676,line_end:689|char_star:4,char_end:33"[shape="point",fillcolor="#121013",style=filled];
"def test_add_template_test_with_name_and_template(app, client):\n    bp = flask.Blueprint('bp', __name__)\n\n    def is_boolean(value):\n        return isinstance(value, bool)\n\n    bp.add_app_template_test(is_boolean, 'boolean')\n    app.register_blueprint(bp, url_prefix='/py')\n\n    @app.route('/')\n    def index():\n        return flask.render_template('template_test.html', value=False)\n\n    rv = client.get('/')\n    assert b'Success!' in rv.data,type='function_definition'\nline_star:675,line_end:689|char_star:0,char_end:33"->"type='INFORMATION BLOCK'\nline_star:676,line_end:689|char_star:4,char_end:33";
"def is_boolean(value):\n        return isinstance(value, bool),type='function_definition'\nline_star:678,line_end:679|char_star:4,char_end:38"[shape="box",fillcolor="#cee6b4",style=filled];
"type='INFORMATION BLOCK'\nline_star:676,line_end:689|char_star:4,char_end:33"->"def is_boolean(value):\n        return isinstance(value, bool),type='function_definition'\nline_star:678,line_end:679|char_star:4,char_end:38";
"is_boolean,type='identifier'\nline_star:678,line_end:678|char_star:8,char_end:18"[shape="point",fillcolor="#121013",style=filled];
"def is_boolean(value):\n        return isinstance(value, bool),type='function_definition'\nline_star:678,line_end:679|char_star:4,char_end:38"->"is_boolean,type='identifier'\nline_star:678,line_end:678|char_star:8,char_end:18";
"(value),type='parameters'\nline_star:678,line_end:678|char_star:18,char_end:25"[shape="box",fillcolor="white",style=filled];
"def is_boolean(value):\n        return isinstance(value, bool),type='function_definition'\nline_star:678,line_end:679|char_star:4,char_end:38"->"(value),type='parameters'\nline_star:678,line_end:678|char_star:18,char_end:25";
"value,type='identifier'\nline_star:678,line_end:678|char_star:19,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"(value),type='parameters'\nline_star:678,line_end:678|char_star:18,char_end:25"->"value,type='identifier'\nline_star:678,line_end:678|char_star:19,char_end:24";
"type='INFORMATION BLOCK'\nline_star:679,line_end:679|char_star:8,char_end:38"[shape="point",fillcolor="#121013",style=filled];
"def is_boolean(value):\n        return isinstance(value, bool),type='function_definition'\nline_star:678,line_end:679|char_star:4,char_end:38"->"type='INFORMATION BLOCK'\nline_star:679,line_end:679|char_star:8,char_end:38";
"return isinstance(value, bool),type='return_statement'\nline_star:679,line_end:679|char_star:8,char_end:38"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:679,line_end:679|char_star:8,char_end:38"->"return isinstance(value, bool),type='return_statement'\nline_star:679,line_end:679|char_star:8,char_end:38";
"@app.route('/')\n    def index():\n        return flask.render_template('template_test.html', value=False),type='decorated_definition'\nline_star:684,line_end:686|char_star:4,char_end:71"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:676,line_end:689|char_star:4,char_end:33"->"@app.route('/')\n    def index():\n        return flask.render_template('template_test.html', value=False),type='decorated_definition'\nline_star:684,line_end:686|char_star:4,char_end:71";
"@app.route('/'),type='decorator'\nline_star:684,line_end:684|char_star:4,char_end:19"[shape="box",fillcolor="white",style=filled];
"@app.route('/')\n    def index():\n        return flask.render_template('template_test.html', value=False),type='decorated_definition'\nline_star:684,line_end:686|char_star:4,char_end:71"->"@app.route('/'),type='decorator'\nline_star:684,line_end:684|char_star:4,char_end:19";
"def index():\n        return flask.render_template('template_test.html', value=False),type='function_definition'\nline_star:685,line_end:686|char_star:4,char_end:71"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.route('/')\n    def index():\n        return flask.render_template('template_test.html', value=False),type='decorated_definition'\nline_star:684,line_end:686|char_star:4,char_end:71"->"def index():\n        return flask.render_template('template_test.html', value=False),type='function_definition'\nline_star:685,line_end:686|char_star:4,char_end:71";
"index,type='identifier'\nline_star:685,line_end:685|char_star:8,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"def index():\n        return flask.render_template('template_test.html', value=False),type='function_definition'\nline_star:685,line_end:686|char_star:4,char_end:71"->"index,type='identifier'\nline_star:685,line_end:685|char_star:8,char_end:13";
"type='INFORMATION BLOCK'\nline_star:686,line_end:686|char_star:8,char_end:71"[shape="point",fillcolor="#121013",style=filled];
"def index():\n        return flask.render_template('template_test.html', value=False),type='function_definition'\nline_star:685,line_end:686|char_star:4,char_end:71"->"type='INFORMATION BLOCK'\nline_star:686,line_end:686|char_star:8,char_end:71";
"return flask.render_template('template_test.html', value=False),type='return_statement'\nline_star:686,line_end:686|char_star:8,char_end:71"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:686,line_end:686|char_star:8,char_end:71"->"return flask.render_template('template_test.html', value=False),type='return_statement'\nline_star:686,line_end:686|char_star:8,char_end:71";
"assert b'Success!' in rv.data,type='assert_statement'\nline_star:689,line_end:689|char_star:4,char_end:33"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:676,line_end:689|char_star:4,char_end:33"->"assert b'Success!' in rv.data,type='assert_statement'\nline_star:689,line_end:689|char_star:4,char_end:33";
"b'Success!' in rv.data,type='comparison_operator'\nline_star:689,line_end:689|char_star:11,char_end:33"[shape="box",fillcolor="white",style=filled];
"assert b'Success!' in rv.data,type='assert_statement'\nline_star:689,line_end:689|char_star:4,char_end:33"->"b'Success!' in rv.data,type='comparison_operator'\nline_star:689,line_end:689|char_star:11,char_end:33";
"rv.data,type='attribute'\nline_star:689,line_end:689|char_star:26,char_end:33"[shape="box",fillcolor="white",style=filled];
"b'Success!' in rv.data,type='comparison_operator'\nline_star:689,line_end:689|char_star:11,char_end:33"->"rv.data,type='attribute'\nline_star:689,line_end:689|char_star:26,char_end:33";
"rv,type='identifier'\nline_star:689,line_end:689|char_star:26,char_end:28"[shape="point",fillcolor="#121013",style=filled];
"rv.data,type='attribute'\nline_star:689,line_end:689|char_star:26,char_end:33"->"rv,type='identifier'\nline_star:689,line_end:689|char_star:26,char_end:28";
"data,type='identifier'\nline_star:689,line_end:689|char_star:29,char_end:33"[shape="point",fillcolor="#121013",style=filled];
"rv.data,type='attribute'\nline_star:689,line_end:689|char_star:26,char_end:33"->"data,type='identifier'\nline_star:689,line_end:689|char_star:29,char_end:33";
"def test_context_processing(app, client):\n    answer_bp = flask.Blueprint('answer_bp', __name__)\n\n    template_string = lambda: flask.render_template_string(  # noqa: E731\n        '{% if notanswer %}{{ notanswer }} is not the answer. {% endif %}'\n        '{% if answer %}{{ answer }} is the answer.{% endif %}'\n    )\n\n    # App global context processor\n    @answer_bp.app_context_processor\n    def not_answer_context_processor():\n        return {'notanswer': 43}\n\n    # Blueprint local context processor\n    @answer_bp.context_processor\n    def answer_context_processor():\n        return {'answer': 42}\n\n    # Setup endpoints for testing\n    @answer_bp.route('/bp')\n    def bp_page():\n        return template_string()\n\n    @app.route('/')\n    def app_page():\n        return template_string()\n\n    # Register the blueprint\n    app.register_blueprint(answer_bp)\n\n    app_page_bytes = client.get('/').data\n    answer_page_bytes = client.get('/bp').data\n\n    assert b'43' in app_page_bytes\n    assert b'42' not in app_page_bytes\n\n    assert b'42' in answer_page_bytes\n    assert b'43' in answer_page_bytes,type='function_definition'\nline_star:692,line_end:729|char_star:0,char_end:37"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_context_processing(app, client):\n    answer_bp = flask.Blueprint('answer_bp', __name__)\n\n    template_string = lambda: flask.render_template_string(  # noqa: E731\n        '{% if notanswer %}{{ notanswer }} is not the answer. {% endif %}'\n        '{% if answer %}{{ answer }} is the answer.{% endif %}'\n    )\n\n    # App global context processor\n    @answer_bp.app_context_processor\n    def not_answer_context_processor():\n        return {'notanswer': 43}\n\n    # Blueprint local context processor\n    @answer_bp.context_processor\n    def answer_context_processor():\n        return {'answer': 42}\n\n    # Setup endpoints for testing\n    @answer_bp.route('/bp')\n    def bp_page():\n        return template_string()\n\n    @app.route('/')\n    def app_page():\n        return template_string()\n\n    # Register the blueprint\n    app.register_blueprint(answer_bp)\n\n    app_page_bytes = client.get('/').data\n    answer_page_bytes = client.get('/bp').data\n\n    assert b'43' in app_page_bytes\n    assert b'42' not in app_page_bytes\n\n    assert b'42' in answer_page_bytes\n    assert b'43' in answer_page_bytes,type='function_definition'\nline_star:692,line_end:729|char_star:0,char_end:37";
"test_context_processing,type='identifier'\nline_star:692,line_end:692|char_star:4,char_end:27"[shape="point",fillcolor="#121013",style=filled];
"def test_context_processing(app, client):\n    answer_bp = flask.Blueprint('answer_bp', __name__)\n\n    template_string = lambda: flask.render_template_string(  # noqa: E731\n        '{% if notanswer %}{{ notanswer }} is not the answer. {% endif %}'\n        '{% if answer %}{{ answer }} is the answer.{% endif %}'\n    )\n\n    # App global context processor\n    @answer_bp.app_context_processor\n    def not_answer_context_processor():\n        return {'notanswer': 43}\n\n    # Blueprint local context processor\n    @answer_bp.context_processor\n    def answer_context_processor():\n        return {'answer': 42}\n\n    # Setup endpoints for testing\n    @answer_bp.route('/bp')\n    def bp_page():\n        return template_string()\n\n    @app.route('/')\n    def app_page():\n        return template_string()\n\n    # Register the blueprint\n    app.register_blueprint(answer_bp)\n\n    app_page_bytes = client.get('/').data\n    answer_page_bytes = client.get('/bp').data\n\n    assert b'43' in app_page_bytes\n    assert b'42' not in app_page_bytes\n\n    assert b'42' in answer_page_bytes\n    assert b'43' in answer_page_bytes,type='function_definition'\nline_star:692,line_end:729|char_star:0,char_end:37"->"test_context_processing,type='identifier'\nline_star:692,line_end:692|char_star:4,char_end:27";
"(app, client),type='parameters'\nline_star:692,line_end:692|char_star:27,char_end:40"[shape="box",fillcolor="white",style=filled];
"def test_context_processing(app, client):\n    answer_bp = flask.Blueprint('answer_bp', __name__)\n\n    template_string = lambda: flask.render_template_string(  # noqa: E731\n        '{% if notanswer %}{{ notanswer }} is not the answer. {% endif %}'\n        '{% if answer %}{{ answer }} is the answer.{% endif %}'\n    )\n\n    # App global context processor\n    @answer_bp.app_context_processor\n    def not_answer_context_processor():\n        return {'notanswer': 43}\n\n    # Blueprint local context processor\n    @answer_bp.context_processor\n    def answer_context_processor():\n        return {'answer': 42}\n\n    # Setup endpoints for testing\n    @answer_bp.route('/bp')\n    def bp_page():\n        return template_string()\n\n    @app.route('/')\n    def app_page():\n        return template_string()\n\n    # Register the blueprint\n    app.register_blueprint(answer_bp)\n\n    app_page_bytes = client.get('/').data\n    answer_page_bytes = client.get('/bp').data\n\n    assert b'43' in app_page_bytes\n    assert b'42' not in app_page_bytes\n\n    assert b'42' in answer_page_bytes\n    assert b'43' in answer_page_bytes,type='function_definition'\nline_star:692,line_end:729|char_star:0,char_end:37"->"(app, client),type='parameters'\nline_star:692,line_end:692|char_star:27,char_end:40";
"app,type='identifier'\nline_star:692,line_end:692|char_star:28,char_end:31"[shape="point",fillcolor="#121013",style=filled];
"(app, client),type='parameters'\nline_star:692,line_end:692|char_star:27,char_end:40"->"app,type='identifier'\nline_star:692,line_end:692|char_star:28,char_end:31";
"client,type='identifier'\nline_star:692,line_end:692|char_star:33,char_end:39"[shape="point",fillcolor="#121013",style=filled];
"(app, client),type='parameters'\nline_star:692,line_end:692|char_star:27,char_end:40"->"client,type='identifier'\nline_star:692,line_end:692|char_star:33,char_end:39";
"type='INFORMATION BLOCK'\nline_star:693,line_end:729|char_star:4,char_end:37"[shape="point",fillcolor="#121013",style=filled];
"def test_context_processing(app, client):\n    answer_bp = flask.Blueprint('answer_bp', __name__)\n\n    template_string = lambda: flask.render_template_string(  # noqa: E731\n        '{% if notanswer %}{{ notanswer }} is not the answer. {% endif %}'\n        '{% if answer %}{{ answer }} is the answer.{% endif %}'\n    )\n\n    # App global context processor\n    @answer_bp.app_context_processor\n    def not_answer_context_processor():\n        return {'notanswer': 43}\n\n    # Blueprint local context processor\n    @answer_bp.context_processor\n    def answer_context_processor():\n        return {'answer': 42}\n\n    # Setup endpoints for testing\n    @answer_bp.route('/bp')\n    def bp_page():\n        return template_string()\n\n    @app.route('/')\n    def app_page():\n        return template_string()\n\n    # Register the blueprint\n    app.register_blueprint(answer_bp)\n\n    app_page_bytes = client.get('/').data\n    answer_page_bytes = client.get('/bp').data\n\n    assert b'43' in app_page_bytes\n    assert b'42' not in app_page_bytes\n\n    assert b'42' in answer_page_bytes\n    assert b'43' in answer_page_bytes,type='function_definition'\nline_star:692,line_end:729|char_star:0,char_end:37"->"type='INFORMATION BLOCK'\nline_star:693,line_end:729|char_star:4,char_end:37";
"# App global context processor,type='comment'\nline_star:700,line_end:700|char_star:4,char_end:34"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:693,line_end:729|char_star:4,char_end:37"->"# App global context processor,type='comment'\nline_star:700,line_end:700|char_star:4,char_end:34";
"@answer_bp.app_context_processor\n    def not_answer_context_processor():\n        return {'notanswer': 43},type='decorated_definition'\nline_star:701,line_end:703|char_star:4,char_end:32"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:693,line_end:729|char_star:4,char_end:37"->"@answer_bp.app_context_processor\n    def not_answer_context_processor():\n        return {'notanswer': 43},type='decorated_definition'\nline_star:701,line_end:703|char_star:4,char_end:32";
"@answer_bp.app_context_processor,type='decorator'\nline_star:701,line_end:701|char_star:4,char_end:36"[shape="box",fillcolor="white",style=filled];
"@answer_bp.app_context_processor\n    def not_answer_context_processor():\n        return {'notanswer': 43},type='decorated_definition'\nline_star:701,line_end:703|char_star:4,char_end:32"->"@answer_bp.app_context_processor,type='decorator'\nline_star:701,line_end:701|char_star:4,char_end:36";
"def not_answer_context_processor():\n        return {'notanswer': 43},type='function_definition'\nline_star:702,line_end:703|char_star:4,char_end:32"[shape="box",fillcolor="#cee6b4",style=filled];
"@answer_bp.app_context_processor\n    def not_answer_context_processor():\n        return {'notanswer': 43},type='decorated_definition'\nline_star:701,line_end:703|char_star:4,char_end:32"->"def not_answer_context_processor():\n        return {'notanswer': 43},type='function_definition'\nline_star:702,line_end:703|char_star:4,char_end:32";
"not_answer_context_processor,type='identifier'\nline_star:702,line_end:702|char_star:8,char_end:36"[shape="point",fillcolor="#121013",style=filled];
"def not_answer_context_processor():\n        return {'notanswer': 43},type='function_definition'\nline_star:702,line_end:703|char_star:4,char_end:32"->"not_answer_context_processor,type='identifier'\nline_star:702,line_end:702|char_star:8,char_end:36";
"type='INFORMATION BLOCK'\nline_star:703,line_end:703|char_star:8,char_end:32"[shape="point",fillcolor="#121013",style=filled];
"def not_answer_context_processor():\n        return {'notanswer': 43},type='function_definition'\nline_star:702,line_end:703|char_star:4,char_end:32"->"type='INFORMATION BLOCK'\nline_star:703,line_end:703|char_star:8,char_end:32";
"return {'notanswer': 43},type='return_statement'\nline_star:703,line_end:703|char_star:8,char_end:32"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:703,line_end:703|char_star:8,char_end:32"->"return {'notanswer': 43},type='return_statement'\nline_star:703,line_end:703|char_star:8,char_end:32";
"# Blueprint local context processor,type='comment'\nline_star:705,line_end:705|char_star:4,char_end:39"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:693,line_end:729|char_star:4,char_end:37"->"# Blueprint local context processor,type='comment'\nline_star:705,line_end:705|char_star:4,char_end:39";
"@answer_bp.context_processor\n    def answer_context_processor():\n        return {'answer': 42},type='decorated_definition'\nline_star:706,line_end:708|char_star:4,char_end:29"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:693,line_end:729|char_star:4,char_end:37"->"@answer_bp.context_processor\n    def answer_context_processor():\n        return {'answer': 42},type='decorated_definition'\nline_star:706,line_end:708|char_star:4,char_end:29";
"@answer_bp.context_processor,type='decorator'\nline_star:706,line_end:706|char_star:4,char_end:32"[shape="box",fillcolor="white",style=filled];
"@answer_bp.context_processor\n    def answer_context_processor():\n        return {'answer': 42},type='decorated_definition'\nline_star:706,line_end:708|char_star:4,char_end:29"->"@answer_bp.context_processor,type='decorator'\nline_star:706,line_end:706|char_star:4,char_end:32";
"def answer_context_processor():\n        return {'answer': 42},type='function_definition'\nline_star:707,line_end:708|char_star:4,char_end:29"[shape="box",fillcolor="#cee6b4",style=filled];
"@answer_bp.context_processor\n    def answer_context_processor():\n        return {'answer': 42},type='decorated_definition'\nline_star:706,line_end:708|char_star:4,char_end:29"->"def answer_context_processor():\n        return {'answer': 42},type='function_definition'\nline_star:707,line_end:708|char_star:4,char_end:29";
"answer_context_processor,type='identifier'\nline_star:707,line_end:707|char_star:8,char_end:32"[shape="point",fillcolor="#121013",style=filled];
"def answer_context_processor():\n        return {'answer': 42},type='function_definition'\nline_star:707,line_end:708|char_star:4,char_end:29"->"answer_context_processor,type='identifier'\nline_star:707,line_end:707|char_star:8,char_end:32";
"type='INFORMATION BLOCK'\nline_star:708,line_end:708|char_star:8,char_end:29"[shape="point",fillcolor="#121013",style=filled];
"def answer_context_processor():\n        return {'answer': 42},type='function_definition'\nline_star:707,line_end:708|char_star:4,char_end:29"->"type='INFORMATION BLOCK'\nline_star:708,line_end:708|char_star:8,char_end:29";
"return {'answer': 42},type='return_statement'\nline_star:708,line_end:708|char_star:8,char_end:29"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:708,line_end:708|char_star:8,char_end:29"->"return {'answer': 42},type='return_statement'\nline_star:708,line_end:708|char_star:8,char_end:29";
"# Setup endpoints for testing,type='comment'\nline_star:710,line_end:710|char_star:4,char_end:33"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:693,line_end:729|char_star:4,char_end:37"->"# Setup endpoints for testing,type='comment'\nline_star:710,line_end:710|char_star:4,char_end:33";
"@answer_bp.route('/bp')\n    def bp_page():\n        return template_string(),type='decorated_definition'\nline_star:711,line_end:713|char_star:4,char_end:32"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:693,line_end:729|char_star:4,char_end:37"->"@answer_bp.route('/bp')\n    def bp_page():\n        return template_string(),type='decorated_definition'\nline_star:711,line_end:713|char_star:4,char_end:32";
"@answer_bp.route('/bp'),type='decorator'\nline_star:711,line_end:711|char_star:4,char_end:27"[shape="box",fillcolor="white",style=filled];
"@answer_bp.route('/bp')\n    def bp_page():\n        return template_string(),type='decorated_definition'\nline_star:711,line_end:713|char_star:4,char_end:32"->"@answer_bp.route('/bp'),type='decorator'\nline_star:711,line_end:711|char_star:4,char_end:27";
"def bp_page():\n        return template_string(),type='function_definition'\nline_star:712,line_end:713|char_star:4,char_end:32"[shape="box",fillcolor="#cee6b4",style=filled];
"@answer_bp.route('/bp')\n    def bp_page():\n        return template_string(),type='decorated_definition'\nline_star:711,line_end:713|char_star:4,char_end:32"->"def bp_page():\n        return template_string(),type='function_definition'\nline_star:712,line_end:713|char_star:4,char_end:32";
"bp_page,type='identifier'\nline_star:712,line_end:712|char_star:8,char_end:15"[shape="point",fillcolor="#121013",style=filled];
"def bp_page():\n        return template_string(),type='function_definition'\nline_star:712,line_end:713|char_star:4,char_end:32"->"bp_page,type='identifier'\nline_star:712,line_end:712|char_star:8,char_end:15";
"type='INFORMATION BLOCK'\nline_star:713,line_end:713|char_star:8,char_end:32"[shape="point",fillcolor="#121013",style=filled];
"def bp_page():\n        return template_string(),type='function_definition'\nline_star:712,line_end:713|char_star:4,char_end:32"->"type='INFORMATION BLOCK'\nline_star:713,line_end:713|char_star:8,char_end:32";
"return template_string(),type='return_statement'\nline_star:713,line_end:713|char_star:8,char_end:32"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:713,line_end:713|char_star:8,char_end:32"->"return template_string(),type='return_statement'\nline_star:713,line_end:713|char_star:8,char_end:32";
"@app.route('/')\n    def app_page():\n        return template_string(),type='decorated_definition'\nline_star:715,line_end:717|char_star:4,char_end:32"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:693,line_end:729|char_star:4,char_end:37"->"@app.route('/')\n    def app_page():\n        return template_string(),type='decorated_definition'\nline_star:715,line_end:717|char_star:4,char_end:32";
"@app.route('/'),type='decorator'\nline_star:715,line_end:715|char_star:4,char_end:19"[shape="box",fillcolor="white",style=filled];
"@app.route('/')\n    def app_page():\n        return template_string(),type='decorated_definition'\nline_star:715,line_end:717|char_star:4,char_end:32"->"@app.route('/'),type='decorator'\nline_star:715,line_end:715|char_star:4,char_end:19";
"def app_page():\n        return template_string(),type='function_definition'\nline_star:716,line_end:717|char_star:4,char_end:32"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.route('/')\n    def app_page():\n        return template_string(),type='decorated_definition'\nline_star:715,line_end:717|char_star:4,char_end:32"->"def app_page():\n        return template_string(),type='function_definition'\nline_star:716,line_end:717|char_star:4,char_end:32";
"app_page,type='identifier'\nline_star:716,line_end:716|char_star:8,char_end:16"[shape="point",fillcolor="#121013",style=filled];
"def app_page():\n        return template_string(),type='function_definition'\nline_star:716,line_end:717|char_star:4,char_end:32"->"app_page,type='identifier'\nline_star:716,line_end:716|char_star:8,char_end:16";
"type='INFORMATION BLOCK'\nline_star:717,line_end:717|char_star:8,char_end:32"[shape="point",fillcolor="#121013",style=filled];
"def app_page():\n        return template_string(),type='function_definition'\nline_star:716,line_end:717|char_star:4,char_end:32"->"type='INFORMATION BLOCK'\nline_star:717,line_end:717|char_star:8,char_end:32";
"return template_string(),type='return_statement'\nline_star:717,line_end:717|char_star:8,char_end:32"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:717,line_end:717|char_star:8,char_end:32"->"return template_string(),type='return_statement'\nline_star:717,line_end:717|char_star:8,char_end:32";
"# Register the blueprint,type='comment'\nline_star:719,line_end:719|char_star:4,char_end:28"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:693,line_end:729|char_star:4,char_end:37"->"# Register the blueprint,type='comment'\nline_star:719,line_end:719|char_star:4,char_end:28";
"assert b'43' in app_page_bytes,type='assert_statement'\nline_star:725,line_end:725|char_star:4,char_end:34"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:693,line_end:729|char_star:4,char_end:37"->"assert b'43' in app_page_bytes,type='assert_statement'\nline_star:725,line_end:725|char_star:4,char_end:34";
"b'43' in app_page_bytes,type='comparison_operator'\nline_star:725,line_end:725|char_star:11,char_end:34"[shape="box",fillcolor="white",style=filled];
"assert b'43' in app_page_bytes,type='assert_statement'\nline_star:725,line_end:725|char_star:4,char_end:34"->"b'43' in app_page_bytes,type='comparison_operator'\nline_star:725,line_end:725|char_star:11,char_end:34";
"app_page_bytes,type='identifier'\nline_star:725,line_end:725|char_star:20,char_end:34"[shape="point",fillcolor="#121013",style=filled];
"b'43' in app_page_bytes,type='comparison_operator'\nline_star:725,line_end:725|char_star:11,char_end:34"->"app_page_bytes,type='identifier'\nline_star:725,line_end:725|char_star:20,char_end:34";
"assert b'42' not in app_page_bytes,type='assert_statement'\nline_star:726,line_end:726|char_star:4,char_end:38"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:693,line_end:729|char_star:4,char_end:37"->"assert b'42' not in app_page_bytes,type='assert_statement'\nline_star:726,line_end:726|char_star:4,char_end:38";
"b'42' not in app_page_bytes,type='comparison_operator'\nline_star:726,line_end:726|char_star:11,char_end:38"[shape="box",fillcolor="white",style=filled];
"assert b'42' not in app_page_bytes,type='assert_statement'\nline_star:726,line_end:726|char_star:4,char_end:38"->"b'42' not in app_page_bytes,type='comparison_operator'\nline_star:726,line_end:726|char_star:11,char_end:38";
"app_page_bytes,type='identifier'\nline_star:726,line_end:726|char_star:24,char_end:38"[shape="point",fillcolor="#121013",style=filled];
"b'42' not in app_page_bytes,type='comparison_operator'\nline_star:726,line_end:726|char_star:11,char_end:38"->"app_page_bytes,type='identifier'\nline_star:726,line_end:726|char_star:24,char_end:38";
"assert b'42' in answer_page_bytes,type='assert_statement'\nline_star:728,line_end:728|char_star:4,char_end:37"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:693,line_end:729|char_star:4,char_end:37"->"assert b'42' in answer_page_bytes,type='assert_statement'\nline_star:728,line_end:728|char_star:4,char_end:37";
"b'42' in answer_page_bytes,type='comparison_operator'\nline_star:728,line_end:728|char_star:11,char_end:37"[shape="box",fillcolor="white",style=filled];
"assert b'42' in answer_page_bytes,type='assert_statement'\nline_star:728,line_end:728|char_star:4,char_end:37"->"b'42' in answer_page_bytes,type='comparison_operator'\nline_star:728,line_end:728|char_star:11,char_end:37";
"answer_page_bytes,type='identifier'\nline_star:728,line_end:728|char_star:20,char_end:37"[shape="point",fillcolor="#121013",style=filled];
"b'42' in answer_page_bytes,type='comparison_operator'\nline_star:728,line_end:728|char_star:11,char_end:37"->"answer_page_bytes,type='identifier'\nline_star:728,line_end:728|char_star:20,char_end:37";
"assert b'43' in answer_page_bytes,type='assert_statement'\nline_star:729,line_end:729|char_star:4,char_end:37"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:693,line_end:729|char_star:4,char_end:37"->"assert b'43' in answer_page_bytes,type='assert_statement'\nline_star:729,line_end:729|char_star:4,char_end:37";
"b'43' in answer_page_bytes,type='comparison_operator'\nline_star:729,line_end:729|char_star:11,char_end:37"[shape="box",fillcolor="white",style=filled];
"assert b'43' in answer_page_bytes,type='assert_statement'\nline_star:729,line_end:729|char_star:4,char_end:37"->"b'43' in answer_page_bytes,type='comparison_operator'\nline_star:729,line_end:729|char_star:11,char_end:37";
"answer_page_bytes,type='identifier'\nline_star:729,line_end:729|char_star:20,char_end:37"[shape="point",fillcolor="#121013",style=filled];
"b'43' in answer_page_bytes,type='comparison_operator'\nline_star:729,line_end:729|char_star:11,char_end:37"->"answer_page_bytes,type='identifier'\nline_star:729,line_end:729|char_star:20,char_end:37";
"def test_template_global(app):\n    bp = flask.Blueprint('bp', __name__)\n\n    @bp.app_template_global()\n    def get_answer():\n        return 42\n\n    # Make sure the function is not in the jinja_env already\n    assert 'get_answer' not in app.jinja_env.globals.keys()\n    app.register_blueprint(bp)\n\n    # Tests\n    assert 'get_answer' in app.jinja_env.globals.keys()\n    assert app.jinja_env.globals['get_answer'] is get_answer\n    assert app.jinja_env.globals['get_answer']() == 42\n\n    with app.app_context():\n        rv = flask.render_template_string('{{ get_answer() }}')\n        assert rv == '42',type='function_definition'\nline_star:732,line_end:750|char_star:0,char_end:25"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_template_global(app):\n    bp = flask.Blueprint('bp', __name__)\n\n    @bp.app_template_global()\n    def get_answer():\n        return 42\n\n    # Make sure the function is not in the jinja_env already\n    assert 'get_answer' not in app.jinja_env.globals.keys()\n    app.register_blueprint(bp)\n\n    # Tests\n    assert 'get_answer' in app.jinja_env.globals.keys()\n    assert app.jinja_env.globals['get_answer'] is get_answer\n    assert app.jinja_env.globals['get_answer']() == 42\n\n    with app.app_context():\n        rv = flask.render_template_string('{{ get_answer() }}')\n        assert rv == '42',type='function_definition'\nline_star:732,line_end:750|char_star:0,char_end:25";
"test_template_global,type='identifier'\nline_star:732,line_end:732|char_star:4,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"def test_template_global(app):\n    bp = flask.Blueprint('bp', __name__)\n\n    @bp.app_template_global()\n    def get_answer():\n        return 42\n\n    # Make sure the function is not in the jinja_env already\n    assert 'get_answer' not in app.jinja_env.globals.keys()\n    app.register_blueprint(bp)\n\n    # Tests\n    assert 'get_answer' in app.jinja_env.globals.keys()\n    assert app.jinja_env.globals['get_answer'] is get_answer\n    assert app.jinja_env.globals['get_answer']() == 42\n\n    with app.app_context():\n        rv = flask.render_template_string('{{ get_answer() }}')\n        assert rv == '42',type='function_definition'\nline_star:732,line_end:750|char_star:0,char_end:25"->"test_template_global,type='identifier'\nline_star:732,line_end:732|char_star:4,char_end:24";
"(app),type='parameters'\nline_star:732,line_end:732|char_star:24,char_end:29"[shape="box",fillcolor="white",style=filled];
"def test_template_global(app):\n    bp = flask.Blueprint('bp', __name__)\n\n    @bp.app_template_global()\n    def get_answer():\n        return 42\n\n    # Make sure the function is not in the jinja_env already\n    assert 'get_answer' not in app.jinja_env.globals.keys()\n    app.register_blueprint(bp)\n\n    # Tests\n    assert 'get_answer' in app.jinja_env.globals.keys()\n    assert app.jinja_env.globals['get_answer'] is get_answer\n    assert app.jinja_env.globals['get_answer']() == 42\n\n    with app.app_context():\n        rv = flask.render_template_string('{{ get_answer() }}')\n        assert rv == '42',type='function_definition'\nline_star:732,line_end:750|char_star:0,char_end:25"->"(app),type='parameters'\nline_star:732,line_end:732|char_star:24,char_end:29";
"app,type='identifier'\nline_star:732,line_end:732|char_star:25,char_end:28"[shape="point",fillcolor="#121013",style=filled];
"(app),type='parameters'\nline_star:732,line_end:732|char_star:24,char_end:29"->"app,type='identifier'\nline_star:732,line_end:732|char_star:25,char_end:28";
"type='INFORMATION BLOCK'\nline_star:733,line_end:750|char_star:4,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"def test_template_global(app):\n    bp = flask.Blueprint('bp', __name__)\n\n    @bp.app_template_global()\n    def get_answer():\n        return 42\n\n    # Make sure the function is not in the jinja_env already\n    assert 'get_answer' not in app.jinja_env.globals.keys()\n    app.register_blueprint(bp)\n\n    # Tests\n    assert 'get_answer' in app.jinja_env.globals.keys()\n    assert app.jinja_env.globals['get_answer'] is get_answer\n    assert app.jinja_env.globals['get_answer']() == 42\n\n    with app.app_context():\n        rv = flask.render_template_string('{{ get_answer() }}')\n        assert rv == '42',type='function_definition'\nline_star:732,line_end:750|char_star:0,char_end:25"->"type='INFORMATION BLOCK'\nline_star:733,line_end:750|char_star:4,char_end:25";
"@bp.app_template_global()\n    def get_answer():\n        return 42,type='decorated_definition'\nline_star:735,line_end:737|char_star:4,char_end:17"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:733,line_end:750|char_star:4,char_end:25"->"@bp.app_template_global()\n    def get_answer():\n        return 42,type='decorated_definition'\nline_star:735,line_end:737|char_star:4,char_end:17";
"@bp.app_template_global(),type='decorator'\nline_star:735,line_end:735|char_star:4,char_end:29"[shape="box",fillcolor="white",style=filled];
"@bp.app_template_global()\n    def get_answer():\n        return 42,type='decorated_definition'\nline_star:735,line_end:737|char_star:4,char_end:17"->"@bp.app_template_global(),type='decorator'\nline_star:735,line_end:735|char_star:4,char_end:29";
"def get_answer():\n        return 42,type='function_definition'\nline_star:736,line_end:737|char_star:4,char_end:17"[shape="box",fillcolor="#cee6b4",style=filled];
"@bp.app_template_global()\n    def get_answer():\n        return 42,type='decorated_definition'\nline_star:735,line_end:737|char_star:4,char_end:17"->"def get_answer():\n        return 42,type='function_definition'\nline_star:736,line_end:737|char_star:4,char_end:17";
"get_answer,type='identifier'\nline_star:736,line_end:736|char_star:8,char_end:18"[shape="point",fillcolor="#121013",style=filled];
"def get_answer():\n        return 42,type='function_definition'\nline_star:736,line_end:737|char_star:4,char_end:17"->"get_answer,type='identifier'\nline_star:736,line_end:736|char_star:8,char_end:18";
"type='INFORMATION BLOCK'\nline_star:737,line_end:737|char_star:8,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"def get_answer():\n        return 42,type='function_definition'\nline_star:736,line_end:737|char_star:4,char_end:17"->"type='INFORMATION BLOCK'\nline_star:737,line_end:737|char_star:8,char_end:17";
"return 42,type='return_statement'\nline_star:737,line_end:737|char_star:8,char_end:17"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:737,line_end:737|char_star:8,char_end:17"->"return 42,type='return_statement'\nline_star:737,line_end:737|char_star:8,char_end:17";
"# Make sure the function is not in the jinja_env already,type='comment'\nline_star:739,line_end:739|char_star:4,char_end:60"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:733,line_end:750|char_star:4,char_end:25"->"# Make sure the function is not in the jinja_env already,type='comment'\nline_star:739,line_end:739|char_star:4,char_end:60";
"assert 'get_answer' not in app.jinja_env.globals.keys(),type='assert_statement'\nline_star:740,line_end:740|char_star:4,char_end:59"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:733,line_end:750|char_star:4,char_end:25"->"assert 'get_answer' not in app.jinja_env.globals.keys(),type='assert_statement'\nline_star:740,line_end:740|char_star:4,char_end:59";
"'get_answer' not in app.jinja_env.globals.keys(),type='comparison_operator'\nline_star:740,line_end:740|char_star:11,char_end:59"[shape="box",fillcolor="white",style=filled];
"assert 'get_answer' not in app.jinja_env.globals.keys(),type='assert_statement'\nline_star:740,line_end:740|char_star:4,char_end:59"->"'get_answer' not in app.jinja_env.globals.keys(),type='comparison_operator'\nline_star:740,line_end:740|char_star:11,char_end:59";
"app.jinja_env.globals.keys(),type='call'\nline_star:740,line_end:740|char_star:31,char_end:59"[shape="box",fillcolor="white",style=filled];
"'get_answer' not in app.jinja_env.globals.keys(),type='comparison_operator'\nline_star:740,line_end:740|char_star:11,char_end:59"->"app.jinja_env.globals.keys(),type='call'\nline_star:740,line_end:740|char_star:31,char_end:59";
"app.jinja_env.globals.keys,type='attribute'\nline_star:740,line_end:740|char_star:31,char_end:57"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.globals.keys(),type='call'\nline_star:740,line_end:740|char_star:31,char_end:59"->"app.jinja_env.globals.keys,type='attribute'\nline_star:740,line_end:740|char_star:31,char_end:57";
"app.jinja_env.globals,type='attribute'\nline_star:740,line_end:740|char_star:31,char_end:52"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.globals.keys,type='attribute'\nline_star:740,line_end:740|char_star:31,char_end:57"->"app.jinja_env.globals,type='attribute'\nline_star:740,line_end:740|char_star:31,char_end:52";
"app.jinja_env,type='attribute'\nline_star:740,line_end:740|char_star:31,char_end:44"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.globals,type='attribute'\nline_star:740,line_end:740|char_star:31,char_end:52"->"app.jinja_env,type='attribute'\nline_star:740,line_end:740|char_star:31,char_end:44";
"app,type='identifier'\nline_star:740,line_end:740|char_star:31,char_end:34"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env,type='attribute'\nline_star:740,line_end:740|char_star:31,char_end:44"->"app,type='identifier'\nline_star:740,line_end:740|char_star:31,char_end:34";
"jinja_env,type='identifier'\nline_star:740,line_end:740|char_star:35,char_end:44"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env,type='attribute'\nline_star:740,line_end:740|char_star:31,char_end:44"->"jinja_env,type='identifier'\nline_star:740,line_end:740|char_star:35,char_end:44";
"globals,type='identifier'\nline_star:740,line_end:740|char_star:45,char_end:52"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env.globals,type='attribute'\nline_star:740,line_end:740|char_star:31,char_end:52"->"globals,type='identifier'\nline_star:740,line_end:740|char_star:45,char_end:52";
"keys,type='identifier'\nline_star:740,line_end:740|char_star:53,char_end:57"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env.globals.keys,type='attribute'\nline_star:740,line_end:740|char_star:31,char_end:57"->"keys,type='identifier'\nline_star:740,line_end:740|char_star:53,char_end:57";
"# Tests,type='comment'\nline_star:743,line_end:743|char_star:4,char_end:11"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:733,line_end:750|char_star:4,char_end:25"->"# Tests,type='comment'\nline_star:743,line_end:743|char_star:4,char_end:11";
"assert 'get_answer' in app.jinja_env.globals.keys(),type='assert_statement'\nline_star:744,line_end:744|char_star:4,char_end:55"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:733,line_end:750|char_star:4,char_end:25"->"assert 'get_answer' in app.jinja_env.globals.keys(),type='assert_statement'\nline_star:744,line_end:744|char_star:4,char_end:55";
"'get_answer' in app.jinja_env.globals.keys(),type='comparison_operator'\nline_star:744,line_end:744|char_star:11,char_end:55"[shape="box",fillcolor="white",style=filled];
"assert 'get_answer' in app.jinja_env.globals.keys(),type='assert_statement'\nline_star:744,line_end:744|char_star:4,char_end:55"->"'get_answer' in app.jinja_env.globals.keys(),type='comparison_operator'\nline_star:744,line_end:744|char_star:11,char_end:55";
"app.jinja_env.globals.keys(),type='call'\nline_star:744,line_end:744|char_star:27,char_end:55"[shape="box",fillcolor="white",style=filled];
"'get_answer' in app.jinja_env.globals.keys(),type='comparison_operator'\nline_star:744,line_end:744|char_star:11,char_end:55"->"app.jinja_env.globals.keys(),type='call'\nline_star:744,line_end:744|char_star:27,char_end:55";
"app.jinja_env.globals.keys,type='attribute'\nline_star:744,line_end:744|char_star:27,char_end:53"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.globals.keys(),type='call'\nline_star:744,line_end:744|char_star:27,char_end:55"->"app.jinja_env.globals.keys,type='attribute'\nline_star:744,line_end:744|char_star:27,char_end:53";
"app.jinja_env.globals,type='attribute'\nline_star:744,line_end:744|char_star:27,char_end:48"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.globals.keys,type='attribute'\nline_star:744,line_end:744|char_star:27,char_end:53"->"app.jinja_env.globals,type='attribute'\nline_star:744,line_end:744|char_star:27,char_end:48";
"app.jinja_env,type='attribute'\nline_star:744,line_end:744|char_star:27,char_end:40"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.globals,type='attribute'\nline_star:744,line_end:744|char_star:27,char_end:48"->"app.jinja_env,type='attribute'\nline_star:744,line_end:744|char_star:27,char_end:40";
"app,type='identifier'\nline_star:744,line_end:744|char_star:27,char_end:30"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env,type='attribute'\nline_star:744,line_end:744|char_star:27,char_end:40"->"app,type='identifier'\nline_star:744,line_end:744|char_star:27,char_end:30";
"jinja_env,type='identifier'\nline_star:744,line_end:744|char_star:31,char_end:40"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env,type='attribute'\nline_star:744,line_end:744|char_star:27,char_end:40"->"jinja_env,type='identifier'\nline_star:744,line_end:744|char_star:31,char_end:40";
"globals,type='identifier'\nline_star:744,line_end:744|char_star:41,char_end:48"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env.globals,type='attribute'\nline_star:744,line_end:744|char_star:27,char_end:48"->"globals,type='identifier'\nline_star:744,line_end:744|char_star:41,char_end:48";
"keys,type='identifier'\nline_star:744,line_end:744|char_star:49,char_end:53"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env.globals.keys,type='attribute'\nline_star:744,line_end:744|char_star:27,char_end:53"->"keys,type='identifier'\nline_star:744,line_end:744|char_star:49,char_end:53";
"assert app.jinja_env.globals['get_answer'] is get_answer,type='assert_statement'\nline_star:745,line_end:745|char_star:4,char_end:60"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:733,line_end:750|char_star:4,char_end:25"->"assert app.jinja_env.globals['get_answer'] is get_answer,type='assert_statement'\nline_star:745,line_end:745|char_star:4,char_end:60";
"app.jinja_env.globals['get_answer'] is get_answer,type='comparison_operator'\nline_star:745,line_end:745|char_star:11,char_end:60"[shape="box",fillcolor="white",style=filled];
"assert app.jinja_env.globals['get_answer'] is get_answer,type='assert_statement'\nline_star:745,line_end:745|char_star:4,char_end:60"->"app.jinja_env.globals['get_answer'] is get_answer,type='comparison_operator'\nline_star:745,line_end:745|char_star:11,char_end:60";
"app.jinja_env.globals['get_answer'],type='subscript'\nline_star:745,line_end:745|char_star:11,char_end:46"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.globals['get_answer'] is get_answer,type='comparison_operator'\nline_star:745,line_end:745|char_star:11,char_end:60"->"app.jinja_env.globals['get_answer'],type='subscript'\nline_star:745,line_end:745|char_star:11,char_end:46";
"app.jinja_env.globals,type='attribute'\nline_star:745,line_end:745|char_star:11,char_end:32"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.globals['get_answer'],type='subscript'\nline_star:745,line_end:745|char_star:11,char_end:46"->"app.jinja_env.globals,type='attribute'\nline_star:745,line_end:745|char_star:11,char_end:32";
"app.jinja_env,type='attribute'\nline_star:745,line_end:745|char_star:11,char_end:24"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.globals,type='attribute'\nline_star:745,line_end:745|char_star:11,char_end:32"->"app.jinja_env,type='attribute'\nline_star:745,line_end:745|char_star:11,char_end:24";
"app,type='identifier'\nline_star:745,line_end:745|char_star:11,char_end:14"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env,type='attribute'\nline_star:745,line_end:745|char_star:11,char_end:24"->"app,type='identifier'\nline_star:745,line_end:745|char_star:11,char_end:14";
"jinja_env,type='identifier'\nline_star:745,line_end:745|char_star:15,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env,type='attribute'\nline_star:745,line_end:745|char_star:11,char_end:24"->"jinja_env,type='identifier'\nline_star:745,line_end:745|char_star:15,char_end:24";
"globals,type='identifier'\nline_star:745,line_end:745|char_star:25,char_end:32"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env.globals,type='attribute'\nline_star:745,line_end:745|char_star:11,char_end:32"->"globals,type='identifier'\nline_star:745,line_end:745|char_star:25,char_end:32";
"get_answer,type='identifier'\nline_star:745,line_end:745|char_star:50,char_end:60"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env.globals['get_answer'] is get_answer,type='comparison_operator'\nline_star:745,line_end:745|char_star:11,char_end:60"->"get_answer,type='identifier'\nline_star:745,line_end:745|char_star:50,char_end:60";
"assert app.jinja_env.globals['get_answer']() == 42,type='assert_statement'\nline_star:746,line_end:746|char_star:4,char_end:54"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:733,line_end:750|char_star:4,char_end:25"->"assert app.jinja_env.globals['get_answer']() == 42,type='assert_statement'\nline_star:746,line_end:746|char_star:4,char_end:54";
"app.jinja_env.globals['get_answer']() == 42,type='comparison_operator'\nline_star:746,line_end:746|char_star:11,char_end:54"[shape="box",fillcolor="white",style=filled];
"assert app.jinja_env.globals['get_answer']() == 42,type='assert_statement'\nline_star:746,line_end:746|char_star:4,char_end:54"->"app.jinja_env.globals['get_answer']() == 42,type='comparison_operator'\nline_star:746,line_end:746|char_star:11,char_end:54";
"app.jinja_env.globals['get_answer'](),type='call'\nline_star:746,line_end:746|char_star:11,char_end:48"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.globals['get_answer']() == 42,type='comparison_operator'\nline_star:746,line_end:746|char_star:11,char_end:54"->"app.jinja_env.globals['get_answer'](),type='call'\nline_star:746,line_end:746|char_star:11,char_end:48";
"app.jinja_env.globals['get_answer'],type='subscript'\nline_star:746,line_end:746|char_star:11,char_end:46"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.globals['get_answer'](),type='call'\nline_star:746,line_end:746|char_star:11,char_end:48"->"app.jinja_env.globals['get_answer'],type='subscript'\nline_star:746,line_end:746|char_star:11,char_end:46";
"app.jinja_env.globals,type='attribute'\nline_star:746,line_end:746|char_star:11,char_end:32"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.globals['get_answer'],type='subscript'\nline_star:746,line_end:746|char_star:11,char_end:46"->"app.jinja_env.globals,type='attribute'\nline_star:746,line_end:746|char_star:11,char_end:32";
"app.jinja_env,type='attribute'\nline_star:746,line_end:746|char_star:11,char_end:24"[shape="box",fillcolor="white",style=filled];
"app.jinja_env.globals,type='attribute'\nline_star:746,line_end:746|char_star:11,char_end:32"->"app.jinja_env,type='attribute'\nline_star:746,line_end:746|char_star:11,char_end:24";
"app,type='identifier'\nline_star:746,line_end:746|char_star:11,char_end:14"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env,type='attribute'\nline_star:746,line_end:746|char_star:11,char_end:24"->"app,type='identifier'\nline_star:746,line_end:746|char_star:11,char_end:14";
"jinja_env,type='identifier'\nline_star:746,line_end:746|char_star:15,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env,type='attribute'\nline_star:746,line_end:746|char_star:11,char_end:24"->"jinja_env,type='identifier'\nline_star:746,line_end:746|char_star:15,char_end:24";
"globals,type='identifier'\nline_star:746,line_end:746|char_star:25,char_end:32"[shape="point",fillcolor="#121013",style=filled];
"app.jinja_env.globals,type='attribute'\nline_star:746,line_end:746|char_star:11,char_end:32"->"globals,type='identifier'\nline_star:746,line_end:746|char_star:25,char_end:32";
"with app.app_context():\n        rv = flask.render_template_string('{{ get_answer() }}')\n        assert rv == '42',type='with_statement'\nline_star:748,line_end:750|char_star:4,char_end:25"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:733,line_end:750|char_star:4,char_end:25"->"with app.app_context():\n        rv = flask.render_template_string('{{ get_answer() }}')\n        assert rv == '42',type='with_statement'\nline_star:748,line_end:750|char_star:4,char_end:25";
"app.app_context(),type='with_clause'\nline_star:748,line_end:748|char_star:9,char_end:26"[shape="box",fillcolor="white",style=filled];
"with app.app_context():\n        rv = flask.render_template_string('{{ get_answer() }}')\n        assert rv == '42',type='with_statement'\nline_star:748,line_end:750|char_star:4,char_end:25"->"app.app_context(),type='with_clause'\nline_star:748,line_end:748|char_star:9,char_end:26";
"type='INFORMATION BLOCK'\nline_star:749,line_end:750|char_star:8,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"with app.app_context():\n        rv = flask.render_template_string('{{ get_answer() }}')\n        assert rv == '42',type='with_statement'\nline_star:748,line_end:750|char_star:4,char_end:25"->"type='INFORMATION BLOCK'\nline_star:749,line_end:750|char_star:8,char_end:25";
"assert rv == '42',type='assert_statement'\nline_star:750,line_end:750|char_star:8,char_end:25"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:749,line_end:750|char_star:8,char_end:25"->"assert rv == '42',type='assert_statement'\nline_star:750,line_end:750|char_star:8,char_end:25";
"rv == '42',type='comparison_operator'\nline_star:750,line_end:750|char_star:15,char_end:25"[shape="box",fillcolor="white",style=filled];
"assert rv == '42',type='assert_statement'\nline_star:750,line_end:750|char_star:8,char_end:25"->"rv == '42',type='comparison_operator'\nline_star:750,line_end:750|char_star:15,char_end:25";
"rv,type='identifier'\nline_star:750,line_end:750|char_star:15,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"rv == '42',type='comparison_operator'\nline_star:750,line_end:750|char_star:15,char_end:25"->"rv,type='identifier'\nline_star:750,line_end:750|char_star:15,char_end:17";
"def test_request_processing(app, client):\n    bp = flask.Blueprint('bp', __name__)\n    evts = []\n\n    @bp.before_request\n    def before_bp():\n        evts.append('before')\n\n    @bp.after_request\n    def after_bp(response):\n        response.data += b'|after'\n        evts.append('after')\n        return response\n\n    @bp.teardown_request\n    def teardown_bp(exc):\n        evts.append('teardown')\n\n    # Setup routes for testing\n    @bp.route('/bp')\n    def bp_endpoint():\n        return 'request'\n\n    app.register_blueprint(bp)\n\n    assert evts == []\n    rv = client.get('/bp')\n    assert rv.data == b'request|after'\n    assert evts == ['before', 'after', 'teardown'],type='function_definition'\nline_star:753,line_end:781|char_star:0,char_end:50"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_request_processing(app, client):\n    bp = flask.Blueprint('bp', __name__)\n    evts = []\n\n    @bp.before_request\n    def before_bp():\n        evts.append('before')\n\n    @bp.after_request\n    def after_bp(response):\n        response.data += b'|after'\n        evts.append('after')\n        return response\n\n    @bp.teardown_request\n    def teardown_bp(exc):\n        evts.append('teardown')\n\n    # Setup routes for testing\n    @bp.route('/bp')\n    def bp_endpoint():\n        return 'request'\n\n    app.register_blueprint(bp)\n\n    assert evts == []\n    rv = client.get('/bp')\n    assert rv.data == b'request|after'\n    assert evts == ['before', 'after', 'teardown'],type='function_definition'\nline_star:753,line_end:781|char_star:0,char_end:50";
"test_request_processing,type='identifier'\nline_star:753,line_end:753|char_star:4,char_end:27"[shape="point",fillcolor="#121013",style=filled];
"def test_request_processing(app, client):\n    bp = flask.Blueprint('bp', __name__)\n    evts = []\n\n    @bp.before_request\n    def before_bp():\n        evts.append('before')\n\n    @bp.after_request\n    def after_bp(response):\n        response.data += b'|after'\n        evts.append('after')\n        return response\n\n    @bp.teardown_request\n    def teardown_bp(exc):\n        evts.append('teardown')\n\n    # Setup routes for testing\n    @bp.route('/bp')\n    def bp_endpoint():\n        return 'request'\n\n    app.register_blueprint(bp)\n\n    assert evts == []\n    rv = client.get('/bp')\n    assert rv.data == b'request|after'\n    assert evts == ['before', 'after', 'teardown'],type='function_definition'\nline_star:753,line_end:781|char_star:0,char_end:50"->"test_request_processing,type='identifier'\nline_star:753,line_end:753|char_star:4,char_end:27";
"(app, client),type='parameters'\nline_star:753,line_end:753|char_star:27,char_end:40"[shape="box",fillcolor="white",style=filled];
"def test_request_processing(app, client):\n    bp = flask.Blueprint('bp', __name__)\n    evts = []\n\n    @bp.before_request\n    def before_bp():\n        evts.append('before')\n\n    @bp.after_request\n    def after_bp(response):\n        response.data += b'|after'\n        evts.append('after')\n        return response\n\n    @bp.teardown_request\n    def teardown_bp(exc):\n        evts.append('teardown')\n\n    # Setup routes for testing\n    @bp.route('/bp')\n    def bp_endpoint():\n        return 'request'\n\n    app.register_blueprint(bp)\n\n    assert evts == []\n    rv = client.get('/bp')\n    assert rv.data == b'request|after'\n    assert evts == ['before', 'after', 'teardown'],type='function_definition'\nline_star:753,line_end:781|char_star:0,char_end:50"->"(app, client),type='parameters'\nline_star:753,line_end:753|char_star:27,char_end:40";
"app,type='identifier'\nline_star:753,line_end:753|char_star:28,char_end:31"[shape="point",fillcolor="#121013",style=filled];
"(app, client),type='parameters'\nline_star:753,line_end:753|char_star:27,char_end:40"->"app,type='identifier'\nline_star:753,line_end:753|char_star:28,char_end:31";
"client,type='identifier'\nline_star:753,line_end:753|char_star:33,char_end:39"[shape="point",fillcolor="#121013",style=filled];
"(app, client),type='parameters'\nline_star:753,line_end:753|char_star:27,char_end:40"->"client,type='identifier'\nline_star:753,line_end:753|char_star:33,char_end:39";
"type='INFORMATION BLOCK'\nline_star:754,line_end:781|char_star:4,char_end:50"[shape="point",fillcolor="#121013",style=filled];
"def test_request_processing(app, client):\n    bp = flask.Blueprint('bp', __name__)\n    evts = []\n\n    @bp.before_request\n    def before_bp():\n        evts.append('before')\n\n    @bp.after_request\n    def after_bp(response):\n        response.data += b'|after'\n        evts.append('after')\n        return response\n\n    @bp.teardown_request\n    def teardown_bp(exc):\n        evts.append('teardown')\n\n    # Setup routes for testing\n    @bp.route('/bp')\n    def bp_endpoint():\n        return 'request'\n\n    app.register_blueprint(bp)\n\n    assert evts == []\n    rv = client.get('/bp')\n    assert rv.data == b'request|after'\n    assert evts == ['before', 'after', 'teardown'],type='function_definition'\nline_star:753,line_end:781|char_star:0,char_end:50"->"type='INFORMATION BLOCK'\nline_star:754,line_end:781|char_star:4,char_end:50";
"@bp.before_request\n    def before_bp():\n        evts.append('before'),type='decorated_definition'\nline_star:757,line_end:759|char_star:4,char_end:29"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:754,line_end:781|char_star:4,char_end:50"->"@bp.before_request\n    def before_bp():\n        evts.append('before'),type='decorated_definition'\nline_star:757,line_end:759|char_star:4,char_end:29";
"@bp.before_request,type='decorator'\nline_star:757,line_end:757|char_star:4,char_end:22"[shape="box",fillcolor="white",style=filled];
"@bp.before_request\n    def before_bp():\n        evts.append('before'),type='decorated_definition'\nline_star:757,line_end:759|char_star:4,char_end:29"->"@bp.before_request,type='decorator'\nline_star:757,line_end:757|char_star:4,char_end:22";
"def before_bp():\n        evts.append('before'),type='function_definition'\nline_star:758,line_end:759|char_star:4,char_end:29"[shape="box",fillcolor="#cee6b4",style=filled];
"@bp.before_request\n    def before_bp():\n        evts.append('before'),type='decorated_definition'\nline_star:757,line_end:759|char_star:4,char_end:29"->"def before_bp():\n        evts.append('before'),type='function_definition'\nline_star:758,line_end:759|char_star:4,char_end:29";
"before_bp,type='identifier'\nline_star:758,line_end:758|char_star:8,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"def before_bp():\n        evts.append('before'),type='function_definition'\nline_star:758,line_end:759|char_star:4,char_end:29"->"before_bp,type='identifier'\nline_star:758,line_end:758|char_star:8,char_end:17";
"type='INFORMATION BLOCK'\nline_star:759,line_end:759|char_star:8,char_end:29"[shape="point",fillcolor="#121013",style=filled];
"def before_bp():\n        evts.append('before'),type='function_definition'\nline_star:758,line_end:759|char_star:4,char_end:29"->"type='INFORMATION BLOCK'\nline_star:759,line_end:759|char_star:8,char_end:29";
"@bp.after_request\n    def after_bp(response):\n        response.data += b'|after'\n        evts.append('after')\n        return response,type='decorated_definition'\nline_star:761,line_end:765|char_star:4,char_end:23"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:754,line_end:781|char_star:4,char_end:50"->"@bp.after_request\n    def after_bp(response):\n        response.data += b'|after'\n        evts.append('after')\n        return response,type='decorated_definition'\nline_star:761,line_end:765|char_star:4,char_end:23";
"@bp.after_request,type='decorator'\nline_star:761,line_end:761|char_star:4,char_end:21"[shape="box",fillcolor="white",style=filled];
"@bp.after_request\n    def after_bp(response):\n        response.data += b'|after'\n        evts.append('after')\n        return response,type='decorated_definition'\nline_star:761,line_end:765|char_star:4,char_end:23"->"@bp.after_request,type='decorator'\nline_star:761,line_end:761|char_star:4,char_end:21";
"def after_bp(response):\n        response.data += b'|after'\n        evts.append('after')\n        return response,type='function_definition'\nline_star:762,line_end:765|char_star:4,char_end:23"[shape="box",fillcolor="#cee6b4",style=filled];
"@bp.after_request\n    def after_bp(response):\n        response.data += b'|after'\n        evts.append('after')\n        return response,type='decorated_definition'\nline_star:761,line_end:765|char_star:4,char_end:23"->"def after_bp(response):\n        response.data += b'|after'\n        evts.append('after')\n        return response,type='function_definition'\nline_star:762,line_end:765|char_star:4,char_end:23";
"after_bp,type='identifier'\nline_star:762,line_end:762|char_star:8,char_end:16"[shape="point",fillcolor="#121013",style=filled];
"def after_bp(response):\n        response.data += b'|after'\n        evts.append('after')\n        return response,type='function_definition'\nline_star:762,line_end:765|char_star:4,char_end:23"->"after_bp,type='identifier'\nline_star:762,line_end:762|char_star:8,char_end:16";
"(response),type='parameters'\nline_star:762,line_end:762|char_star:16,char_end:26"[shape="box",fillcolor="white",style=filled];
"def after_bp(response):\n        response.data += b'|after'\n        evts.append('after')\n        return response,type='function_definition'\nline_star:762,line_end:765|char_star:4,char_end:23"->"(response),type='parameters'\nline_star:762,line_end:762|char_star:16,char_end:26";
"response,type='identifier'\nline_star:762,line_end:762|char_star:17,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"(response),type='parameters'\nline_star:762,line_end:762|char_star:16,char_end:26"->"response,type='identifier'\nline_star:762,line_end:762|char_star:17,char_end:25";
"type='INFORMATION BLOCK'\nline_star:763,line_end:765|char_star:8,char_end:23"[shape="point",fillcolor="#121013",style=filled];
"def after_bp(response):\n        response.data += b'|after'\n        evts.append('after')\n        return response,type='function_definition'\nline_star:762,line_end:765|char_star:4,char_end:23"->"type='INFORMATION BLOCK'\nline_star:763,line_end:765|char_star:8,char_end:23";
"return response,type='return_statement'\nline_star:765,line_end:765|char_star:8,char_end:23"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:763,line_end:765|char_star:8,char_end:23"->"return response,type='return_statement'\nline_star:765,line_end:765|char_star:8,char_end:23";
"@bp.teardown_request\n    def teardown_bp(exc):\n        evts.append('teardown'),type='decorated_definition'\nline_star:767,line_end:769|char_star:4,char_end:31"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:754,line_end:781|char_star:4,char_end:50"->"@bp.teardown_request\n    def teardown_bp(exc):\n        evts.append('teardown'),type='decorated_definition'\nline_star:767,line_end:769|char_star:4,char_end:31";
"@bp.teardown_request,type='decorator'\nline_star:767,line_end:767|char_star:4,char_end:24"[shape="box",fillcolor="white",style=filled];
"@bp.teardown_request\n    def teardown_bp(exc):\n        evts.append('teardown'),type='decorated_definition'\nline_star:767,line_end:769|char_star:4,char_end:31"->"@bp.teardown_request,type='decorator'\nline_star:767,line_end:767|char_star:4,char_end:24";
"def teardown_bp(exc):\n        evts.append('teardown'),type='function_definition'\nline_star:768,line_end:769|char_star:4,char_end:31"[shape="box",fillcolor="#cee6b4",style=filled];
"@bp.teardown_request\n    def teardown_bp(exc):\n        evts.append('teardown'),type='decorated_definition'\nline_star:767,line_end:769|char_star:4,char_end:31"->"def teardown_bp(exc):\n        evts.append('teardown'),type='function_definition'\nline_star:768,line_end:769|char_star:4,char_end:31";
"teardown_bp,type='identifier'\nline_star:768,line_end:768|char_star:8,char_end:19"[shape="point",fillcolor="#121013",style=filled];
"def teardown_bp(exc):\n        evts.append('teardown'),type='function_definition'\nline_star:768,line_end:769|char_star:4,char_end:31"->"teardown_bp,type='identifier'\nline_star:768,line_end:768|char_star:8,char_end:19";
"(exc),type='parameters'\nline_star:768,line_end:768|char_star:19,char_end:24"[shape="box",fillcolor="white",style=filled];
"def teardown_bp(exc):\n        evts.append('teardown'),type='function_definition'\nline_star:768,line_end:769|char_star:4,char_end:31"->"(exc),type='parameters'\nline_star:768,line_end:768|char_star:19,char_end:24";
"exc,type='identifier'\nline_star:768,line_end:768|char_star:20,char_end:23"[shape="point",fillcolor="#121013",style=filled];
"(exc),type='parameters'\nline_star:768,line_end:768|char_star:19,char_end:24"->"exc,type='identifier'\nline_star:768,line_end:768|char_star:20,char_end:23";
"type='INFORMATION BLOCK'\nline_star:769,line_end:769|char_star:8,char_end:31"[shape="point",fillcolor="#121013",style=filled];
"def teardown_bp(exc):\n        evts.append('teardown'),type='function_definition'\nline_star:768,line_end:769|char_star:4,char_end:31"->"type='INFORMATION BLOCK'\nline_star:769,line_end:769|char_star:8,char_end:31";
"# Setup routes for testing,type='comment'\nline_star:771,line_end:771|char_star:4,char_end:30"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:754,line_end:781|char_star:4,char_end:50"->"# Setup routes for testing,type='comment'\nline_star:771,line_end:771|char_star:4,char_end:30";
"@bp.route('/bp')\n    def bp_endpoint():\n        return 'request',type='decorated_definition'\nline_star:772,line_end:774|char_star:4,char_end:24"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:754,line_end:781|char_star:4,char_end:50"->"@bp.route('/bp')\n    def bp_endpoint():\n        return 'request',type='decorated_definition'\nline_star:772,line_end:774|char_star:4,char_end:24";
"@bp.route('/bp'),type='decorator'\nline_star:772,line_end:772|char_star:4,char_end:20"[shape="box",fillcolor="white",style=filled];
"@bp.route('/bp')\n    def bp_endpoint():\n        return 'request',type='decorated_definition'\nline_star:772,line_end:774|char_star:4,char_end:24"->"@bp.route('/bp'),type='decorator'\nline_star:772,line_end:772|char_star:4,char_end:20";
"def bp_endpoint():\n        return 'request',type='function_definition'\nline_star:773,line_end:774|char_star:4,char_end:24"[shape="box",fillcolor="#cee6b4",style=filled];
"@bp.route('/bp')\n    def bp_endpoint():\n        return 'request',type='decorated_definition'\nline_star:772,line_end:774|char_star:4,char_end:24"->"def bp_endpoint():\n        return 'request',type='function_definition'\nline_star:773,line_end:774|char_star:4,char_end:24";
"bp_endpoint,type='identifier'\nline_star:773,line_end:773|char_star:8,char_end:19"[shape="point",fillcolor="#121013",style=filled];
"def bp_endpoint():\n        return 'request',type='function_definition'\nline_star:773,line_end:774|char_star:4,char_end:24"->"bp_endpoint,type='identifier'\nline_star:773,line_end:773|char_star:8,char_end:19";
"type='INFORMATION BLOCK'\nline_star:774,line_end:774|char_star:8,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"def bp_endpoint():\n        return 'request',type='function_definition'\nline_star:773,line_end:774|char_star:4,char_end:24"->"type='INFORMATION BLOCK'\nline_star:774,line_end:774|char_star:8,char_end:24";
"return 'request',type='return_statement'\nline_star:774,line_end:774|char_star:8,char_end:24"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:774,line_end:774|char_star:8,char_end:24"->"return 'request',type='return_statement'\nline_star:774,line_end:774|char_star:8,char_end:24";
"assert evts == [],type='assert_statement'\nline_star:778,line_end:778|char_star:4,char_end:21"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:754,line_end:781|char_star:4,char_end:50"->"assert evts == [],type='assert_statement'\nline_star:778,line_end:778|char_star:4,char_end:21";
"evts == [],type='comparison_operator'\nline_star:778,line_end:778|char_star:11,char_end:21"[shape="box",fillcolor="white",style=filled];
"assert evts == [],type='assert_statement'\nline_star:778,line_end:778|char_star:4,char_end:21"->"evts == [],type='comparison_operator'\nline_star:778,line_end:778|char_star:11,char_end:21";
"evts,type='identifier'\nline_star:778,line_end:778|char_star:11,char_end:15"[shape="point",fillcolor="#121013",style=filled];
"evts == [],type='comparison_operator'\nline_star:778,line_end:778|char_star:11,char_end:21"->"evts,type='identifier'\nline_star:778,line_end:778|char_star:11,char_end:15";
"assert rv.data == b'request|after',type='assert_statement'\nline_star:780,line_end:780|char_star:4,char_end:38"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:754,line_end:781|char_star:4,char_end:50"->"assert rv.data == b'request|after',type='assert_statement'\nline_star:780,line_end:780|char_star:4,char_end:38";
"rv.data == b'request|after',type='comparison_operator'\nline_star:780,line_end:780|char_star:11,char_end:38"[shape="box",fillcolor="white",style=filled];
"assert rv.data == b'request|after',type='assert_statement'\nline_star:780,line_end:780|char_star:4,char_end:38"->"rv.data == b'request|after',type='comparison_operator'\nline_star:780,line_end:780|char_star:11,char_end:38";
"rv.data,type='attribute'\nline_star:780,line_end:780|char_star:11,char_end:18"[shape="box",fillcolor="white",style=filled];
"rv.data == b'request|after',type='comparison_operator'\nline_star:780,line_end:780|char_star:11,char_end:38"->"rv.data,type='attribute'\nline_star:780,line_end:780|char_star:11,char_end:18";
"rv,type='identifier'\nline_star:780,line_end:780|char_star:11,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"rv.data,type='attribute'\nline_star:780,line_end:780|char_star:11,char_end:18"->"rv,type='identifier'\nline_star:780,line_end:780|char_star:11,char_end:13";
"data,type='identifier'\nline_star:780,line_end:780|char_star:14,char_end:18"[shape="point",fillcolor="#121013",style=filled];
"rv.data,type='attribute'\nline_star:780,line_end:780|char_star:11,char_end:18"->"data,type='identifier'\nline_star:780,line_end:780|char_star:14,char_end:18";
"assert evts == ['before', 'after', 'teardown'],type='assert_statement'\nline_star:781,line_end:781|char_star:4,char_end:50"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:754,line_end:781|char_star:4,char_end:50"->"assert evts == ['before', 'after', 'teardown'],type='assert_statement'\nline_star:781,line_end:781|char_star:4,char_end:50";
"evts == ['before', 'after', 'teardown'],type='comparison_operator'\nline_star:781,line_end:781|char_star:11,char_end:50"[shape="box",fillcolor="white",style=filled];
"assert evts == ['before', 'after', 'teardown'],type='assert_statement'\nline_star:781,line_end:781|char_star:4,char_end:50"->"evts == ['before', 'after', 'teardown'],type='comparison_operator'\nline_star:781,line_end:781|char_star:11,char_end:50";
"evts,type='identifier'\nline_star:781,line_end:781|char_star:11,char_end:15"[shape="point",fillcolor="#121013",style=filled];
"evts == ['before', 'after', 'teardown'],type='comparison_operator'\nline_star:781,line_end:781|char_star:11,char_end:50"->"evts,type='identifier'\nline_star:781,line_end:781|char_star:11,char_end:15";
"['before', 'after', 'teardown'],type='list'\nline_star:781,line_end:781|char_star:19,char_end:50"[shape="box",fillcolor="white",style=filled];
"evts == ['before', 'after', 'teardown'],type='comparison_operator'\nline_star:781,line_end:781|char_star:11,char_end:50"->"['before', 'after', 'teardown'],type='list'\nline_star:781,line_end:781|char_star:19,char_end:50";
"def test_app_request_processing(app, client):\n    bp = flask.Blueprint('bp', __name__)\n    evts = []\n\n    @bp.before_app_first_request\n    def before_first_request():\n        evts.append('first')\n\n    @bp.before_app_request\n    def before_app():\n        evts.append('before')\n\n    @bp.after_app_request\n    def after_app(response):\n        response.data += b'|after'\n        evts.append('after')\n        return response\n\n    @bp.teardown_app_request\n    def teardown_app(exc):\n        evts.append('teardown')\n\n    app.register_blueprint(bp)\n\n    # Setup routes for testing\n    @app.route('/')\n    def bp_endpoint():\n        return 'request'\n\n    # before first request\n    assert evts == []\n\n    # first request\n    resp = client.get('/').data\n    assert resp == b'request|after'\n    assert evts == ['first', 'before', 'after', 'teardown']\n\n    # second request\n    resp = client.get('/').data\n    assert resp == b'request|after'\n    assert evts == ['first'] + ['before', 'after', 'teardown'] * 2,type='function_definition'\nline_star:784,line_end:824|char_star:0,char_end:66"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_app_request_processing(app, client):\n    bp = flask.Blueprint('bp', __name__)\n    evts = []\n\n    @bp.before_app_first_request\n    def before_first_request():\n        evts.append('first')\n\n    @bp.before_app_request\n    def before_app():\n        evts.append('before')\n\n    @bp.after_app_request\n    def after_app(response):\n        response.data += b'|after'\n        evts.append('after')\n        return response\n\n    @bp.teardown_app_request\n    def teardown_app(exc):\n        evts.append('teardown')\n\n    app.register_blueprint(bp)\n\n    # Setup routes for testing\n    @app.route('/')\n    def bp_endpoint():\n        return 'request'\n\n    # before first request\n    assert evts == []\n\n    # first request\n    resp = client.get('/').data\n    assert resp == b'request|after'\n    assert evts == ['first', 'before', 'after', 'teardown']\n\n    # second request\n    resp = client.get('/').data\n    assert resp == b'request|after'\n    assert evts == ['first'] + ['before', 'after', 'teardown'] * 2,type='function_definition'\nline_star:784,line_end:824|char_star:0,char_end:66";
"test_app_request_processing,type='identifier'\nline_star:784,line_end:784|char_star:4,char_end:31"[shape="point",fillcolor="#121013",style=filled];
"def test_app_request_processing(app, client):\n    bp = flask.Blueprint('bp', __name__)\n    evts = []\n\n    @bp.before_app_first_request\n    def before_first_request():\n        evts.append('first')\n\n    @bp.before_app_request\n    def before_app():\n        evts.append('before')\n\n    @bp.after_app_request\n    def after_app(response):\n        response.data += b'|after'\n        evts.append('after')\n        return response\n\n    @bp.teardown_app_request\n    def teardown_app(exc):\n        evts.append('teardown')\n\n    app.register_blueprint(bp)\n\n    # Setup routes for testing\n    @app.route('/')\n    def bp_endpoint():\n        return 'request'\n\n    # before first request\n    assert evts == []\n\n    # first request\n    resp = client.get('/').data\n    assert resp == b'request|after'\n    assert evts == ['first', 'before', 'after', 'teardown']\n\n    # second request\n    resp = client.get('/').data\n    assert resp == b'request|after'\n    assert evts == ['first'] + ['before', 'after', 'teardown'] * 2,type='function_definition'\nline_star:784,line_end:824|char_star:0,char_end:66"->"test_app_request_processing,type='identifier'\nline_star:784,line_end:784|char_star:4,char_end:31";
"(app, client),type='parameters'\nline_star:784,line_end:784|char_star:31,char_end:44"[shape="box",fillcolor="white",style=filled];
"def test_app_request_processing(app, client):\n    bp = flask.Blueprint('bp', __name__)\n    evts = []\n\n    @bp.before_app_first_request\n    def before_first_request():\n        evts.append('first')\n\n    @bp.before_app_request\n    def before_app():\n        evts.append('before')\n\n    @bp.after_app_request\n    def after_app(response):\n        response.data += b'|after'\n        evts.append('after')\n        return response\n\n    @bp.teardown_app_request\n    def teardown_app(exc):\n        evts.append('teardown')\n\n    app.register_blueprint(bp)\n\n    # Setup routes for testing\n    @app.route('/')\n    def bp_endpoint():\n        return 'request'\n\n    # before first request\n    assert evts == []\n\n    # first request\n    resp = client.get('/').data\n    assert resp == b'request|after'\n    assert evts == ['first', 'before', 'after', 'teardown']\n\n    # second request\n    resp = client.get('/').data\n    assert resp == b'request|after'\n    assert evts == ['first'] + ['before', 'after', 'teardown'] * 2,type='function_definition'\nline_star:784,line_end:824|char_star:0,char_end:66"->"(app, client),type='parameters'\nline_star:784,line_end:784|char_star:31,char_end:44";
"app,type='identifier'\nline_star:784,line_end:784|char_star:32,char_end:35"[shape="point",fillcolor="#121013",style=filled];
"(app, client),type='parameters'\nline_star:784,line_end:784|char_star:31,char_end:44"->"app,type='identifier'\nline_star:784,line_end:784|char_star:32,char_end:35";
"client,type='identifier'\nline_star:784,line_end:784|char_star:37,char_end:43"[shape="point",fillcolor="#121013",style=filled];
"(app, client),type='parameters'\nline_star:784,line_end:784|char_star:31,char_end:44"->"client,type='identifier'\nline_star:784,line_end:784|char_star:37,char_end:43";
"type='INFORMATION BLOCK'\nline_star:785,line_end:824|char_star:4,char_end:66"[shape="point",fillcolor="#121013",style=filled];
"def test_app_request_processing(app, client):\n    bp = flask.Blueprint('bp', __name__)\n    evts = []\n\n    @bp.before_app_first_request\n    def before_first_request():\n        evts.append('first')\n\n    @bp.before_app_request\n    def before_app():\n        evts.append('before')\n\n    @bp.after_app_request\n    def after_app(response):\n        response.data += b'|after'\n        evts.append('after')\n        return response\n\n    @bp.teardown_app_request\n    def teardown_app(exc):\n        evts.append('teardown')\n\n    app.register_blueprint(bp)\n\n    # Setup routes for testing\n    @app.route('/')\n    def bp_endpoint():\n        return 'request'\n\n    # before first request\n    assert evts == []\n\n    # first request\n    resp = client.get('/').data\n    assert resp == b'request|after'\n    assert evts == ['first', 'before', 'after', 'teardown']\n\n    # second request\n    resp = client.get('/').data\n    assert resp == b'request|after'\n    assert evts == ['first'] + ['before', 'after', 'teardown'] * 2,type='function_definition'\nline_star:784,line_end:824|char_star:0,char_end:66"->"type='INFORMATION BLOCK'\nline_star:785,line_end:824|char_star:4,char_end:66";
"@bp.before_app_first_request\n    def before_first_request():\n        evts.append('first'),type='decorated_definition'\nline_star:788,line_end:790|char_star:4,char_end:28"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:785,line_end:824|char_star:4,char_end:66"->"@bp.before_app_first_request\n    def before_first_request():\n        evts.append('first'),type='decorated_definition'\nline_star:788,line_end:790|char_star:4,char_end:28";
"@bp.before_app_first_request,type='decorator'\nline_star:788,line_end:788|char_star:4,char_end:32"[shape="box",fillcolor="white",style=filled];
"@bp.before_app_first_request\n    def before_first_request():\n        evts.append('first'),type='decorated_definition'\nline_star:788,line_end:790|char_star:4,char_end:28"->"@bp.before_app_first_request,type='decorator'\nline_star:788,line_end:788|char_star:4,char_end:32";
"def before_first_request():\n        evts.append('first'),type='function_definition'\nline_star:789,line_end:790|char_star:4,char_end:28"[shape="box",fillcolor="#cee6b4",style=filled];
"@bp.before_app_first_request\n    def before_first_request():\n        evts.append('first'),type='decorated_definition'\nline_star:788,line_end:790|char_star:4,char_end:28"->"def before_first_request():\n        evts.append('first'),type='function_definition'\nline_star:789,line_end:790|char_star:4,char_end:28";
"before_first_request,type='identifier'\nline_star:789,line_end:789|char_star:8,char_end:28"[shape="point",fillcolor="#121013",style=filled];
"def before_first_request():\n        evts.append('first'),type='function_definition'\nline_star:789,line_end:790|char_star:4,char_end:28"->"before_first_request,type='identifier'\nline_star:789,line_end:789|char_star:8,char_end:28";
"type='INFORMATION BLOCK'\nline_star:790,line_end:790|char_star:8,char_end:28"[shape="point",fillcolor="#121013",style=filled];
"def before_first_request():\n        evts.append('first'),type='function_definition'\nline_star:789,line_end:790|char_star:4,char_end:28"->"type='INFORMATION BLOCK'\nline_star:790,line_end:790|char_star:8,char_end:28";
"@bp.before_app_request\n    def before_app():\n        evts.append('before'),type='decorated_definition'\nline_star:792,line_end:794|char_star:4,char_end:29"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:785,line_end:824|char_star:4,char_end:66"->"@bp.before_app_request\n    def before_app():\n        evts.append('before'),type='decorated_definition'\nline_star:792,line_end:794|char_star:4,char_end:29";
"@bp.before_app_request,type='decorator'\nline_star:792,line_end:792|char_star:4,char_end:26"[shape="box",fillcolor="white",style=filled];
"@bp.before_app_request\n    def before_app():\n        evts.append('before'),type='decorated_definition'\nline_star:792,line_end:794|char_star:4,char_end:29"->"@bp.before_app_request,type='decorator'\nline_star:792,line_end:792|char_star:4,char_end:26";
"def before_app():\n        evts.append('before'),type='function_definition'\nline_star:793,line_end:794|char_star:4,char_end:29"[shape="box",fillcolor="#cee6b4",style=filled];
"@bp.before_app_request\n    def before_app():\n        evts.append('before'),type='decorated_definition'\nline_star:792,line_end:794|char_star:4,char_end:29"->"def before_app():\n        evts.append('before'),type='function_definition'\nline_star:793,line_end:794|char_star:4,char_end:29";
"before_app,type='identifier'\nline_star:793,line_end:793|char_star:8,char_end:18"[shape="point",fillcolor="#121013",style=filled];
"def before_app():\n        evts.append('before'),type='function_definition'\nline_star:793,line_end:794|char_star:4,char_end:29"->"before_app,type='identifier'\nline_star:793,line_end:793|char_star:8,char_end:18";
"type='INFORMATION BLOCK'\nline_star:794,line_end:794|char_star:8,char_end:29"[shape="point",fillcolor="#121013",style=filled];
"def before_app():\n        evts.append('before'),type='function_definition'\nline_star:793,line_end:794|char_star:4,char_end:29"->"type='INFORMATION BLOCK'\nline_star:794,line_end:794|char_star:8,char_end:29";
"@bp.after_app_request\n    def after_app(response):\n        response.data += b'|after'\n        evts.append('after')\n        return response,type='decorated_definition'\nline_star:796,line_end:800|char_star:4,char_end:23"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:785,line_end:824|char_star:4,char_end:66"->"@bp.after_app_request\n    def after_app(response):\n        response.data += b'|after'\n        evts.append('after')\n        return response,type='decorated_definition'\nline_star:796,line_end:800|char_star:4,char_end:23";
"@bp.after_app_request,type='decorator'\nline_star:796,line_end:796|char_star:4,char_end:25"[shape="box",fillcolor="white",style=filled];
"@bp.after_app_request\n    def after_app(response):\n        response.data += b'|after'\n        evts.append('after')\n        return response,type='decorated_definition'\nline_star:796,line_end:800|char_star:4,char_end:23"->"@bp.after_app_request,type='decorator'\nline_star:796,line_end:796|char_star:4,char_end:25";
"def after_app(response):\n        response.data += b'|after'\n        evts.append('after')\n        return response,type='function_definition'\nline_star:797,line_end:800|char_star:4,char_end:23"[shape="box",fillcolor="#cee6b4",style=filled];
"@bp.after_app_request\n    def after_app(response):\n        response.data += b'|after'\n        evts.append('after')\n        return response,type='decorated_definition'\nline_star:796,line_end:800|char_star:4,char_end:23"->"def after_app(response):\n        response.data += b'|after'\n        evts.append('after')\n        return response,type='function_definition'\nline_star:797,line_end:800|char_star:4,char_end:23";
"after_app,type='identifier'\nline_star:797,line_end:797|char_star:8,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"def after_app(response):\n        response.data += b'|after'\n        evts.append('after')\n        return response,type='function_definition'\nline_star:797,line_end:800|char_star:4,char_end:23"->"after_app,type='identifier'\nline_star:797,line_end:797|char_star:8,char_end:17";
"(response),type='parameters'\nline_star:797,line_end:797|char_star:17,char_end:27"[shape="box",fillcolor="white",style=filled];
"def after_app(response):\n        response.data += b'|after'\n        evts.append('after')\n        return response,type='function_definition'\nline_star:797,line_end:800|char_star:4,char_end:23"->"(response),type='parameters'\nline_star:797,line_end:797|char_star:17,char_end:27";
"response,type='identifier'\nline_star:797,line_end:797|char_star:18,char_end:26"[shape="point",fillcolor="#121013",style=filled];
"(response),type='parameters'\nline_star:797,line_end:797|char_star:17,char_end:27"->"response,type='identifier'\nline_star:797,line_end:797|char_star:18,char_end:26";
"type='INFORMATION BLOCK'\nline_star:798,line_end:800|char_star:8,char_end:23"[shape="point",fillcolor="#121013",style=filled];
"def after_app(response):\n        response.data += b'|after'\n        evts.append('after')\n        return response,type='function_definition'\nline_star:797,line_end:800|char_star:4,char_end:23"->"type='INFORMATION BLOCK'\nline_star:798,line_end:800|char_star:8,char_end:23";
"return response,type='return_statement'\nline_star:800,line_end:800|char_star:8,char_end:23"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:798,line_end:800|char_star:8,char_end:23"->"return response,type='return_statement'\nline_star:800,line_end:800|char_star:8,char_end:23";
"@bp.teardown_app_request\n    def teardown_app(exc):\n        evts.append('teardown'),type='decorated_definition'\nline_star:802,line_end:804|char_star:4,char_end:31"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:785,line_end:824|char_star:4,char_end:66"->"@bp.teardown_app_request\n    def teardown_app(exc):\n        evts.append('teardown'),type='decorated_definition'\nline_star:802,line_end:804|char_star:4,char_end:31";
"@bp.teardown_app_request,type='decorator'\nline_star:802,line_end:802|char_star:4,char_end:28"[shape="box",fillcolor="white",style=filled];
"@bp.teardown_app_request\n    def teardown_app(exc):\n        evts.append('teardown'),type='decorated_definition'\nline_star:802,line_end:804|char_star:4,char_end:31"->"@bp.teardown_app_request,type='decorator'\nline_star:802,line_end:802|char_star:4,char_end:28";
"def teardown_app(exc):\n        evts.append('teardown'),type='function_definition'\nline_star:803,line_end:804|char_star:4,char_end:31"[shape="box",fillcolor="#cee6b4",style=filled];
"@bp.teardown_app_request\n    def teardown_app(exc):\n        evts.append('teardown'),type='decorated_definition'\nline_star:802,line_end:804|char_star:4,char_end:31"->"def teardown_app(exc):\n        evts.append('teardown'),type='function_definition'\nline_star:803,line_end:804|char_star:4,char_end:31";
"teardown_app,type='identifier'\nline_star:803,line_end:803|char_star:8,char_end:20"[shape="point",fillcolor="#121013",style=filled];
"def teardown_app(exc):\n        evts.append('teardown'),type='function_definition'\nline_star:803,line_end:804|char_star:4,char_end:31"->"teardown_app,type='identifier'\nline_star:803,line_end:803|char_star:8,char_end:20";
"(exc),type='parameters'\nline_star:803,line_end:803|char_star:20,char_end:25"[shape="box",fillcolor="white",style=filled];
"def teardown_app(exc):\n        evts.append('teardown'),type='function_definition'\nline_star:803,line_end:804|char_star:4,char_end:31"->"(exc),type='parameters'\nline_star:803,line_end:803|char_star:20,char_end:25";
"exc,type='identifier'\nline_star:803,line_end:803|char_star:21,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"(exc),type='parameters'\nline_star:803,line_end:803|char_star:20,char_end:25"->"exc,type='identifier'\nline_star:803,line_end:803|char_star:21,char_end:24";
"type='INFORMATION BLOCK'\nline_star:804,line_end:804|char_star:8,char_end:31"[shape="point",fillcolor="#121013",style=filled];
"def teardown_app(exc):\n        evts.append('teardown'),type='function_definition'\nline_star:803,line_end:804|char_star:4,char_end:31"->"type='INFORMATION BLOCK'\nline_star:804,line_end:804|char_star:8,char_end:31";
"# Setup routes for testing,type='comment'\nline_star:808,line_end:808|char_star:4,char_end:30"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:785,line_end:824|char_star:4,char_end:66"->"# Setup routes for testing,type='comment'\nline_star:808,line_end:808|char_star:4,char_end:30";
"@app.route('/')\n    def bp_endpoint():\n        return 'request',type='decorated_definition'\nline_star:809,line_end:811|char_star:4,char_end:24"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:785,line_end:824|char_star:4,char_end:66"->"@app.route('/')\n    def bp_endpoint():\n        return 'request',type='decorated_definition'\nline_star:809,line_end:811|char_star:4,char_end:24";
"@app.route('/'),type='decorator'\nline_star:809,line_end:809|char_star:4,char_end:19"[shape="box",fillcolor="white",style=filled];
"@app.route('/')\n    def bp_endpoint():\n        return 'request',type='decorated_definition'\nline_star:809,line_end:811|char_star:4,char_end:24"->"@app.route('/'),type='decorator'\nline_star:809,line_end:809|char_star:4,char_end:19";
"def bp_endpoint():\n        return 'request',type='function_definition'\nline_star:810,line_end:811|char_star:4,char_end:24"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.route('/')\n    def bp_endpoint():\n        return 'request',type='decorated_definition'\nline_star:809,line_end:811|char_star:4,char_end:24"->"def bp_endpoint():\n        return 'request',type='function_definition'\nline_star:810,line_end:811|char_star:4,char_end:24";
"bp_endpoint,type='identifier'\nline_star:810,line_end:810|char_star:8,char_end:19"[shape="point",fillcolor="#121013",style=filled];
"def bp_endpoint():\n        return 'request',type='function_definition'\nline_star:810,line_end:811|char_star:4,char_end:24"->"bp_endpoint,type='identifier'\nline_star:810,line_end:810|char_star:8,char_end:19";
"type='INFORMATION BLOCK'\nline_star:811,line_end:811|char_star:8,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"def bp_endpoint():\n        return 'request',type='function_definition'\nline_star:810,line_end:811|char_star:4,char_end:24"->"type='INFORMATION BLOCK'\nline_star:811,line_end:811|char_star:8,char_end:24";
"return 'request',type='return_statement'\nline_star:811,line_end:811|char_star:8,char_end:24"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:811,line_end:811|char_star:8,char_end:24"->"return 'request',type='return_statement'\nline_star:811,line_end:811|char_star:8,char_end:24";
"# before first request,type='comment'\nline_star:813,line_end:813|char_star:4,char_end:26"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:785,line_end:824|char_star:4,char_end:66"->"# before first request,type='comment'\nline_star:813,line_end:813|char_star:4,char_end:26";
"assert evts == [],type='assert_statement'\nline_star:814,line_end:814|char_star:4,char_end:21"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:785,line_end:824|char_star:4,char_end:66"->"assert evts == [],type='assert_statement'\nline_star:814,line_end:814|char_star:4,char_end:21";
"evts == [],type='comparison_operator'\nline_star:814,line_end:814|char_star:11,char_end:21"[shape="box",fillcolor="white",style=filled];
"assert evts == [],type='assert_statement'\nline_star:814,line_end:814|char_star:4,char_end:21"->"evts == [],type='comparison_operator'\nline_star:814,line_end:814|char_star:11,char_end:21";
"evts,type='identifier'\nline_star:814,line_end:814|char_star:11,char_end:15"[shape="point",fillcolor="#121013",style=filled];
"evts == [],type='comparison_operator'\nline_star:814,line_end:814|char_star:11,char_end:21"->"evts,type='identifier'\nline_star:814,line_end:814|char_star:11,char_end:15";
"# first request,type='comment'\nline_star:816,line_end:816|char_star:4,char_end:19"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:785,line_end:824|char_star:4,char_end:66"->"# first request,type='comment'\nline_star:816,line_end:816|char_star:4,char_end:19";
"assert resp == b'request|after',type='assert_statement'\nline_star:818,line_end:818|char_star:4,char_end:35"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:785,line_end:824|char_star:4,char_end:66"->"assert resp == b'request|after',type='assert_statement'\nline_star:818,line_end:818|char_star:4,char_end:35";
"resp == b'request|after',type='comparison_operator'\nline_star:818,line_end:818|char_star:11,char_end:35"[shape="box",fillcolor="white",style=filled];
"assert resp == b'request|after',type='assert_statement'\nline_star:818,line_end:818|char_star:4,char_end:35"->"resp == b'request|after',type='comparison_operator'\nline_star:818,line_end:818|char_star:11,char_end:35";
"resp,type='identifier'\nline_star:818,line_end:818|char_star:11,char_end:15"[shape="point",fillcolor="#121013",style=filled];
"resp == b'request|after',type='comparison_operator'\nline_star:818,line_end:818|char_star:11,char_end:35"->"resp,type='identifier'\nline_star:818,line_end:818|char_star:11,char_end:15";
"assert evts == ['first', 'before', 'after', 'teardown'],type='assert_statement'\nline_star:819,line_end:819|char_star:4,char_end:59"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:785,line_end:824|char_star:4,char_end:66"->"assert evts == ['first', 'before', 'after', 'teardown'],type='assert_statement'\nline_star:819,line_end:819|char_star:4,char_end:59";
"evts == ['first', 'before', 'after', 'teardown'],type='comparison_operator'\nline_star:819,line_end:819|char_star:11,char_end:59"[shape="box",fillcolor="white",style=filled];
"assert evts == ['first', 'before', 'after', 'teardown'],type='assert_statement'\nline_star:819,line_end:819|char_star:4,char_end:59"->"evts == ['first', 'before', 'after', 'teardown'],type='comparison_operator'\nline_star:819,line_end:819|char_star:11,char_end:59";
"evts,type='identifier'\nline_star:819,line_end:819|char_star:11,char_end:15"[shape="point",fillcolor="#121013",style=filled];
"evts == ['first', 'before', 'after', 'teardown'],type='comparison_operator'\nline_star:819,line_end:819|char_star:11,char_end:59"->"evts,type='identifier'\nline_star:819,line_end:819|char_star:11,char_end:15";
"['first', 'before', 'after', 'teardown'],type='list'\nline_star:819,line_end:819|char_star:19,char_end:59"[shape="box",fillcolor="white",style=filled];
"evts == ['first', 'before', 'after', 'teardown'],type='comparison_operator'\nline_star:819,line_end:819|char_star:11,char_end:59"->"['first', 'before', 'after', 'teardown'],type='list'\nline_star:819,line_end:819|char_star:19,char_end:59";
"# second request,type='comment'\nline_star:821,line_end:821|char_star:4,char_end:20"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:785,line_end:824|char_star:4,char_end:66"->"# second request,type='comment'\nline_star:821,line_end:821|char_star:4,char_end:20";
"assert resp == b'request|after',type='assert_statement'\nline_star:823,line_end:823|char_star:4,char_end:35"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:785,line_end:824|char_star:4,char_end:66"->"assert resp == b'request|after',type='assert_statement'\nline_star:823,line_end:823|char_star:4,char_end:35";
"resp == b'request|after',type='comparison_operator'\nline_star:823,line_end:823|char_star:11,char_end:35"[shape="box",fillcolor="white",style=filled];
"assert resp == b'request|after',type='assert_statement'\nline_star:823,line_end:823|char_star:4,char_end:35"->"resp == b'request|after',type='comparison_operator'\nline_star:823,line_end:823|char_star:11,char_end:35";
"resp,type='identifier'\nline_star:823,line_end:823|char_star:11,char_end:15"[shape="point",fillcolor="#121013",style=filled];
"resp == b'request|after',type='comparison_operator'\nline_star:823,line_end:823|char_star:11,char_end:35"->"resp,type='identifier'\nline_star:823,line_end:823|char_star:11,char_end:15";
"assert evts == ['first'] + ['before', 'after', 'teardown'] * 2,type='assert_statement'\nline_star:824,line_end:824|char_star:4,char_end:66"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:785,line_end:824|char_star:4,char_end:66"->"assert evts == ['first'] + ['before', 'after', 'teardown'] * 2,type='assert_statement'\nline_star:824,line_end:824|char_star:4,char_end:66";
"evts == ['first'] + ['before', 'after', 'teardown'] * 2,type='comparison_operator'\nline_star:824,line_end:824|char_star:11,char_end:66"[shape="box",fillcolor="white",style=filled];
"assert evts == ['first'] + ['before', 'after', 'teardown'] * 2,type='assert_statement'\nline_star:824,line_end:824|char_star:4,char_end:66"->"evts == ['first'] + ['before', 'after', 'teardown'] * 2,type='comparison_operator'\nline_star:824,line_end:824|char_star:11,char_end:66";
"evts,type='identifier'\nline_star:824,line_end:824|char_star:11,char_end:15"[shape="point",fillcolor="#121013",style=filled];
"evts == ['first'] + ['before', 'after', 'teardown'] * 2,type='comparison_operator'\nline_star:824,line_end:824|char_star:11,char_end:66"->"evts,type='identifier'\nline_star:824,line_end:824|char_star:11,char_end:15";
"['first'] + ['before', 'after', 'teardown'] * 2,type='binary_operator'\nline_star:824,line_end:824|char_star:19,char_end:66"[shape="box",fillcolor="white",style=filled];
"evts == ['first'] + ['before', 'after', 'teardown'] * 2,type='comparison_operator'\nline_star:824,line_end:824|char_star:11,char_end:66"->"['first'] + ['before', 'after', 'teardown'] * 2,type='binary_operator'\nline_star:824,line_end:824|char_star:19,char_end:66";
"['first'],type='list'\nline_star:824,line_end:824|char_star:19,char_end:28"[shape="box",fillcolor="white",style=filled];
"['first'] + ['before', 'after', 'teardown'] * 2,type='binary_operator'\nline_star:824,line_end:824|char_star:19,char_end:66"->"['first'],type='list'\nline_star:824,line_end:824|char_star:19,char_end:28";
"+,type='+'\nline_star:824,line_end:824|char_star:29,char_end:30"[shape="box",fillcolor="white",style=filled];
"['first'] + ['before', 'after', 'teardown'] * 2,type='binary_operator'\nline_star:824,line_end:824|char_star:19,char_end:66"->"+,type='+'\nline_star:824,line_end:824|char_star:29,char_end:30";
"['before', 'after', 'teardown'] * 2,type='binary_operator'\nline_star:824,line_end:824|char_star:31,char_end:66"[shape="box",fillcolor="white",style=filled];
"['first'] + ['before', 'after', 'teardown'] * 2,type='binary_operator'\nline_star:824,line_end:824|char_star:19,char_end:66"->"['before', 'after', 'teardown'] * 2,type='binary_operator'\nline_star:824,line_end:824|char_star:31,char_end:66";
"['before', 'after', 'teardown'],type='list'\nline_star:824,line_end:824|char_star:31,char_end:62"[shape="box",fillcolor="white",style=filled];
"['before', 'after', 'teardown'] * 2,type='binary_operator'\nline_star:824,line_end:824|char_star:31,char_end:66"->"['before', 'after', 'teardown'],type='list'\nline_star:824,line_end:824|char_star:31,char_end:62";
"*,type='*'\nline_star:824,line_end:824|char_star:63,char_end:64"[shape="box",fillcolor="white",style=filled];
"['before', 'after', 'teardown'] * 2,type='binary_operator'\nline_star:824,line_end:824|char_star:31,char_end:66"->"*,type='*'\nline_star:824,line_end:824|char_star:63,char_end:64";
"def test_app_url_processors(app, client):\n    bp = flask.Blueprint('bp', __name__)\n\n    # Register app-wide url defaults and preprocessor on blueprint\n    @bp.app_url_defaults\n    def add_language_code(endpoint, values):\n        values.setdefault('lang_code', flask.g.lang_code)\n\n    @bp.app_url_value_preprocessor\n    def pull_lang_code(endpoint, values):\n        flask.g.lang_code = values.pop('lang_code')\n\n    # Register route rules at the app level\n    @app.route('/<lang_code>/')\n    def index():\n        return flask.url_for('about')\n\n    @app.route('/<lang_code>/about')\n    def about():\n        return flask.url_for('index')\n\n    app.register_blueprint(bp)\n\n    assert client.get('/de/').data == b'/de/about'\n    assert client.get('/de/about').data == b'/de/',type='function_definition'\nline_star:827,line_end:851|char_star:0,char_end:50"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_app_url_processors(app, client):\n    bp = flask.Blueprint('bp', __name__)\n\n    # Register app-wide url defaults and preprocessor on blueprint\n    @bp.app_url_defaults\n    def add_language_code(endpoint, values):\n        values.setdefault('lang_code', flask.g.lang_code)\n\n    @bp.app_url_value_preprocessor\n    def pull_lang_code(endpoint, values):\n        flask.g.lang_code = values.pop('lang_code')\n\n    # Register route rules at the app level\n    @app.route('/<lang_code>/')\n    def index():\n        return flask.url_for('about')\n\n    @app.route('/<lang_code>/about')\n    def about():\n        return flask.url_for('index')\n\n    app.register_blueprint(bp)\n\n    assert client.get('/de/').data == b'/de/about'\n    assert client.get('/de/about').data == b'/de/',type='function_definition'\nline_star:827,line_end:851|char_star:0,char_end:50";
"test_app_url_processors,type='identifier'\nline_star:827,line_end:827|char_star:4,char_end:27"[shape="point",fillcolor="#121013",style=filled];
"def test_app_url_processors(app, client):\n    bp = flask.Blueprint('bp', __name__)\n\n    # Register app-wide url defaults and preprocessor on blueprint\n    @bp.app_url_defaults\n    def add_language_code(endpoint, values):\n        values.setdefault('lang_code', flask.g.lang_code)\n\n    @bp.app_url_value_preprocessor\n    def pull_lang_code(endpoint, values):\n        flask.g.lang_code = values.pop('lang_code')\n\n    # Register route rules at the app level\n    @app.route('/<lang_code>/')\n    def index():\n        return flask.url_for('about')\n\n    @app.route('/<lang_code>/about')\n    def about():\n        return flask.url_for('index')\n\n    app.register_blueprint(bp)\n\n    assert client.get('/de/').data == b'/de/about'\n    assert client.get('/de/about').data == b'/de/',type='function_definition'\nline_star:827,line_end:851|char_star:0,char_end:50"->"test_app_url_processors,type='identifier'\nline_star:827,line_end:827|char_star:4,char_end:27";
"(app, client),type='parameters'\nline_star:827,line_end:827|char_star:27,char_end:40"[shape="box",fillcolor="white",style=filled];
"def test_app_url_processors(app, client):\n    bp = flask.Blueprint('bp', __name__)\n\n    # Register app-wide url defaults and preprocessor on blueprint\n    @bp.app_url_defaults\n    def add_language_code(endpoint, values):\n        values.setdefault('lang_code', flask.g.lang_code)\n\n    @bp.app_url_value_preprocessor\n    def pull_lang_code(endpoint, values):\n        flask.g.lang_code = values.pop('lang_code')\n\n    # Register route rules at the app level\n    @app.route('/<lang_code>/')\n    def index():\n        return flask.url_for('about')\n\n    @app.route('/<lang_code>/about')\n    def about():\n        return flask.url_for('index')\n\n    app.register_blueprint(bp)\n\n    assert client.get('/de/').data == b'/de/about'\n    assert client.get('/de/about').data == b'/de/',type='function_definition'\nline_star:827,line_end:851|char_star:0,char_end:50"->"(app, client),type='parameters'\nline_star:827,line_end:827|char_star:27,char_end:40";
"app,type='identifier'\nline_star:827,line_end:827|char_star:28,char_end:31"[shape="point",fillcolor="#121013",style=filled];
"(app, client),type='parameters'\nline_star:827,line_end:827|char_star:27,char_end:40"->"app,type='identifier'\nline_star:827,line_end:827|char_star:28,char_end:31";
"client,type='identifier'\nline_star:827,line_end:827|char_star:33,char_end:39"[shape="point",fillcolor="#121013",style=filled];
"(app, client),type='parameters'\nline_star:827,line_end:827|char_star:27,char_end:40"->"client,type='identifier'\nline_star:827,line_end:827|char_star:33,char_end:39";
"type='INFORMATION BLOCK'\nline_star:828,line_end:851|char_star:4,char_end:50"[shape="point",fillcolor="#121013",style=filled];
"def test_app_url_processors(app, client):\n    bp = flask.Blueprint('bp', __name__)\n\n    # Register app-wide url defaults and preprocessor on blueprint\n    @bp.app_url_defaults\n    def add_language_code(endpoint, values):\n        values.setdefault('lang_code', flask.g.lang_code)\n\n    @bp.app_url_value_preprocessor\n    def pull_lang_code(endpoint, values):\n        flask.g.lang_code = values.pop('lang_code')\n\n    # Register route rules at the app level\n    @app.route('/<lang_code>/')\n    def index():\n        return flask.url_for('about')\n\n    @app.route('/<lang_code>/about')\n    def about():\n        return flask.url_for('index')\n\n    app.register_blueprint(bp)\n\n    assert client.get('/de/').data == b'/de/about'\n    assert client.get('/de/about').data == b'/de/',type='function_definition'\nline_star:827,line_end:851|char_star:0,char_end:50"->"type='INFORMATION BLOCK'\nline_star:828,line_end:851|char_star:4,char_end:50";
"# Register app-wide url defaults and preprocessor on blueprint,type='comment'\nline_star:830,line_end:830|char_star:4,char_end:66"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:828,line_end:851|char_star:4,char_end:50"->"# Register app-wide url defaults and preprocessor on blueprint,type='comment'\nline_star:830,line_end:830|char_star:4,char_end:66";
"@bp.app_url_defaults\n    def add_language_code(endpoint, values):\n        values.setdefault('lang_code', flask.g.lang_code),type='decorated_definition'\nline_star:831,line_end:833|char_star:4,char_end:57"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:828,line_end:851|char_star:4,char_end:50"->"@bp.app_url_defaults\n    def add_language_code(endpoint, values):\n        values.setdefault('lang_code', flask.g.lang_code),type='decorated_definition'\nline_star:831,line_end:833|char_star:4,char_end:57";
"@bp.app_url_defaults,type='decorator'\nline_star:831,line_end:831|char_star:4,char_end:24"[shape="box",fillcolor="white",style=filled];
"@bp.app_url_defaults\n    def add_language_code(endpoint, values):\n        values.setdefault('lang_code', flask.g.lang_code),type='decorated_definition'\nline_star:831,line_end:833|char_star:4,char_end:57"->"@bp.app_url_defaults,type='decorator'\nline_star:831,line_end:831|char_star:4,char_end:24";
"def add_language_code(endpoint, values):\n        values.setdefault('lang_code', flask.g.lang_code),type='function_definition'\nline_star:832,line_end:833|char_star:4,char_end:57"[shape="box",fillcolor="#cee6b4",style=filled];
"@bp.app_url_defaults\n    def add_language_code(endpoint, values):\n        values.setdefault('lang_code', flask.g.lang_code),type='decorated_definition'\nline_star:831,line_end:833|char_star:4,char_end:57"->"def add_language_code(endpoint, values):\n        values.setdefault('lang_code', flask.g.lang_code),type='function_definition'\nline_star:832,line_end:833|char_star:4,char_end:57";
"add_language_code,type='identifier'\nline_star:832,line_end:832|char_star:8,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"def add_language_code(endpoint, values):\n        values.setdefault('lang_code', flask.g.lang_code),type='function_definition'\nline_star:832,line_end:833|char_star:4,char_end:57"->"add_language_code,type='identifier'\nline_star:832,line_end:832|char_star:8,char_end:25";
"(endpoint, values),type='parameters'\nline_star:832,line_end:832|char_star:25,char_end:43"[shape="box",fillcolor="white",style=filled];
"def add_language_code(endpoint, values):\n        values.setdefault('lang_code', flask.g.lang_code),type='function_definition'\nline_star:832,line_end:833|char_star:4,char_end:57"->"(endpoint, values),type='parameters'\nline_star:832,line_end:832|char_star:25,char_end:43";
"endpoint,type='identifier'\nline_star:832,line_end:832|char_star:26,char_end:34"[shape="point",fillcolor="#121013",style=filled];
"(endpoint, values),type='parameters'\nline_star:832,line_end:832|char_star:25,char_end:43"->"endpoint,type='identifier'\nline_star:832,line_end:832|char_star:26,char_end:34";
"values,type='identifier'\nline_star:832,line_end:832|char_star:36,char_end:42"[shape="point",fillcolor="#121013",style=filled];
"(endpoint, values),type='parameters'\nline_star:832,line_end:832|char_star:25,char_end:43"->"values,type='identifier'\nline_star:832,line_end:832|char_star:36,char_end:42";
"type='INFORMATION BLOCK'\nline_star:833,line_end:833|char_star:8,char_end:57"[shape="point",fillcolor="#121013",style=filled];
"def add_language_code(endpoint, values):\n        values.setdefault('lang_code', flask.g.lang_code),type='function_definition'\nline_star:832,line_end:833|char_star:4,char_end:57"->"type='INFORMATION BLOCK'\nline_star:833,line_end:833|char_star:8,char_end:57";
"@bp.app_url_value_preprocessor\n    def pull_lang_code(endpoint, values):\n        flask.g.lang_code = values.pop('lang_code'),type='decorated_definition'\nline_star:835,line_end:837|char_star:4,char_end:51"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:828,line_end:851|char_star:4,char_end:50"->"@bp.app_url_value_preprocessor\n    def pull_lang_code(endpoint, values):\n        flask.g.lang_code = values.pop('lang_code'),type='decorated_definition'\nline_star:835,line_end:837|char_star:4,char_end:51";
"@bp.app_url_value_preprocessor,type='decorator'\nline_star:835,line_end:835|char_star:4,char_end:34"[shape="box",fillcolor="white",style=filled];
"@bp.app_url_value_preprocessor\n    def pull_lang_code(endpoint, values):\n        flask.g.lang_code = values.pop('lang_code'),type='decorated_definition'\nline_star:835,line_end:837|char_star:4,char_end:51"->"@bp.app_url_value_preprocessor,type='decorator'\nline_star:835,line_end:835|char_star:4,char_end:34";
"def pull_lang_code(endpoint, values):\n        flask.g.lang_code = values.pop('lang_code'),type='function_definition'\nline_star:836,line_end:837|char_star:4,char_end:51"[shape="box",fillcolor="#cee6b4",style=filled];
"@bp.app_url_value_preprocessor\n    def pull_lang_code(endpoint, values):\n        flask.g.lang_code = values.pop('lang_code'),type='decorated_definition'\nline_star:835,line_end:837|char_star:4,char_end:51"->"def pull_lang_code(endpoint, values):\n        flask.g.lang_code = values.pop('lang_code'),type='function_definition'\nline_star:836,line_end:837|char_star:4,char_end:51";
"pull_lang_code,type='identifier'\nline_star:836,line_end:836|char_star:8,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"def pull_lang_code(endpoint, values):\n        flask.g.lang_code = values.pop('lang_code'),type='function_definition'\nline_star:836,line_end:837|char_star:4,char_end:51"->"pull_lang_code,type='identifier'\nline_star:836,line_end:836|char_star:8,char_end:22";
"(endpoint, values),type='parameters'\nline_star:836,line_end:836|char_star:22,char_end:40"[shape="box",fillcolor="white",style=filled];
"def pull_lang_code(endpoint, values):\n        flask.g.lang_code = values.pop('lang_code'),type='function_definition'\nline_star:836,line_end:837|char_star:4,char_end:51"->"(endpoint, values),type='parameters'\nline_star:836,line_end:836|char_star:22,char_end:40";
"endpoint,type='identifier'\nline_star:836,line_end:836|char_star:23,char_end:31"[shape="point",fillcolor="#121013",style=filled];
"(endpoint, values),type='parameters'\nline_star:836,line_end:836|char_star:22,char_end:40"->"endpoint,type='identifier'\nline_star:836,line_end:836|char_star:23,char_end:31";
"values,type='identifier'\nline_star:836,line_end:836|char_star:33,char_end:39"[shape="point",fillcolor="#121013",style=filled];
"(endpoint, values),type='parameters'\nline_star:836,line_end:836|char_star:22,char_end:40"->"values,type='identifier'\nline_star:836,line_end:836|char_star:33,char_end:39";
"type='INFORMATION BLOCK'\nline_star:837,line_end:837|char_star:8,char_end:51"[shape="point",fillcolor="#121013",style=filled];
"def pull_lang_code(endpoint, values):\n        flask.g.lang_code = values.pop('lang_code'),type='function_definition'\nline_star:836,line_end:837|char_star:4,char_end:51"->"type='INFORMATION BLOCK'\nline_star:837,line_end:837|char_star:8,char_end:51";
"# Register route rules at the app level,type='comment'\nline_star:839,line_end:839|char_star:4,char_end:43"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:828,line_end:851|char_star:4,char_end:50"->"# Register route rules at the app level,type='comment'\nline_star:839,line_end:839|char_star:4,char_end:43";
"@app.route('/<lang_code>/')\n    def index():\n        return flask.url_for('about'),type='decorated_definition'\nline_star:840,line_end:842|char_star:4,char_end:37"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:828,line_end:851|char_star:4,char_end:50"->"@app.route('/<lang_code>/')\n    def index():\n        return flask.url_for('about'),type='decorated_definition'\nline_star:840,line_end:842|char_star:4,char_end:37";
"@app.route('/<lang_code>/'),type='decorator'\nline_star:840,line_end:840|char_star:4,char_end:31"[shape="box",fillcolor="white",style=filled];
"@app.route('/<lang_code>/')\n    def index():\n        return flask.url_for('about'),type='decorated_definition'\nline_star:840,line_end:842|char_star:4,char_end:37"->"@app.route('/<lang_code>/'),type='decorator'\nline_star:840,line_end:840|char_star:4,char_end:31";
"def index():\n        return flask.url_for('about'),type='function_definition'\nline_star:841,line_end:842|char_star:4,char_end:37"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.route('/<lang_code>/')\n    def index():\n        return flask.url_for('about'),type='decorated_definition'\nline_star:840,line_end:842|char_star:4,char_end:37"->"def index():\n        return flask.url_for('about'),type='function_definition'\nline_star:841,line_end:842|char_star:4,char_end:37";
"index,type='identifier'\nline_star:841,line_end:841|char_star:8,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"def index():\n        return flask.url_for('about'),type='function_definition'\nline_star:841,line_end:842|char_star:4,char_end:37"->"index,type='identifier'\nline_star:841,line_end:841|char_star:8,char_end:13";
"type='INFORMATION BLOCK'\nline_star:842,line_end:842|char_star:8,char_end:37"[shape="point",fillcolor="#121013",style=filled];
"def index():\n        return flask.url_for('about'),type='function_definition'\nline_star:841,line_end:842|char_star:4,char_end:37"->"type='INFORMATION BLOCK'\nline_star:842,line_end:842|char_star:8,char_end:37";
"return flask.url_for('about'),type='return_statement'\nline_star:842,line_end:842|char_star:8,char_end:37"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:842,line_end:842|char_star:8,char_end:37"->"return flask.url_for('about'),type='return_statement'\nline_star:842,line_end:842|char_star:8,char_end:37";
"@app.route('/<lang_code>/about')\n    def about():\n        return flask.url_for('index'),type='decorated_definition'\nline_star:844,line_end:846|char_star:4,char_end:37"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:828,line_end:851|char_star:4,char_end:50"->"@app.route('/<lang_code>/about')\n    def about():\n        return flask.url_for('index'),type='decorated_definition'\nline_star:844,line_end:846|char_star:4,char_end:37";
"@app.route('/<lang_code>/about'),type='decorator'\nline_star:844,line_end:844|char_star:4,char_end:36"[shape="box",fillcolor="white",style=filled];
"@app.route('/<lang_code>/about')\n    def about():\n        return flask.url_for('index'),type='decorated_definition'\nline_star:844,line_end:846|char_star:4,char_end:37"->"@app.route('/<lang_code>/about'),type='decorator'\nline_star:844,line_end:844|char_star:4,char_end:36";
"def about():\n        return flask.url_for('index'),type='function_definition'\nline_star:845,line_end:846|char_star:4,char_end:37"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.route('/<lang_code>/about')\n    def about():\n        return flask.url_for('index'),type='decorated_definition'\nline_star:844,line_end:846|char_star:4,char_end:37"->"def about():\n        return flask.url_for('index'),type='function_definition'\nline_star:845,line_end:846|char_star:4,char_end:37";
"about,type='identifier'\nline_star:845,line_end:845|char_star:8,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"def about():\n        return flask.url_for('index'),type='function_definition'\nline_star:845,line_end:846|char_star:4,char_end:37"->"about,type='identifier'\nline_star:845,line_end:845|char_star:8,char_end:13";
"type='INFORMATION BLOCK'\nline_star:846,line_end:846|char_star:8,char_end:37"[shape="point",fillcolor="#121013",style=filled];
"def about():\n        return flask.url_for('index'),type='function_definition'\nline_star:845,line_end:846|char_star:4,char_end:37"->"type='INFORMATION BLOCK'\nline_star:846,line_end:846|char_star:8,char_end:37";
"return flask.url_for('index'),type='return_statement'\nline_star:846,line_end:846|char_star:8,char_end:37"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:846,line_end:846|char_star:8,char_end:37"->"return flask.url_for('index'),type='return_statement'\nline_star:846,line_end:846|char_star:8,char_end:37";
"assert client.get('/de/').data == b'/de/about',type='assert_statement'\nline_star:850,line_end:850|char_star:4,char_end:50"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:828,line_end:851|char_star:4,char_end:50"->"assert client.get('/de/').data == b'/de/about',type='assert_statement'\nline_star:850,line_end:850|char_star:4,char_end:50";
"client.get('/de/').data == b'/de/about',type='comparison_operator'\nline_star:850,line_end:850|char_star:11,char_end:50"[shape="box",fillcolor="white",style=filled];
"assert client.get('/de/').data == b'/de/about',type='assert_statement'\nline_star:850,line_end:850|char_star:4,char_end:50"->"client.get('/de/').data == b'/de/about',type='comparison_operator'\nline_star:850,line_end:850|char_star:11,char_end:50";
"client.get('/de/').data,type='attribute'\nline_star:850,line_end:850|char_star:11,char_end:34"[shape="box",fillcolor="white",style=filled];
"client.get('/de/').data == b'/de/about',type='comparison_operator'\nline_star:850,line_end:850|char_star:11,char_end:50"->"client.get('/de/').data,type='attribute'\nline_star:850,line_end:850|char_star:11,char_end:34";
"client.get('/de/'),type='call'\nline_star:850,line_end:850|char_star:11,char_end:29"[shape="box",fillcolor="white",style=filled];
"client.get('/de/').data,type='attribute'\nline_star:850,line_end:850|char_star:11,char_end:34"->"client.get('/de/'),type='call'\nline_star:850,line_end:850|char_star:11,char_end:29";
"client.get,type='attribute'\nline_star:850,line_end:850|char_star:11,char_end:21"[shape="box",fillcolor="white",style=filled];
"client.get('/de/'),type='call'\nline_star:850,line_end:850|char_star:11,char_end:29"->"client.get,type='attribute'\nline_star:850,line_end:850|char_star:11,char_end:21";
"client,type='identifier'\nline_star:850,line_end:850|char_star:11,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"client.get,type='attribute'\nline_star:850,line_end:850|char_star:11,char_end:21"->"client,type='identifier'\nline_star:850,line_end:850|char_star:11,char_end:17";
"get,type='identifier'\nline_star:850,line_end:850|char_star:18,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"client.get,type='attribute'\nline_star:850,line_end:850|char_star:11,char_end:21"->"get,type='identifier'\nline_star:850,line_end:850|char_star:18,char_end:21";
"('/de/'),type='argument_list'\nline_star:850,line_end:850|char_star:21,char_end:29"[shape="box",fillcolor="white",style=filled];
"client.get('/de/'),type='call'\nline_star:850,line_end:850|char_star:11,char_end:29"->"('/de/'),type='argument_list'\nline_star:850,line_end:850|char_star:21,char_end:29";
"data,type='identifier'\nline_star:850,line_end:850|char_star:30,char_end:34"[shape="point",fillcolor="#121013",style=filled];
"client.get('/de/').data,type='attribute'\nline_star:850,line_end:850|char_star:11,char_end:34"->"data,type='identifier'\nline_star:850,line_end:850|char_star:30,char_end:34";
"assert client.get('/de/about').data == b'/de/',type='assert_statement'\nline_star:851,line_end:851|char_star:4,char_end:50"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:828,line_end:851|char_star:4,char_end:50"->"assert client.get('/de/about').data == b'/de/',type='assert_statement'\nline_star:851,line_end:851|char_star:4,char_end:50";
"client.get('/de/about').data == b'/de/',type='comparison_operator'\nline_star:851,line_end:851|char_star:11,char_end:50"[shape="box",fillcolor="white",style=filled];
"assert client.get('/de/about').data == b'/de/',type='assert_statement'\nline_star:851,line_end:851|char_star:4,char_end:50"->"client.get('/de/about').data == b'/de/',type='comparison_operator'\nline_star:851,line_end:851|char_star:11,char_end:50";
"client.get('/de/about').data,type='attribute'\nline_star:851,line_end:851|char_star:11,char_end:39"[shape="box",fillcolor="white",style=filled];
"client.get('/de/about').data == b'/de/',type='comparison_operator'\nline_star:851,line_end:851|char_star:11,char_end:50"->"client.get('/de/about').data,type='attribute'\nline_star:851,line_end:851|char_star:11,char_end:39";
"client.get('/de/about'),type='call'\nline_star:851,line_end:851|char_star:11,char_end:34"[shape="box",fillcolor="white",style=filled];
"client.get('/de/about').data,type='attribute'\nline_star:851,line_end:851|char_star:11,char_end:39"->"client.get('/de/about'),type='call'\nline_star:851,line_end:851|char_star:11,char_end:34";
"client.get,type='attribute'\nline_star:851,line_end:851|char_star:11,char_end:21"[shape="box",fillcolor="white",style=filled];
"client.get('/de/about'),type='call'\nline_star:851,line_end:851|char_star:11,char_end:34"->"client.get,type='attribute'\nline_star:851,line_end:851|char_star:11,char_end:21";
"client,type='identifier'\nline_star:851,line_end:851|char_star:11,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"client.get,type='attribute'\nline_star:851,line_end:851|char_star:11,char_end:21"->"client,type='identifier'\nline_star:851,line_end:851|char_star:11,char_end:17";
"get,type='identifier'\nline_star:851,line_end:851|char_star:18,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"client.get,type='attribute'\nline_star:851,line_end:851|char_star:11,char_end:21"->"get,type='identifier'\nline_star:851,line_end:851|char_star:18,char_end:21";
"('/de/about'),type='argument_list'\nline_star:851,line_end:851|char_star:21,char_end:34"[shape="box",fillcolor="white",style=filled];
"client.get('/de/about'),type='call'\nline_star:851,line_end:851|char_star:11,char_end:34"->"('/de/about'),type='argument_list'\nline_star:851,line_end:851|char_star:21,char_end:34";
"data,type='identifier'\nline_star:851,line_end:851|char_star:35,char_end:39"[shape="point",fillcolor="#121013",style=filled];
"client.get('/de/about').data,type='attribute'\nline_star:851,line_end:851|char_star:11,char_end:39"->"data,type='identifier'\nline_star:851,line_end:851|char_star:35,char_end:39";
"import functools\nimport pytest\nfrom jinja2 import TemplateNotFound\nfrom werkzeug.http import parse_cache_control_header\nimport flask\nfrom blueprintapp import app\nfrom blueprintapp import app\nfrom werkzeug.routing import Rul"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"import functools\nimport pytest\nfrom jinja2 import TemplateNotFound\nfrom werkzeug.http import parse_cache_control_header\nimport flask\nfrom blueprintapp import app\nfrom blueprintapp import app\nfrom werkzeug.routing import Rul"
}
