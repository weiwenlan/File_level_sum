digraph G{
rankdir="LR";
"MODULE"[shape="box",fillcolor="white",style=filled];
"import pytest,type='import_statement'\nline_star:0,line_end:0|char_star:0,char_end:13"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"import pytest,type='import_statement'\nline_star:0,line_end:0|char_star:0,char_end:13";
"try:\n    import blinker\nexcept ImportError:\n    blinker = None,type='try_statement'\nline_star:2,line_end:5|char_star:0,char_end:18"[shape="box",fillcolor="white",style=filled];
"MODULE"->"try:\n    import blinker\nexcept ImportError:\n    blinker = None,type='try_statement'\nline_star:2,line_end:5|char_star:0,char_end:18";
"try,type='try'\nline_star:2,line_end:2|char_star:0,char_end:3"[shape="box",fillcolor="white",style=filled];
"try:\n    import blinker\nexcept ImportError:\n    blinker = None,type='try_statement'\nline_star:2,line_end:5|char_star:0,char_end:18"->"try,type='try'\nline_star:2,line_end:2|char_star:0,char_end:3";
"type='INFORMATION BLOCK'\nline_star:3,line_end:3|char_star:4,char_end:18"[shape="point",fillcolor="#121013",style=filled];
"try:\n    import blinker\nexcept ImportError:\n    blinker = None,type='try_statement'\nline_star:2,line_end:5|char_star:0,char_end:18"->"type='INFORMATION BLOCK'\nline_star:3,line_end:3|char_star:4,char_end:18";
"import blinker,type='import_statement'\nline_star:3,line_end:3|char_star:4,char_end:18"[shape="box",fillcolor="#f48b29",style=filled];
"type='INFORMATION BLOCK'\nline_star:3,line_end:3|char_star:4,char_end:18"->"import blinker,type='import_statement'\nline_star:3,line_end:3|char_star:4,char_end:18";
"except ImportError:\n    blinker = None,type='except_clause'\nline_star:4,line_end:5|char_star:0,char_end:18"[shape="box",fillcolor="white",style=filled];
"try:\n    import blinker\nexcept ImportError:\n    blinker = None,type='try_statement'\nline_star:2,line_end:5|char_star:0,char_end:18"->"except ImportError:\n    blinker = None,type='except_clause'\nline_star:4,line_end:5|char_star:0,char_end:18";
"except,type='except'\nline_star:4,line_end:4|char_star:0,char_end:6"[shape="box",fillcolor="white",style=filled];
"except ImportError:\n    blinker = None,type='except_clause'\nline_star:4,line_end:5|char_star:0,char_end:18"->"except,type='except'\nline_star:4,line_end:4|char_star:0,char_end:6";
"ImportError,type='identifier'\nline_star:4,line_end:4|char_star:7,char_end:18"[shape="point",fillcolor="#121013",style=filled];
"except ImportError:\n    blinker = None,type='except_clause'\nline_star:4,line_end:5|char_star:0,char_end:18"->"ImportError,type='identifier'\nline_star:4,line_end:4|char_star:7,char_end:18";
"type='INFORMATION BLOCK'\nline_star:5,line_end:5|char_star:4,char_end:18"[shape="point",fillcolor="#121013",style=filled];
"except ImportError:\n    blinker = None,type='except_clause'\nline_star:4,line_end:5|char_star:0,char_end:18"->"type='INFORMATION BLOCK'\nline_star:5,line_end:5|char_star:4,char_end:18";
"import flask,type='import_statement'\nline_star:7,line_end:7|char_star:0,char_end:12"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"import flask,type='import_statement'\nline_star:7,line_end:7|char_star:0,char_end:12";
"def test_template_rendered(app, client):\n    @app.route('/')\n    def index():\n        return flask.render_template('simple_template.html', whiskey=42)\n\n    recorded = []\n\n    def record(sender, template, context):\n        recorded.append((template, context))\n\n    flask.template_rendered.connect(record, app)\n    try:\n        client.get('/')\n        assert len(recorded) == 1\n        template, context = recorded[0]\n        assert template.name == 'simple_template.html'\n        assert context['whiskey'] == 42\n    finally:\n        flask.template_rendered.disconnect(record, app),type='function_definition'\nline_star:14,line_end:32|char_star:0,char_end:55"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_template_rendered(app, client):\n    @app.route('/')\n    def index():\n        return flask.render_template('simple_template.html', whiskey=42)\n\n    recorded = []\n\n    def record(sender, template, context):\n        recorded.append((template, context))\n\n    flask.template_rendered.connect(record, app)\n    try:\n        client.get('/')\n        assert len(recorded) == 1\n        template, context = recorded[0]\n        assert template.name == 'simple_template.html'\n        assert context['whiskey'] == 42\n    finally:\n        flask.template_rendered.disconnect(record, app),type='function_definition'\nline_star:14,line_end:32|char_star:0,char_end:55";
"test_template_rendered,type='identifier'\nline_star:14,line_end:14|char_star:4,char_end:26"[shape="point",fillcolor="#121013",style=filled];
"def test_template_rendered(app, client):\n    @app.route('/')\n    def index():\n        return flask.render_template('simple_template.html', whiskey=42)\n\n    recorded = []\n\n    def record(sender, template, context):\n        recorded.append((template, context))\n\n    flask.template_rendered.connect(record, app)\n    try:\n        client.get('/')\n        assert len(recorded) == 1\n        template, context = recorded[0]\n        assert template.name == 'simple_template.html'\n        assert context['whiskey'] == 42\n    finally:\n        flask.template_rendered.disconnect(record, app),type='function_definition'\nline_star:14,line_end:32|char_star:0,char_end:55"->"test_template_rendered,type='identifier'\nline_star:14,line_end:14|char_star:4,char_end:26";
"(app, client),type='parameters'\nline_star:14,line_end:14|char_star:26,char_end:39"[shape="box",fillcolor="white",style=filled];
"def test_template_rendered(app, client):\n    @app.route('/')\n    def index():\n        return flask.render_template('simple_template.html', whiskey=42)\n\n    recorded = []\n\n    def record(sender, template, context):\n        recorded.append((template, context))\n\n    flask.template_rendered.connect(record, app)\n    try:\n        client.get('/')\n        assert len(recorded) == 1\n        template, context = recorded[0]\n        assert template.name == 'simple_template.html'\n        assert context['whiskey'] == 42\n    finally:\n        flask.template_rendered.disconnect(record, app),type='function_definition'\nline_star:14,line_end:32|char_star:0,char_end:55"->"(app, client),type='parameters'\nline_star:14,line_end:14|char_star:26,char_end:39";
"app,type='identifier'\nline_star:14,line_end:14|char_star:27,char_end:30"[shape="point",fillcolor="#121013",style=filled];
"(app, client),type='parameters'\nline_star:14,line_end:14|char_star:26,char_end:39"->"app,type='identifier'\nline_star:14,line_end:14|char_star:27,char_end:30";
"client,type='identifier'\nline_star:14,line_end:14|char_star:32,char_end:38"[shape="point",fillcolor="#121013",style=filled];
"(app, client),type='parameters'\nline_star:14,line_end:14|char_star:26,char_end:39"->"client,type='identifier'\nline_star:14,line_end:14|char_star:32,char_end:38";
"type='INFORMATION BLOCK'\nline_star:15,line_end:32|char_star:4,char_end:55"[shape="point",fillcolor="#121013",style=filled];
"def test_template_rendered(app, client):\n    @app.route('/')\n    def index():\n        return flask.render_template('simple_template.html', whiskey=42)\n\n    recorded = []\n\n    def record(sender, template, context):\n        recorded.append((template, context))\n\n    flask.template_rendered.connect(record, app)\n    try:\n        client.get('/')\n        assert len(recorded) == 1\n        template, context = recorded[0]\n        assert template.name == 'simple_template.html'\n        assert context['whiskey'] == 42\n    finally:\n        flask.template_rendered.disconnect(record, app),type='function_definition'\nline_star:14,line_end:32|char_star:0,char_end:55"->"type='INFORMATION BLOCK'\nline_star:15,line_end:32|char_star:4,char_end:55";
"@app.route('/')\n    def index():\n        return flask.render_template('simple_template.html', whiskey=42),type='decorated_definition'\nline_star:15,line_end:17|char_star:4,char_end:72"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:15,line_end:32|char_star:4,char_end:55"->"@app.route('/')\n    def index():\n        return flask.render_template('simple_template.html', whiskey=42),type='decorated_definition'\nline_star:15,line_end:17|char_star:4,char_end:72";
"@app.route('/'),type='decorator'\nline_star:15,line_end:15|char_star:4,char_end:19"[shape="box",fillcolor="white",style=filled];
"@app.route('/')\n    def index():\n        return flask.render_template('simple_template.html', whiskey=42),type='decorated_definition'\nline_star:15,line_end:17|char_star:4,char_end:72"->"@app.route('/'),type='decorator'\nline_star:15,line_end:15|char_star:4,char_end:19";
"def index():\n        return flask.render_template('simple_template.html', whiskey=42),type='function_definition'\nline_star:16,line_end:17|char_star:4,char_end:72"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.route('/')\n    def index():\n        return flask.render_template('simple_template.html', whiskey=42),type='decorated_definition'\nline_star:15,line_end:17|char_star:4,char_end:72"->"def index():\n        return flask.render_template('simple_template.html', whiskey=42),type='function_definition'\nline_star:16,line_end:17|char_star:4,char_end:72";
"index,type='identifier'\nline_star:16,line_end:16|char_star:8,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"def index():\n        return flask.render_template('simple_template.html', whiskey=42),type='function_definition'\nline_star:16,line_end:17|char_star:4,char_end:72"->"index,type='identifier'\nline_star:16,line_end:16|char_star:8,char_end:13";
"type='INFORMATION BLOCK'\nline_star:17,line_end:17|char_star:8,char_end:72"[shape="point",fillcolor="#121013",style=filled];
"def index():\n        return flask.render_template('simple_template.html', whiskey=42),type='function_definition'\nline_star:16,line_end:17|char_star:4,char_end:72"->"type='INFORMATION BLOCK'\nline_star:17,line_end:17|char_star:8,char_end:72";
"return flask.render_template('simple_template.html', whiskey=42),type='return_statement'\nline_star:17,line_end:17|char_star:8,char_end:72"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:17,line_end:17|char_star:8,char_end:72"->"return flask.render_template('simple_template.html', whiskey=42),type='return_statement'\nline_star:17,line_end:17|char_star:8,char_end:72";
"def record(sender, template, context):\n        recorded.append((template, context)),type='function_definition'\nline_star:21,line_end:22|char_star:4,char_end:44"[shape="box",fillcolor="#cee6b4",style=filled];
"type='INFORMATION BLOCK'\nline_star:15,line_end:32|char_star:4,char_end:55"->"def record(sender, template, context):\n        recorded.append((template, context)),type='function_definition'\nline_star:21,line_end:22|char_star:4,char_end:44";
"record,type='identifier'\nline_star:21,line_end:21|char_star:8,char_end:14"[shape="point",fillcolor="#121013",style=filled];
"def record(sender, template, context):\n        recorded.append((template, context)),type='function_definition'\nline_star:21,line_end:22|char_star:4,char_end:44"->"record,type='identifier'\nline_star:21,line_end:21|char_star:8,char_end:14";
"(sender, template, context),type='parameters'\nline_star:21,line_end:21|char_star:14,char_end:41"[shape="box",fillcolor="white",style=filled];
"def record(sender, template, context):\n        recorded.append((template, context)),type='function_definition'\nline_star:21,line_end:22|char_star:4,char_end:44"->"(sender, template, context),type='parameters'\nline_star:21,line_end:21|char_star:14,char_end:41";
"sender,type='identifier'\nline_star:21,line_end:21|char_star:15,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"(sender, template, context),type='parameters'\nline_star:21,line_end:21|char_star:14,char_end:41"->"sender,type='identifier'\nline_star:21,line_end:21|char_star:15,char_end:21";
"template,type='identifier'\nline_star:21,line_end:21|char_star:23,char_end:31"[shape="point",fillcolor="#121013",style=filled];
"(sender, template, context),type='parameters'\nline_star:21,line_end:21|char_star:14,char_end:41"->"template,type='identifier'\nline_star:21,line_end:21|char_star:23,char_end:31";
"context,type='identifier'\nline_star:21,line_end:21|char_star:33,char_end:40"[shape="point",fillcolor="#121013",style=filled];
"(sender, template, context),type='parameters'\nline_star:21,line_end:21|char_star:14,char_end:41"->"context,type='identifier'\nline_star:21,line_end:21|char_star:33,char_end:40";
"type='INFORMATION BLOCK'\nline_star:22,line_end:22|char_star:8,char_end:44"[shape="point",fillcolor="#121013",style=filled];
"def record(sender, template, context):\n        recorded.append((template, context)),type='function_definition'\nline_star:21,line_end:22|char_star:4,char_end:44"->"type='INFORMATION BLOCK'\nline_star:22,line_end:22|char_star:8,char_end:44";
"try:\n        client.get('/')\n        assert len(recorded) == 1\n        template, context = recorded[0]\n        assert template.name == 'simple_template.html'\n        assert context['whiskey'] == 42\n    finally:\n        flask.template_rendered.disconnect(record, app),type='try_statement'\nline_star:25,line_end:32|char_star:4,char_end:55"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:15,line_end:32|char_star:4,char_end:55"->"try:\n        client.get('/')\n        assert len(recorded) == 1\n        template, context = recorded[0]\n        assert template.name == 'simple_template.html'\n        assert context['whiskey'] == 42\n    finally:\n        flask.template_rendered.disconnect(record, app),type='try_statement'\nline_star:25,line_end:32|char_star:4,char_end:55";
"try,type='try'\nline_star:25,line_end:25|char_star:4,char_end:7"[shape="box",fillcolor="white",style=filled];
"try:\n        client.get('/')\n        assert len(recorded) == 1\n        template, context = recorded[0]\n        assert template.name == 'simple_template.html'\n        assert context['whiskey'] == 42\n    finally:\n        flask.template_rendered.disconnect(record, app),type='try_statement'\nline_star:25,line_end:32|char_star:4,char_end:55"->"try,type='try'\nline_star:25,line_end:25|char_star:4,char_end:7";
"type='INFORMATION BLOCK'\nline_star:26,line_end:30|char_star:8,char_end:39"[shape="point",fillcolor="#121013",style=filled];
"try:\n        client.get('/')\n        assert len(recorded) == 1\n        template, context = recorded[0]\n        assert template.name == 'simple_template.html'\n        assert context['whiskey'] == 42\n    finally:\n        flask.template_rendered.disconnect(record, app),type='try_statement'\nline_star:25,line_end:32|char_star:4,char_end:55"->"type='INFORMATION BLOCK'\nline_star:26,line_end:30|char_star:8,char_end:39";
"assert len(recorded) == 1,type='assert_statement'\nline_star:27,line_end:27|char_star:8,char_end:33"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:26,line_end:30|char_star:8,char_end:39"->"assert len(recorded) == 1,type='assert_statement'\nline_star:27,line_end:27|char_star:8,char_end:33";
"len(recorded) == 1,type='comparison_operator'\nline_star:27,line_end:27|char_star:15,char_end:33"[shape="box",fillcolor="white",style=filled];
"assert len(recorded) == 1,type='assert_statement'\nline_star:27,line_end:27|char_star:8,char_end:33"->"len(recorded) == 1,type='comparison_operator'\nline_star:27,line_end:27|char_star:15,char_end:33";
"len(recorded),type='call'\nline_star:27,line_end:27|char_star:15,char_end:28"[shape="box",fillcolor="white",style=filled];
"len(recorded) == 1,type='comparison_operator'\nline_star:27,line_end:27|char_star:15,char_end:33"->"len(recorded),type='call'\nline_star:27,line_end:27|char_star:15,char_end:28";
"len,type='identifier'\nline_star:27,line_end:27|char_star:15,char_end:18"[shape="point",fillcolor="#121013",style=filled];
"len(recorded),type='call'\nline_star:27,line_end:27|char_star:15,char_end:28"->"len,type='identifier'\nline_star:27,line_end:27|char_star:15,char_end:18";
"(recorded),type='argument_list'\nline_star:27,line_end:27|char_star:18,char_end:28"[shape="box",fillcolor="white",style=filled];
"len(recorded),type='call'\nline_star:27,line_end:27|char_star:15,char_end:28"->"(recorded),type='argument_list'\nline_star:27,line_end:27|char_star:18,char_end:28";
"recorded,type='identifier'\nline_star:27,line_end:27|char_star:19,char_end:27"[shape="point",fillcolor="#121013",style=filled];
"(recorded),type='argument_list'\nline_star:27,line_end:27|char_star:18,char_end:28"->"recorded,type='identifier'\nline_star:27,line_end:27|char_star:19,char_end:27";
"assert template.name == 'simple_template.html',type='assert_statement'\nline_star:29,line_end:29|char_star:8,char_end:54"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:26,line_end:30|char_star:8,char_end:39"->"assert template.name == 'simple_template.html',type='assert_statement'\nline_star:29,line_end:29|char_star:8,char_end:54";
"template.name == 'simple_template.html',type='comparison_operator'\nline_star:29,line_end:29|char_star:15,char_end:54"[shape="box",fillcolor="white",style=filled];
"assert template.name == 'simple_template.html',type='assert_statement'\nline_star:29,line_end:29|char_star:8,char_end:54"->"template.name == 'simple_template.html',type='comparison_operator'\nline_star:29,line_end:29|char_star:15,char_end:54";
"template.name,type='attribute'\nline_star:29,line_end:29|char_star:15,char_end:28"[shape="box",fillcolor="white",style=filled];
"template.name == 'simple_template.html',type='comparison_operator'\nline_star:29,line_end:29|char_star:15,char_end:54"->"template.name,type='attribute'\nline_star:29,line_end:29|char_star:15,char_end:28";
"template,type='identifier'\nline_star:29,line_end:29|char_star:15,char_end:23"[shape="point",fillcolor="#121013",style=filled];
"template.name,type='attribute'\nline_star:29,line_end:29|char_star:15,char_end:28"->"template,type='identifier'\nline_star:29,line_end:29|char_star:15,char_end:23";
"name,type='identifier'\nline_star:29,line_end:29|char_star:24,char_end:28"[shape="point",fillcolor="#121013",style=filled];
"template.name,type='attribute'\nline_star:29,line_end:29|char_star:15,char_end:28"->"name,type='identifier'\nline_star:29,line_end:29|char_star:24,char_end:28";
"assert context['whiskey'] == 42,type='assert_statement'\nline_star:30,line_end:30|char_star:8,char_end:39"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:26,line_end:30|char_star:8,char_end:39"->"assert context['whiskey'] == 42,type='assert_statement'\nline_star:30,line_end:30|char_star:8,char_end:39";
"context['whiskey'] == 42,type='comparison_operator'\nline_star:30,line_end:30|char_star:15,char_end:39"[shape="box",fillcolor="white",style=filled];
"assert context['whiskey'] == 42,type='assert_statement'\nline_star:30,line_end:30|char_star:8,char_end:39"->"context['whiskey'] == 42,type='comparison_operator'\nline_star:30,line_end:30|char_star:15,char_end:39";
"context['whiskey'],type='subscript'\nline_star:30,line_end:30|char_star:15,char_end:33"[shape="box",fillcolor="white",style=filled];
"context['whiskey'] == 42,type='comparison_operator'\nline_star:30,line_end:30|char_star:15,char_end:39"->"context['whiskey'],type='subscript'\nline_star:30,line_end:30|char_star:15,char_end:33";
"context,type='identifier'\nline_star:30,line_end:30|char_star:15,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"context['whiskey'],type='subscript'\nline_star:30,line_end:30|char_star:15,char_end:33"->"context,type='identifier'\nline_star:30,line_end:30|char_star:15,char_end:22";
"finally:\n        flask.template_rendered.disconnect(record, app),type='finally_clause'\nline_star:31,line_end:32|char_star:4,char_end:55"[shape="box",fillcolor="white",style=filled];
"try:\n        client.get('/')\n        assert len(recorded) == 1\n        template, context = recorded[0]\n        assert template.name == 'simple_template.html'\n        assert context['whiskey'] == 42\n    finally:\n        flask.template_rendered.disconnect(record, app),type='try_statement'\nline_star:25,line_end:32|char_star:4,char_end:55"->"finally:\n        flask.template_rendered.disconnect(record, app),type='finally_clause'\nline_star:31,line_end:32|char_star:4,char_end:55";
"finally,type='finally'\nline_star:31,line_end:31|char_star:4,char_end:11"[shape="box",fillcolor="white",style=filled];
"finally:\n        flask.template_rendered.disconnect(record, app),type='finally_clause'\nline_star:31,line_end:32|char_star:4,char_end:55"->"finally,type='finally'\nline_star:31,line_end:31|char_star:4,char_end:11";
"type='INFORMATION BLOCK'\nline_star:32,line_end:32|char_star:8,char_end:55"[shape="point",fillcolor="#121013",style=filled];
"finally:\n        flask.template_rendered.disconnect(record, app),type='finally_clause'\nline_star:31,line_end:32|char_star:4,char_end:55"->"type='INFORMATION BLOCK'\nline_star:32,line_end:32|char_star:8,char_end:55";
"def test_before_render_template():\n    app = flask.Flask(__name__)\n\n    @app.route('/')\n    def index():\n        return flask.render_template('simple_template.html', whiskey=42)\n\n    recorded = []\n\n    def record(sender, template, context):\n        context['whiskey'] = 43\n        recorded.append((template, context))\n\n    flask.before_render_template.connect(record, app)\n    try:\n        rv = app.test_client().get('/')\n        assert len(recorded) == 1\n        template, context = recorded[0]\n        assert template.name == 'simple_template.html'\n        assert context['whiskey'] == 43\n        assert rv.data == b'<h1>43</h1>'\n    finally:\n        flask.before_render_template.disconnect(record, app),type='function_definition'\nline_star:35,line_end:57|char_star:0,char_end:60"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_before_render_template():\n    app = flask.Flask(__name__)\n\n    @app.route('/')\n    def index():\n        return flask.render_template('simple_template.html', whiskey=42)\n\n    recorded = []\n\n    def record(sender, template, context):\n        context['whiskey'] = 43\n        recorded.append((template, context))\n\n    flask.before_render_template.connect(record, app)\n    try:\n        rv = app.test_client().get('/')\n        assert len(recorded) == 1\n        template, context = recorded[0]\n        assert template.name == 'simple_template.html'\n        assert context['whiskey'] == 43\n        assert rv.data == b'<h1>43</h1>'\n    finally:\n        flask.before_render_template.disconnect(record, app),type='function_definition'\nline_star:35,line_end:57|char_star:0,char_end:60";
"test_before_render_template,type='identifier'\nline_star:35,line_end:35|char_star:4,char_end:31"[shape="point",fillcolor="#121013",style=filled];
"def test_before_render_template():\n    app = flask.Flask(__name__)\n\n    @app.route('/')\n    def index():\n        return flask.render_template('simple_template.html', whiskey=42)\n\n    recorded = []\n\n    def record(sender, template, context):\n        context['whiskey'] = 43\n        recorded.append((template, context))\n\n    flask.before_render_template.connect(record, app)\n    try:\n        rv = app.test_client().get('/')\n        assert len(recorded) == 1\n        template, context = recorded[0]\n        assert template.name == 'simple_template.html'\n        assert context['whiskey'] == 43\n        assert rv.data == b'<h1>43</h1>'\n    finally:\n        flask.before_render_template.disconnect(record, app),type='function_definition'\nline_star:35,line_end:57|char_star:0,char_end:60"->"test_before_render_template,type='identifier'\nline_star:35,line_end:35|char_star:4,char_end:31";
"type='INFORMATION BLOCK'\nline_star:36,line_end:57|char_star:4,char_end:60"[shape="point",fillcolor="#121013",style=filled];
"def test_before_render_template():\n    app = flask.Flask(__name__)\n\n    @app.route('/')\n    def index():\n        return flask.render_template('simple_template.html', whiskey=42)\n\n    recorded = []\n\n    def record(sender, template, context):\n        context['whiskey'] = 43\n        recorded.append((template, context))\n\n    flask.before_render_template.connect(record, app)\n    try:\n        rv = app.test_client().get('/')\n        assert len(recorded) == 1\n        template, context = recorded[0]\n        assert template.name == 'simple_template.html'\n        assert context['whiskey'] == 43\n        assert rv.data == b'<h1>43</h1>'\n    finally:\n        flask.before_render_template.disconnect(record, app),type='function_definition'\nline_star:35,line_end:57|char_star:0,char_end:60"->"type='INFORMATION BLOCK'\nline_star:36,line_end:57|char_star:4,char_end:60";
"@app.route('/')\n    def index():\n        return flask.render_template('simple_template.html', whiskey=42),type='decorated_definition'\nline_star:38,line_end:40|char_star:4,char_end:72"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:36,line_end:57|char_star:4,char_end:60"->"@app.route('/')\n    def index():\n        return flask.render_template('simple_template.html', whiskey=42),type='decorated_definition'\nline_star:38,line_end:40|char_star:4,char_end:72";
"@app.route('/'),type='decorator'\nline_star:38,line_end:38|char_star:4,char_end:19"[shape="box",fillcolor="white",style=filled];
"@app.route('/')\n    def index():\n        return flask.render_template('simple_template.html', whiskey=42),type='decorated_definition'\nline_star:38,line_end:40|char_star:4,char_end:72"->"@app.route('/'),type='decorator'\nline_star:38,line_end:38|char_star:4,char_end:19";
"def index():\n        return flask.render_template('simple_template.html', whiskey=42),type='function_definition'\nline_star:39,line_end:40|char_star:4,char_end:72"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.route('/')\n    def index():\n        return flask.render_template('simple_template.html', whiskey=42),type='decorated_definition'\nline_star:38,line_end:40|char_star:4,char_end:72"->"def index():\n        return flask.render_template('simple_template.html', whiskey=42),type='function_definition'\nline_star:39,line_end:40|char_star:4,char_end:72";
"index,type='identifier'\nline_star:39,line_end:39|char_star:8,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"def index():\n        return flask.render_template('simple_template.html', whiskey=42),type='function_definition'\nline_star:39,line_end:40|char_star:4,char_end:72"->"index,type='identifier'\nline_star:39,line_end:39|char_star:8,char_end:13";
"type='INFORMATION BLOCK'\nline_star:40,line_end:40|char_star:8,char_end:72"[shape="point",fillcolor="#121013",style=filled];
"def index():\n        return flask.render_template('simple_template.html', whiskey=42),type='function_definition'\nline_star:39,line_end:40|char_star:4,char_end:72"->"type='INFORMATION BLOCK'\nline_star:40,line_end:40|char_star:8,char_end:72";
"return flask.render_template('simple_template.html', whiskey=42),type='return_statement'\nline_star:40,line_end:40|char_star:8,char_end:72"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:40,line_end:40|char_star:8,char_end:72"->"return flask.render_template('simple_template.html', whiskey=42),type='return_statement'\nline_star:40,line_end:40|char_star:8,char_end:72";
"def record(sender, template, context):\n        context['whiskey'] = 43\n        recorded.append((template, context)),type='function_definition'\nline_star:44,line_end:46|char_star:4,char_end:44"[shape="box",fillcolor="#cee6b4",style=filled];
"type='INFORMATION BLOCK'\nline_star:36,line_end:57|char_star:4,char_end:60"->"def record(sender, template, context):\n        context['whiskey'] = 43\n        recorded.append((template, context)),type='function_definition'\nline_star:44,line_end:46|char_star:4,char_end:44";
"record,type='identifier'\nline_star:44,line_end:44|char_star:8,char_end:14"[shape="point",fillcolor="#121013",style=filled];
"def record(sender, template, context):\n        context['whiskey'] = 43\n        recorded.append((template, context)),type='function_definition'\nline_star:44,line_end:46|char_star:4,char_end:44"->"record,type='identifier'\nline_star:44,line_end:44|char_star:8,char_end:14";
"(sender, template, context),type='parameters'\nline_star:44,line_end:44|char_star:14,char_end:41"[shape="box",fillcolor="white",style=filled];
"def record(sender, template, context):\n        context['whiskey'] = 43\n        recorded.append((template, context)),type='function_definition'\nline_star:44,line_end:46|char_star:4,char_end:44"->"(sender, template, context),type='parameters'\nline_star:44,line_end:44|char_star:14,char_end:41";
"sender,type='identifier'\nline_star:44,line_end:44|char_star:15,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"(sender, template, context),type='parameters'\nline_star:44,line_end:44|char_star:14,char_end:41"->"sender,type='identifier'\nline_star:44,line_end:44|char_star:15,char_end:21";
"template,type='identifier'\nline_star:44,line_end:44|char_star:23,char_end:31"[shape="point",fillcolor="#121013",style=filled];
"(sender, template, context),type='parameters'\nline_star:44,line_end:44|char_star:14,char_end:41"->"template,type='identifier'\nline_star:44,line_end:44|char_star:23,char_end:31";
"context,type='identifier'\nline_star:44,line_end:44|char_star:33,char_end:40"[shape="point",fillcolor="#121013",style=filled];
"(sender, template, context),type='parameters'\nline_star:44,line_end:44|char_star:14,char_end:41"->"context,type='identifier'\nline_star:44,line_end:44|char_star:33,char_end:40";
"type='INFORMATION BLOCK'\nline_star:45,line_end:46|char_star:8,char_end:44"[shape="point",fillcolor="#121013",style=filled];
"def record(sender, template, context):\n        context['whiskey'] = 43\n        recorded.append((template, context)),type='function_definition'\nline_star:44,line_end:46|char_star:4,char_end:44"->"type='INFORMATION BLOCK'\nline_star:45,line_end:46|char_star:8,char_end:44";
"try:\n        rv = app.test_client().get('/')\n        assert len(recorded) == 1\n        template, context = recorded[0]\n        assert template.name == 'simple_template.html'\n        assert context['whiskey'] == 43\n        assert rv.data == b'<h1>43</h1>'\n    finally:\n        flask.before_render_template.disconnect(record, app),type='try_statement'\nline_star:49,line_end:57|char_star:4,char_end:60"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:36,line_end:57|char_star:4,char_end:60"->"try:\n        rv = app.test_client().get('/')\n        assert len(recorded) == 1\n        template, context = recorded[0]\n        assert template.name == 'simple_template.html'\n        assert context['whiskey'] == 43\n        assert rv.data == b'<h1>43</h1>'\n    finally:\n        flask.before_render_template.disconnect(record, app),type='try_statement'\nline_star:49,line_end:57|char_star:4,char_end:60";
"try,type='try'\nline_star:49,line_end:49|char_star:4,char_end:7"[shape="box",fillcolor="white",style=filled];
"try:\n        rv = app.test_client().get('/')\n        assert len(recorded) == 1\n        template, context = recorded[0]\n        assert template.name == 'simple_template.html'\n        assert context['whiskey'] == 43\n        assert rv.data == b'<h1>43</h1>'\n    finally:\n        flask.before_render_template.disconnect(record, app),type='try_statement'\nline_star:49,line_end:57|char_star:4,char_end:60"->"try,type='try'\nline_star:49,line_end:49|char_star:4,char_end:7";
"type='INFORMATION BLOCK'\nline_star:50,line_end:55|char_star:8,char_end:40"[shape="point",fillcolor="#121013",style=filled];
"try:\n        rv = app.test_client().get('/')\n        assert len(recorded) == 1\n        template, context = recorded[0]\n        assert template.name == 'simple_template.html'\n        assert context['whiskey'] == 43\n        assert rv.data == b'<h1>43</h1>'\n    finally:\n        flask.before_render_template.disconnect(record, app),type='try_statement'\nline_star:49,line_end:57|char_star:4,char_end:60"->"type='INFORMATION BLOCK'\nline_star:50,line_end:55|char_star:8,char_end:40";
"assert len(recorded) == 1,type='assert_statement'\nline_star:51,line_end:51|char_star:8,char_end:33"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:50,line_end:55|char_star:8,char_end:40"->"assert len(recorded) == 1,type='assert_statement'\nline_star:51,line_end:51|char_star:8,char_end:33";
"len(recorded) == 1,type='comparison_operator'\nline_star:51,line_end:51|char_star:15,char_end:33"[shape="box",fillcolor="white",style=filled];
"assert len(recorded) == 1,type='assert_statement'\nline_star:51,line_end:51|char_star:8,char_end:33"->"len(recorded) == 1,type='comparison_operator'\nline_star:51,line_end:51|char_star:15,char_end:33";
"len(recorded),type='call'\nline_star:51,line_end:51|char_star:15,char_end:28"[shape="box",fillcolor="white",style=filled];
"len(recorded) == 1,type='comparison_operator'\nline_star:51,line_end:51|char_star:15,char_end:33"->"len(recorded),type='call'\nline_star:51,line_end:51|char_star:15,char_end:28";
"len,type='identifier'\nline_star:51,line_end:51|char_star:15,char_end:18"[shape="point",fillcolor="#121013",style=filled];
"len(recorded),type='call'\nline_star:51,line_end:51|char_star:15,char_end:28"->"len,type='identifier'\nline_star:51,line_end:51|char_star:15,char_end:18";
"(recorded),type='argument_list'\nline_star:51,line_end:51|char_star:18,char_end:28"[shape="box",fillcolor="white",style=filled];
"len(recorded),type='call'\nline_star:51,line_end:51|char_star:15,char_end:28"->"(recorded),type='argument_list'\nline_star:51,line_end:51|char_star:18,char_end:28";
"recorded,type='identifier'\nline_star:51,line_end:51|char_star:19,char_end:27"[shape="point",fillcolor="#121013",style=filled];
"(recorded),type='argument_list'\nline_star:51,line_end:51|char_star:18,char_end:28"->"recorded,type='identifier'\nline_star:51,line_end:51|char_star:19,char_end:27";
"assert template.name == 'simple_template.html',type='assert_statement'\nline_star:53,line_end:53|char_star:8,char_end:54"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:50,line_end:55|char_star:8,char_end:40"->"assert template.name == 'simple_template.html',type='assert_statement'\nline_star:53,line_end:53|char_star:8,char_end:54";
"template.name == 'simple_template.html',type='comparison_operator'\nline_star:53,line_end:53|char_star:15,char_end:54"[shape="box",fillcolor="white",style=filled];
"assert template.name == 'simple_template.html',type='assert_statement'\nline_star:53,line_end:53|char_star:8,char_end:54"->"template.name == 'simple_template.html',type='comparison_operator'\nline_star:53,line_end:53|char_star:15,char_end:54";
"template.name,type='attribute'\nline_star:53,line_end:53|char_star:15,char_end:28"[shape="box",fillcolor="white",style=filled];
"template.name == 'simple_template.html',type='comparison_operator'\nline_star:53,line_end:53|char_star:15,char_end:54"->"template.name,type='attribute'\nline_star:53,line_end:53|char_star:15,char_end:28";
"template,type='identifier'\nline_star:53,line_end:53|char_star:15,char_end:23"[shape="point",fillcolor="#121013",style=filled];
"template.name,type='attribute'\nline_star:53,line_end:53|char_star:15,char_end:28"->"template,type='identifier'\nline_star:53,line_end:53|char_star:15,char_end:23";
"name,type='identifier'\nline_star:53,line_end:53|char_star:24,char_end:28"[shape="point",fillcolor="#121013",style=filled];
"template.name,type='attribute'\nline_star:53,line_end:53|char_star:15,char_end:28"->"name,type='identifier'\nline_star:53,line_end:53|char_star:24,char_end:28";
"assert context['whiskey'] == 43,type='assert_statement'\nline_star:54,line_end:54|char_star:8,char_end:39"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:50,line_end:55|char_star:8,char_end:40"->"assert context['whiskey'] == 43,type='assert_statement'\nline_star:54,line_end:54|char_star:8,char_end:39";
"context['whiskey'] == 43,type='comparison_operator'\nline_star:54,line_end:54|char_star:15,char_end:39"[shape="box",fillcolor="white",style=filled];
"assert context['whiskey'] == 43,type='assert_statement'\nline_star:54,line_end:54|char_star:8,char_end:39"->"context['whiskey'] == 43,type='comparison_operator'\nline_star:54,line_end:54|char_star:15,char_end:39";
"context['whiskey'],type='subscript'\nline_star:54,line_end:54|char_star:15,char_end:33"[shape="box",fillcolor="white",style=filled];
"context['whiskey'] == 43,type='comparison_operator'\nline_star:54,line_end:54|char_star:15,char_end:39"->"context['whiskey'],type='subscript'\nline_star:54,line_end:54|char_star:15,char_end:33";
"context,type='identifier'\nline_star:54,line_end:54|char_star:15,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"context['whiskey'],type='subscript'\nline_star:54,line_end:54|char_star:15,char_end:33"->"context,type='identifier'\nline_star:54,line_end:54|char_star:15,char_end:22";
"assert rv.data == b'<h1>43</h1>',type='assert_statement'\nline_star:55,line_end:55|char_star:8,char_end:40"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:50,line_end:55|char_star:8,char_end:40"->"assert rv.data == b'<h1>43</h1>',type='assert_statement'\nline_star:55,line_end:55|char_star:8,char_end:40";
"rv.data == b'<h1>43</h1>',type='comparison_operator'\nline_star:55,line_end:55|char_star:15,char_end:40"[shape="box",fillcolor="white",style=filled];
"assert rv.data == b'<h1>43</h1>',type='assert_statement'\nline_star:55,line_end:55|char_star:8,char_end:40"->"rv.data == b'<h1>43</h1>',type='comparison_operator'\nline_star:55,line_end:55|char_star:15,char_end:40";
"rv.data,type='attribute'\nline_star:55,line_end:55|char_star:15,char_end:22"[shape="box",fillcolor="white",style=filled];
"rv.data == b'<h1>43</h1>',type='comparison_operator'\nline_star:55,line_end:55|char_star:15,char_end:40"->"rv.data,type='attribute'\nline_star:55,line_end:55|char_star:15,char_end:22";
"rv,type='identifier'\nline_star:55,line_end:55|char_star:15,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"rv.data,type='attribute'\nline_star:55,line_end:55|char_star:15,char_end:22"->"rv,type='identifier'\nline_star:55,line_end:55|char_star:15,char_end:17";
"data,type='identifier'\nline_star:55,line_end:55|char_star:18,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"rv.data,type='attribute'\nline_star:55,line_end:55|char_star:15,char_end:22"->"data,type='identifier'\nline_star:55,line_end:55|char_star:18,char_end:22";
"finally:\n        flask.before_render_template.disconnect(record, app),type='finally_clause'\nline_star:56,line_end:57|char_star:4,char_end:60"[shape="box",fillcolor="white",style=filled];
"try:\n        rv = app.test_client().get('/')\n        assert len(recorded) == 1\n        template, context = recorded[0]\n        assert template.name == 'simple_template.html'\n        assert context['whiskey'] == 43\n        assert rv.data == b'<h1>43</h1>'\n    finally:\n        flask.before_render_template.disconnect(record, app),type='try_statement'\nline_star:49,line_end:57|char_star:4,char_end:60"->"finally:\n        flask.before_render_template.disconnect(record, app),type='finally_clause'\nline_star:56,line_end:57|char_star:4,char_end:60";
"finally,type='finally'\nline_star:56,line_end:56|char_star:4,char_end:11"[shape="box",fillcolor="white",style=filled];
"finally:\n        flask.before_render_template.disconnect(record, app),type='finally_clause'\nline_star:56,line_end:57|char_star:4,char_end:60"->"finally,type='finally'\nline_star:56,line_end:56|char_star:4,char_end:11";
"type='INFORMATION BLOCK'\nline_star:57,line_end:57|char_star:8,char_end:60"[shape="point",fillcolor="#121013",style=filled];
"finally:\n        flask.before_render_template.disconnect(record, app),type='finally_clause'\nline_star:56,line_end:57|char_star:4,char_end:60"->"type='INFORMATION BLOCK'\nline_star:57,line_end:57|char_star:8,char_end:60";
"def test_request_signals():\n    app = flask.Flask(__name__)\n    calls = []\n\n    def before_request_signal(sender):\n        calls.append('before-signal')\n\n    def after_request_signal(sender, response):\n        assert response.data == b'stuff'\n        calls.append('after-signal')\n\n    @app.before_request\n    def before_request_handler():\n        calls.append('before-handler')\n\n    @app.after_request\n    def after_request_handler(response):\n        calls.append('after-handler')\n        response.data = 'stuff'\n        return response\n\n    @app.route('/')\n    def index():\n        calls.append('handler')\n        return 'ignored anyway'\n\n    flask.request_started.connect(before_request_signal, app)\n    flask.request_finished.connect(after_request_signal, app)\n\n    try:\n        rv = app.test_client().get('/')\n        assert rv.data == b'stuff'\n\n        assert calls == [\n            'before-signal',\n            'before-handler',\n            'handler',\n            'after-handler',\n            'after-signal',\n        ]\n    finally:\n        flask.request_started.disconnect(before_request_signal, app)\n        flask.request_finished.disconnect(after_request_signal, app),type='function_definition'\nline_star:60,line_end:102|char_star:0,char_end:68"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_request_signals():\n    app = flask.Flask(__name__)\n    calls = []\n\n    def before_request_signal(sender):\n        calls.append('before-signal')\n\n    def after_request_signal(sender, response):\n        assert response.data == b'stuff'\n        calls.append('after-signal')\n\n    @app.before_request\n    def before_request_handler():\n        calls.append('before-handler')\n\n    @app.after_request\n    def after_request_handler(response):\n        calls.append('after-handler')\n        response.data = 'stuff'\n        return response\n\n    @app.route('/')\n    def index():\n        calls.append('handler')\n        return 'ignored anyway'\n\n    flask.request_started.connect(before_request_signal, app)\n    flask.request_finished.connect(after_request_signal, app)\n\n    try:\n        rv = app.test_client().get('/')\n        assert rv.data == b'stuff'\n\n        assert calls == [\n            'before-signal',\n            'before-handler',\n            'handler',\n            'after-handler',\n            'after-signal',\n        ]\n    finally:\n        flask.request_started.disconnect(before_request_signal, app)\n        flask.request_finished.disconnect(after_request_signal, app),type='function_definition'\nline_star:60,line_end:102|char_star:0,char_end:68";
"test_request_signals,type='identifier'\nline_star:60,line_end:60|char_star:4,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"def test_request_signals():\n    app = flask.Flask(__name__)\n    calls = []\n\n    def before_request_signal(sender):\n        calls.append('before-signal')\n\n    def after_request_signal(sender, response):\n        assert response.data == b'stuff'\n        calls.append('after-signal')\n\n    @app.before_request\n    def before_request_handler():\n        calls.append('before-handler')\n\n    @app.after_request\n    def after_request_handler(response):\n        calls.append('after-handler')\n        response.data = 'stuff'\n        return response\n\n    @app.route('/')\n    def index():\n        calls.append('handler')\n        return 'ignored anyway'\n\n    flask.request_started.connect(before_request_signal, app)\n    flask.request_finished.connect(after_request_signal, app)\n\n    try:\n        rv = app.test_client().get('/')\n        assert rv.data == b'stuff'\n\n        assert calls == [\n            'before-signal',\n            'before-handler',\n            'handler',\n            'after-handler',\n            'after-signal',\n        ]\n    finally:\n        flask.request_started.disconnect(before_request_signal, app)\n        flask.request_finished.disconnect(after_request_signal, app),type='function_definition'\nline_star:60,line_end:102|char_star:0,char_end:68"->"test_request_signals,type='identifier'\nline_star:60,line_end:60|char_star:4,char_end:24";
"type='INFORMATION BLOCK'\nline_star:61,line_end:102|char_star:4,char_end:68"[shape="point",fillcolor="#121013",style=filled];
"def test_request_signals():\n    app = flask.Flask(__name__)\n    calls = []\n\n    def before_request_signal(sender):\n        calls.append('before-signal')\n\n    def after_request_signal(sender, response):\n        assert response.data == b'stuff'\n        calls.append('after-signal')\n\n    @app.before_request\n    def before_request_handler():\n        calls.append('before-handler')\n\n    @app.after_request\n    def after_request_handler(response):\n        calls.append('after-handler')\n        response.data = 'stuff'\n        return response\n\n    @app.route('/')\n    def index():\n        calls.append('handler')\n        return 'ignored anyway'\n\n    flask.request_started.connect(before_request_signal, app)\n    flask.request_finished.connect(after_request_signal, app)\n\n    try:\n        rv = app.test_client().get('/')\n        assert rv.data == b'stuff'\n\n        assert calls == [\n            'before-signal',\n            'before-handler',\n            'handler',\n            'after-handler',\n            'after-signal',\n        ]\n    finally:\n        flask.request_started.disconnect(before_request_signal, app)\n        flask.request_finished.disconnect(after_request_signal, app),type='function_definition'\nline_star:60,line_end:102|char_star:0,char_end:68"->"type='INFORMATION BLOCK'\nline_star:61,line_end:102|char_star:4,char_end:68";
"def before_request_signal(sender):\n        calls.append('before-signal'),type='function_definition'\nline_star:64,line_end:65|char_star:4,char_end:37"[shape="box",fillcolor="#cee6b4",style=filled];
"type='INFORMATION BLOCK'\nline_star:61,line_end:102|char_star:4,char_end:68"->"def before_request_signal(sender):\n        calls.append('before-signal'),type='function_definition'\nline_star:64,line_end:65|char_star:4,char_end:37";
"before_request_signal,type='identifier'\nline_star:64,line_end:64|char_star:8,char_end:29"[shape="point",fillcolor="#121013",style=filled];
"def before_request_signal(sender):\n        calls.append('before-signal'),type='function_definition'\nline_star:64,line_end:65|char_star:4,char_end:37"->"before_request_signal,type='identifier'\nline_star:64,line_end:64|char_star:8,char_end:29";
"(sender),type='parameters'\nline_star:64,line_end:64|char_star:29,char_end:37"[shape="box",fillcolor="white",style=filled];
"def before_request_signal(sender):\n        calls.append('before-signal'),type='function_definition'\nline_star:64,line_end:65|char_star:4,char_end:37"->"(sender),type='parameters'\nline_star:64,line_end:64|char_star:29,char_end:37";
"sender,type='identifier'\nline_star:64,line_end:64|char_star:30,char_end:36"[shape="point",fillcolor="#121013",style=filled];
"(sender),type='parameters'\nline_star:64,line_end:64|char_star:29,char_end:37"->"sender,type='identifier'\nline_star:64,line_end:64|char_star:30,char_end:36";
"type='INFORMATION BLOCK'\nline_star:65,line_end:65|char_star:8,char_end:37"[shape="point",fillcolor="#121013",style=filled];
"def before_request_signal(sender):\n        calls.append('before-signal'),type='function_definition'\nline_star:64,line_end:65|char_star:4,char_end:37"->"type='INFORMATION BLOCK'\nline_star:65,line_end:65|char_star:8,char_end:37";
"def after_request_signal(sender, response):\n        assert response.data == b'stuff'\n        calls.append('after-signal'),type='function_definition'\nline_star:67,line_end:69|char_star:4,char_end:36"[shape="box",fillcolor="#cee6b4",style=filled];
"type='INFORMATION BLOCK'\nline_star:61,line_end:102|char_star:4,char_end:68"->"def after_request_signal(sender, response):\n        assert response.data == b'stuff'\n        calls.append('after-signal'),type='function_definition'\nline_star:67,line_end:69|char_star:4,char_end:36";
"after_request_signal,type='identifier'\nline_star:67,line_end:67|char_star:8,char_end:28"[shape="point",fillcolor="#121013",style=filled];
"def after_request_signal(sender, response):\n        assert response.data == b'stuff'\n        calls.append('after-signal'),type='function_definition'\nline_star:67,line_end:69|char_star:4,char_end:36"->"after_request_signal,type='identifier'\nline_star:67,line_end:67|char_star:8,char_end:28";
"(sender, response),type='parameters'\nline_star:67,line_end:67|char_star:28,char_end:46"[shape="box",fillcolor="white",style=filled];
"def after_request_signal(sender, response):\n        assert response.data == b'stuff'\n        calls.append('after-signal'),type='function_definition'\nline_star:67,line_end:69|char_star:4,char_end:36"->"(sender, response),type='parameters'\nline_star:67,line_end:67|char_star:28,char_end:46";
"sender,type='identifier'\nline_star:67,line_end:67|char_star:29,char_end:35"[shape="point",fillcolor="#121013",style=filled];
"(sender, response),type='parameters'\nline_star:67,line_end:67|char_star:28,char_end:46"->"sender,type='identifier'\nline_star:67,line_end:67|char_star:29,char_end:35";
"response,type='identifier'\nline_star:67,line_end:67|char_star:37,char_end:45"[shape="point",fillcolor="#121013",style=filled];
"(sender, response),type='parameters'\nline_star:67,line_end:67|char_star:28,char_end:46"->"response,type='identifier'\nline_star:67,line_end:67|char_star:37,char_end:45";
"type='INFORMATION BLOCK'\nline_star:68,line_end:69|char_star:8,char_end:36"[shape="point",fillcolor="#121013",style=filled];
"def after_request_signal(sender, response):\n        assert response.data == b'stuff'\n        calls.append('after-signal'),type='function_definition'\nline_star:67,line_end:69|char_star:4,char_end:36"->"type='INFORMATION BLOCK'\nline_star:68,line_end:69|char_star:8,char_end:36";
"assert response.data == b'stuff',type='assert_statement'\nline_star:68,line_end:68|char_star:8,char_end:40"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:68,line_end:69|char_star:8,char_end:36"->"assert response.data == b'stuff',type='assert_statement'\nline_star:68,line_end:68|char_star:8,char_end:40";
"response.data == b'stuff',type='comparison_operator'\nline_star:68,line_end:68|char_star:15,char_end:40"[shape="box",fillcolor="white",style=filled];
"assert response.data == b'stuff',type='assert_statement'\nline_star:68,line_end:68|char_star:8,char_end:40"->"response.data == b'stuff',type='comparison_operator'\nline_star:68,line_end:68|char_star:15,char_end:40";
"response.data,type='attribute'\nline_star:68,line_end:68|char_star:15,char_end:28"[shape="box",fillcolor="white",style=filled];
"response.data == b'stuff',type='comparison_operator'\nline_star:68,line_end:68|char_star:15,char_end:40"->"response.data,type='attribute'\nline_star:68,line_end:68|char_star:15,char_end:28";
"response,type='identifier'\nline_star:68,line_end:68|char_star:15,char_end:23"[shape="point",fillcolor="#121013",style=filled];
"response.data,type='attribute'\nline_star:68,line_end:68|char_star:15,char_end:28"->"response,type='identifier'\nline_star:68,line_end:68|char_star:15,char_end:23";
"data,type='identifier'\nline_star:68,line_end:68|char_star:24,char_end:28"[shape="point",fillcolor="#121013",style=filled];
"response.data,type='attribute'\nline_star:68,line_end:68|char_star:15,char_end:28"->"data,type='identifier'\nline_star:68,line_end:68|char_star:24,char_end:28";
"@app.before_request\n    def before_request_handler():\n        calls.append('before-handler'),type='decorated_definition'\nline_star:71,line_end:73|char_star:4,char_end:38"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:61,line_end:102|char_star:4,char_end:68"->"@app.before_request\n    def before_request_handler():\n        calls.append('before-handler'),type='decorated_definition'\nline_star:71,line_end:73|char_star:4,char_end:38";
"@app.before_request,type='decorator'\nline_star:71,line_end:71|char_star:4,char_end:23"[shape="box",fillcolor="white",style=filled];
"@app.before_request\n    def before_request_handler():\n        calls.append('before-handler'),type='decorated_definition'\nline_star:71,line_end:73|char_star:4,char_end:38"->"@app.before_request,type='decorator'\nline_star:71,line_end:71|char_star:4,char_end:23";
"def before_request_handler():\n        calls.append('before-handler'),type='function_definition'\nline_star:72,line_end:73|char_star:4,char_end:38"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.before_request\n    def before_request_handler():\n        calls.append('before-handler'),type='decorated_definition'\nline_star:71,line_end:73|char_star:4,char_end:38"->"def before_request_handler():\n        calls.append('before-handler'),type='function_definition'\nline_star:72,line_end:73|char_star:4,char_end:38";
"before_request_handler,type='identifier'\nline_star:72,line_end:72|char_star:8,char_end:30"[shape="point",fillcolor="#121013",style=filled];
"def before_request_handler():\n        calls.append('before-handler'),type='function_definition'\nline_star:72,line_end:73|char_star:4,char_end:38"->"before_request_handler,type='identifier'\nline_star:72,line_end:72|char_star:8,char_end:30";
"type='INFORMATION BLOCK'\nline_star:73,line_end:73|char_star:8,char_end:38"[shape="point",fillcolor="#121013",style=filled];
"def before_request_handler():\n        calls.append('before-handler'),type='function_definition'\nline_star:72,line_end:73|char_star:4,char_end:38"->"type='INFORMATION BLOCK'\nline_star:73,line_end:73|char_star:8,char_end:38";
"@app.after_request\n    def after_request_handler(response):\n        calls.append('after-handler')\n        response.data = 'stuff'\n        return response,type='decorated_definition'\nline_star:75,line_end:79|char_star:4,char_end:23"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:61,line_end:102|char_star:4,char_end:68"->"@app.after_request\n    def after_request_handler(response):\n        calls.append('after-handler')\n        response.data = 'stuff'\n        return response,type='decorated_definition'\nline_star:75,line_end:79|char_star:4,char_end:23";
"@app.after_request,type='decorator'\nline_star:75,line_end:75|char_star:4,char_end:22"[shape="box",fillcolor="white",style=filled];
"@app.after_request\n    def after_request_handler(response):\n        calls.append('after-handler')\n        response.data = 'stuff'\n        return response,type='decorated_definition'\nline_star:75,line_end:79|char_star:4,char_end:23"->"@app.after_request,type='decorator'\nline_star:75,line_end:75|char_star:4,char_end:22";
"def after_request_handler(response):\n        calls.append('after-handler')\n        response.data = 'stuff'\n        return response,type='function_definition'\nline_star:76,line_end:79|char_star:4,char_end:23"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.after_request\n    def after_request_handler(response):\n        calls.append('after-handler')\n        response.data = 'stuff'\n        return response,type='decorated_definition'\nline_star:75,line_end:79|char_star:4,char_end:23"->"def after_request_handler(response):\n        calls.append('after-handler')\n        response.data = 'stuff'\n        return response,type='function_definition'\nline_star:76,line_end:79|char_star:4,char_end:23";
"after_request_handler,type='identifier'\nline_star:76,line_end:76|char_star:8,char_end:29"[shape="point",fillcolor="#121013",style=filled];
"def after_request_handler(response):\n        calls.append('after-handler')\n        response.data = 'stuff'\n        return response,type='function_definition'\nline_star:76,line_end:79|char_star:4,char_end:23"->"after_request_handler,type='identifier'\nline_star:76,line_end:76|char_star:8,char_end:29";
"(response),type='parameters'\nline_star:76,line_end:76|char_star:29,char_end:39"[shape="box",fillcolor="white",style=filled];
"def after_request_handler(response):\n        calls.append('after-handler')\n        response.data = 'stuff'\n        return response,type='function_definition'\nline_star:76,line_end:79|char_star:4,char_end:23"->"(response),type='parameters'\nline_star:76,line_end:76|char_star:29,char_end:39";
"response,type='identifier'\nline_star:76,line_end:76|char_star:30,char_end:38"[shape="point",fillcolor="#121013",style=filled];
"(response),type='parameters'\nline_star:76,line_end:76|char_star:29,char_end:39"->"response,type='identifier'\nline_star:76,line_end:76|char_star:30,char_end:38";
"type='INFORMATION BLOCK'\nline_star:77,line_end:79|char_star:8,char_end:23"[shape="point",fillcolor="#121013",style=filled];
"def after_request_handler(response):\n        calls.append('after-handler')\n        response.data = 'stuff'\n        return response,type='function_definition'\nline_star:76,line_end:79|char_star:4,char_end:23"->"type='INFORMATION BLOCK'\nline_star:77,line_end:79|char_star:8,char_end:23";
"return response,type='return_statement'\nline_star:79,line_end:79|char_star:8,char_end:23"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:77,line_end:79|char_star:8,char_end:23"->"return response,type='return_statement'\nline_star:79,line_end:79|char_star:8,char_end:23";
"@app.route('/')\n    def index():\n        calls.append('handler')\n        return 'ignored anyway',type='decorated_definition'\nline_star:81,line_end:84|char_star:4,char_end:31"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:61,line_end:102|char_star:4,char_end:68"->"@app.route('/')\n    def index():\n        calls.append('handler')\n        return 'ignored anyway',type='decorated_definition'\nline_star:81,line_end:84|char_star:4,char_end:31";
"@app.route('/'),type='decorator'\nline_star:81,line_end:81|char_star:4,char_end:19"[shape="box",fillcolor="white",style=filled];
"@app.route('/')\n    def index():\n        calls.append('handler')\n        return 'ignored anyway',type='decorated_definition'\nline_star:81,line_end:84|char_star:4,char_end:31"->"@app.route('/'),type='decorator'\nline_star:81,line_end:81|char_star:4,char_end:19";
"def index():\n        calls.append('handler')\n        return 'ignored anyway',type='function_definition'\nline_star:82,line_end:84|char_star:4,char_end:31"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.route('/')\n    def index():\n        calls.append('handler')\n        return 'ignored anyway',type='decorated_definition'\nline_star:81,line_end:84|char_star:4,char_end:31"->"def index():\n        calls.append('handler')\n        return 'ignored anyway',type='function_definition'\nline_star:82,line_end:84|char_star:4,char_end:31";
"index,type='identifier'\nline_star:82,line_end:82|char_star:8,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"def index():\n        calls.append('handler')\n        return 'ignored anyway',type='function_definition'\nline_star:82,line_end:84|char_star:4,char_end:31"->"index,type='identifier'\nline_star:82,line_end:82|char_star:8,char_end:13";
"type='INFORMATION BLOCK'\nline_star:83,line_end:84|char_star:8,char_end:31"[shape="point",fillcolor="#121013",style=filled];
"def index():\n        calls.append('handler')\n        return 'ignored anyway',type='function_definition'\nline_star:82,line_end:84|char_star:4,char_end:31"->"type='INFORMATION BLOCK'\nline_star:83,line_end:84|char_star:8,char_end:31";
"return 'ignored anyway',type='return_statement'\nline_star:84,line_end:84|char_star:8,char_end:31"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:83,line_end:84|char_star:8,char_end:31"->"return 'ignored anyway',type='return_statement'\nline_star:84,line_end:84|char_star:8,char_end:31";
"try:\n        rv = app.test_client().get('/')\n        assert rv.data == b'stuff'\n\n        assert calls == [\n            'before-signal',\n            'before-handler',\n            'handler',\n            'after-handler',\n            'after-signal',\n        ]\n    finally:\n        flask.request_started.disconnect(before_request_signal, app)\n        flask.request_finished.disconnect(after_request_signal, app),type='try_statement'\nline_star:89,line_end:102|char_star:4,char_end:68"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:61,line_end:102|char_star:4,char_end:68"->"try:\n        rv = app.test_client().get('/')\n        assert rv.data == b'stuff'\n\n        assert calls == [\n            'before-signal',\n            'before-handler',\n            'handler',\n            'after-handler',\n            'after-signal',\n        ]\n    finally:\n        flask.request_started.disconnect(before_request_signal, app)\n        flask.request_finished.disconnect(after_request_signal, app),type='try_statement'\nline_star:89,line_end:102|char_star:4,char_end:68";
"try,type='try'\nline_star:89,line_end:89|char_star:4,char_end:7"[shape="box",fillcolor="white",style=filled];
"try:\n        rv = app.test_client().get('/')\n        assert rv.data == b'stuff'\n\n        assert calls == [\n            'before-signal',\n            'before-handler',\n            'handler',\n            'after-handler',\n            'after-signal',\n        ]\n    finally:\n        flask.request_started.disconnect(before_request_signal, app)\n        flask.request_finished.disconnect(after_request_signal, app),type='try_statement'\nline_star:89,line_end:102|char_star:4,char_end:68"->"try,type='try'\nline_star:89,line_end:89|char_star:4,char_end:7";
"type='INFORMATION BLOCK'\nline_star:90,line_end:99|char_star:8,char_end:9"[shape="point",fillcolor="#121013",style=filled];
"try:\n        rv = app.test_client().get('/')\n        assert rv.data == b'stuff'\n\n        assert calls == [\n            'before-signal',\n            'before-handler',\n            'handler',\n            'after-handler',\n            'after-signal',\n        ]\n    finally:\n        flask.request_started.disconnect(before_request_signal, app)\n        flask.request_finished.disconnect(after_request_signal, app),type='try_statement'\nline_star:89,line_end:102|char_star:4,char_end:68"->"type='INFORMATION BLOCK'\nline_star:90,line_end:99|char_star:8,char_end:9";
"assert rv.data == b'stuff',type='assert_statement'\nline_star:91,line_end:91|char_star:8,char_end:34"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:90,line_end:99|char_star:8,char_end:9"->"assert rv.data == b'stuff',type='assert_statement'\nline_star:91,line_end:91|char_star:8,char_end:34";
"rv.data == b'stuff',type='comparison_operator'\nline_star:91,line_end:91|char_star:15,char_end:34"[shape="box",fillcolor="white",style=filled];
"assert rv.data == b'stuff',type='assert_statement'\nline_star:91,line_end:91|char_star:8,char_end:34"->"rv.data == b'stuff',type='comparison_operator'\nline_star:91,line_end:91|char_star:15,char_end:34";
"rv.data,type='attribute'\nline_star:91,line_end:91|char_star:15,char_end:22"[shape="box",fillcolor="white",style=filled];
"rv.data == b'stuff',type='comparison_operator'\nline_star:91,line_end:91|char_star:15,char_end:34"->"rv.data,type='attribute'\nline_star:91,line_end:91|char_star:15,char_end:22";
"rv,type='identifier'\nline_star:91,line_end:91|char_star:15,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"rv.data,type='attribute'\nline_star:91,line_end:91|char_star:15,char_end:22"->"rv,type='identifier'\nline_star:91,line_end:91|char_star:15,char_end:17";
"data,type='identifier'\nline_star:91,line_end:91|char_star:18,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"rv.data,type='attribute'\nline_star:91,line_end:91|char_star:15,char_end:22"->"data,type='identifier'\nline_star:91,line_end:91|char_star:18,char_end:22";
"assert calls == [\n            'before-signal',\n            'before-handler',\n            'handler',\n            'after-handler',\n            'after-signal',\n        ],type='assert_statement'\nline_star:93,line_end:99|char_star:8,char_end:9"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:90,line_end:99|char_star:8,char_end:9"->"assert calls == [\n            'before-signal',\n            'before-handler',\n            'handler',\n            'after-handler',\n            'after-signal',\n        ],type='assert_statement'\nline_star:93,line_end:99|char_star:8,char_end:9";
"calls == [\n            'before-signal',\n            'before-handler',\n            'handler',\n            'after-handler',\n            'after-signal',\n        ],type='comparison_operator'\nline_star:93,line_end:99|char_star:15,char_end:9"[shape="box",fillcolor="white",style=filled];
"assert calls == [\n            'before-signal',\n            'before-handler',\n            'handler',\n            'after-handler',\n            'after-signal',\n        ],type='assert_statement'\nline_star:93,line_end:99|char_star:8,char_end:9"->"calls == [\n            'before-signal',\n            'before-handler',\n            'handler',\n            'after-handler',\n            'after-signal',\n        ],type='comparison_operator'\nline_star:93,line_end:99|char_star:15,char_end:9";
"calls,type='identifier'\nline_star:93,line_end:93|char_star:15,char_end:20"[shape="point",fillcolor="#121013",style=filled];
"calls == [\n            'before-signal',\n            'before-handler',\n            'handler',\n            'after-handler',\n            'after-signal',\n        ],type='comparison_operator'\nline_star:93,line_end:99|char_star:15,char_end:9"->"calls,type='identifier'\nline_star:93,line_end:93|char_star:15,char_end:20";
"[\n            'before-signal',\n            'before-handler',\n            'handler',\n            'after-handler',\n            'after-signal',\n        ],type='list'\nline_star:93,line_end:99|char_star:24,char_end:9"[shape="box",fillcolor="white",style=filled];
"calls == [\n            'before-signal',\n            'before-handler',\n            'handler',\n            'after-handler',\n            'after-signal',\n        ],type='comparison_operator'\nline_star:93,line_end:99|char_star:15,char_end:9"->"[\n            'before-signal',\n            'before-handler',\n            'handler',\n            'after-handler',\n            'after-signal',\n        ],type='list'\nline_star:93,line_end:99|char_star:24,char_end:9";
"finally:\n        flask.request_started.disconnect(before_request_signal, app)\n        flask.request_finished.disconnect(after_request_signal, app),type='finally_clause'\nline_star:100,line_end:102|char_star:4,char_end:68"[shape="box",fillcolor="white",style=filled];
"try:\n        rv = app.test_client().get('/')\n        assert rv.data == b'stuff'\n\n        assert calls == [\n            'before-signal',\n            'before-handler',\n            'handler',\n            'after-handler',\n            'after-signal',\n        ]\n    finally:\n        flask.request_started.disconnect(before_request_signal, app)\n        flask.request_finished.disconnect(after_request_signal, app),type='try_statement'\nline_star:89,line_end:102|char_star:4,char_end:68"->"finally:\n        flask.request_started.disconnect(before_request_signal, app)\n        flask.request_finished.disconnect(after_request_signal, app),type='finally_clause'\nline_star:100,line_end:102|char_star:4,char_end:68";
"finally,type='finally'\nline_star:100,line_end:100|char_star:4,char_end:11"[shape="box",fillcolor="white",style=filled];
"finally:\n        flask.request_started.disconnect(before_request_signal, app)\n        flask.request_finished.disconnect(after_request_signal, app),type='finally_clause'\nline_star:100,line_end:102|char_star:4,char_end:68"->"finally,type='finally'\nline_star:100,line_end:100|char_star:4,char_end:11";
"type='INFORMATION BLOCK'\nline_star:101,line_end:102|char_star:8,char_end:68"[shape="point",fillcolor="#121013",style=filled];
"finally:\n        flask.request_started.disconnect(before_request_signal, app)\n        flask.request_finished.disconnect(after_request_signal, app),type='finally_clause'\nline_star:100,line_end:102|char_star:4,char_end:68"->"type='INFORMATION BLOCK'\nline_star:101,line_end:102|char_star:8,char_end:68";
"def test_request_exception_signal():\n    app = flask.Flask(__name__)\n    recorded = []\n\n    @app.route('/')\n    def index():\n        1 // 0\n\n    def record(sender, exception):\n        recorded.append(exception)\n\n    flask.got_request_exception.connect(record, app)\n    try:\n        assert app.test_client().get('/').status_code == 500\n        assert len(recorded) == 1\n        assert isinstance(recorded[0], ZeroDivisionError)\n    finally:\n        flask.got_request_exception.disconnect(record, app),type='function_definition'\nline_star:105,line_end:122|char_star:0,char_end:59"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_request_exception_signal():\n    app = flask.Flask(__name__)\n    recorded = []\n\n    @app.route('/')\n    def index():\n        1 // 0\n\n    def record(sender, exception):\n        recorded.append(exception)\n\n    flask.got_request_exception.connect(record, app)\n    try:\n        assert app.test_client().get('/').status_code == 500\n        assert len(recorded) == 1\n        assert isinstance(recorded[0], ZeroDivisionError)\n    finally:\n        flask.got_request_exception.disconnect(record, app),type='function_definition'\nline_star:105,line_end:122|char_star:0,char_end:59";
"test_request_exception_signal,type='identifier'\nline_star:105,line_end:105|char_star:4,char_end:33"[shape="point",fillcolor="#121013",style=filled];
"def test_request_exception_signal():\n    app = flask.Flask(__name__)\n    recorded = []\n\n    @app.route('/')\n    def index():\n        1 // 0\n\n    def record(sender, exception):\n        recorded.append(exception)\n\n    flask.got_request_exception.connect(record, app)\n    try:\n        assert app.test_client().get('/').status_code == 500\n        assert len(recorded) == 1\n        assert isinstance(recorded[0], ZeroDivisionError)\n    finally:\n        flask.got_request_exception.disconnect(record, app),type='function_definition'\nline_star:105,line_end:122|char_star:0,char_end:59"->"test_request_exception_signal,type='identifier'\nline_star:105,line_end:105|char_star:4,char_end:33";
"type='INFORMATION BLOCK'\nline_star:106,line_end:122|char_star:4,char_end:59"[shape="point",fillcolor="#121013",style=filled];
"def test_request_exception_signal():\n    app = flask.Flask(__name__)\n    recorded = []\n\n    @app.route('/')\n    def index():\n        1 // 0\n\n    def record(sender, exception):\n        recorded.append(exception)\n\n    flask.got_request_exception.connect(record, app)\n    try:\n        assert app.test_client().get('/').status_code == 500\n        assert len(recorded) == 1\n        assert isinstance(recorded[0], ZeroDivisionError)\n    finally:\n        flask.got_request_exception.disconnect(record, app),type='function_definition'\nline_star:105,line_end:122|char_star:0,char_end:59"->"type='INFORMATION BLOCK'\nline_star:106,line_end:122|char_star:4,char_end:59";
"@app.route('/')\n    def index():\n        1 // 0,type='decorated_definition'\nline_star:109,line_end:111|char_star:4,char_end:14"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:106,line_end:122|char_star:4,char_end:59"->"@app.route('/')\n    def index():\n        1 // 0,type='decorated_definition'\nline_star:109,line_end:111|char_star:4,char_end:14";
"@app.route('/'),type='decorator'\nline_star:109,line_end:109|char_star:4,char_end:19"[shape="box",fillcolor="white",style=filled];
"@app.route('/')\n    def index():\n        1 // 0,type='decorated_definition'\nline_star:109,line_end:111|char_star:4,char_end:14"->"@app.route('/'),type='decorator'\nline_star:109,line_end:109|char_star:4,char_end:19";
"def index():\n        1 // 0,type='function_definition'\nline_star:110,line_end:111|char_star:4,char_end:14"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.route('/')\n    def index():\n        1 // 0,type='decorated_definition'\nline_star:109,line_end:111|char_star:4,char_end:14"->"def index():\n        1 // 0,type='function_definition'\nline_star:110,line_end:111|char_star:4,char_end:14";
"index,type='identifier'\nline_star:110,line_end:110|char_star:8,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"def index():\n        1 // 0,type='function_definition'\nline_star:110,line_end:111|char_star:4,char_end:14"->"index,type='identifier'\nline_star:110,line_end:110|char_star:8,char_end:13";
"type='INFORMATION BLOCK'\nline_star:111,line_end:111|char_star:8,char_end:14"[shape="point",fillcolor="#121013",style=filled];
"def index():\n        1 // 0,type='function_definition'\nline_star:110,line_end:111|char_star:4,char_end:14"->"type='INFORMATION BLOCK'\nline_star:111,line_end:111|char_star:8,char_end:14";
"def record(sender, exception):\n        recorded.append(exception),type='function_definition'\nline_star:113,line_end:114|char_star:4,char_end:34"[shape="box",fillcolor="#cee6b4",style=filled];
"type='INFORMATION BLOCK'\nline_star:106,line_end:122|char_star:4,char_end:59"->"def record(sender, exception):\n        recorded.append(exception),type='function_definition'\nline_star:113,line_end:114|char_star:4,char_end:34";
"record,type='identifier'\nline_star:113,line_end:113|char_star:8,char_end:14"[shape="point",fillcolor="#121013",style=filled];
"def record(sender, exception):\n        recorded.append(exception),type='function_definition'\nline_star:113,line_end:114|char_star:4,char_end:34"->"record,type='identifier'\nline_star:113,line_end:113|char_star:8,char_end:14";
"(sender, exception),type='parameters'\nline_star:113,line_end:113|char_star:14,char_end:33"[shape="box",fillcolor="white",style=filled];
"def record(sender, exception):\n        recorded.append(exception),type='function_definition'\nline_star:113,line_end:114|char_star:4,char_end:34"->"(sender, exception),type='parameters'\nline_star:113,line_end:113|char_star:14,char_end:33";
"sender,type='identifier'\nline_star:113,line_end:113|char_star:15,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"(sender, exception),type='parameters'\nline_star:113,line_end:113|char_star:14,char_end:33"->"sender,type='identifier'\nline_star:113,line_end:113|char_star:15,char_end:21";
"exception,type='identifier'\nline_star:113,line_end:113|char_star:23,char_end:32"[shape="point",fillcolor="#121013",style=filled];
"(sender, exception),type='parameters'\nline_star:113,line_end:113|char_star:14,char_end:33"->"exception,type='identifier'\nline_star:113,line_end:113|char_star:23,char_end:32";
"type='INFORMATION BLOCK'\nline_star:114,line_end:114|char_star:8,char_end:34"[shape="point",fillcolor="#121013",style=filled];
"def record(sender, exception):\n        recorded.append(exception),type='function_definition'\nline_star:113,line_end:114|char_star:4,char_end:34"->"type='INFORMATION BLOCK'\nline_star:114,line_end:114|char_star:8,char_end:34";
"try:\n        assert app.test_client().get('/').status_code == 500\n        assert len(recorded) == 1\n        assert isinstance(recorded[0], ZeroDivisionError)\n    finally:\n        flask.got_request_exception.disconnect(record, app),type='try_statement'\nline_star:117,line_end:122|char_star:4,char_end:59"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:106,line_end:122|char_star:4,char_end:59"->"try:\n        assert app.test_client().get('/').status_code == 500\n        assert len(recorded) == 1\n        assert isinstance(recorded[0], ZeroDivisionError)\n    finally:\n        flask.got_request_exception.disconnect(record, app),type='try_statement'\nline_star:117,line_end:122|char_star:4,char_end:59";
"try,type='try'\nline_star:117,line_end:117|char_star:4,char_end:7"[shape="box",fillcolor="white",style=filled];
"try:\n        assert app.test_client().get('/').status_code == 500\n        assert len(recorded) == 1\n        assert isinstance(recorded[0], ZeroDivisionError)\n    finally:\n        flask.got_request_exception.disconnect(record, app),type='try_statement'\nline_star:117,line_end:122|char_star:4,char_end:59"->"try,type='try'\nline_star:117,line_end:117|char_star:4,char_end:7";
"type='INFORMATION BLOCK'\nline_star:118,line_end:120|char_star:8,char_end:57"[shape="point",fillcolor="#121013",style=filled];
"try:\n        assert app.test_client().get('/').status_code == 500\n        assert len(recorded) == 1\n        assert isinstance(recorded[0], ZeroDivisionError)\n    finally:\n        flask.got_request_exception.disconnect(record, app),type='try_statement'\nline_star:117,line_end:122|char_star:4,char_end:59"->"type='INFORMATION BLOCK'\nline_star:118,line_end:120|char_star:8,char_end:57";
"assert app.test_client().get('/').status_code == 500,type='assert_statement'\nline_star:118,line_end:118|char_star:8,char_end:60"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:118,line_end:120|char_star:8,char_end:57"->"assert app.test_client().get('/').status_code == 500,type='assert_statement'\nline_star:118,line_end:118|char_star:8,char_end:60";
"app.test_client().get('/').status_code == 500,type='comparison_operator'\nline_star:118,line_end:118|char_star:15,char_end:60"[shape="box",fillcolor="white",style=filled];
"assert app.test_client().get('/').status_code == 500,type='assert_statement'\nline_star:118,line_end:118|char_star:8,char_end:60"->"app.test_client().get('/').status_code == 500,type='comparison_operator'\nline_star:118,line_end:118|char_star:15,char_end:60";
"app.test_client().get('/').status_code,type='attribute'\nline_star:118,line_end:118|char_star:15,char_end:53"[shape="box",fillcolor="white",style=filled];
"app.test_client().get('/').status_code == 500,type='comparison_operator'\nline_star:118,line_end:118|char_star:15,char_end:60"->"app.test_client().get('/').status_code,type='attribute'\nline_star:118,line_end:118|char_star:15,char_end:53";
"app.test_client().get('/'),type='call'\nline_star:118,line_end:118|char_star:15,char_end:41"[shape="box",fillcolor="white",style=filled];
"app.test_client().get('/').status_code,type='attribute'\nline_star:118,line_end:118|char_star:15,char_end:53"->"app.test_client().get('/'),type='call'\nline_star:118,line_end:118|char_star:15,char_end:41";
"app.test_client().get,type='attribute'\nline_star:118,line_end:118|char_star:15,char_end:36"[shape="box",fillcolor="white",style=filled];
"app.test_client().get('/'),type='call'\nline_star:118,line_end:118|char_star:15,char_end:41"->"app.test_client().get,type='attribute'\nline_star:118,line_end:118|char_star:15,char_end:36";
"app.test_client(),type='call'\nline_star:118,line_end:118|char_star:15,char_end:32"[shape="box",fillcolor="white",style=filled];
"app.test_client().get,type='attribute'\nline_star:118,line_end:118|char_star:15,char_end:36"->"app.test_client(),type='call'\nline_star:118,line_end:118|char_star:15,char_end:32";
"app.test_client,type='attribute'\nline_star:118,line_end:118|char_star:15,char_end:30"[shape="box",fillcolor="white",style=filled];
"app.test_client(),type='call'\nline_star:118,line_end:118|char_star:15,char_end:32"->"app.test_client,type='attribute'\nline_star:118,line_end:118|char_star:15,char_end:30";
"app,type='identifier'\nline_star:118,line_end:118|char_star:15,char_end:18"[shape="point",fillcolor="#121013",style=filled];
"app.test_client,type='attribute'\nline_star:118,line_end:118|char_star:15,char_end:30"->"app,type='identifier'\nline_star:118,line_end:118|char_star:15,char_end:18";
"test_client,type='identifier'\nline_star:118,line_end:118|char_star:19,char_end:30"[shape="point",fillcolor="#121013",style=filled];
"app.test_client,type='attribute'\nline_star:118,line_end:118|char_star:15,char_end:30"->"test_client,type='identifier'\nline_star:118,line_end:118|char_star:19,char_end:30";
"get,type='identifier'\nline_star:118,line_end:118|char_star:33,char_end:36"[shape="point",fillcolor="#121013",style=filled];
"app.test_client().get,type='attribute'\nline_star:118,line_end:118|char_star:15,char_end:36"->"get,type='identifier'\nline_star:118,line_end:118|char_star:33,char_end:36";
"('/'),type='argument_list'\nline_star:118,line_end:118|char_star:36,char_end:41"[shape="box",fillcolor="white",style=filled];
"app.test_client().get('/'),type='call'\nline_star:118,line_end:118|char_star:15,char_end:41"->"('/'),type='argument_list'\nline_star:118,line_end:118|char_star:36,char_end:41";
"status_code,type='identifier'\nline_star:118,line_end:118|char_star:42,char_end:53"[shape="point",fillcolor="#121013",style=filled];
"app.test_client().get('/').status_code,type='attribute'\nline_star:118,line_end:118|char_star:15,char_end:53"->"status_code,type='identifier'\nline_star:118,line_end:118|char_star:42,char_end:53";
"assert len(recorded) == 1,type='assert_statement'\nline_star:119,line_end:119|char_star:8,char_end:33"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:118,line_end:120|char_star:8,char_end:57"->"assert len(recorded) == 1,type='assert_statement'\nline_star:119,line_end:119|char_star:8,char_end:33";
"len(recorded) == 1,type='comparison_operator'\nline_star:119,line_end:119|char_star:15,char_end:33"[shape="box",fillcolor="white",style=filled];
"assert len(recorded) == 1,type='assert_statement'\nline_star:119,line_end:119|char_star:8,char_end:33"->"len(recorded) == 1,type='comparison_operator'\nline_star:119,line_end:119|char_star:15,char_end:33";
"len(recorded),type='call'\nline_star:119,line_end:119|char_star:15,char_end:28"[shape="box",fillcolor="white",style=filled];
"len(recorded) == 1,type='comparison_operator'\nline_star:119,line_end:119|char_star:15,char_end:33"->"len(recorded),type='call'\nline_star:119,line_end:119|char_star:15,char_end:28";
"len,type='identifier'\nline_star:119,line_end:119|char_star:15,char_end:18"[shape="point",fillcolor="#121013",style=filled];
"len(recorded),type='call'\nline_star:119,line_end:119|char_star:15,char_end:28"->"len,type='identifier'\nline_star:119,line_end:119|char_star:15,char_end:18";
"(recorded),type='argument_list'\nline_star:119,line_end:119|char_star:18,char_end:28"[shape="box",fillcolor="white",style=filled];
"len(recorded),type='call'\nline_star:119,line_end:119|char_star:15,char_end:28"->"(recorded),type='argument_list'\nline_star:119,line_end:119|char_star:18,char_end:28";
"recorded,type='identifier'\nline_star:119,line_end:119|char_star:19,char_end:27"[shape="point",fillcolor="#121013",style=filled];
"(recorded),type='argument_list'\nline_star:119,line_end:119|char_star:18,char_end:28"->"recorded,type='identifier'\nline_star:119,line_end:119|char_star:19,char_end:27";
"assert isinstance(recorded[0], ZeroDivisionError),type='assert_statement'\nline_star:120,line_end:120|char_star:8,char_end:57"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:118,line_end:120|char_star:8,char_end:57"->"assert isinstance(recorded[0], ZeroDivisionError),type='assert_statement'\nline_star:120,line_end:120|char_star:8,char_end:57";
"isinstance(recorded[0], ZeroDivisionError),type='call'\nline_star:120,line_end:120|char_star:15,char_end:57"[shape="box",fillcolor="white",style=filled];
"assert isinstance(recorded[0], ZeroDivisionError),type='assert_statement'\nline_star:120,line_end:120|char_star:8,char_end:57"->"isinstance(recorded[0], ZeroDivisionError),type='call'\nline_star:120,line_end:120|char_star:15,char_end:57";
"isinstance,type='identifier'\nline_star:120,line_end:120|char_star:15,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"isinstance(recorded[0], ZeroDivisionError),type='call'\nline_star:120,line_end:120|char_star:15,char_end:57"->"isinstance,type='identifier'\nline_star:120,line_end:120|char_star:15,char_end:25";
"(recorded[0], ZeroDivisionError),type='argument_list'\nline_star:120,line_end:120|char_star:25,char_end:57"[shape="box",fillcolor="white",style=filled];
"isinstance(recorded[0], ZeroDivisionError),type='call'\nline_star:120,line_end:120|char_star:15,char_end:57"->"(recorded[0], ZeroDivisionError),type='argument_list'\nline_star:120,line_end:120|char_star:25,char_end:57";
"recorded[0],type='subscript'\nline_star:120,line_end:120|char_star:26,char_end:37"[shape="box",fillcolor="white",style=filled];
"(recorded[0], ZeroDivisionError),type='argument_list'\nline_star:120,line_end:120|char_star:25,char_end:57"->"recorded[0],type='subscript'\nline_star:120,line_end:120|char_star:26,char_end:37";
"recorded,type='identifier'\nline_star:120,line_end:120|char_star:26,char_end:34"[shape="point",fillcolor="#121013",style=filled];
"recorded[0],type='subscript'\nline_star:120,line_end:120|char_star:26,char_end:37"->"recorded,type='identifier'\nline_star:120,line_end:120|char_star:26,char_end:34";
"ZeroDivisionError,type='identifier'\nline_star:120,line_end:120|char_star:39,char_end:56"[shape="point",fillcolor="#121013",style=filled];
"(recorded[0], ZeroDivisionError),type='argument_list'\nline_star:120,line_end:120|char_star:25,char_end:57"->"ZeroDivisionError,type='identifier'\nline_star:120,line_end:120|char_star:39,char_end:56";
"finally:\n        flask.got_request_exception.disconnect(record, app),type='finally_clause'\nline_star:121,line_end:122|char_star:4,char_end:59"[shape="box",fillcolor="white",style=filled];
"try:\n        assert app.test_client().get('/').status_code == 500\n        assert len(recorded) == 1\n        assert isinstance(recorded[0], ZeroDivisionError)\n    finally:\n        flask.got_request_exception.disconnect(record, app),type='try_statement'\nline_star:117,line_end:122|char_star:4,char_end:59"->"finally:\n        flask.got_request_exception.disconnect(record, app),type='finally_clause'\nline_star:121,line_end:122|char_star:4,char_end:59";
"finally,type='finally'\nline_star:121,line_end:121|char_star:4,char_end:11"[shape="box",fillcolor="white",style=filled];
"finally:\n        flask.got_request_exception.disconnect(record, app),type='finally_clause'\nline_star:121,line_end:122|char_star:4,char_end:59"->"finally,type='finally'\nline_star:121,line_end:121|char_star:4,char_end:11";
"type='INFORMATION BLOCK'\nline_star:122,line_end:122|char_star:8,char_end:59"[shape="point",fillcolor="#121013",style=filled];
"finally:\n        flask.got_request_exception.disconnect(record, app),type='finally_clause'\nline_star:121,line_end:122|char_star:4,char_end:59"->"type='INFORMATION BLOCK'\nline_star:122,line_end:122|char_star:8,char_end:59";
"def test_appcontext_signals():\n    app = flask.Flask(__name__)\n    recorded = []\n\n    def record_push(sender, **kwargs):\n        recorded.append('push')\n\n    def record_pop(sender, **kwargs):\n        recorded.append('pop')\n\n    @app.route('/')\n    def index():\n        return 'Hello'\n\n    flask.appcontext_pushed.connect(record_push, app)\n    flask.appcontext_popped.connect(record_pop, app)\n    try:\n        with app.test_client() as c:\n            rv = c.get('/')\n            assert rv.data == b'Hello'\n            assert recorded == ['push']\n        assert recorded == ['push', 'pop']\n    finally:\n        flask.appcontext_pushed.disconnect(record_push, app)\n        flask.appcontext_popped.disconnect(record_pop, app),type='function_definition'\nline_star:125,line_end:149|char_star:0,char_end:59"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_appcontext_signals():\n    app = flask.Flask(__name__)\n    recorded = []\n\n    def record_push(sender, **kwargs):\n        recorded.append('push')\n\n    def record_pop(sender, **kwargs):\n        recorded.append('pop')\n\n    @app.route('/')\n    def index():\n        return 'Hello'\n\n    flask.appcontext_pushed.connect(record_push, app)\n    flask.appcontext_popped.connect(record_pop, app)\n    try:\n        with app.test_client() as c:\n            rv = c.get('/')\n            assert rv.data == b'Hello'\n            assert recorded == ['push']\n        assert recorded == ['push', 'pop']\n    finally:\n        flask.appcontext_pushed.disconnect(record_push, app)\n        flask.appcontext_popped.disconnect(record_pop, app),type='function_definition'\nline_star:125,line_end:149|char_star:0,char_end:59";
"test_appcontext_signals,type='identifier'\nline_star:125,line_end:125|char_star:4,char_end:27"[shape="point",fillcolor="#121013",style=filled];
"def test_appcontext_signals():\n    app = flask.Flask(__name__)\n    recorded = []\n\n    def record_push(sender, **kwargs):\n        recorded.append('push')\n\n    def record_pop(sender, **kwargs):\n        recorded.append('pop')\n\n    @app.route('/')\n    def index():\n        return 'Hello'\n\n    flask.appcontext_pushed.connect(record_push, app)\n    flask.appcontext_popped.connect(record_pop, app)\n    try:\n        with app.test_client() as c:\n            rv = c.get('/')\n            assert rv.data == b'Hello'\n            assert recorded == ['push']\n        assert recorded == ['push', 'pop']\n    finally:\n        flask.appcontext_pushed.disconnect(record_push, app)\n        flask.appcontext_popped.disconnect(record_pop, app),type='function_definition'\nline_star:125,line_end:149|char_star:0,char_end:59"->"test_appcontext_signals,type='identifier'\nline_star:125,line_end:125|char_star:4,char_end:27";
"type='INFORMATION BLOCK'\nline_star:126,line_end:149|char_star:4,char_end:59"[shape="point",fillcolor="#121013",style=filled];
"def test_appcontext_signals():\n    app = flask.Flask(__name__)\n    recorded = []\n\n    def record_push(sender, **kwargs):\n        recorded.append('push')\n\n    def record_pop(sender, **kwargs):\n        recorded.append('pop')\n\n    @app.route('/')\n    def index():\n        return 'Hello'\n\n    flask.appcontext_pushed.connect(record_push, app)\n    flask.appcontext_popped.connect(record_pop, app)\n    try:\n        with app.test_client() as c:\n            rv = c.get('/')\n            assert rv.data == b'Hello'\n            assert recorded == ['push']\n        assert recorded == ['push', 'pop']\n    finally:\n        flask.appcontext_pushed.disconnect(record_push, app)\n        flask.appcontext_popped.disconnect(record_pop, app),type='function_definition'\nline_star:125,line_end:149|char_star:0,char_end:59"->"type='INFORMATION BLOCK'\nline_star:126,line_end:149|char_star:4,char_end:59";
"def record_push(sender, **kwargs):\n        recorded.append('push'),type='function_definition'\nline_star:129,line_end:130|char_star:4,char_end:31"[shape="box",fillcolor="#cee6b4",style=filled];
"type='INFORMATION BLOCK'\nline_star:126,line_end:149|char_star:4,char_end:59"->"def record_push(sender, **kwargs):\n        recorded.append('push'),type='function_definition'\nline_star:129,line_end:130|char_star:4,char_end:31";
"record_push,type='identifier'\nline_star:129,line_end:129|char_star:8,char_end:19"[shape="point",fillcolor="#121013",style=filled];
"def record_push(sender, **kwargs):\n        recorded.append('push'),type='function_definition'\nline_star:129,line_end:130|char_star:4,char_end:31"->"record_push,type='identifier'\nline_star:129,line_end:129|char_star:8,char_end:19";
"(sender, **kwargs),type='parameters'\nline_star:129,line_end:129|char_star:19,char_end:37"[shape="box",fillcolor="white",style=filled];
"def record_push(sender, **kwargs):\n        recorded.append('push'),type='function_definition'\nline_star:129,line_end:130|char_star:4,char_end:31"->"(sender, **kwargs),type='parameters'\nline_star:129,line_end:129|char_star:19,char_end:37";
"sender,type='identifier'\nline_star:129,line_end:129|char_star:20,char_end:26"[shape="point",fillcolor="#121013",style=filled];
"(sender, **kwargs),type='parameters'\nline_star:129,line_end:129|char_star:19,char_end:37"->"sender,type='identifier'\nline_star:129,line_end:129|char_star:20,char_end:26";
"**kwargs,type='dictionary_splat_pattern'\nline_star:129,line_end:129|char_star:28,char_end:36"[shape="box",fillcolor="white",style=filled];
"(sender, **kwargs),type='parameters'\nline_star:129,line_end:129|char_star:19,char_end:37"->"**kwargs,type='dictionary_splat_pattern'\nline_star:129,line_end:129|char_star:28,char_end:36";
"**,type='**'\nline_star:129,line_end:129|char_star:28,char_end:30"[shape="box",fillcolor="white",style=filled];
"**kwargs,type='dictionary_splat_pattern'\nline_star:129,line_end:129|char_star:28,char_end:36"->"**,type='**'\nline_star:129,line_end:129|char_star:28,char_end:30";
"kwargs,type='identifier'\nline_star:129,line_end:129|char_star:30,char_end:36"[shape="point",fillcolor="#121013",style=filled];
"**kwargs,type='dictionary_splat_pattern'\nline_star:129,line_end:129|char_star:28,char_end:36"->"kwargs,type='identifier'\nline_star:129,line_end:129|char_star:30,char_end:36";
"type='INFORMATION BLOCK'\nline_star:130,line_end:130|char_star:8,char_end:31"[shape="point",fillcolor="#121013",style=filled];
"def record_push(sender, **kwargs):\n        recorded.append('push'),type='function_definition'\nline_star:129,line_end:130|char_star:4,char_end:31"->"type='INFORMATION BLOCK'\nline_star:130,line_end:130|char_star:8,char_end:31";
"def record_pop(sender, **kwargs):\n        recorded.append('pop'),type='function_definition'\nline_star:132,line_end:133|char_star:4,char_end:30"[shape="box",fillcolor="#cee6b4",style=filled];
"type='INFORMATION BLOCK'\nline_star:126,line_end:149|char_star:4,char_end:59"->"def record_pop(sender, **kwargs):\n        recorded.append('pop'),type='function_definition'\nline_star:132,line_end:133|char_star:4,char_end:30";
"record_pop,type='identifier'\nline_star:132,line_end:132|char_star:8,char_end:18"[shape="point",fillcolor="#121013",style=filled];
"def record_pop(sender, **kwargs):\n        recorded.append('pop'),type='function_definition'\nline_star:132,line_end:133|char_star:4,char_end:30"->"record_pop,type='identifier'\nline_star:132,line_end:132|char_star:8,char_end:18";
"(sender, **kwargs),type='parameters'\nline_star:132,line_end:132|char_star:18,char_end:36"[shape="box",fillcolor="white",style=filled];
"def record_pop(sender, **kwargs):\n        recorded.append('pop'),type='function_definition'\nline_star:132,line_end:133|char_star:4,char_end:30"->"(sender, **kwargs),type='parameters'\nline_star:132,line_end:132|char_star:18,char_end:36";
"sender,type='identifier'\nline_star:132,line_end:132|char_star:19,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"(sender, **kwargs),type='parameters'\nline_star:132,line_end:132|char_star:18,char_end:36"->"sender,type='identifier'\nline_star:132,line_end:132|char_star:19,char_end:25";
"**kwargs,type='dictionary_splat_pattern'\nline_star:132,line_end:132|char_star:27,char_end:35"[shape="box",fillcolor="white",style=filled];
"(sender, **kwargs),type='parameters'\nline_star:132,line_end:132|char_star:18,char_end:36"->"**kwargs,type='dictionary_splat_pattern'\nline_star:132,line_end:132|char_star:27,char_end:35";
"**,type='**'\nline_star:132,line_end:132|char_star:27,char_end:29"[shape="box",fillcolor="white",style=filled];
"**kwargs,type='dictionary_splat_pattern'\nline_star:132,line_end:132|char_star:27,char_end:35"->"**,type='**'\nline_star:132,line_end:132|char_star:27,char_end:29";
"kwargs,type='identifier'\nline_star:132,line_end:132|char_star:29,char_end:35"[shape="point",fillcolor="#121013",style=filled];
"**kwargs,type='dictionary_splat_pattern'\nline_star:132,line_end:132|char_star:27,char_end:35"->"kwargs,type='identifier'\nline_star:132,line_end:132|char_star:29,char_end:35";
"type='INFORMATION BLOCK'\nline_star:133,line_end:133|char_star:8,char_end:30"[shape="point",fillcolor="#121013",style=filled];
"def record_pop(sender, **kwargs):\n        recorded.append('pop'),type='function_definition'\nline_star:132,line_end:133|char_star:4,char_end:30"->"type='INFORMATION BLOCK'\nline_star:133,line_end:133|char_star:8,char_end:30";
"@app.route('/')\n    def index():\n        return 'Hello',type='decorated_definition'\nline_star:135,line_end:137|char_star:4,char_end:22"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:126,line_end:149|char_star:4,char_end:59"->"@app.route('/')\n    def index():\n        return 'Hello',type='decorated_definition'\nline_star:135,line_end:137|char_star:4,char_end:22";
"@app.route('/'),type='decorator'\nline_star:135,line_end:135|char_star:4,char_end:19"[shape="box",fillcolor="white",style=filled];
"@app.route('/')\n    def index():\n        return 'Hello',type='decorated_definition'\nline_star:135,line_end:137|char_star:4,char_end:22"->"@app.route('/'),type='decorator'\nline_star:135,line_end:135|char_star:4,char_end:19";
"def index():\n        return 'Hello',type='function_definition'\nline_star:136,line_end:137|char_star:4,char_end:22"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.route('/')\n    def index():\n        return 'Hello',type='decorated_definition'\nline_star:135,line_end:137|char_star:4,char_end:22"->"def index():\n        return 'Hello',type='function_definition'\nline_star:136,line_end:137|char_star:4,char_end:22";
"index,type='identifier'\nline_star:136,line_end:136|char_star:8,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"def index():\n        return 'Hello',type='function_definition'\nline_star:136,line_end:137|char_star:4,char_end:22"->"index,type='identifier'\nline_star:136,line_end:136|char_star:8,char_end:13";
"type='INFORMATION BLOCK'\nline_star:137,line_end:137|char_star:8,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"def index():\n        return 'Hello',type='function_definition'\nline_star:136,line_end:137|char_star:4,char_end:22"->"type='INFORMATION BLOCK'\nline_star:137,line_end:137|char_star:8,char_end:22";
"return 'Hello',type='return_statement'\nline_star:137,line_end:137|char_star:8,char_end:22"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:137,line_end:137|char_star:8,char_end:22"->"return 'Hello',type='return_statement'\nline_star:137,line_end:137|char_star:8,char_end:22";
"try:\n        with app.test_client() as c:\n            rv = c.get('/')\n            assert rv.data == b'Hello'\n            assert recorded == ['push']\n        assert recorded == ['push', 'pop']\n    finally:\n        flask.appcontext_pushed.disconnect(record_push, app)\n        flask.appcontext_popped.disconnect(record_pop, app),type='try_statement'\nline_star:141,line_end:149|char_star:4,char_end:59"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:126,line_end:149|char_star:4,char_end:59"->"try:\n        with app.test_client() as c:\n            rv = c.get('/')\n            assert rv.data == b'Hello'\n            assert recorded == ['push']\n        assert recorded == ['push', 'pop']\n    finally:\n        flask.appcontext_pushed.disconnect(record_push, app)\n        flask.appcontext_popped.disconnect(record_pop, app),type='try_statement'\nline_star:141,line_end:149|char_star:4,char_end:59";
"try,type='try'\nline_star:141,line_end:141|char_star:4,char_end:7"[shape="box",fillcolor="white",style=filled];
"try:\n        with app.test_client() as c:\n            rv = c.get('/')\n            assert rv.data == b'Hello'\n            assert recorded == ['push']\n        assert recorded == ['push', 'pop']\n    finally:\n        flask.appcontext_pushed.disconnect(record_push, app)\n        flask.appcontext_popped.disconnect(record_pop, app),type='try_statement'\nline_star:141,line_end:149|char_star:4,char_end:59"->"try,type='try'\nline_star:141,line_end:141|char_star:4,char_end:7";
"type='INFORMATION BLOCK'\nline_star:142,line_end:146|char_star:8,char_end:42"[shape="point",fillcolor="#121013",style=filled];
"try:\n        with app.test_client() as c:\n            rv = c.get('/')\n            assert rv.data == b'Hello'\n            assert recorded == ['push']\n        assert recorded == ['push', 'pop']\n    finally:\n        flask.appcontext_pushed.disconnect(record_push, app)\n        flask.appcontext_popped.disconnect(record_pop, app),type='try_statement'\nline_star:141,line_end:149|char_star:4,char_end:59"->"type='INFORMATION BLOCK'\nline_star:142,line_end:146|char_star:8,char_end:42";
"with app.test_client() as c:\n            rv = c.get('/')\n            assert rv.data == b'Hello'\n            assert recorded == ['push'],type='with_statement'\nline_star:142,line_end:145|char_star:8,char_end:39"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:142,line_end:146|char_star:8,char_end:42"->"with app.test_client() as c:\n            rv = c.get('/')\n            assert rv.data == b'Hello'\n            assert recorded == ['push'],type='with_statement'\nline_star:142,line_end:145|char_star:8,char_end:39";
"app.test_client() as c,type='with_clause'\nline_star:142,line_end:142|char_star:13,char_end:35"[shape="box",fillcolor="white",style=filled];
"with app.test_client() as c:\n            rv = c.get('/')\n            assert rv.data == b'Hello'\n            assert recorded == ['push'],type='with_statement'\nline_star:142,line_end:145|char_star:8,char_end:39"->"app.test_client() as c,type='with_clause'\nline_star:142,line_end:142|char_star:13,char_end:35";
"type='INFORMATION BLOCK'\nline_star:143,line_end:145|char_star:12,char_end:39"[shape="point",fillcolor="#121013",style=filled];
"with app.test_client() as c:\n            rv = c.get('/')\n            assert rv.data == b'Hello'\n            assert recorded == ['push'],type='with_statement'\nline_star:142,line_end:145|char_star:8,char_end:39"->"type='INFORMATION BLOCK'\nline_star:143,line_end:145|char_star:12,char_end:39";
"assert rv.data == b'Hello',type='assert_statement'\nline_star:144,line_end:144|char_star:12,char_end:38"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:143,line_end:145|char_star:12,char_end:39"->"assert rv.data == b'Hello',type='assert_statement'\nline_star:144,line_end:144|char_star:12,char_end:38";
"rv.data == b'Hello',type='comparison_operator'\nline_star:144,line_end:144|char_star:19,char_end:38"[shape="box",fillcolor="white",style=filled];
"assert rv.data == b'Hello',type='assert_statement'\nline_star:144,line_end:144|char_star:12,char_end:38"->"rv.data == b'Hello',type='comparison_operator'\nline_star:144,line_end:144|char_star:19,char_end:38";
"rv.data,type='attribute'\nline_star:144,line_end:144|char_star:19,char_end:26"[shape="box",fillcolor="white",style=filled];
"rv.data == b'Hello',type='comparison_operator'\nline_star:144,line_end:144|char_star:19,char_end:38"->"rv.data,type='attribute'\nline_star:144,line_end:144|char_star:19,char_end:26";
"rv,type='identifier'\nline_star:144,line_end:144|char_star:19,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"rv.data,type='attribute'\nline_star:144,line_end:144|char_star:19,char_end:26"->"rv,type='identifier'\nline_star:144,line_end:144|char_star:19,char_end:21";
"data,type='identifier'\nline_star:144,line_end:144|char_star:22,char_end:26"[shape="point",fillcolor="#121013",style=filled];
"rv.data,type='attribute'\nline_star:144,line_end:144|char_star:19,char_end:26"->"data,type='identifier'\nline_star:144,line_end:144|char_star:22,char_end:26";
"assert recorded == ['push'],type='assert_statement'\nline_star:145,line_end:145|char_star:12,char_end:39"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:143,line_end:145|char_star:12,char_end:39"->"assert recorded == ['push'],type='assert_statement'\nline_star:145,line_end:145|char_star:12,char_end:39";
"recorded == ['push'],type='comparison_operator'\nline_star:145,line_end:145|char_star:19,char_end:39"[shape="box",fillcolor="white",style=filled];
"assert recorded == ['push'],type='assert_statement'\nline_star:145,line_end:145|char_star:12,char_end:39"->"recorded == ['push'],type='comparison_operator'\nline_star:145,line_end:145|char_star:19,char_end:39";
"recorded,type='identifier'\nline_star:145,line_end:145|char_star:19,char_end:27"[shape="point",fillcolor="#121013",style=filled];
"recorded == ['push'],type='comparison_operator'\nline_star:145,line_end:145|char_star:19,char_end:39"->"recorded,type='identifier'\nline_star:145,line_end:145|char_star:19,char_end:27";
"['push'],type='list'\nline_star:145,line_end:145|char_star:31,char_end:39"[shape="box",fillcolor="white",style=filled];
"recorded == ['push'],type='comparison_operator'\nline_star:145,line_end:145|char_star:19,char_end:39"->"['push'],type='list'\nline_star:145,line_end:145|char_star:31,char_end:39";
"assert recorded == ['push', 'pop'],type='assert_statement'\nline_star:146,line_end:146|char_star:8,char_end:42"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:142,line_end:146|char_star:8,char_end:42"->"assert recorded == ['push', 'pop'],type='assert_statement'\nline_star:146,line_end:146|char_star:8,char_end:42";
"recorded == ['push', 'pop'],type='comparison_operator'\nline_star:146,line_end:146|char_star:15,char_end:42"[shape="box",fillcolor="white",style=filled];
"assert recorded == ['push', 'pop'],type='assert_statement'\nline_star:146,line_end:146|char_star:8,char_end:42"->"recorded == ['push', 'pop'],type='comparison_operator'\nline_star:146,line_end:146|char_star:15,char_end:42";
"recorded,type='identifier'\nline_star:146,line_end:146|char_star:15,char_end:23"[shape="point",fillcolor="#121013",style=filled];
"recorded == ['push', 'pop'],type='comparison_operator'\nline_star:146,line_end:146|char_star:15,char_end:42"->"recorded,type='identifier'\nline_star:146,line_end:146|char_star:15,char_end:23";
"['push', 'pop'],type='list'\nline_star:146,line_end:146|char_star:27,char_end:42"[shape="box",fillcolor="white",style=filled];
"recorded == ['push', 'pop'],type='comparison_operator'\nline_star:146,line_end:146|char_star:15,char_end:42"->"['push', 'pop'],type='list'\nline_star:146,line_end:146|char_star:27,char_end:42";
"finally:\n        flask.appcontext_pushed.disconnect(record_push, app)\n        flask.appcontext_popped.disconnect(record_pop, app),type='finally_clause'\nline_star:147,line_end:149|char_star:4,char_end:59"[shape="box",fillcolor="white",style=filled];
"try:\n        with app.test_client() as c:\n            rv = c.get('/')\n            assert rv.data == b'Hello'\n            assert recorded == ['push']\n        assert recorded == ['push', 'pop']\n    finally:\n        flask.appcontext_pushed.disconnect(record_push, app)\n        flask.appcontext_popped.disconnect(record_pop, app),type='try_statement'\nline_star:141,line_end:149|char_star:4,char_end:59"->"finally:\n        flask.appcontext_pushed.disconnect(record_push, app)\n        flask.appcontext_popped.disconnect(record_pop, app),type='finally_clause'\nline_star:147,line_end:149|char_star:4,char_end:59";
"finally,type='finally'\nline_star:147,line_end:147|char_star:4,char_end:11"[shape="box",fillcolor="white",style=filled];
"finally:\n        flask.appcontext_pushed.disconnect(record_push, app)\n        flask.appcontext_popped.disconnect(record_pop, app),type='finally_clause'\nline_star:147,line_end:149|char_star:4,char_end:59"->"finally,type='finally'\nline_star:147,line_end:147|char_star:4,char_end:11";
"type='INFORMATION BLOCK'\nline_star:148,line_end:149|char_star:8,char_end:59"[shape="point",fillcolor="#121013",style=filled];
"finally:\n        flask.appcontext_pushed.disconnect(record_push, app)\n        flask.appcontext_popped.disconnect(record_pop, app),type='finally_clause'\nline_star:147,line_end:149|char_star:4,char_end:59"->"type='INFORMATION BLOCK'\nline_star:148,line_end:149|char_star:8,char_end:59";
"def test_flash_signal(app):\n    @app.route('/')\n    def index():\n        flask.flash('This is a flash message', category='notice')\n        return flask.redirect('/other')\n\n    recorded = []\n\n    def record(sender, message, category):\n        recorded.append((message, category))\n\n    flask.message_flashed.connect(record, app)\n    try:\n        client = app.test_client()\n        with client.session_transaction():\n            client.get('/')\n            assert len(recorded) == 1\n            message, category = recorded[0]\n            assert message == 'This is a flash message'\n            assert category == 'notice'\n    finally:\n        flask.message_flashed.disconnect(record, app),type='function_definition'\nline_star:152,line_end:173|char_star:0,char_end:53"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_flash_signal(app):\n    @app.route('/')\n    def index():\n        flask.flash('This is a flash message', category='notice')\n        return flask.redirect('/other')\n\n    recorded = []\n\n    def record(sender, message, category):\n        recorded.append((message, category))\n\n    flask.message_flashed.connect(record, app)\n    try:\n        client = app.test_client()\n        with client.session_transaction():\n            client.get('/')\n            assert len(recorded) == 1\n            message, category = recorded[0]\n            assert message == 'This is a flash message'\n            assert category == 'notice'\n    finally:\n        flask.message_flashed.disconnect(record, app),type='function_definition'\nline_star:152,line_end:173|char_star:0,char_end:53";
"test_flash_signal,type='identifier'\nline_star:152,line_end:152|char_star:4,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"def test_flash_signal(app):\n    @app.route('/')\n    def index():\n        flask.flash('This is a flash message', category='notice')\n        return flask.redirect('/other')\n\n    recorded = []\n\n    def record(sender, message, category):\n        recorded.append((message, category))\n\n    flask.message_flashed.connect(record, app)\n    try:\n        client = app.test_client()\n        with client.session_transaction():\n            client.get('/')\n            assert len(recorded) == 1\n            message, category = recorded[0]\n            assert message == 'This is a flash message'\n            assert category == 'notice'\n    finally:\n        flask.message_flashed.disconnect(record, app),type='function_definition'\nline_star:152,line_end:173|char_star:0,char_end:53"->"test_flash_signal,type='identifier'\nline_star:152,line_end:152|char_star:4,char_end:21";
"(app),type='parameters'\nline_star:152,line_end:152|char_star:21,char_end:26"[shape="box",fillcolor="white",style=filled];
"def test_flash_signal(app):\n    @app.route('/')\n    def index():\n        flask.flash('This is a flash message', category='notice')\n        return flask.redirect('/other')\n\n    recorded = []\n\n    def record(sender, message, category):\n        recorded.append((message, category))\n\n    flask.message_flashed.connect(record, app)\n    try:\n        client = app.test_client()\n        with client.session_transaction():\n            client.get('/')\n            assert len(recorded) == 1\n            message, category = recorded[0]\n            assert message == 'This is a flash message'\n            assert category == 'notice'\n    finally:\n        flask.message_flashed.disconnect(record, app),type='function_definition'\nline_star:152,line_end:173|char_star:0,char_end:53"->"(app),type='parameters'\nline_star:152,line_end:152|char_star:21,char_end:26";
"app,type='identifier'\nline_star:152,line_end:152|char_star:22,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"(app),type='parameters'\nline_star:152,line_end:152|char_star:21,char_end:26"->"app,type='identifier'\nline_star:152,line_end:152|char_star:22,char_end:25";
"type='INFORMATION BLOCK'\nline_star:153,line_end:173|char_star:4,char_end:53"[shape="point",fillcolor="#121013",style=filled];
"def test_flash_signal(app):\n    @app.route('/')\n    def index():\n        flask.flash('This is a flash message', category='notice')\n        return flask.redirect('/other')\n\n    recorded = []\n\n    def record(sender, message, category):\n        recorded.append((message, category))\n\n    flask.message_flashed.connect(record, app)\n    try:\n        client = app.test_client()\n        with client.session_transaction():\n            client.get('/')\n            assert len(recorded) == 1\n            message, category = recorded[0]\n            assert message == 'This is a flash message'\n            assert category == 'notice'\n    finally:\n        flask.message_flashed.disconnect(record, app),type='function_definition'\nline_star:152,line_end:173|char_star:0,char_end:53"->"type='INFORMATION BLOCK'\nline_star:153,line_end:173|char_star:4,char_end:53";
"@app.route('/')\n    def index():\n        flask.flash('This is a flash message', category='notice')\n        return flask.redirect('/other'),type='decorated_definition'\nline_star:153,line_end:156|char_star:4,char_end:39"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:153,line_end:173|char_star:4,char_end:53"->"@app.route('/')\n    def index():\n        flask.flash('This is a flash message', category='notice')\n        return flask.redirect('/other'),type='decorated_definition'\nline_star:153,line_end:156|char_star:4,char_end:39";
"@app.route('/'),type='decorator'\nline_star:153,line_end:153|char_star:4,char_end:19"[shape="box",fillcolor="white",style=filled];
"@app.route('/')\n    def index():\n        flask.flash('This is a flash message', category='notice')\n        return flask.redirect('/other'),type='decorated_definition'\nline_star:153,line_end:156|char_star:4,char_end:39"->"@app.route('/'),type='decorator'\nline_star:153,line_end:153|char_star:4,char_end:19";
"def index():\n        flask.flash('This is a flash message', category='notice')\n        return flask.redirect('/other'),type='function_definition'\nline_star:154,line_end:156|char_star:4,char_end:39"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.route('/')\n    def index():\n        flask.flash('This is a flash message', category='notice')\n        return flask.redirect('/other'),type='decorated_definition'\nline_star:153,line_end:156|char_star:4,char_end:39"->"def index():\n        flask.flash('This is a flash message', category='notice')\n        return flask.redirect('/other'),type='function_definition'\nline_star:154,line_end:156|char_star:4,char_end:39";
"index,type='identifier'\nline_star:154,line_end:154|char_star:8,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"def index():\n        flask.flash('This is a flash message', category='notice')\n        return flask.redirect('/other'),type='function_definition'\nline_star:154,line_end:156|char_star:4,char_end:39"->"index,type='identifier'\nline_star:154,line_end:154|char_star:8,char_end:13";
"type='INFORMATION BLOCK'\nline_star:155,line_end:156|char_star:8,char_end:39"[shape="point",fillcolor="#121013",style=filled];
"def index():\n        flask.flash('This is a flash message', category='notice')\n        return flask.redirect('/other'),type='function_definition'\nline_star:154,line_end:156|char_star:4,char_end:39"->"type='INFORMATION BLOCK'\nline_star:155,line_end:156|char_star:8,char_end:39";
"return flask.redirect('/other'),type='return_statement'\nline_star:156,line_end:156|char_star:8,char_end:39"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:155,line_end:156|char_star:8,char_end:39"->"return flask.redirect('/other'),type='return_statement'\nline_star:156,line_end:156|char_star:8,char_end:39";
"def record(sender, message, category):\n        recorded.append((message, category)),type='function_definition'\nline_star:160,line_end:161|char_star:4,char_end:44"[shape="box",fillcolor="#cee6b4",style=filled];
"type='INFORMATION BLOCK'\nline_star:153,line_end:173|char_star:4,char_end:53"->"def record(sender, message, category):\n        recorded.append((message, category)),type='function_definition'\nline_star:160,line_end:161|char_star:4,char_end:44";
"record,type='identifier'\nline_star:160,line_end:160|char_star:8,char_end:14"[shape="point",fillcolor="#121013",style=filled];
"def record(sender, message, category):\n        recorded.append((message, category)),type='function_definition'\nline_star:160,line_end:161|char_star:4,char_end:44"->"record,type='identifier'\nline_star:160,line_end:160|char_star:8,char_end:14";
"(sender, message, category),type='parameters'\nline_star:160,line_end:160|char_star:14,char_end:41"[shape="box",fillcolor="white",style=filled];
"def record(sender, message, category):\n        recorded.append((message, category)),type='function_definition'\nline_star:160,line_end:161|char_star:4,char_end:44"->"(sender, message, category),type='parameters'\nline_star:160,line_end:160|char_star:14,char_end:41";
"sender,type='identifier'\nline_star:160,line_end:160|char_star:15,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"(sender, message, category),type='parameters'\nline_star:160,line_end:160|char_star:14,char_end:41"->"sender,type='identifier'\nline_star:160,line_end:160|char_star:15,char_end:21";
"message,type='identifier'\nline_star:160,line_end:160|char_star:23,char_end:30"[shape="point",fillcolor="#121013",style=filled];
"(sender, message, category),type='parameters'\nline_star:160,line_end:160|char_star:14,char_end:41"->"message,type='identifier'\nline_star:160,line_end:160|char_star:23,char_end:30";
"category,type='identifier'\nline_star:160,line_end:160|char_star:32,char_end:40"[shape="point",fillcolor="#121013",style=filled];
"(sender, message, category),type='parameters'\nline_star:160,line_end:160|char_star:14,char_end:41"->"category,type='identifier'\nline_star:160,line_end:160|char_star:32,char_end:40";
"type='INFORMATION BLOCK'\nline_star:161,line_end:161|char_star:8,char_end:44"[shape="point",fillcolor="#121013",style=filled];
"def record(sender, message, category):\n        recorded.append((message, category)),type='function_definition'\nline_star:160,line_end:161|char_star:4,char_end:44"->"type='INFORMATION BLOCK'\nline_star:161,line_end:161|char_star:8,char_end:44";
"try:\n        client = app.test_client()\n        with client.session_transaction():\n            client.get('/')\n            assert len(recorded) == 1\n            message, category = recorded[0]\n            assert message == 'This is a flash message'\n            assert category == 'notice'\n    finally:\n        flask.message_flashed.disconnect(record, app),type='try_statement'\nline_star:164,line_end:173|char_star:4,char_end:53"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:153,line_end:173|char_star:4,char_end:53"->"try:\n        client = app.test_client()\n        with client.session_transaction():\n            client.get('/')\n            assert len(recorded) == 1\n            message, category = recorded[0]\n            assert message == 'This is a flash message'\n            assert category == 'notice'\n    finally:\n        flask.message_flashed.disconnect(record, app),type='try_statement'\nline_star:164,line_end:173|char_star:4,char_end:53";
"try,type='try'\nline_star:164,line_end:164|char_star:4,char_end:7"[shape="box",fillcolor="white",style=filled];
"try:\n        client = app.test_client()\n        with client.session_transaction():\n            client.get('/')\n            assert len(recorded) == 1\n            message, category = recorded[0]\n            assert message == 'This is a flash message'\n            assert category == 'notice'\n    finally:\n        flask.message_flashed.disconnect(record, app),type='try_statement'\nline_star:164,line_end:173|char_star:4,char_end:53"->"try,type='try'\nline_star:164,line_end:164|char_star:4,char_end:7";
"type='INFORMATION BLOCK'\nline_star:165,line_end:171|char_star:8,char_end:39"[shape="point",fillcolor="#121013",style=filled];
"try:\n        client = app.test_client()\n        with client.session_transaction():\n            client.get('/')\n            assert len(recorded) == 1\n            message, category = recorded[0]\n            assert message == 'This is a flash message'\n            assert category == 'notice'\n    finally:\n        flask.message_flashed.disconnect(record, app),type='try_statement'\nline_star:164,line_end:173|char_star:4,char_end:53"->"type='INFORMATION BLOCK'\nline_star:165,line_end:171|char_star:8,char_end:39";
"with client.session_transaction():\n            client.get('/')\n            assert len(recorded) == 1\n            message, category = recorded[0]\n            assert message == 'This is a flash message'\n            assert category == 'notice',type='with_statement'\nline_star:166,line_end:171|char_star:8,char_end:39"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:165,line_end:171|char_star:8,char_end:39"->"with client.session_transaction():\n            client.get('/')\n            assert len(recorded) == 1\n            message, category = recorded[0]\n            assert message == 'This is a flash message'\n            assert category == 'notice',type='with_statement'\nline_star:166,line_end:171|char_star:8,char_end:39";
"client.session_transaction(),type='with_clause'\nline_star:166,line_end:166|char_star:13,char_end:41"[shape="box",fillcolor="white",style=filled];
"with client.session_transaction():\n            client.get('/')\n            assert len(recorded) == 1\n            message, category = recorded[0]\n            assert message == 'This is a flash message'\n            assert category == 'notice',type='with_statement'\nline_star:166,line_end:171|char_star:8,char_end:39"->"client.session_transaction(),type='with_clause'\nline_star:166,line_end:166|char_star:13,char_end:41";
"type='INFORMATION BLOCK'\nline_star:167,line_end:171|char_star:12,char_end:39"[shape="point",fillcolor="#121013",style=filled];
"with client.session_transaction():\n            client.get('/')\n            assert len(recorded) == 1\n            message, category = recorded[0]\n            assert message == 'This is a flash message'\n            assert category == 'notice',type='with_statement'\nline_star:166,line_end:171|char_star:8,char_end:39"->"type='INFORMATION BLOCK'\nline_star:167,line_end:171|char_star:12,char_end:39";
"assert len(recorded) == 1,type='assert_statement'\nline_star:168,line_end:168|char_star:12,char_end:37"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:167,line_end:171|char_star:12,char_end:39"->"assert len(recorded) == 1,type='assert_statement'\nline_star:168,line_end:168|char_star:12,char_end:37";
"len(recorded) == 1,type='comparison_operator'\nline_star:168,line_end:168|char_star:19,char_end:37"[shape="box",fillcolor="white",style=filled];
"assert len(recorded) == 1,type='assert_statement'\nline_star:168,line_end:168|char_star:12,char_end:37"->"len(recorded) == 1,type='comparison_operator'\nline_star:168,line_end:168|char_star:19,char_end:37";
"len(recorded),type='call'\nline_star:168,line_end:168|char_star:19,char_end:32"[shape="box",fillcolor="white",style=filled];
"len(recorded) == 1,type='comparison_operator'\nline_star:168,line_end:168|char_star:19,char_end:37"->"len(recorded),type='call'\nline_star:168,line_end:168|char_star:19,char_end:32";
"len,type='identifier'\nline_star:168,line_end:168|char_star:19,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"len(recorded),type='call'\nline_star:168,line_end:168|char_star:19,char_end:32"->"len,type='identifier'\nline_star:168,line_end:168|char_star:19,char_end:22";
"(recorded),type='argument_list'\nline_star:168,line_end:168|char_star:22,char_end:32"[shape="box",fillcolor="white",style=filled];
"len(recorded),type='call'\nline_star:168,line_end:168|char_star:19,char_end:32"->"(recorded),type='argument_list'\nline_star:168,line_end:168|char_star:22,char_end:32";
"recorded,type='identifier'\nline_star:168,line_end:168|char_star:23,char_end:31"[shape="point",fillcolor="#121013",style=filled];
"(recorded),type='argument_list'\nline_star:168,line_end:168|char_star:22,char_end:32"->"recorded,type='identifier'\nline_star:168,line_end:168|char_star:23,char_end:31";
"assert message == 'This is a flash message',type='assert_statement'\nline_star:170,line_end:170|char_star:12,char_end:55"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:167,line_end:171|char_star:12,char_end:39"->"assert message == 'This is a flash message',type='assert_statement'\nline_star:170,line_end:170|char_star:12,char_end:55";
"message == 'This is a flash message',type='comparison_operator'\nline_star:170,line_end:170|char_star:19,char_end:55"[shape="box",fillcolor="white",style=filled];
"assert message == 'This is a flash message',type='assert_statement'\nline_star:170,line_end:170|char_star:12,char_end:55"->"message == 'This is a flash message',type='comparison_operator'\nline_star:170,line_end:170|char_star:19,char_end:55";
"message,type='identifier'\nline_star:170,line_end:170|char_star:19,char_end:26"[shape="point",fillcolor="#121013",style=filled];
"message == 'This is a flash message',type='comparison_operator'\nline_star:170,line_end:170|char_star:19,char_end:55"->"message,type='identifier'\nline_star:170,line_end:170|char_star:19,char_end:26";
"assert category == 'notice',type='assert_statement'\nline_star:171,line_end:171|char_star:12,char_end:39"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:167,line_end:171|char_star:12,char_end:39"->"assert category == 'notice',type='assert_statement'\nline_star:171,line_end:171|char_star:12,char_end:39";
"category == 'notice',type='comparison_operator'\nline_star:171,line_end:171|char_star:19,char_end:39"[shape="box",fillcolor="white",style=filled];
"assert category == 'notice',type='assert_statement'\nline_star:171,line_end:171|char_star:12,char_end:39"->"category == 'notice',type='comparison_operator'\nline_star:171,line_end:171|char_star:19,char_end:39";
"category,type='identifier'\nline_star:171,line_end:171|char_star:19,char_end:27"[shape="point",fillcolor="#121013",style=filled];
"category == 'notice',type='comparison_operator'\nline_star:171,line_end:171|char_star:19,char_end:39"->"category,type='identifier'\nline_star:171,line_end:171|char_star:19,char_end:27";
"finally:\n        flask.message_flashed.disconnect(record, app),type='finally_clause'\nline_star:172,line_end:173|char_star:4,char_end:53"[shape="box",fillcolor="white",style=filled];
"try:\n        client = app.test_client()\n        with client.session_transaction():\n            client.get('/')\n            assert len(recorded) == 1\n            message, category = recorded[0]\n            assert message == 'This is a flash message'\n            assert category == 'notice'\n    finally:\n        flask.message_flashed.disconnect(record, app),type='try_statement'\nline_star:164,line_end:173|char_star:4,char_end:53"->"finally:\n        flask.message_flashed.disconnect(record, app),type='finally_clause'\nline_star:172,line_end:173|char_star:4,char_end:53";
"finally,type='finally'\nline_star:172,line_end:172|char_star:4,char_end:11"[shape="box",fillcolor="white",style=filled];
"finally:\n        flask.message_flashed.disconnect(record, app),type='finally_clause'\nline_star:172,line_end:173|char_star:4,char_end:53"->"finally,type='finally'\nline_star:172,line_end:172|char_star:4,char_end:11";
"type='INFORMATION BLOCK'\nline_star:173,line_end:173|char_star:8,char_end:53"[shape="point",fillcolor="#121013",style=filled];
"finally:\n        flask.message_flashed.disconnect(record, app),type='finally_clause'\nline_star:172,line_end:173|char_star:4,char_end:53"->"type='INFORMATION BLOCK'\nline_star:173,line_end:173|char_star:8,char_end:53";
"def test_appcontext_tearing_down_signal():\n    app = flask.Flask(__name__)\n    recorded = []\n\n    def record_teardown(sender, **kwargs):\n        recorded.append(('tear_down', kwargs))\n\n    @app.route('/')\n    def index():\n        1 // 0\n\n    flask.appcontext_tearing_down.connect(record_teardown, app)\n    try:\n        with app.test_client() as c:\n            rv = c.get('/')\n            assert rv.status_code == 500\n            assert recorded == []\n        assert recorded == [('tear_down', {'exc': None})]\n    finally:\n        flask.appcontext_tearing_down.disconnect(record_teardown, app),type='function_definition'\nline_star:176,line_end:195|char_star:0,char_end:70"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_appcontext_tearing_down_signal():\n    app = flask.Flask(__name__)\n    recorded = []\n\n    def record_teardown(sender, **kwargs):\n        recorded.append(('tear_down', kwargs))\n\n    @app.route('/')\n    def index():\n        1 // 0\n\n    flask.appcontext_tearing_down.connect(record_teardown, app)\n    try:\n        with app.test_client() as c:\n            rv = c.get('/')\n            assert rv.status_code == 500\n            assert recorded == []\n        assert recorded == [('tear_down', {'exc': None})]\n    finally:\n        flask.appcontext_tearing_down.disconnect(record_teardown, app),type='function_definition'\nline_star:176,line_end:195|char_star:0,char_end:70";
"test_appcontext_tearing_down_signal,type='identifier'\nline_star:176,line_end:176|char_star:4,char_end:39"[shape="point",fillcolor="#121013",style=filled];
"def test_appcontext_tearing_down_signal():\n    app = flask.Flask(__name__)\n    recorded = []\n\n    def record_teardown(sender, **kwargs):\n        recorded.append(('tear_down', kwargs))\n\n    @app.route('/')\n    def index():\n        1 // 0\n\n    flask.appcontext_tearing_down.connect(record_teardown, app)\n    try:\n        with app.test_client() as c:\n            rv = c.get('/')\n            assert rv.status_code == 500\n            assert recorded == []\n        assert recorded == [('tear_down', {'exc': None})]\n    finally:\n        flask.appcontext_tearing_down.disconnect(record_teardown, app),type='function_definition'\nline_star:176,line_end:195|char_star:0,char_end:70"->"test_appcontext_tearing_down_signal,type='identifier'\nline_star:176,line_end:176|char_star:4,char_end:39";
"type='INFORMATION BLOCK'\nline_star:177,line_end:195|char_star:4,char_end:70"[shape="point",fillcolor="#121013",style=filled];
"def test_appcontext_tearing_down_signal():\n    app = flask.Flask(__name__)\n    recorded = []\n\n    def record_teardown(sender, **kwargs):\n        recorded.append(('tear_down', kwargs))\n\n    @app.route('/')\n    def index():\n        1 // 0\n\n    flask.appcontext_tearing_down.connect(record_teardown, app)\n    try:\n        with app.test_client() as c:\n            rv = c.get('/')\n            assert rv.status_code == 500\n            assert recorded == []\n        assert recorded == [('tear_down', {'exc': None})]\n    finally:\n        flask.appcontext_tearing_down.disconnect(record_teardown, app),type='function_definition'\nline_star:176,line_end:195|char_star:0,char_end:70"->"type='INFORMATION BLOCK'\nline_star:177,line_end:195|char_star:4,char_end:70";
"def record_teardown(sender, **kwargs):\n        recorded.append(('tear_down', kwargs)),type='function_definition'\nline_star:180,line_end:181|char_star:4,char_end:46"[shape="box",fillcolor="#cee6b4",style=filled];
"type='INFORMATION BLOCK'\nline_star:177,line_end:195|char_star:4,char_end:70"->"def record_teardown(sender, **kwargs):\n        recorded.append(('tear_down', kwargs)),type='function_definition'\nline_star:180,line_end:181|char_star:4,char_end:46";
"record_teardown,type='identifier'\nline_star:180,line_end:180|char_star:8,char_end:23"[shape="point",fillcolor="#121013",style=filled];
"def record_teardown(sender, **kwargs):\n        recorded.append(('tear_down', kwargs)),type='function_definition'\nline_star:180,line_end:181|char_star:4,char_end:46"->"record_teardown,type='identifier'\nline_star:180,line_end:180|char_star:8,char_end:23";
"(sender, **kwargs),type='parameters'\nline_star:180,line_end:180|char_star:23,char_end:41"[shape="box",fillcolor="white",style=filled];
"def record_teardown(sender, **kwargs):\n        recorded.append(('tear_down', kwargs)),type='function_definition'\nline_star:180,line_end:181|char_star:4,char_end:46"->"(sender, **kwargs),type='parameters'\nline_star:180,line_end:180|char_star:23,char_end:41";
"sender,type='identifier'\nline_star:180,line_end:180|char_star:24,char_end:30"[shape="point",fillcolor="#121013",style=filled];
"(sender, **kwargs),type='parameters'\nline_star:180,line_end:180|char_star:23,char_end:41"->"sender,type='identifier'\nline_star:180,line_end:180|char_star:24,char_end:30";
"**kwargs,type='dictionary_splat_pattern'\nline_star:180,line_end:180|char_star:32,char_end:40"[shape="box",fillcolor="white",style=filled];
"(sender, **kwargs),type='parameters'\nline_star:180,line_end:180|char_star:23,char_end:41"->"**kwargs,type='dictionary_splat_pattern'\nline_star:180,line_end:180|char_star:32,char_end:40";
"**,type='**'\nline_star:180,line_end:180|char_star:32,char_end:34"[shape="box",fillcolor="white",style=filled];
"**kwargs,type='dictionary_splat_pattern'\nline_star:180,line_end:180|char_star:32,char_end:40"->"**,type='**'\nline_star:180,line_end:180|char_star:32,char_end:34";
"kwargs,type='identifier'\nline_star:180,line_end:180|char_star:34,char_end:40"[shape="point",fillcolor="#121013",style=filled];
"**kwargs,type='dictionary_splat_pattern'\nline_star:180,line_end:180|char_star:32,char_end:40"->"kwargs,type='identifier'\nline_star:180,line_end:180|char_star:34,char_end:40";
"type='INFORMATION BLOCK'\nline_star:181,line_end:181|char_star:8,char_end:46"[shape="point",fillcolor="#121013",style=filled];
"def record_teardown(sender, **kwargs):\n        recorded.append(('tear_down', kwargs)),type='function_definition'\nline_star:180,line_end:181|char_star:4,char_end:46"->"type='INFORMATION BLOCK'\nline_star:181,line_end:181|char_star:8,char_end:46";
"@app.route('/')\n    def index():\n        1 // 0,type='decorated_definition'\nline_star:183,line_end:185|char_star:4,char_end:14"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:177,line_end:195|char_star:4,char_end:70"->"@app.route('/')\n    def index():\n        1 // 0,type='decorated_definition'\nline_star:183,line_end:185|char_star:4,char_end:14";
"@app.route('/'),type='decorator'\nline_star:183,line_end:183|char_star:4,char_end:19"[shape="box",fillcolor="white",style=filled];
"@app.route('/')\n    def index():\n        1 // 0,type='decorated_definition'\nline_star:183,line_end:185|char_star:4,char_end:14"->"@app.route('/'),type='decorator'\nline_star:183,line_end:183|char_star:4,char_end:19";
"def index():\n        1 // 0,type='function_definition'\nline_star:184,line_end:185|char_star:4,char_end:14"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.route('/')\n    def index():\n        1 // 0,type='decorated_definition'\nline_star:183,line_end:185|char_star:4,char_end:14"->"def index():\n        1 // 0,type='function_definition'\nline_star:184,line_end:185|char_star:4,char_end:14";
"index,type='identifier'\nline_star:184,line_end:184|char_star:8,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"def index():\n        1 // 0,type='function_definition'\nline_star:184,line_end:185|char_star:4,char_end:14"->"index,type='identifier'\nline_star:184,line_end:184|char_star:8,char_end:13";
"type='INFORMATION BLOCK'\nline_star:185,line_end:185|char_star:8,char_end:14"[shape="point",fillcolor="#121013",style=filled];
"def index():\n        1 // 0,type='function_definition'\nline_star:184,line_end:185|char_star:4,char_end:14"->"type='INFORMATION BLOCK'\nline_star:185,line_end:185|char_star:8,char_end:14";
"try:\n        with app.test_client() as c:\n            rv = c.get('/')\n            assert rv.status_code == 500\n            assert recorded == []\n        assert recorded == [('tear_down', {'exc': None})]\n    finally:\n        flask.appcontext_tearing_down.disconnect(record_teardown, app),type='try_statement'\nline_star:188,line_end:195|char_star:4,char_end:70"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:177,line_end:195|char_star:4,char_end:70"->"try:\n        with app.test_client() as c:\n            rv = c.get('/')\n            assert rv.status_code == 500\n            assert recorded == []\n        assert recorded == [('tear_down', {'exc': None})]\n    finally:\n        flask.appcontext_tearing_down.disconnect(record_teardown, app),type='try_statement'\nline_star:188,line_end:195|char_star:4,char_end:70";
"try,type='try'\nline_star:188,line_end:188|char_star:4,char_end:7"[shape="box",fillcolor="white",style=filled];
"try:\n        with app.test_client() as c:\n            rv = c.get('/')\n            assert rv.status_code == 500\n            assert recorded == []\n        assert recorded == [('tear_down', {'exc': None})]\n    finally:\n        flask.appcontext_tearing_down.disconnect(record_teardown, app),type='try_statement'\nline_star:188,line_end:195|char_star:4,char_end:70"->"try,type='try'\nline_star:188,line_end:188|char_star:4,char_end:7";
"type='INFORMATION BLOCK'\nline_star:189,line_end:193|char_star:8,char_end:57"[shape="point",fillcolor="#121013",style=filled];
"try:\n        with app.test_client() as c:\n            rv = c.get('/')\n            assert rv.status_code == 500\n            assert recorded == []\n        assert recorded == [('tear_down', {'exc': None})]\n    finally:\n        flask.appcontext_tearing_down.disconnect(record_teardown, app),type='try_statement'\nline_star:188,line_end:195|char_star:4,char_end:70"->"type='INFORMATION BLOCK'\nline_star:189,line_end:193|char_star:8,char_end:57";
"with app.test_client() as c:\n            rv = c.get('/')\n            assert rv.status_code == 500\n            assert recorded == [],type='with_statement'\nline_star:189,line_end:192|char_star:8,char_end:33"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:189,line_end:193|char_star:8,char_end:57"->"with app.test_client() as c:\n            rv = c.get('/')\n            assert rv.status_code == 500\n            assert recorded == [],type='with_statement'\nline_star:189,line_end:192|char_star:8,char_end:33";
"app.test_client() as c,type='with_clause'\nline_star:189,line_end:189|char_star:13,char_end:35"[shape="box",fillcolor="white",style=filled];
"with app.test_client() as c:\n            rv = c.get('/')\n            assert rv.status_code == 500\n            assert recorded == [],type='with_statement'\nline_star:189,line_end:192|char_star:8,char_end:33"->"app.test_client() as c,type='with_clause'\nline_star:189,line_end:189|char_star:13,char_end:35";
"type='INFORMATION BLOCK'\nline_star:190,line_end:192|char_star:12,char_end:33"[shape="point",fillcolor="#121013",style=filled];
"with app.test_client() as c:\n            rv = c.get('/')\n            assert rv.status_code == 500\n            assert recorded == [],type='with_statement'\nline_star:189,line_end:192|char_star:8,char_end:33"->"type='INFORMATION BLOCK'\nline_star:190,line_end:192|char_star:12,char_end:33";
"assert rv.status_code == 500,type='assert_statement'\nline_star:191,line_end:191|char_star:12,char_end:40"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:190,line_end:192|char_star:12,char_end:33"->"assert rv.status_code == 500,type='assert_statement'\nline_star:191,line_end:191|char_star:12,char_end:40";
"rv.status_code == 500,type='comparison_operator'\nline_star:191,line_end:191|char_star:19,char_end:40"[shape="box",fillcolor="white",style=filled];
"assert rv.status_code == 500,type='assert_statement'\nline_star:191,line_end:191|char_star:12,char_end:40"->"rv.status_code == 500,type='comparison_operator'\nline_star:191,line_end:191|char_star:19,char_end:40";
"rv.status_code,type='attribute'\nline_star:191,line_end:191|char_star:19,char_end:33"[shape="box",fillcolor="white",style=filled];
"rv.status_code == 500,type='comparison_operator'\nline_star:191,line_end:191|char_star:19,char_end:40"->"rv.status_code,type='attribute'\nline_star:191,line_end:191|char_star:19,char_end:33";
"rv,type='identifier'\nline_star:191,line_end:191|char_star:19,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"rv.status_code,type='attribute'\nline_star:191,line_end:191|char_star:19,char_end:33"->"rv,type='identifier'\nline_star:191,line_end:191|char_star:19,char_end:21";
"status_code,type='identifier'\nline_star:191,line_end:191|char_star:22,char_end:33"[shape="point",fillcolor="#121013",style=filled];
"rv.status_code,type='attribute'\nline_star:191,line_end:191|char_star:19,char_end:33"->"status_code,type='identifier'\nline_star:191,line_end:191|char_star:22,char_end:33";
"assert recorded == [],type='assert_statement'\nline_star:192,line_end:192|char_star:12,char_end:33"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:190,line_end:192|char_star:12,char_end:33"->"assert recorded == [],type='assert_statement'\nline_star:192,line_end:192|char_star:12,char_end:33";
"recorded == [],type='comparison_operator'\nline_star:192,line_end:192|char_star:19,char_end:33"[shape="box",fillcolor="white",style=filled];
"assert recorded == [],type='assert_statement'\nline_star:192,line_end:192|char_star:12,char_end:33"->"recorded == [],type='comparison_operator'\nline_star:192,line_end:192|char_star:19,char_end:33";
"recorded,type='identifier'\nline_star:192,line_end:192|char_star:19,char_end:27"[shape="point",fillcolor="#121013",style=filled];
"recorded == [],type='comparison_operator'\nline_star:192,line_end:192|char_star:19,char_end:33"->"recorded,type='identifier'\nline_star:192,line_end:192|char_star:19,char_end:27";
"assert recorded == [('tear_down', {'exc': None})],type='assert_statement'\nline_star:193,line_end:193|char_star:8,char_end:57"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:189,line_end:193|char_star:8,char_end:57"->"assert recorded == [('tear_down', {'exc': None})],type='assert_statement'\nline_star:193,line_end:193|char_star:8,char_end:57";
"recorded == [('tear_down', {'exc': None})],type='comparison_operator'\nline_star:193,line_end:193|char_star:15,char_end:57"[shape="box",fillcolor="white",style=filled];
"assert recorded == [('tear_down', {'exc': None})],type='assert_statement'\nline_star:193,line_end:193|char_star:8,char_end:57"->"recorded == [('tear_down', {'exc': None})],type='comparison_operator'\nline_star:193,line_end:193|char_star:15,char_end:57";
"recorded,type='identifier'\nline_star:193,line_end:193|char_star:15,char_end:23"[shape="point",fillcolor="#121013",style=filled];
"recorded == [('tear_down', {'exc': None})],type='comparison_operator'\nline_star:193,line_end:193|char_star:15,char_end:57"->"recorded,type='identifier'\nline_star:193,line_end:193|char_star:15,char_end:23";
"[('tear_down', {'exc': None})],type='list'\nline_star:193,line_end:193|char_star:27,char_end:57"[shape="box",fillcolor="white",style=filled];
"recorded == [('tear_down', {'exc': None})],type='comparison_operator'\nline_star:193,line_end:193|char_star:15,char_end:57"->"[('tear_down', {'exc': None})],type='list'\nline_star:193,line_end:193|char_star:27,char_end:57";
"('tear_down', {'exc': None}),type='tuple'\nline_star:193,line_end:193|char_star:28,char_end:56"[shape="box",fillcolor="white",style=filled];
"[('tear_down', {'exc': None})],type='list'\nline_star:193,line_end:193|char_star:27,char_end:57"->"('tear_down', {'exc': None}),type='tuple'\nline_star:193,line_end:193|char_star:28,char_end:56";
"{'exc': None},type='dictionary'\nline_star:193,line_end:193|char_star:42,char_end:55"[shape="box",fillcolor="white",style=filled];
"('tear_down', {'exc': None}),type='tuple'\nline_star:193,line_end:193|char_star:28,char_end:56"->"{'exc': None},type='dictionary'\nline_star:193,line_end:193|char_star:42,char_end:55";
"{,type='{'\nline_star:193,line_end:193|char_star:42,char_end:43"[shape="box",fillcolor="white",style=filled];
"{'exc': None},type='dictionary'\nline_star:193,line_end:193|char_star:42,char_end:55"->"{,type='{'\nline_star:193,line_end:193|char_star:42,char_end:43";
"'exc': None,type='pair'\nline_star:193,line_end:193|char_star:43,char_end:54"[shape="box",fillcolor="white",style=filled];
"{'exc': None},type='dictionary'\nline_star:193,line_end:193|char_star:42,char_end:55"->"'exc': None,type='pair'\nline_star:193,line_end:193|char_star:43,char_end:54";
"},type='}'\nline_star:193,line_end:193|char_star:54,char_end:55"[shape="box",fillcolor="white",style=filled];
"{'exc': None},type='dictionary'\nline_star:193,line_end:193|char_star:42,char_end:55"->"},type='}'\nline_star:193,line_end:193|char_star:54,char_end:55";
"finally:\n        flask.appcontext_tearing_down.disconnect(record_teardown, app),type='finally_clause'\nline_star:194,line_end:195|char_star:4,char_end:70"[shape="box",fillcolor="white",style=filled];
"try:\n        with app.test_client() as c:\n            rv = c.get('/')\n            assert rv.status_code == 500\n            assert recorded == []\n        assert recorded == [('tear_down', {'exc': None})]\n    finally:\n        flask.appcontext_tearing_down.disconnect(record_teardown, app),type='try_statement'\nline_star:188,line_end:195|char_star:4,char_end:70"->"finally:\n        flask.appcontext_tearing_down.disconnect(record_teardown, app),type='finally_clause'\nline_star:194,line_end:195|char_star:4,char_end:70";
"finally,type='finally'\nline_star:194,line_end:194|char_star:4,char_end:11"[shape="box",fillcolor="white",style=filled];
"finally:\n        flask.appcontext_tearing_down.disconnect(record_teardown, app),type='finally_clause'\nline_star:194,line_end:195|char_star:4,char_end:70"->"finally,type='finally'\nline_star:194,line_end:194|char_star:4,char_end:11";
"type='INFORMATION BLOCK'\nline_star:195,line_end:195|char_star:8,char_end:70"[shape="point",fillcolor="#121013",style=filled];
"finally:\n        flask.appcontext_tearing_down.disconnect(record_teardown, app),type='finally_clause'\nline_star:194,line_end:195|char_star:4,char_end:70"->"type='INFORMATION BLOCK'\nline_star:195,line_end:195|char_star:8,char_end:70";
"import pytest\nimport blinker\nimport flas"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"import pytest\nimport blinker\nimport flas"
}
