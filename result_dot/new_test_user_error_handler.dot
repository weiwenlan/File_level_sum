digraph G{
rankdir="LR";
"MODULE"[shape="box",fillcolor="white",style=filled];
"import pytest,type='import_statement'\nline_star:0,line_end:0|char_star:0,char_end:13"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"import pytest,type='import_statement'\nline_star:0,line_end:0|char_star:0,char_end:13";
"from werkzeug.exceptions import Forbidden,type='import_from_statement'\nline_star:1,line_end:1|char_star:0,char_end:41"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"from werkzeug.exceptions import Forbidden,type='import_from_statement'\nline_star:1,line_end:1|char_star:0,char_end:41";
"from werkzeug.exceptions import HTTPException,type='import_from_statement'\nline_star:2,line_end:2|char_star:0,char_end:45"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"from werkzeug.exceptions import HTTPException,type='import_from_statement'\nline_star:2,line_end:2|char_star:0,char_end:45";
"from werkzeug.exceptions import InternalServerError,type='import_from_statement'\nline_star:3,line_end:3|char_star:0,char_end:51"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"from werkzeug.exceptions import InternalServerError,type='import_from_statement'\nline_star:3,line_end:3|char_star:0,char_end:51";
"from werkzeug.exceptions import NotFound,type='import_from_statement'\nline_star:4,line_end:4|char_star:0,char_end:40"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"from werkzeug.exceptions import NotFound,type='import_from_statement'\nline_star:4,line_end:4|char_star:0,char_end:40";
"import flask,type='import_statement'\nline_star:6,line_end:6|char_star:0,char_end:12"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"import flask,type='import_statement'\nline_star:6,line_end:6|char_star:0,char_end:12";
"def test_error_handler_no_match(app, client):\n    class CustomException(Exception):\n        pass\n\n    class UnacceptableCustomException(BaseException):\n        pass\n\n    @app.errorhandler(CustomException)\n    def custom_exception_handler(e):\n        assert isinstance(e, CustomException)\n        return 'custom'\n\n    with pytest.raises(\n        AssertionError, match='Custom exceptions must be subclasses of Exception.'\n    ):\n        app.register_error_handler(UnacceptableCustomException, None)\n\n    @app.errorhandler(500)\n    def handle_500(e):\n        assert isinstance(e, InternalServerError)\n        original = getattr(e, 'original_exception', None)\n\n        if original is not None:\n            return f'wrapped {type(original).__name__}'\n\n        return 'direct'\n\n    @app.route('/custom')\n    def custom_test():\n        raise CustomException()\n\n    @app.route('/keyerror')\n    def key_error():\n        raise KeyError()\n\n    @app.route('/abort')\n    def do_abort():\n        flask.abort(500)\n\n    app.testing = False\n    assert client.get('/custom').data == b'custom'\n    assert client.get('/keyerror').data == b'wrapped KeyError'\n    assert client.get('/abort').data == b'direct',type='function_definition'\nline_star:9,line_end:51|char_star:0,char_end:49"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_error_handler_no_match(app, client):\n    class CustomException(Exception):\n        pass\n\n    class UnacceptableCustomException(BaseException):\n        pass\n\n    @app.errorhandler(CustomException)\n    def custom_exception_handler(e):\n        assert isinstance(e, CustomException)\n        return 'custom'\n\n    with pytest.raises(\n        AssertionError, match='Custom exceptions must be subclasses of Exception.'\n    ):\n        app.register_error_handler(UnacceptableCustomException, None)\n\n    @app.errorhandler(500)\n    def handle_500(e):\n        assert isinstance(e, InternalServerError)\n        original = getattr(e, 'original_exception', None)\n\n        if original is not None:\n            return f'wrapped {type(original).__name__}'\n\n        return 'direct'\n\n    @app.route('/custom')\n    def custom_test():\n        raise CustomException()\n\n    @app.route('/keyerror')\n    def key_error():\n        raise KeyError()\n\n    @app.route('/abort')\n    def do_abort():\n        flask.abort(500)\n\n    app.testing = False\n    assert client.get('/custom').data == b'custom'\n    assert client.get('/keyerror').data == b'wrapped KeyError'\n    assert client.get('/abort').data == b'direct',type='function_definition'\nline_star:9,line_end:51|char_star:0,char_end:49";
"test_error_handler_no_match,type='identifier'\nline_star:9,line_end:9|char_star:4,char_end:31"[shape="point",fillcolor="#121013",style=filled];
"def test_error_handler_no_match(app, client):\n    class CustomException(Exception):\n        pass\n\n    class UnacceptableCustomException(BaseException):\n        pass\n\n    @app.errorhandler(CustomException)\n    def custom_exception_handler(e):\n        assert isinstance(e, CustomException)\n        return 'custom'\n\n    with pytest.raises(\n        AssertionError, match='Custom exceptions must be subclasses of Exception.'\n    ):\n        app.register_error_handler(UnacceptableCustomException, None)\n\n    @app.errorhandler(500)\n    def handle_500(e):\n        assert isinstance(e, InternalServerError)\n        original = getattr(e, 'original_exception', None)\n\n        if original is not None:\n            return f'wrapped {type(original).__name__}'\n\n        return 'direct'\n\n    @app.route('/custom')\n    def custom_test():\n        raise CustomException()\n\n    @app.route('/keyerror')\n    def key_error():\n        raise KeyError()\n\n    @app.route('/abort')\n    def do_abort():\n        flask.abort(500)\n\n    app.testing = False\n    assert client.get('/custom').data == b'custom'\n    assert client.get('/keyerror').data == b'wrapped KeyError'\n    assert client.get('/abort').data == b'direct',type='function_definition'\nline_star:9,line_end:51|char_star:0,char_end:49"->"test_error_handler_no_match,type='identifier'\nline_star:9,line_end:9|char_star:4,char_end:31";
"(app, client),type='parameters'\nline_star:9,line_end:9|char_star:31,char_end:44"[shape="box",fillcolor="white",style=filled];
"def test_error_handler_no_match(app, client):\n    class CustomException(Exception):\n        pass\n\n    class UnacceptableCustomException(BaseException):\n        pass\n\n    @app.errorhandler(CustomException)\n    def custom_exception_handler(e):\n        assert isinstance(e, CustomException)\n        return 'custom'\n\n    with pytest.raises(\n        AssertionError, match='Custom exceptions must be subclasses of Exception.'\n    ):\n        app.register_error_handler(UnacceptableCustomException, None)\n\n    @app.errorhandler(500)\n    def handle_500(e):\n        assert isinstance(e, InternalServerError)\n        original = getattr(e, 'original_exception', None)\n\n        if original is not None:\n            return f'wrapped {type(original).__name__}'\n\n        return 'direct'\n\n    @app.route('/custom')\n    def custom_test():\n        raise CustomException()\n\n    @app.route('/keyerror')\n    def key_error():\n        raise KeyError()\n\n    @app.route('/abort')\n    def do_abort():\n        flask.abort(500)\n\n    app.testing = False\n    assert client.get('/custom').data == b'custom'\n    assert client.get('/keyerror').data == b'wrapped KeyError'\n    assert client.get('/abort').data == b'direct',type='function_definition'\nline_star:9,line_end:51|char_star:0,char_end:49"->"(app, client),type='parameters'\nline_star:9,line_end:9|char_star:31,char_end:44";
"app,type='identifier'\nline_star:9,line_end:9|char_star:32,char_end:35"[shape="point",fillcolor="#121013",style=filled];
"(app, client),type='parameters'\nline_star:9,line_end:9|char_star:31,char_end:44"->"app,type='identifier'\nline_star:9,line_end:9|char_star:32,char_end:35";
"client,type='identifier'\nline_star:9,line_end:9|char_star:37,char_end:43"[shape="point",fillcolor="#121013",style=filled];
"(app, client),type='parameters'\nline_star:9,line_end:9|char_star:31,char_end:44"->"client,type='identifier'\nline_star:9,line_end:9|char_star:37,char_end:43";
"type='INFORMATION BLOCK'\nline_star:10,line_end:51|char_star:4,char_end:49"[shape="point",fillcolor="#121013",style=filled];
"def test_error_handler_no_match(app, client):\n    class CustomException(Exception):\n        pass\n\n    class UnacceptableCustomException(BaseException):\n        pass\n\n    @app.errorhandler(CustomException)\n    def custom_exception_handler(e):\n        assert isinstance(e, CustomException)\n        return 'custom'\n\n    with pytest.raises(\n        AssertionError, match='Custom exceptions must be subclasses of Exception.'\n    ):\n        app.register_error_handler(UnacceptableCustomException, None)\n\n    @app.errorhandler(500)\n    def handle_500(e):\n        assert isinstance(e, InternalServerError)\n        original = getattr(e, 'original_exception', None)\n\n        if original is not None:\n            return f'wrapped {type(original).__name__}'\n\n        return 'direct'\n\n    @app.route('/custom')\n    def custom_test():\n        raise CustomException()\n\n    @app.route('/keyerror')\n    def key_error():\n        raise KeyError()\n\n    @app.route('/abort')\n    def do_abort():\n        flask.abort(500)\n\n    app.testing = False\n    assert client.get('/custom').data == b'custom'\n    assert client.get('/keyerror').data == b'wrapped KeyError'\n    assert client.get('/abort').data == b'direct',type='function_definition'\nline_star:9,line_end:51|char_star:0,char_end:49"->"type='INFORMATION BLOCK'\nline_star:10,line_end:51|char_star:4,char_end:49";
"class CustomException(Exception):\n        pass,type='class_definition'\nline_star:10,line_end:11|char_star:4,char_end:12"[shape="box",fillcolor="#ffdf91",style=filled];
"type='INFORMATION BLOCK'\nline_star:10,line_end:51|char_star:4,char_end:49"->"class CustomException(Exception):\n        pass,type='class_definition'\nline_star:10,line_end:11|char_star:4,char_end:12";
"CustomException,type='identifier'\nline_star:10,line_end:10|char_star:10,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"class CustomException(Exception):\n        pass,type='class_definition'\nline_star:10,line_end:11|char_star:4,char_end:12"->"CustomException,type='identifier'\nline_star:10,line_end:10|char_star:10,char_end:25";
"(Exception),type='argument_list'\nline_star:10,line_end:10|char_star:25,char_end:36"[shape="box",fillcolor="white",style=filled];
"class CustomException(Exception):\n        pass,type='class_definition'\nline_star:10,line_end:11|char_star:4,char_end:12"->"(Exception),type='argument_list'\nline_star:10,line_end:10|char_star:25,char_end:36";
"Exception,type='identifier'\nline_star:10,line_end:10|char_star:26,char_end:35"[shape="point",fillcolor="#121013",style=filled];
"(Exception),type='argument_list'\nline_star:10,line_end:10|char_star:25,char_end:36"->"Exception,type='identifier'\nline_star:10,line_end:10|char_star:26,char_end:35";
"type='INFORMATION BLOCK'\nline_star:11,line_end:11|char_star:8,char_end:12"[shape="point",fillcolor="#121013",style=filled];
"class CustomException(Exception):\n        pass,type='class_definition'\nline_star:10,line_end:11|char_star:4,char_end:12"->"type='INFORMATION BLOCK'\nline_star:11,line_end:11|char_star:8,char_end:12";
"pass,type='pass_statement'\nline_star:11,line_end:11|char_star:8,char_end:12"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:11,line_end:11|char_star:8,char_end:12"->"pass,type='pass_statement'\nline_star:11,line_end:11|char_star:8,char_end:12";
"pass,type='pass'\nline_star:11,line_end:11|char_star:8,char_end:12"[shape="box",fillcolor="white",style=filled];
"pass,type='pass_statement'\nline_star:11,line_end:11|char_star:8,char_end:12"->"pass,type='pass'\nline_star:11,line_end:11|char_star:8,char_end:12";
"class UnacceptableCustomException(BaseException):\n        pass,type='class_definition'\nline_star:13,line_end:14|char_star:4,char_end:12"[shape="box",fillcolor="#ffdf91",style=filled];
"type='INFORMATION BLOCK'\nline_star:10,line_end:51|char_star:4,char_end:49"->"class UnacceptableCustomException(BaseException):\n        pass,type='class_definition'\nline_star:13,line_end:14|char_star:4,char_end:12";
"UnacceptableCustomException,type='identifier'\nline_star:13,line_end:13|char_star:10,char_end:37"[shape="point",fillcolor="#121013",style=filled];
"class UnacceptableCustomException(BaseException):\n        pass,type='class_definition'\nline_star:13,line_end:14|char_star:4,char_end:12"->"UnacceptableCustomException,type='identifier'\nline_star:13,line_end:13|char_star:10,char_end:37";
"(BaseException),type='argument_list'\nline_star:13,line_end:13|char_star:37,char_end:52"[shape="box",fillcolor="white",style=filled];
"class UnacceptableCustomException(BaseException):\n        pass,type='class_definition'\nline_star:13,line_end:14|char_star:4,char_end:12"->"(BaseException),type='argument_list'\nline_star:13,line_end:13|char_star:37,char_end:52";
"BaseException,type='identifier'\nline_star:13,line_end:13|char_star:38,char_end:51"[shape="point",fillcolor="#121013",style=filled];
"(BaseException),type='argument_list'\nline_star:13,line_end:13|char_star:37,char_end:52"->"BaseException,type='identifier'\nline_star:13,line_end:13|char_star:38,char_end:51";
"type='INFORMATION BLOCK'\nline_star:14,line_end:14|char_star:8,char_end:12"[shape="point",fillcolor="#121013",style=filled];
"class UnacceptableCustomException(BaseException):\n        pass,type='class_definition'\nline_star:13,line_end:14|char_star:4,char_end:12"->"type='INFORMATION BLOCK'\nline_star:14,line_end:14|char_star:8,char_end:12";
"pass,type='pass_statement'\nline_star:14,line_end:14|char_star:8,char_end:12"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:14,line_end:14|char_star:8,char_end:12"->"pass,type='pass_statement'\nline_star:14,line_end:14|char_star:8,char_end:12";
"pass,type='pass'\nline_star:14,line_end:14|char_star:8,char_end:12"[shape="box",fillcolor="white",style=filled];
"pass,type='pass_statement'\nline_star:14,line_end:14|char_star:8,char_end:12"->"pass,type='pass'\nline_star:14,line_end:14|char_star:8,char_end:12";
"@app.errorhandler(CustomException)\n    def custom_exception_handler(e):\n        assert isinstance(e, CustomException)\n        return 'custom',type='decorated_definition'\nline_star:16,line_end:19|char_star:4,char_end:23"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:10,line_end:51|char_star:4,char_end:49"->"@app.errorhandler(CustomException)\n    def custom_exception_handler(e):\n        assert isinstance(e, CustomException)\n        return 'custom',type='decorated_definition'\nline_star:16,line_end:19|char_star:4,char_end:23";
"@app.errorhandler(CustomException),type='decorator'\nline_star:16,line_end:16|char_star:4,char_end:38"[shape="box",fillcolor="white",style=filled];
"@app.errorhandler(CustomException)\n    def custom_exception_handler(e):\n        assert isinstance(e, CustomException)\n        return 'custom',type='decorated_definition'\nline_star:16,line_end:19|char_star:4,char_end:23"->"@app.errorhandler(CustomException),type='decorator'\nline_star:16,line_end:16|char_star:4,char_end:38";
"def custom_exception_handler(e):\n        assert isinstance(e, CustomException)\n        return 'custom',type='function_definition'\nline_star:17,line_end:19|char_star:4,char_end:23"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.errorhandler(CustomException)\n    def custom_exception_handler(e):\n        assert isinstance(e, CustomException)\n        return 'custom',type='decorated_definition'\nline_star:16,line_end:19|char_star:4,char_end:23"->"def custom_exception_handler(e):\n        assert isinstance(e, CustomException)\n        return 'custom',type='function_definition'\nline_star:17,line_end:19|char_star:4,char_end:23";
"custom_exception_handler,type='identifier'\nline_star:17,line_end:17|char_star:8,char_end:32"[shape="point",fillcolor="#121013",style=filled];
"def custom_exception_handler(e):\n        assert isinstance(e, CustomException)\n        return 'custom',type='function_definition'\nline_star:17,line_end:19|char_star:4,char_end:23"->"custom_exception_handler,type='identifier'\nline_star:17,line_end:17|char_star:8,char_end:32";
"(e),type='parameters'\nline_star:17,line_end:17|char_star:32,char_end:35"[shape="box",fillcolor="white",style=filled];
"def custom_exception_handler(e):\n        assert isinstance(e, CustomException)\n        return 'custom',type='function_definition'\nline_star:17,line_end:19|char_star:4,char_end:23"->"(e),type='parameters'\nline_star:17,line_end:17|char_star:32,char_end:35";
"e,type='identifier'\nline_star:17,line_end:17|char_star:33,char_end:34"[shape="point",fillcolor="#121013",style=filled];
"(e),type='parameters'\nline_star:17,line_end:17|char_star:32,char_end:35"->"e,type='identifier'\nline_star:17,line_end:17|char_star:33,char_end:34";
"type='INFORMATION BLOCK'\nline_star:18,line_end:19|char_star:8,char_end:23"[shape="point",fillcolor="#121013",style=filled];
"def custom_exception_handler(e):\n        assert isinstance(e, CustomException)\n        return 'custom',type='function_definition'\nline_star:17,line_end:19|char_star:4,char_end:23"->"type='INFORMATION BLOCK'\nline_star:18,line_end:19|char_star:8,char_end:23";
"assert isinstance(e, CustomException),type='assert_statement'\nline_star:18,line_end:18|char_star:8,char_end:45"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:18,line_end:19|char_star:8,char_end:23"->"assert isinstance(e, CustomException),type='assert_statement'\nline_star:18,line_end:18|char_star:8,char_end:45";
"isinstance(e, CustomException),type='call'\nline_star:18,line_end:18|char_star:15,char_end:45"[shape="box",fillcolor="white",style=filled];
"assert isinstance(e, CustomException),type='assert_statement'\nline_star:18,line_end:18|char_star:8,char_end:45"->"isinstance(e, CustomException),type='call'\nline_star:18,line_end:18|char_star:15,char_end:45";
"isinstance,type='identifier'\nline_star:18,line_end:18|char_star:15,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"isinstance(e, CustomException),type='call'\nline_star:18,line_end:18|char_star:15,char_end:45"->"isinstance,type='identifier'\nline_star:18,line_end:18|char_star:15,char_end:25";
"(e, CustomException),type='argument_list'\nline_star:18,line_end:18|char_star:25,char_end:45"[shape="box",fillcolor="white",style=filled];
"isinstance(e, CustomException),type='call'\nline_star:18,line_end:18|char_star:15,char_end:45"->"(e, CustomException),type='argument_list'\nline_star:18,line_end:18|char_star:25,char_end:45";
"e,type='identifier'\nline_star:18,line_end:18|char_star:26,char_end:27"[shape="point",fillcolor="#121013",style=filled];
"(e, CustomException),type='argument_list'\nline_star:18,line_end:18|char_star:25,char_end:45"->"e,type='identifier'\nline_star:18,line_end:18|char_star:26,char_end:27";
"CustomException,type='identifier'\nline_star:18,line_end:18|char_star:29,char_end:44"[shape="point",fillcolor="#121013",style=filled];
"(e, CustomException),type='argument_list'\nline_star:18,line_end:18|char_star:25,char_end:45"->"CustomException,type='identifier'\nline_star:18,line_end:18|char_star:29,char_end:44";
"return 'custom',type='return_statement'\nline_star:19,line_end:19|char_star:8,char_end:23"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:18,line_end:19|char_star:8,char_end:23"->"return 'custom',type='return_statement'\nline_star:19,line_end:19|char_star:8,char_end:23";
"with pytest.raises(\n        AssertionError, match='Custom exceptions must be subclasses of Exception.'\n    ):\n        app.register_error_handler(UnacceptableCustomException, None),type='with_statement'\nline_star:21,line_end:24|char_star:4,char_end:69"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:10,line_end:51|char_star:4,char_end:49"->"with pytest.raises(\n        AssertionError, match='Custom exceptions must be subclasses of Exception.'\n    ):\n        app.register_error_handler(UnacceptableCustomException, None),type='with_statement'\nline_star:21,line_end:24|char_star:4,char_end:69";
"pytest.raises(\n        AssertionError, match='Custom exceptions must be subclasses of Exception.'\n    ),type='with_clause'\nline_star:21,line_end:23|char_star:9,char_end:5"[shape="box",fillcolor="white",style=filled];
"with pytest.raises(\n        AssertionError, match='Custom exceptions must be subclasses of Exception.'\n    ):\n        app.register_error_handler(UnacceptableCustomException, None),type='with_statement'\nline_star:21,line_end:24|char_star:4,char_end:69"->"pytest.raises(\n        AssertionError, match='Custom exceptions must be subclasses of Exception.'\n    ),type='with_clause'\nline_star:21,line_end:23|char_star:9,char_end:5";
"type='INFORMATION BLOCK'\nline_star:24,line_end:24|char_star:8,char_end:69"[shape="point",fillcolor="#121013",style=filled];
"with pytest.raises(\n        AssertionError, match='Custom exceptions must be subclasses of Exception.'\n    ):\n        app.register_error_handler(UnacceptableCustomException, None),type='with_statement'\nline_star:21,line_end:24|char_star:4,char_end:69"->"type='INFORMATION BLOCK'\nline_star:24,line_end:24|char_star:8,char_end:69";
"@app.errorhandler(500)\n    def handle_500(e):\n        assert isinstance(e, InternalServerError)\n        original = getattr(e, 'original_exception', None)\n\n        if original is not None:\n            return f'wrapped {type(original).__name__}'\n\n        return 'direct',type='decorated_definition'\nline_star:26,line_end:34|char_star:4,char_end:23"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:10,line_end:51|char_star:4,char_end:49"->"@app.errorhandler(500)\n    def handle_500(e):\n        assert isinstance(e, InternalServerError)\n        original = getattr(e, 'original_exception', None)\n\n        if original is not None:\n            return f'wrapped {type(original).__name__}'\n\n        return 'direct',type='decorated_definition'\nline_star:26,line_end:34|char_star:4,char_end:23";
"@app.errorhandler(500),type='decorator'\nline_star:26,line_end:26|char_star:4,char_end:26"[shape="box",fillcolor="white",style=filled];
"@app.errorhandler(500)\n    def handle_500(e):\n        assert isinstance(e, InternalServerError)\n        original = getattr(e, 'original_exception', None)\n\n        if original is not None:\n            return f'wrapped {type(original).__name__}'\n\n        return 'direct',type='decorated_definition'\nline_star:26,line_end:34|char_star:4,char_end:23"->"@app.errorhandler(500),type='decorator'\nline_star:26,line_end:26|char_star:4,char_end:26";
"def handle_500(e):\n        assert isinstance(e, InternalServerError)\n        original = getattr(e, 'original_exception', None)\n\n        if original is not None:\n            return f'wrapped {type(original).__name__}'\n\n        return 'direct',type='function_definition'\nline_star:27,line_end:34|char_star:4,char_end:23"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.errorhandler(500)\n    def handle_500(e):\n        assert isinstance(e, InternalServerError)\n        original = getattr(e, 'original_exception', None)\n\n        if original is not None:\n            return f'wrapped {type(original).__name__}'\n\n        return 'direct',type='decorated_definition'\nline_star:26,line_end:34|char_star:4,char_end:23"->"def handle_500(e):\n        assert isinstance(e, InternalServerError)\n        original = getattr(e, 'original_exception', None)\n\n        if original is not None:\n            return f'wrapped {type(original).__name__}'\n\n        return 'direct',type='function_definition'\nline_star:27,line_end:34|char_star:4,char_end:23";
"handle_500,type='identifier'\nline_star:27,line_end:27|char_star:8,char_end:18"[shape="point",fillcolor="#121013",style=filled];
"def handle_500(e):\n        assert isinstance(e, InternalServerError)\n        original = getattr(e, 'original_exception', None)\n\n        if original is not None:\n            return f'wrapped {type(original).__name__}'\n\n        return 'direct',type='function_definition'\nline_star:27,line_end:34|char_star:4,char_end:23"->"handle_500,type='identifier'\nline_star:27,line_end:27|char_star:8,char_end:18";
"(e),type='parameters'\nline_star:27,line_end:27|char_star:18,char_end:21"[shape="box",fillcolor="white",style=filled];
"def handle_500(e):\n        assert isinstance(e, InternalServerError)\n        original = getattr(e, 'original_exception', None)\n\n        if original is not None:\n            return f'wrapped {type(original).__name__}'\n\n        return 'direct',type='function_definition'\nline_star:27,line_end:34|char_star:4,char_end:23"->"(e),type='parameters'\nline_star:27,line_end:27|char_star:18,char_end:21";
"e,type='identifier'\nline_star:27,line_end:27|char_star:19,char_end:20"[shape="point",fillcolor="#121013",style=filled];
"(e),type='parameters'\nline_star:27,line_end:27|char_star:18,char_end:21"->"e,type='identifier'\nline_star:27,line_end:27|char_star:19,char_end:20";
"type='INFORMATION BLOCK'\nline_star:28,line_end:34|char_star:8,char_end:23"[shape="point",fillcolor="#121013",style=filled];
"def handle_500(e):\n        assert isinstance(e, InternalServerError)\n        original = getattr(e, 'original_exception', None)\n\n        if original is not None:\n            return f'wrapped {type(original).__name__}'\n\n        return 'direct',type='function_definition'\nline_star:27,line_end:34|char_star:4,char_end:23"->"type='INFORMATION BLOCK'\nline_star:28,line_end:34|char_star:8,char_end:23";
"assert isinstance(e, InternalServerError),type='assert_statement'\nline_star:28,line_end:28|char_star:8,char_end:49"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:28,line_end:34|char_star:8,char_end:23"->"assert isinstance(e, InternalServerError),type='assert_statement'\nline_star:28,line_end:28|char_star:8,char_end:49";
"isinstance(e, InternalServerError),type='call'\nline_star:28,line_end:28|char_star:15,char_end:49"[shape="box",fillcolor="white",style=filled];
"assert isinstance(e, InternalServerError),type='assert_statement'\nline_star:28,line_end:28|char_star:8,char_end:49"->"isinstance(e, InternalServerError),type='call'\nline_star:28,line_end:28|char_star:15,char_end:49";
"isinstance,type='identifier'\nline_star:28,line_end:28|char_star:15,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"isinstance(e, InternalServerError),type='call'\nline_star:28,line_end:28|char_star:15,char_end:49"->"isinstance,type='identifier'\nline_star:28,line_end:28|char_star:15,char_end:25";
"(e, InternalServerError),type='argument_list'\nline_star:28,line_end:28|char_star:25,char_end:49"[shape="box",fillcolor="white",style=filled];
"isinstance(e, InternalServerError),type='call'\nline_star:28,line_end:28|char_star:15,char_end:49"->"(e, InternalServerError),type='argument_list'\nline_star:28,line_end:28|char_star:25,char_end:49";
"e,type='identifier'\nline_star:28,line_end:28|char_star:26,char_end:27"[shape="point",fillcolor="#121013",style=filled];
"(e, InternalServerError),type='argument_list'\nline_star:28,line_end:28|char_star:25,char_end:49"->"e,type='identifier'\nline_star:28,line_end:28|char_star:26,char_end:27";
"InternalServerError,type='identifier'\nline_star:28,line_end:28|char_star:29,char_end:48"[shape="point",fillcolor="#121013",style=filled];
"(e, InternalServerError),type='argument_list'\nline_star:28,line_end:28|char_star:25,char_end:49"->"InternalServerError,type='identifier'\nline_star:28,line_end:28|char_star:29,char_end:48";
"if original is not None:\n            return f'wrapped {type(original).__name__}',type='if_statement'\nline_star:31,line_end:32|char_star:8,char_end:55"[shape="box",fillcolor="#9ecca4",style=filled];
"type='INFORMATION BLOCK'\nline_star:28,line_end:34|char_star:8,char_end:23"->"if original is not None:\n            return f'wrapped {type(original).__name__}',type='if_statement'\nline_star:31,line_end:32|char_star:8,char_end:55";
"return 'direct',type='return_statement'\nline_star:34,line_end:34|char_star:8,char_end:23"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:28,line_end:34|char_star:8,char_end:23"->"return 'direct',type='return_statement'\nline_star:34,line_end:34|char_star:8,char_end:23";
"@app.route('/custom')\n    def custom_test():\n        raise CustomException(),type='decorated_definition'\nline_star:36,line_end:38|char_star:4,char_end:31"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:10,line_end:51|char_star:4,char_end:49"->"@app.route('/custom')\n    def custom_test():\n        raise CustomException(),type='decorated_definition'\nline_star:36,line_end:38|char_star:4,char_end:31";
"@app.route('/custom'),type='decorator'\nline_star:36,line_end:36|char_star:4,char_end:25"[shape="box",fillcolor="white",style=filled];
"@app.route('/custom')\n    def custom_test():\n        raise CustomException(),type='decorated_definition'\nline_star:36,line_end:38|char_star:4,char_end:31"->"@app.route('/custom'),type='decorator'\nline_star:36,line_end:36|char_star:4,char_end:25";
"def custom_test():\n        raise CustomException(),type='function_definition'\nline_star:37,line_end:38|char_star:4,char_end:31"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.route('/custom')\n    def custom_test():\n        raise CustomException(),type='decorated_definition'\nline_star:36,line_end:38|char_star:4,char_end:31"->"def custom_test():\n        raise CustomException(),type='function_definition'\nline_star:37,line_end:38|char_star:4,char_end:31";
"custom_test,type='identifier'\nline_star:37,line_end:37|char_star:8,char_end:19"[shape="point",fillcolor="#121013",style=filled];
"def custom_test():\n        raise CustomException(),type='function_definition'\nline_star:37,line_end:38|char_star:4,char_end:31"->"custom_test,type='identifier'\nline_star:37,line_end:37|char_star:8,char_end:19";
"type='INFORMATION BLOCK'\nline_star:38,line_end:38|char_star:8,char_end:31"[shape="point",fillcolor="#121013",style=filled];
"def custom_test():\n        raise CustomException(),type='function_definition'\nline_star:37,line_end:38|char_star:4,char_end:31"->"type='INFORMATION BLOCK'\nline_star:38,line_end:38|char_star:8,char_end:31";
"raise CustomException(),type='raise_statement'\nline_star:38,line_end:38|char_star:8,char_end:31"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:38,line_end:38|char_star:8,char_end:31"->"raise CustomException(),type='raise_statement'\nline_star:38,line_end:38|char_star:8,char_end:31";
"raise,type='raise'\nline_star:38,line_end:38|char_star:8,char_end:13"[shape="box",fillcolor="white",style=filled];
"raise CustomException(),type='raise_statement'\nline_star:38,line_end:38|char_star:8,char_end:31"->"raise,type='raise'\nline_star:38,line_end:38|char_star:8,char_end:13";
"CustomException(),type='call'\nline_star:38,line_end:38|char_star:14,char_end:31"[shape="box",fillcolor="white",style=filled];
"raise CustomException(),type='raise_statement'\nline_star:38,line_end:38|char_star:8,char_end:31"->"CustomException(),type='call'\nline_star:38,line_end:38|char_star:14,char_end:31";
"CustomException,type='identifier'\nline_star:38,line_end:38|char_star:14,char_end:29"[shape="point",fillcolor="#121013",style=filled];
"CustomException(),type='call'\nline_star:38,line_end:38|char_star:14,char_end:31"->"CustomException,type='identifier'\nline_star:38,line_end:38|char_star:14,char_end:29";
"@app.route('/keyerror')\n    def key_error():\n        raise KeyError(),type='decorated_definition'\nline_star:40,line_end:42|char_star:4,char_end:24"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:10,line_end:51|char_star:4,char_end:49"->"@app.route('/keyerror')\n    def key_error():\n        raise KeyError(),type='decorated_definition'\nline_star:40,line_end:42|char_star:4,char_end:24";
"@app.route('/keyerror'),type='decorator'\nline_star:40,line_end:40|char_star:4,char_end:27"[shape="box",fillcolor="white",style=filled];
"@app.route('/keyerror')\n    def key_error():\n        raise KeyError(),type='decorated_definition'\nline_star:40,line_end:42|char_star:4,char_end:24"->"@app.route('/keyerror'),type='decorator'\nline_star:40,line_end:40|char_star:4,char_end:27";
"def key_error():\n        raise KeyError(),type='function_definition'\nline_star:41,line_end:42|char_star:4,char_end:24"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.route('/keyerror')\n    def key_error():\n        raise KeyError(),type='decorated_definition'\nline_star:40,line_end:42|char_star:4,char_end:24"->"def key_error():\n        raise KeyError(),type='function_definition'\nline_star:41,line_end:42|char_star:4,char_end:24";
"key_error,type='identifier'\nline_star:41,line_end:41|char_star:8,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"def key_error():\n        raise KeyError(),type='function_definition'\nline_star:41,line_end:42|char_star:4,char_end:24"->"key_error,type='identifier'\nline_star:41,line_end:41|char_star:8,char_end:17";
"type='INFORMATION BLOCK'\nline_star:42,line_end:42|char_star:8,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"def key_error():\n        raise KeyError(),type='function_definition'\nline_star:41,line_end:42|char_star:4,char_end:24"->"type='INFORMATION BLOCK'\nline_star:42,line_end:42|char_star:8,char_end:24";
"raise KeyError(),type='raise_statement'\nline_star:42,line_end:42|char_star:8,char_end:24"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:42,line_end:42|char_star:8,char_end:24"->"raise KeyError(),type='raise_statement'\nline_star:42,line_end:42|char_star:8,char_end:24";
"raise,type='raise'\nline_star:42,line_end:42|char_star:8,char_end:13"[shape="box",fillcolor="white",style=filled];
"raise KeyError(),type='raise_statement'\nline_star:42,line_end:42|char_star:8,char_end:24"->"raise,type='raise'\nline_star:42,line_end:42|char_star:8,char_end:13";
"KeyError(),type='call'\nline_star:42,line_end:42|char_star:14,char_end:24"[shape="box",fillcolor="white",style=filled];
"raise KeyError(),type='raise_statement'\nline_star:42,line_end:42|char_star:8,char_end:24"->"KeyError(),type='call'\nline_star:42,line_end:42|char_star:14,char_end:24";
"KeyError,type='identifier'\nline_star:42,line_end:42|char_star:14,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"KeyError(),type='call'\nline_star:42,line_end:42|char_star:14,char_end:24"->"KeyError,type='identifier'\nline_star:42,line_end:42|char_star:14,char_end:22";
"@app.route('/abort')\n    def do_abort():\n        flask.abort(500),type='decorated_definition'\nline_star:44,line_end:46|char_star:4,char_end:24"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:10,line_end:51|char_star:4,char_end:49"->"@app.route('/abort')\n    def do_abort():\n        flask.abort(500),type='decorated_definition'\nline_star:44,line_end:46|char_star:4,char_end:24";
"@app.route('/abort'),type='decorator'\nline_star:44,line_end:44|char_star:4,char_end:24"[shape="box",fillcolor="white",style=filled];
"@app.route('/abort')\n    def do_abort():\n        flask.abort(500),type='decorated_definition'\nline_star:44,line_end:46|char_star:4,char_end:24"->"@app.route('/abort'),type='decorator'\nline_star:44,line_end:44|char_star:4,char_end:24";
"def do_abort():\n        flask.abort(500),type='function_definition'\nline_star:45,line_end:46|char_star:4,char_end:24"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.route('/abort')\n    def do_abort():\n        flask.abort(500),type='decorated_definition'\nline_star:44,line_end:46|char_star:4,char_end:24"->"def do_abort():\n        flask.abort(500),type='function_definition'\nline_star:45,line_end:46|char_star:4,char_end:24";
"do_abort,type='identifier'\nline_star:45,line_end:45|char_star:8,char_end:16"[shape="point",fillcolor="#121013",style=filled];
"def do_abort():\n        flask.abort(500),type='function_definition'\nline_star:45,line_end:46|char_star:4,char_end:24"->"do_abort,type='identifier'\nline_star:45,line_end:45|char_star:8,char_end:16";
"type='INFORMATION BLOCK'\nline_star:46,line_end:46|char_star:8,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"def do_abort():\n        flask.abort(500),type='function_definition'\nline_star:45,line_end:46|char_star:4,char_end:24"->"type='INFORMATION BLOCK'\nline_star:46,line_end:46|char_star:8,char_end:24";
"assert client.get('/custom').data == b'custom',type='assert_statement'\nline_star:49,line_end:49|char_star:4,char_end:50"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:10,line_end:51|char_star:4,char_end:49"->"assert client.get('/custom').data == b'custom',type='assert_statement'\nline_star:49,line_end:49|char_star:4,char_end:50";
"client.get('/custom').data == b'custom',type='comparison_operator'\nline_star:49,line_end:49|char_star:11,char_end:50"[shape="box",fillcolor="white",style=filled];
"assert client.get('/custom').data == b'custom',type='assert_statement'\nline_star:49,line_end:49|char_star:4,char_end:50"->"client.get('/custom').data == b'custom',type='comparison_operator'\nline_star:49,line_end:49|char_star:11,char_end:50";
"client.get('/custom').data,type='attribute'\nline_star:49,line_end:49|char_star:11,char_end:37"[shape="box",fillcolor="white",style=filled];
"client.get('/custom').data == b'custom',type='comparison_operator'\nline_star:49,line_end:49|char_star:11,char_end:50"->"client.get('/custom').data,type='attribute'\nline_star:49,line_end:49|char_star:11,char_end:37";
"client.get('/custom'),type='call'\nline_star:49,line_end:49|char_star:11,char_end:32"[shape="box",fillcolor="white",style=filled];
"client.get('/custom').data,type='attribute'\nline_star:49,line_end:49|char_star:11,char_end:37"->"client.get('/custom'),type='call'\nline_star:49,line_end:49|char_star:11,char_end:32";
"client.get,type='attribute'\nline_star:49,line_end:49|char_star:11,char_end:21"[shape="box",fillcolor="white",style=filled];
"client.get('/custom'),type='call'\nline_star:49,line_end:49|char_star:11,char_end:32"->"client.get,type='attribute'\nline_star:49,line_end:49|char_star:11,char_end:21";
"client,type='identifier'\nline_star:49,line_end:49|char_star:11,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"client.get,type='attribute'\nline_star:49,line_end:49|char_star:11,char_end:21"->"client,type='identifier'\nline_star:49,line_end:49|char_star:11,char_end:17";
"get,type='identifier'\nline_star:49,line_end:49|char_star:18,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"client.get,type='attribute'\nline_star:49,line_end:49|char_star:11,char_end:21"->"get,type='identifier'\nline_star:49,line_end:49|char_star:18,char_end:21";
"('/custom'),type='argument_list'\nline_star:49,line_end:49|char_star:21,char_end:32"[shape="box",fillcolor="white",style=filled];
"client.get('/custom'),type='call'\nline_star:49,line_end:49|char_star:11,char_end:32"->"('/custom'),type='argument_list'\nline_star:49,line_end:49|char_star:21,char_end:32";
"data,type='identifier'\nline_star:49,line_end:49|char_star:33,char_end:37"[shape="point",fillcolor="#121013",style=filled];
"client.get('/custom').data,type='attribute'\nline_star:49,line_end:49|char_star:11,char_end:37"->"data,type='identifier'\nline_star:49,line_end:49|char_star:33,char_end:37";
"assert client.get('/keyerror').data == b'wrapped KeyError',type='assert_statement'\nline_star:50,line_end:50|char_star:4,char_end:62"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:10,line_end:51|char_star:4,char_end:49"->"assert client.get('/keyerror').data == b'wrapped KeyError',type='assert_statement'\nline_star:50,line_end:50|char_star:4,char_end:62";
"client.get('/keyerror').data == b'wrapped KeyError',type='comparison_operator'\nline_star:50,line_end:50|char_star:11,char_end:62"[shape="box",fillcolor="white",style=filled];
"assert client.get('/keyerror').data == b'wrapped KeyError',type='assert_statement'\nline_star:50,line_end:50|char_star:4,char_end:62"->"client.get('/keyerror').data == b'wrapped KeyError',type='comparison_operator'\nline_star:50,line_end:50|char_star:11,char_end:62";
"client.get('/keyerror').data,type='attribute'\nline_star:50,line_end:50|char_star:11,char_end:39"[shape="box",fillcolor="white",style=filled];
"client.get('/keyerror').data == b'wrapped KeyError',type='comparison_operator'\nline_star:50,line_end:50|char_star:11,char_end:62"->"client.get('/keyerror').data,type='attribute'\nline_star:50,line_end:50|char_star:11,char_end:39";
"client.get('/keyerror'),type='call'\nline_star:50,line_end:50|char_star:11,char_end:34"[shape="box",fillcolor="white",style=filled];
"client.get('/keyerror').data,type='attribute'\nline_star:50,line_end:50|char_star:11,char_end:39"->"client.get('/keyerror'),type='call'\nline_star:50,line_end:50|char_star:11,char_end:34";
"client.get,type='attribute'\nline_star:50,line_end:50|char_star:11,char_end:21"[shape="box",fillcolor="white",style=filled];
"client.get('/keyerror'),type='call'\nline_star:50,line_end:50|char_star:11,char_end:34"->"client.get,type='attribute'\nline_star:50,line_end:50|char_star:11,char_end:21";
"client,type='identifier'\nline_star:50,line_end:50|char_star:11,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"client.get,type='attribute'\nline_star:50,line_end:50|char_star:11,char_end:21"->"client,type='identifier'\nline_star:50,line_end:50|char_star:11,char_end:17";
"get,type='identifier'\nline_star:50,line_end:50|char_star:18,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"client.get,type='attribute'\nline_star:50,line_end:50|char_star:11,char_end:21"->"get,type='identifier'\nline_star:50,line_end:50|char_star:18,char_end:21";
"('/keyerror'),type='argument_list'\nline_star:50,line_end:50|char_star:21,char_end:34"[shape="box",fillcolor="white",style=filled];
"client.get('/keyerror'),type='call'\nline_star:50,line_end:50|char_star:11,char_end:34"->"('/keyerror'),type='argument_list'\nline_star:50,line_end:50|char_star:21,char_end:34";
"data,type='identifier'\nline_star:50,line_end:50|char_star:35,char_end:39"[shape="point",fillcolor="#121013",style=filled];
"client.get('/keyerror').data,type='attribute'\nline_star:50,line_end:50|char_star:11,char_end:39"->"data,type='identifier'\nline_star:50,line_end:50|char_star:35,char_end:39";
"assert client.get('/abort').data == b'direct',type='assert_statement'\nline_star:51,line_end:51|char_star:4,char_end:49"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:10,line_end:51|char_star:4,char_end:49"->"assert client.get('/abort').data == b'direct',type='assert_statement'\nline_star:51,line_end:51|char_star:4,char_end:49";
"client.get('/abort').data == b'direct',type='comparison_operator'\nline_star:51,line_end:51|char_star:11,char_end:49"[shape="box",fillcolor="white",style=filled];
"assert client.get('/abort').data == b'direct',type='assert_statement'\nline_star:51,line_end:51|char_star:4,char_end:49"->"client.get('/abort').data == b'direct',type='comparison_operator'\nline_star:51,line_end:51|char_star:11,char_end:49";
"client.get('/abort').data,type='attribute'\nline_star:51,line_end:51|char_star:11,char_end:36"[shape="box",fillcolor="white",style=filled];
"client.get('/abort').data == b'direct',type='comparison_operator'\nline_star:51,line_end:51|char_star:11,char_end:49"->"client.get('/abort').data,type='attribute'\nline_star:51,line_end:51|char_star:11,char_end:36";
"client.get('/abort'),type='call'\nline_star:51,line_end:51|char_star:11,char_end:31"[shape="box",fillcolor="white",style=filled];
"client.get('/abort').data,type='attribute'\nline_star:51,line_end:51|char_star:11,char_end:36"->"client.get('/abort'),type='call'\nline_star:51,line_end:51|char_star:11,char_end:31";
"client.get,type='attribute'\nline_star:51,line_end:51|char_star:11,char_end:21"[shape="box",fillcolor="white",style=filled];
"client.get('/abort'),type='call'\nline_star:51,line_end:51|char_star:11,char_end:31"->"client.get,type='attribute'\nline_star:51,line_end:51|char_star:11,char_end:21";
"client,type='identifier'\nline_star:51,line_end:51|char_star:11,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"client.get,type='attribute'\nline_star:51,line_end:51|char_star:11,char_end:21"->"client,type='identifier'\nline_star:51,line_end:51|char_star:11,char_end:17";
"get,type='identifier'\nline_star:51,line_end:51|char_star:18,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"client.get,type='attribute'\nline_star:51,line_end:51|char_star:11,char_end:21"->"get,type='identifier'\nline_star:51,line_end:51|char_star:18,char_end:21";
"('/abort'),type='argument_list'\nline_star:51,line_end:51|char_star:21,char_end:31"[shape="box",fillcolor="white",style=filled];
"client.get('/abort'),type='call'\nline_star:51,line_end:51|char_star:11,char_end:31"->"('/abort'),type='argument_list'\nline_star:51,line_end:51|char_star:21,char_end:31";
"data,type='identifier'\nline_star:51,line_end:51|char_star:32,char_end:36"[shape="point",fillcolor="#121013",style=filled];
"client.get('/abort').data,type='attribute'\nline_star:51,line_end:51|char_star:11,char_end:36"->"data,type='identifier'\nline_star:51,line_end:51|char_star:32,char_end:36";
"def test_error_handler_subclass(app):\n    class ParentException(Exception):\n        pass\n\n    class ChildExceptionUnregistered(ParentException):\n        pass\n\n    class ChildExceptionRegistered(ParentException):\n        pass\n\n    @app.errorhandler(ParentException)\n    def parent_exception_handler(e):\n        assert isinstance(e, ParentException)\n        return 'parent'\n\n    @app.errorhandler(ChildExceptionRegistered)\n    def child_exception_handler(e):\n        assert isinstance(e, ChildExceptionRegistered)\n        return 'child-registered'\n\n    @app.route('/parent')\n    def parent_test():\n        raise ParentException()\n\n    @app.route('/child-unregistered')\n    def unregistered_test():\n        raise ChildExceptionUnregistered()\n\n    @app.route('/child-registered')\n    def registered_test():\n        raise ChildExceptionRegistered()\n\n    c = app.test_client()\n\n    assert c.get('/parent').data == b'parent'\n    assert c.get('/child-unregistered').data == b'parent'\n    assert c.get('/child-registered').data == b'child-registered',type='function_definition'\nline_star:54,line_end:90|char_star:0,char_end:65"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_error_handler_subclass(app):\n    class ParentException(Exception):\n        pass\n\n    class ChildExceptionUnregistered(ParentException):\n        pass\n\n    class ChildExceptionRegistered(ParentException):\n        pass\n\n    @app.errorhandler(ParentException)\n    def parent_exception_handler(e):\n        assert isinstance(e, ParentException)\n        return 'parent'\n\n    @app.errorhandler(ChildExceptionRegistered)\n    def child_exception_handler(e):\n        assert isinstance(e, ChildExceptionRegistered)\n        return 'child-registered'\n\n    @app.route('/parent')\n    def parent_test():\n        raise ParentException()\n\n    @app.route('/child-unregistered')\n    def unregistered_test():\n        raise ChildExceptionUnregistered()\n\n    @app.route('/child-registered')\n    def registered_test():\n        raise ChildExceptionRegistered()\n\n    c = app.test_client()\n\n    assert c.get('/parent').data == b'parent'\n    assert c.get('/child-unregistered').data == b'parent'\n    assert c.get('/child-registered').data == b'child-registered',type='function_definition'\nline_star:54,line_end:90|char_star:0,char_end:65";
"test_error_handler_subclass,type='identifier'\nline_star:54,line_end:54|char_star:4,char_end:31"[shape="point",fillcolor="#121013",style=filled];
"def test_error_handler_subclass(app):\n    class ParentException(Exception):\n        pass\n\n    class ChildExceptionUnregistered(ParentException):\n        pass\n\n    class ChildExceptionRegistered(ParentException):\n        pass\n\n    @app.errorhandler(ParentException)\n    def parent_exception_handler(e):\n        assert isinstance(e, ParentException)\n        return 'parent'\n\n    @app.errorhandler(ChildExceptionRegistered)\n    def child_exception_handler(e):\n        assert isinstance(e, ChildExceptionRegistered)\n        return 'child-registered'\n\n    @app.route('/parent')\n    def parent_test():\n        raise ParentException()\n\n    @app.route('/child-unregistered')\n    def unregistered_test():\n        raise ChildExceptionUnregistered()\n\n    @app.route('/child-registered')\n    def registered_test():\n        raise ChildExceptionRegistered()\n\n    c = app.test_client()\n\n    assert c.get('/parent').data == b'parent'\n    assert c.get('/child-unregistered').data == b'parent'\n    assert c.get('/child-registered').data == b'child-registered',type='function_definition'\nline_star:54,line_end:90|char_star:0,char_end:65"->"test_error_handler_subclass,type='identifier'\nline_star:54,line_end:54|char_star:4,char_end:31";
"(app),type='parameters'\nline_star:54,line_end:54|char_star:31,char_end:36"[shape="box",fillcolor="white",style=filled];
"def test_error_handler_subclass(app):\n    class ParentException(Exception):\n        pass\n\n    class ChildExceptionUnregistered(ParentException):\n        pass\n\n    class ChildExceptionRegistered(ParentException):\n        pass\n\n    @app.errorhandler(ParentException)\n    def parent_exception_handler(e):\n        assert isinstance(e, ParentException)\n        return 'parent'\n\n    @app.errorhandler(ChildExceptionRegistered)\n    def child_exception_handler(e):\n        assert isinstance(e, ChildExceptionRegistered)\n        return 'child-registered'\n\n    @app.route('/parent')\n    def parent_test():\n        raise ParentException()\n\n    @app.route('/child-unregistered')\n    def unregistered_test():\n        raise ChildExceptionUnregistered()\n\n    @app.route('/child-registered')\n    def registered_test():\n        raise ChildExceptionRegistered()\n\n    c = app.test_client()\n\n    assert c.get('/parent').data == b'parent'\n    assert c.get('/child-unregistered').data == b'parent'\n    assert c.get('/child-registered').data == b'child-registered',type='function_definition'\nline_star:54,line_end:90|char_star:0,char_end:65"->"(app),type='parameters'\nline_star:54,line_end:54|char_star:31,char_end:36";
"app,type='identifier'\nline_star:54,line_end:54|char_star:32,char_end:35"[shape="point",fillcolor="#121013",style=filled];
"(app),type='parameters'\nline_star:54,line_end:54|char_star:31,char_end:36"->"app,type='identifier'\nline_star:54,line_end:54|char_star:32,char_end:35";
"type='INFORMATION BLOCK'\nline_star:55,line_end:90|char_star:4,char_end:65"[shape="point",fillcolor="#121013",style=filled];
"def test_error_handler_subclass(app):\n    class ParentException(Exception):\n        pass\n\n    class ChildExceptionUnregistered(ParentException):\n        pass\n\n    class ChildExceptionRegistered(ParentException):\n        pass\n\n    @app.errorhandler(ParentException)\n    def parent_exception_handler(e):\n        assert isinstance(e, ParentException)\n        return 'parent'\n\n    @app.errorhandler(ChildExceptionRegistered)\n    def child_exception_handler(e):\n        assert isinstance(e, ChildExceptionRegistered)\n        return 'child-registered'\n\n    @app.route('/parent')\n    def parent_test():\n        raise ParentException()\n\n    @app.route('/child-unregistered')\n    def unregistered_test():\n        raise ChildExceptionUnregistered()\n\n    @app.route('/child-registered')\n    def registered_test():\n        raise ChildExceptionRegistered()\n\n    c = app.test_client()\n\n    assert c.get('/parent').data == b'parent'\n    assert c.get('/child-unregistered').data == b'parent'\n    assert c.get('/child-registered').data == b'child-registered',type='function_definition'\nline_star:54,line_end:90|char_star:0,char_end:65"->"type='INFORMATION BLOCK'\nline_star:55,line_end:90|char_star:4,char_end:65";
"class ParentException(Exception):\n        pass,type='class_definition'\nline_star:55,line_end:56|char_star:4,char_end:12"[shape="box",fillcolor="#ffdf91",style=filled];
"type='INFORMATION BLOCK'\nline_star:55,line_end:90|char_star:4,char_end:65"->"class ParentException(Exception):\n        pass,type='class_definition'\nline_star:55,line_end:56|char_star:4,char_end:12";
"ParentException,type='identifier'\nline_star:55,line_end:55|char_star:10,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"class ParentException(Exception):\n        pass,type='class_definition'\nline_star:55,line_end:56|char_star:4,char_end:12"->"ParentException,type='identifier'\nline_star:55,line_end:55|char_star:10,char_end:25";
"(Exception),type='argument_list'\nline_star:55,line_end:55|char_star:25,char_end:36"[shape="box",fillcolor="white",style=filled];
"class ParentException(Exception):\n        pass,type='class_definition'\nline_star:55,line_end:56|char_star:4,char_end:12"->"(Exception),type='argument_list'\nline_star:55,line_end:55|char_star:25,char_end:36";
"Exception,type='identifier'\nline_star:55,line_end:55|char_star:26,char_end:35"[shape="point",fillcolor="#121013",style=filled];
"(Exception),type='argument_list'\nline_star:55,line_end:55|char_star:25,char_end:36"->"Exception,type='identifier'\nline_star:55,line_end:55|char_star:26,char_end:35";
"type='INFORMATION BLOCK'\nline_star:56,line_end:56|char_star:8,char_end:12"[shape="point",fillcolor="#121013",style=filled];
"class ParentException(Exception):\n        pass,type='class_definition'\nline_star:55,line_end:56|char_star:4,char_end:12"->"type='INFORMATION BLOCK'\nline_star:56,line_end:56|char_star:8,char_end:12";
"pass,type='pass_statement'\nline_star:56,line_end:56|char_star:8,char_end:12"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:56,line_end:56|char_star:8,char_end:12"->"pass,type='pass_statement'\nline_star:56,line_end:56|char_star:8,char_end:12";
"pass,type='pass'\nline_star:56,line_end:56|char_star:8,char_end:12"[shape="box",fillcolor="white",style=filled];
"pass,type='pass_statement'\nline_star:56,line_end:56|char_star:8,char_end:12"->"pass,type='pass'\nline_star:56,line_end:56|char_star:8,char_end:12";
"class ChildExceptionUnregistered(ParentException):\n        pass,type='class_definition'\nline_star:58,line_end:59|char_star:4,char_end:12"[shape="box",fillcolor="#ffdf91",style=filled];
"type='INFORMATION BLOCK'\nline_star:55,line_end:90|char_star:4,char_end:65"->"class ChildExceptionUnregistered(ParentException):\n        pass,type='class_definition'\nline_star:58,line_end:59|char_star:4,char_end:12";
"ChildExceptionUnregistered,type='identifier'\nline_star:58,line_end:58|char_star:10,char_end:36"[shape="point",fillcolor="#121013",style=filled];
"class ChildExceptionUnregistered(ParentException):\n        pass,type='class_definition'\nline_star:58,line_end:59|char_star:4,char_end:12"->"ChildExceptionUnregistered,type='identifier'\nline_star:58,line_end:58|char_star:10,char_end:36";
"(ParentException),type='argument_list'\nline_star:58,line_end:58|char_star:36,char_end:53"[shape="box",fillcolor="white",style=filled];
"class ChildExceptionUnregistered(ParentException):\n        pass,type='class_definition'\nline_star:58,line_end:59|char_star:4,char_end:12"->"(ParentException),type='argument_list'\nline_star:58,line_end:58|char_star:36,char_end:53";
"ParentException,type='identifier'\nline_star:58,line_end:58|char_star:37,char_end:52"[shape="point",fillcolor="#121013",style=filled];
"(ParentException),type='argument_list'\nline_star:58,line_end:58|char_star:36,char_end:53"->"ParentException,type='identifier'\nline_star:58,line_end:58|char_star:37,char_end:52";
"type='INFORMATION BLOCK'\nline_star:59,line_end:59|char_star:8,char_end:12"[shape="point",fillcolor="#121013",style=filled];
"class ChildExceptionUnregistered(ParentException):\n        pass,type='class_definition'\nline_star:58,line_end:59|char_star:4,char_end:12"->"type='INFORMATION BLOCK'\nline_star:59,line_end:59|char_star:8,char_end:12";
"pass,type='pass_statement'\nline_star:59,line_end:59|char_star:8,char_end:12"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:59,line_end:59|char_star:8,char_end:12"->"pass,type='pass_statement'\nline_star:59,line_end:59|char_star:8,char_end:12";
"pass,type='pass'\nline_star:59,line_end:59|char_star:8,char_end:12"[shape="box",fillcolor="white",style=filled];
"pass,type='pass_statement'\nline_star:59,line_end:59|char_star:8,char_end:12"->"pass,type='pass'\nline_star:59,line_end:59|char_star:8,char_end:12";
"class ChildExceptionRegistered(ParentException):\n        pass,type='class_definition'\nline_star:61,line_end:62|char_star:4,char_end:12"[shape="box",fillcolor="#ffdf91",style=filled];
"type='INFORMATION BLOCK'\nline_star:55,line_end:90|char_star:4,char_end:65"->"class ChildExceptionRegistered(ParentException):\n        pass,type='class_definition'\nline_star:61,line_end:62|char_star:4,char_end:12";
"ChildExceptionRegistered,type='identifier'\nline_star:61,line_end:61|char_star:10,char_end:34"[shape="point",fillcolor="#121013",style=filled];
"class ChildExceptionRegistered(ParentException):\n        pass,type='class_definition'\nline_star:61,line_end:62|char_star:4,char_end:12"->"ChildExceptionRegistered,type='identifier'\nline_star:61,line_end:61|char_star:10,char_end:34";
"(ParentException),type='argument_list'\nline_star:61,line_end:61|char_star:34,char_end:51"[shape="box",fillcolor="white",style=filled];
"class ChildExceptionRegistered(ParentException):\n        pass,type='class_definition'\nline_star:61,line_end:62|char_star:4,char_end:12"->"(ParentException),type='argument_list'\nline_star:61,line_end:61|char_star:34,char_end:51";
"ParentException,type='identifier'\nline_star:61,line_end:61|char_star:35,char_end:50"[shape="point",fillcolor="#121013",style=filled];
"(ParentException),type='argument_list'\nline_star:61,line_end:61|char_star:34,char_end:51"->"ParentException,type='identifier'\nline_star:61,line_end:61|char_star:35,char_end:50";
"type='INFORMATION BLOCK'\nline_star:62,line_end:62|char_star:8,char_end:12"[shape="point",fillcolor="#121013",style=filled];
"class ChildExceptionRegistered(ParentException):\n        pass,type='class_definition'\nline_star:61,line_end:62|char_star:4,char_end:12"->"type='INFORMATION BLOCK'\nline_star:62,line_end:62|char_star:8,char_end:12";
"pass,type='pass_statement'\nline_star:62,line_end:62|char_star:8,char_end:12"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:62,line_end:62|char_star:8,char_end:12"->"pass,type='pass_statement'\nline_star:62,line_end:62|char_star:8,char_end:12";
"pass,type='pass'\nline_star:62,line_end:62|char_star:8,char_end:12"[shape="box",fillcolor="white",style=filled];
"pass,type='pass_statement'\nline_star:62,line_end:62|char_star:8,char_end:12"->"pass,type='pass'\nline_star:62,line_end:62|char_star:8,char_end:12";
"@app.errorhandler(ParentException)\n    def parent_exception_handler(e):\n        assert isinstance(e, ParentException)\n        return 'parent',type='decorated_definition'\nline_star:64,line_end:67|char_star:4,char_end:23"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:55,line_end:90|char_star:4,char_end:65"->"@app.errorhandler(ParentException)\n    def parent_exception_handler(e):\n        assert isinstance(e, ParentException)\n        return 'parent',type='decorated_definition'\nline_star:64,line_end:67|char_star:4,char_end:23";
"@app.errorhandler(ParentException),type='decorator'\nline_star:64,line_end:64|char_star:4,char_end:38"[shape="box",fillcolor="white",style=filled];
"@app.errorhandler(ParentException)\n    def parent_exception_handler(e):\n        assert isinstance(e, ParentException)\n        return 'parent',type='decorated_definition'\nline_star:64,line_end:67|char_star:4,char_end:23"->"@app.errorhandler(ParentException),type='decorator'\nline_star:64,line_end:64|char_star:4,char_end:38";
"def parent_exception_handler(e):\n        assert isinstance(e, ParentException)\n        return 'parent',type='function_definition'\nline_star:65,line_end:67|char_star:4,char_end:23"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.errorhandler(ParentException)\n    def parent_exception_handler(e):\n        assert isinstance(e, ParentException)\n        return 'parent',type='decorated_definition'\nline_star:64,line_end:67|char_star:4,char_end:23"->"def parent_exception_handler(e):\n        assert isinstance(e, ParentException)\n        return 'parent',type='function_definition'\nline_star:65,line_end:67|char_star:4,char_end:23";
"parent_exception_handler,type='identifier'\nline_star:65,line_end:65|char_star:8,char_end:32"[shape="point",fillcolor="#121013",style=filled];
"def parent_exception_handler(e):\n        assert isinstance(e, ParentException)\n        return 'parent',type='function_definition'\nline_star:65,line_end:67|char_star:4,char_end:23"->"parent_exception_handler,type='identifier'\nline_star:65,line_end:65|char_star:8,char_end:32";
"(e),type='parameters'\nline_star:65,line_end:65|char_star:32,char_end:35"[shape="box",fillcolor="white",style=filled];
"def parent_exception_handler(e):\n        assert isinstance(e, ParentException)\n        return 'parent',type='function_definition'\nline_star:65,line_end:67|char_star:4,char_end:23"->"(e),type='parameters'\nline_star:65,line_end:65|char_star:32,char_end:35";
"e,type='identifier'\nline_star:65,line_end:65|char_star:33,char_end:34"[shape="point",fillcolor="#121013",style=filled];
"(e),type='parameters'\nline_star:65,line_end:65|char_star:32,char_end:35"->"e,type='identifier'\nline_star:65,line_end:65|char_star:33,char_end:34";
"type='INFORMATION BLOCK'\nline_star:66,line_end:67|char_star:8,char_end:23"[shape="point",fillcolor="#121013",style=filled];
"def parent_exception_handler(e):\n        assert isinstance(e, ParentException)\n        return 'parent',type='function_definition'\nline_star:65,line_end:67|char_star:4,char_end:23"->"type='INFORMATION BLOCK'\nline_star:66,line_end:67|char_star:8,char_end:23";
"assert isinstance(e, ParentException),type='assert_statement'\nline_star:66,line_end:66|char_star:8,char_end:45"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:66,line_end:67|char_star:8,char_end:23"->"assert isinstance(e, ParentException),type='assert_statement'\nline_star:66,line_end:66|char_star:8,char_end:45";
"isinstance(e, ParentException),type='call'\nline_star:66,line_end:66|char_star:15,char_end:45"[shape="box",fillcolor="white",style=filled];
"assert isinstance(e, ParentException),type='assert_statement'\nline_star:66,line_end:66|char_star:8,char_end:45"->"isinstance(e, ParentException),type='call'\nline_star:66,line_end:66|char_star:15,char_end:45";
"isinstance,type='identifier'\nline_star:66,line_end:66|char_star:15,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"isinstance(e, ParentException),type='call'\nline_star:66,line_end:66|char_star:15,char_end:45"->"isinstance,type='identifier'\nline_star:66,line_end:66|char_star:15,char_end:25";
"(e, ParentException),type='argument_list'\nline_star:66,line_end:66|char_star:25,char_end:45"[shape="box",fillcolor="white",style=filled];
"isinstance(e, ParentException),type='call'\nline_star:66,line_end:66|char_star:15,char_end:45"->"(e, ParentException),type='argument_list'\nline_star:66,line_end:66|char_star:25,char_end:45";
"e,type='identifier'\nline_star:66,line_end:66|char_star:26,char_end:27"[shape="point",fillcolor="#121013",style=filled];
"(e, ParentException),type='argument_list'\nline_star:66,line_end:66|char_star:25,char_end:45"->"e,type='identifier'\nline_star:66,line_end:66|char_star:26,char_end:27";
"ParentException,type='identifier'\nline_star:66,line_end:66|char_star:29,char_end:44"[shape="point",fillcolor="#121013",style=filled];
"(e, ParentException),type='argument_list'\nline_star:66,line_end:66|char_star:25,char_end:45"->"ParentException,type='identifier'\nline_star:66,line_end:66|char_star:29,char_end:44";
"return 'parent',type='return_statement'\nline_star:67,line_end:67|char_star:8,char_end:23"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:66,line_end:67|char_star:8,char_end:23"->"return 'parent',type='return_statement'\nline_star:67,line_end:67|char_star:8,char_end:23";
"@app.errorhandler(ChildExceptionRegistered)\n    def child_exception_handler(e):\n        assert isinstance(e, ChildExceptionRegistered)\n        return 'child-registered',type='decorated_definition'\nline_star:69,line_end:72|char_star:4,char_end:33"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:55,line_end:90|char_star:4,char_end:65"->"@app.errorhandler(ChildExceptionRegistered)\n    def child_exception_handler(e):\n        assert isinstance(e, ChildExceptionRegistered)\n        return 'child-registered',type='decorated_definition'\nline_star:69,line_end:72|char_star:4,char_end:33";
"@app.errorhandler(ChildExceptionRegistered),type='decorator'\nline_star:69,line_end:69|char_star:4,char_end:47"[shape="box",fillcolor="white",style=filled];
"@app.errorhandler(ChildExceptionRegistered)\n    def child_exception_handler(e):\n        assert isinstance(e, ChildExceptionRegistered)\n        return 'child-registered',type='decorated_definition'\nline_star:69,line_end:72|char_star:4,char_end:33"->"@app.errorhandler(ChildExceptionRegistered),type='decorator'\nline_star:69,line_end:69|char_star:4,char_end:47";
"def child_exception_handler(e):\n        assert isinstance(e, ChildExceptionRegistered)\n        return 'child-registered',type='function_definition'\nline_star:70,line_end:72|char_star:4,char_end:33"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.errorhandler(ChildExceptionRegistered)\n    def child_exception_handler(e):\n        assert isinstance(e, ChildExceptionRegistered)\n        return 'child-registered',type='decorated_definition'\nline_star:69,line_end:72|char_star:4,char_end:33"->"def child_exception_handler(e):\n        assert isinstance(e, ChildExceptionRegistered)\n        return 'child-registered',type='function_definition'\nline_star:70,line_end:72|char_star:4,char_end:33";
"child_exception_handler,type='identifier'\nline_star:70,line_end:70|char_star:8,char_end:31"[shape="point",fillcolor="#121013",style=filled];
"def child_exception_handler(e):\n        assert isinstance(e, ChildExceptionRegistered)\n        return 'child-registered',type='function_definition'\nline_star:70,line_end:72|char_star:4,char_end:33"->"child_exception_handler,type='identifier'\nline_star:70,line_end:70|char_star:8,char_end:31";
"(e),type='parameters'\nline_star:70,line_end:70|char_star:31,char_end:34"[shape="box",fillcolor="white",style=filled];
"def child_exception_handler(e):\n        assert isinstance(e, ChildExceptionRegistered)\n        return 'child-registered',type='function_definition'\nline_star:70,line_end:72|char_star:4,char_end:33"->"(e),type='parameters'\nline_star:70,line_end:70|char_star:31,char_end:34";
"e,type='identifier'\nline_star:70,line_end:70|char_star:32,char_end:33"[shape="point",fillcolor="#121013",style=filled];
"(e),type='parameters'\nline_star:70,line_end:70|char_star:31,char_end:34"->"e,type='identifier'\nline_star:70,line_end:70|char_star:32,char_end:33";
"type='INFORMATION BLOCK'\nline_star:71,line_end:72|char_star:8,char_end:33"[shape="point",fillcolor="#121013",style=filled];
"def child_exception_handler(e):\n        assert isinstance(e, ChildExceptionRegistered)\n        return 'child-registered',type='function_definition'\nline_star:70,line_end:72|char_star:4,char_end:33"->"type='INFORMATION BLOCK'\nline_star:71,line_end:72|char_star:8,char_end:33";
"assert isinstance(e, ChildExceptionRegistered),type='assert_statement'\nline_star:71,line_end:71|char_star:8,char_end:54"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:71,line_end:72|char_star:8,char_end:33"->"assert isinstance(e, ChildExceptionRegistered),type='assert_statement'\nline_star:71,line_end:71|char_star:8,char_end:54";
"isinstance(e, ChildExceptionRegistered),type='call'\nline_star:71,line_end:71|char_star:15,char_end:54"[shape="box",fillcolor="white",style=filled];
"assert isinstance(e, ChildExceptionRegistered),type='assert_statement'\nline_star:71,line_end:71|char_star:8,char_end:54"->"isinstance(e, ChildExceptionRegistered),type='call'\nline_star:71,line_end:71|char_star:15,char_end:54";
"isinstance,type='identifier'\nline_star:71,line_end:71|char_star:15,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"isinstance(e, ChildExceptionRegistered),type='call'\nline_star:71,line_end:71|char_star:15,char_end:54"->"isinstance,type='identifier'\nline_star:71,line_end:71|char_star:15,char_end:25";
"(e, ChildExceptionRegistered),type='argument_list'\nline_star:71,line_end:71|char_star:25,char_end:54"[shape="box",fillcolor="white",style=filled];
"isinstance(e, ChildExceptionRegistered),type='call'\nline_star:71,line_end:71|char_star:15,char_end:54"->"(e, ChildExceptionRegistered),type='argument_list'\nline_star:71,line_end:71|char_star:25,char_end:54";
"e,type='identifier'\nline_star:71,line_end:71|char_star:26,char_end:27"[shape="point",fillcolor="#121013",style=filled];
"(e, ChildExceptionRegistered),type='argument_list'\nline_star:71,line_end:71|char_star:25,char_end:54"->"e,type='identifier'\nline_star:71,line_end:71|char_star:26,char_end:27";
"ChildExceptionRegistered,type='identifier'\nline_star:71,line_end:71|char_star:29,char_end:53"[shape="point",fillcolor="#121013",style=filled];
"(e, ChildExceptionRegistered),type='argument_list'\nline_star:71,line_end:71|char_star:25,char_end:54"->"ChildExceptionRegistered,type='identifier'\nline_star:71,line_end:71|char_star:29,char_end:53";
"return 'child-registered',type='return_statement'\nline_star:72,line_end:72|char_star:8,char_end:33"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:71,line_end:72|char_star:8,char_end:33"->"return 'child-registered',type='return_statement'\nline_star:72,line_end:72|char_star:8,char_end:33";
"@app.route('/parent')\n    def parent_test():\n        raise ParentException(),type='decorated_definition'\nline_star:74,line_end:76|char_star:4,char_end:31"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:55,line_end:90|char_star:4,char_end:65"->"@app.route('/parent')\n    def parent_test():\n        raise ParentException(),type='decorated_definition'\nline_star:74,line_end:76|char_star:4,char_end:31";
"@app.route('/parent'),type='decorator'\nline_star:74,line_end:74|char_star:4,char_end:25"[shape="box",fillcolor="white",style=filled];
"@app.route('/parent')\n    def parent_test():\n        raise ParentException(),type='decorated_definition'\nline_star:74,line_end:76|char_star:4,char_end:31"->"@app.route('/parent'),type='decorator'\nline_star:74,line_end:74|char_star:4,char_end:25";
"def parent_test():\n        raise ParentException(),type='function_definition'\nline_star:75,line_end:76|char_star:4,char_end:31"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.route('/parent')\n    def parent_test():\n        raise ParentException(),type='decorated_definition'\nline_star:74,line_end:76|char_star:4,char_end:31"->"def parent_test():\n        raise ParentException(),type='function_definition'\nline_star:75,line_end:76|char_star:4,char_end:31";
"parent_test,type='identifier'\nline_star:75,line_end:75|char_star:8,char_end:19"[shape="point",fillcolor="#121013",style=filled];
"def parent_test():\n        raise ParentException(),type='function_definition'\nline_star:75,line_end:76|char_star:4,char_end:31"->"parent_test,type='identifier'\nline_star:75,line_end:75|char_star:8,char_end:19";
"type='INFORMATION BLOCK'\nline_star:76,line_end:76|char_star:8,char_end:31"[shape="point",fillcolor="#121013",style=filled];
"def parent_test():\n        raise ParentException(),type='function_definition'\nline_star:75,line_end:76|char_star:4,char_end:31"->"type='INFORMATION BLOCK'\nline_star:76,line_end:76|char_star:8,char_end:31";
"raise ParentException(),type='raise_statement'\nline_star:76,line_end:76|char_star:8,char_end:31"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:76,line_end:76|char_star:8,char_end:31"->"raise ParentException(),type='raise_statement'\nline_star:76,line_end:76|char_star:8,char_end:31";
"raise,type='raise'\nline_star:76,line_end:76|char_star:8,char_end:13"[shape="box",fillcolor="white",style=filled];
"raise ParentException(),type='raise_statement'\nline_star:76,line_end:76|char_star:8,char_end:31"->"raise,type='raise'\nline_star:76,line_end:76|char_star:8,char_end:13";
"ParentException(),type='call'\nline_star:76,line_end:76|char_star:14,char_end:31"[shape="box",fillcolor="white",style=filled];
"raise ParentException(),type='raise_statement'\nline_star:76,line_end:76|char_star:8,char_end:31"->"ParentException(),type='call'\nline_star:76,line_end:76|char_star:14,char_end:31";
"ParentException,type='identifier'\nline_star:76,line_end:76|char_star:14,char_end:29"[shape="point",fillcolor="#121013",style=filled];
"ParentException(),type='call'\nline_star:76,line_end:76|char_star:14,char_end:31"->"ParentException,type='identifier'\nline_star:76,line_end:76|char_star:14,char_end:29";
"@app.route('/child-unregistered')\n    def unregistered_test():\n        raise ChildExceptionUnregistered(),type='decorated_definition'\nline_star:78,line_end:80|char_star:4,char_end:42"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:55,line_end:90|char_star:4,char_end:65"->"@app.route('/child-unregistered')\n    def unregistered_test():\n        raise ChildExceptionUnregistered(),type='decorated_definition'\nline_star:78,line_end:80|char_star:4,char_end:42";
"@app.route('/child-unregistered'),type='decorator'\nline_star:78,line_end:78|char_star:4,char_end:37"[shape="box",fillcolor="white",style=filled];
"@app.route('/child-unregistered')\n    def unregistered_test():\n        raise ChildExceptionUnregistered(),type='decorated_definition'\nline_star:78,line_end:80|char_star:4,char_end:42"->"@app.route('/child-unregistered'),type='decorator'\nline_star:78,line_end:78|char_star:4,char_end:37";
"def unregistered_test():\n        raise ChildExceptionUnregistered(),type='function_definition'\nline_star:79,line_end:80|char_star:4,char_end:42"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.route('/child-unregistered')\n    def unregistered_test():\n        raise ChildExceptionUnregistered(),type='decorated_definition'\nline_star:78,line_end:80|char_star:4,char_end:42"->"def unregistered_test():\n        raise ChildExceptionUnregistered(),type='function_definition'\nline_star:79,line_end:80|char_star:4,char_end:42";
"unregistered_test,type='identifier'\nline_star:79,line_end:79|char_star:8,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"def unregistered_test():\n        raise ChildExceptionUnregistered(),type='function_definition'\nline_star:79,line_end:80|char_star:4,char_end:42"->"unregistered_test,type='identifier'\nline_star:79,line_end:79|char_star:8,char_end:25";
"type='INFORMATION BLOCK'\nline_star:80,line_end:80|char_star:8,char_end:42"[shape="point",fillcolor="#121013",style=filled];
"def unregistered_test():\n        raise ChildExceptionUnregistered(),type='function_definition'\nline_star:79,line_end:80|char_star:4,char_end:42"->"type='INFORMATION BLOCK'\nline_star:80,line_end:80|char_star:8,char_end:42";
"raise ChildExceptionUnregistered(),type='raise_statement'\nline_star:80,line_end:80|char_star:8,char_end:42"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:80,line_end:80|char_star:8,char_end:42"->"raise ChildExceptionUnregistered(),type='raise_statement'\nline_star:80,line_end:80|char_star:8,char_end:42";
"raise,type='raise'\nline_star:80,line_end:80|char_star:8,char_end:13"[shape="box",fillcolor="white",style=filled];
"raise ChildExceptionUnregistered(),type='raise_statement'\nline_star:80,line_end:80|char_star:8,char_end:42"->"raise,type='raise'\nline_star:80,line_end:80|char_star:8,char_end:13";
"ChildExceptionUnregistered(),type='call'\nline_star:80,line_end:80|char_star:14,char_end:42"[shape="box",fillcolor="white",style=filled];
"raise ChildExceptionUnregistered(),type='raise_statement'\nline_star:80,line_end:80|char_star:8,char_end:42"->"ChildExceptionUnregistered(),type='call'\nline_star:80,line_end:80|char_star:14,char_end:42";
"ChildExceptionUnregistered,type='identifier'\nline_star:80,line_end:80|char_star:14,char_end:40"[shape="point",fillcolor="#121013",style=filled];
"ChildExceptionUnregistered(),type='call'\nline_star:80,line_end:80|char_star:14,char_end:42"->"ChildExceptionUnregistered,type='identifier'\nline_star:80,line_end:80|char_star:14,char_end:40";
"@app.route('/child-registered')\n    def registered_test():\n        raise ChildExceptionRegistered(),type='decorated_definition'\nline_star:82,line_end:84|char_star:4,char_end:40"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:55,line_end:90|char_star:4,char_end:65"->"@app.route('/child-registered')\n    def registered_test():\n        raise ChildExceptionRegistered(),type='decorated_definition'\nline_star:82,line_end:84|char_star:4,char_end:40";
"@app.route('/child-registered'),type='decorator'\nline_star:82,line_end:82|char_star:4,char_end:35"[shape="box",fillcolor="white",style=filled];
"@app.route('/child-registered')\n    def registered_test():\n        raise ChildExceptionRegistered(),type='decorated_definition'\nline_star:82,line_end:84|char_star:4,char_end:40"->"@app.route('/child-registered'),type='decorator'\nline_star:82,line_end:82|char_star:4,char_end:35";
"def registered_test():\n        raise ChildExceptionRegistered(),type='function_definition'\nline_star:83,line_end:84|char_star:4,char_end:40"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.route('/child-registered')\n    def registered_test():\n        raise ChildExceptionRegistered(),type='decorated_definition'\nline_star:82,line_end:84|char_star:4,char_end:40"->"def registered_test():\n        raise ChildExceptionRegistered(),type='function_definition'\nline_star:83,line_end:84|char_star:4,char_end:40";
"registered_test,type='identifier'\nline_star:83,line_end:83|char_star:8,char_end:23"[shape="point",fillcolor="#121013",style=filled];
"def registered_test():\n        raise ChildExceptionRegistered(),type='function_definition'\nline_star:83,line_end:84|char_star:4,char_end:40"->"registered_test,type='identifier'\nline_star:83,line_end:83|char_star:8,char_end:23";
"type='INFORMATION BLOCK'\nline_star:84,line_end:84|char_star:8,char_end:40"[shape="point",fillcolor="#121013",style=filled];
"def registered_test():\n        raise ChildExceptionRegistered(),type='function_definition'\nline_star:83,line_end:84|char_star:4,char_end:40"->"type='INFORMATION BLOCK'\nline_star:84,line_end:84|char_star:8,char_end:40";
"raise ChildExceptionRegistered(),type='raise_statement'\nline_star:84,line_end:84|char_star:8,char_end:40"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:84,line_end:84|char_star:8,char_end:40"->"raise ChildExceptionRegistered(),type='raise_statement'\nline_star:84,line_end:84|char_star:8,char_end:40";
"raise,type='raise'\nline_star:84,line_end:84|char_star:8,char_end:13"[shape="box",fillcolor="white",style=filled];
"raise ChildExceptionRegistered(),type='raise_statement'\nline_star:84,line_end:84|char_star:8,char_end:40"->"raise,type='raise'\nline_star:84,line_end:84|char_star:8,char_end:13";
"ChildExceptionRegistered(),type='call'\nline_star:84,line_end:84|char_star:14,char_end:40"[shape="box",fillcolor="white",style=filled];
"raise ChildExceptionRegistered(),type='raise_statement'\nline_star:84,line_end:84|char_star:8,char_end:40"->"ChildExceptionRegistered(),type='call'\nline_star:84,line_end:84|char_star:14,char_end:40";
"ChildExceptionRegistered,type='identifier'\nline_star:84,line_end:84|char_star:14,char_end:38"[shape="point",fillcolor="#121013",style=filled];
"ChildExceptionRegistered(),type='call'\nline_star:84,line_end:84|char_star:14,char_end:40"->"ChildExceptionRegistered,type='identifier'\nline_star:84,line_end:84|char_star:14,char_end:38";
"assert c.get('/parent').data == b'parent',type='assert_statement'\nline_star:88,line_end:88|char_star:4,char_end:45"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:55,line_end:90|char_star:4,char_end:65"->"assert c.get('/parent').data == b'parent',type='assert_statement'\nline_star:88,line_end:88|char_star:4,char_end:45";
"c.get('/parent').data == b'parent',type='comparison_operator'\nline_star:88,line_end:88|char_star:11,char_end:45"[shape="box",fillcolor="white",style=filled];
"assert c.get('/parent').data == b'parent',type='assert_statement'\nline_star:88,line_end:88|char_star:4,char_end:45"->"c.get('/parent').data == b'parent',type='comparison_operator'\nline_star:88,line_end:88|char_star:11,char_end:45";
"c.get('/parent').data,type='attribute'\nline_star:88,line_end:88|char_star:11,char_end:32"[shape="box",fillcolor="white",style=filled];
"c.get('/parent').data == b'parent',type='comparison_operator'\nline_star:88,line_end:88|char_star:11,char_end:45"->"c.get('/parent').data,type='attribute'\nline_star:88,line_end:88|char_star:11,char_end:32";
"c.get('/parent'),type='call'\nline_star:88,line_end:88|char_star:11,char_end:27"[shape="box",fillcolor="white",style=filled];
"c.get('/parent').data,type='attribute'\nline_star:88,line_end:88|char_star:11,char_end:32"->"c.get('/parent'),type='call'\nline_star:88,line_end:88|char_star:11,char_end:27";
"c.get,type='attribute'\nline_star:88,line_end:88|char_star:11,char_end:16"[shape="box",fillcolor="white",style=filled];
"c.get('/parent'),type='call'\nline_star:88,line_end:88|char_star:11,char_end:27"->"c.get,type='attribute'\nline_star:88,line_end:88|char_star:11,char_end:16";
"c,type='identifier'\nline_star:88,line_end:88|char_star:11,char_end:12"[shape="point",fillcolor="#121013",style=filled];
"c.get,type='attribute'\nline_star:88,line_end:88|char_star:11,char_end:16"->"c,type='identifier'\nline_star:88,line_end:88|char_star:11,char_end:12";
"get,type='identifier'\nline_star:88,line_end:88|char_star:13,char_end:16"[shape="point",fillcolor="#121013",style=filled];
"c.get,type='attribute'\nline_star:88,line_end:88|char_star:11,char_end:16"->"get,type='identifier'\nline_star:88,line_end:88|char_star:13,char_end:16";
"('/parent'),type='argument_list'\nline_star:88,line_end:88|char_star:16,char_end:27"[shape="box",fillcolor="white",style=filled];
"c.get('/parent'),type='call'\nline_star:88,line_end:88|char_star:11,char_end:27"->"('/parent'),type='argument_list'\nline_star:88,line_end:88|char_star:16,char_end:27";
"data,type='identifier'\nline_star:88,line_end:88|char_star:28,char_end:32"[shape="point",fillcolor="#121013",style=filled];
"c.get('/parent').data,type='attribute'\nline_star:88,line_end:88|char_star:11,char_end:32"->"data,type='identifier'\nline_star:88,line_end:88|char_star:28,char_end:32";
"assert c.get('/child-unregistered').data == b'parent',type='assert_statement'\nline_star:89,line_end:89|char_star:4,char_end:57"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:55,line_end:90|char_star:4,char_end:65"->"assert c.get('/child-unregistered').data == b'parent',type='assert_statement'\nline_star:89,line_end:89|char_star:4,char_end:57";
"c.get('/child-unregistered').data == b'parent',type='comparison_operator'\nline_star:89,line_end:89|char_star:11,char_end:57"[shape="box",fillcolor="white",style=filled];
"assert c.get('/child-unregistered').data == b'parent',type='assert_statement'\nline_star:89,line_end:89|char_star:4,char_end:57"->"c.get('/child-unregistered').data == b'parent',type='comparison_operator'\nline_star:89,line_end:89|char_star:11,char_end:57";
"c.get('/child-unregistered').data,type='attribute'\nline_star:89,line_end:89|char_star:11,char_end:44"[shape="box",fillcolor="white",style=filled];
"c.get('/child-unregistered').data == b'parent',type='comparison_operator'\nline_star:89,line_end:89|char_star:11,char_end:57"->"c.get('/child-unregistered').data,type='attribute'\nline_star:89,line_end:89|char_star:11,char_end:44";
"c.get('/child-unregistered'),type='call'\nline_star:89,line_end:89|char_star:11,char_end:39"[shape="box",fillcolor="white",style=filled];
"c.get('/child-unregistered').data,type='attribute'\nline_star:89,line_end:89|char_star:11,char_end:44"->"c.get('/child-unregistered'),type='call'\nline_star:89,line_end:89|char_star:11,char_end:39";
"c.get,type='attribute'\nline_star:89,line_end:89|char_star:11,char_end:16"[shape="box",fillcolor="white",style=filled];
"c.get('/child-unregistered'),type='call'\nline_star:89,line_end:89|char_star:11,char_end:39"->"c.get,type='attribute'\nline_star:89,line_end:89|char_star:11,char_end:16";
"c,type='identifier'\nline_star:89,line_end:89|char_star:11,char_end:12"[shape="point",fillcolor="#121013",style=filled];
"c.get,type='attribute'\nline_star:89,line_end:89|char_star:11,char_end:16"->"c,type='identifier'\nline_star:89,line_end:89|char_star:11,char_end:12";
"get,type='identifier'\nline_star:89,line_end:89|char_star:13,char_end:16"[shape="point",fillcolor="#121013",style=filled];
"c.get,type='attribute'\nline_star:89,line_end:89|char_star:11,char_end:16"->"get,type='identifier'\nline_star:89,line_end:89|char_star:13,char_end:16";
"('/child-unregistered'),type='argument_list'\nline_star:89,line_end:89|char_star:16,char_end:39"[shape="box",fillcolor="white",style=filled];
"c.get('/child-unregistered'),type='call'\nline_star:89,line_end:89|char_star:11,char_end:39"->"('/child-unregistered'),type='argument_list'\nline_star:89,line_end:89|char_star:16,char_end:39";
"data,type='identifier'\nline_star:89,line_end:89|char_star:40,char_end:44"[shape="point",fillcolor="#121013",style=filled];
"c.get('/child-unregistered').data,type='attribute'\nline_star:89,line_end:89|char_star:11,char_end:44"->"data,type='identifier'\nline_star:89,line_end:89|char_star:40,char_end:44";
"assert c.get('/child-registered').data == b'child-registered',type='assert_statement'\nline_star:90,line_end:90|char_star:4,char_end:65"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:55,line_end:90|char_star:4,char_end:65"->"assert c.get('/child-registered').data == b'child-registered',type='assert_statement'\nline_star:90,line_end:90|char_star:4,char_end:65";
"c.get('/child-registered').data == b'child-registered',type='comparison_operator'\nline_star:90,line_end:90|char_star:11,char_end:65"[shape="box",fillcolor="white",style=filled];
"assert c.get('/child-registered').data == b'child-registered',type='assert_statement'\nline_star:90,line_end:90|char_star:4,char_end:65"->"c.get('/child-registered').data == b'child-registered',type='comparison_operator'\nline_star:90,line_end:90|char_star:11,char_end:65";
"c.get('/child-registered').data,type='attribute'\nline_star:90,line_end:90|char_star:11,char_end:42"[shape="box",fillcolor="white",style=filled];
"c.get('/child-registered').data == b'child-registered',type='comparison_operator'\nline_star:90,line_end:90|char_star:11,char_end:65"->"c.get('/child-registered').data,type='attribute'\nline_star:90,line_end:90|char_star:11,char_end:42";
"c.get('/child-registered'),type='call'\nline_star:90,line_end:90|char_star:11,char_end:37"[shape="box",fillcolor="white",style=filled];
"c.get('/child-registered').data,type='attribute'\nline_star:90,line_end:90|char_star:11,char_end:42"->"c.get('/child-registered'),type='call'\nline_star:90,line_end:90|char_star:11,char_end:37";
"c.get,type='attribute'\nline_star:90,line_end:90|char_star:11,char_end:16"[shape="box",fillcolor="white",style=filled];
"c.get('/child-registered'),type='call'\nline_star:90,line_end:90|char_star:11,char_end:37"->"c.get,type='attribute'\nline_star:90,line_end:90|char_star:11,char_end:16";
"c,type='identifier'\nline_star:90,line_end:90|char_star:11,char_end:12"[shape="point",fillcolor="#121013",style=filled];
"c.get,type='attribute'\nline_star:90,line_end:90|char_star:11,char_end:16"->"c,type='identifier'\nline_star:90,line_end:90|char_star:11,char_end:12";
"get,type='identifier'\nline_star:90,line_end:90|char_star:13,char_end:16"[shape="point",fillcolor="#121013",style=filled];
"c.get,type='attribute'\nline_star:90,line_end:90|char_star:11,char_end:16"->"get,type='identifier'\nline_star:90,line_end:90|char_star:13,char_end:16";
"('/child-registered'),type='argument_list'\nline_star:90,line_end:90|char_star:16,char_end:37"[shape="box",fillcolor="white",style=filled];
"c.get('/child-registered'),type='call'\nline_star:90,line_end:90|char_star:11,char_end:37"->"('/child-registered'),type='argument_list'\nline_star:90,line_end:90|char_star:16,char_end:37";
"data,type='identifier'\nline_star:90,line_end:90|char_star:38,char_end:42"[shape="point",fillcolor="#121013",style=filled];
"c.get('/child-registered').data,type='attribute'\nline_star:90,line_end:90|char_star:11,char_end:42"->"data,type='identifier'\nline_star:90,line_end:90|char_star:38,char_end:42";
"def test_error_handler_http_subclass(app):\n    class ForbiddenSubclassRegistered(Forbidden):\n        pass\n\n    class ForbiddenSubclassUnregistered(Forbidden):\n        pass\n\n    @app.errorhandler(403)\n    def code_exception_handler(e):\n        assert isinstance(e, Forbidden)\n        return 'forbidden'\n\n    @app.errorhandler(ForbiddenSubclassRegistered)\n    def subclass_exception_handler(e):\n        assert isinstance(e, ForbiddenSubclassRegistered)\n        return 'forbidden-registered'\n\n    @app.route('/forbidden')\n    def forbidden_test():\n        raise Forbidden()\n\n    @app.route('/forbidden-registered')\n    def registered_test():\n        raise ForbiddenSubclassRegistered()\n\n    @app.route('/forbidden-unregistered')\n    def unregistered_test():\n        raise ForbiddenSubclassUnregistered()\n\n    c = app.test_client()\n\n    assert c.get('/forbidden').data == b'forbidden'\n    assert c.get('/forbidden-unregistered').data == b'forbidden'\n    assert c.get('/forbidden-registered').data == b'forbidden-registered',type='function_definition'\nline_star:93,line_end:126|char_star:0,char_end:73"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_error_handler_http_subclass(app):\n    class ForbiddenSubclassRegistered(Forbidden):\n        pass\n\n    class ForbiddenSubclassUnregistered(Forbidden):\n        pass\n\n    @app.errorhandler(403)\n    def code_exception_handler(e):\n        assert isinstance(e, Forbidden)\n        return 'forbidden'\n\n    @app.errorhandler(ForbiddenSubclassRegistered)\n    def subclass_exception_handler(e):\n        assert isinstance(e, ForbiddenSubclassRegistered)\n        return 'forbidden-registered'\n\n    @app.route('/forbidden')\n    def forbidden_test():\n        raise Forbidden()\n\n    @app.route('/forbidden-registered')\n    def registered_test():\n        raise ForbiddenSubclassRegistered()\n\n    @app.route('/forbidden-unregistered')\n    def unregistered_test():\n        raise ForbiddenSubclassUnregistered()\n\n    c = app.test_client()\n\n    assert c.get('/forbidden').data == b'forbidden'\n    assert c.get('/forbidden-unregistered').data == b'forbidden'\n    assert c.get('/forbidden-registered').data == b'forbidden-registered',type='function_definition'\nline_star:93,line_end:126|char_star:0,char_end:73";
"test_error_handler_http_subclass,type='identifier'\nline_star:93,line_end:93|char_star:4,char_end:36"[shape="point",fillcolor="#121013",style=filled];
"def test_error_handler_http_subclass(app):\n    class ForbiddenSubclassRegistered(Forbidden):\n        pass\n\n    class ForbiddenSubclassUnregistered(Forbidden):\n        pass\n\n    @app.errorhandler(403)\n    def code_exception_handler(e):\n        assert isinstance(e, Forbidden)\n        return 'forbidden'\n\n    @app.errorhandler(ForbiddenSubclassRegistered)\n    def subclass_exception_handler(e):\n        assert isinstance(e, ForbiddenSubclassRegistered)\n        return 'forbidden-registered'\n\n    @app.route('/forbidden')\n    def forbidden_test():\n        raise Forbidden()\n\n    @app.route('/forbidden-registered')\n    def registered_test():\n        raise ForbiddenSubclassRegistered()\n\n    @app.route('/forbidden-unregistered')\n    def unregistered_test():\n        raise ForbiddenSubclassUnregistered()\n\n    c = app.test_client()\n\n    assert c.get('/forbidden').data == b'forbidden'\n    assert c.get('/forbidden-unregistered').data == b'forbidden'\n    assert c.get('/forbidden-registered').data == b'forbidden-registered',type='function_definition'\nline_star:93,line_end:126|char_star:0,char_end:73"->"test_error_handler_http_subclass,type='identifier'\nline_star:93,line_end:93|char_star:4,char_end:36";
"(app),type='parameters'\nline_star:93,line_end:93|char_star:36,char_end:41"[shape="box",fillcolor="white",style=filled];
"def test_error_handler_http_subclass(app):\n    class ForbiddenSubclassRegistered(Forbidden):\n        pass\n\n    class ForbiddenSubclassUnregistered(Forbidden):\n        pass\n\n    @app.errorhandler(403)\n    def code_exception_handler(e):\n        assert isinstance(e, Forbidden)\n        return 'forbidden'\n\n    @app.errorhandler(ForbiddenSubclassRegistered)\n    def subclass_exception_handler(e):\n        assert isinstance(e, ForbiddenSubclassRegistered)\n        return 'forbidden-registered'\n\n    @app.route('/forbidden')\n    def forbidden_test():\n        raise Forbidden()\n\n    @app.route('/forbidden-registered')\n    def registered_test():\n        raise ForbiddenSubclassRegistered()\n\n    @app.route('/forbidden-unregistered')\n    def unregistered_test():\n        raise ForbiddenSubclassUnregistered()\n\n    c = app.test_client()\n\n    assert c.get('/forbidden').data == b'forbidden'\n    assert c.get('/forbidden-unregistered').data == b'forbidden'\n    assert c.get('/forbidden-registered').data == b'forbidden-registered',type='function_definition'\nline_star:93,line_end:126|char_star:0,char_end:73"->"(app),type='parameters'\nline_star:93,line_end:93|char_star:36,char_end:41";
"app,type='identifier'\nline_star:93,line_end:93|char_star:37,char_end:40"[shape="point",fillcolor="#121013",style=filled];
"(app),type='parameters'\nline_star:93,line_end:93|char_star:36,char_end:41"->"app,type='identifier'\nline_star:93,line_end:93|char_star:37,char_end:40";
"type='INFORMATION BLOCK'\nline_star:94,line_end:126|char_star:4,char_end:73"[shape="point",fillcolor="#121013",style=filled];
"def test_error_handler_http_subclass(app):\n    class ForbiddenSubclassRegistered(Forbidden):\n        pass\n\n    class ForbiddenSubclassUnregistered(Forbidden):\n        pass\n\n    @app.errorhandler(403)\n    def code_exception_handler(e):\n        assert isinstance(e, Forbidden)\n        return 'forbidden'\n\n    @app.errorhandler(ForbiddenSubclassRegistered)\n    def subclass_exception_handler(e):\n        assert isinstance(e, ForbiddenSubclassRegistered)\n        return 'forbidden-registered'\n\n    @app.route('/forbidden')\n    def forbidden_test():\n        raise Forbidden()\n\n    @app.route('/forbidden-registered')\n    def registered_test():\n        raise ForbiddenSubclassRegistered()\n\n    @app.route('/forbidden-unregistered')\n    def unregistered_test():\n        raise ForbiddenSubclassUnregistered()\n\n    c = app.test_client()\n\n    assert c.get('/forbidden').data == b'forbidden'\n    assert c.get('/forbidden-unregistered').data == b'forbidden'\n    assert c.get('/forbidden-registered').data == b'forbidden-registered',type='function_definition'\nline_star:93,line_end:126|char_star:0,char_end:73"->"type='INFORMATION BLOCK'\nline_star:94,line_end:126|char_star:4,char_end:73";
"class ForbiddenSubclassRegistered(Forbidden):\n        pass,type='class_definition'\nline_star:94,line_end:95|char_star:4,char_end:12"[shape="box",fillcolor="#ffdf91",style=filled];
"type='INFORMATION BLOCK'\nline_star:94,line_end:126|char_star:4,char_end:73"->"class ForbiddenSubclassRegistered(Forbidden):\n        pass,type='class_definition'\nline_star:94,line_end:95|char_star:4,char_end:12";
"ForbiddenSubclassRegistered,type='identifier'\nline_star:94,line_end:94|char_star:10,char_end:37"[shape="point",fillcolor="#121013",style=filled];
"class ForbiddenSubclassRegistered(Forbidden):\n        pass,type='class_definition'\nline_star:94,line_end:95|char_star:4,char_end:12"->"ForbiddenSubclassRegistered,type='identifier'\nline_star:94,line_end:94|char_star:10,char_end:37";
"(Forbidden),type='argument_list'\nline_star:94,line_end:94|char_star:37,char_end:48"[shape="box",fillcolor="white",style=filled];
"class ForbiddenSubclassRegistered(Forbidden):\n        pass,type='class_definition'\nline_star:94,line_end:95|char_star:4,char_end:12"->"(Forbidden),type='argument_list'\nline_star:94,line_end:94|char_star:37,char_end:48";
"Forbidden,type='identifier'\nline_star:94,line_end:94|char_star:38,char_end:47"[shape="point",fillcolor="#121013",style=filled];
"(Forbidden),type='argument_list'\nline_star:94,line_end:94|char_star:37,char_end:48"->"Forbidden,type='identifier'\nline_star:94,line_end:94|char_star:38,char_end:47";
"type='INFORMATION BLOCK'\nline_star:95,line_end:95|char_star:8,char_end:12"[shape="point",fillcolor="#121013",style=filled];
"class ForbiddenSubclassRegistered(Forbidden):\n        pass,type='class_definition'\nline_star:94,line_end:95|char_star:4,char_end:12"->"type='INFORMATION BLOCK'\nline_star:95,line_end:95|char_star:8,char_end:12";
"pass,type='pass_statement'\nline_star:95,line_end:95|char_star:8,char_end:12"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:95,line_end:95|char_star:8,char_end:12"->"pass,type='pass_statement'\nline_star:95,line_end:95|char_star:8,char_end:12";
"pass,type='pass'\nline_star:95,line_end:95|char_star:8,char_end:12"[shape="box",fillcolor="white",style=filled];
"pass,type='pass_statement'\nline_star:95,line_end:95|char_star:8,char_end:12"->"pass,type='pass'\nline_star:95,line_end:95|char_star:8,char_end:12";
"class ForbiddenSubclassUnregistered(Forbidden):\n        pass,type='class_definition'\nline_star:97,line_end:98|char_star:4,char_end:12"[shape="box",fillcolor="#ffdf91",style=filled];
"type='INFORMATION BLOCK'\nline_star:94,line_end:126|char_star:4,char_end:73"->"class ForbiddenSubclassUnregistered(Forbidden):\n        pass,type='class_definition'\nline_star:97,line_end:98|char_star:4,char_end:12";
"ForbiddenSubclassUnregistered,type='identifier'\nline_star:97,line_end:97|char_star:10,char_end:39"[shape="point",fillcolor="#121013",style=filled];
"class ForbiddenSubclassUnregistered(Forbidden):\n        pass,type='class_definition'\nline_star:97,line_end:98|char_star:4,char_end:12"->"ForbiddenSubclassUnregistered,type='identifier'\nline_star:97,line_end:97|char_star:10,char_end:39";
"(Forbidden),type='argument_list'\nline_star:97,line_end:97|char_star:39,char_end:50"[shape="box",fillcolor="white",style=filled];
"class ForbiddenSubclassUnregistered(Forbidden):\n        pass,type='class_definition'\nline_star:97,line_end:98|char_star:4,char_end:12"->"(Forbidden),type='argument_list'\nline_star:97,line_end:97|char_star:39,char_end:50";
"Forbidden,type='identifier'\nline_star:97,line_end:97|char_star:40,char_end:49"[shape="point",fillcolor="#121013",style=filled];
"(Forbidden),type='argument_list'\nline_star:97,line_end:97|char_star:39,char_end:50"->"Forbidden,type='identifier'\nline_star:97,line_end:97|char_star:40,char_end:49";
"type='INFORMATION BLOCK'\nline_star:98,line_end:98|char_star:8,char_end:12"[shape="point",fillcolor="#121013",style=filled];
"class ForbiddenSubclassUnregistered(Forbidden):\n        pass,type='class_definition'\nline_star:97,line_end:98|char_star:4,char_end:12"->"type='INFORMATION BLOCK'\nline_star:98,line_end:98|char_star:8,char_end:12";
"pass,type='pass_statement'\nline_star:98,line_end:98|char_star:8,char_end:12"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:98,line_end:98|char_star:8,char_end:12"->"pass,type='pass_statement'\nline_star:98,line_end:98|char_star:8,char_end:12";
"pass,type='pass'\nline_star:98,line_end:98|char_star:8,char_end:12"[shape="box",fillcolor="white",style=filled];
"pass,type='pass_statement'\nline_star:98,line_end:98|char_star:8,char_end:12"->"pass,type='pass'\nline_star:98,line_end:98|char_star:8,char_end:12";
"@app.errorhandler(403)\n    def code_exception_handler(e):\n        assert isinstance(e, Forbidden)\n        return 'forbidden',type='decorated_definition'\nline_star:100,line_end:103|char_star:4,char_end:26"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:94,line_end:126|char_star:4,char_end:73"->"@app.errorhandler(403)\n    def code_exception_handler(e):\n        assert isinstance(e, Forbidden)\n        return 'forbidden',type='decorated_definition'\nline_star:100,line_end:103|char_star:4,char_end:26";
"@app.errorhandler(403),type='decorator'\nline_star:100,line_end:100|char_star:4,char_end:26"[shape="box",fillcolor="white",style=filled];
"@app.errorhandler(403)\n    def code_exception_handler(e):\n        assert isinstance(e, Forbidden)\n        return 'forbidden',type='decorated_definition'\nline_star:100,line_end:103|char_star:4,char_end:26"->"@app.errorhandler(403),type='decorator'\nline_star:100,line_end:100|char_star:4,char_end:26";
"def code_exception_handler(e):\n        assert isinstance(e, Forbidden)\n        return 'forbidden',type='function_definition'\nline_star:101,line_end:103|char_star:4,char_end:26"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.errorhandler(403)\n    def code_exception_handler(e):\n        assert isinstance(e, Forbidden)\n        return 'forbidden',type='decorated_definition'\nline_star:100,line_end:103|char_star:4,char_end:26"->"def code_exception_handler(e):\n        assert isinstance(e, Forbidden)\n        return 'forbidden',type='function_definition'\nline_star:101,line_end:103|char_star:4,char_end:26";
"code_exception_handler,type='identifier'\nline_star:101,line_end:101|char_star:8,char_end:30"[shape="point",fillcolor="#121013",style=filled];
"def code_exception_handler(e):\n        assert isinstance(e, Forbidden)\n        return 'forbidden',type='function_definition'\nline_star:101,line_end:103|char_star:4,char_end:26"->"code_exception_handler,type='identifier'\nline_star:101,line_end:101|char_star:8,char_end:30";
"(e),type='parameters'\nline_star:101,line_end:101|char_star:30,char_end:33"[shape="box",fillcolor="white",style=filled];
"def code_exception_handler(e):\n        assert isinstance(e, Forbidden)\n        return 'forbidden',type='function_definition'\nline_star:101,line_end:103|char_star:4,char_end:26"->"(e),type='parameters'\nline_star:101,line_end:101|char_star:30,char_end:33";
"e,type='identifier'\nline_star:101,line_end:101|char_star:31,char_end:32"[shape="point",fillcolor="#121013",style=filled];
"(e),type='parameters'\nline_star:101,line_end:101|char_star:30,char_end:33"->"e,type='identifier'\nline_star:101,line_end:101|char_star:31,char_end:32";
"type='INFORMATION BLOCK'\nline_star:102,line_end:103|char_star:8,char_end:26"[shape="point",fillcolor="#121013",style=filled];
"def code_exception_handler(e):\n        assert isinstance(e, Forbidden)\n        return 'forbidden',type='function_definition'\nline_star:101,line_end:103|char_star:4,char_end:26"->"type='INFORMATION BLOCK'\nline_star:102,line_end:103|char_star:8,char_end:26";
"assert isinstance(e, Forbidden),type='assert_statement'\nline_star:102,line_end:102|char_star:8,char_end:39"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:102,line_end:103|char_star:8,char_end:26"->"assert isinstance(e, Forbidden),type='assert_statement'\nline_star:102,line_end:102|char_star:8,char_end:39";
"isinstance(e, Forbidden),type='call'\nline_star:102,line_end:102|char_star:15,char_end:39"[shape="box",fillcolor="white",style=filled];
"assert isinstance(e, Forbidden),type='assert_statement'\nline_star:102,line_end:102|char_star:8,char_end:39"->"isinstance(e, Forbidden),type='call'\nline_star:102,line_end:102|char_star:15,char_end:39";
"isinstance,type='identifier'\nline_star:102,line_end:102|char_star:15,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"isinstance(e, Forbidden),type='call'\nline_star:102,line_end:102|char_star:15,char_end:39"->"isinstance,type='identifier'\nline_star:102,line_end:102|char_star:15,char_end:25";
"(e, Forbidden),type='argument_list'\nline_star:102,line_end:102|char_star:25,char_end:39"[shape="box",fillcolor="white",style=filled];
"isinstance(e, Forbidden),type='call'\nline_star:102,line_end:102|char_star:15,char_end:39"->"(e, Forbidden),type='argument_list'\nline_star:102,line_end:102|char_star:25,char_end:39";
"e,type='identifier'\nline_star:102,line_end:102|char_star:26,char_end:27"[shape="point",fillcolor="#121013",style=filled];
"(e, Forbidden),type='argument_list'\nline_star:102,line_end:102|char_star:25,char_end:39"->"e,type='identifier'\nline_star:102,line_end:102|char_star:26,char_end:27";
"Forbidden,type='identifier'\nline_star:102,line_end:102|char_star:29,char_end:38"[shape="point",fillcolor="#121013",style=filled];
"(e, Forbidden),type='argument_list'\nline_star:102,line_end:102|char_star:25,char_end:39"->"Forbidden,type='identifier'\nline_star:102,line_end:102|char_star:29,char_end:38";
"return 'forbidden',type='return_statement'\nline_star:103,line_end:103|char_star:8,char_end:26"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:102,line_end:103|char_star:8,char_end:26"->"return 'forbidden',type='return_statement'\nline_star:103,line_end:103|char_star:8,char_end:26";
"@app.errorhandler(ForbiddenSubclassRegistered)\n    def subclass_exception_handler(e):\n        assert isinstance(e, ForbiddenSubclassRegistered)\n        return 'forbidden-registered',type='decorated_definition'\nline_star:105,line_end:108|char_star:4,char_end:37"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:94,line_end:126|char_star:4,char_end:73"->"@app.errorhandler(ForbiddenSubclassRegistered)\n    def subclass_exception_handler(e):\n        assert isinstance(e, ForbiddenSubclassRegistered)\n        return 'forbidden-registered',type='decorated_definition'\nline_star:105,line_end:108|char_star:4,char_end:37";
"@app.errorhandler(ForbiddenSubclassRegistered),type='decorator'\nline_star:105,line_end:105|char_star:4,char_end:50"[shape="box",fillcolor="white",style=filled];
"@app.errorhandler(ForbiddenSubclassRegistered)\n    def subclass_exception_handler(e):\n        assert isinstance(e, ForbiddenSubclassRegistered)\n        return 'forbidden-registered',type='decorated_definition'\nline_star:105,line_end:108|char_star:4,char_end:37"->"@app.errorhandler(ForbiddenSubclassRegistered),type='decorator'\nline_star:105,line_end:105|char_star:4,char_end:50";
"def subclass_exception_handler(e):\n        assert isinstance(e, ForbiddenSubclassRegistered)\n        return 'forbidden-registered',type='function_definition'\nline_star:106,line_end:108|char_star:4,char_end:37"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.errorhandler(ForbiddenSubclassRegistered)\n    def subclass_exception_handler(e):\n        assert isinstance(e, ForbiddenSubclassRegistered)\n        return 'forbidden-registered',type='decorated_definition'\nline_star:105,line_end:108|char_star:4,char_end:37"->"def subclass_exception_handler(e):\n        assert isinstance(e, ForbiddenSubclassRegistered)\n        return 'forbidden-registered',type='function_definition'\nline_star:106,line_end:108|char_star:4,char_end:37";
"subclass_exception_handler,type='identifier'\nline_star:106,line_end:106|char_star:8,char_end:34"[shape="point",fillcolor="#121013",style=filled];
"def subclass_exception_handler(e):\n        assert isinstance(e, ForbiddenSubclassRegistered)\n        return 'forbidden-registered',type='function_definition'\nline_star:106,line_end:108|char_star:4,char_end:37"->"subclass_exception_handler,type='identifier'\nline_star:106,line_end:106|char_star:8,char_end:34";
"(e),type='parameters'\nline_star:106,line_end:106|char_star:34,char_end:37"[shape="box",fillcolor="white",style=filled];
"def subclass_exception_handler(e):\n        assert isinstance(e, ForbiddenSubclassRegistered)\n        return 'forbidden-registered',type='function_definition'\nline_star:106,line_end:108|char_star:4,char_end:37"->"(e),type='parameters'\nline_star:106,line_end:106|char_star:34,char_end:37";
"e,type='identifier'\nline_star:106,line_end:106|char_star:35,char_end:36"[shape="point",fillcolor="#121013",style=filled];
"(e),type='parameters'\nline_star:106,line_end:106|char_star:34,char_end:37"->"e,type='identifier'\nline_star:106,line_end:106|char_star:35,char_end:36";
"type='INFORMATION BLOCK'\nline_star:107,line_end:108|char_star:8,char_end:37"[shape="point",fillcolor="#121013",style=filled];
"def subclass_exception_handler(e):\n        assert isinstance(e, ForbiddenSubclassRegistered)\n        return 'forbidden-registered',type='function_definition'\nline_star:106,line_end:108|char_star:4,char_end:37"->"type='INFORMATION BLOCK'\nline_star:107,line_end:108|char_star:8,char_end:37";
"assert isinstance(e, ForbiddenSubclassRegistered),type='assert_statement'\nline_star:107,line_end:107|char_star:8,char_end:57"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:107,line_end:108|char_star:8,char_end:37"->"assert isinstance(e, ForbiddenSubclassRegistered),type='assert_statement'\nline_star:107,line_end:107|char_star:8,char_end:57";
"isinstance(e, ForbiddenSubclassRegistered),type='call'\nline_star:107,line_end:107|char_star:15,char_end:57"[shape="box",fillcolor="white",style=filled];
"assert isinstance(e, ForbiddenSubclassRegistered),type='assert_statement'\nline_star:107,line_end:107|char_star:8,char_end:57"->"isinstance(e, ForbiddenSubclassRegistered),type='call'\nline_star:107,line_end:107|char_star:15,char_end:57";
"isinstance,type='identifier'\nline_star:107,line_end:107|char_star:15,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"isinstance(e, ForbiddenSubclassRegistered),type='call'\nline_star:107,line_end:107|char_star:15,char_end:57"->"isinstance,type='identifier'\nline_star:107,line_end:107|char_star:15,char_end:25";
"(e, ForbiddenSubclassRegistered),type='argument_list'\nline_star:107,line_end:107|char_star:25,char_end:57"[shape="box",fillcolor="white",style=filled];
"isinstance(e, ForbiddenSubclassRegistered),type='call'\nline_star:107,line_end:107|char_star:15,char_end:57"->"(e, ForbiddenSubclassRegistered),type='argument_list'\nline_star:107,line_end:107|char_star:25,char_end:57";
"e,type='identifier'\nline_star:107,line_end:107|char_star:26,char_end:27"[shape="point",fillcolor="#121013",style=filled];
"(e, ForbiddenSubclassRegistered),type='argument_list'\nline_star:107,line_end:107|char_star:25,char_end:57"->"e,type='identifier'\nline_star:107,line_end:107|char_star:26,char_end:27";
"ForbiddenSubclassRegistered,type='identifier'\nline_star:107,line_end:107|char_star:29,char_end:56"[shape="point",fillcolor="#121013",style=filled];
"(e, ForbiddenSubclassRegistered),type='argument_list'\nline_star:107,line_end:107|char_star:25,char_end:57"->"ForbiddenSubclassRegistered,type='identifier'\nline_star:107,line_end:107|char_star:29,char_end:56";
"return 'forbidden-registered',type='return_statement'\nline_star:108,line_end:108|char_star:8,char_end:37"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:107,line_end:108|char_star:8,char_end:37"->"return 'forbidden-registered',type='return_statement'\nline_star:108,line_end:108|char_star:8,char_end:37";
"@app.route('/forbidden')\n    def forbidden_test():\n        raise Forbidden(),type='decorated_definition'\nline_star:110,line_end:112|char_star:4,char_end:25"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:94,line_end:126|char_star:4,char_end:73"->"@app.route('/forbidden')\n    def forbidden_test():\n        raise Forbidden(),type='decorated_definition'\nline_star:110,line_end:112|char_star:4,char_end:25";
"@app.route('/forbidden'),type='decorator'\nline_star:110,line_end:110|char_star:4,char_end:28"[shape="box",fillcolor="white",style=filled];
"@app.route('/forbidden')\n    def forbidden_test():\n        raise Forbidden(),type='decorated_definition'\nline_star:110,line_end:112|char_star:4,char_end:25"->"@app.route('/forbidden'),type='decorator'\nline_star:110,line_end:110|char_star:4,char_end:28";
"def forbidden_test():\n        raise Forbidden(),type='function_definition'\nline_star:111,line_end:112|char_star:4,char_end:25"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.route('/forbidden')\n    def forbidden_test():\n        raise Forbidden(),type='decorated_definition'\nline_star:110,line_end:112|char_star:4,char_end:25"->"def forbidden_test():\n        raise Forbidden(),type='function_definition'\nline_star:111,line_end:112|char_star:4,char_end:25";
"forbidden_test,type='identifier'\nline_star:111,line_end:111|char_star:8,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"def forbidden_test():\n        raise Forbidden(),type='function_definition'\nline_star:111,line_end:112|char_star:4,char_end:25"->"forbidden_test,type='identifier'\nline_star:111,line_end:111|char_star:8,char_end:22";
"type='INFORMATION BLOCK'\nline_star:112,line_end:112|char_star:8,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"def forbidden_test():\n        raise Forbidden(),type='function_definition'\nline_star:111,line_end:112|char_star:4,char_end:25"->"type='INFORMATION BLOCK'\nline_star:112,line_end:112|char_star:8,char_end:25";
"raise Forbidden(),type='raise_statement'\nline_star:112,line_end:112|char_star:8,char_end:25"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:112,line_end:112|char_star:8,char_end:25"->"raise Forbidden(),type='raise_statement'\nline_star:112,line_end:112|char_star:8,char_end:25";
"raise,type='raise'\nline_star:112,line_end:112|char_star:8,char_end:13"[shape="box",fillcolor="white",style=filled];
"raise Forbidden(),type='raise_statement'\nline_star:112,line_end:112|char_star:8,char_end:25"->"raise,type='raise'\nline_star:112,line_end:112|char_star:8,char_end:13";
"Forbidden(),type='call'\nline_star:112,line_end:112|char_star:14,char_end:25"[shape="box",fillcolor="white",style=filled];
"raise Forbidden(),type='raise_statement'\nline_star:112,line_end:112|char_star:8,char_end:25"->"Forbidden(),type='call'\nline_star:112,line_end:112|char_star:14,char_end:25";
"Forbidden,type='identifier'\nline_star:112,line_end:112|char_star:14,char_end:23"[shape="point",fillcolor="#121013",style=filled];
"Forbidden(),type='call'\nline_star:112,line_end:112|char_star:14,char_end:25"->"Forbidden,type='identifier'\nline_star:112,line_end:112|char_star:14,char_end:23";
"@app.route('/forbidden-registered')\n    def registered_test():\n        raise ForbiddenSubclassRegistered(),type='decorated_definition'\nline_star:114,line_end:116|char_star:4,char_end:43"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:94,line_end:126|char_star:4,char_end:73"->"@app.route('/forbidden-registered')\n    def registered_test():\n        raise ForbiddenSubclassRegistered(),type='decorated_definition'\nline_star:114,line_end:116|char_star:4,char_end:43";
"@app.route('/forbidden-registered'),type='decorator'\nline_star:114,line_end:114|char_star:4,char_end:39"[shape="box",fillcolor="white",style=filled];
"@app.route('/forbidden-registered')\n    def registered_test():\n        raise ForbiddenSubclassRegistered(),type='decorated_definition'\nline_star:114,line_end:116|char_star:4,char_end:43"->"@app.route('/forbidden-registered'),type='decorator'\nline_star:114,line_end:114|char_star:4,char_end:39";
"def registered_test():\n        raise ForbiddenSubclassRegistered(),type='function_definition'\nline_star:115,line_end:116|char_star:4,char_end:43"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.route('/forbidden-registered')\n    def registered_test():\n        raise ForbiddenSubclassRegistered(),type='decorated_definition'\nline_star:114,line_end:116|char_star:4,char_end:43"->"def registered_test():\n        raise ForbiddenSubclassRegistered(),type='function_definition'\nline_star:115,line_end:116|char_star:4,char_end:43";
"registered_test,type='identifier'\nline_star:115,line_end:115|char_star:8,char_end:23"[shape="point",fillcolor="#121013",style=filled];
"def registered_test():\n        raise ForbiddenSubclassRegistered(),type='function_definition'\nline_star:115,line_end:116|char_star:4,char_end:43"->"registered_test,type='identifier'\nline_star:115,line_end:115|char_star:8,char_end:23";
"type='INFORMATION BLOCK'\nline_star:116,line_end:116|char_star:8,char_end:43"[shape="point",fillcolor="#121013",style=filled];
"def registered_test():\n        raise ForbiddenSubclassRegistered(),type='function_definition'\nline_star:115,line_end:116|char_star:4,char_end:43"->"type='INFORMATION BLOCK'\nline_star:116,line_end:116|char_star:8,char_end:43";
"raise ForbiddenSubclassRegistered(),type='raise_statement'\nline_star:116,line_end:116|char_star:8,char_end:43"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:116,line_end:116|char_star:8,char_end:43"->"raise ForbiddenSubclassRegistered(),type='raise_statement'\nline_star:116,line_end:116|char_star:8,char_end:43";
"raise,type='raise'\nline_star:116,line_end:116|char_star:8,char_end:13"[shape="box",fillcolor="white",style=filled];
"raise ForbiddenSubclassRegistered(),type='raise_statement'\nline_star:116,line_end:116|char_star:8,char_end:43"->"raise,type='raise'\nline_star:116,line_end:116|char_star:8,char_end:13";
"ForbiddenSubclassRegistered(),type='call'\nline_star:116,line_end:116|char_star:14,char_end:43"[shape="box",fillcolor="white",style=filled];
"raise ForbiddenSubclassRegistered(),type='raise_statement'\nline_star:116,line_end:116|char_star:8,char_end:43"->"ForbiddenSubclassRegistered(),type='call'\nline_star:116,line_end:116|char_star:14,char_end:43";
"ForbiddenSubclassRegistered,type='identifier'\nline_star:116,line_end:116|char_star:14,char_end:41"[shape="point",fillcolor="#121013",style=filled];
"ForbiddenSubclassRegistered(),type='call'\nline_star:116,line_end:116|char_star:14,char_end:43"->"ForbiddenSubclassRegistered,type='identifier'\nline_star:116,line_end:116|char_star:14,char_end:41";
"@app.route('/forbidden-unregistered')\n    def unregistered_test():\n        raise ForbiddenSubclassUnregistered(),type='decorated_definition'\nline_star:118,line_end:120|char_star:4,char_end:45"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:94,line_end:126|char_star:4,char_end:73"->"@app.route('/forbidden-unregistered')\n    def unregistered_test():\n        raise ForbiddenSubclassUnregistered(),type='decorated_definition'\nline_star:118,line_end:120|char_star:4,char_end:45";
"@app.route('/forbidden-unregistered'),type='decorator'\nline_star:118,line_end:118|char_star:4,char_end:41"[shape="box",fillcolor="white",style=filled];
"@app.route('/forbidden-unregistered')\n    def unregistered_test():\n        raise ForbiddenSubclassUnregistered(),type='decorated_definition'\nline_star:118,line_end:120|char_star:4,char_end:45"->"@app.route('/forbidden-unregistered'),type='decorator'\nline_star:118,line_end:118|char_star:4,char_end:41";
"def unregistered_test():\n        raise ForbiddenSubclassUnregistered(),type='function_definition'\nline_star:119,line_end:120|char_star:4,char_end:45"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.route('/forbidden-unregistered')\n    def unregistered_test():\n        raise ForbiddenSubclassUnregistered(),type='decorated_definition'\nline_star:118,line_end:120|char_star:4,char_end:45"->"def unregistered_test():\n        raise ForbiddenSubclassUnregistered(),type='function_definition'\nline_star:119,line_end:120|char_star:4,char_end:45";
"unregistered_test,type='identifier'\nline_star:119,line_end:119|char_star:8,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"def unregistered_test():\n        raise ForbiddenSubclassUnregistered(),type='function_definition'\nline_star:119,line_end:120|char_star:4,char_end:45"->"unregistered_test,type='identifier'\nline_star:119,line_end:119|char_star:8,char_end:25";
"type='INFORMATION BLOCK'\nline_star:120,line_end:120|char_star:8,char_end:45"[shape="point",fillcolor="#121013",style=filled];
"def unregistered_test():\n        raise ForbiddenSubclassUnregistered(),type='function_definition'\nline_star:119,line_end:120|char_star:4,char_end:45"->"type='INFORMATION BLOCK'\nline_star:120,line_end:120|char_star:8,char_end:45";
"raise ForbiddenSubclassUnregistered(),type='raise_statement'\nline_star:120,line_end:120|char_star:8,char_end:45"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:120,line_end:120|char_star:8,char_end:45"->"raise ForbiddenSubclassUnregistered(),type='raise_statement'\nline_star:120,line_end:120|char_star:8,char_end:45";
"raise,type='raise'\nline_star:120,line_end:120|char_star:8,char_end:13"[shape="box",fillcolor="white",style=filled];
"raise ForbiddenSubclassUnregistered(),type='raise_statement'\nline_star:120,line_end:120|char_star:8,char_end:45"->"raise,type='raise'\nline_star:120,line_end:120|char_star:8,char_end:13";
"ForbiddenSubclassUnregistered(),type='call'\nline_star:120,line_end:120|char_star:14,char_end:45"[shape="box",fillcolor="white",style=filled];
"raise ForbiddenSubclassUnregistered(),type='raise_statement'\nline_star:120,line_end:120|char_star:8,char_end:45"->"ForbiddenSubclassUnregistered(),type='call'\nline_star:120,line_end:120|char_star:14,char_end:45";
"ForbiddenSubclassUnregistered,type='identifier'\nline_star:120,line_end:120|char_star:14,char_end:43"[shape="point",fillcolor="#121013",style=filled];
"ForbiddenSubclassUnregistered(),type='call'\nline_star:120,line_end:120|char_star:14,char_end:45"->"ForbiddenSubclassUnregistered,type='identifier'\nline_star:120,line_end:120|char_star:14,char_end:43";
"assert c.get('/forbidden').data == b'forbidden',type='assert_statement'\nline_star:124,line_end:124|char_star:4,char_end:51"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:94,line_end:126|char_star:4,char_end:73"->"assert c.get('/forbidden').data == b'forbidden',type='assert_statement'\nline_star:124,line_end:124|char_star:4,char_end:51";
"c.get('/forbidden').data == b'forbidden',type='comparison_operator'\nline_star:124,line_end:124|char_star:11,char_end:51"[shape="box",fillcolor="white",style=filled];
"assert c.get('/forbidden').data == b'forbidden',type='assert_statement'\nline_star:124,line_end:124|char_star:4,char_end:51"->"c.get('/forbidden').data == b'forbidden',type='comparison_operator'\nline_star:124,line_end:124|char_star:11,char_end:51";
"c.get('/forbidden').data,type='attribute'\nline_star:124,line_end:124|char_star:11,char_end:35"[shape="box",fillcolor="white",style=filled];
"c.get('/forbidden').data == b'forbidden',type='comparison_operator'\nline_star:124,line_end:124|char_star:11,char_end:51"->"c.get('/forbidden').data,type='attribute'\nline_star:124,line_end:124|char_star:11,char_end:35";
"c.get('/forbidden'),type='call'\nline_star:124,line_end:124|char_star:11,char_end:30"[shape="box",fillcolor="white",style=filled];
"c.get('/forbidden').data,type='attribute'\nline_star:124,line_end:124|char_star:11,char_end:35"->"c.get('/forbidden'),type='call'\nline_star:124,line_end:124|char_star:11,char_end:30";
"c.get,type='attribute'\nline_star:124,line_end:124|char_star:11,char_end:16"[shape="box",fillcolor="white",style=filled];
"c.get('/forbidden'),type='call'\nline_star:124,line_end:124|char_star:11,char_end:30"->"c.get,type='attribute'\nline_star:124,line_end:124|char_star:11,char_end:16";
"c,type='identifier'\nline_star:124,line_end:124|char_star:11,char_end:12"[shape="point",fillcolor="#121013",style=filled];
"c.get,type='attribute'\nline_star:124,line_end:124|char_star:11,char_end:16"->"c,type='identifier'\nline_star:124,line_end:124|char_star:11,char_end:12";
"get,type='identifier'\nline_star:124,line_end:124|char_star:13,char_end:16"[shape="point",fillcolor="#121013",style=filled];
"c.get,type='attribute'\nline_star:124,line_end:124|char_star:11,char_end:16"->"get,type='identifier'\nline_star:124,line_end:124|char_star:13,char_end:16";
"('/forbidden'),type='argument_list'\nline_star:124,line_end:124|char_star:16,char_end:30"[shape="box",fillcolor="white",style=filled];
"c.get('/forbidden'),type='call'\nline_star:124,line_end:124|char_star:11,char_end:30"->"('/forbidden'),type='argument_list'\nline_star:124,line_end:124|char_star:16,char_end:30";
"data,type='identifier'\nline_star:124,line_end:124|char_star:31,char_end:35"[shape="point",fillcolor="#121013",style=filled];
"c.get('/forbidden').data,type='attribute'\nline_star:124,line_end:124|char_star:11,char_end:35"->"data,type='identifier'\nline_star:124,line_end:124|char_star:31,char_end:35";
"assert c.get('/forbidden-unregistered').data == b'forbidden',type='assert_statement'\nline_star:125,line_end:125|char_star:4,char_end:64"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:94,line_end:126|char_star:4,char_end:73"->"assert c.get('/forbidden-unregistered').data == b'forbidden',type='assert_statement'\nline_star:125,line_end:125|char_star:4,char_end:64";
"c.get('/forbidden-unregistered').data == b'forbidden',type='comparison_operator'\nline_star:125,line_end:125|char_star:11,char_end:64"[shape="box",fillcolor="white",style=filled];
"assert c.get('/forbidden-unregistered').data == b'forbidden',type='assert_statement'\nline_star:125,line_end:125|char_star:4,char_end:64"->"c.get('/forbidden-unregistered').data == b'forbidden',type='comparison_operator'\nline_star:125,line_end:125|char_star:11,char_end:64";
"c.get('/forbidden-unregistered').data,type='attribute'\nline_star:125,line_end:125|char_star:11,char_end:48"[shape="box",fillcolor="white",style=filled];
"c.get('/forbidden-unregistered').data == b'forbidden',type='comparison_operator'\nline_star:125,line_end:125|char_star:11,char_end:64"->"c.get('/forbidden-unregistered').data,type='attribute'\nline_star:125,line_end:125|char_star:11,char_end:48";
"c.get('/forbidden-unregistered'),type='call'\nline_star:125,line_end:125|char_star:11,char_end:43"[shape="box",fillcolor="white",style=filled];
"c.get('/forbidden-unregistered').data,type='attribute'\nline_star:125,line_end:125|char_star:11,char_end:48"->"c.get('/forbidden-unregistered'),type='call'\nline_star:125,line_end:125|char_star:11,char_end:43";
"c.get,type='attribute'\nline_star:125,line_end:125|char_star:11,char_end:16"[shape="box",fillcolor="white",style=filled];
"c.get('/forbidden-unregistered'),type='call'\nline_star:125,line_end:125|char_star:11,char_end:43"->"c.get,type='attribute'\nline_star:125,line_end:125|char_star:11,char_end:16";
"c,type='identifier'\nline_star:125,line_end:125|char_star:11,char_end:12"[shape="point",fillcolor="#121013",style=filled];
"c.get,type='attribute'\nline_star:125,line_end:125|char_star:11,char_end:16"->"c,type='identifier'\nline_star:125,line_end:125|char_star:11,char_end:12";
"get,type='identifier'\nline_star:125,line_end:125|char_star:13,char_end:16"[shape="point",fillcolor="#121013",style=filled];
"c.get,type='attribute'\nline_star:125,line_end:125|char_star:11,char_end:16"->"get,type='identifier'\nline_star:125,line_end:125|char_star:13,char_end:16";
"('/forbidden-unregistered'),type='argument_list'\nline_star:125,line_end:125|char_star:16,char_end:43"[shape="box",fillcolor="white",style=filled];
"c.get('/forbidden-unregistered'),type='call'\nline_star:125,line_end:125|char_star:11,char_end:43"->"('/forbidden-unregistered'),type='argument_list'\nline_star:125,line_end:125|char_star:16,char_end:43";
"data,type='identifier'\nline_star:125,line_end:125|char_star:44,char_end:48"[shape="point",fillcolor="#121013",style=filled];
"c.get('/forbidden-unregistered').data,type='attribute'\nline_star:125,line_end:125|char_star:11,char_end:48"->"data,type='identifier'\nline_star:125,line_end:125|char_star:44,char_end:48";
"assert c.get('/forbidden-registered').data == b'forbidden-registered',type='assert_statement'\nline_star:126,line_end:126|char_star:4,char_end:73"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:94,line_end:126|char_star:4,char_end:73"->"assert c.get('/forbidden-registered').data == b'forbidden-registered',type='assert_statement'\nline_star:126,line_end:126|char_star:4,char_end:73";
"c.get('/forbidden-registered').data == b'forbidden-registered',type='comparison_operator'\nline_star:126,line_end:126|char_star:11,char_end:73"[shape="box",fillcolor="white",style=filled];
"assert c.get('/forbidden-registered').data == b'forbidden-registered',type='assert_statement'\nline_star:126,line_end:126|char_star:4,char_end:73"->"c.get('/forbidden-registered').data == b'forbidden-registered',type='comparison_operator'\nline_star:126,line_end:126|char_star:11,char_end:73";
"c.get('/forbidden-registered').data,type='attribute'\nline_star:126,line_end:126|char_star:11,char_end:46"[shape="box",fillcolor="white",style=filled];
"c.get('/forbidden-registered').data == b'forbidden-registered',type='comparison_operator'\nline_star:126,line_end:126|char_star:11,char_end:73"->"c.get('/forbidden-registered').data,type='attribute'\nline_star:126,line_end:126|char_star:11,char_end:46";
"c.get('/forbidden-registered'),type='call'\nline_star:126,line_end:126|char_star:11,char_end:41"[shape="box",fillcolor="white",style=filled];
"c.get('/forbidden-registered').data,type='attribute'\nline_star:126,line_end:126|char_star:11,char_end:46"->"c.get('/forbidden-registered'),type='call'\nline_star:126,line_end:126|char_star:11,char_end:41";
"c.get,type='attribute'\nline_star:126,line_end:126|char_star:11,char_end:16"[shape="box",fillcolor="white",style=filled];
"c.get('/forbidden-registered'),type='call'\nline_star:126,line_end:126|char_star:11,char_end:41"->"c.get,type='attribute'\nline_star:126,line_end:126|char_star:11,char_end:16";
"c,type='identifier'\nline_star:126,line_end:126|char_star:11,char_end:12"[shape="point",fillcolor="#121013",style=filled];
"c.get,type='attribute'\nline_star:126,line_end:126|char_star:11,char_end:16"->"c,type='identifier'\nline_star:126,line_end:126|char_star:11,char_end:12";
"get,type='identifier'\nline_star:126,line_end:126|char_star:13,char_end:16"[shape="point",fillcolor="#121013",style=filled];
"c.get,type='attribute'\nline_star:126,line_end:126|char_star:11,char_end:16"->"get,type='identifier'\nline_star:126,line_end:126|char_star:13,char_end:16";
"('/forbidden-registered'),type='argument_list'\nline_star:126,line_end:126|char_star:16,char_end:41"[shape="box",fillcolor="white",style=filled];
"c.get('/forbidden-registered'),type='call'\nline_star:126,line_end:126|char_star:11,char_end:41"->"('/forbidden-registered'),type='argument_list'\nline_star:126,line_end:126|char_star:16,char_end:41";
"data,type='identifier'\nline_star:126,line_end:126|char_star:42,char_end:46"[shape="point",fillcolor="#121013",style=filled];
"c.get('/forbidden-registered').data,type='attribute'\nline_star:126,line_end:126|char_star:11,char_end:46"->"data,type='identifier'\nline_star:126,line_end:126|char_star:42,char_end:46";
"def test_error_handler_blueprint(app):\n    bp = flask.Blueprint('bp', __name__)\n\n    @bp.errorhandler(500)\n    def bp_exception_handler(e):\n        return 'bp-error'\n\n    @bp.route('/error')\n    def bp_test():\n        raise InternalServerError()\n\n    @app.errorhandler(500)\n    def app_exception_handler(e):\n        return 'app-error'\n\n    @app.route('/error')\n    def app_test():\n        raise InternalServerError()\n\n    app.register_blueprint(bp, url_prefix='/bp')\n\n    c = app.test_client()\n\n    assert c.get('/error').data == b'app-error'\n    assert c.get('/bp/error').data == b'bp-error',type='function_definition'\nline_star:129,line_end:153|char_star:0,char_end:49"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_error_handler_blueprint(app):\n    bp = flask.Blueprint('bp', __name__)\n\n    @bp.errorhandler(500)\n    def bp_exception_handler(e):\n        return 'bp-error'\n\n    @bp.route('/error')\n    def bp_test():\n        raise InternalServerError()\n\n    @app.errorhandler(500)\n    def app_exception_handler(e):\n        return 'app-error'\n\n    @app.route('/error')\n    def app_test():\n        raise InternalServerError()\n\n    app.register_blueprint(bp, url_prefix='/bp')\n\n    c = app.test_client()\n\n    assert c.get('/error').data == b'app-error'\n    assert c.get('/bp/error').data == b'bp-error',type='function_definition'\nline_star:129,line_end:153|char_star:0,char_end:49";
"test_error_handler_blueprint,type='identifier'\nline_star:129,line_end:129|char_star:4,char_end:32"[shape="point",fillcolor="#121013",style=filled];
"def test_error_handler_blueprint(app):\n    bp = flask.Blueprint('bp', __name__)\n\n    @bp.errorhandler(500)\n    def bp_exception_handler(e):\n        return 'bp-error'\n\n    @bp.route('/error')\n    def bp_test():\n        raise InternalServerError()\n\n    @app.errorhandler(500)\n    def app_exception_handler(e):\n        return 'app-error'\n\n    @app.route('/error')\n    def app_test():\n        raise InternalServerError()\n\n    app.register_blueprint(bp, url_prefix='/bp')\n\n    c = app.test_client()\n\n    assert c.get('/error').data == b'app-error'\n    assert c.get('/bp/error').data == b'bp-error',type='function_definition'\nline_star:129,line_end:153|char_star:0,char_end:49"->"test_error_handler_blueprint,type='identifier'\nline_star:129,line_end:129|char_star:4,char_end:32";
"(app),type='parameters'\nline_star:129,line_end:129|char_star:32,char_end:37"[shape="box",fillcolor="white",style=filled];
"def test_error_handler_blueprint(app):\n    bp = flask.Blueprint('bp', __name__)\n\n    @bp.errorhandler(500)\n    def bp_exception_handler(e):\n        return 'bp-error'\n\n    @bp.route('/error')\n    def bp_test():\n        raise InternalServerError()\n\n    @app.errorhandler(500)\n    def app_exception_handler(e):\n        return 'app-error'\n\n    @app.route('/error')\n    def app_test():\n        raise InternalServerError()\n\n    app.register_blueprint(bp, url_prefix='/bp')\n\n    c = app.test_client()\n\n    assert c.get('/error').data == b'app-error'\n    assert c.get('/bp/error').data == b'bp-error',type='function_definition'\nline_star:129,line_end:153|char_star:0,char_end:49"->"(app),type='parameters'\nline_star:129,line_end:129|char_star:32,char_end:37";
"app,type='identifier'\nline_star:129,line_end:129|char_star:33,char_end:36"[shape="point",fillcolor="#121013",style=filled];
"(app),type='parameters'\nline_star:129,line_end:129|char_star:32,char_end:37"->"app,type='identifier'\nline_star:129,line_end:129|char_star:33,char_end:36";
"type='INFORMATION BLOCK'\nline_star:130,line_end:153|char_star:4,char_end:49"[shape="point",fillcolor="#121013",style=filled];
"def test_error_handler_blueprint(app):\n    bp = flask.Blueprint('bp', __name__)\n\n    @bp.errorhandler(500)\n    def bp_exception_handler(e):\n        return 'bp-error'\n\n    @bp.route('/error')\n    def bp_test():\n        raise InternalServerError()\n\n    @app.errorhandler(500)\n    def app_exception_handler(e):\n        return 'app-error'\n\n    @app.route('/error')\n    def app_test():\n        raise InternalServerError()\n\n    app.register_blueprint(bp, url_prefix='/bp')\n\n    c = app.test_client()\n\n    assert c.get('/error').data == b'app-error'\n    assert c.get('/bp/error').data == b'bp-error',type='function_definition'\nline_star:129,line_end:153|char_star:0,char_end:49"->"type='INFORMATION BLOCK'\nline_star:130,line_end:153|char_star:4,char_end:49";
"@bp.errorhandler(500)\n    def bp_exception_handler(e):\n        return 'bp-error',type='decorated_definition'\nline_star:132,line_end:134|char_star:4,char_end:25"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:130,line_end:153|char_star:4,char_end:49"->"@bp.errorhandler(500)\n    def bp_exception_handler(e):\n        return 'bp-error',type='decorated_definition'\nline_star:132,line_end:134|char_star:4,char_end:25";
"@bp.errorhandler(500),type='decorator'\nline_star:132,line_end:132|char_star:4,char_end:25"[shape="box",fillcolor="white",style=filled];
"@bp.errorhandler(500)\n    def bp_exception_handler(e):\n        return 'bp-error',type='decorated_definition'\nline_star:132,line_end:134|char_star:4,char_end:25"->"@bp.errorhandler(500),type='decorator'\nline_star:132,line_end:132|char_star:4,char_end:25";
"def bp_exception_handler(e):\n        return 'bp-error',type='function_definition'\nline_star:133,line_end:134|char_star:4,char_end:25"[shape="box",fillcolor="#cee6b4",style=filled];
"@bp.errorhandler(500)\n    def bp_exception_handler(e):\n        return 'bp-error',type='decorated_definition'\nline_star:132,line_end:134|char_star:4,char_end:25"->"def bp_exception_handler(e):\n        return 'bp-error',type='function_definition'\nline_star:133,line_end:134|char_star:4,char_end:25";
"bp_exception_handler,type='identifier'\nline_star:133,line_end:133|char_star:8,char_end:28"[shape="point",fillcolor="#121013",style=filled];
"def bp_exception_handler(e):\n        return 'bp-error',type='function_definition'\nline_star:133,line_end:134|char_star:4,char_end:25"->"bp_exception_handler,type='identifier'\nline_star:133,line_end:133|char_star:8,char_end:28";
"(e),type='parameters'\nline_star:133,line_end:133|char_star:28,char_end:31"[shape="box",fillcolor="white",style=filled];
"def bp_exception_handler(e):\n        return 'bp-error',type='function_definition'\nline_star:133,line_end:134|char_star:4,char_end:25"->"(e),type='parameters'\nline_star:133,line_end:133|char_star:28,char_end:31";
"e,type='identifier'\nline_star:133,line_end:133|char_star:29,char_end:30"[shape="point",fillcolor="#121013",style=filled];
"(e),type='parameters'\nline_star:133,line_end:133|char_star:28,char_end:31"->"e,type='identifier'\nline_star:133,line_end:133|char_star:29,char_end:30";
"type='INFORMATION BLOCK'\nline_star:134,line_end:134|char_star:8,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"def bp_exception_handler(e):\n        return 'bp-error',type='function_definition'\nline_star:133,line_end:134|char_star:4,char_end:25"->"type='INFORMATION BLOCK'\nline_star:134,line_end:134|char_star:8,char_end:25";
"return 'bp-error',type='return_statement'\nline_star:134,line_end:134|char_star:8,char_end:25"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:134,line_end:134|char_star:8,char_end:25"->"return 'bp-error',type='return_statement'\nline_star:134,line_end:134|char_star:8,char_end:25";
"@bp.route('/error')\n    def bp_test():\n        raise InternalServerError(),type='decorated_definition'\nline_star:136,line_end:138|char_star:4,char_end:35"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:130,line_end:153|char_star:4,char_end:49"->"@bp.route('/error')\n    def bp_test():\n        raise InternalServerError(),type='decorated_definition'\nline_star:136,line_end:138|char_star:4,char_end:35";
"@bp.route('/error'),type='decorator'\nline_star:136,line_end:136|char_star:4,char_end:23"[shape="box",fillcolor="white",style=filled];
"@bp.route('/error')\n    def bp_test():\n        raise InternalServerError(),type='decorated_definition'\nline_star:136,line_end:138|char_star:4,char_end:35"->"@bp.route('/error'),type='decorator'\nline_star:136,line_end:136|char_star:4,char_end:23";
"def bp_test():\n        raise InternalServerError(),type='function_definition'\nline_star:137,line_end:138|char_star:4,char_end:35"[shape="box",fillcolor="#cee6b4",style=filled];
"@bp.route('/error')\n    def bp_test():\n        raise InternalServerError(),type='decorated_definition'\nline_star:136,line_end:138|char_star:4,char_end:35"->"def bp_test():\n        raise InternalServerError(),type='function_definition'\nline_star:137,line_end:138|char_star:4,char_end:35";
"bp_test,type='identifier'\nline_star:137,line_end:137|char_star:8,char_end:15"[shape="point",fillcolor="#121013",style=filled];
"def bp_test():\n        raise InternalServerError(),type='function_definition'\nline_star:137,line_end:138|char_star:4,char_end:35"->"bp_test,type='identifier'\nline_star:137,line_end:137|char_star:8,char_end:15";
"type='INFORMATION BLOCK'\nline_star:138,line_end:138|char_star:8,char_end:35"[shape="point",fillcolor="#121013",style=filled];
"def bp_test():\n        raise InternalServerError(),type='function_definition'\nline_star:137,line_end:138|char_star:4,char_end:35"->"type='INFORMATION BLOCK'\nline_star:138,line_end:138|char_star:8,char_end:35";
"raise InternalServerError(),type='raise_statement'\nline_star:138,line_end:138|char_star:8,char_end:35"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:138,line_end:138|char_star:8,char_end:35"->"raise InternalServerError(),type='raise_statement'\nline_star:138,line_end:138|char_star:8,char_end:35";
"raise,type='raise'\nline_star:138,line_end:138|char_star:8,char_end:13"[shape="box",fillcolor="white",style=filled];
"raise InternalServerError(),type='raise_statement'\nline_star:138,line_end:138|char_star:8,char_end:35"->"raise,type='raise'\nline_star:138,line_end:138|char_star:8,char_end:13";
"InternalServerError(),type='call'\nline_star:138,line_end:138|char_star:14,char_end:35"[shape="box",fillcolor="white",style=filled];
"raise InternalServerError(),type='raise_statement'\nline_star:138,line_end:138|char_star:8,char_end:35"->"InternalServerError(),type='call'\nline_star:138,line_end:138|char_star:14,char_end:35";
"InternalServerError,type='identifier'\nline_star:138,line_end:138|char_star:14,char_end:33"[shape="point",fillcolor="#121013",style=filled];
"InternalServerError(),type='call'\nline_star:138,line_end:138|char_star:14,char_end:35"->"InternalServerError,type='identifier'\nline_star:138,line_end:138|char_star:14,char_end:33";
"@app.errorhandler(500)\n    def app_exception_handler(e):\n        return 'app-error',type='decorated_definition'\nline_star:140,line_end:142|char_star:4,char_end:26"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:130,line_end:153|char_star:4,char_end:49"->"@app.errorhandler(500)\n    def app_exception_handler(e):\n        return 'app-error',type='decorated_definition'\nline_star:140,line_end:142|char_star:4,char_end:26";
"@app.errorhandler(500),type='decorator'\nline_star:140,line_end:140|char_star:4,char_end:26"[shape="box",fillcolor="white",style=filled];
"@app.errorhandler(500)\n    def app_exception_handler(e):\n        return 'app-error',type='decorated_definition'\nline_star:140,line_end:142|char_star:4,char_end:26"->"@app.errorhandler(500),type='decorator'\nline_star:140,line_end:140|char_star:4,char_end:26";
"def app_exception_handler(e):\n        return 'app-error',type='function_definition'\nline_star:141,line_end:142|char_star:4,char_end:26"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.errorhandler(500)\n    def app_exception_handler(e):\n        return 'app-error',type='decorated_definition'\nline_star:140,line_end:142|char_star:4,char_end:26"->"def app_exception_handler(e):\n        return 'app-error',type='function_definition'\nline_star:141,line_end:142|char_star:4,char_end:26";
"app_exception_handler,type='identifier'\nline_star:141,line_end:141|char_star:8,char_end:29"[shape="point",fillcolor="#121013",style=filled];
"def app_exception_handler(e):\n        return 'app-error',type='function_definition'\nline_star:141,line_end:142|char_star:4,char_end:26"->"app_exception_handler,type='identifier'\nline_star:141,line_end:141|char_star:8,char_end:29";
"(e),type='parameters'\nline_star:141,line_end:141|char_star:29,char_end:32"[shape="box",fillcolor="white",style=filled];
"def app_exception_handler(e):\n        return 'app-error',type='function_definition'\nline_star:141,line_end:142|char_star:4,char_end:26"->"(e),type='parameters'\nline_star:141,line_end:141|char_star:29,char_end:32";
"e,type='identifier'\nline_star:141,line_end:141|char_star:30,char_end:31"[shape="point",fillcolor="#121013",style=filled];
"(e),type='parameters'\nline_star:141,line_end:141|char_star:29,char_end:32"->"e,type='identifier'\nline_star:141,line_end:141|char_star:30,char_end:31";
"type='INFORMATION BLOCK'\nline_star:142,line_end:142|char_star:8,char_end:26"[shape="point",fillcolor="#121013",style=filled];
"def app_exception_handler(e):\n        return 'app-error',type='function_definition'\nline_star:141,line_end:142|char_star:4,char_end:26"->"type='INFORMATION BLOCK'\nline_star:142,line_end:142|char_star:8,char_end:26";
"return 'app-error',type='return_statement'\nline_star:142,line_end:142|char_star:8,char_end:26"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:142,line_end:142|char_star:8,char_end:26"->"return 'app-error',type='return_statement'\nline_star:142,line_end:142|char_star:8,char_end:26";
"@app.route('/error')\n    def app_test():\n        raise InternalServerError(),type='decorated_definition'\nline_star:144,line_end:146|char_star:4,char_end:35"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:130,line_end:153|char_star:4,char_end:49"->"@app.route('/error')\n    def app_test():\n        raise InternalServerError(),type='decorated_definition'\nline_star:144,line_end:146|char_star:4,char_end:35";
"@app.route('/error'),type='decorator'\nline_star:144,line_end:144|char_star:4,char_end:24"[shape="box",fillcolor="white",style=filled];
"@app.route('/error')\n    def app_test():\n        raise InternalServerError(),type='decorated_definition'\nline_star:144,line_end:146|char_star:4,char_end:35"->"@app.route('/error'),type='decorator'\nline_star:144,line_end:144|char_star:4,char_end:24";
"def app_test():\n        raise InternalServerError(),type='function_definition'\nline_star:145,line_end:146|char_star:4,char_end:35"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.route('/error')\n    def app_test():\n        raise InternalServerError(),type='decorated_definition'\nline_star:144,line_end:146|char_star:4,char_end:35"->"def app_test():\n        raise InternalServerError(),type='function_definition'\nline_star:145,line_end:146|char_star:4,char_end:35";
"app_test,type='identifier'\nline_star:145,line_end:145|char_star:8,char_end:16"[shape="point",fillcolor="#121013",style=filled];
"def app_test():\n        raise InternalServerError(),type='function_definition'\nline_star:145,line_end:146|char_star:4,char_end:35"->"app_test,type='identifier'\nline_star:145,line_end:145|char_star:8,char_end:16";
"type='INFORMATION BLOCK'\nline_star:146,line_end:146|char_star:8,char_end:35"[shape="point",fillcolor="#121013",style=filled];
"def app_test():\n        raise InternalServerError(),type='function_definition'\nline_star:145,line_end:146|char_star:4,char_end:35"->"type='INFORMATION BLOCK'\nline_star:146,line_end:146|char_star:8,char_end:35";
"raise InternalServerError(),type='raise_statement'\nline_star:146,line_end:146|char_star:8,char_end:35"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:146,line_end:146|char_star:8,char_end:35"->"raise InternalServerError(),type='raise_statement'\nline_star:146,line_end:146|char_star:8,char_end:35";
"raise,type='raise'\nline_star:146,line_end:146|char_star:8,char_end:13"[shape="box",fillcolor="white",style=filled];
"raise InternalServerError(),type='raise_statement'\nline_star:146,line_end:146|char_star:8,char_end:35"->"raise,type='raise'\nline_star:146,line_end:146|char_star:8,char_end:13";
"InternalServerError(),type='call'\nline_star:146,line_end:146|char_star:14,char_end:35"[shape="box",fillcolor="white",style=filled];
"raise InternalServerError(),type='raise_statement'\nline_star:146,line_end:146|char_star:8,char_end:35"->"InternalServerError(),type='call'\nline_star:146,line_end:146|char_star:14,char_end:35";
"InternalServerError,type='identifier'\nline_star:146,line_end:146|char_star:14,char_end:33"[shape="point",fillcolor="#121013",style=filled];
"InternalServerError(),type='call'\nline_star:146,line_end:146|char_star:14,char_end:35"->"InternalServerError,type='identifier'\nline_star:146,line_end:146|char_star:14,char_end:33";
"assert c.get('/error').data == b'app-error',type='assert_statement'\nline_star:152,line_end:152|char_star:4,char_end:47"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:130,line_end:153|char_star:4,char_end:49"->"assert c.get('/error').data == b'app-error',type='assert_statement'\nline_star:152,line_end:152|char_star:4,char_end:47";
"c.get('/error').data == b'app-error',type='comparison_operator'\nline_star:152,line_end:152|char_star:11,char_end:47"[shape="box",fillcolor="white",style=filled];
"assert c.get('/error').data == b'app-error',type='assert_statement'\nline_star:152,line_end:152|char_star:4,char_end:47"->"c.get('/error').data == b'app-error',type='comparison_operator'\nline_star:152,line_end:152|char_star:11,char_end:47";
"c.get('/error').data,type='attribute'\nline_star:152,line_end:152|char_star:11,char_end:31"[shape="box",fillcolor="white",style=filled];
"c.get('/error').data == b'app-error',type='comparison_operator'\nline_star:152,line_end:152|char_star:11,char_end:47"->"c.get('/error').data,type='attribute'\nline_star:152,line_end:152|char_star:11,char_end:31";
"c.get('/error'),type='call'\nline_star:152,line_end:152|char_star:11,char_end:26"[shape="box",fillcolor="white",style=filled];
"c.get('/error').data,type='attribute'\nline_star:152,line_end:152|char_star:11,char_end:31"->"c.get('/error'),type='call'\nline_star:152,line_end:152|char_star:11,char_end:26";
"c.get,type='attribute'\nline_star:152,line_end:152|char_star:11,char_end:16"[shape="box",fillcolor="white",style=filled];
"c.get('/error'),type='call'\nline_star:152,line_end:152|char_star:11,char_end:26"->"c.get,type='attribute'\nline_star:152,line_end:152|char_star:11,char_end:16";
"c,type='identifier'\nline_star:152,line_end:152|char_star:11,char_end:12"[shape="point",fillcolor="#121013",style=filled];
"c.get,type='attribute'\nline_star:152,line_end:152|char_star:11,char_end:16"->"c,type='identifier'\nline_star:152,line_end:152|char_star:11,char_end:12";
"get,type='identifier'\nline_star:152,line_end:152|char_star:13,char_end:16"[shape="point",fillcolor="#121013",style=filled];
"c.get,type='attribute'\nline_star:152,line_end:152|char_star:11,char_end:16"->"get,type='identifier'\nline_star:152,line_end:152|char_star:13,char_end:16";
"('/error'),type='argument_list'\nline_star:152,line_end:152|char_star:16,char_end:26"[shape="box",fillcolor="white",style=filled];
"c.get('/error'),type='call'\nline_star:152,line_end:152|char_star:11,char_end:26"->"('/error'),type='argument_list'\nline_star:152,line_end:152|char_star:16,char_end:26";
"data,type='identifier'\nline_star:152,line_end:152|char_star:27,char_end:31"[shape="point",fillcolor="#121013",style=filled];
"c.get('/error').data,type='attribute'\nline_star:152,line_end:152|char_star:11,char_end:31"->"data,type='identifier'\nline_star:152,line_end:152|char_star:27,char_end:31";
"assert c.get('/bp/error').data == b'bp-error',type='assert_statement'\nline_star:153,line_end:153|char_star:4,char_end:49"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:130,line_end:153|char_star:4,char_end:49"->"assert c.get('/bp/error').data == b'bp-error',type='assert_statement'\nline_star:153,line_end:153|char_star:4,char_end:49";
"c.get('/bp/error').data == b'bp-error',type='comparison_operator'\nline_star:153,line_end:153|char_star:11,char_end:49"[shape="box",fillcolor="white",style=filled];
"assert c.get('/bp/error').data == b'bp-error',type='assert_statement'\nline_star:153,line_end:153|char_star:4,char_end:49"->"c.get('/bp/error').data == b'bp-error',type='comparison_operator'\nline_star:153,line_end:153|char_star:11,char_end:49";
"c.get('/bp/error').data,type='attribute'\nline_star:153,line_end:153|char_star:11,char_end:34"[shape="box",fillcolor="white",style=filled];
"c.get('/bp/error').data == b'bp-error',type='comparison_operator'\nline_star:153,line_end:153|char_star:11,char_end:49"->"c.get('/bp/error').data,type='attribute'\nline_star:153,line_end:153|char_star:11,char_end:34";
"c.get('/bp/error'),type='call'\nline_star:153,line_end:153|char_star:11,char_end:29"[shape="box",fillcolor="white",style=filled];
"c.get('/bp/error').data,type='attribute'\nline_star:153,line_end:153|char_star:11,char_end:34"->"c.get('/bp/error'),type='call'\nline_star:153,line_end:153|char_star:11,char_end:29";
"c.get,type='attribute'\nline_star:153,line_end:153|char_star:11,char_end:16"[shape="box",fillcolor="white",style=filled];
"c.get('/bp/error'),type='call'\nline_star:153,line_end:153|char_star:11,char_end:29"->"c.get,type='attribute'\nline_star:153,line_end:153|char_star:11,char_end:16";
"c,type='identifier'\nline_star:153,line_end:153|char_star:11,char_end:12"[shape="point",fillcolor="#121013",style=filled];
"c.get,type='attribute'\nline_star:153,line_end:153|char_star:11,char_end:16"->"c,type='identifier'\nline_star:153,line_end:153|char_star:11,char_end:12";
"get,type='identifier'\nline_star:153,line_end:153|char_star:13,char_end:16"[shape="point",fillcolor="#121013",style=filled];
"c.get,type='attribute'\nline_star:153,line_end:153|char_star:11,char_end:16"->"get,type='identifier'\nline_star:153,line_end:153|char_star:13,char_end:16";
"('/bp/error'),type='argument_list'\nline_star:153,line_end:153|char_star:16,char_end:29"[shape="box",fillcolor="white",style=filled];
"c.get('/bp/error'),type='call'\nline_star:153,line_end:153|char_star:11,char_end:29"->"('/bp/error'),type='argument_list'\nline_star:153,line_end:153|char_star:16,char_end:29";
"data,type='identifier'\nline_star:153,line_end:153|char_star:30,char_end:34"[shape="point",fillcolor="#121013",style=filled];
"c.get('/bp/error').data,type='attribute'\nline_star:153,line_end:153|char_star:11,char_end:34"->"data,type='identifier'\nline_star:153,line_end:153|char_star:30,char_end:34";
"def test_default_error_handler():\n    bp = flask.Blueprint('bp', __name__)\n\n    @bp.errorhandler(HTTPException)\n    def bp_exception_handler(e):\n        assert isinstance(e, HTTPException)\n        assert isinstance(e, NotFound)\n        return 'bp-default'\n\n    @bp.errorhandler(Forbidden)\n    def bp_forbidden_handler(e):\n        assert isinstance(e, Forbidden)\n        return 'bp-forbidden'\n\n    @bp.route('/undefined')\n    def bp_registered_test():\n        raise NotFound()\n\n    @bp.route('/forbidden')\n    def bp_forbidden_test():\n        raise Forbidden()\n\n    app = flask.Flask(__name__)\n\n    @app.errorhandler(HTTPException)\n    def catchall_exception_handler(e):\n        assert isinstance(e, HTTPException)\n        assert isinstance(e, NotFound)\n        return 'default'\n\n    @app.errorhandler(Forbidden)\n    def catchall_forbidden_handler(e):\n        assert isinstance(e, Forbidden)\n        return 'forbidden'\n\n    @app.route('/forbidden')\n    def forbidden():\n        raise Forbidden()\n\n    @app.route('/slash/')\n    def slash():\n        return 'slash'\n\n    app.register_blueprint(bp, url_prefix='/bp')\n\n    c = app.test_client()\n    assert c.get('/bp/undefined').data == b'bp-default'\n    assert c.get('/bp/forbidden').data == b'bp-forbidden'\n    assert c.get('/undefined').data == b'default'\n    assert c.get('/forbidden').data == b'forbidden'\n    # Don't handle RequestRedirect raised when adding slash.\n    assert c.get('/slash', follow_redirects=True).data == b'slash',type='function_definition'\nline_star:156,line_end:207|char_star:0,char_end:66"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_default_error_handler():\n    bp = flask.Blueprint('bp', __name__)\n\n    @bp.errorhandler(HTTPException)\n    def bp_exception_handler(e):\n        assert isinstance(e, HTTPException)\n        assert isinstance(e, NotFound)\n        return 'bp-default'\n\n    @bp.errorhandler(Forbidden)\n    def bp_forbidden_handler(e):\n        assert isinstance(e, Forbidden)\n        return 'bp-forbidden'\n\n    @bp.route('/undefined')\n    def bp_registered_test():\n        raise NotFound()\n\n    @bp.route('/forbidden')\n    def bp_forbidden_test():\n        raise Forbidden()\n\n    app = flask.Flask(__name__)\n\n    @app.errorhandler(HTTPException)\n    def catchall_exception_handler(e):\n        assert isinstance(e, HTTPException)\n        assert isinstance(e, NotFound)\n        return 'default'\n\n    @app.errorhandler(Forbidden)\n    def catchall_forbidden_handler(e):\n        assert isinstance(e, Forbidden)\n        return 'forbidden'\n\n    @app.route('/forbidden')\n    def forbidden():\n        raise Forbidden()\n\n    @app.route('/slash/')\n    def slash():\n        return 'slash'\n\n    app.register_blueprint(bp, url_prefix='/bp')\n\n    c = app.test_client()\n    assert c.get('/bp/undefined').data == b'bp-default'\n    assert c.get('/bp/forbidden').data == b'bp-forbidden'\n    assert c.get('/undefined').data == b'default'\n    assert c.get('/forbidden').data == b'forbidden'\n    # Don't handle RequestRedirect raised when adding slash.\n    assert c.get('/slash', follow_redirects=True).data == b'slash',type='function_definition'\nline_star:156,line_end:207|char_star:0,char_end:66";
"test_default_error_handler,type='identifier'\nline_star:156,line_end:156|char_star:4,char_end:30"[shape="point",fillcolor="#121013",style=filled];
"def test_default_error_handler():\n    bp = flask.Blueprint('bp', __name__)\n\n    @bp.errorhandler(HTTPException)\n    def bp_exception_handler(e):\n        assert isinstance(e, HTTPException)\n        assert isinstance(e, NotFound)\n        return 'bp-default'\n\n    @bp.errorhandler(Forbidden)\n    def bp_forbidden_handler(e):\n        assert isinstance(e, Forbidden)\n        return 'bp-forbidden'\n\n    @bp.route('/undefined')\n    def bp_registered_test():\n        raise NotFound()\n\n    @bp.route('/forbidden')\n    def bp_forbidden_test():\n        raise Forbidden()\n\n    app = flask.Flask(__name__)\n\n    @app.errorhandler(HTTPException)\n    def catchall_exception_handler(e):\n        assert isinstance(e, HTTPException)\n        assert isinstance(e, NotFound)\n        return 'default'\n\n    @app.errorhandler(Forbidden)\n    def catchall_forbidden_handler(e):\n        assert isinstance(e, Forbidden)\n        return 'forbidden'\n\n    @app.route('/forbidden')\n    def forbidden():\n        raise Forbidden()\n\n    @app.route('/slash/')\n    def slash():\n        return 'slash'\n\n    app.register_blueprint(bp, url_prefix='/bp')\n\n    c = app.test_client()\n    assert c.get('/bp/undefined').data == b'bp-default'\n    assert c.get('/bp/forbidden').data == b'bp-forbidden'\n    assert c.get('/undefined').data == b'default'\n    assert c.get('/forbidden').data == b'forbidden'\n    # Don't handle RequestRedirect raised when adding slash.\n    assert c.get('/slash', follow_redirects=True).data == b'slash',type='function_definition'\nline_star:156,line_end:207|char_star:0,char_end:66"->"test_default_error_handler,type='identifier'\nline_star:156,line_end:156|char_star:4,char_end:30";
"type='INFORMATION BLOCK'\nline_star:157,line_end:207|char_star:4,char_end:66"[shape="point",fillcolor="#121013",style=filled];
"def test_default_error_handler():\n    bp = flask.Blueprint('bp', __name__)\n\n    @bp.errorhandler(HTTPException)\n    def bp_exception_handler(e):\n        assert isinstance(e, HTTPException)\n        assert isinstance(e, NotFound)\n        return 'bp-default'\n\n    @bp.errorhandler(Forbidden)\n    def bp_forbidden_handler(e):\n        assert isinstance(e, Forbidden)\n        return 'bp-forbidden'\n\n    @bp.route('/undefined')\n    def bp_registered_test():\n        raise NotFound()\n\n    @bp.route('/forbidden')\n    def bp_forbidden_test():\n        raise Forbidden()\n\n    app = flask.Flask(__name__)\n\n    @app.errorhandler(HTTPException)\n    def catchall_exception_handler(e):\n        assert isinstance(e, HTTPException)\n        assert isinstance(e, NotFound)\n        return 'default'\n\n    @app.errorhandler(Forbidden)\n    def catchall_forbidden_handler(e):\n        assert isinstance(e, Forbidden)\n        return 'forbidden'\n\n    @app.route('/forbidden')\n    def forbidden():\n        raise Forbidden()\n\n    @app.route('/slash/')\n    def slash():\n        return 'slash'\n\n    app.register_blueprint(bp, url_prefix='/bp')\n\n    c = app.test_client()\n    assert c.get('/bp/undefined').data == b'bp-default'\n    assert c.get('/bp/forbidden').data == b'bp-forbidden'\n    assert c.get('/undefined').data == b'default'\n    assert c.get('/forbidden').data == b'forbidden'\n    # Don't handle RequestRedirect raised when adding slash.\n    assert c.get('/slash', follow_redirects=True).data == b'slash',type='function_definition'\nline_star:156,line_end:207|char_star:0,char_end:66"->"type='INFORMATION BLOCK'\nline_star:157,line_end:207|char_star:4,char_end:66";
"@bp.errorhandler(HTTPException)\n    def bp_exception_handler(e):\n        assert isinstance(e, HTTPException)\n        assert isinstance(e, NotFound)\n        return 'bp-default',type='decorated_definition'\nline_star:159,line_end:163|char_star:4,char_end:27"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:157,line_end:207|char_star:4,char_end:66"->"@bp.errorhandler(HTTPException)\n    def bp_exception_handler(e):\n        assert isinstance(e, HTTPException)\n        assert isinstance(e, NotFound)\n        return 'bp-default',type='decorated_definition'\nline_star:159,line_end:163|char_star:4,char_end:27";
"@bp.errorhandler(HTTPException),type='decorator'\nline_star:159,line_end:159|char_star:4,char_end:35"[shape="box",fillcolor="white",style=filled];
"@bp.errorhandler(HTTPException)\n    def bp_exception_handler(e):\n        assert isinstance(e, HTTPException)\n        assert isinstance(e, NotFound)\n        return 'bp-default',type='decorated_definition'\nline_star:159,line_end:163|char_star:4,char_end:27"->"@bp.errorhandler(HTTPException),type='decorator'\nline_star:159,line_end:159|char_star:4,char_end:35";
"def bp_exception_handler(e):\n        assert isinstance(e, HTTPException)\n        assert isinstance(e, NotFound)\n        return 'bp-default',type='function_definition'\nline_star:160,line_end:163|char_star:4,char_end:27"[shape="box",fillcolor="#cee6b4",style=filled];
"@bp.errorhandler(HTTPException)\n    def bp_exception_handler(e):\n        assert isinstance(e, HTTPException)\n        assert isinstance(e, NotFound)\n        return 'bp-default',type='decorated_definition'\nline_star:159,line_end:163|char_star:4,char_end:27"->"def bp_exception_handler(e):\n        assert isinstance(e, HTTPException)\n        assert isinstance(e, NotFound)\n        return 'bp-default',type='function_definition'\nline_star:160,line_end:163|char_star:4,char_end:27";
"bp_exception_handler,type='identifier'\nline_star:160,line_end:160|char_star:8,char_end:28"[shape="point",fillcolor="#121013",style=filled];
"def bp_exception_handler(e):\n        assert isinstance(e, HTTPException)\n        assert isinstance(e, NotFound)\n        return 'bp-default',type='function_definition'\nline_star:160,line_end:163|char_star:4,char_end:27"->"bp_exception_handler,type='identifier'\nline_star:160,line_end:160|char_star:8,char_end:28";
"(e),type='parameters'\nline_star:160,line_end:160|char_star:28,char_end:31"[shape="box",fillcolor="white",style=filled];
"def bp_exception_handler(e):\n        assert isinstance(e, HTTPException)\n        assert isinstance(e, NotFound)\n        return 'bp-default',type='function_definition'\nline_star:160,line_end:163|char_star:4,char_end:27"->"(e),type='parameters'\nline_star:160,line_end:160|char_star:28,char_end:31";
"e,type='identifier'\nline_star:160,line_end:160|char_star:29,char_end:30"[shape="point",fillcolor="#121013",style=filled];
"(e),type='parameters'\nline_star:160,line_end:160|char_star:28,char_end:31"->"e,type='identifier'\nline_star:160,line_end:160|char_star:29,char_end:30";
"type='INFORMATION BLOCK'\nline_star:161,line_end:163|char_star:8,char_end:27"[shape="point",fillcolor="#121013",style=filled];
"def bp_exception_handler(e):\n        assert isinstance(e, HTTPException)\n        assert isinstance(e, NotFound)\n        return 'bp-default',type='function_definition'\nline_star:160,line_end:163|char_star:4,char_end:27"->"type='INFORMATION BLOCK'\nline_star:161,line_end:163|char_star:8,char_end:27";
"assert isinstance(e, HTTPException),type='assert_statement'\nline_star:161,line_end:161|char_star:8,char_end:43"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:161,line_end:163|char_star:8,char_end:27"->"assert isinstance(e, HTTPException),type='assert_statement'\nline_star:161,line_end:161|char_star:8,char_end:43";
"isinstance(e, HTTPException),type='call'\nline_star:161,line_end:161|char_star:15,char_end:43"[shape="box",fillcolor="white",style=filled];
"assert isinstance(e, HTTPException),type='assert_statement'\nline_star:161,line_end:161|char_star:8,char_end:43"->"isinstance(e, HTTPException),type='call'\nline_star:161,line_end:161|char_star:15,char_end:43";
"isinstance,type='identifier'\nline_star:161,line_end:161|char_star:15,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"isinstance(e, HTTPException),type='call'\nline_star:161,line_end:161|char_star:15,char_end:43"->"isinstance,type='identifier'\nline_star:161,line_end:161|char_star:15,char_end:25";
"(e, HTTPException),type='argument_list'\nline_star:161,line_end:161|char_star:25,char_end:43"[shape="box",fillcolor="white",style=filled];
"isinstance(e, HTTPException),type='call'\nline_star:161,line_end:161|char_star:15,char_end:43"->"(e, HTTPException),type='argument_list'\nline_star:161,line_end:161|char_star:25,char_end:43";
"e,type='identifier'\nline_star:161,line_end:161|char_star:26,char_end:27"[shape="point",fillcolor="#121013",style=filled];
"(e, HTTPException),type='argument_list'\nline_star:161,line_end:161|char_star:25,char_end:43"->"e,type='identifier'\nline_star:161,line_end:161|char_star:26,char_end:27";
"HTTPException,type='identifier'\nline_star:161,line_end:161|char_star:29,char_end:42"[shape="point",fillcolor="#121013",style=filled];
"(e, HTTPException),type='argument_list'\nline_star:161,line_end:161|char_star:25,char_end:43"->"HTTPException,type='identifier'\nline_star:161,line_end:161|char_star:29,char_end:42";
"assert isinstance(e, NotFound),type='assert_statement'\nline_star:162,line_end:162|char_star:8,char_end:38"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:161,line_end:163|char_star:8,char_end:27"->"assert isinstance(e, NotFound),type='assert_statement'\nline_star:162,line_end:162|char_star:8,char_end:38";
"isinstance(e, NotFound),type='call'\nline_star:162,line_end:162|char_star:15,char_end:38"[shape="box",fillcolor="white",style=filled];
"assert isinstance(e, NotFound),type='assert_statement'\nline_star:162,line_end:162|char_star:8,char_end:38"->"isinstance(e, NotFound),type='call'\nline_star:162,line_end:162|char_star:15,char_end:38";
"isinstance,type='identifier'\nline_star:162,line_end:162|char_star:15,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"isinstance(e, NotFound),type='call'\nline_star:162,line_end:162|char_star:15,char_end:38"->"isinstance,type='identifier'\nline_star:162,line_end:162|char_star:15,char_end:25";
"(e, NotFound),type='argument_list'\nline_star:162,line_end:162|char_star:25,char_end:38"[shape="box",fillcolor="white",style=filled];
"isinstance(e, NotFound),type='call'\nline_star:162,line_end:162|char_star:15,char_end:38"->"(e, NotFound),type='argument_list'\nline_star:162,line_end:162|char_star:25,char_end:38";
"e,type='identifier'\nline_star:162,line_end:162|char_star:26,char_end:27"[shape="point",fillcolor="#121013",style=filled];
"(e, NotFound),type='argument_list'\nline_star:162,line_end:162|char_star:25,char_end:38"->"e,type='identifier'\nline_star:162,line_end:162|char_star:26,char_end:27";
"NotFound,type='identifier'\nline_star:162,line_end:162|char_star:29,char_end:37"[shape="point",fillcolor="#121013",style=filled];
"(e, NotFound),type='argument_list'\nline_star:162,line_end:162|char_star:25,char_end:38"->"NotFound,type='identifier'\nline_star:162,line_end:162|char_star:29,char_end:37";
"return 'bp-default',type='return_statement'\nline_star:163,line_end:163|char_star:8,char_end:27"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:161,line_end:163|char_star:8,char_end:27"->"return 'bp-default',type='return_statement'\nline_star:163,line_end:163|char_star:8,char_end:27";
"@bp.errorhandler(Forbidden)\n    def bp_forbidden_handler(e):\n        assert isinstance(e, Forbidden)\n        return 'bp-forbidden',type='decorated_definition'\nline_star:165,line_end:168|char_star:4,char_end:29"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:157,line_end:207|char_star:4,char_end:66"->"@bp.errorhandler(Forbidden)\n    def bp_forbidden_handler(e):\n        assert isinstance(e, Forbidden)\n        return 'bp-forbidden',type='decorated_definition'\nline_star:165,line_end:168|char_star:4,char_end:29";
"@bp.errorhandler(Forbidden),type='decorator'\nline_star:165,line_end:165|char_star:4,char_end:31"[shape="box",fillcolor="white",style=filled];
"@bp.errorhandler(Forbidden)\n    def bp_forbidden_handler(e):\n        assert isinstance(e, Forbidden)\n        return 'bp-forbidden',type='decorated_definition'\nline_star:165,line_end:168|char_star:4,char_end:29"->"@bp.errorhandler(Forbidden),type='decorator'\nline_star:165,line_end:165|char_star:4,char_end:31";
"def bp_forbidden_handler(e):\n        assert isinstance(e, Forbidden)\n        return 'bp-forbidden',type='function_definition'\nline_star:166,line_end:168|char_star:4,char_end:29"[shape="box",fillcolor="#cee6b4",style=filled];
"@bp.errorhandler(Forbidden)\n    def bp_forbidden_handler(e):\n        assert isinstance(e, Forbidden)\n        return 'bp-forbidden',type='decorated_definition'\nline_star:165,line_end:168|char_star:4,char_end:29"->"def bp_forbidden_handler(e):\n        assert isinstance(e, Forbidden)\n        return 'bp-forbidden',type='function_definition'\nline_star:166,line_end:168|char_star:4,char_end:29";
"bp_forbidden_handler,type='identifier'\nline_star:166,line_end:166|char_star:8,char_end:28"[shape="point",fillcolor="#121013",style=filled];
"def bp_forbidden_handler(e):\n        assert isinstance(e, Forbidden)\n        return 'bp-forbidden',type='function_definition'\nline_star:166,line_end:168|char_star:4,char_end:29"->"bp_forbidden_handler,type='identifier'\nline_star:166,line_end:166|char_star:8,char_end:28";
"(e),type='parameters'\nline_star:166,line_end:166|char_star:28,char_end:31"[shape="box",fillcolor="white",style=filled];
"def bp_forbidden_handler(e):\n        assert isinstance(e, Forbidden)\n        return 'bp-forbidden',type='function_definition'\nline_star:166,line_end:168|char_star:4,char_end:29"->"(e),type='parameters'\nline_star:166,line_end:166|char_star:28,char_end:31";
"e,type='identifier'\nline_star:166,line_end:166|char_star:29,char_end:30"[shape="point",fillcolor="#121013",style=filled];
"(e),type='parameters'\nline_star:166,line_end:166|char_star:28,char_end:31"->"e,type='identifier'\nline_star:166,line_end:166|char_star:29,char_end:30";
"type='INFORMATION BLOCK'\nline_star:167,line_end:168|char_star:8,char_end:29"[shape="point",fillcolor="#121013",style=filled];
"def bp_forbidden_handler(e):\n        assert isinstance(e, Forbidden)\n        return 'bp-forbidden',type='function_definition'\nline_star:166,line_end:168|char_star:4,char_end:29"->"type='INFORMATION BLOCK'\nline_star:167,line_end:168|char_star:8,char_end:29";
"assert isinstance(e, Forbidden),type='assert_statement'\nline_star:167,line_end:167|char_star:8,char_end:39"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:167,line_end:168|char_star:8,char_end:29"->"assert isinstance(e, Forbidden),type='assert_statement'\nline_star:167,line_end:167|char_star:8,char_end:39";
"isinstance(e, Forbidden),type='call'\nline_star:167,line_end:167|char_star:15,char_end:39"[shape="box",fillcolor="white",style=filled];
"assert isinstance(e, Forbidden),type='assert_statement'\nline_star:167,line_end:167|char_star:8,char_end:39"->"isinstance(e, Forbidden),type='call'\nline_star:167,line_end:167|char_star:15,char_end:39";
"isinstance,type='identifier'\nline_star:167,line_end:167|char_star:15,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"isinstance(e, Forbidden),type='call'\nline_star:167,line_end:167|char_star:15,char_end:39"->"isinstance,type='identifier'\nline_star:167,line_end:167|char_star:15,char_end:25";
"(e, Forbidden),type='argument_list'\nline_star:167,line_end:167|char_star:25,char_end:39"[shape="box",fillcolor="white",style=filled];
"isinstance(e, Forbidden),type='call'\nline_star:167,line_end:167|char_star:15,char_end:39"->"(e, Forbidden),type='argument_list'\nline_star:167,line_end:167|char_star:25,char_end:39";
"e,type='identifier'\nline_star:167,line_end:167|char_star:26,char_end:27"[shape="point",fillcolor="#121013",style=filled];
"(e, Forbidden),type='argument_list'\nline_star:167,line_end:167|char_star:25,char_end:39"->"e,type='identifier'\nline_star:167,line_end:167|char_star:26,char_end:27";
"Forbidden,type='identifier'\nline_star:167,line_end:167|char_star:29,char_end:38"[shape="point",fillcolor="#121013",style=filled];
"(e, Forbidden),type='argument_list'\nline_star:167,line_end:167|char_star:25,char_end:39"->"Forbidden,type='identifier'\nline_star:167,line_end:167|char_star:29,char_end:38";
"return 'bp-forbidden',type='return_statement'\nline_star:168,line_end:168|char_star:8,char_end:29"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:167,line_end:168|char_star:8,char_end:29"->"return 'bp-forbidden',type='return_statement'\nline_star:168,line_end:168|char_star:8,char_end:29";
"@bp.route('/undefined')\n    def bp_registered_test():\n        raise NotFound(),type='decorated_definition'\nline_star:170,line_end:172|char_star:4,char_end:24"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:157,line_end:207|char_star:4,char_end:66"->"@bp.route('/undefined')\n    def bp_registered_test():\n        raise NotFound(),type='decorated_definition'\nline_star:170,line_end:172|char_star:4,char_end:24";
"@bp.route('/undefined'),type='decorator'\nline_star:170,line_end:170|char_star:4,char_end:27"[shape="box",fillcolor="white",style=filled];
"@bp.route('/undefined')\n    def bp_registered_test():\n        raise NotFound(),type='decorated_definition'\nline_star:170,line_end:172|char_star:4,char_end:24"->"@bp.route('/undefined'),type='decorator'\nline_star:170,line_end:170|char_star:4,char_end:27";
"def bp_registered_test():\n        raise NotFound(),type='function_definition'\nline_star:171,line_end:172|char_star:4,char_end:24"[shape="box",fillcolor="#cee6b4",style=filled];
"@bp.route('/undefined')\n    def bp_registered_test():\n        raise NotFound(),type='decorated_definition'\nline_star:170,line_end:172|char_star:4,char_end:24"->"def bp_registered_test():\n        raise NotFound(),type='function_definition'\nline_star:171,line_end:172|char_star:4,char_end:24";
"bp_registered_test,type='identifier'\nline_star:171,line_end:171|char_star:8,char_end:26"[shape="point",fillcolor="#121013",style=filled];
"def bp_registered_test():\n        raise NotFound(),type='function_definition'\nline_star:171,line_end:172|char_star:4,char_end:24"->"bp_registered_test,type='identifier'\nline_star:171,line_end:171|char_star:8,char_end:26";
"type='INFORMATION BLOCK'\nline_star:172,line_end:172|char_star:8,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"def bp_registered_test():\n        raise NotFound(),type='function_definition'\nline_star:171,line_end:172|char_star:4,char_end:24"->"type='INFORMATION BLOCK'\nline_star:172,line_end:172|char_star:8,char_end:24";
"raise NotFound(),type='raise_statement'\nline_star:172,line_end:172|char_star:8,char_end:24"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:172,line_end:172|char_star:8,char_end:24"->"raise NotFound(),type='raise_statement'\nline_star:172,line_end:172|char_star:8,char_end:24";
"raise,type='raise'\nline_star:172,line_end:172|char_star:8,char_end:13"[shape="box",fillcolor="white",style=filled];
"raise NotFound(),type='raise_statement'\nline_star:172,line_end:172|char_star:8,char_end:24"->"raise,type='raise'\nline_star:172,line_end:172|char_star:8,char_end:13";
"NotFound(),type='call'\nline_star:172,line_end:172|char_star:14,char_end:24"[shape="box",fillcolor="white",style=filled];
"raise NotFound(),type='raise_statement'\nline_star:172,line_end:172|char_star:8,char_end:24"->"NotFound(),type='call'\nline_star:172,line_end:172|char_star:14,char_end:24";
"NotFound,type='identifier'\nline_star:172,line_end:172|char_star:14,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"NotFound(),type='call'\nline_star:172,line_end:172|char_star:14,char_end:24"->"NotFound,type='identifier'\nline_star:172,line_end:172|char_star:14,char_end:22";
"@bp.route('/forbidden')\n    def bp_forbidden_test():\n        raise Forbidden(),type='decorated_definition'\nline_star:174,line_end:176|char_star:4,char_end:25"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:157,line_end:207|char_star:4,char_end:66"->"@bp.route('/forbidden')\n    def bp_forbidden_test():\n        raise Forbidden(),type='decorated_definition'\nline_star:174,line_end:176|char_star:4,char_end:25";
"@bp.route('/forbidden'),type='decorator'\nline_star:174,line_end:174|char_star:4,char_end:27"[shape="box",fillcolor="white",style=filled];
"@bp.route('/forbidden')\n    def bp_forbidden_test():\n        raise Forbidden(),type='decorated_definition'\nline_star:174,line_end:176|char_star:4,char_end:25"->"@bp.route('/forbidden'),type='decorator'\nline_star:174,line_end:174|char_star:4,char_end:27";
"def bp_forbidden_test():\n        raise Forbidden(),type='function_definition'\nline_star:175,line_end:176|char_star:4,char_end:25"[shape="box",fillcolor="#cee6b4",style=filled];
"@bp.route('/forbidden')\n    def bp_forbidden_test():\n        raise Forbidden(),type='decorated_definition'\nline_star:174,line_end:176|char_star:4,char_end:25"->"def bp_forbidden_test():\n        raise Forbidden(),type='function_definition'\nline_star:175,line_end:176|char_star:4,char_end:25";
"bp_forbidden_test,type='identifier'\nline_star:175,line_end:175|char_star:8,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"def bp_forbidden_test():\n        raise Forbidden(),type='function_definition'\nline_star:175,line_end:176|char_star:4,char_end:25"->"bp_forbidden_test,type='identifier'\nline_star:175,line_end:175|char_star:8,char_end:25";
"type='INFORMATION BLOCK'\nline_star:176,line_end:176|char_star:8,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"def bp_forbidden_test():\n        raise Forbidden(),type='function_definition'\nline_star:175,line_end:176|char_star:4,char_end:25"->"type='INFORMATION BLOCK'\nline_star:176,line_end:176|char_star:8,char_end:25";
"raise Forbidden(),type='raise_statement'\nline_star:176,line_end:176|char_star:8,char_end:25"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:176,line_end:176|char_star:8,char_end:25"->"raise Forbidden(),type='raise_statement'\nline_star:176,line_end:176|char_star:8,char_end:25";
"raise,type='raise'\nline_star:176,line_end:176|char_star:8,char_end:13"[shape="box",fillcolor="white",style=filled];
"raise Forbidden(),type='raise_statement'\nline_star:176,line_end:176|char_star:8,char_end:25"->"raise,type='raise'\nline_star:176,line_end:176|char_star:8,char_end:13";
"Forbidden(),type='call'\nline_star:176,line_end:176|char_star:14,char_end:25"[shape="box",fillcolor="white",style=filled];
"raise Forbidden(),type='raise_statement'\nline_star:176,line_end:176|char_star:8,char_end:25"->"Forbidden(),type='call'\nline_star:176,line_end:176|char_star:14,char_end:25";
"Forbidden,type='identifier'\nline_star:176,line_end:176|char_star:14,char_end:23"[shape="point",fillcolor="#121013",style=filled];
"Forbidden(),type='call'\nline_star:176,line_end:176|char_star:14,char_end:25"->"Forbidden,type='identifier'\nline_star:176,line_end:176|char_star:14,char_end:23";
"@app.errorhandler(HTTPException)\n    def catchall_exception_handler(e):\n        assert isinstance(e, HTTPException)\n        assert isinstance(e, NotFound)\n        return 'default',type='decorated_definition'\nline_star:180,line_end:184|char_star:4,char_end:24"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:157,line_end:207|char_star:4,char_end:66"->"@app.errorhandler(HTTPException)\n    def catchall_exception_handler(e):\n        assert isinstance(e, HTTPException)\n        assert isinstance(e, NotFound)\n        return 'default',type='decorated_definition'\nline_star:180,line_end:184|char_star:4,char_end:24";
"@app.errorhandler(HTTPException),type='decorator'\nline_star:180,line_end:180|char_star:4,char_end:36"[shape="box",fillcolor="white",style=filled];
"@app.errorhandler(HTTPException)\n    def catchall_exception_handler(e):\n        assert isinstance(e, HTTPException)\n        assert isinstance(e, NotFound)\n        return 'default',type='decorated_definition'\nline_star:180,line_end:184|char_star:4,char_end:24"->"@app.errorhandler(HTTPException),type='decorator'\nline_star:180,line_end:180|char_star:4,char_end:36";
"def catchall_exception_handler(e):\n        assert isinstance(e, HTTPException)\n        assert isinstance(e, NotFound)\n        return 'default',type='function_definition'\nline_star:181,line_end:184|char_star:4,char_end:24"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.errorhandler(HTTPException)\n    def catchall_exception_handler(e):\n        assert isinstance(e, HTTPException)\n        assert isinstance(e, NotFound)\n        return 'default',type='decorated_definition'\nline_star:180,line_end:184|char_star:4,char_end:24"->"def catchall_exception_handler(e):\n        assert isinstance(e, HTTPException)\n        assert isinstance(e, NotFound)\n        return 'default',type='function_definition'\nline_star:181,line_end:184|char_star:4,char_end:24";
"catchall_exception_handler,type='identifier'\nline_star:181,line_end:181|char_star:8,char_end:34"[shape="point",fillcolor="#121013",style=filled];
"def catchall_exception_handler(e):\n        assert isinstance(e, HTTPException)\n        assert isinstance(e, NotFound)\n        return 'default',type='function_definition'\nline_star:181,line_end:184|char_star:4,char_end:24"->"catchall_exception_handler,type='identifier'\nline_star:181,line_end:181|char_star:8,char_end:34";
"(e),type='parameters'\nline_star:181,line_end:181|char_star:34,char_end:37"[shape="box",fillcolor="white",style=filled];
"def catchall_exception_handler(e):\n        assert isinstance(e, HTTPException)\n        assert isinstance(e, NotFound)\n        return 'default',type='function_definition'\nline_star:181,line_end:184|char_star:4,char_end:24"->"(e),type='parameters'\nline_star:181,line_end:181|char_star:34,char_end:37";
"e,type='identifier'\nline_star:181,line_end:181|char_star:35,char_end:36"[shape="point",fillcolor="#121013",style=filled];
"(e),type='parameters'\nline_star:181,line_end:181|char_star:34,char_end:37"->"e,type='identifier'\nline_star:181,line_end:181|char_star:35,char_end:36";
"type='INFORMATION BLOCK'\nline_star:182,line_end:184|char_star:8,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"def catchall_exception_handler(e):\n        assert isinstance(e, HTTPException)\n        assert isinstance(e, NotFound)\n        return 'default',type='function_definition'\nline_star:181,line_end:184|char_star:4,char_end:24"->"type='INFORMATION BLOCK'\nline_star:182,line_end:184|char_star:8,char_end:24";
"assert isinstance(e, HTTPException),type='assert_statement'\nline_star:182,line_end:182|char_star:8,char_end:43"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:182,line_end:184|char_star:8,char_end:24"->"assert isinstance(e, HTTPException),type='assert_statement'\nline_star:182,line_end:182|char_star:8,char_end:43";
"isinstance(e, HTTPException),type='call'\nline_star:182,line_end:182|char_star:15,char_end:43"[shape="box",fillcolor="white",style=filled];
"assert isinstance(e, HTTPException),type='assert_statement'\nline_star:182,line_end:182|char_star:8,char_end:43"->"isinstance(e, HTTPException),type='call'\nline_star:182,line_end:182|char_star:15,char_end:43";
"isinstance,type='identifier'\nline_star:182,line_end:182|char_star:15,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"isinstance(e, HTTPException),type='call'\nline_star:182,line_end:182|char_star:15,char_end:43"->"isinstance,type='identifier'\nline_star:182,line_end:182|char_star:15,char_end:25";
"(e, HTTPException),type='argument_list'\nline_star:182,line_end:182|char_star:25,char_end:43"[shape="box",fillcolor="white",style=filled];
"isinstance(e, HTTPException),type='call'\nline_star:182,line_end:182|char_star:15,char_end:43"->"(e, HTTPException),type='argument_list'\nline_star:182,line_end:182|char_star:25,char_end:43";
"e,type='identifier'\nline_star:182,line_end:182|char_star:26,char_end:27"[shape="point",fillcolor="#121013",style=filled];
"(e, HTTPException),type='argument_list'\nline_star:182,line_end:182|char_star:25,char_end:43"->"e,type='identifier'\nline_star:182,line_end:182|char_star:26,char_end:27";
"HTTPException,type='identifier'\nline_star:182,line_end:182|char_star:29,char_end:42"[shape="point",fillcolor="#121013",style=filled];
"(e, HTTPException),type='argument_list'\nline_star:182,line_end:182|char_star:25,char_end:43"->"HTTPException,type='identifier'\nline_star:182,line_end:182|char_star:29,char_end:42";
"assert isinstance(e, NotFound),type='assert_statement'\nline_star:183,line_end:183|char_star:8,char_end:38"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:182,line_end:184|char_star:8,char_end:24"->"assert isinstance(e, NotFound),type='assert_statement'\nline_star:183,line_end:183|char_star:8,char_end:38";
"isinstance(e, NotFound),type='call'\nline_star:183,line_end:183|char_star:15,char_end:38"[shape="box",fillcolor="white",style=filled];
"assert isinstance(e, NotFound),type='assert_statement'\nline_star:183,line_end:183|char_star:8,char_end:38"->"isinstance(e, NotFound),type='call'\nline_star:183,line_end:183|char_star:15,char_end:38";
"isinstance,type='identifier'\nline_star:183,line_end:183|char_star:15,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"isinstance(e, NotFound),type='call'\nline_star:183,line_end:183|char_star:15,char_end:38"->"isinstance,type='identifier'\nline_star:183,line_end:183|char_star:15,char_end:25";
"(e, NotFound),type='argument_list'\nline_star:183,line_end:183|char_star:25,char_end:38"[shape="box",fillcolor="white",style=filled];
"isinstance(e, NotFound),type='call'\nline_star:183,line_end:183|char_star:15,char_end:38"->"(e, NotFound),type='argument_list'\nline_star:183,line_end:183|char_star:25,char_end:38";
"e,type='identifier'\nline_star:183,line_end:183|char_star:26,char_end:27"[shape="point",fillcolor="#121013",style=filled];
"(e, NotFound),type='argument_list'\nline_star:183,line_end:183|char_star:25,char_end:38"->"e,type='identifier'\nline_star:183,line_end:183|char_star:26,char_end:27";
"NotFound,type='identifier'\nline_star:183,line_end:183|char_star:29,char_end:37"[shape="point",fillcolor="#121013",style=filled];
"(e, NotFound),type='argument_list'\nline_star:183,line_end:183|char_star:25,char_end:38"->"NotFound,type='identifier'\nline_star:183,line_end:183|char_star:29,char_end:37";
"return 'default',type='return_statement'\nline_star:184,line_end:184|char_star:8,char_end:24"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:182,line_end:184|char_star:8,char_end:24"->"return 'default',type='return_statement'\nline_star:184,line_end:184|char_star:8,char_end:24";
"@app.errorhandler(Forbidden)\n    def catchall_forbidden_handler(e):\n        assert isinstance(e, Forbidden)\n        return 'forbidden',type='decorated_definition'\nline_star:186,line_end:189|char_star:4,char_end:26"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:157,line_end:207|char_star:4,char_end:66"->"@app.errorhandler(Forbidden)\n    def catchall_forbidden_handler(e):\n        assert isinstance(e, Forbidden)\n        return 'forbidden',type='decorated_definition'\nline_star:186,line_end:189|char_star:4,char_end:26";
"@app.errorhandler(Forbidden),type='decorator'\nline_star:186,line_end:186|char_star:4,char_end:32"[shape="box",fillcolor="white",style=filled];
"@app.errorhandler(Forbidden)\n    def catchall_forbidden_handler(e):\n        assert isinstance(e, Forbidden)\n        return 'forbidden',type='decorated_definition'\nline_star:186,line_end:189|char_star:4,char_end:26"->"@app.errorhandler(Forbidden),type='decorator'\nline_star:186,line_end:186|char_star:4,char_end:32";
"def catchall_forbidden_handler(e):\n        assert isinstance(e, Forbidden)\n        return 'forbidden',type='function_definition'\nline_star:187,line_end:189|char_star:4,char_end:26"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.errorhandler(Forbidden)\n    def catchall_forbidden_handler(e):\n        assert isinstance(e, Forbidden)\n        return 'forbidden',type='decorated_definition'\nline_star:186,line_end:189|char_star:4,char_end:26"->"def catchall_forbidden_handler(e):\n        assert isinstance(e, Forbidden)\n        return 'forbidden',type='function_definition'\nline_star:187,line_end:189|char_star:4,char_end:26";
"catchall_forbidden_handler,type='identifier'\nline_star:187,line_end:187|char_star:8,char_end:34"[shape="point",fillcolor="#121013",style=filled];
"def catchall_forbidden_handler(e):\n        assert isinstance(e, Forbidden)\n        return 'forbidden',type='function_definition'\nline_star:187,line_end:189|char_star:4,char_end:26"->"catchall_forbidden_handler,type='identifier'\nline_star:187,line_end:187|char_star:8,char_end:34";
"(e),type='parameters'\nline_star:187,line_end:187|char_star:34,char_end:37"[shape="box",fillcolor="white",style=filled];
"def catchall_forbidden_handler(e):\n        assert isinstance(e, Forbidden)\n        return 'forbidden',type='function_definition'\nline_star:187,line_end:189|char_star:4,char_end:26"->"(e),type='parameters'\nline_star:187,line_end:187|char_star:34,char_end:37";
"e,type='identifier'\nline_star:187,line_end:187|char_star:35,char_end:36"[shape="point",fillcolor="#121013",style=filled];
"(e),type='parameters'\nline_star:187,line_end:187|char_star:34,char_end:37"->"e,type='identifier'\nline_star:187,line_end:187|char_star:35,char_end:36";
"type='INFORMATION BLOCK'\nline_star:188,line_end:189|char_star:8,char_end:26"[shape="point",fillcolor="#121013",style=filled];
"def catchall_forbidden_handler(e):\n        assert isinstance(e, Forbidden)\n        return 'forbidden',type='function_definition'\nline_star:187,line_end:189|char_star:4,char_end:26"->"type='INFORMATION BLOCK'\nline_star:188,line_end:189|char_star:8,char_end:26";
"assert isinstance(e, Forbidden),type='assert_statement'\nline_star:188,line_end:188|char_star:8,char_end:39"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:188,line_end:189|char_star:8,char_end:26"->"assert isinstance(e, Forbidden),type='assert_statement'\nline_star:188,line_end:188|char_star:8,char_end:39";
"isinstance(e, Forbidden),type='call'\nline_star:188,line_end:188|char_star:15,char_end:39"[shape="box",fillcolor="white",style=filled];
"assert isinstance(e, Forbidden),type='assert_statement'\nline_star:188,line_end:188|char_star:8,char_end:39"->"isinstance(e, Forbidden),type='call'\nline_star:188,line_end:188|char_star:15,char_end:39";
"isinstance,type='identifier'\nline_star:188,line_end:188|char_star:15,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"isinstance(e, Forbidden),type='call'\nline_star:188,line_end:188|char_star:15,char_end:39"->"isinstance,type='identifier'\nline_star:188,line_end:188|char_star:15,char_end:25";
"(e, Forbidden),type='argument_list'\nline_star:188,line_end:188|char_star:25,char_end:39"[shape="box",fillcolor="white",style=filled];
"isinstance(e, Forbidden),type='call'\nline_star:188,line_end:188|char_star:15,char_end:39"->"(e, Forbidden),type='argument_list'\nline_star:188,line_end:188|char_star:25,char_end:39";
"e,type='identifier'\nline_star:188,line_end:188|char_star:26,char_end:27"[shape="point",fillcolor="#121013",style=filled];
"(e, Forbidden),type='argument_list'\nline_star:188,line_end:188|char_star:25,char_end:39"->"e,type='identifier'\nline_star:188,line_end:188|char_star:26,char_end:27";
"Forbidden,type='identifier'\nline_star:188,line_end:188|char_star:29,char_end:38"[shape="point",fillcolor="#121013",style=filled];
"(e, Forbidden),type='argument_list'\nline_star:188,line_end:188|char_star:25,char_end:39"->"Forbidden,type='identifier'\nline_star:188,line_end:188|char_star:29,char_end:38";
"return 'forbidden',type='return_statement'\nline_star:189,line_end:189|char_star:8,char_end:26"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:188,line_end:189|char_star:8,char_end:26"->"return 'forbidden',type='return_statement'\nline_star:189,line_end:189|char_star:8,char_end:26";
"@app.route('/forbidden')\n    def forbidden():\n        raise Forbidden(),type='decorated_definition'\nline_star:191,line_end:193|char_star:4,char_end:25"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:157,line_end:207|char_star:4,char_end:66"->"@app.route('/forbidden')\n    def forbidden():\n        raise Forbidden(),type='decorated_definition'\nline_star:191,line_end:193|char_star:4,char_end:25";
"@app.route('/forbidden'),type='decorator'\nline_star:191,line_end:191|char_star:4,char_end:28"[shape="box",fillcolor="white",style=filled];
"@app.route('/forbidden')\n    def forbidden():\n        raise Forbidden(),type='decorated_definition'\nline_star:191,line_end:193|char_star:4,char_end:25"->"@app.route('/forbidden'),type='decorator'\nline_star:191,line_end:191|char_star:4,char_end:28";
"def forbidden():\n        raise Forbidden(),type='function_definition'\nline_star:192,line_end:193|char_star:4,char_end:25"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.route('/forbidden')\n    def forbidden():\n        raise Forbidden(),type='decorated_definition'\nline_star:191,line_end:193|char_star:4,char_end:25"->"def forbidden():\n        raise Forbidden(),type='function_definition'\nline_star:192,line_end:193|char_star:4,char_end:25";
"forbidden,type='identifier'\nline_star:192,line_end:192|char_star:8,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"def forbidden():\n        raise Forbidden(),type='function_definition'\nline_star:192,line_end:193|char_star:4,char_end:25"->"forbidden,type='identifier'\nline_star:192,line_end:192|char_star:8,char_end:17";
"type='INFORMATION BLOCK'\nline_star:193,line_end:193|char_star:8,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"def forbidden():\n        raise Forbidden(),type='function_definition'\nline_star:192,line_end:193|char_star:4,char_end:25"->"type='INFORMATION BLOCK'\nline_star:193,line_end:193|char_star:8,char_end:25";
"raise Forbidden(),type='raise_statement'\nline_star:193,line_end:193|char_star:8,char_end:25"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:193,line_end:193|char_star:8,char_end:25"->"raise Forbidden(),type='raise_statement'\nline_star:193,line_end:193|char_star:8,char_end:25";
"raise,type='raise'\nline_star:193,line_end:193|char_star:8,char_end:13"[shape="box",fillcolor="white",style=filled];
"raise Forbidden(),type='raise_statement'\nline_star:193,line_end:193|char_star:8,char_end:25"->"raise,type='raise'\nline_star:193,line_end:193|char_star:8,char_end:13";
"Forbidden(),type='call'\nline_star:193,line_end:193|char_star:14,char_end:25"[shape="box",fillcolor="white",style=filled];
"raise Forbidden(),type='raise_statement'\nline_star:193,line_end:193|char_star:8,char_end:25"->"Forbidden(),type='call'\nline_star:193,line_end:193|char_star:14,char_end:25";
"Forbidden,type='identifier'\nline_star:193,line_end:193|char_star:14,char_end:23"[shape="point",fillcolor="#121013",style=filled];
"Forbidden(),type='call'\nline_star:193,line_end:193|char_star:14,char_end:25"->"Forbidden,type='identifier'\nline_star:193,line_end:193|char_star:14,char_end:23";
"@app.route('/slash/')\n    def slash():\n        return 'slash',type='decorated_definition'\nline_star:195,line_end:197|char_star:4,char_end:22"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:157,line_end:207|char_star:4,char_end:66"->"@app.route('/slash/')\n    def slash():\n        return 'slash',type='decorated_definition'\nline_star:195,line_end:197|char_star:4,char_end:22";
"@app.route('/slash/'),type='decorator'\nline_star:195,line_end:195|char_star:4,char_end:25"[shape="box",fillcolor="white",style=filled];
"@app.route('/slash/')\n    def slash():\n        return 'slash',type='decorated_definition'\nline_star:195,line_end:197|char_star:4,char_end:22"->"@app.route('/slash/'),type='decorator'\nline_star:195,line_end:195|char_star:4,char_end:25";
"def slash():\n        return 'slash',type='function_definition'\nline_star:196,line_end:197|char_star:4,char_end:22"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.route('/slash/')\n    def slash():\n        return 'slash',type='decorated_definition'\nline_star:195,line_end:197|char_star:4,char_end:22"->"def slash():\n        return 'slash',type='function_definition'\nline_star:196,line_end:197|char_star:4,char_end:22";
"slash,type='identifier'\nline_star:196,line_end:196|char_star:8,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"def slash():\n        return 'slash',type='function_definition'\nline_star:196,line_end:197|char_star:4,char_end:22"->"slash,type='identifier'\nline_star:196,line_end:196|char_star:8,char_end:13";
"type='INFORMATION BLOCK'\nline_star:197,line_end:197|char_star:8,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"def slash():\n        return 'slash',type='function_definition'\nline_star:196,line_end:197|char_star:4,char_end:22"->"type='INFORMATION BLOCK'\nline_star:197,line_end:197|char_star:8,char_end:22";
"return 'slash',type='return_statement'\nline_star:197,line_end:197|char_star:8,char_end:22"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:197,line_end:197|char_star:8,char_end:22"->"return 'slash',type='return_statement'\nline_star:197,line_end:197|char_star:8,char_end:22";
"assert c.get('/bp/undefined').data == b'bp-default',type='assert_statement'\nline_star:202,line_end:202|char_star:4,char_end:55"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:157,line_end:207|char_star:4,char_end:66"->"assert c.get('/bp/undefined').data == b'bp-default',type='assert_statement'\nline_star:202,line_end:202|char_star:4,char_end:55";
"c.get('/bp/undefined').data == b'bp-default',type='comparison_operator'\nline_star:202,line_end:202|char_star:11,char_end:55"[shape="box",fillcolor="white",style=filled];
"assert c.get('/bp/undefined').data == b'bp-default',type='assert_statement'\nline_star:202,line_end:202|char_star:4,char_end:55"->"c.get('/bp/undefined').data == b'bp-default',type='comparison_operator'\nline_star:202,line_end:202|char_star:11,char_end:55";
"c.get('/bp/undefined').data,type='attribute'\nline_star:202,line_end:202|char_star:11,char_end:38"[shape="box",fillcolor="white",style=filled];
"c.get('/bp/undefined').data == b'bp-default',type='comparison_operator'\nline_star:202,line_end:202|char_star:11,char_end:55"->"c.get('/bp/undefined').data,type='attribute'\nline_star:202,line_end:202|char_star:11,char_end:38";
"c.get('/bp/undefined'),type='call'\nline_star:202,line_end:202|char_star:11,char_end:33"[shape="box",fillcolor="white",style=filled];
"c.get('/bp/undefined').data,type='attribute'\nline_star:202,line_end:202|char_star:11,char_end:38"->"c.get('/bp/undefined'),type='call'\nline_star:202,line_end:202|char_star:11,char_end:33";
"c.get,type='attribute'\nline_star:202,line_end:202|char_star:11,char_end:16"[shape="box",fillcolor="white",style=filled];
"c.get('/bp/undefined'),type='call'\nline_star:202,line_end:202|char_star:11,char_end:33"->"c.get,type='attribute'\nline_star:202,line_end:202|char_star:11,char_end:16";
"c,type='identifier'\nline_star:202,line_end:202|char_star:11,char_end:12"[shape="point",fillcolor="#121013",style=filled];
"c.get,type='attribute'\nline_star:202,line_end:202|char_star:11,char_end:16"->"c,type='identifier'\nline_star:202,line_end:202|char_star:11,char_end:12";
"get,type='identifier'\nline_star:202,line_end:202|char_star:13,char_end:16"[shape="point",fillcolor="#121013",style=filled];
"c.get,type='attribute'\nline_star:202,line_end:202|char_star:11,char_end:16"->"get,type='identifier'\nline_star:202,line_end:202|char_star:13,char_end:16";
"('/bp/undefined'),type='argument_list'\nline_star:202,line_end:202|char_star:16,char_end:33"[shape="box",fillcolor="white",style=filled];
"c.get('/bp/undefined'),type='call'\nline_star:202,line_end:202|char_star:11,char_end:33"->"('/bp/undefined'),type='argument_list'\nline_star:202,line_end:202|char_star:16,char_end:33";
"data,type='identifier'\nline_star:202,line_end:202|char_star:34,char_end:38"[shape="point",fillcolor="#121013",style=filled];
"c.get('/bp/undefined').data,type='attribute'\nline_star:202,line_end:202|char_star:11,char_end:38"->"data,type='identifier'\nline_star:202,line_end:202|char_star:34,char_end:38";
"assert c.get('/bp/forbidden').data == b'bp-forbidden',type='assert_statement'\nline_star:203,line_end:203|char_star:4,char_end:57"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:157,line_end:207|char_star:4,char_end:66"->"assert c.get('/bp/forbidden').data == b'bp-forbidden',type='assert_statement'\nline_star:203,line_end:203|char_star:4,char_end:57";
"c.get('/bp/forbidden').data == b'bp-forbidden',type='comparison_operator'\nline_star:203,line_end:203|char_star:11,char_end:57"[shape="box",fillcolor="white",style=filled];
"assert c.get('/bp/forbidden').data == b'bp-forbidden',type='assert_statement'\nline_star:203,line_end:203|char_star:4,char_end:57"->"c.get('/bp/forbidden').data == b'bp-forbidden',type='comparison_operator'\nline_star:203,line_end:203|char_star:11,char_end:57";
"c.get('/bp/forbidden').data,type='attribute'\nline_star:203,line_end:203|char_star:11,char_end:38"[shape="box",fillcolor="white",style=filled];
"c.get('/bp/forbidden').data == b'bp-forbidden',type='comparison_operator'\nline_star:203,line_end:203|char_star:11,char_end:57"->"c.get('/bp/forbidden').data,type='attribute'\nline_star:203,line_end:203|char_star:11,char_end:38";
"c.get('/bp/forbidden'),type='call'\nline_star:203,line_end:203|char_star:11,char_end:33"[shape="box",fillcolor="white",style=filled];
"c.get('/bp/forbidden').data,type='attribute'\nline_star:203,line_end:203|char_star:11,char_end:38"->"c.get('/bp/forbidden'),type='call'\nline_star:203,line_end:203|char_star:11,char_end:33";
"c.get,type='attribute'\nline_star:203,line_end:203|char_star:11,char_end:16"[shape="box",fillcolor="white",style=filled];
"c.get('/bp/forbidden'),type='call'\nline_star:203,line_end:203|char_star:11,char_end:33"->"c.get,type='attribute'\nline_star:203,line_end:203|char_star:11,char_end:16";
"c,type='identifier'\nline_star:203,line_end:203|char_star:11,char_end:12"[shape="point",fillcolor="#121013",style=filled];
"c.get,type='attribute'\nline_star:203,line_end:203|char_star:11,char_end:16"->"c,type='identifier'\nline_star:203,line_end:203|char_star:11,char_end:12";
"get,type='identifier'\nline_star:203,line_end:203|char_star:13,char_end:16"[shape="point",fillcolor="#121013",style=filled];
"c.get,type='attribute'\nline_star:203,line_end:203|char_star:11,char_end:16"->"get,type='identifier'\nline_star:203,line_end:203|char_star:13,char_end:16";
"('/bp/forbidden'),type='argument_list'\nline_star:203,line_end:203|char_star:16,char_end:33"[shape="box",fillcolor="white",style=filled];
"c.get('/bp/forbidden'),type='call'\nline_star:203,line_end:203|char_star:11,char_end:33"->"('/bp/forbidden'),type='argument_list'\nline_star:203,line_end:203|char_star:16,char_end:33";
"data,type='identifier'\nline_star:203,line_end:203|char_star:34,char_end:38"[shape="point",fillcolor="#121013",style=filled];
"c.get('/bp/forbidden').data,type='attribute'\nline_star:203,line_end:203|char_star:11,char_end:38"->"data,type='identifier'\nline_star:203,line_end:203|char_star:34,char_end:38";
"assert c.get('/undefined').data == b'default',type='assert_statement'\nline_star:204,line_end:204|char_star:4,char_end:49"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:157,line_end:207|char_star:4,char_end:66"->"assert c.get('/undefined').data == b'default',type='assert_statement'\nline_star:204,line_end:204|char_star:4,char_end:49";
"c.get('/undefined').data == b'default',type='comparison_operator'\nline_star:204,line_end:204|char_star:11,char_end:49"[shape="box",fillcolor="white",style=filled];
"assert c.get('/undefined').data == b'default',type='assert_statement'\nline_star:204,line_end:204|char_star:4,char_end:49"->"c.get('/undefined').data == b'default',type='comparison_operator'\nline_star:204,line_end:204|char_star:11,char_end:49";
"c.get('/undefined').data,type='attribute'\nline_star:204,line_end:204|char_star:11,char_end:35"[shape="box",fillcolor="white",style=filled];
"c.get('/undefined').data == b'default',type='comparison_operator'\nline_star:204,line_end:204|char_star:11,char_end:49"->"c.get('/undefined').data,type='attribute'\nline_star:204,line_end:204|char_star:11,char_end:35";
"c.get('/undefined'),type='call'\nline_star:204,line_end:204|char_star:11,char_end:30"[shape="box",fillcolor="white",style=filled];
"c.get('/undefined').data,type='attribute'\nline_star:204,line_end:204|char_star:11,char_end:35"->"c.get('/undefined'),type='call'\nline_star:204,line_end:204|char_star:11,char_end:30";
"c.get,type='attribute'\nline_star:204,line_end:204|char_star:11,char_end:16"[shape="box",fillcolor="white",style=filled];
"c.get('/undefined'),type='call'\nline_star:204,line_end:204|char_star:11,char_end:30"->"c.get,type='attribute'\nline_star:204,line_end:204|char_star:11,char_end:16";
"c,type='identifier'\nline_star:204,line_end:204|char_star:11,char_end:12"[shape="point",fillcolor="#121013",style=filled];
"c.get,type='attribute'\nline_star:204,line_end:204|char_star:11,char_end:16"->"c,type='identifier'\nline_star:204,line_end:204|char_star:11,char_end:12";
"get,type='identifier'\nline_star:204,line_end:204|char_star:13,char_end:16"[shape="point",fillcolor="#121013",style=filled];
"c.get,type='attribute'\nline_star:204,line_end:204|char_star:11,char_end:16"->"get,type='identifier'\nline_star:204,line_end:204|char_star:13,char_end:16";
"('/undefined'),type='argument_list'\nline_star:204,line_end:204|char_star:16,char_end:30"[shape="box",fillcolor="white",style=filled];
"c.get('/undefined'),type='call'\nline_star:204,line_end:204|char_star:11,char_end:30"->"('/undefined'),type='argument_list'\nline_star:204,line_end:204|char_star:16,char_end:30";
"data,type='identifier'\nline_star:204,line_end:204|char_star:31,char_end:35"[shape="point",fillcolor="#121013",style=filled];
"c.get('/undefined').data,type='attribute'\nline_star:204,line_end:204|char_star:11,char_end:35"->"data,type='identifier'\nline_star:204,line_end:204|char_star:31,char_end:35";
"assert c.get('/forbidden').data == b'forbidden',type='assert_statement'\nline_star:205,line_end:205|char_star:4,char_end:51"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:157,line_end:207|char_star:4,char_end:66"->"assert c.get('/forbidden').data == b'forbidden',type='assert_statement'\nline_star:205,line_end:205|char_star:4,char_end:51";
"c.get('/forbidden').data == b'forbidden',type='comparison_operator'\nline_star:205,line_end:205|char_star:11,char_end:51"[shape="box",fillcolor="white",style=filled];
"assert c.get('/forbidden').data == b'forbidden',type='assert_statement'\nline_star:205,line_end:205|char_star:4,char_end:51"->"c.get('/forbidden').data == b'forbidden',type='comparison_operator'\nline_star:205,line_end:205|char_star:11,char_end:51";
"c.get('/forbidden').data,type='attribute'\nline_star:205,line_end:205|char_star:11,char_end:35"[shape="box",fillcolor="white",style=filled];
"c.get('/forbidden').data == b'forbidden',type='comparison_operator'\nline_star:205,line_end:205|char_star:11,char_end:51"->"c.get('/forbidden').data,type='attribute'\nline_star:205,line_end:205|char_star:11,char_end:35";
"c.get('/forbidden'),type='call'\nline_star:205,line_end:205|char_star:11,char_end:30"[shape="box",fillcolor="white",style=filled];
"c.get('/forbidden').data,type='attribute'\nline_star:205,line_end:205|char_star:11,char_end:35"->"c.get('/forbidden'),type='call'\nline_star:205,line_end:205|char_star:11,char_end:30";
"c.get,type='attribute'\nline_star:205,line_end:205|char_star:11,char_end:16"[shape="box",fillcolor="white",style=filled];
"c.get('/forbidden'),type='call'\nline_star:205,line_end:205|char_star:11,char_end:30"->"c.get,type='attribute'\nline_star:205,line_end:205|char_star:11,char_end:16";
"c,type='identifier'\nline_star:205,line_end:205|char_star:11,char_end:12"[shape="point",fillcolor="#121013",style=filled];
"c.get,type='attribute'\nline_star:205,line_end:205|char_star:11,char_end:16"->"c,type='identifier'\nline_star:205,line_end:205|char_star:11,char_end:12";
"get,type='identifier'\nline_star:205,line_end:205|char_star:13,char_end:16"[shape="point",fillcolor="#121013",style=filled];
"c.get,type='attribute'\nline_star:205,line_end:205|char_star:11,char_end:16"->"get,type='identifier'\nline_star:205,line_end:205|char_star:13,char_end:16";
"('/forbidden'),type='argument_list'\nline_star:205,line_end:205|char_star:16,char_end:30"[shape="box",fillcolor="white",style=filled];
"c.get('/forbidden'),type='call'\nline_star:205,line_end:205|char_star:11,char_end:30"->"('/forbidden'),type='argument_list'\nline_star:205,line_end:205|char_star:16,char_end:30";
"data,type='identifier'\nline_star:205,line_end:205|char_star:31,char_end:35"[shape="point",fillcolor="#121013",style=filled];
"c.get('/forbidden').data,type='attribute'\nline_star:205,line_end:205|char_star:11,char_end:35"->"data,type='identifier'\nline_star:205,line_end:205|char_star:31,char_end:35";
"# Don't handle RequestRedirect raised when adding slash.,type='comment'\nline_star:206,line_end:206|char_star:4,char_end:60"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:157,line_end:207|char_star:4,char_end:66"->"# Don't handle RequestRedirect raised when adding slash.,type='comment'\nline_star:206,line_end:206|char_star:4,char_end:60";
"assert c.get('/slash', follow_redirects=True).data == b'slash',type='assert_statement'\nline_star:207,line_end:207|char_star:4,char_end:66"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:157,line_end:207|char_star:4,char_end:66"->"assert c.get('/slash', follow_redirects=True).data == b'slash',type='assert_statement'\nline_star:207,line_end:207|char_star:4,char_end:66";
"c.get('/slash', follow_redirects=True).data == b'slash',type='comparison_operator'\nline_star:207,line_end:207|char_star:11,char_end:66"[shape="box",fillcolor="white",style=filled];
"assert c.get('/slash', follow_redirects=True).data == b'slash',type='assert_statement'\nline_star:207,line_end:207|char_star:4,char_end:66"->"c.get('/slash', follow_redirects=True).data == b'slash',type='comparison_operator'\nline_star:207,line_end:207|char_star:11,char_end:66";
"c.get('/slash', follow_redirects=True).data,type='attribute'\nline_star:207,line_end:207|char_star:11,char_end:54"[shape="box",fillcolor="white",style=filled];
"c.get('/slash', follow_redirects=True).data == b'slash',type='comparison_operator'\nline_star:207,line_end:207|char_star:11,char_end:66"->"c.get('/slash', follow_redirects=True).data,type='attribute'\nline_star:207,line_end:207|char_star:11,char_end:54";
"c.get('/slash', follow_redirects=True),type='call'\nline_star:207,line_end:207|char_star:11,char_end:49"[shape="box",fillcolor="white",style=filled];
"c.get('/slash', follow_redirects=True).data,type='attribute'\nline_star:207,line_end:207|char_star:11,char_end:54"->"c.get('/slash', follow_redirects=True),type='call'\nline_star:207,line_end:207|char_star:11,char_end:49";
"c.get,type='attribute'\nline_star:207,line_end:207|char_star:11,char_end:16"[shape="box",fillcolor="white",style=filled];
"c.get('/slash', follow_redirects=True),type='call'\nline_star:207,line_end:207|char_star:11,char_end:49"->"c.get,type='attribute'\nline_star:207,line_end:207|char_star:11,char_end:16";
"c,type='identifier'\nline_star:207,line_end:207|char_star:11,char_end:12"[shape="point",fillcolor="#121013",style=filled];
"c.get,type='attribute'\nline_star:207,line_end:207|char_star:11,char_end:16"->"c,type='identifier'\nline_star:207,line_end:207|char_star:11,char_end:12";
"get,type='identifier'\nline_star:207,line_end:207|char_star:13,char_end:16"[shape="point",fillcolor="#121013",style=filled];
"c.get,type='attribute'\nline_star:207,line_end:207|char_star:11,char_end:16"->"get,type='identifier'\nline_star:207,line_end:207|char_star:13,char_end:16";
"('/slash', follow_redirects=True),type='argument_list'\nline_star:207,line_end:207|char_star:16,char_end:49"[shape="box",fillcolor="white",style=filled];
"c.get('/slash', follow_redirects=True),type='call'\nline_star:207,line_end:207|char_star:11,char_end:49"->"('/slash', follow_redirects=True),type='argument_list'\nline_star:207,line_end:207|char_star:16,char_end:49";
"follow_redirects=True,type='keyword_argument'\nline_star:207,line_end:207|char_star:27,char_end:48"[shape="box",fillcolor="white",style=filled];
"('/slash', follow_redirects=True),type='argument_list'\nline_star:207,line_end:207|char_star:16,char_end:49"->"follow_redirects=True,type='keyword_argument'\nline_star:207,line_end:207|char_star:27,char_end:48";
"follow_redirects,type='identifier'\nline_star:207,line_end:207|char_star:27,char_end:43"[shape="point",fillcolor="#121013",style=filled];
"follow_redirects=True,type='keyword_argument'\nline_star:207,line_end:207|char_star:27,char_end:48"->"follow_redirects,type='identifier'\nline_star:207,line_end:207|char_star:27,char_end:43";
"data,type='identifier'\nline_star:207,line_end:207|char_star:50,char_end:54"[shape="point",fillcolor="#121013",style=filled];
"c.get('/slash', follow_redirects=True).data,type='attribute'\nline_star:207,line_end:207|char_star:11,char_end:54"->"data,type='identifier'\nline_star:207,line_end:207|char_star:50,char_end:54";
"class TestGenericHandlers:\n    '''Test how very generic handlers are dispatched to.'''\n\n    class Custom(Exception):\n        pass\n\n    @pytest.fixture()\n    def app(self, app):\n        @app.route('/custom')\n        def do_custom():\n            raise self.Custom()\n\n        @app.route('/error')\n        def do_error():\n            raise KeyError()\n\n        @app.route('/abort')\n        def do_abort():\n            flask.abort(500)\n\n        @app.route('/raise')\n        def do_raise():\n            raise InternalServerError()\n\n        app.config['PROPAGATE_EXCEPTIONS'] = False\n        return app\n\n    def report_error(self, e):\n        original = getattr(e, 'original_exception', None)\n\n        if original is not None:\n            return f'wrapped {type(original).__name__}'\n\n        return f'direct {type(e).__name__}'\n\n    @pytest.mark.parametrize('to_handle', (InternalServerError, 500))\n    def test_handle_class_or_code(self, app, client, to_handle):\n        '''``InternalServerError`` and ``500`` are aliases, they should\n        have the same behavior. Both should only receive\n        ``InternalServerError``, which might wrap another error.\n        '''\n\n        @app.errorhandler(to_handle)\n        def handle_500(e):\n            assert isinstance(e, InternalServerError)\n            return self.report_error(e)\n\n        assert client.get('/custom').data == b'wrapped Custom'\n        assert client.get('/error').data == b'wrapped KeyError'\n        assert client.get('/abort').data == b'direct InternalServerError'\n        assert client.get('/raise').data == b'direct InternalServerError'\n\n    def test_handle_generic_http(self, app, client):\n        '''``HTTPException`` should only receive ``HTTPException``\n        subclasses. It will receive ``404`` routing exceptions.\n        '''\n\n        @app.errorhandler(HTTPException)\n        def handle_http(e):\n            assert isinstance(e, HTTPException)\n            return str(e.code)\n\n        assert client.get('/error').data == b'500'\n        assert client.get('/abort').data == b'500'\n        assert client.get('/not-found').data == b'404'\n\n    def test_handle_generic(self, app, client):\n        '''Generic ``Exception`` will handle all exceptions directly,\n        including ``HTTPExceptions``.\n        '''\n\n        @app.errorhandler(Exception)\n        def handle_exception(e):\n            return self.report_error(e)\n\n        assert client.get('/custom').data == b'direct Custom'\n        assert client.get('/error').data == b'direct KeyError'\n        assert client.get('/abort').data == b'direct InternalServerError'\n        assert client.get('/not-found').data == b'direct NotFound',type='class_definition'\nline_star:210,line_end:288|char_star:0,char_end:66"[shape="box",fillcolor="#ffdf91",style=filled];
"MODULE"->"class TestGenericHandlers:\n    '''Test how very generic handlers are dispatched to.'''\n\n    class Custom(Exception):\n        pass\n\n    @pytest.fixture()\n    def app(self, app):\n        @app.route('/custom')\n        def do_custom():\n            raise self.Custom()\n\n        @app.route('/error')\n        def do_error():\n            raise KeyError()\n\n        @app.route('/abort')\n        def do_abort():\n            flask.abort(500)\n\n        @app.route('/raise')\n        def do_raise():\n            raise InternalServerError()\n\n        app.config['PROPAGATE_EXCEPTIONS'] = False\n        return app\n\n    def report_error(self, e):\n        original = getattr(e, 'original_exception', None)\n\n        if original is not None:\n            return f'wrapped {type(original).__name__}'\n\n        return f'direct {type(e).__name__}'\n\n    @pytest.mark.parametrize('to_handle', (InternalServerError, 500))\n    def test_handle_class_or_code(self, app, client, to_handle):\n        '''``InternalServerError`` and ``500`` are aliases, they should\n        have the same behavior. Both should only receive\n        ``InternalServerError``, which might wrap another error.\n        '''\n\n        @app.errorhandler(to_handle)\n        def handle_500(e):\n            assert isinstance(e, InternalServerError)\n            return self.report_error(e)\n\n        assert client.get('/custom').data == b'wrapped Custom'\n        assert client.get('/error').data == b'wrapped KeyError'\n        assert client.get('/abort').data == b'direct InternalServerError'\n        assert client.get('/raise').data == b'direct InternalServerError'\n\n    def test_handle_generic_http(self, app, client):\n        '''``HTTPException`` should only receive ``HTTPException``\n        subclasses. It will receive ``404`` routing exceptions.\n        '''\n\n        @app.errorhandler(HTTPException)\n        def handle_http(e):\n            assert isinstance(e, HTTPException)\n            return str(e.code)\n\n        assert client.get('/error').data == b'500'\n        assert client.get('/abort').data == b'500'\n        assert client.get('/not-found').data == b'404'\n\n    def test_handle_generic(self, app, client):\n        '''Generic ``Exception`` will handle all exceptions directly,\n        including ``HTTPExceptions``.\n        '''\n\n        @app.errorhandler(Exception)\n        def handle_exception(e):\n            return self.report_error(e)\n\n        assert client.get('/custom').data == b'direct Custom'\n        assert client.get('/error').data == b'direct KeyError'\n        assert client.get('/abort').data == b'direct InternalServerError'\n        assert client.get('/not-found').data == b'direct NotFound',type='class_definition'\nline_star:210,line_end:288|char_star:0,char_end:66";
"TestGenericHandlers,type='identifier'\nline_star:210,line_end:210|char_star:6,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"class TestGenericHandlers:\n    '''Test how very generic handlers are dispatched to.'''\n\n    class Custom(Exception):\n        pass\n\n    @pytest.fixture()\n    def app(self, app):\n        @app.route('/custom')\n        def do_custom():\n            raise self.Custom()\n\n        @app.route('/error')\n        def do_error():\n            raise KeyError()\n\n        @app.route('/abort')\n        def do_abort():\n            flask.abort(500)\n\n        @app.route('/raise')\n        def do_raise():\n            raise InternalServerError()\n\n        app.config['PROPAGATE_EXCEPTIONS'] = False\n        return app\n\n    def report_error(self, e):\n        original = getattr(e, 'original_exception', None)\n\n        if original is not None:\n            return f'wrapped {type(original).__name__}'\n\n        return f'direct {type(e).__name__}'\n\n    @pytest.mark.parametrize('to_handle', (InternalServerError, 500))\n    def test_handle_class_or_code(self, app, client, to_handle):\n        '''``InternalServerError`` and ``500`` are aliases, they should\n        have the same behavior. Both should only receive\n        ``InternalServerError``, which might wrap another error.\n        '''\n\n        @app.errorhandler(to_handle)\n        def handle_500(e):\n            assert isinstance(e, InternalServerError)\n            return self.report_error(e)\n\n        assert client.get('/custom').data == b'wrapped Custom'\n        assert client.get('/error').data == b'wrapped KeyError'\n        assert client.get('/abort').data == b'direct InternalServerError'\n        assert client.get('/raise').data == b'direct InternalServerError'\n\n    def test_handle_generic_http(self, app, client):\n        '''``HTTPException`` should only receive ``HTTPException``\n        subclasses. It will receive ``404`` routing exceptions.\n        '''\n\n        @app.errorhandler(HTTPException)\n        def handle_http(e):\n            assert isinstance(e, HTTPException)\n            return str(e.code)\n\n        assert client.get('/error').data == b'500'\n        assert client.get('/abort').data == b'500'\n        assert client.get('/not-found').data == b'404'\n\n    def test_handle_generic(self, app, client):\n        '''Generic ``Exception`` will handle all exceptions directly,\n        including ``HTTPExceptions``.\n        '''\n\n        @app.errorhandler(Exception)\n        def handle_exception(e):\n            return self.report_error(e)\n\n        assert client.get('/custom').data == b'direct Custom'\n        assert client.get('/error').data == b'direct KeyError'\n        assert client.get('/abort').data == b'direct InternalServerError'\n        assert client.get('/not-found').data == b'direct NotFound',type='class_definition'\nline_star:210,line_end:288|char_star:0,char_end:66"->"TestGenericHandlers,type='identifier'\nline_star:210,line_end:210|char_star:6,char_end:25";
"type='INFORMATION BLOCK'\nline_star:211,line_end:288|char_star:4,char_end:66"[shape="point",fillcolor="#121013",style=filled];
"class TestGenericHandlers:\n    '''Test how very generic handlers are dispatched to.'''\n\n    class Custom(Exception):\n        pass\n\n    @pytest.fixture()\n    def app(self, app):\n        @app.route('/custom')\n        def do_custom():\n            raise self.Custom()\n\n        @app.route('/error')\n        def do_error():\n            raise KeyError()\n\n        @app.route('/abort')\n        def do_abort():\n            flask.abort(500)\n\n        @app.route('/raise')\n        def do_raise():\n            raise InternalServerError()\n\n        app.config['PROPAGATE_EXCEPTIONS'] = False\n        return app\n\n    def report_error(self, e):\n        original = getattr(e, 'original_exception', None)\n\n        if original is not None:\n            return f'wrapped {type(original).__name__}'\n\n        return f'direct {type(e).__name__}'\n\n    @pytest.mark.parametrize('to_handle', (InternalServerError, 500))\n    def test_handle_class_or_code(self, app, client, to_handle):\n        '''``InternalServerError`` and ``500`` are aliases, they should\n        have the same behavior. Both should only receive\n        ``InternalServerError``, which might wrap another error.\n        '''\n\n        @app.errorhandler(to_handle)\n        def handle_500(e):\n            assert isinstance(e, InternalServerError)\n            return self.report_error(e)\n\n        assert client.get('/custom').data == b'wrapped Custom'\n        assert client.get('/error').data == b'wrapped KeyError'\n        assert client.get('/abort').data == b'direct InternalServerError'\n        assert client.get('/raise').data == b'direct InternalServerError'\n\n    def test_handle_generic_http(self, app, client):\n        '''``HTTPException`` should only receive ``HTTPException``\n        subclasses. It will receive ``404`` routing exceptions.\n        '''\n\n        @app.errorhandler(HTTPException)\n        def handle_http(e):\n            assert isinstance(e, HTTPException)\n            return str(e.code)\n\n        assert client.get('/error').data == b'500'\n        assert client.get('/abort').data == b'500'\n        assert client.get('/not-found').data == b'404'\n\n    def test_handle_generic(self, app, client):\n        '''Generic ``Exception`` will handle all exceptions directly,\n        including ``HTTPExceptions``.\n        '''\n\n        @app.errorhandler(Exception)\n        def handle_exception(e):\n            return self.report_error(e)\n\n        assert client.get('/custom').data == b'direct Custom'\n        assert client.get('/error').data == b'direct KeyError'\n        assert client.get('/abort').data == b'direct InternalServerError'\n        assert client.get('/not-found').data == b'direct NotFound',type='class_definition'\nline_star:210,line_end:288|char_star:0,char_end:66"->"type='INFORMATION BLOCK'\nline_star:211,line_end:288|char_star:4,char_end:66";
"class Custom(Exception):\n        pass,type='class_definition'\nline_star:213,line_end:214|char_star:4,char_end:12"[shape="box",fillcolor="#ffdf91",style=filled];
"type='INFORMATION BLOCK'\nline_star:211,line_end:288|char_star:4,char_end:66"->"class Custom(Exception):\n        pass,type='class_definition'\nline_star:213,line_end:214|char_star:4,char_end:12";
"Custom,type='identifier'\nline_star:213,line_end:213|char_star:10,char_end:16"[shape="point",fillcolor="#121013",style=filled];
"class Custom(Exception):\n        pass,type='class_definition'\nline_star:213,line_end:214|char_star:4,char_end:12"->"Custom,type='identifier'\nline_star:213,line_end:213|char_star:10,char_end:16";
"(Exception),type='argument_list'\nline_star:213,line_end:213|char_star:16,char_end:27"[shape="box",fillcolor="white",style=filled];
"class Custom(Exception):\n        pass,type='class_definition'\nline_star:213,line_end:214|char_star:4,char_end:12"->"(Exception),type='argument_list'\nline_star:213,line_end:213|char_star:16,char_end:27";
"Exception,type='identifier'\nline_star:213,line_end:213|char_star:17,char_end:26"[shape="point",fillcolor="#121013",style=filled];
"(Exception),type='argument_list'\nline_star:213,line_end:213|char_star:16,char_end:27"->"Exception,type='identifier'\nline_star:213,line_end:213|char_star:17,char_end:26";
"type='INFORMATION BLOCK'\nline_star:214,line_end:214|char_star:8,char_end:12"[shape="point",fillcolor="#121013",style=filled];
"class Custom(Exception):\n        pass,type='class_definition'\nline_star:213,line_end:214|char_star:4,char_end:12"->"type='INFORMATION BLOCK'\nline_star:214,line_end:214|char_star:8,char_end:12";
"pass,type='pass_statement'\nline_star:214,line_end:214|char_star:8,char_end:12"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:214,line_end:214|char_star:8,char_end:12"->"pass,type='pass_statement'\nline_star:214,line_end:214|char_star:8,char_end:12";
"pass,type='pass'\nline_star:214,line_end:214|char_star:8,char_end:12"[shape="box",fillcolor="white",style=filled];
"pass,type='pass_statement'\nline_star:214,line_end:214|char_star:8,char_end:12"->"pass,type='pass'\nline_star:214,line_end:214|char_star:8,char_end:12";
"@pytest.fixture()\n    def app(self, app):\n        @app.route('/custom')\n        def do_custom():\n            raise self.Custom()\n\n        @app.route('/error')\n        def do_error():\n            raise KeyError()\n\n        @app.route('/abort')\n        def do_abort():\n            flask.abort(500)\n\n        @app.route('/raise')\n        def do_raise():\n            raise InternalServerError()\n\n        app.config['PROPAGATE_EXCEPTIONS'] = False\n        return app,type='decorated_definition'\nline_star:216,line_end:235|char_star:4,char_end:18"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:211,line_end:288|char_star:4,char_end:66"->"@pytest.fixture()\n    def app(self, app):\n        @app.route('/custom')\n        def do_custom():\n            raise self.Custom()\n\n        @app.route('/error')\n        def do_error():\n            raise KeyError()\n\n        @app.route('/abort')\n        def do_abort():\n            flask.abort(500)\n\n        @app.route('/raise')\n        def do_raise():\n            raise InternalServerError()\n\n        app.config['PROPAGATE_EXCEPTIONS'] = False\n        return app,type='decorated_definition'\nline_star:216,line_end:235|char_star:4,char_end:18";
"@pytest.fixture(),type='decorator'\nline_star:216,line_end:216|char_star:4,char_end:21"[shape="box",fillcolor="white",style=filled];
"@pytest.fixture()\n    def app(self, app):\n        @app.route('/custom')\n        def do_custom():\n            raise self.Custom()\n\n        @app.route('/error')\n        def do_error():\n            raise KeyError()\n\n        @app.route('/abort')\n        def do_abort():\n            flask.abort(500)\n\n        @app.route('/raise')\n        def do_raise():\n            raise InternalServerError()\n\n        app.config['PROPAGATE_EXCEPTIONS'] = False\n        return app,type='decorated_definition'\nline_star:216,line_end:235|char_star:4,char_end:18"->"@pytest.fixture(),type='decorator'\nline_star:216,line_end:216|char_star:4,char_end:21";
"def app(self, app):\n        @app.route('/custom')\n        def do_custom():\n            raise self.Custom()\n\n        @app.route('/error')\n        def do_error():\n            raise KeyError()\n\n        @app.route('/abort')\n        def do_abort():\n            flask.abort(500)\n\n        @app.route('/raise')\n        def do_raise():\n            raise InternalServerError()\n\n        app.config['PROPAGATE_EXCEPTIONS'] = False\n        return app,type='function_definition'\nline_star:217,line_end:235|char_star:4,char_end:18"[shape="box",fillcolor="#cee6b4",style=filled];
"@pytest.fixture()\n    def app(self, app):\n        @app.route('/custom')\n        def do_custom():\n            raise self.Custom()\n\n        @app.route('/error')\n        def do_error():\n            raise KeyError()\n\n        @app.route('/abort')\n        def do_abort():\n            flask.abort(500)\n\n        @app.route('/raise')\n        def do_raise():\n            raise InternalServerError()\n\n        app.config['PROPAGATE_EXCEPTIONS'] = False\n        return app,type='decorated_definition'\nline_star:216,line_end:235|char_star:4,char_end:18"->"def app(self, app):\n        @app.route('/custom')\n        def do_custom():\n            raise self.Custom()\n\n        @app.route('/error')\n        def do_error():\n            raise KeyError()\n\n        @app.route('/abort')\n        def do_abort():\n            flask.abort(500)\n\n        @app.route('/raise')\n        def do_raise():\n            raise InternalServerError()\n\n        app.config['PROPAGATE_EXCEPTIONS'] = False\n        return app,type='function_definition'\nline_star:217,line_end:235|char_star:4,char_end:18";
"app,type='identifier'\nline_star:217,line_end:217|char_star:8,char_end:11"[shape="point",fillcolor="#121013",style=filled];
"def app(self, app):\n        @app.route('/custom')\n        def do_custom():\n            raise self.Custom()\n\n        @app.route('/error')\n        def do_error():\n            raise KeyError()\n\n        @app.route('/abort')\n        def do_abort():\n            flask.abort(500)\n\n        @app.route('/raise')\n        def do_raise():\n            raise InternalServerError()\n\n        app.config['PROPAGATE_EXCEPTIONS'] = False\n        return app,type='function_definition'\nline_star:217,line_end:235|char_star:4,char_end:18"->"app,type='identifier'\nline_star:217,line_end:217|char_star:8,char_end:11";
"(self, app),type='parameters'\nline_star:217,line_end:217|char_star:11,char_end:22"[shape="box",fillcolor="white",style=filled];
"def app(self, app):\n        @app.route('/custom')\n        def do_custom():\n            raise self.Custom()\n\n        @app.route('/error')\n        def do_error():\n            raise KeyError()\n\n        @app.route('/abort')\n        def do_abort():\n            flask.abort(500)\n\n        @app.route('/raise')\n        def do_raise():\n            raise InternalServerError()\n\n        app.config['PROPAGATE_EXCEPTIONS'] = False\n        return app,type='function_definition'\nline_star:217,line_end:235|char_star:4,char_end:18"->"(self, app),type='parameters'\nline_star:217,line_end:217|char_star:11,char_end:22";
"self,type='identifier'\nline_star:217,line_end:217|char_star:12,char_end:16"[shape="point",fillcolor="#121013",style=filled];
"(self, app),type='parameters'\nline_star:217,line_end:217|char_star:11,char_end:22"->"self,type='identifier'\nline_star:217,line_end:217|char_star:12,char_end:16";
"app,type='identifier'\nline_star:217,line_end:217|char_star:18,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"(self, app),type='parameters'\nline_star:217,line_end:217|char_star:11,char_end:22"->"app,type='identifier'\nline_star:217,line_end:217|char_star:18,char_end:21";
"type='INFORMATION BLOCK'\nline_star:218,line_end:235|char_star:8,char_end:18"[shape="point",fillcolor="#121013",style=filled];
"def app(self, app):\n        @app.route('/custom')\n        def do_custom():\n            raise self.Custom()\n\n        @app.route('/error')\n        def do_error():\n            raise KeyError()\n\n        @app.route('/abort')\n        def do_abort():\n            flask.abort(500)\n\n        @app.route('/raise')\n        def do_raise():\n            raise InternalServerError()\n\n        app.config['PROPAGATE_EXCEPTIONS'] = False\n        return app,type='function_definition'\nline_star:217,line_end:235|char_star:4,char_end:18"->"type='INFORMATION BLOCK'\nline_star:218,line_end:235|char_star:8,char_end:18";
"@app.route('/custom')\n        def do_custom():\n            raise self.Custom(),type='decorated_definition'\nline_star:218,line_end:220|char_star:8,char_end:31"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:218,line_end:235|char_star:8,char_end:18"->"@app.route('/custom')\n        def do_custom():\n            raise self.Custom(),type='decorated_definition'\nline_star:218,line_end:220|char_star:8,char_end:31";
"@app.route('/custom'),type='decorator'\nline_star:218,line_end:218|char_star:8,char_end:29"[shape="box",fillcolor="white",style=filled];
"@app.route('/custom')\n        def do_custom():\n            raise self.Custom(),type='decorated_definition'\nline_star:218,line_end:220|char_star:8,char_end:31"->"@app.route('/custom'),type='decorator'\nline_star:218,line_end:218|char_star:8,char_end:29";
"def do_custom():\n            raise self.Custom(),type='function_definition'\nline_star:219,line_end:220|char_star:8,char_end:31"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.route('/custom')\n        def do_custom():\n            raise self.Custom(),type='decorated_definition'\nline_star:218,line_end:220|char_star:8,char_end:31"->"def do_custom():\n            raise self.Custom(),type='function_definition'\nline_star:219,line_end:220|char_star:8,char_end:31";
"do_custom,type='identifier'\nline_star:219,line_end:219|char_star:12,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"def do_custom():\n            raise self.Custom(),type='function_definition'\nline_star:219,line_end:220|char_star:8,char_end:31"->"do_custom,type='identifier'\nline_star:219,line_end:219|char_star:12,char_end:21";
"type='INFORMATION BLOCK'\nline_star:220,line_end:220|char_star:12,char_end:31"[shape="point",fillcolor="#121013",style=filled];
"def do_custom():\n            raise self.Custom(),type='function_definition'\nline_star:219,line_end:220|char_star:8,char_end:31"->"type='INFORMATION BLOCK'\nline_star:220,line_end:220|char_star:12,char_end:31";
"raise self.Custom(),type='raise_statement'\nline_star:220,line_end:220|char_star:12,char_end:31"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:220,line_end:220|char_star:12,char_end:31"->"raise self.Custom(),type='raise_statement'\nline_star:220,line_end:220|char_star:12,char_end:31";
"raise,type='raise'\nline_star:220,line_end:220|char_star:12,char_end:17"[shape="box",fillcolor="white",style=filled];
"raise self.Custom(),type='raise_statement'\nline_star:220,line_end:220|char_star:12,char_end:31"->"raise,type='raise'\nline_star:220,line_end:220|char_star:12,char_end:17";
"self.Custom(),type='call'\nline_star:220,line_end:220|char_star:18,char_end:31"[shape="box",fillcolor="white",style=filled];
"raise self.Custom(),type='raise_statement'\nline_star:220,line_end:220|char_star:12,char_end:31"->"self.Custom(),type='call'\nline_star:220,line_end:220|char_star:18,char_end:31";
"self.Custom,type='attribute'\nline_star:220,line_end:220|char_star:18,char_end:29"[shape="box",fillcolor="white",style=filled];
"self.Custom(),type='call'\nline_star:220,line_end:220|char_star:18,char_end:31"->"self.Custom,type='attribute'\nline_star:220,line_end:220|char_star:18,char_end:29";
"self,type='identifier'\nline_star:220,line_end:220|char_star:18,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"self.Custom,type='attribute'\nline_star:220,line_end:220|char_star:18,char_end:29"->"self,type='identifier'\nline_star:220,line_end:220|char_star:18,char_end:22";
"Custom,type='identifier'\nline_star:220,line_end:220|char_star:23,char_end:29"[shape="point",fillcolor="#121013",style=filled];
"self.Custom,type='attribute'\nline_star:220,line_end:220|char_star:18,char_end:29"->"Custom,type='identifier'\nline_star:220,line_end:220|char_star:23,char_end:29";
"@app.route('/error')\n        def do_error():\n            raise KeyError(),type='decorated_definition'\nline_star:222,line_end:224|char_star:8,char_end:28"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:218,line_end:235|char_star:8,char_end:18"->"@app.route('/error')\n        def do_error():\n            raise KeyError(),type='decorated_definition'\nline_star:222,line_end:224|char_star:8,char_end:28";
"@app.route('/error'),type='decorator'\nline_star:222,line_end:222|char_star:8,char_end:28"[shape="box",fillcolor="white",style=filled];
"@app.route('/error')\n        def do_error():\n            raise KeyError(),type='decorated_definition'\nline_star:222,line_end:224|char_star:8,char_end:28"->"@app.route('/error'),type='decorator'\nline_star:222,line_end:222|char_star:8,char_end:28";
"def do_error():\n            raise KeyError(),type='function_definition'\nline_star:223,line_end:224|char_star:8,char_end:28"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.route('/error')\n        def do_error():\n            raise KeyError(),type='decorated_definition'\nline_star:222,line_end:224|char_star:8,char_end:28"->"def do_error():\n            raise KeyError(),type='function_definition'\nline_star:223,line_end:224|char_star:8,char_end:28";
"do_error,type='identifier'\nline_star:223,line_end:223|char_star:12,char_end:20"[shape="point",fillcolor="#121013",style=filled];
"def do_error():\n            raise KeyError(),type='function_definition'\nline_star:223,line_end:224|char_star:8,char_end:28"->"do_error,type='identifier'\nline_star:223,line_end:223|char_star:12,char_end:20";
"type='INFORMATION BLOCK'\nline_star:224,line_end:224|char_star:12,char_end:28"[shape="point",fillcolor="#121013",style=filled];
"def do_error():\n            raise KeyError(),type='function_definition'\nline_star:223,line_end:224|char_star:8,char_end:28"->"type='INFORMATION BLOCK'\nline_star:224,line_end:224|char_star:12,char_end:28";
"raise KeyError(),type='raise_statement'\nline_star:224,line_end:224|char_star:12,char_end:28"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:224,line_end:224|char_star:12,char_end:28"->"raise KeyError(),type='raise_statement'\nline_star:224,line_end:224|char_star:12,char_end:28";
"raise,type='raise'\nline_star:224,line_end:224|char_star:12,char_end:17"[shape="box",fillcolor="white",style=filled];
"raise KeyError(),type='raise_statement'\nline_star:224,line_end:224|char_star:12,char_end:28"->"raise,type='raise'\nline_star:224,line_end:224|char_star:12,char_end:17";
"KeyError(),type='call'\nline_star:224,line_end:224|char_star:18,char_end:28"[shape="box",fillcolor="white",style=filled];
"raise KeyError(),type='raise_statement'\nline_star:224,line_end:224|char_star:12,char_end:28"->"KeyError(),type='call'\nline_star:224,line_end:224|char_star:18,char_end:28";
"KeyError,type='identifier'\nline_star:224,line_end:224|char_star:18,char_end:26"[shape="point",fillcolor="#121013",style=filled];
"KeyError(),type='call'\nline_star:224,line_end:224|char_star:18,char_end:28"->"KeyError,type='identifier'\nline_star:224,line_end:224|char_star:18,char_end:26";
"@app.route('/abort')\n        def do_abort():\n            flask.abort(500),type='decorated_definition'\nline_star:226,line_end:228|char_star:8,char_end:28"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:218,line_end:235|char_star:8,char_end:18"->"@app.route('/abort')\n        def do_abort():\n            flask.abort(500),type='decorated_definition'\nline_star:226,line_end:228|char_star:8,char_end:28";
"@app.route('/abort'),type='decorator'\nline_star:226,line_end:226|char_star:8,char_end:28"[shape="box",fillcolor="white",style=filled];
"@app.route('/abort')\n        def do_abort():\n            flask.abort(500),type='decorated_definition'\nline_star:226,line_end:228|char_star:8,char_end:28"->"@app.route('/abort'),type='decorator'\nline_star:226,line_end:226|char_star:8,char_end:28";
"def do_abort():\n            flask.abort(500),type='function_definition'\nline_star:227,line_end:228|char_star:8,char_end:28"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.route('/abort')\n        def do_abort():\n            flask.abort(500),type='decorated_definition'\nline_star:226,line_end:228|char_star:8,char_end:28"->"def do_abort():\n            flask.abort(500),type='function_definition'\nline_star:227,line_end:228|char_star:8,char_end:28";
"do_abort,type='identifier'\nline_star:227,line_end:227|char_star:12,char_end:20"[shape="point",fillcolor="#121013",style=filled];
"def do_abort():\n            flask.abort(500),type='function_definition'\nline_star:227,line_end:228|char_star:8,char_end:28"->"do_abort,type='identifier'\nline_star:227,line_end:227|char_star:12,char_end:20";
"type='INFORMATION BLOCK'\nline_star:228,line_end:228|char_star:12,char_end:28"[shape="point",fillcolor="#121013",style=filled];
"def do_abort():\n            flask.abort(500),type='function_definition'\nline_star:227,line_end:228|char_star:8,char_end:28"->"type='INFORMATION BLOCK'\nline_star:228,line_end:228|char_star:12,char_end:28";
"@app.route('/raise')\n        def do_raise():\n            raise InternalServerError(),type='decorated_definition'\nline_star:230,line_end:232|char_star:8,char_end:39"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:218,line_end:235|char_star:8,char_end:18"->"@app.route('/raise')\n        def do_raise():\n            raise InternalServerError(),type='decorated_definition'\nline_star:230,line_end:232|char_star:8,char_end:39";
"@app.route('/raise'),type='decorator'\nline_star:230,line_end:230|char_star:8,char_end:28"[shape="box",fillcolor="white",style=filled];
"@app.route('/raise')\n        def do_raise():\n            raise InternalServerError(),type='decorated_definition'\nline_star:230,line_end:232|char_star:8,char_end:39"->"@app.route('/raise'),type='decorator'\nline_star:230,line_end:230|char_star:8,char_end:28";
"def do_raise():\n            raise InternalServerError(),type='function_definition'\nline_star:231,line_end:232|char_star:8,char_end:39"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.route('/raise')\n        def do_raise():\n            raise InternalServerError(),type='decorated_definition'\nline_star:230,line_end:232|char_star:8,char_end:39"->"def do_raise():\n            raise InternalServerError(),type='function_definition'\nline_star:231,line_end:232|char_star:8,char_end:39";
"do_raise,type='identifier'\nline_star:231,line_end:231|char_star:12,char_end:20"[shape="point",fillcolor="#121013",style=filled];
"def do_raise():\n            raise InternalServerError(),type='function_definition'\nline_star:231,line_end:232|char_star:8,char_end:39"->"do_raise,type='identifier'\nline_star:231,line_end:231|char_star:12,char_end:20";
"type='INFORMATION BLOCK'\nline_star:232,line_end:232|char_star:12,char_end:39"[shape="point",fillcolor="#121013",style=filled];
"def do_raise():\n            raise InternalServerError(),type='function_definition'\nline_star:231,line_end:232|char_star:8,char_end:39"->"type='INFORMATION BLOCK'\nline_star:232,line_end:232|char_star:12,char_end:39";
"raise InternalServerError(),type='raise_statement'\nline_star:232,line_end:232|char_star:12,char_end:39"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:232,line_end:232|char_star:12,char_end:39"->"raise InternalServerError(),type='raise_statement'\nline_star:232,line_end:232|char_star:12,char_end:39";
"raise,type='raise'\nline_star:232,line_end:232|char_star:12,char_end:17"[shape="box",fillcolor="white",style=filled];
"raise InternalServerError(),type='raise_statement'\nline_star:232,line_end:232|char_star:12,char_end:39"->"raise,type='raise'\nline_star:232,line_end:232|char_star:12,char_end:17";
"InternalServerError(),type='call'\nline_star:232,line_end:232|char_star:18,char_end:39"[shape="box",fillcolor="white",style=filled];
"raise InternalServerError(),type='raise_statement'\nline_star:232,line_end:232|char_star:12,char_end:39"->"InternalServerError(),type='call'\nline_star:232,line_end:232|char_star:18,char_end:39";
"InternalServerError,type='identifier'\nline_star:232,line_end:232|char_star:18,char_end:37"[shape="point",fillcolor="#121013",style=filled];
"InternalServerError(),type='call'\nline_star:232,line_end:232|char_star:18,char_end:39"->"InternalServerError,type='identifier'\nline_star:232,line_end:232|char_star:18,char_end:37";
"return app,type='return_statement'\nline_star:235,line_end:235|char_star:8,char_end:18"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:218,line_end:235|char_star:8,char_end:18"->"return app,type='return_statement'\nline_star:235,line_end:235|char_star:8,char_end:18";
"def report_error(self, e):\n        original = getattr(e, 'original_exception', None)\n\n        if original is not None:\n            return f'wrapped {type(original).__name__}'\n\n        return f'direct {type(e).__name__}',type='function_definition'\nline_star:237,line_end:243|char_star:4,char_end:43"[shape="box",fillcolor="#cee6b4",style=filled];
"type='INFORMATION BLOCK'\nline_star:211,line_end:288|char_star:4,char_end:66"->"def report_error(self, e):\n        original = getattr(e, 'original_exception', None)\n\n        if original is not None:\n            return f'wrapped {type(original).__name__}'\n\n        return f'direct {type(e).__name__}',type='function_definition'\nline_star:237,line_end:243|char_star:4,char_end:43";
"report_error,type='identifier'\nline_star:237,line_end:237|char_star:8,char_end:20"[shape="point",fillcolor="#121013",style=filled];
"def report_error(self, e):\n        original = getattr(e, 'original_exception', None)\n\n        if original is not None:\n            return f'wrapped {type(original).__name__}'\n\n        return f'direct {type(e).__name__}',type='function_definition'\nline_star:237,line_end:243|char_star:4,char_end:43"->"report_error,type='identifier'\nline_star:237,line_end:237|char_star:8,char_end:20";
"(self, e),type='parameters'\nline_star:237,line_end:237|char_star:20,char_end:29"[shape="box",fillcolor="white",style=filled];
"def report_error(self, e):\n        original = getattr(e, 'original_exception', None)\n\n        if original is not None:\n            return f'wrapped {type(original).__name__}'\n\n        return f'direct {type(e).__name__}',type='function_definition'\nline_star:237,line_end:243|char_star:4,char_end:43"->"(self, e),type='parameters'\nline_star:237,line_end:237|char_star:20,char_end:29";
"self,type='identifier'\nline_star:237,line_end:237|char_star:21,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"(self, e),type='parameters'\nline_star:237,line_end:237|char_star:20,char_end:29"->"self,type='identifier'\nline_star:237,line_end:237|char_star:21,char_end:25";
"e,type='identifier'\nline_star:237,line_end:237|char_star:27,char_end:28"[shape="point",fillcolor="#121013",style=filled];
"(self, e),type='parameters'\nline_star:237,line_end:237|char_star:20,char_end:29"->"e,type='identifier'\nline_star:237,line_end:237|char_star:27,char_end:28";
"type='INFORMATION BLOCK'\nline_star:238,line_end:243|char_star:8,char_end:43"[shape="point",fillcolor="#121013",style=filled];
"def report_error(self, e):\n        original = getattr(e, 'original_exception', None)\n\n        if original is not None:\n            return f'wrapped {type(original).__name__}'\n\n        return f'direct {type(e).__name__}',type='function_definition'\nline_star:237,line_end:243|char_star:4,char_end:43"->"type='INFORMATION BLOCK'\nline_star:238,line_end:243|char_star:8,char_end:43";
"if original is not None:\n            return f'wrapped {type(original).__name__}',type='if_statement'\nline_star:240,line_end:241|char_star:8,char_end:55"[shape="box",fillcolor="#9ecca4",style=filled];
"type='INFORMATION BLOCK'\nline_star:238,line_end:243|char_star:8,char_end:43"->"if original is not None:\n            return f'wrapped {type(original).__name__}',type='if_statement'\nline_star:240,line_end:241|char_star:8,char_end:55";
"return f'direct {type(e).__name__}',type='return_statement'\nline_star:243,line_end:243|char_star:8,char_end:43"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:238,line_end:243|char_star:8,char_end:43"->"return f'direct {type(e).__name__}',type='return_statement'\nline_star:243,line_end:243|char_star:8,char_end:43";
"@pytest.mark.parametrize('to_handle', (InternalServerError, 500))\n    def test_handle_class_or_code(self, app, client, to_handle):\n        '''``InternalServerError`` and ``500`` are aliases, they should\n        have the same behavior. Both should only receive\n        ``InternalServerError``, which might wrap another error.\n        '''\n\n        @app.errorhandler(to_handle)\n        def handle_500(e):\n            assert isinstance(e, InternalServerError)\n            return self.report_error(e)\n\n        assert client.get('/custom').data == b'wrapped Custom'\n        assert client.get('/error').data == b'wrapped KeyError'\n        assert client.get('/abort').data == b'direct InternalServerError'\n        assert client.get('/raise').data == b'direct InternalServerError',type='decorated_definition'\nline_star:245,line_end:260|char_star:4,char_end:73"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:211,line_end:288|char_star:4,char_end:66"->"@pytest.mark.parametrize('to_handle', (InternalServerError, 500))\n    def test_handle_class_or_code(self, app, client, to_handle):\n        '''``InternalServerError`` and ``500`` are aliases, they should\n        have the same behavior. Both should only receive\n        ``InternalServerError``, which might wrap another error.\n        '''\n\n        @app.errorhandler(to_handle)\n        def handle_500(e):\n            assert isinstance(e, InternalServerError)\n            return self.report_error(e)\n\n        assert client.get('/custom').data == b'wrapped Custom'\n        assert client.get('/error').data == b'wrapped KeyError'\n        assert client.get('/abort').data == b'direct InternalServerError'\n        assert client.get('/raise').data == b'direct InternalServerError',type='decorated_definition'\nline_star:245,line_end:260|char_star:4,char_end:73";
"@pytest.mark.parametrize('to_handle', (InternalServerError, 500)),type='decorator'\nline_star:245,line_end:245|char_star:4,char_end:69"[shape="box",fillcolor="white",style=filled];
"@pytest.mark.parametrize('to_handle', (InternalServerError, 500))\n    def test_handle_class_or_code(self, app, client, to_handle):\n        '''``InternalServerError`` and ``500`` are aliases, they should\n        have the same behavior. Both should only receive\n        ``InternalServerError``, which might wrap another error.\n        '''\n\n        @app.errorhandler(to_handle)\n        def handle_500(e):\n            assert isinstance(e, InternalServerError)\n            return self.report_error(e)\n\n        assert client.get('/custom').data == b'wrapped Custom'\n        assert client.get('/error').data == b'wrapped KeyError'\n        assert client.get('/abort').data == b'direct InternalServerError'\n        assert client.get('/raise').data == b'direct InternalServerError',type='decorated_definition'\nline_star:245,line_end:260|char_star:4,char_end:73"->"@pytest.mark.parametrize('to_handle', (InternalServerError, 500)),type='decorator'\nline_star:245,line_end:245|char_star:4,char_end:69";
"def test_handle_class_or_code(self, app, client, to_handle):\n        '''``InternalServerError`` and ``500`` are aliases, they should\n        have the same behavior. Both should only receive\n        ``InternalServerError``, which might wrap another error.\n        '''\n\n        @app.errorhandler(to_handle)\n        def handle_500(e):\n            assert isinstance(e, InternalServerError)\n            return self.report_error(e)\n\n        assert client.get('/custom').data == b'wrapped Custom'\n        assert client.get('/error').data == b'wrapped KeyError'\n        assert client.get('/abort').data == b'direct InternalServerError'\n        assert client.get('/raise').data == b'direct InternalServerError',type='function_definition'\nline_star:246,line_end:260|char_star:4,char_end:73"[shape="box",fillcolor="#cee6b4",style=filled];
"@pytest.mark.parametrize('to_handle', (InternalServerError, 500))\n    def test_handle_class_or_code(self, app, client, to_handle):\n        '''``InternalServerError`` and ``500`` are aliases, they should\n        have the same behavior. Both should only receive\n        ``InternalServerError``, which might wrap another error.\n        '''\n\n        @app.errorhandler(to_handle)\n        def handle_500(e):\n            assert isinstance(e, InternalServerError)\n            return self.report_error(e)\n\n        assert client.get('/custom').data == b'wrapped Custom'\n        assert client.get('/error').data == b'wrapped KeyError'\n        assert client.get('/abort').data == b'direct InternalServerError'\n        assert client.get('/raise').data == b'direct InternalServerError',type='decorated_definition'\nline_star:245,line_end:260|char_star:4,char_end:73"->"def test_handle_class_or_code(self, app, client, to_handle):\n        '''``InternalServerError`` and ``500`` are aliases, they should\n        have the same behavior. Both should only receive\n        ``InternalServerError``, which might wrap another error.\n        '''\n\n        @app.errorhandler(to_handle)\n        def handle_500(e):\n            assert isinstance(e, InternalServerError)\n            return self.report_error(e)\n\n        assert client.get('/custom').data == b'wrapped Custom'\n        assert client.get('/error').data == b'wrapped KeyError'\n        assert client.get('/abort').data == b'direct InternalServerError'\n        assert client.get('/raise').data == b'direct InternalServerError',type='function_definition'\nline_star:246,line_end:260|char_star:4,char_end:73";
"test_handle_class_or_code,type='identifier'\nline_star:246,line_end:246|char_star:8,char_end:33"[shape="point",fillcolor="#121013",style=filled];
"def test_handle_class_or_code(self, app, client, to_handle):\n        '''``InternalServerError`` and ``500`` are aliases, they should\n        have the same behavior. Both should only receive\n        ``InternalServerError``, which might wrap another error.\n        '''\n\n        @app.errorhandler(to_handle)\n        def handle_500(e):\n            assert isinstance(e, InternalServerError)\n            return self.report_error(e)\n\n        assert client.get('/custom').data == b'wrapped Custom'\n        assert client.get('/error').data == b'wrapped KeyError'\n        assert client.get('/abort').data == b'direct InternalServerError'\n        assert client.get('/raise').data == b'direct InternalServerError',type='function_definition'\nline_star:246,line_end:260|char_star:4,char_end:73"->"test_handle_class_or_code,type='identifier'\nline_star:246,line_end:246|char_star:8,char_end:33";
"(self, app, client, to_handle),type='parameters'\nline_star:246,line_end:246|char_star:33,char_end:63"[shape="box",fillcolor="white",style=filled];
"def test_handle_class_or_code(self, app, client, to_handle):\n        '''``InternalServerError`` and ``500`` are aliases, they should\n        have the same behavior. Both should only receive\n        ``InternalServerError``, which might wrap another error.\n        '''\n\n        @app.errorhandler(to_handle)\n        def handle_500(e):\n            assert isinstance(e, InternalServerError)\n            return self.report_error(e)\n\n        assert client.get('/custom').data == b'wrapped Custom'\n        assert client.get('/error').data == b'wrapped KeyError'\n        assert client.get('/abort').data == b'direct InternalServerError'\n        assert client.get('/raise').data == b'direct InternalServerError',type='function_definition'\nline_star:246,line_end:260|char_star:4,char_end:73"->"(self, app, client, to_handle),type='parameters'\nline_star:246,line_end:246|char_star:33,char_end:63";
"self,type='identifier'\nline_star:246,line_end:246|char_star:34,char_end:38"[shape="point",fillcolor="#121013",style=filled];
"(self, app, client, to_handle),type='parameters'\nline_star:246,line_end:246|char_star:33,char_end:63"->"self,type='identifier'\nline_star:246,line_end:246|char_star:34,char_end:38";
"app,type='identifier'\nline_star:246,line_end:246|char_star:40,char_end:43"[shape="point",fillcolor="#121013",style=filled];
"(self, app, client, to_handle),type='parameters'\nline_star:246,line_end:246|char_star:33,char_end:63"->"app,type='identifier'\nline_star:246,line_end:246|char_star:40,char_end:43";
"client,type='identifier'\nline_star:246,line_end:246|char_star:45,char_end:51"[shape="point",fillcolor="#121013",style=filled];
"(self, app, client, to_handle),type='parameters'\nline_star:246,line_end:246|char_star:33,char_end:63"->"client,type='identifier'\nline_star:246,line_end:246|char_star:45,char_end:51";
"to_handle,type='identifier'\nline_star:246,line_end:246|char_star:53,char_end:62"[shape="point",fillcolor="#121013",style=filled];
"(self, app, client, to_handle),type='parameters'\nline_star:246,line_end:246|char_star:33,char_end:63"->"to_handle,type='identifier'\nline_star:246,line_end:246|char_star:53,char_end:62";
"type='INFORMATION BLOCK'\nline_star:247,line_end:260|char_star:8,char_end:73"[shape="point",fillcolor="#121013",style=filled];
"def test_handle_class_or_code(self, app, client, to_handle):\n        '''``InternalServerError`` and ``500`` are aliases, they should\n        have the same behavior. Both should only receive\n        ``InternalServerError``, which might wrap another error.\n        '''\n\n        @app.errorhandler(to_handle)\n        def handle_500(e):\n            assert isinstance(e, InternalServerError)\n            return self.report_error(e)\n\n        assert client.get('/custom').data == b'wrapped Custom'\n        assert client.get('/error').data == b'wrapped KeyError'\n        assert client.get('/abort').data == b'direct InternalServerError'\n        assert client.get('/raise').data == b'direct InternalServerError',type='function_definition'\nline_star:246,line_end:260|char_star:4,char_end:73"->"type='INFORMATION BLOCK'\nline_star:247,line_end:260|char_star:8,char_end:73";
"@app.errorhandler(to_handle)\n        def handle_500(e):\n            assert isinstance(e, InternalServerError)\n            return self.report_error(e),type='decorated_definition'\nline_star:252,line_end:255|char_star:8,char_end:39"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:247,line_end:260|char_star:8,char_end:73"->"@app.errorhandler(to_handle)\n        def handle_500(e):\n            assert isinstance(e, InternalServerError)\n            return self.report_error(e),type='decorated_definition'\nline_star:252,line_end:255|char_star:8,char_end:39";
"@app.errorhandler(to_handle),type='decorator'\nline_star:252,line_end:252|char_star:8,char_end:36"[shape="box",fillcolor="white",style=filled];
"@app.errorhandler(to_handle)\n        def handle_500(e):\n            assert isinstance(e, InternalServerError)\n            return self.report_error(e),type='decorated_definition'\nline_star:252,line_end:255|char_star:8,char_end:39"->"@app.errorhandler(to_handle),type='decorator'\nline_star:252,line_end:252|char_star:8,char_end:36";
"def handle_500(e):\n            assert isinstance(e, InternalServerError)\n            return self.report_error(e),type='function_definition'\nline_star:253,line_end:255|char_star:8,char_end:39"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.errorhandler(to_handle)\n        def handle_500(e):\n            assert isinstance(e, InternalServerError)\n            return self.report_error(e),type='decorated_definition'\nline_star:252,line_end:255|char_star:8,char_end:39"->"def handle_500(e):\n            assert isinstance(e, InternalServerError)\n            return self.report_error(e),type='function_definition'\nline_star:253,line_end:255|char_star:8,char_end:39";
"handle_500,type='identifier'\nline_star:253,line_end:253|char_star:12,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"def handle_500(e):\n            assert isinstance(e, InternalServerError)\n            return self.report_error(e),type='function_definition'\nline_star:253,line_end:255|char_star:8,char_end:39"->"handle_500,type='identifier'\nline_star:253,line_end:253|char_star:12,char_end:22";
"(e),type='parameters'\nline_star:253,line_end:253|char_star:22,char_end:25"[shape="box",fillcolor="white",style=filled];
"def handle_500(e):\n            assert isinstance(e, InternalServerError)\n            return self.report_error(e),type='function_definition'\nline_star:253,line_end:255|char_star:8,char_end:39"->"(e),type='parameters'\nline_star:253,line_end:253|char_star:22,char_end:25";
"e,type='identifier'\nline_star:253,line_end:253|char_star:23,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"(e),type='parameters'\nline_star:253,line_end:253|char_star:22,char_end:25"->"e,type='identifier'\nline_star:253,line_end:253|char_star:23,char_end:24";
"type='INFORMATION BLOCK'\nline_star:254,line_end:255|char_star:12,char_end:39"[shape="point",fillcolor="#121013",style=filled];
"def handle_500(e):\n            assert isinstance(e, InternalServerError)\n            return self.report_error(e),type='function_definition'\nline_star:253,line_end:255|char_star:8,char_end:39"->"type='INFORMATION BLOCK'\nline_star:254,line_end:255|char_star:12,char_end:39";
"assert isinstance(e, InternalServerError),type='assert_statement'\nline_star:254,line_end:254|char_star:12,char_end:53"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:254,line_end:255|char_star:12,char_end:39"->"assert isinstance(e, InternalServerError),type='assert_statement'\nline_star:254,line_end:254|char_star:12,char_end:53";
"isinstance(e, InternalServerError),type='call'\nline_star:254,line_end:254|char_star:19,char_end:53"[shape="box",fillcolor="white",style=filled];
"assert isinstance(e, InternalServerError),type='assert_statement'\nline_star:254,line_end:254|char_star:12,char_end:53"->"isinstance(e, InternalServerError),type='call'\nline_star:254,line_end:254|char_star:19,char_end:53";
"isinstance,type='identifier'\nline_star:254,line_end:254|char_star:19,char_end:29"[shape="point",fillcolor="#121013",style=filled];
"isinstance(e, InternalServerError),type='call'\nline_star:254,line_end:254|char_star:19,char_end:53"->"isinstance,type='identifier'\nline_star:254,line_end:254|char_star:19,char_end:29";
"(e, InternalServerError),type='argument_list'\nline_star:254,line_end:254|char_star:29,char_end:53"[shape="box",fillcolor="white",style=filled];
"isinstance(e, InternalServerError),type='call'\nline_star:254,line_end:254|char_star:19,char_end:53"->"(e, InternalServerError),type='argument_list'\nline_star:254,line_end:254|char_star:29,char_end:53";
"e,type='identifier'\nline_star:254,line_end:254|char_star:30,char_end:31"[shape="point",fillcolor="#121013",style=filled];
"(e, InternalServerError),type='argument_list'\nline_star:254,line_end:254|char_star:29,char_end:53"->"e,type='identifier'\nline_star:254,line_end:254|char_star:30,char_end:31";
"InternalServerError,type='identifier'\nline_star:254,line_end:254|char_star:33,char_end:52"[shape="point",fillcolor="#121013",style=filled];
"(e, InternalServerError),type='argument_list'\nline_star:254,line_end:254|char_star:29,char_end:53"->"InternalServerError,type='identifier'\nline_star:254,line_end:254|char_star:33,char_end:52";
"return self.report_error(e),type='return_statement'\nline_star:255,line_end:255|char_star:12,char_end:39"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:254,line_end:255|char_star:12,char_end:39"->"return self.report_error(e),type='return_statement'\nline_star:255,line_end:255|char_star:12,char_end:39";
"assert client.get('/custom').data == b'wrapped Custom',type='assert_statement'\nline_star:257,line_end:257|char_star:8,char_end:62"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:247,line_end:260|char_star:8,char_end:73"->"assert client.get('/custom').data == b'wrapped Custom',type='assert_statement'\nline_star:257,line_end:257|char_star:8,char_end:62";
"client.get('/custom').data == b'wrapped Custom',type='comparison_operator'\nline_star:257,line_end:257|char_star:15,char_end:62"[shape="box",fillcolor="white",style=filled];
"assert client.get('/custom').data == b'wrapped Custom',type='assert_statement'\nline_star:257,line_end:257|char_star:8,char_end:62"->"client.get('/custom').data == b'wrapped Custom',type='comparison_operator'\nline_star:257,line_end:257|char_star:15,char_end:62";
"client.get('/custom').data,type='attribute'\nline_star:257,line_end:257|char_star:15,char_end:41"[shape="box",fillcolor="white",style=filled];
"client.get('/custom').data == b'wrapped Custom',type='comparison_operator'\nline_star:257,line_end:257|char_star:15,char_end:62"->"client.get('/custom').data,type='attribute'\nline_star:257,line_end:257|char_star:15,char_end:41";
"client.get('/custom'),type='call'\nline_star:257,line_end:257|char_star:15,char_end:36"[shape="box",fillcolor="white",style=filled];
"client.get('/custom').data,type='attribute'\nline_star:257,line_end:257|char_star:15,char_end:41"->"client.get('/custom'),type='call'\nline_star:257,line_end:257|char_star:15,char_end:36";
"client.get,type='attribute'\nline_star:257,line_end:257|char_star:15,char_end:25"[shape="box",fillcolor="white",style=filled];
"client.get('/custom'),type='call'\nline_star:257,line_end:257|char_star:15,char_end:36"->"client.get,type='attribute'\nline_star:257,line_end:257|char_star:15,char_end:25";
"client,type='identifier'\nline_star:257,line_end:257|char_star:15,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"client.get,type='attribute'\nline_star:257,line_end:257|char_star:15,char_end:25"->"client,type='identifier'\nline_star:257,line_end:257|char_star:15,char_end:21";
"get,type='identifier'\nline_star:257,line_end:257|char_star:22,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"client.get,type='attribute'\nline_star:257,line_end:257|char_star:15,char_end:25"->"get,type='identifier'\nline_star:257,line_end:257|char_star:22,char_end:25";
"('/custom'),type='argument_list'\nline_star:257,line_end:257|char_star:25,char_end:36"[shape="box",fillcolor="white",style=filled];
"client.get('/custom'),type='call'\nline_star:257,line_end:257|char_star:15,char_end:36"->"('/custom'),type='argument_list'\nline_star:257,line_end:257|char_star:25,char_end:36";
"data,type='identifier'\nline_star:257,line_end:257|char_star:37,char_end:41"[shape="point",fillcolor="#121013",style=filled];
"client.get('/custom').data,type='attribute'\nline_star:257,line_end:257|char_star:15,char_end:41"->"data,type='identifier'\nline_star:257,line_end:257|char_star:37,char_end:41";
"assert client.get('/error').data == b'wrapped KeyError',type='assert_statement'\nline_star:258,line_end:258|char_star:8,char_end:63"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:247,line_end:260|char_star:8,char_end:73"->"assert client.get('/error').data == b'wrapped KeyError',type='assert_statement'\nline_star:258,line_end:258|char_star:8,char_end:63";
"client.get('/error').data == b'wrapped KeyError',type='comparison_operator'\nline_star:258,line_end:258|char_star:15,char_end:63"[shape="box",fillcolor="white",style=filled];
"assert client.get('/error').data == b'wrapped KeyError',type='assert_statement'\nline_star:258,line_end:258|char_star:8,char_end:63"->"client.get('/error').data == b'wrapped KeyError',type='comparison_operator'\nline_star:258,line_end:258|char_star:15,char_end:63";
"client.get('/error').data,type='attribute'\nline_star:258,line_end:258|char_star:15,char_end:40"[shape="box",fillcolor="white",style=filled];
"client.get('/error').data == b'wrapped KeyError',type='comparison_operator'\nline_star:258,line_end:258|char_star:15,char_end:63"->"client.get('/error').data,type='attribute'\nline_star:258,line_end:258|char_star:15,char_end:40";
"client.get('/error'),type='call'\nline_star:258,line_end:258|char_star:15,char_end:35"[shape="box",fillcolor="white",style=filled];
"client.get('/error').data,type='attribute'\nline_star:258,line_end:258|char_star:15,char_end:40"->"client.get('/error'),type='call'\nline_star:258,line_end:258|char_star:15,char_end:35";
"client.get,type='attribute'\nline_star:258,line_end:258|char_star:15,char_end:25"[shape="box",fillcolor="white",style=filled];
"client.get('/error'),type='call'\nline_star:258,line_end:258|char_star:15,char_end:35"->"client.get,type='attribute'\nline_star:258,line_end:258|char_star:15,char_end:25";
"client,type='identifier'\nline_star:258,line_end:258|char_star:15,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"client.get,type='attribute'\nline_star:258,line_end:258|char_star:15,char_end:25"->"client,type='identifier'\nline_star:258,line_end:258|char_star:15,char_end:21";
"get,type='identifier'\nline_star:258,line_end:258|char_star:22,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"client.get,type='attribute'\nline_star:258,line_end:258|char_star:15,char_end:25"->"get,type='identifier'\nline_star:258,line_end:258|char_star:22,char_end:25";
"('/error'),type='argument_list'\nline_star:258,line_end:258|char_star:25,char_end:35"[shape="box",fillcolor="white",style=filled];
"client.get('/error'),type='call'\nline_star:258,line_end:258|char_star:15,char_end:35"->"('/error'),type='argument_list'\nline_star:258,line_end:258|char_star:25,char_end:35";
"data,type='identifier'\nline_star:258,line_end:258|char_star:36,char_end:40"[shape="point",fillcolor="#121013",style=filled];
"client.get('/error').data,type='attribute'\nline_star:258,line_end:258|char_star:15,char_end:40"->"data,type='identifier'\nline_star:258,line_end:258|char_star:36,char_end:40";
"assert client.get('/abort').data == b'direct InternalServerError',type='assert_statement'\nline_star:259,line_end:259|char_star:8,char_end:73"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:247,line_end:260|char_star:8,char_end:73"->"assert client.get('/abort').data == b'direct InternalServerError',type='assert_statement'\nline_star:259,line_end:259|char_star:8,char_end:73";
"client.get('/abort').data == b'direct InternalServerError',type='comparison_operator'\nline_star:259,line_end:259|char_star:15,char_end:73"[shape="box",fillcolor="white",style=filled];
"assert client.get('/abort').data == b'direct InternalServerError',type='assert_statement'\nline_star:259,line_end:259|char_star:8,char_end:73"->"client.get('/abort').data == b'direct InternalServerError',type='comparison_operator'\nline_star:259,line_end:259|char_star:15,char_end:73";
"client.get('/abort').data,type='attribute'\nline_star:259,line_end:259|char_star:15,char_end:40"[shape="box",fillcolor="white",style=filled];
"client.get('/abort').data == b'direct InternalServerError',type='comparison_operator'\nline_star:259,line_end:259|char_star:15,char_end:73"->"client.get('/abort').data,type='attribute'\nline_star:259,line_end:259|char_star:15,char_end:40";
"client.get('/abort'),type='call'\nline_star:259,line_end:259|char_star:15,char_end:35"[shape="box",fillcolor="white",style=filled];
"client.get('/abort').data,type='attribute'\nline_star:259,line_end:259|char_star:15,char_end:40"->"client.get('/abort'),type='call'\nline_star:259,line_end:259|char_star:15,char_end:35";
"client.get,type='attribute'\nline_star:259,line_end:259|char_star:15,char_end:25"[shape="box",fillcolor="white",style=filled];
"client.get('/abort'),type='call'\nline_star:259,line_end:259|char_star:15,char_end:35"->"client.get,type='attribute'\nline_star:259,line_end:259|char_star:15,char_end:25";
"client,type='identifier'\nline_star:259,line_end:259|char_star:15,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"client.get,type='attribute'\nline_star:259,line_end:259|char_star:15,char_end:25"->"client,type='identifier'\nline_star:259,line_end:259|char_star:15,char_end:21";
"get,type='identifier'\nline_star:259,line_end:259|char_star:22,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"client.get,type='attribute'\nline_star:259,line_end:259|char_star:15,char_end:25"->"get,type='identifier'\nline_star:259,line_end:259|char_star:22,char_end:25";
"('/abort'),type='argument_list'\nline_star:259,line_end:259|char_star:25,char_end:35"[shape="box",fillcolor="white",style=filled];
"client.get('/abort'),type='call'\nline_star:259,line_end:259|char_star:15,char_end:35"->"('/abort'),type='argument_list'\nline_star:259,line_end:259|char_star:25,char_end:35";
"data,type='identifier'\nline_star:259,line_end:259|char_star:36,char_end:40"[shape="point",fillcolor="#121013",style=filled];
"client.get('/abort').data,type='attribute'\nline_star:259,line_end:259|char_star:15,char_end:40"->"data,type='identifier'\nline_star:259,line_end:259|char_star:36,char_end:40";
"assert client.get('/raise').data == b'direct InternalServerError',type='assert_statement'\nline_star:260,line_end:260|char_star:8,char_end:73"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:247,line_end:260|char_star:8,char_end:73"->"assert client.get('/raise').data == b'direct InternalServerError',type='assert_statement'\nline_star:260,line_end:260|char_star:8,char_end:73";
"client.get('/raise').data == b'direct InternalServerError',type='comparison_operator'\nline_star:260,line_end:260|char_star:15,char_end:73"[shape="box",fillcolor="white",style=filled];
"assert client.get('/raise').data == b'direct InternalServerError',type='assert_statement'\nline_star:260,line_end:260|char_star:8,char_end:73"->"client.get('/raise').data == b'direct InternalServerError',type='comparison_operator'\nline_star:260,line_end:260|char_star:15,char_end:73";
"client.get('/raise').data,type='attribute'\nline_star:260,line_end:260|char_star:15,char_end:40"[shape="box",fillcolor="white",style=filled];
"client.get('/raise').data == b'direct InternalServerError',type='comparison_operator'\nline_star:260,line_end:260|char_star:15,char_end:73"->"client.get('/raise').data,type='attribute'\nline_star:260,line_end:260|char_star:15,char_end:40";
"client.get('/raise'),type='call'\nline_star:260,line_end:260|char_star:15,char_end:35"[shape="box",fillcolor="white",style=filled];
"client.get('/raise').data,type='attribute'\nline_star:260,line_end:260|char_star:15,char_end:40"->"client.get('/raise'),type='call'\nline_star:260,line_end:260|char_star:15,char_end:35";
"client.get,type='attribute'\nline_star:260,line_end:260|char_star:15,char_end:25"[shape="box",fillcolor="white",style=filled];
"client.get('/raise'),type='call'\nline_star:260,line_end:260|char_star:15,char_end:35"->"client.get,type='attribute'\nline_star:260,line_end:260|char_star:15,char_end:25";
"client,type='identifier'\nline_star:260,line_end:260|char_star:15,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"client.get,type='attribute'\nline_star:260,line_end:260|char_star:15,char_end:25"->"client,type='identifier'\nline_star:260,line_end:260|char_star:15,char_end:21";
"get,type='identifier'\nline_star:260,line_end:260|char_star:22,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"client.get,type='attribute'\nline_star:260,line_end:260|char_star:15,char_end:25"->"get,type='identifier'\nline_star:260,line_end:260|char_star:22,char_end:25";
"('/raise'),type='argument_list'\nline_star:260,line_end:260|char_star:25,char_end:35"[shape="box",fillcolor="white",style=filled];
"client.get('/raise'),type='call'\nline_star:260,line_end:260|char_star:15,char_end:35"->"('/raise'),type='argument_list'\nline_star:260,line_end:260|char_star:25,char_end:35";
"data,type='identifier'\nline_star:260,line_end:260|char_star:36,char_end:40"[shape="point",fillcolor="#121013",style=filled];
"client.get('/raise').data,type='attribute'\nline_star:260,line_end:260|char_star:15,char_end:40"->"data,type='identifier'\nline_star:260,line_end:260|char_star:36,char_end:40";
"def test_handle_generic_http(self, app, client):\n        '''``HTTPException`` should only receive ``HTTPException``\n        subclasses. It will receive ``404`` routing exceptions.\n        '''\n\n        @app.errorhandler(HTTPException)\n        def handle_http(e):\n            assert isinstance(e, HTTPException)\n            return str(e.code)\n\n        assert client.get('/error').data == b'500'\n        assert client.get('/abort').data == b'500'\n        assert client.get('/not-found').data == b'404',type='function_definition'\nline_star:262,line_end:274|char_star:4,char_end:54"[shape="box",fillcolor="#cee6b4",style=filled];
"type='INFORMATION BLOCK'\nline_star:211,line_end:288|char_star:4,char_end:66"->"def test_handle_generic_http(self, app, client):\n        '''``HTTPException`` should only receive ``HTTPException``\n        subclasses. It will receive ``404`` routing exceptions.\n        '''\n\n        @app.errorhandler(HTTPException)\n        def handle_http(e):\n            assert isinstance(e, HTTPException)\n            return str(e.code)\n\n        assert client.get('/error').data == b'500'\n        assert client.get('/abort').data == b'500'\n        assert client.get('/not-found').data == b'404',type='function_definition'\nline_star:262,line_end:274|char_star:4,char_end:54";
"test_handle_generic_http,type='identifier'\nline_star:262,line_end:262|char_star:8,char_end:32"[shape="point",fillcolor="#121013",style=filled];
"def test_handle_generic_http(self, app, client):\n        '''``HTTPException`` should only receive ``HTTPException``\n        subclasses. It will receive ``404`` routing exceptions.\n        '''\n\n        @app.errorhandler(HTTPException)\n        def handle_http(e):\n            assert isinstance(e, HTTPException)\n            return str(e.code)\n\n        assert client.get('/error').data == b'500'\n        assert client.get('/abort').data == b'500'\n        assert client.get('/not-found').data == b'404',type='function_definition'\nline_star:262,line_end:274|char_star:4,char_end:54"->"test_handle_generic_http,type='identifier'\nline_star:262,line_end:262|char_star:8,char_end:32";
"(self, app, client),type='parameters'\nline_star:262,line_end:262|char_star:32,char_end:51"[shape="box",fillcolor="white",style=filled];
"def test_handle_generic_http(self, app, client):\n        '''``HTTPException`` should only receive ``HTTPException``\n        subclasses. It will receive ``404`` routing exceptions.\n        '''\n\n        @app.errorhandler(HTTPException)\n        def handle_http(e):\n            assert isinstance(e, HTTPException)\n            return str(e.code)\n\n        assert client.get('/error').data == b'500'\n        assert client.get('/abort').data == b'500'\n        assert client.get('/not-found').data == b'404',type='function_definition'\nline_star:262,line_end:274|char_star:4,char_end:54"->"(self, app, client),type='parameters'\nline_star:262,line_end:262|char_star:32,char_end:51";
"self,type='identifier'\nline_star:262,line_end:262|char_star:33,char_end:37"[shape="point",fillcolor="#121013",style=filled];
"(self, app, client),type='parameters'\nline_star:262,line_end:262|char_star:32,char_end:51"->"self,type='identifier'\nline_star:262,line_end:262|char_star:33,char_end:37";
"app,type='identifier'\nline_star:262,line_end:262|char_star:39,char_end:42"[shape="point",fillcolor="#121013",style=filled];
"(self, app, client),type='parameters'\nline_star:262,line_end:262|char_star:32,char_end:51"->"app,type='identifier'\nline_star:262,line_end:262|char_star:39,char_end:42";
"client,type='identifier'\nline_star:262,line_end:262|char_star:44,char_end:50"[shape="point",fillcolor="#121013",style=filled];
"(self, app, client),type='parameters'\nline_star:262,line_end:262|char_star:32,char_end:51"->"client,type='identifier'\nline_star:262,line_end:262|char_star:44,char_end:50";
"type='INFORMATION BLOCK'\nline_star:263,line_end:274|char_star:8,char_end:54"[shape="point",fillcolor="#121013",style=filled];
"def test_handle_generic_http(self, app, client):\n        '''``HTTPException`` should only receive ``HTTPException``\n        subclasses. It will receive ``404`` routing exceptions.\n        '''\n\n        @app.errorhandler(HTTPException)\n        def handle_http(e):\n            assert isinstance(e, HTTPException)\n            return str(e.code)\n\n        assert client.get('/error').data == b'500'\n        assert client.get('/abort').data == b'500'\n        assert client.get('/not-found').data == b'404',type='function_definition'\nline_star:262,line_end:274|char_star:4,char_end:54"->"type='INFORMATION BLOCK'\nline_star:263,line_end:274|char_star:8,char_end:54";
"@app.errorhandler(HTTPException)\n        def handle_http(e):\n            assert isinstance(e, HTTPException)\n            return str(e.code),type='decorated_definition'\nline_star:267,line_end:270|char_star:8,char_end:30"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:263,line_end:274|char_star:8,char_end:54"->"@app.errorhandler(HTTPException)\n        def handle_http(e):\n            assert isinstance(e, HTTPException)\n            return str(e.code),type='decorated_definition'\nline_star:267,line_end:270|char_star:8,char_end:30";
"@app.errorhandler(HTTPException),type='decorator'\nline_star:267,line_end:267|char_star:8,char_end:40"[shape="box",fillcolor="white",style=filled];
"@app.errorhandler(HTTPException)\n        def handle_http(e):\n            assert isinstance(e, HTTPException)\n            return str(e.code),type='decorated_definition'\nline_star:267,line_end:270|char_star:8,char_end:30"->"@app.errorhandler(HTTPException),type='decorator'\nline_star:267,line_end:267|char_star:8,char_end:40";
"def handle_http(e):\n            assert isinstance(e, HTTPException)\n            return str(e.code),type='function_definition'\nline_star:268,line_end:270|char_star:8,char_end:30"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.errorhandler(HTTPException)\n        def handle_http(e):\n            assert isinstance(e, HTTPException)\n            return str(e.code),type='decorated_definition'\nline_star:267,line_end:270|char_star:8,char_end:30"->"def handle_http(e):\n            assert isinstance(e, HTTPException)\n            return str(e.code),type='function_definition'\nline_star:268,line_end:270|char_star:8,char_end:30";
"handle_http,type='identifier'\nline_star:268,line_end:268|char_star:12,char_end:23"[shape="point",fillcolor="#121013",style=filled];
"def handle_http(e):\n            assert isinstance(e, HTTPException)\n            return str(e.code),type='function_definition'\nline_star:268,line_end:270|char_star:8,char_end:30"->"handle_http,type='identifier'\nline_star:268,line_end:268|char_star:12,char_end:23";
"(e),type='parameters'\nline_star:268,line_end:268|char_star:23,char_end:26"[shape="box",fillcolor="white",style=filled];
"def handle_http(e):\n            assert isinstance(e, HTTPException)\n            return str(e.code),type='function_definition'\nline_star:268,line_end:270|char_star:8,char_end:30"->"(e),type='parameters'\nline_star:268,line_end:268|char_star:23,char_end:26";
"e,type='identifier'\nline_star:268,line_end:268|char_star:24,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"(e),type='parameters'\nline_star:268,line_end:268|char_star:23,char_end:26"->"e,type='identifier'\nline_star:268,line_end:268|char_star:24,char_end:25";
"type='INFORMATION BLOCK'\nline_star:269,line_end:270|char_star:12,char_end:30"[shape="point",fillcolor="#121013",style=filled];
"def handle_http(e):\n            assert isinstance(e, HTTPException)\n            return str(e.code),type='function_definition'\nline_star:268,line_end:270|char_star:8,char_end:30"->"type='INFORMATION BLOCK'\nline_star:269,line_end:270|char_star:12,char_end:30";
"assert isinstance(e, HTTPException),type='assert_statement'\nline_star:269,line_end:269|char_star:12,char_end:47"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:269,line_end:270|char_star:12,char_end:30"->"assert isinstance(e, HTTPException),type='assert_statement'\nline_star:269,line_end:269|char_star:12,char_end:47";
"isinstance(e, HTTPException),type='call'\nline_star:269,line_end:269|char_star:19,char_end:47"[shape="box",fillcolor="white",style=filled];
"assert isinstance(e, HTTPException),type='assert_statement'\nline_star:269,line_end:269|char_star:12,char_end:47"->"isinstance(e, HTTPException),type='call'\nline_star:269,line_end:269|char_star:19,char_end:47";
"isinstance,type='identifier'\nline_star:269,line_end:269|char_star:19,char_end:29"[shape="point",fillcolor="#121013",style=filled];
"isinstance(e, HTTPException),type='call'\nline_star:269,line_end:269|char_star:19,char_end:47"->"isinstance,type='identifier'\nline_star:269,line_end:269|char_star:19,char_end:29";
"(e, HTTPException),type='argument_list'\nline_star:269,line_end:269|char_star:29,char_end:47"[shape="box",fillcolor="white",style=filled];
"isinstance(e, HTTPException),type='call'\nline_star:269,line_end:269|char_star:19,char_end:47"->"(e, HTTPException),type='argument_list'\nline_star:269,line_end:269|char_star:29,char_end:47";
"e,type='identifier'\nline_star:269,line_end:269|char_star:30,char_end:31"[shape="point",fillcolor="#121013",style=filled];
"(e, HTTPException),type='argument_list'\nline_star:269,line_end:269|char_star:29,char_end:47"->"e,type='identifier'\nline_star:269,line_end:269|char_star:30,char_end:31";
"HTTPException,type='identifier'\nline_star:269,line_end:269|char_star:33,char_end:46"[shape="point",fillcolor="#121013",style=filled];
"(e, HTTPException),type='argument_list'\nline_star:269,line_end:269|char_star:29,char_end:47"->"HTTPException,type='identifier'\nline_star:269,line_end:269|char_star:33,char_end:46";
"return str(e.code),type='return_statement'\nline_star:270,line_end:270|char_star:12,char_end:30"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:269,line_end:270|char_star:12,char_end:30"->"return str(e.code),type='return_statement'\nline_star:270,line_end:270|char_star:12,char_end:30";
"assert client.get('/error').data == b'500',type='assert_statement'\nline_star:272,line_end:272|char_star:8,char_end:50"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:263,line_end:274|char_star:8,char_end:54"->"assert client.get('/error').data == b'500',type='assert_statement'\nline_star:272,line_end:272|char_star:8,char_end:50";
"client.get('/error').data == b'500',type='comparison_operator'\nline_star:272,line_end:272|char_star:15,char_end:50"[shape="box",fillcolor="white",style=filled];
"assert client.get('/error').data == b'500',type='assert_statement'\nline_star:272,line_end:272|char_star:8,char_end:50"->"client.get('/error').data == b'500',type='comparison_operator'\nline_star:272,line_end:272|char_star:15,char_end:50";
"client.get('/error').data,type='attribute'\nline_star:272,line_end:272|char_star:15,char_end:40"[shape="box",fillcolor="white",style=filled];
"client.get('/error').data == b'500',type='comparison_operator'\nline_star:272,line_end:272|char_star:15,char_end:50"->"client.get('/error').data,type='attribute'\nline_star:272,line_end:272|char_star:15,char_end:40";
"client.get('/error'),type='call'\nline_star:272,line_end:272|char_star:15,char_end:35"[shape="box",fillcolor="white",style=filled];
"client.get('/error').data,type='attribute'\nline_star:272,line_end:272|char_star:15,char_end:40"->"client.get('/error'),type='call'\nline_star:272,line_end:272|char_star:15,char_end:35";
"client.get,type='attribute'\nline_star:272,line_end:272|char_star:15,char_end:25"[shape="box",fillcolor="white",style=filled];
"client.get('/error'),type='call'\nline_star:272,line_end:272|char_star:15,char_end:35"->"client.get,type='attribute'\nline_star:272,line_end:272|char_star:15,char_end:25";
"client,type='identifier'\nline_star:272,line_end:272|char_star:15,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"client.get,type='attribute'\nline_star:272,line_end:272|char_star:15,char_end:25"->"client,type='identifier'\nline_star:272,line_end:272|char_star:15,char_end:21";
"get,type='identifier'\nline_star:272,line_end:272|char_star:22,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"client.get,type='attribute'\nline_star:272,line_end:272|char_star:15,char_end:25"->"get,type='identifier'\nline_star:272,line_end:272|char_star:22,char_end:25";
"('/error'),type='argument_list'\nline_star:272,line_end:272|char_star:25,char_end:35"[shape="box",fillcolor="white",style=filled];
"client.get('/error'),type='call'\nline_star:272,line_end:272|char_star:15,char_end:35"->"('/error'),type='argument_list'\nline_star:272,line_end:272|char_star:25,char_end:35";
"data,type='identifier'\nline_star:272,line_end:272|char_star:36,char_end:40"[shape="point",fillcolor="#121013",style=filled];
"client.get('/error').data,type='attribute'\nline_star:272,line_end:272|char_star:15,char_end:40"->"data,type='identifier'\nline_star:272,line_end:272|char_star:36,char_end:40";
"assert client.get('/abort').data == b'500',type='assert_statement'\nline_star:273,line_end:273|char_star:8,char_end:50"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:263,line_end:274|char_star:8,char_end:54"->"assert client.get('/abort').data == b'500',type='assert_statement'\nline_star:273,line_end:273|char_star:8,char_end:50";
"client.get('/abort').data == b'500',type='comparison_operator'\nline_star:273,line_end:273|char_star:15,char_end:50"[shape="box",fillcolor="white",style=filled];
"assert client.get('/abort').data == b'500',type='assert_statement'\nline_star:273,line_end:273|char_star:8,char_end:50"->"client.get('/abort').data == b'500',type='comparison_operator'\nline_star:273,line_end:273|char_star:15,char_end:50";
"client.get('/abort').data,type='attribute'\nline_star:273,line_end:273|char_star:15,char_end:40"[shape="box",fillcolor="white",style=filled];
"client.get('/abort').data == b'500',type='comparison_operator'\nline_star:273,line_end:273|char_star:15,char_end:50"->"client.get('/abort').data,type='attribute'\nline_star:273,line_end:273|char_star:15,char_end:40";
"client.get('/abort'),type='call'\nline_star:273,line_end:273|char_star:15,char_end:35"[shape="box",fillcolor="white",style=filled];
"client.get('/abort').data,type='attribute'\nline_star:273,line_end:273|char_star:15,char_end:40"->"client.get('/abort'),type='call'\nline_star:273,line_end:273|char_star:15,char_end:35";
"client.get,type='attribute'\nline_star:273,line_end:273|char_star:15,char_end:25"[shape="box",fillcolor="white",style=filled];
"client.get('/abort'),type='call'\nline_star:273,line_end:273|char_star:15,char_end:35"->"client.get,type='attribute'\nline_star:273,line_end:273|char_star:15,char_end:25";
"client,type='identifier'\nline_star:273,line_end:273|char_star:15,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"client.get,type='attribute'\nline_star:273,line_end:273|char_star:15,char_end:25"->"client,type='identifier'\nline_star:273,line_end:273|char_star:15,char_end:21";
"get,type='identifier'\nline_star:273,line_end:273|char_star:22,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"client.get,type='attribute'\nline_star:273,line_end:273|char_star:15,char_end:25"->"get,type='identifier'\nline_star:273,line_end:273|char_star:22,char_end:25";
"('/abort'),type='argument_list'\nline_star:273,line_end:273|char_star:25,char_end:35"[shape="box",fillcolor="white",style=filled];
"client.get('/abort'),type='call'\nline_star:273,line_end:273|char_star:15,char_end:35"->"('/abort'),type='argument_list'\nline_star:273,line_end:273|char_star:25,char_end:35";
"data,type='identifier'\nline_star:273,line_end:273|char_star:36,char_end:40"[shape="point",fillcolor="#121013",style=filled];
"client.get('/abort').data,type='attribute'\nline_star:273,line_end:273|char_star:15,char_end:40"->"data,type='identifier'\nline_star:273,line_end:273|char_star:36,char_end:40";
"assert client.get('/not-found').data == b'404',type='assert_statement'\nline_star:274,line_end:274|char_star:8,char_end:54"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:263,line_end:274|char_star:8,char_end:54"->"assert client.get('/not-found').data == b'404',type='assert_statement'\nline_star:274,line_end:274|char_star:8,char_end:54";
"client.get('/not-found').data == b'404',type='comparison_operator'\nline_star:274,line_end:274|char_star:15,char_end:54"[shape="box",fillcolor="white",style=filled];
"assert client.get('/not-found').data == b'404',type='assert_statement'\nline_star:274,line_end:274|char_star:8,char_end:54"->"client.get('/not-found').data == b'404',type='comparison_operator'\nline_star:274,line_end:274|char_star:15,char_end:54";
"client.get('/not-found').data,type='attribute'\nline_star:274,line_end:274|char_star:15,char_end:44"[shape="box",fillcolor="white",style=filled];
"client.get('/not-found').data == b'404',type='comparison_operator'\nline_star:274,line_end:274|char_star:15,char_end:54"->"client.get('/not-found').data,type='attribute'\nline_star:274,line_end:274|char_star:15,char_end:44";
"client.get('/not-found'),type='call'\nline_star:274,line_end:274|char_star:15,char_end:39"[shape="box",fillcolor="white",style=filled];
"client.get('/not-found').data,type='attribute'\nline_star:274,line_end:274|char_star:15,char_end:44"->"client.get('/not-found'),type='call'\nline_star:274,line_end:274|char_star:15,char_end:39";
"client.get,type='attribute'\nline_star:274,line_end:274|char_star:15,char_end:25"[shape="box",fillcolor="white",style=filled];
"client.get('/not-found'),type='call'\nline_star:274,line_end:274|char_star:15,char_end:39"->"client.get,type='attribute'\nline_star:274,line_end:274|char_star:15,char_end:25";
"client,type='identifier'\nline_star:274,line_end:274|char_star:15,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"client.get,type='attribute'\nline_star:274,line_end:274|char_star:15,char_end:25"->"client,type='identifier'\nline_star:274,line_end:274|char_star:15,char_end:21";
"get,type='identifier'\nline_star:274,line_end:274|char_star:22,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"client.get,type='attribute'\nline_star:274,line_end:274|char_star:15,char_end:25"->"get,type='identifier'\nline_star:274,line_end:274|char_star:22,char_end:25";
"('/not-found'),type='argument_list'\nline_star:274,line_end:274|char_star:25,char_end:39"[shape="box",fillcolor="white",style=filled];
"client.get('/not-found'),type='call'\nline_star:274,line_end:274|char_star:15,char_end:39"->"('/not-found'),type='argument_list'\nline_star:274,line_end:274|char_star:25,char_end:39";
"data,type='identifier'\nline_star:274,line_end:274|char_star:40,char_end:44"[shape="point",fillcolor="#121013",style=filled];
"client.get('/not-found').data,type='attribute'\nline_star:274,line_end:274|char_star:15,char_end:44"->"data,type='identifier'\nline_star:274,line_end:274|char_star:40,char_end:44";
"def test_handle_generic(self, app, client):\n        '''Generic ``Exception`` will handle all exceptions directly,\n        including ``HTTPExceptions``.\n        '''\n\n        @app.errorhandler(Exception)\n        def handle_exception(e):\n            return self.report_error(e)\n\n        assert client.get('/custom').data == b'direct Custom'\n        assert client.get('/error').data == b'direct KeyError'\n        assert client.get('/abort').data == b'direct InternalServerError'\n        assert client.get('/not-found').data == b'direct NotFound',type='function_definition'\nline_star:276,line_end:288|char_star:4,char_end:66"[shape="box",fillcolor="#cee6b4",style=filled];
"type='INFORMATION BLOCK'\nline_star:211,line_end:288|char_star:4,char_end:66"->"def test_handle_generic(self, app, client):\n        '''Generic ``Exception`` will handle all exceptions directly,\n        including ``HTTPExceptions``.\n        '''\n\n        @app.errorhandler(Exception)\n        def handle_exception(e):\n            return self.report_error(e)\n\n        assert client.get('/custom').data == b'direct Custom'\n        assert client.get('/error').data == b'direct KeyError'\n        assert client.get('/abort').data == b'direct InternalServerError'\n        assert client.get('/not-found').data == b'direct NotFound',type='function_definition'\nline_star:276,line_end:288|char_star:4,char_end:66";
"test_handle_generic,type='identifier'\nline_star:276,line_end:276|char_star:8,char_end:27"[shape="point",fillcolor="#121013",style=filled];
"def test_handle_generic(self, app, client):\n        '''Generic ``Exception`` will handle all exceptions directly,\n        including ``HTTPExceptions``.\n        '''\n\n        @app.errorhandler(Exception)\n        def handle_exception(e):\n            return self.report_error(e)\n\n        assert client.get('/custom').data == b'direct Custom'\n        assert client.get('/error').data == b'direct KeyError'\n        assert client.get('/abort').data == b'direct InternalServerError'\n        assert client.get('/not-found').data == b'direct NotFound',type='function_definition'\nline_star:276,line_end:288|char_star:4,char_end:66"->"test_handle_generic,type='identifier'\nline_star:276,line_end:276|char_star:8,char_end:27";
"(self, app, client),type='parameters'\nline_star:276,line_end:276|char_star:27,char_end:46"[shape="box",fillcolor="white",style=filled];
"def test_handle_generic(self, app, client):\n        '''Generic ``Exception`` will handle all exceptions directly,\n        including ``HTTPExceptions``.\n        '''\n\n        @app.errorhandler(Exception)\n        def handle_exception(e):\n            return self.report_error(e)\n\n        assert client.get('/custom').data == b'direct Custom'\n        assert client.get('/error').data == b'direct KeyError'\n        assert client.get('/abort').data == b'direct InternalServerError'\n        assert client.get('/not-found').data == b'direct NotFound',type='function_definition'\nline_star:276,line_end:288|char_star:4,char_end:66"->"(self, app, client),type='parameters'\nline_star:276,line_end:276|char_star:27,char_end:46";
"self,type='identifier'\nline_star:276,line_end:276|char_star:28,char_end:32"[shape="point",fillcolor="#121013",style=filled];
"(self, app, client),type='parameters'\nline_star:276,line_end:276|char_star:27,char_end:46"->"self,type='identifier'\nline_star:276,line_end:276|char_star:28,char_end:32";
"app,type='identifier'\nline_star:276,line_end:276|char_star:34,char_end:37"[shape="point",fillcolor="#121013",style=filled];
"(self, app, client),type='parameters'\nline_star:276,line_end:276|char_star:27,char_end:46"->"app,type='identifier'\nline_star:276,line_end:276|char_star:34,char_end:37";
"client,type='identifier'\nline_star:276,line_end:276|char_star:39,char_end:45"[shape="point",fillcolor="#121013",style=filled];
"(self, app, client),type='parameters'\nline_star:276,line_end:276|char_star:27,char_end:46"->"client,type='identifier'\nline_star:276,line_end:276|char_star:39,char_end:45";
"type='INFORMATION BLOCK'\nline_star:277,line_end:288|char_star:8,char_end:66"[shape="point",fillcolor="#121013",style=filled];
"def test_handle_generic(self, app, client):\n        '''Generic ``Exception`` will handle all exceptions directly,\n        including ``HTTPExceptions``.\n        '''\n\n        @app.errorhandler(Exception)\n        def handle_exception(e):\n            return self.report_error(e)\n\n        assert client.get('/custom').data == b'direct Custom'\n        assert client.get('/error').data == b'direct KeyError'\n        assert client.get('/abort').data == b'direct InternalServerError'\n        assert client.get('/not-found').data == b'direct NotFound',type='function_definition'\nline_star:276,line_end:288|char_star:4,char_end:66"->"type='INFORMATION BLOCK'\nline_star:277,line_end:288|char_star:8,char_end:66";
"@app.errorhandler(Exception)\n        def handle_exception(e):\n            return self.report_error(e),type='decorated_definition'\nline_star:281,line_end:283|char_star:8,char_end:39"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:277,line_end:288|char_star:8,char_end:66"->"@app.errorhandler(Exception)\n        def handle_exception(e):\n            return self.report_error(e),type='decorated_definition'\nline_star:281,line_end:283|char_star:8,char_end:39";
"@app.errorhandler(Exception),type='decorator'\nline_star:281,line_end:281|char_star:8,char_end:36"[shape="box",fillcolor="white",style=filled];
"@app.errorhandler(Exception)\n        def handle_exception(e):\n            return self.report_error(e),type='decorated_definition'\nline_star:281,line_end:283|char_star:8,char_end:39"->"@app.errorhandler(Exception),type='decorator'\nline_star:281,line_end:281|char_star:8,char_end:36";
"def handle_exception(e):\n            return self.report_error(e),type='function_definition'\nline_star:282,line_end:283|char_star:8,char_end:39"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.errorhandler(Exception)\n        def handle_exception(e):\n            return self.report_error(e),type='decorated_definition'\nline_star:281,line_end:283|char_star:8,char_end:39"->"def handle_exception(e):\n            return self.report_error(e),type='function_definition'\nline_star:282,line_end:283|char_star:8,char_end:39";
"handle_exception,type='identifier'\nline_star:282,line_end:282|char_star:12,char_end:28"[shape="point",fillcolor="#121013",style=filled];
"def handle_exception(e):\n            return self.report_error(e),type='function_definition'\nline_star:282,line_end:283|char_star:8,char_end:39"->"handle_exception,type='identifier'\nline_star:282,line_end:282|char_star:12,char_end:28";
"(e),type='parameters'\nline_star:282,line_end:282|char_star:28,char_end:31"[shape="box",fillcolor="white",style=filled];
"def handle_exception(e):\n            return self.report_error(e),type='function_definition'\nline_star:282,line_end:283|char_star:8,char_end:39"->"(e),type='parameters'\nline_star:282,line_end:282|char_star:28,char_end:31";
"e,type='identifier'\nline_star:282,line_end:282|char_star:29,char_end:30"[shape="point",fillcolor="#121013",style=filled];
"(e),type='parameters'\nline_star:282,line_end:282|char_star:28,char_end:31"->"e,type='identifier'\nline_star:282,line_end:282|char_star:29,char_end:30";
"type='INFORMATION BLOCK'\nline_star:283,line_end:283|char_star:12,char_end:39"[shape="point",fillcolor="#121013",style=filled];
"def handle_exception(e):\n            return self.report_error(e),type='function_definition'\nline_star:282,line_end:283|char_star:8,char_end:39"->"type='INFORMATION BLOCK'\nline_star:283,line_end:283|char_star:12,char_end:39";
"return self.report_error(e),type='return_statement'\nline_star:283,line_end:283|char_star:12,char_end:39"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:283,line_end:283|char_star:12,char_end:39"->"return self.report_error(e),type='return_statement'\nline_star:283,line_end:283|char_star:12,char_end:39";
"assert client.get('/custom').data == b'direct Custom',type='assert_statement'\nline_star:285,line_end:285|char_star:8,char_end:61"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:277,line_end:288|char_star:8,char_end:66"->"assert client.get('/custom').data == b'direct Custom',type='assert_statement'\nline_star:285,line_end:285|char_star:8,char_end:61";
"client.get('/custom').data == b'direct Custom',type='comparison_operator'\nline_star:285,line_end:285|char_star:15,char_end:61"[shape="box",fillcolor="white",style=filled];
"assert client.get('/custom').data == b'direct Custom',type='assert_statement'\nline_star:285,line_end:285|char_star:8,char_end:61"->"client.get('/custom').data == b'direct Custom',type='comparison_operator'\nline_star:285,line_end:285|char_star:15,char_end:61";
"client.get('/custom').data,type='attribute'\nline_star:285,line_end:285|char_star:15,char_end:41"[shape="box",fillcolor="white",style=filled];
"client.get('/custom').data == b'direct Custom',type='comparison_operator'\nline_star:285,line_end:285|char_star:15,char_end:61"->"client.get('/custom').data,type='attribute'\nline_star:285,line_end:285|char_star:15,char_end:41";
"client.get('/custom'),type='call'\nline_star:285,line_end:285|char_star:15,char_end:36"[shape="box",fillcolor="white",style=filled];
"client.get('/custom').data,type='attribute'\nline_star:285,line_end:285|char_star:15,char_end:41"->"client.get('/custom'),type='call'\nline_star:285,line_end:285|char_star:15,char_end:36";
"client.get,type='attribute'\nline_star:285,line_end:285|char_star:15,char_end:25"[shape="box",fillcolor="white",style=filled];
"client.get('/custom'),type='call'\nline_star:285,line_end:285|char_star:15,char_end:36"->"client.get,type='attribute'\nline_star:285,line_end:285|char_star:15,char_end:25";
"client,type='identifier'\nline_star:285,line_end:285|char_star:15,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"client.get,type='attribute'\nline_star:285,line_end:285|char_star:15,char_end:25"->"client,type='identifier'\nline_star:285,line_end:285|char_star:15,char_end:21";
"get,type='identifier'\nline_star:285,line_end:285|char_star:22,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"client.get,type='attribute'\nline_star:285,line_end:285|char_star:15,char_end:25"->"get,type='identifier'\nline_star:285,line_end:285|char_star:22,char_end:25";
"('/custom'),type='argument_list'\nline_star:285,line_end:285|char_star:25,char_end:36"[shape="box",fillcolor="white",style=filled];
"client.get('/custom'),type='call'\nline_star:285,line_end:285|char_star:15,char_end:36"->"('/custom'),type='argument_list'\nline_star:285,line_end:285|char_star:25,char_end:36";
"data,type='identifier'\nline_star:285,line_end:285|char_star:37,char_end:41"[shape="point",fillcolor="#121013",style=filled];
"client.get('/custom').data,type='attribute'\nline_star:285,line_end:285|char_star:15,char_end:41"->"data,type='identifier'\nline_star:285,line_end:285|char_star:37,char_end:41";
"assert client.get('/error').data == b'direct KeyError',type='assert_statement'\nline_star:286,line_end:286|char_star:8,char_end:62"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:277,line_end:288|char_star:8,char_end:66"->"assert client.get('/error').data == b'direct KeyError',type='assert_statement'\nline_star:286,line_end:286|char_star:8,char_end:62";
"client.get('/error').data == b'direct KeyError',type='comparison_operator'\nline_star:286,line_end:286|char_star:15,char_end:62"[shape="box",fillcolor="white",style=filled];
"assert client.get('/error').data == b'direct KeyError',type='assert_statement'\nline_star:286,line_end:286|char_star:8,char_end:62"->"client.get('/error').data == b'direct KeyError',type='comparison_operator'\nline_star:286,line_end:286|char_star:15,char_end:62";
"client.get('/error').data,type='attribute'\nline_star:286,line_end:286|char_star:15,char_end:40"[shape="box",fillcolor="white",style=filled];
"client.get('/error').data == b'direct KeyError',type='comparison_operator'\nline_star:286,line_end:286|char_star:15,char_end:62"->"client.get('/error').data,type='attribute'\nline_star:286,line_end:286|char_star:15,char_end:40";
"client.get('/error'),type='call'\nline_star:286,line_end:286|char_star:15,char_end:35"[shape="box",fillcolor="white",style=filled];
"client.get('/error').data,type='attribute'\nline_star:286,line_end:286|char_star:15,char_end:40"->"client.get('/error'),type='call'\nline_star:286,line_end:286|char_star:15,char_end:35";
"client.get,type='attribute'\nline_star:286,line_end:286|char_star:15,char_end:25"[shape="box",fillcolor="white",style=filled];
"client.get('/error'),type='call'\nline_star:286,line_end:286|char_star:15,char_end:35"->"client.get,type='attribute'\nline_star:286,line_end:286|char_star:15,char_end:25";
"client,type='identifier'\nline_star:286,line_end:286|char_star:15,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"client.get,type='attribute'\nline_star:286,line_end:286|char_star:15,char_end:25"->"client,type='identifier'\nline_star:286,line_end:286|char_star:15,char_end:21";
"get,type='identifier'\nline_star:286,line_end:286|char_star:22,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"client.get,type='attribute'\nline_star:286,line_end:286|char_star:15,char_end:25"->"get,type='identifier'\nline_star:286,line_end:286|char_star:22,char_end:25";
"('/error'),type='argument_list'\nline_star:286,line_end:286|char_star:25,char_end:35"[shape="box",fillcolor="white",style=filled];
"client.get('/error'),type='call'\nline_star:286,line_end:286|char_star:15,char_end:35"->"('/error'),type='argument_list'\nline_star:286,line_end:286|char_star:25,char_end:35";
"data,type='identifier'\nline_star:286,line_end:286|char_star:36,char_end:40"[shape="point",fillcolor="#121013",style=filled];
"client.get('/error').data,type='attribute'\nline_star:286,line_end:286|char_star:15,char_end:40"->"data,type='identifier'\nline_star:286,line_end:286|char_star:36,char_end:40";
"assert client.get('/abort').data == b'direct InternalServerError',type='assert_statement'\nline_star:287,line_end:287|char_star:8,char_end:73"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:277,line_end:288|char_star:8,char_end:66"->"assert client.get('/abort').data == b'direct InternalServerError',type='assert_statement'\nline_star:287,line_end:287|char_star:8,char_end:73";
"client.get('/abort').data == b'direct InternalServerError',type='comparison_operator'\nline_star:287,line_end:287|char_star:15,char_end:73"[shape="box",fillcolor="white",style=filled];
"assert client.get('/abort').data == b'direct InternalServerError',type='assert_statement'\nline_star:287,line_end:287|char_star:8,char_end:73"->"client.get('/abort').data == b'direct InternalServerError',type='comparison_operator'\nline_star:287,line_end:287|char_star:15,char_end:73";
"client.get('/abort').data,type='attribute'\nline_star:287,line_end:287|char_star:15,char_end:40"[shape="box",fillcolor="white",style=filled];
"client.get('/abort').data == b'direct InternalServerError',type='comparison_operator'\nline_star:287,line_end:287|char_star:15,char_end:73"->"client.get('/abort').data,type='attribute'\nline_star:287,line_end:287|char_star:15,char_end:40";
"client.get('/abort'),type='call'\nline_star:287,line_end:287|char_star:15,char_end:35"[shape="box",fillcolor="white",style=filled];
"client.get('/abort').data,type='attribute'\nline_star:287,line_end:287|char_star:15,char_end:40"->"client.get('/abort'),type='call'\nline_star:287,line_end:287|char_star:15,char_end:35";
"client.get,type='attribute'\nline_star:287,line_end:287|char_star:15,char_end:25"[shape="box",fillcolor="white",style=filled];
"client.get('/abort'),type='call'\nline_star:287,line_end:287|char_star:15,char_end:35"->"client.get,type='attribute'\nline_star:287,line_end:287|char_star:15,char_end:25";
"client,type='identifier'\nline_star:287,line_end:287|char_star:15,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"client.get,type='attribute'\nline_star:287,line_end:287|char_star:15,char_end:25"->"client,type='identifier'\nline_star:287,line_end:287|char_star:15,char_end:21";
"get,type='identifier'\nline_star:287,line_end:287|char_star:22,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"client.get,type='attribute'\nline_star:287,line_end:287|char_star:15,char_end:25"->"get,type='identifier'\nline_star:287,line_end:287|char_star:22,char_end:25";
"('/abort'),type='argument_list'\nline_star:287,line_end:287|char_star:25,char_end:35"[shape="box",fillcolor="white",style=filled];
"client.get('/abort'),type='call'\nline_star:287,line_end:287|char_star:15,char_end:35"->"('/abort'),type='argument_list'\nline_star:287,line_end:287|char_star:25,char_end:35";
"data,type='identifier'\nline_star:287,line_end:287|char_star:36,char_end:40"[shape="point",fillcolor="#121013",style=filled];
"client.get('/abort').data,type='attribute'\nline_star:287,line_end:287|char_star:15,char_end:40"->"data,type='identifier'\nline_star:287,line_end:287|char_star:36,char_end:40";
"assert client.get('/not-found').data == b'direct NotFound',type='assert_statement'\nline_star:288,line_end:288|char_star:8,char_end:66"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:277,line_end:288|char_star:8,char_end:66"->"assert client.get('/not-found').data == b'direct NotFound',type='assert_statement'\nline_star:288,line_end:288|char_star:8,char_end:66";
"client.get('/not-found').data == b'direct NotFound',type='comparison_operator'\nline_star:288,line_end:288|char_star:15,char_end:66"[shape="box",fillcolor="white",style=filled];
"assert client.get('/not-found').data == b'direct NotFound',type='assert_statement'\nline_star:288,line_end:288|char_star:8,char_end:66"->"client.get('/not-found').data == b'direct NotFound',type='comparison_operator'\nline_star:288,line_end:288|char_star:15,char_end:66";
"client.get('/not-found').data,type='attribute'\nline_star:288,line_end:288|char_star:15,char_end:44"[shape="box",fillcolor="white",style=filled];
"client.get('/not-found').data == b'direct NotFound',type='comparison_operator'\nline_star:288,line_end:288|char_star:15,char_end:66"->"client.get('/not-found').data,type='attribute'\nline_star:288,line_end:288|char_star:15,char_end:44";
"client.get('/not-found'),type='call'\nline_star:288,line_end:288|char_star:15,char_end:39"[shape="box",fillcolor="white",style=filled];
"client.get('/not-found').data,type='attribute'\nline_star:288,line_end:288|char_star:15,char_end:44"->"client.get('/not-found'),type='call'\nline_star:288,line_end:288|char_star:15,char_end:39";
"client.get,type='attribute'\nline_star:288,line_end:288|char_star:15,char_end:25"[shape="box",fillcolor="white",style=filled];
"client.get('/not-found'),type='call'\nline_star:288,line_end:288|char_star:15,char_end:39"->"client.get,type='attribute'\nline_star:288,line_end:288|char_star:15,char_end:25";
"client,type='identifier'\nline_star:288,line_end:288|char_star:15,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"client.get,type='attribute'\nline_star:288,line_end:288|char_star:15,char_end:25"->"client,type='identifier'\nline_star:288,line_end:288|char_star:15,char_end:21";
"get,type='identifier'\nline_star:288,line_end:288|char_star:22,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"client.get,type='attribute'\nline_star:288,line_end:288|char_star:15,char_end:25"->"get,type='identifier'\nline_star:288,line_end:288|char_star:22,char_end:25";
"('/not-found'),type='argument_list'\nline_star:288,line_end:288|char_star:25,char_end:39"[shape="box",fillcolor="white",style=filled];
"client.get('/not-found'),type='call'\nline_star:288,line_end:288|char_star:15,char_end:39"->"('/not-found'),type='argument_list'\nline_star:288,line_end:288|char_star:25,char_end:39";
"data,type='identifier'\nline_star:288,line_end:288|char_star:40,char_end:44"[shape="point",fillcolor="#121013",style=filled];
"client.get('/not-found').data,type='attribute'\nline_star:288,line_end:288|char_star:15,char_end:44"->"data,type='identifier'\nline_star:288,line_end:288|char_star:40,char_end:44";
"import pytest\nfrom werkzeug.exceptions import Forbidden\nfrom werkzeug.exceptions import HTTPException\nfrom werkzeug.exceptions import InternalServerError\nfrom werkzeug.exceptions import NotFound\nimport flas"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"import pytest\nfrom werkzeug.exceptions import Forbidden\nfrom werkzeug.exceptions import HTTPException\nfrom werkzeug.exceptions import InternalServerError\nfrom werkzeug.exceptions import NotFound\nimport flas"
}
