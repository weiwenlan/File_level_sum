digraph G{
rankdir="LR";
"MODULE"[shape="box",fillcolor="white",style=filled];
"import pytest,type='import_statement'\nline_star:0,line_end:0|char_star:0,char_end:13"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"import pytest,type='import_statement'\nline_star:0,line_end:0|char_star:0,char_end:13";
"import flask,type='import_statement'\nline_star:2,line_end:2|char_star:0,char_end:12"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"import flask,type='import_statement'\nline_star:2,line_end:2|char_star:0,char_end:12";
"from flask.sessions import SecureCookieSessionInterface,type='import_from_statement'\nline_star:3,line_end:3|char_star:0,char_end:55"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"from flask.sessions import SecureCookieSessionInterface,type='import_from_statement'\nline_star:3,line_end:3|char_star:0,char_end:55";
"from flask.sessions import SessionInterface,type='import_from_statement'\nline_star:4,line_end:4|char_star:0,char_end:43"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"from flask.sessions import SessionInterface,type='import_from_statement'\nline_star:4,line_end:4|char_star:0,char_end:43";
"try:\n    from greenlet import greenlet\nexcept ImportError:\n    greenlet = None,type='try_statement'\nline_star:6,line_end:9|char_star:0,char_end:19"[shape="box",fillcolor="white",style=filled];
"MODULE"->"try:\n    from greenlet import greenlet\nexcept ImportError:\n    greenlet = None,type='try_statement'\nline_star:6,line_end:9|char_star:0,char_end:19";
"try,type='try'\nline_star:6,line_end:6|char_star:0,char_end:3"[shape="box",fillcolor="white",style=filled];
"try:\n    from greenlet import greenlet\nexcept ImportError:\n    greenlet = None,type='try_statement'\nline_star:6,line_end:9|char_star:0,char_end:19"->"try,type='try'\nline_star:6,line_end:6|char_star:0,char_end:3";
"type='INFORMATION BLOCK'\nline_star:7,line_end:7|char_star:4,char_end:33"[shape="point",fillcolor="#121013",style=filled];
"try:\n    from greenlet import greenlet\nexcept ImportError:\n    greenlet = None,type='try_statement'\nline_star:6,line_end:9|char_star:0,char_end:19"->"type='INFORMATION BLOCK'\nline_star:7,line_end:7|char_star:4,char_end:33";
"from greenlet import greenlet,type='import_from_statement'\nline_star:7,line_end:7|char_star:4,char_end:33"[shape="box",fillcolor="#f48b29",style=filled];
"type='INFORMATION BLOCK'\nline_star:7,line_end:7|char_star:4,char_end:33"->"from greenlet import greenlet,type='import_from_statement'\nline_star:7,line_end:7|char_star:4,char_end:33";
"except ImportError:\n    greenlet = None,type='except_clause'\nline_star:8,line_end:9|char_star:0,char_end:19"[shape="box",fillcolor="white",style=filled];
"try:\n    from greenlet import greenlet\nexcept ImportError:\n    greenlet = None,type='try_statement'\nline_star:6,line_end:9|char_star:0,char_end:19"->"except ImportError:\n    greenlet = None,type='except_clause'\nline_star:8,line_end:9|char_star:0,char_end:19";
"except,type='except'\nline_star:8,line_end:8|char_star:0,char_end:6"[shape="box",fillcolor="white",style=filled];
"except ImportError:\n    greenlet = None,type='except_clause'\nline_star:8,line_end:9|char_star:0,char_end:19"->"except,type='except'\nline_star:8,line_end:8|char_star:0,char_end:6";
"ImportError,type='identifier'\nline_star:8,line_end:8|char_star:7,char_end:18"[shape="point",fillcolor="#121013",style=filled];
"except ImportError:\n    greenlet = None,type='except_clause'\nline_star:8,line_end:9|char_star:0,char_end:19"->"ImportError,type='identifier'\nline_star:8,line_end:8|char_star:7,char_end:18";
"type='INFORMATION BLOCK'\nline_star:9,line_end:9|char_star:4,char_end:19"[shape="point",fillcolor="#121013",style=filled];
"except ImportError:\n    greenlet = None,type='except_clause'\nline_star:8,line_end:9|char_star:0,char_end:19"->"type='INFORMATION BLOCK'\nline_star:9,line_end:9|char_star:4,char_end:19";
"def test_teardown_on_pop(app):\n    buffer = []\n\n    @app.teardown_request\n    def end_of_request(exception):\n        buffer.append(exception)\n\n    ctx = app.test_request_context()\n    ctx.push()\n    assert buffer == []\n    ctx.pop()\n    assert buffer == [None],type='function_definition'\nline_star:12,line_end:23|char_star:0,char_end:27"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_teardown_on_pop(app):\n    buffer = []\n\n    @app.teardown_request\n    def end_of_request(exception):\n        buffer.append(exception)\n\n    ctx = app.test_request_context()\n    ctx.push()\n    assert buffer == []\n    ctx.pop()\n    assert buffer == [None],type='function_definition'\nline_star:12,line_end:23|char_star:0,char_end:27";
"test_teardown_on_pop,type='identifier'\nline_star:12,line_end:12|char_star:4,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"def test_teardown_on_pop(app):\n    buffer = []\n\n    @app.teardown_request\n    def end_of_request(exception):\n        buffer.append(exception)\n\n    ctx = app.test_request_context()\n    ctx.push()\n    assert buffer == []\n    ctx.pop()\n    assert buffer == [None],type='function_definition'\nline_star:12,line_end:23|char_star:0,char_end:27"->"test_teardown_on_pop,type='identifier'\nline_star:12,line_end:12|char_star:4,char_end:24";
"(app),type='parameters'\nline_star:12,line_end:12|char_star:24,char_end:29"[shape="box",fillcolor="white",style=filled];
"def test_teardown_on_pop(app):\n    buffer = []\n\n    @app.teardown_request\n    def end_of_request(exception):\n        buffer.append(exception)\n\n    ctx = app.test_request_context()\n    ctx.push()\n    assert buffer == []\n    ctx.pop()\n    assert buffer == [None],type='function_definition'\nline_star:12,line_end:23|char_star:0,char_end:27"->"(app),type='parameters'\nline_star:12,line_end:12|char_star:24,char_end:29";
"app,type='identifier'\nline_star:12,line_end:12|char_star:25,char_end:28"[shape="point",fillcolor="#121013",style=filled];
"(app),type='parameters'\nline_star:12,line_end:12|char_star:24,char_end:29"->"app,type='identifier'\nline_star:12,line_end:12|char_star:25,char_end:28";
"type='INFORMATION BLOCK'\nline_star:13,line_end:23|char_star:4,char_end:27"[shape="point",fillcolor="#121013",style=filled];
"def test_teardown_on_pop(app):\n    buffer = []\n\n    @app.teardown_request\n    def end_of_request(exception):\n        buffer.append(exception)\n\n    ctx = app.test_request_context()\n    ctx.push()\n    assert buffer == []\n    ctx.pop()\n    assert buffer == [None],type='function_definition'\nline_star:12,line_end:23|char_star:0,char_end:27"->"type='INFORMATION BLOCK'\nline_star:13,line_end:23|char_star:4,char_end:27";
"@app.teardown_request\n    def end_of_request(exception):\n        buffer.append(exception),type='decorated_definition'\nline_star:15,line_end:17|char_star:4,char_end:32"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:13,line_end:23|char_star:4,char_end:27"->"@app.teardown_request\n    def end_of_request(exception):\n        buffer.append(exception),type='decorated_definition'\nline_star:15,line_end:17|char_star:4,char_end:32";
"@app.teardown_request,type='decorator'\nline_star:15,line_end:15|char_star:4,char_end:25"[shape="box",fillcolor="white",style=filled];
"@app.teardown_request\n    def end_of_request(exception):\n        buffer.append(exception),type='decorated_definition'\nline_star:15,line_end:17|char_star:4,char_end:32"->"@app.teardown_request,type='decorator'\nline_star:15,line_end:15|char_star:4,char_end:25";
"def end_of_request(exception):\n        buffer.append(exception),type='function_definition'\nline_star:16,line_end:17|char_star:4,char_end:32"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.teardown_request\n    def end_of_request(exception):\n        buffer.append(exception),type='decorated_definition'\nline_star:15,line_end:17|char_star:4,char_end:32"->"def end_of_request(exception):\n        buffer.append(exception),type='function_definition'\nline_star:16,line_end:17|char_star:4,char_end:32";
"end_of_request,type='identifier'\nline_star:16,line_end:16|char_star:8,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"def end_of_request(exception):\n        buffer.append(exception),type='function_definition'\nline_star:16,line_end:17|char_star:4,char_end:32"->"end_of_request,type='identifier'\nline_star:16,line_end:16|char_star:8,char_end:22";
"(exception),type='parameters'\nline_star:16,line_end:16|char_star:22,char_end:33"[shape="box",fillcolor="white",style=filled];
"def end_of_request(exception):\n        buffer.append(exception),type='function_definition'\nline_star:16,line_end:17|char_star:4,char_end:32"->"(exception),type='parameters'\nline_star:16,line_end:16|char_star:22,char_end:33";
"exception,type='identifier'\nline_star:16,line_end:16|char_star:23,char_end:32"[shape="point",fillcolor="#121013",style=filled];
"(exception),type='parameters'\nline_star:16,line_end:16|char_star:22,char_end:33"->"exception,type='identifier'\nline_star:16,line_end:16|char_star:23,char_end:32";
"type='INFORMATION BLOCK'\nline_star:17,line_end:17|char_star:8,char_end:32"[shape="point",fillcolor="#121013",style=filled];
"def end_of_request(exception):\n        buffer.append(exception),type='function_definition'\nline_star:16,line_end:17|char_star:4,char_end:32"->"type='INFORMATION BLOCK'\nline_star:17,line_end:17|char_star:8,char_end:32";
"assert buffer == [],type='assert_statement'\nline_star:21,line_end:21|char_star:4,char_end:23"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:13,line_end:23|char_star:4,char_end:27"->"assert buffer == [],type='assert_statement'\nline_star:21,line_end:21|char_star:4,char_end:23";
"buffer == [],type='comparison_operator'\nline_star:21,line_end:21|char_star:11,char_end:23"[shape="box",fillcolor="white",style=filled];
"assert buffer == [],type='assert_statement'\nline_star:21,line_end:21|char_star:4,char_end:23"->"buffer == [],type='comparison_operator'\nline_star:21,line_end:21|char_star:11,char_end:23";
"buffer,type='identifier'\nline_star:21,line_end:21|char_star:11,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"buffer == [],type='comparison_operator'\nline_star:21,line_end:21|char_star:11,char_end:23"->"buffer,type='identifier'\nline_star:21,line_end:21|char_star:11,char_end:17";
"assert buffer == [None],type='assert_statement'\nline_star:23,line_end:23|char_star:4,char_end:27"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:13,line_end:23|char_star:4,char_end:27"->"assert buffer == [None],type='assert_statement'\nline_star:23,line_end:23|char_star:4,char_end:27";
"buffer == [None],type='comparison_operator'\nline_star:23,line_end:23|char_star:11,char_end:27"[shape="box",fillcolor="white",style=filled];
"assert buffer == [None],type='assert_statement'\nline_star:23,line_end:23|char_star:4,char_end:27"->"buffer == [None],type='comparison_operator'\nline_star:23,line_end:23|char_star:11,char_end:27";
"buffer,type='identifier'\nline_star:23,line_end:23|char_star:11,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"buffer == [None],type='comparison_operator'\nline_star:23,line_end:23|char_star:11,char_end:27"->"buffer,type='identifier'\nline_star:23,line_end:23|char_star:11,char_end:17";
"[None],type='list'\nline_star:23,line_end:23|char_star:21,char_end:27"[shape="box",fillcolor="white",style=filled];
"buffer == [None],type='comparison_operator'\nline_star:23,line_end:23|char_star:11,char_end:27"->"[None],type='list'\nline_star:23,line_end:23|char_star:21,char_end:27";
"def test_teardown_with_previous_exception(app):\n    buffer = []\n\n    @app.teardown_request\n    def end_of_request(exception):\n        buffer.append(exception)\n\n    try:\n        raise Exception('dummy')\n    except Exception:\n        pass\n\n    with app.test_request_context():\n        assert buffer == []\n    assert buffer == [None],type='function_definition'\nline_star:26,line_end:40|char_star:0,char_end:27"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_teardown_with_previous_exception(app):\n    buffer = []\n\n    @app.teardown_request\n    def end_of_request(exception):\n        buffer.append(exception)\n\n    try:\n        raise Exception('dummy')\n    except Exception:\n        pass\n\n    with app.test_request_context():\n        assert buffer == []\n    assert buffer == [None],type='function_definition'\nline_star:26,line_end:40|char_star:0,char_end:27";
"test_teardown_with_previous_exception,type='identifier'\nline_star:26,line_end:26|char_star:4,char_end:41"[shape="point",fillcolor="#121013",style=filled];
"def test_teardown_with_previous_exception(app):\n    buffer = []\n\n    @app.teardown_request\n    def end_of_request(exception):\n        buffer.append(exception)\n\n    try:\n        raise Exception('dummy')\n    except Exception:\n        pass\n\n    with app.test_request_context():\n        assert buffer == []\n    assert buffer == [None],type='function_definition'\nline_star:26,line_end:40|char_star:0,char_end:27"->"test_teardown_with_previous_exception,type='identifier'\nline_star:26,line_end:26|char_star:4,char_end:41";
"(app),type='parameters'\nline_star:26,line_end:26|char_star:41,char_end:46"[shape="box",fillcolor="white",style=filled];
"def test_teardown_with_previous_exception(app):\n    buffer = []\n\n    @app.teardown_request\n    def end_of_request(exception):\n        buffer.append(exception)\n\n    try:\n        raise Exception('dummy')\n    except Exception:\n        pass\n\n    with app.test_request_context():\n        assert buffer == []\n    assert buffer == [None],type='function_definition'\nline_star:26,line_end:40|char_star:0,char_end:27"->"(app),type='parameters'\nline_star:26,line_end:26|char_star:41,char_end:46";
"app,type='identifier'\nline_star:26,line_end:26|char_star:42,char_end:45"[shape="point",fillcolor="#121013",style=filled];
"(app),type='parameters'\nline_star:26,line_end:26|char_star:41,char_end:46"->"app,type='identifier'\nline_star:26,line_end:26|char_star:42,char_end:45";
"type='INFORMATION BLOCK'\nline_star:27,line_end:40|char_star:4,char_end:27"[shape="point",fillcolor="#121013",style=filled];
"def test_teardown_with_previous_exception(app):\n    buffer = []\n\n    @app.teardown_request\n    def end_of_request(exception):\n        buffer.append(exception)\n\n    try:\n        raise Exception('dummy')\n    except Exception:\n        pass\n\n    with app.test_request_context():\n        assert buffer == []\n    assert buffer == [None],type='function_definition'\nline_star:26,line_end:40|char_star:0,char_end:27"->"type='INFORMATION BLOCK'\nline_star:27,line_end:40|char_star:4,char_end:27";
"@app.teardown_request\n    def end_of_request(exception):\n        buffer.append(exception),type='decorated_definition'\nline_star:29,line_end:31|char_star:4,char_end:32"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:27,line_end:40|char_star:4,char_end:27"->"@app.teardown_request\n    def end_of_request(exception):\n        buffer.append(exception),type='decorated_definition'\nline_star:29,line_end:31|char_star:4,char_end:32";
"@app.teardown_request,type='decorator'\nline_star:29,line_end:29|char_star:4,char_end:25"[shape="box",fillcolor="white",style=filled];
"@app.teardown_request\n    def end_of_request(exception):\n        buffer.append(exception),type='decorated_definition'\nline_star:29,line_end:31|char_star:4,char_end:32"->"@app.teardown_request,type='decorator'\nline_star:29,line_end:29|char_star:4,char_end:25";
"def end_of_request(exception):\n        buffer.append(exception),type='function_definition'\nline_star:30,line_end:31|char_star:4,char_end:32"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.teardown_request\n    def end_of_request(exception):\n        buffer.append(exception),type='decorated_definition'\nline_star:29,line_end:31|char_star:4,char_end:32"->"def end_of_request(exception):\n        buffer.append(exception),type='function_definition'\nline_star:30,line_end:31|char_star:4,char_end:32";
"end_of_request,type='identifier'\nline_star:30,line_end:30|char_star:8,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"def end_of_request(exception):\n        buffer.append(exception),type='function_definition'\nline_star:30,line_end:31|char_star:4,char_end:32"->"end_of_request,type='identifier'\nline_star:30,line_end:30|char_star:8,char_end:22";
"(exception),type='parameters'\nline_star:30,line_end:30|char_star:22,char_end:33"[shape="box",fillcolor="white",style=filled];
"def end_of_request(exception):\n        buffer.append(exception),type='function_definition'\nline_star:30,line_end:31|char_star:4,char_end:32"->"(exception),type='parameters'\nline_star:30,line_end:30|char_star:22,char_end:33";
"exception,type='identifier'\nline_star:30,line_end:30|char_star:23,char_end:32"[shape="point",fillcolor="#121013",style=filled];
"(exception),type='parameters'\nline_star:30,line_end:30|char_star:22,char_end:33"->"exception,type='identifier'\nline_star:30,line_end:30|char_star:23,char_end:32";
"type='INFORMATION BLOCK'\nline_star:31,line_end:31|char_star:8,char_end:32"[shape="point",fillcolor="#121013",style=filled];
"def end_of_request(exception):\n        buffer.append(exception),type='function_definition'\nline_star:30,line_end:31|char_star:4,char_end:32"->"type='INFORMATION BLOCK'\nline_star:31,line_end:31|char_star:8,char_end:32";
"try:\n        raise Exception('dummy')\n    except Exception:\n        pass,type='try_statement'\nline_star:33,line_end:36|char_star:4,char_end:12"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:27,line_end:40|char_star:4,char_end:27"->"try:\n        raise Exception('dummy')\n    except Exception:\n        pass,type='try_statement'\nline_star:33,line_end:36|char_star:4,char_end:12";
"try,type='try'\nline_star:33,line_end:33|char_star:4,char_end:7"[shape="box",fillcolor="white",style=filled];
"try:\n        raise Exception('dummy')\n    except Exception:\n        pass,type='try_statement'\nline_star:33,line_end:36|char_star:4,char_end:12"->"try,type='try'\nline_star:33,line_end:33|char_star:4,char_end:7";
"type='INFORMATION BLOCK'\nline_star:34,line_end:34|char_star:8,char_end:32"[shape="point",fillcolor="#121013",style=filled];
"try:\n        raise Exception('dummy')\n    except Exception:\n        pass,type='try_statement'\nline_star:33,line_end:36|char_star:4,char_end:12"->"type='INFORMATION BLOCK'\nline_star:34,line_end:34|char_star:8,char_end:32";
"raise Exception('dummy'),type='raise_statement'\nline_star:34,line_end:34|char_star:8,char_end:32"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:34,line_end:34|char_star:8,char_end:32"->"raise Exception('dummy'),type='raise_statement'\nline_star:34,line_end:34|char_star:8,char_end:32";
"raise,type='raise'\nline_star:34,line_end:34|char_star:8,char_end:13"[shape="box",fillcolor="white",style=filled];
"raise Exception('dummy'),type='raise_statement'\nline_star:34,line_end:34|char_star:8,char_end:32"->"raise,type='raise'\nline_star:34,line_end:34|char_star:8,char_end:13";
"Exception('dummy'),type='call'\nline_star:34,line_end:34|char_star:14,char_end:32"[shape="box",fillcolor="white",style=filled];
"raise Exception('dummy'),type='raise_statement'\nline_star:34,line_end:34|char_star:8,char_end:32"->"Exception('dummy'),type='call'\nline_star:34,line_end:34|char_star:14,char_end:32";
"Exception,type='identifier'\nline_star:34,line_end:34|char_star:14,char_end:23"[shape="point",fillcolor="#121013",style=filled];
"Exception('dummy'),type='call'\nline_star:34,line_end:34|char_star:14,char_end:32"->"Exception,type='identifier'\nline_star:34,line_end:34|char_star:14,char_end:23";
"('dummy'),type='argument_list'\nline_star:34,line_end:34|char_star:23,char_end:32"[shape="box",fillcolor="white",style=filled];
"Exception('dummy'),type='call'\nline_star:34,line_end:34|char_star:14,char_end:32"->"('dummy'),type='argument_list'\nline_star:34,line_end:34|char_star:23,char_end:32";
"except Exception:\n        pass,type='except_clause'\nline_star:35,line_end:36|char_star:4,char_end:12"[shape="box",fillcolor="white",style=filled];
"try:\n        raise Exception('dummy')\n    except Exception:\n        pass,type='try_statement'\nline_star:33,line_end:36|char_star:4,char_end:12"->"except Exception:\n        pass,type='except_clause'\nline_star:35,line_end:36|char_star:4,char_end:12";
"except,type='except'\nline_star:35,line_end:35|char_star:4,char_end:10"[shape="box",fillcolor="white",style=filled];
"except Exception:\n        pass,type='except_clause'\nline_star:35,line_end:36|char_star:4,char_end:12"->"except,type='except'\nline_star:35,line_end:35|char_star:4,char_end:10";
"Exception,type='identifier'\nline_star:35,line_end:35|char_star:11,char_end:20"[shape="point",fillcolor="#121013",style=filled];
"except Exception:\n        pass,type='except_clause'\nline_star:35,line_end:36|char_star:4,char_end:12"->"Exception,type='identifier'\nline_star:35,line_end:35|char_star:11,char_end:20";
"type='INFORMATION BLOCK'\nline_star:36,line_end:36|char_star:8,char_end:12"[shape="point",fillcolor="#121013",style=filled];
"except Exception:\n        pass,type='except_clause'\nline_star:35,line_end:36|char_star:4,char_end:12"->"type='INFORMATION BLOCK'\nline_star:36,line_end:36|char_star:8,char_end:12";
"pass,type='pass_statement'\nline_star:36,line_end:36|char_star:8,char_end:12"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:36,line_end:36|char_star:8,char_end:12"->"pass,type='pass_statement'\nline_star:36,line_end:36|char_star:8,char_end:12";
"pass,type='pass'\nline_star:36,line_end:36|char_star:8,char_end:12"[shape="box",fillcolor="white",style=filled];
"pass,type='pass_statement'\nline_star:36,line_end:36|char_star:8,char_end:12"->"pass,type='pass'\nline_star:36,line_end:36|char_star:8,char_end:12";
"with app.test_request_context():\n        assert buffer == [],type='with_statement'\nline_star:38,line_end:39|char_star:4,char_end:27"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:27,line_end:40|char_star:4,char_end:27"->"with app.test_request_context():\n        assert buffer == [],type='with_statement'\nline_star:38,line_end:39|char_star:4,char_end:27";
"app.test_request_context(),type='with_clause'\nline_star:38,line_end:38|char_star:9,char_end:35"[shape="box",fillcolor="white",style=filled];
"with app.test_request_context():\n        assert buffer == [],type='with_statement'\nline_star:38,line_end:39|char_star:4,char_end:27"->"app.test_request_context(),type='with_clause'\nline_star:38,line_end:38|char_star:9,char_end:35";
"type='INFORMATION BLOCK'\nline_star:39,line_end:39|char_star:8,char_end:27"[shape="point",fillcolor="#121013",style=filled];
"with app.test_request_context():\n        assert buffer == [],type='with_statement'\nline_star:38,line_end:39|char_star:4,char_end:27"->"type='INFORMATION BLOCK'\nline_star:39,line_end:39|char_star:8,char_end:27";
"assert buffer == [],type='assert_statement'\nline_star:39,line_end:39|char_star:8,char_end:27"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:39,line_end:39|char_star:8,char_end:27"->"assert buffer == [],type='assert_statement'\nline_star:39,line_end:39|char_star:8,char_end:27";
"buffer == [],type='comparison_operator'\nline_star:39,line_end:39|char_star:15,char_end:27"[shape="box",fillcolor="white",style=filled];
"assert buffer == [],type='assert_statement'\nline_star:39,line_end:39|char_star:8,char_end:27"->"buffer == [],type='comparison_operator'\nline_star:39,line_end:39|char_star:15,char_end:27";
"buffer,type='identifier'\nline_star:39,line_end:39|char_star:15,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"buffer == [],type='comparison_operator'\nline_star:39,line_end:39|char_star:15,char_end:27"->"buffer,type='identifier'\nline_star:39,line_end:39|char_star:15,char_end:21";
"assert buffer == [None],type='assert_statement'\nline_star:40,line_end:40|char_star:4,char_end:27"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:27,line_end:40|char_star:4,char_end:27"->"assert buffer == [None],type='assert_statement'\nline_star:40,line_end:40|char_star:4,char_end:27";
"buffer == [None],type='comparison_operator'\nline_star:40,line_end:40|char_star:11,char_end:27"[shape="box",fillcolor="white",style=filled];
"assert buffer == [None],type='assert_statement'\nline_star:40,line_end:40|char_star:4,char_end:27"->"buffer == [None],type='comparison_operator'\nline_star:40,line_end:40|char_star:11,char_end:27";
"buffer,type='identifier'\nline_star:40,line_end:40|char_star:11,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"buffer == [None],type='comparison_operator'\nline_star:40,line_end:40|char_star:11,char_end:27"->"buffer,type='identifier'\nline_star:40,line_end:40|char_star:11,char_end:17";
"[None],type='list'\nline_star:40,line_end:40|char_star:21,char_end:27"[shape="box",fillcolor="white",style=filled];
"buffer == [None],type='comparison_operator'\nline_star:40,line_end:40|char_star:11,char_end:27"->"[None],type='list'\nline_star:40,line_end:40|char_star:21,char_end:27";
"def test_teardown_with_handled_exception(app):\n    buffer = []\n\n    @app.teardown_request\n    def end_of_request(exception):\n        buffer.append(exception)\n\n    with app.test_request_context():\n        assert buffer == []\n        try:\n            raise Exception('dummy')\n        except Exception:\n            pass\n    assert buffer == [None],type='function_definition'\nline_star:43,line_end:56|char_star:0,char_end:27"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_teardown_with_handled_exception(app):\n    buffer = []\n\n    @app.teardown_request\n    def end_of_request(exception):\n        buffer.append(exception)\n\n    with app.test_request_context():\n        assert buffer == []\n        try:\n            raise Exception('dummy')\n        except Exception:\n            pass\n    assert buffer == [None],type='function_definition'\nline_star:43,line_end:56|char_star:0,char_end:27";
"test_teardown_with_handled_exception,type='identifier'\nline_star:43,line_end:43|char_star:4,char_end:40"[shape="point",fillcolor="#121013",style=filled];
"def test_teardown_with_handled_exception(app):\n    buffer = []\n\n    @app.teardown_request\n    def end_of_request(exception):\n        buffer.append(exception)\n\n    with app.test_request_context():\n        assert buffer == []\n        try:\n            raise Exception('dummy')\n        except Exception:\n            pass\n    assert buffer == [None],type='function_definition'\nline_star:43,line_end:56|char_star:0,char_end:27"->"test_teardown_with_handled_exception,type='identifier'\nline_star:43,line_end:43|char_star:4,char_end:40";
"(app),type='parameters'\nline_star:43,line_end:43|char_star:40,char_end:45"[shape="box",fillcolor="white",style=filled];
"def test_teardown_with_handled_exception(app):\n    buffer = []\n\n    @app.teardown_request\n    def end_of_request(exception):\n        buffer.append(exception)\n\n    with app.test_request_context():\n        assert buffer == []\n        try:\n            raise Exception('dummy')\n        except Exception:\n            pass\n    assert buffer == [None],type='function_definition'\nline_star:43,line_end:56|char_star:0,char_end:27"->"(app),type='parameters'\nline_star:43,line_end:43|char_star:40,char_end:45";
"app,type='identifier'\nline_star:43,line_end:43|char_star:41,char_end:44"[shape="point",fillcolor="#121013",style=filled];
"(app),type='parameters'\nline_star:43,line_end:43|char_star:40,char_end:45"->"app,type='identifier'\nline_star:43,line_end:43|char_star:41,char_end:44";
"type='INFORMATION BLOCK'\nline_star:44,line_end:56|char_star:4,char_end:27"[shape="point",fillcolor="#121013",style=filled];
"def test_teardown_with_handled_exception(app):\n    buffer = []\n\n    @app.teardown_request\n    def end_of_request(exception):\n        buffer.append(exception)\n\n    with app.test_request_context():\n        assert buffer == []\n        try:\n            raise Exception('dummy')\n        except Exception:\n            pass\n    assert buffer == [None],type='function_definition'\nline_star:43,line_end:56|char_star:0,char_end:27"->"type='INFORMATION BLOCK'\nline_star:44,line_end:56|char_star:4,char_end:27";
"@app.teardown_request\n    def end_of_request(exception):\n        buffer.append(exception),type='decorated_definition'\nline_star:46,line_end:48|char_star:4,char_end:32"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:44,line_end:56|char_star:4,char_end:27"->"@app.teardown_request\n    def end_of_request(exception):\n        buffer.append(exception),type='decorated_definition'\nline_star:46,line_end:48|char_star:4,char_end:32";
"@app.teardown_request,type='decorator'\nline_star:46,line_end:46|char_star:4,char_end:25"[shape="box",fillcolor="white",style=filled];
"@app.teardown_request\n    def end_of_request(exception):\n        buffer.append(exception),type='decorated_definition'\nline_star:46,line_end:48|char_star:4,char_end:32"->"@app.teardown_request,type='decorator'\nline_star:46,line_end:46|char_star:4,char_end:25";
"def end_of_request(exception):\n        buffer.append(exception),type='function_definition'\nline_star:47,line_end:48|char_star:4,char_end:32"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.teardown_request\n    def end_of_request(exception):\n        buffer.append(exception),type='decorated_definition'\nline_star:46,line_end:48|char_star:4,char_end:32"->"def end_of_request(exception):\n        buffer.append(exception),type='function_definition'\nline_star:47,line_end:48|char_star:4,char_end:32";
"end_of_request,type='identifier'\nline_star:47,line_end:47|char_star:8,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"def end_of_request(exception):\n        buffer.append(exception),type='function_definition'\nline_star:47,line_end:48|char_star:4,char_end:32"->"end_of_request,type='identifier'\nline_star:47,line_end:47|char_star:8,char_end:22";
"(exception),type='parameters'\nline_star:47,line_end:47|char_star:22,char_end:33"[shape="box",fillcolor="white",style=filled];
"def end_of_request(exception):\n        buffer.append(exception),type='function_definition'\nline_star:47,line_end:48|char_star:4,char_end:32"->"(exception),type='parameters'\nline_star:47,line_end:47|char_star:22,char_end:33";
"exception,type='identifier'\nline_star:47,line_end:47|char_star:23,char_end:32"[shape="point",fillcolor="#121013",style=filled];
"(exception),type='parameters'\nline_star:47,line_end:47|char_star:22,char_end:33"->"exception,type='identifier'\nline_star:47,line_end:47|char_star:23,char_end:32";
"type='INFORMATION BLOCK'\nline_star:48,line_end:48|char_star:8,char_end:32"[shape="point",fillcolor="#121013",style=filled];
"def end_of_request(exception):\n        buffer.append(exception),type='function_definition'\nline_star:47,line_end:48|char_star:4,char_end:32"->"type='INFORMATION BLOCK'\nline_star:48,line_end:48|char_star:8,char_end:32";
"with app.test_request_context():\n        assert buffer == []\n        try:\n            raise Exception('dummy')\n        except Exception:\n            pass,type='with_statement'\nline_star:50,line_end:55|char_star:4,char_end:16"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:44,line_end:56|char_star:4,char_end:27"->"with app.test_request_context():\n        assert buffer == []\n        try:\n            raise Exception('dummy')\n        except Exception:\n            pass,type='with_statement'\nline_star:50,line_end:55|char_star:4,char_end:16";
"app.test_request_context(),type='with_clause'\nline_star:50,line_end:50|char_star:9,char_end:35"[shape="box",fillcolor="white",style=filled];
"with app.test_request_context():\n        assert buffer == []\n        try:\n            raise Exception('dummy')\n        except Exception:\n            pass,type='with_statement'\nline_star:50,line_end:55|char_star:4,char_end:16"->"app.test_request_context(),type='with_clause'\nline_star:50,line_end:50|char_star:9,char_end:35";
"type='INFORMATION BLOCK'\nline_star:51,line_end:55|char_star:8,char_end:16"[shape="point",fillcolor="#121013",style=filled];
"with app.test_request_context():\n        assert buffer == []\n        try:\n            raise Exception('dummy')\n        except Exception:\n            pass,type='with_statement'\nline_star:50,line_end:55|char_star:4,char_end:16"->"type='INFORMATION BLOCK'\nline_star:51,line_end:55|char_star:8,char_end:16";
"assert buffer == [],type='assert_statement'\nline_star:51,line_end:51|char_star:8,char_end:27"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:51,line_end:55|char_star:8,char_end:16"->"assert buffer == [],type='assert_statement'\nline_star:51,line_end:51|char_star:8,char_end:27";
"buffer == [],type='comparison_operator'\nline_star:51,line_end:51|char_star:15,char_end:27"[shape="box",fillcolor="white",style=filled];
"assert buffer == [],type='assert_statement'\nline_star:51,line_end:51|char_star:8,char_end:27"->"buffer == [],type='comparison_operator'\nline_star:51,line_end:51|char_star:15,char_end:27";
"buffer,type='identifier'\nline_star:51,line_end:51|char_star:15,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"buffer == [],type='comparison_operator'\nline_star:51,line_end:51|char_star:15,char_end:27"->"buffer,type='identifier'\nline_star:51,line_end:51|char_star:15,char_end:21";
"try:\n            raise Exception('dummy')\n        except Exception:\n            pass,type='try_statement'\nline_star:52,line_end:55|char_star:8,char_end:16"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:51,line_end:55|char_star:8,char_end:16"->"try:\n            raise Exception('dummy')\n        except Exception:\n            pass,type='try_statement'\nline_star:52,line_end:55|char_star:8,char_end:16";
"try,type='try'\nline_star:52,line_end:52|char_star:8,char_end:11"[shape="box",fillcolor="white",style=filled];
"try:\n            raise Exception('dummy')\n        except Exception:\n            pass,type='try_statement'\nline_star:52,line_end:55|char_star:8,char_end:16"->"try,type='try'\nline_star:52,line_end:52|char_star:8,char_end:11";
"type='INFORMATION BLOCK'\nline_star:53,line_end:53|char_star:12,char_end:36"[shape="point",fillcolor="#121013",style=filled];
"try:\n            raise Exception('dummy')\n        except Exception:\n            pass,type='try_statement'\nline_star:52,line_end:55|char_star:8,char_end:16"->"type='INFORMATION BLOCK'\nline_star:53,line_end:53|char_star:12,char_end:36";
"raise Exception('dummy'),type='raise_statement'\nline_star:53,line_end:53|char_star:12,char_end:36"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:53,line_end:53|char_star:12,char_end:36"->"raise Exception('dummy'),type='raise_statement'\nline_star:53,line_end:53|char_star:12,char_end:36";
"raise,type='raise'\nline_star:53,line_end:53|char_star:12,char_end:17"[shape="box",fillcolor="white",style=filled];
"raise Exception('dummy'),type='raise_statement'\nline_star:53,line_end:53|char_star:12,char_end:36"->"raise,type='raise'\nline_star:53,line_end:53|char_star:12,char_end:17";
"Exception('dummy'),type='call'\nline_star:53,line_end:53|char_star:18,char_end:36"[shape="box",fillcolor="white",style=filled];
"raise Exception('dummy'),type='raise_statement'\nline_star:53,line_end:53|char_star:12,char_end:36"->"Exception('dummy'),type='call'\nline_star:53,line_end:53|char_star:18,char_end:36";
"Exception,type='identifier'\nline_star:53,line_end:53|char_star:18,char_end:27"[shape="point",fillcolor="#121013",style=filled];
"Exception('dummy'),type='call'\nline_star:53,line_end:53|char_star:18,char_end:36"->"Exception,type='identifier'\nline_star:53,line_end:53|char_star:18,char_end:27";
"('dummy'),type='argument_list'\nline_star:53,line_end:53|char_star:27,char_end:36"[shape="box",fillcolor="white",style=filled];
"Exception('dummy'),type='call'\nline_star:53,line_end:53|char_star:18,char_end:36"->"('dummy'),type='argument_list'\nline_star:53,line_end:53|char_star:27,char_end:36";
"except Exception:\n            pass,type='except_clause'\nline_star:54,line_end:55|char_star:8,char_end:16"[shape="box",fillcolor="white",style=filled];
"try:\n            raise Exception('dummy')\n        except Exception:\n            pass,type='try_statement'\nline_star:52,line_end:55|char_star:8,char_end:16"->"except Exception:\n            pass,type='except_clause'\nline_star:54,line_end:55|char_star:8,char_end:16";
"except,type='except'\nline_star:54,line_end:54|char_star:8,char_end:14"[shape="box",fillcolor="white",style=filled];
"except Exception:\n            pass,type='except_clause'\nline_star:54,line_end:55|char_star:8,char_end:16"->"except,type='except'\nline_star:54,line_end:54|char_star:8,char_end:14";
"Exception,type='identifier'\nline_star:54,line_end:54|char_star:15,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"except Exception:\n            pass,type='except_clause'\nline_star:54,line_end:55|char_star:8,char_end:16"->"Exception,type='identifier'\nline_star:54,line_end:54|char_star:15,char_end:24";
"type='INFORMATION BLOCK'\nline_star:55,line_end:55|char_star:12,char_end:16"[shape="point",fillcolor="#121013",style=filled];
"except Exception:\n            pass,type='except_clause'\nline_star:54,line_end:55|char_star:8,char_end:16"->"type='INFORMATION BLOCK'\nline_star:55,line_end:55|char_star:12,char_end:16";
"pass,type='pass_statement'\nline_star:55,line_end:55|char_star:12,char_end:16"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:55,line_end:55|char_star:12,char_end:16"->"pass,type='pass_statement'\nline_star:55,line_end:55|char_star:12,char_end:16";
"pass,type='pass'\nline_star:55,line_end:55|char_star:12,char_end:16"[shape="box",fillcolor="white",style=filled];
"pass,type='pass_statement'\nline_star:55,line_end:55|char_star:12,char_end:16"->"pass,type='pass'\nline_star:55,line_end:55|char_star:12,char_end:16";
"assert buffer == [None],type='assert_statement'\nline_star:56,line_end:56|char_star:4,char_end:27"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:44,line_end:56|char_star:4,char_end:27"->"assert buffer == [None],type='assert_statement'\nline_star:56,line_end:56|char_star:4,char_end:27";
"buffer == [None],type='comparison_operator'\nline_star:56,line_end:56|char_star:11,char_end:27"[shape="box",fillcolor="white",style=filled];
"assert buffer == [None],type='assert_statement'\nline_star:56,line_end:56|char_star:4,char_end:27"->"buffer == [None],type='comparison_operator'\nline_star:56,line_end:56|char_star:11,char_end:27";
"buffer,type='identifier'\nline_star:56,line_end:56|char_star:11,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"buffer == [None],type='comparison_operator'\nline_star:56,line_end:56|char_star:11,char_end:27"->"buffer,type='identifier'\nline_star:56,line_end:56|char_star:11,char_end:17";
"[None],type='list'\nline_star:56,line_end:56|char_star:21,char_end:27"[shape="box",fillcolor="white",style=filled];
"buffer == [None],type='comparison_operator'\nline_star:56,line_end:56|char_star:11,char_end:27"->"[None],type='list'\nline_star:56,line_end:56|char_star:21,char_end:27";
"def test_proper_test_request_context(app):\n    app.config.update(SERVER_NAME='localhost.localdomain:5000')\n\n    @app.route('/')\n    def index():\n        return None\n\n    @app.route('/', subdomain='foo')\n    def sub():\n        return None\n\n    with app.test_request_context('/'):\n        assert (\n            flask.url_for('index', _external=True)\n            == 'http://localhost.localdomain:5000/'\n        )\n\n    with app.test_request_context('/'):\n        assert (\n            flask.url_for('sub', _external=True)\n            == 'http://foo.localhost.localdomain:5000/'\n        )\n\n    # suppress Werkzeug 0.15 warning about name mismatch\n    with pytest.warns(None):\n        with app.test_request_context(\n            '/', environ_overrides={'HTTP_HOST': 'localhost'}\n        ):\n            pass\n\n    app.config.update(SERVER_NAME='localhost')\n    with app.test_request_context('/', environ_overrides={'SERVER_NAME': 'localhost'}):\n        pass\n\n    app.config.update(SERVER_NAME='localhost:80')\n    with app.test_request_context(\n        '/', environ_overrides={'SERVER_NAME': 'localhost:80'}\n    ):\n        pass,type='function_definition'\nline_star:59,line_end:97|char_star:0,char_end:12"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_proper_test_request_context(app):\n    app.config.update(SERVER_NAME='localhost.localdomain:5000')\n\n    @app.route('/')\n    def index():\n        return None\n\n    @app.route('/', subdomain='foo')\n    def sub():\n        return None\n\n    with app.test_request_context('/'):\n        assert (\n            flask.url_for('index', _external=True)\n            == 'http://localhost.localdomain:5000/'\n        )\n\n    with app.test_request_context('/'):\n        assert (\n            flask.url_for('sub', _external=True)\n            == 'http://foo.localhost.localdomain:5000/'\n        )\n\n    # suppress Werkzeug 0.15 warning about name mismatch\n    with pytest.warns(None):\n        with app.test_request_context(\n            '/', environ_overrides={'HTTP_HOST': 'localhost'}\n        ):\n            pass\n\n    app.config.update(SERVER_NAME='localhost')\n    with app.test_request_context('/', environ_overrides={'SERVER_NAME': 'localhost'}):\n        pass\n\n    app.config.update(SERVER_NAME='localhost:80')\n    with app.test_request_context(\n        '/', environ_overrides={'SERVER_NAME': 'localhost:80'}\n    ):\n        pass,type='function_definition'\nline_star:59,line_end:97|char_star:0,char_end:12";
"test_proper_test_request_context,type='identifier'\nline_star:59,line_end:59|char_star:4,char_end:36"[shape="point",fillcolor="#121013",style=filled];
"def test_proper_test_request_context(app):\n    app.config.update(SERVER_NAME='localhost.localdomain:5000')\n\n    @app.route('/')\n    def index():\n        return None\n\n    @app.route('/', subdomain='foo')\n    def sub():\n        return None\n\n    with app.test_request_context('/'):\n        assert (\n            flask.url_for('index', _external=True)\n            == 'http://localhost.localdomain:5000/'\n        )\n\n    with app.test_request_context('/'):\n        assert (\n            flask.url_for('sub', _external=True)\n            == 'http://foo.localhost.localdomain:5000/'\n        )\n\n    # suppress Werkzeug 0.15 warning about name mismatch\n    with pytest.warns(None):\n        with app.test_request_context(\n            '/', environ_overrides={'HTTP_HOST': 'localhost'}\n        ):\n            pass\n\n    app.config.update(SERVER_NAME='localhost')\n    with app.test_request_context('/', environ_overrides={'SERVER_NAME': 'localhost'}):\n        pass\n\n    app.config.update(SERVER_NAME='localhost:80')\n    with app.test_request_context(\n        '/', environ_overrides={'SERVER_NAME': 'localhost:80'}\n    ):\n        pass,type='function_definition'\nline_star:59,line_end:97|char_star:0,char_end:12"->"test_proper_test_request_context,type='identifier'\nline_star:59,line_end:59|char_star:4,char_end:36";
"(app),type='parameters'\nline_star:59,line_end:59|char_star:36,char_end:41"[shape="box",fillcolor="white",style=filled];
"def test_proper_test_request_context(app):\n    app.config.update(SERVER_NAME='localhost.localdomain:5000')\n\n    @app.route('/')\n    def index():\n        return None\n\n    @app.route('/', subdomain='foo')\n    def sub():\n        return None\n\n    with app.test_request_context('/'):\n        assert (\n            flask.url_for('index', _external=True)\n            == 'http://localhost.localdomain:5000/'\n        )\n\n    with app.test_request_context('/'):\n        assert (\n            flask.url_for('sub', _external=True)\n            == 'http://foo.localhost.localdomain:5000/'\n        )\n\n    # suppress Werkzeug 0.15 warning about name mismatch\n    with pytest.warns(None):\n        with app.test_request_context(\n            '/', environ_overrides={'HTTP_HOST': 'localhost'}\n        ):\n            pass\n\n    app.config.update(SERVER_NAME='localhost')\n    with app.test_request_context('/', environ_overrides={'SERVER_NAME': 'localhost'}):\n        pass\n\n    app.config.update(SERVER_NAME='localhost:80')\n    with app.test_request_context(\n        '/', environ_overrides={'SERVER_NAME': 'localhost:80'}\n    ):\n        pass,type='function_definition'\nline_star:59,line_end:97|char_star:0,char_end:12"->"(app),type='parameters'\nline_star:59,line_end:59|char_star:36,char_end:41";
"app,type='identifier'\nline_star:59,line_end:59|char_star:37,char_end:40"[shape="point",fillcolor="#121013",style=filled];
"(app),type='parameters'\nline_star:59,line_end:59|char_star:36,char_end:41"->"app,type='identifier'\nline_star:59,line_end:59|char_star:37,char_end:40";
"type='INFORMATION BLOCK'\nline_star:60,line_end:97|char_star:4,char_end:12"[shape="point",fillcolor="#121013",style=filled];
"def test_proper_test_request_context(app):\n    app.config.update(SERVER_NAME='localhost.localdomain:5000')\n\n    @app.route('/')\n    def index():\n        return None\n\n    @app.route('/', subdomain='foo')\n    def sub():\n        return None\n\n    with app.test_request_context('/'):\n        assert (\n            flask.url_for('index', _external=True)\n            == 'http://localhost.localdomain:5000/'\n        )\n\n    with app.test_request_context('/'):\n        assert (\n            flask.url_for('sub', _external=True)\n            == 'http://foo.localhost.localdomain:5000/'\n        )\n\n    # suppress Werkzeug 0.15 warning about name mismatch\n    with pytest.warns(None):\n        with app.test_request_context(\n            '/', environ_overrides={'HTTP_HOST': 'localhost'}\n        ):\n            pass\n\n    app.config.update(SERVER_NAME='localhost')\n    with app.test_request_context('/', environ_overrides={'SERVER_NAME': 'localhost'}):\n        pass\n\n    app.config.update(SERVER_NAME='localhost:80')\n    with app.test_request_context(\n        '/', environ_overrides={'SERVER_NAME': 'localhost:80'}\n    ):\n        pass,type='function_definition'\nline_star:59,line_end:97|char_star:0,char_end:12"->"type='INFORMATION BLOCK'\nline_star:60,line_end:97|char_star:4,char_end:12";
"@app.route('/')\n    def index():\n        return None,type='decorated_definition'\nline_star:62,line_end:64|char_star:4,char_end:19"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:60,line_end:97|char_star:4,char_end:12"->"@app.route('/')\n    def index():\n        return None,type='decorated_definition'\nline_star:62,line_end:64|char_star:4,char_end:19";
"@app.route('/'),type='decorator'\nline_star:62,line_end:62|char_star:4,char_end:19"[shape="box",fillcolor="white",style=filled];
"@app.route('/')\n    def index():\n        return None,type='decorated_definition'\nline_star:62,line_end:64|char_star:4,char_end:19"->"@app.route('/'),type='decorator'\nline_star:62,line_end:62|char_star:4,char_end:19";
"def index():\n        return None,type='function_definition'\nline_star:63,line_end:64|char_star:4,char_end:19"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.route('/')\n    def index():\n        return None,type='decorated_definition'\nline_star:62,line_end:64|char_star:4,char_end:19"->"def index():\n        return None,type='function_definition'\nline_star:63,line_end:64|char_star:4,char_end:19";
"index,type='identifier'\nline_star:63,line_end:63|char_star:8,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"def index():\n        return None,type='function_definition'\nline_star:63,line_end:64|char_star:4,char_end:19"->"index,type='identifier'\nline_star:63,line_end:63|char_star:8,char_end:13";
"type='INFORMATION BLOCK'\nline_star:64,line_end:64|char_star:8,char_end:19"[shape="point",fillcolor="#121013",style=filled];
"def index():\n        return None,type='function_definition'\nline_star:63,line_end:64|char_star:4,char_end:19"->"type='INFORMATION BLOCK'\nline_star:64,line_end:64|char_star:8,char_end:19";
"return None,type='return_statement'\nline_star:64,line_end:64|char_star:8,char_end:19"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:64,line_end:64|char_star:8,char_end:19"->"return None,type='return_statement'\nline_star:64,line_end:64|char_star:8,char_end:19";
"@app.route('/', subdomain='foo')\n    def sub():\n        return None,type='decorated_definition'\nline_star:66,line_end:68|char_star:4,char_end:19"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:60,line_end:97|char_star:4,char_end:12"->"@app.route('/', subdomain='foo')\n    def sub():\n        return None,type='decorated_definition'\nline_star:66,line_end:68|char_star:4,char_end:19";
"@app.route('/', subdomain='foo'),type='decorator'\nline_star:66,line_end:66|char_star:4,char_end:36"[shape="box",fillcolor="white",style=filled];
"@app.route('/', subdomain='foo')\n    def sub():\n        return None,type='decorated_definition'\nline_star:66,line_end:68|char_star:4,char_end:19"->"@app.route('/', subdomain='foo'),type='decorator'\nline_star:66,line_end:66|char_star:4,char_end:36";
"def sub():\n        return None,type='function_definition'\nline_star:67,line_end:68|char_star:4,char_end:19"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.route('/', subdomain='foo')\n    def sub():\n        return None,type='decorated_definition'\nline_star:66,line_end:68|char_star:4,char_end:19"->"def sub():\n        return None,type='function_definition'\nline_star:67,line_end:68|char_star:4,char_end:19";
"sub,type='identifier'\nline_star:67,line_end:67|char_star:8,char_end:11"[shape="point",fillcolor="#121013",style=filled];
"def sub():\n        return None,type='function_definition'\nline_star:67,line_end:68|char_star:4,char_end:19"->"sub,type='identifier'\nline_star:67,line_end:67|char_star:8,char_end:11";
"type='INFORMATION BLOCK'\nline_star:68,line_end:68|char_star:8,char_end:19"[shape="point",fillcolor="#121013",style=filled];
"def sub():\n        return None,type='function_definition'\nline_star:67,line_end:68|char_star:4,char_end:19"->"type='INFORMATION BLOCK'\nline_star:68,line_end:68|char_star:8,char_end:19";
"return None,type='return_statement'\nline_star:68,line_end:68|char_star:8,char_end:19"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:68,line_end:68|char_star:8,char_end:19"->"return None,type='return_statement'\nline_star:68,line_end:68|char_star:8,char_end:19";
"with app.test_request_context('/'):\n        assert (\n            flask.url_for('index', _external=True)\n            == 'http://localhost.localdomain:5000/'\n        ),type='with_statement'\nline_star:70,line_end:74|char_star:4,char_end:9"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:60,line_end:97|char_star:4,char_end:12"->"with app.test_request_context('/'):\n        assert (\n            flask.url_for('index', _external=True)\n            == 'http://localhost.localdomain:5000/'\n        ),type='with_statement'\nline_star:70,line_end:74|char_star:4,char_end:9";
"app.test_request_context('/'),type='with_clause'\nline_star:70,line_end:70|char_star:9,char_end:38"[shape="box",fillcolor="white",style=filled];
"with app.test_request_context('/'):\n        assert (\n            flask.url_for('index', _external=True)\n            == 'http://localhost.localdomain:5000/'\n        ),type='with_statement'\nline_star:70,line_end:74|char_star:4,char_end:9"->"app.test_request_context('/'),type='with_clause'\nline_star:70,line_end:70|char_star:9,char_end:38";
"type='INFORMATION BLOCK'\nline_star:71,line_end:74|char_star:8,char_end:9"[shape="point",fillcolor="#121013",style=filled];
"with app.test_request_context('/'):\n        assert (\n            flask.url_for('index', _external=True)\n            == 'http://localhost.localdomain:5000/'\n        ),type='with_statement'\nline_star:70,line_end:74|char_star:4,char_end:9"->"type='INFORMATION BLOCK'\nline_star:71,line_end:74|char_star:8,char_end:9";
"assert (\n            flask.url_for('index', _external=True)\n            == 'http://localhost.localdomain:5000/'\n        ),type='assert_statement'\nline_star:71,line_end:74|char_star:8,char_end:9"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:71,line_end:74|char_star:8,char_end:9"->"assert (\n            flask.url_for('index', _external=True)\n            == 'http://localhost.localdomain:5000/'\n        ),type='assert_statement'\nline_star:71,line_end:74|char_star:8,char_end:9";
"(\n            flask.url_for('index', _external=True)\n            == 'http://localhost.localdomain:5000/'\n        ),type='parenthesized_expression'\nline_star:71,line_end:74|char_star:15,char_end:9"[shape="box",fillcolor="white",style=filled];
"assert (\n            flask.url_for('index', _external=True)\n            == 'http://localhost.localdomain:5000/'\n        ),type='assert_statement'\nline_star:71,line_end:74|char_star:8,char_end:9"->"(\n            flask.url_for('index', _external=True)\n            == 'http://localhost.localdomain:5000/'\n        ),type='parenthesized_expression'\nline_star:71,line_end:74|char_star:15,char_end:9";
"flask.url_for('index', _external=True)\n            == 'http://localhost.localdomain:5000/',type='comparison_operator'\nline_star:72,line_end:73|char_star:12,char_end:51"[shape="box",fillcolor="white",style=filled];
"(\n            flask.url_for('index', _external=True)\n            == 'http://localhost.localdomain:5000/'\n        ),type='parenthesized_expression'\nline_star:71,line_end:74|char_star:15,char_end:9"->"flask.url_for('index', _external=True)\n            == 'http://localhost.localdomain:5000/',type='comparison_operator'\nline_star:72,line_end:73|char_star:12,char_end:51";
"flask.url_for('index', _external=True),type='call'\nline_star:72,line_end:72|char_star:12,char_end:50"[shape="box",fillcolor="white",style=filled];
"flask.url_for('index', _external=True)\n            == 'http://localhost.localdomain:5000/',type='comparison_operator'\nline_star:72,line_end:73|char_star:12,char_end:51"->"flask.url_for('index', _external=True),type='call'\nline_star:72,line_end:72|char_star:12,char_end:50";
"flask.url_for,type='attribute'\nline_star:72,line_end:72|char_star:12,char_end:25"[shape="box",fillcolor="white",style=filled];
"flask.url_for('index', _external=True),type='call'\nline_star:72,line_end:72|char_star:12,char_end:50"->"flask.url_for,type='attribute'\nline_star:72,line_end:72|char_star:12,char_end:25";
"flask,type='identifier'\nline_star:72,line_end:72|char_star:12,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"flask.url_for,type='attribute'\nline_star:72,line_end:72|char_star:12,char_end:25"->"flask,type='identifier'\nline_star:72,line_end:72|char_star:12,char_end:17";
"url_for,type='identifier'\nline_star:72,line_end:72|char_star:18,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"flask.url_for,type='attribute'\nline_star:72,line_end:72|char_star:12,char_end:25"->"url_for,type='identifier'\nline_star:72,line_end:72|char_star:18,char_end:25";
"('index', _external=True),type='argument_list'\nline_star:72,line_end:72|char_star:25,char_end:50"[shape="box",fillcolor="white",style=filled];
"flask.url_for('index', _external=True),type='call'\nline_star:72,line_end:72|char_star:12,char_end:50"->"('index', _external=True),type='argument_list'\nline_star:72,line_end:72|char_star:25,char_end:50";
"_external=True,type='keyword_argument'\nline_star:72,line_end:72|char_star:35,char_end:49"[shape="box",fillcolor="white",style=filled];
"('index', _external=True),type='argument_list'\nline_star:72,line_end:72|char_star:25,char_end:50"->"_external=True,type='keyword_argument'\nline_star:72,line_end:72|char_star:35,char_end:49";
"_external,type='identifier'\nline_star:72,line_end:72|char_star:35,char_end:44"[shape="point",fillcolor="#121013",style=filled];
"_external=True,type='keyword_argument'\nline_star:72,line_end:72|char_star:35,char_end:49"->"_external,type='identifier'\nline_star:72,line_end:72|char_star:35,char_end:44";
"with app.test_request_context('/'):\n        assert (\n            flask.url_for('sub', _external=True)\n            == 'http://foo.localhost.localdomain:5000/'\n        ),type='with_statement'\nline_star:76,line_end:80|char_star:4,char_end:9"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:60,line_end:97|char_star:4,char_end:12"->"with app.test_request_context('/'):\n        assert (\n            flask.url_for('sub', _external=True)\n            == 'http://foo.localhost.localdomain:5000/'\n        ),type='with_statement'\nline_star:76,line_end:80|char_star:4,char_end:9";
"app.test_request_context('/'),type='with_clause'\nline_star:76,line_end:76|char_star:9,char_end:38"[shape="box",fillcolor="white",style=filled];
"with app.test_request_context('/'):\n        assert (\n            flask.url_for('sub', _external=True)\n            == 'http://foo.localhost.localdomain:5000/'\n        ),type='with_statement'\nline_star:76,line_end:80|char_star:4,char_end:9"->"app.test_request_context('/'),type='with_clause'\nline_star:76,line_end:76|char_star:9,char_end:38";
"type='INFORMATION BLOCK'\nline_star:77,line_end:80|char_star:8,char_end:9"[shape="point",fillcolor="#121013",style=filled];
"with app.test_request_context('/'):\n        assert (\n            flask.url_for('sub', _external=True)\n            == 'http://foo.localhost.localdomain:5000/'\n        ),type='with_statement'\nline_star:76,line_end:80|char_star:4,char_end:9"->"type='INFORMATION BLOCK'\nline_star:77,line_end:80|char_star:8,char_end:9";
"assert (\n            flask.url_for('sub', _external=True)\n            == 'http://foo.localhost.localdomain:5000/'\n        ),type='assert_statement'\nline_star:77,line_end:80|char_star:8,char_end:9"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:77,line_end:80|char_star:8,char_end:9"->"assert (\n            flask.url_for('sub', _external=True)\n            == 'http://foo.localhost.localdomain:5000/'\n        ),type='assert_statement'\nline_star:77,line_end:80|char_star:8,char_end:9";
"(\n            flask.url_for('sub', _external=True)\n            == 'http://foo.localhost.localdomain:5000/'\n        ),type='parenthesized_expression'\nline_star:77,line_end:80|char_star:15,char_end:9"[shape="box",fillcolor="white",style=filled];
"assert (\n            flask.url_for('sub', _external=True)\n            == 'http://foo.localhost.localdomain:5000/'\n        ),type='assert_statement'\nline_star:77,line_end:80|char_star:8,char_end:9"->"(\n            flask.url_for('sub', _external=True)\n            == 'http://foo.localhost.localdomain:5000/'\n        ),type='parenthesized_expression'\nline_star:77,line_end:80|char_star:15,char_end:9";
"flask.url_for('sub', _external=True)\n            == 'http://foo.localhost.localdomain:5000/',type='comparison_operator'\nline_star:78,line_end:79|char_star:12,char_end:55"[shape="box",fillcolor="white",style=filled];
"(\n            flask.url_for('sub', _external=True)\n            == 'http://foo.localhost.localdomain:5000/'\n        ),type='parenthesized_expression'\nline_star:77,line_end:80|char_star:15,char_end:9"->"flask.url_for('sub', _external=True)\n            == 'http://foo.localhost.localdomain:5000/',type='comparison_operator'\nline_star:78,line_end:79|char_star:12,char_end:55";
"flask.url_for('sub', _external=True),type='call'\nline_star:78,line_end:78|char_star:12,char_end:48"[shape="box",fillcolor="white",style=filled];
"flask.url_for('sub', _external=True)\n            == 'http://foo.localhost.localdomain:5000/',type='comparison_operator'\nline_star:78,line_end:79|char_star:12,char_end:55"->"flask.url_for('sub', _external=True),type='call'\nline_star:78,line_end:78|char_star:12,char_end:48";
"flask.url_for,type='attribute'\nline_star:78,line_end:78|char_star:12,char_end:25"[shape="box",fillcolor="white",style=filled];
"flask.url_for('sub', _external=True),type='call'\nline_star:78,line_end:78|char_star:12,char_end:48"->"flask.url_for,type='attribute'\nline_star:78,line_end:78|char_star:12,char_end:25";
"flask,type='identifier'\nline_star:78,line_end:78|char_star:12,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"flask.url_for,type='attribute'\nline_star:78,line_end:78|char_star:12,char_end:25"->"flask,type='identifier'\nline_star:78,line_end:78|char_star:12,char_end:17";
"url_for,type='identifier'\nline_star:78,line_end:78|char_star:18,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"flask.url_for,type='attribute'\nline_star:78,line_end:78|char_star:12,char_end:25"->"url_for,type='identifier'\nline_star:78,line_end:78|char_star:18,char_end:25";
"('sub', _external=True),type='argument_list'\nline_star:78,line_end:78|char_star:25,char_end:48"[shape="box",fillcolor="white",style=filled];
"flask.url_for('sub', _external=True),type='call'\nline_star:78,line_end:78|char_star:12,char_end:48"->"('sub', _external=True),type='argument_list'\nline_star:78,line_end:78|char_star:25,char_end:48";
"_external=True,type='keyword_argument'\nline_star:78,line_end:78|char_star:33,char_end:47"[shape="box",fillcolor="white",style=filled];
"('sub', _external=True),type='argument_list'\nline_star:78,line_end:78|char_star:25,char_end:48"->"_external=True,type='keyword_argument'\nline_star:78,line_end:78|char_star:33,char_end:47";
"_external,type='identifier'\nline_star:78,line_end:78|char_star:33,char_end:42"[shape="point",fillcolor="#121013",style=filled];
"_external=True,type='keyword_argument'\nline_star:78,line_end:78|char_star:33,char_end:47"->"_external,type='identifier'\nline_star:78,line_end:78|char_star:33,char_end:42";
"# suppress Werkzeug 0.15 warning about name mismatch,type='comment'\nline_star:82,line_end:82|char_star:4,char_end:56"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:60,line_end:97|char_star:4,char_end:12"->"# suppress Werkzeug 0.15 warning about name mismatch,type='comment'\nline_star:82,line_end:82|char_star:4,char_end:56";
"with pytest.warns(None):\n        with app.test_request_context(\n            '/', environ_overrides={'HTTP_HOST': 'localhost'}\n        ):\n            pass,type='with_statement'\nline_star:83,line_end:87|char_star:4,char_end:16"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:60,line_end:97|char_star:4,char_end:12"->"with pytest.warns(None):\n        with app.test_request_context(\n            '/', environ_overrides={'HTTP_HOST': 'localhost'}\n        ):\n            pass,type='with_statement'\nline_star:83,line_end:87|char_star:4,char_end:16";
"pytest.warns(None),type='with_clause'\nline_star:83,line_end:83|char_star:9,char_end:27"[shape="box",fillcolor="white",style=filled];
"with pytest.warns(None):\n        with app.test_request_context(\n            '/', environ_overrides={'HTTP_HOST': 'localhost'}\n        ):\n            pass,type='with_statement'\nline_star:83,line_end:87|char_star:4,char_end:16"->"pytest.warns(None),type='with_clause'\nline_star:83,line_end:83|char_star:9,char_end:27";
"type='INFORMATION BLOCK'\nline_star:84,line_end:87|char_star:8,char_end:16"[shape="point",fillcolor="#121013",style=filled];
"with pytest.warns(None):\n        with app.test_request_context(\n            '/', environ_overrides={'HTTP_HOST': 'localhost'}\n        ):\n            pass,type='with_statement'\nline_star:83,line_end:87|char_star:4,char_end:16"->"type='INFORMATION BLOCK'\nline_star:84,line_end:87|char_star:8,char_end:16";
"with app.test_request_context(\n            '/', environ_overrides={'HTTP_HOST': 'localhost'}\n        ):\n            pass,type='with_statement'\nline_star:84,line_end:87|char_star:8,char_end:16"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:84,line_end:87|char_star:8,char_end:16"->"with app.test_request_context(\n            '/', environ_overrides={'HTTP_HOST': 'localhost'}\n        ):\n            pass,type='with_statement'\nline_star:84,line_end:87|char_star:8,char_end:16";
"app.test_request_context(\n            '/', environ_overrides={'HTTP_HOST': 'localhost'}\n        ),type='with_clause'\nline_star:84,line_end:86|char_star:13,char_end:9"[shape="box",fillcolor="white",style=filled];
"with app.test_request_context(\n            '/', environ_overrides={'HTTP_HOST': 'localhost'}\n        ):\n            pass,type='with_statement'\nline_star:84,line_end:87|char_star:8,char_end:16"->"app.test_request_context(\n            '/', environ_overrides={'HTTP_HOST': 'localhost'}\n        ),type='with_clause'\nline_star:84,line_end:86|char_star:13,char_end:9";
"type='INFORMATION BLOCK'\nline_star:87,line_end:87|char_star:12,char_end:16"[shape="point",fillcolor="#121013",style=filled];
"with app.test_request_context(\n            '/', environ_overrides={'HTTP_HOST': 'localhost'}\n        ):\n            pass,type='with_statement'\nline_star:84,line_end:87|char_star:8,char_end:16"->"type='INFORMATION BLOCK'\nline_star:87,line_end:87|char_star:12,char_end:16";
"pass,type='pass_statement'\nline_star:87,line_end:87|char_star:12,char_end:16"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:87,line_end:87|char_star:12,char_end:16"->"pass,type='pass_statement'\nline_star:87,line_end:87|char_star:12,char_end:16";
"pass,type='pass'\nline_star:87,line_end:87|char_star:12,char_end:16"[shape="box",fillcolor="white",style=filled];
"pass,type='pass_statement'\nline_star:87,line_end:87|char_star:12,char_end:16"->"pass,type='pass'\nline_star:87,line_end:87|char_star:12,char_end:16";
"with app.test_request_context('/', environ_overrides={'SERVER_NAME': 'localhost'}):\n        pass,type='with_statement'\nline_star:90,line_end:91|char_star:4,char_end:12"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:60,line_end:97|char_star:4,char_end:12"->"with app.test_request_context('/', environ_overrides={'SERVER_NAME': 'localhost'}):\n        pass,type='with_statement'\nline_star:90,line_end:91|char_star:4,char_end:12";
"app.test_request_context('/', environ_overrides={'SERVER_NAME': 'localhost'}),type='with_clause'\nline_star:90,line_end:90|char_star:9,char_end:86"[shape="box",fillcolor="white",style=filled];
"with app.test_request_context('/', environ_overrides={'SERVER_NAME': 'localhost'}):\n        pass,type='with_statement'\nline_star:90,line_end:91|char_star:4,char_end:12"->"app.test_request_context('/', environ_overrides={'SERVER_NAME': 'localhost'}),type='with_clause'\nline_star:90,line_end:90|char_star:9,char_end:86";
"type='INFORMATION BLOCK'\nline_star:91,line_end:91|char_star:8,char_end:12"[shape="point",fillcolor="#121013",style=filled];
"with app.test_request_context('/', environ_overrides={'SERVER_NAME': 'localhost'}):\n        pass,type='with_statement'\nline_star:90,line_end:91|char_star:4,char_end:12"->"type='INFORMATION BLOCK'\nline_star:91,line_end:91|char_star:8,char_end:12";
"pass,type='pass_statement'\nline_star:91,line_end:91|char_star:8,char_end:12"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:91,line_end:91|char_star:8,char_end:12"->"pass,type='pass_statement'\nline_star:91,line_end:91|char_star:8,char_end:12";
"pass,type='pass'\nline_star:91,line_end:91|char_star:8,char_end:12"[shape="box",fillcolor="white",style=filled];
"pass,type='pass_statement'\nline_star:91,line_end:91|char_star:8,char_end:12"->"pass,type='pass'\nline_star:91,line_end:91|char_star:8,char_end:12";
"with app.test_request_context(\n        '/', environ_overrides={'SERVER_NAME': 'localhost:80'}\n    ):\n        pass,type='with_statement'\nline_star:94,line_end:97|char_star:4,char_end:12"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:60,line_end:97|char_star:4,char_end:12"->"with app.test_request_context(\n        '/', environ_overrides={'SERVER_NAME': 'localhost:80'}\n    ):\n        pass,type='with_statement'\nline_star:94,line_end:97|char_star:4,char_end:12";
"app.test_request_context(\n        '/', environ_overrides={'SERVER_NAME': 'localhost:80'}\n    ),type='with_clause'\nline_star:94,line_end:96|char_star:9,char_end:5"[shape="box",fillcolor="white",style=filled];
"with app.test_request_context(\n        '/', environ_overrides={'SERVER_NAME': 'localhost:80'}\n    ):\n        pass,type='with_statement'\nline_star:94,line_end:97|char_star:4,char_end:12"->"app.test_request_context(\n        '/', environ_overrides={'SERVER_NAME': 'localhost:80'}\n    ),type='with_clause'\nline_star:94,line_end:96|char_star:9,char_end:5";
"type='INFORMATION BLOCK'\nline_star:97,line_end:97|char_star:8,char_end:12"[shape="point",fillcolor="#121013",style=filled];
"with app.test_request_context(\n        '/', environ_overrides={'SERVER_NAME': 'localhost:80'}\n    ):\n        pass,type='with_statement'\nline_star:94,line_end:97|char_star:4,char_end:12"->"type='INFORMATION BLOCK'\nline_star:97,line_end:97|char_star:8,char_end:12";
"pass,type='pass_statement'\nline_star:97,line_end:97|char_star:8,char_end:12"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:97,line_end:97|char_star:8,char_end:12"->"pass,type='pass_statement'\nline_star:97,line_end:97|char_star:8,char_end:12";
"pass,type='pass'\nline_star:97,line_end:97|char_star:8,char_end:12"[shape="box",fillcolor="white",style=filled];
"pass,type='pass_statement'\nline_star:97,line_end:97|char_star:8,char_end:12"->"pass,type='pass'\nline_star:97,line_end:97|char_star:8,char_end:12";
"def test_context_binding(app):\n    @app.route('/')\n    def index():\n        return f'Hello {flask.request.args['name']}!'\n\n    @app.route('/meh')\n    def meh():\n        return flask.request.url\n\n    with app.test_request_context('/?name=World'):\n        assert index() == 'Hello World!'\n    with app.test_request_context('/meh'):\n        assert meh() == 'http://localhost/meh'\n    assert flask._request_ctx_stack.top is None,type='function_definition'\nline_star:100,line_end:113|char_star:0,char_end:47"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_context_binding(app):\n    @app.route('/')\n    def index():\n        return f'Hello {flask.request.args['name']}!'\n\n    @app.route('/meh')\n    def meh():\n        return flask.request.url\n\n    with app.test_request_context('/?name=World'):\n        assert index() == 'Hello World!'\n    with app.test_request_context('/meh'):\n        assert meh() == 'http://localhost/meh'\n    assert flask._request_ctx_stack.top is None,type='function_definition'\nline_star:100,line_end:113|char_star:0,char_end:47";
"test_context_binding,type='identifier'\nline_star:100,line_end:100|char_star:4,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"def test_context_binding(app):\n    @app.route('/')\n    def index():\n        return f'Hello {flask.request.args['name']}!'\n\n    @app.route('/meh')\n    def meh():\n        return flask.request.url\n\n    with app.test_request_context('/?name=World'):\n        assert index() == 'Hello World!'\n    with app.test_request_context('/meh'):\n        assert meh() == 'http://localhost/meh'\n    assert flask._request_ctx_stack.top is None,type='function_definition'\nline_star:100,line_end:113|char_star:0,char_end:47"->"test_context_binding,type='identifier'\nline_star:100,line_end:100|char_star:4,char_end:24";
"(app),type='parameters'\nline_star:100,line_end:100|char_star:24,char_end:29"[shape="box",fillcolor="white",style=filled];
"def test_context_binding(app):\n    @app.route('/')\n    def index():\n        return f'Hello {flask.request.args['name']}!'\n\n    @app.route('/meh')\n    def meh():\n        return flask.request.url\n\n    with app.test_request_context('/?name=World'):\n        assert index() == 'Hello World!'\n    with app.test_request_context('/meh'):\n        assert meh() == 'http://localhost/meh'\n    assert flask._request_ctx_stack.top is None,type='function_definition'\nline_star:100,line_end:113|char_star:0,char_end:47"->"(app),type='parameters'\nline_star:100,line_end:100|char_star:24,char_end:29";
"app,type='identifier'\nline_star:100,line_end:100|char_star:25,char_end:28"[shape="point",fillcolor="#121013",style=filled];
"(app),type='parameters'\nline_star:100,line_end:100|char_star:24,char_end:29"->"app,type='identifier'\nline_star:100,line_end:100|char_star:25,char_end:28";
"type='INFORMATION BLOCK'\nline_star:101,line_end:113|char_star:4,char_end:47"[shape="point",fillcolor="#121013",style=filled];
"def test_context_binding(app):\n    @app.route('/')\n    def index():\n        return f'Hello {flask.request.args['name']}!'\n\n    @app.route('/meh')\n    def meh():\n        return flask.request.url\n\n    with app.test_request_context('/?name=World'):\n        assert index() == 'Hello World!'\n    with app.test_request_context('/meh'):\n        assert meh() == 'http://localhost/meh'\n    assert flask._request_ctx_stack.top is None,type='function_definition'\nline_star:100,line_end:113|char_star:0,char_end:47"->"type='INFORMATION BLOCK'\nline_star:101,line_end:113|char_star:4,char_end:47";
"@app.route('/')\n    def index():\n        return f'Hello {flask.request.args['name']}!',type='decorated_definition'\nline_star:101,line_end:103|char_star:4,char_end:53"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:101,line_end:113|char_star:4,char_end:47"->"@app.route('/')\n    def index():\n        return f'Hello {flask.request.args['name']}!',type='decorated_definition'\nline_star:101,line_end:103|char_star:4,char_end:53";
"@app.route('/'),type='decorator'\nline_star:101,line_end:101|char_star:4,char_end:19"[shape="box",fillcolor="white",style=filled];
"@app.route('/')\n    def index():\n        return f'Hello {flask.request.args['name']}!',type='decorated_definition'\nline_star:101,line_end:103|char_star:4,char_end:53"->"@app.route('/'),type='decorator'\nline_star:101,line_end:101|char_star:4,char_end:19";
"def index():\n        return f'Hello {flask.request.args['name']}!',type='function_definition'\nline_star:102,line_end:103|char_star:4,char_end:53"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.route('/')\n    def index():\n        return f'Hello {flask.request.args['name']}!',type='decorated_definition'\nline_star:101,line_end:103|char_star:4,char_end:53"->"def index():\n        return f'Hello {flask.request.args['name']}!',type='function_definition'\nline_star:102,line_end:103|char_star:4,char_end:53";
"index,type='identifier'\nline_star:102,line_end:102|char_star:8,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"def index():\n        return f'Hello {flask.request.args['name']}!',type='function_definition'\nline_star:102,line_end:103|char_star:4,char_end:53"->"index,type='identifier'\nline_star:102,line_end:102|char_star:8,char_end:13";
"type='INFORMATION BLOCK'\nline_star:103,line_end:103|char_star:8,char_end:53"[shape="point",fillcolor="#121013",style=filled];
"def index():\n        return f'Hello {flask.request.args['name']}!',type='function_definition'\nline_star:102,line_end:103|char_star:4,char_end:53"->"type='INFORMATION BLOCK'\nline_star:103,line_end:103|char_star:8,char_end:53";
"return f'Hello {flask.request.args['name']}!',type='return_statement'\nline_star:103,line_end:103|char_star:8,char_end:53"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:103,line_end:103|char_star:8,char_end:53"->"return f'Hello {flask.request.args['name']}!',type='return_statement'\nline_star:103,line_end:103|char_star:8,char_end:53";
"@app.route('/meh')\n    def meh():\n        return flask.request.url,type='decorated_definition'\nline_star:105,line_end:107|char_star:4,char_end:32"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:101,line_end:113|char_star:4,char_end:47"->"@app.route('/meh')\n    def meh():\n        return flask.request.url,type='decorated_definition'\nline_star:105,line_end:107|char_star:4,char_end:32";
"@app.route('/meh'),type='decorator'\nline_star:105,line_end:105|char_star:4,char_end:22"[shape="box",fillcolor="white",style=filled];
"@app.route('/meh')\n    def meh():\n        return flask.request.url,type='decorated_definition'\nline_star:105,line_end:107|char_star:4,char_end:32"->"@app.route('/meh'),type='decorator'\nline_star:105,line_end:105|char_star:4,char_end:22";
"def meh():\n        return flask.request.url,type='function_definition'\nline_star:106,line_end:107|char_star:4,char_end:32"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.route('/meh')\n    def meh():\n        return flask.request.url,type='decorated_definition'\nline_star:105,line_end:107|char_star:4,char_end:32"->"def meh():\n        return flask.request.url,type='function_definition'\nline_star:106,line_end:107|char_star:4,char_end:32";
"meh,type='identifier'\nline_star:106,line_end:106|char_star:8,char_end:11"[shape="point",fillcolor="#121013",style=filled];
"def meh():\n        return flask.request.url,type='function_definition'\nline_star:106,line_end:107|char_star:4,char_end:32"->"meh,type='identifier'\nline_star:106,line_end:106|char_star:8,char_end:11";
"type='INFORMATION BLOCK'\nline_star:107,line_end:107|char_star:8,char_end:32"[shape="point",fillcolor="#121013",style=filled];
"def meh():\n        return flask.request.url,type='function_definition'\nline_star:106,line_end:107|char_star:4,char_end:32"->"type='INFORMATION BLOCK'\nline_star:107,line_end:107|char_star:8,char_end:32";
"return flask.request.url,type='return_statement'\nline_star:107,line_end:107|char_star:8,char_end:32"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:107,line_end:107|char_star:8,char_end:32"->"return flask.request.url,type='return_statement'\nline_star:107,line_end:107|char_star:8,char_end:32";
"with app.test_request_context('/?name=World'):\n        assert index() == 'Hello World!',type='with_statement'\nline_star:109,line_end:110|char_star:4,char_end:40"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:101,line_end:113|char_star:4,char_end:47"->"with app.test_request_context('/?name=World'):\n        assert index() == 'Hello World!',type='with_statement'\nline_star:109,line_end:110|char_star:4,char_end:40";
"app.test_request_context('/?name=World'),type='with_clause'\nline_star:109,line_end:109|char_star:9,char_end:49"[shape="box",fillcolor="white",style=filled];
"with app.test_request_context('/?name=World'):\n        assert index() == 'Hello World!',type='with_statement'\nline_star:109,line_end:110|char_star:4,char_end:40"->"app.test_request_context('/?name=World'),type='with_clause'\nline_star:109,line_end:109|char_star:9,char_end:49";
"type='INFORMATION BLOCK'\nline_star:110,line_end:110|char_star:8,char_end:40"[shape="point",fillcolor="#121013",style=filled];
"with app.test_request_context('/?name=World'):\n        assert index() == 'Hello World!',type='with_statement'\nline_star:109,line_end:110|char_star:4,char_end:40"->"type='INFORMATION BLOCK'\nline_star:110,line_end:110|char_star:8,char_end:40";
"assert index() == 'Hello World!',type='assert_statement'\nline_star:110,line_end:110|char_star:8,char_end:40"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:110,line_end:110|char_star:8,char_end:40"->"assert index() == 'Hello World!',type='assert_statement'\nline_star:110,line_end:110|char_star:8,char_end:40";
"index() == 'Hello World!',type='comparison_operator'\nline_star:110,line_end:110|char_star:15,char_end:40"[shape="box",fillcolor="white",style=filled];
"assert index() == 'Hello World!',type='assert_statement'\nline_star:110,line_end:110|char_star:8,char_end:40"->"index() == 'Hello World!',type='comparison_operator'\nline_star:110,line_end:110|char_star:15,char_end:40";
"index(),type='call'\nline_star:110,line_end:110|char_star:15,char_end:22"[shape="box",fillcolor="white",style=filled];
"index() == 'Hello World!',type='comparison_operator'\nline_star:110,line_end:110|char_star:15,char_end:40"->"index(),type='call'\nline_star:110,line_end:110|char_star:15,char_end:22";
"index,type='identifier'\nline_star:110,line_end:110|char_star:15,char_end:20"[shape="point",fillcolor="#121013",style=filled];
"index(),type='call'\nline_star:110,line_end:110|char_star:15,char_end:22"->"index,type='identifier'\nline_star:110,line_end:110|char_star:15,char_end:20";
"with app.test_request_context('/meh'):\n        assert meh() == 'http://localhost/meh',type='with_statement'\nline_star:111,line_end:112|char_star:4,char_end:46"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:101,line_end:113|char_star:4,char_end:47"->"with app.test_request_context('/meh'):\n        assert meh() == 'http://localhost/meh',type='with_statement'\nline_star:111,line_end:112|char_star:4,char_end:46";
"app.test_request_context('/meh'),type='with_clause'\nline_star:111,line_end:111|char_star:9,char_end:41"[shape="box",fillcolor="white",style=filled];
"with app.test_request_context('/meh'):\n        assert meh() == 'http://localhost/meh',type='with_statement'\nline_star:111,line_end:112|char_star:4,char_end:46"->"app.test_request_context('/meh'),type='with_clause'\nline_star:111,line_end:111|char_star:9,char_end:41";
"type='INFORMATION BLOCK'\nline_star:112,line_end:112|char_star:8,char_end:46"[shape="point",fillcolor="#121013",style=filled];
"with app.test_request_context('/meh'):\n        assert meh() == 'http://localhost/meh',type='with_statement'\nline_star:111,line_end:112|char_star:4,char_end:46"->"type='INFORMATION BLOCK'\nline_star:112,line_end:112|char_star:8,char_end:46";
"assert meh() == 'http://localhost/meh',type='assert_statement'\nline_star:112,line_end:112|char_star:8,char_end:46"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:112,line_end:112|char_star:8,char_end:46"->"assert meh() == 'http://localhost/meh',type='assert_statement'\nline_star:112,line_end:112|char_star:8,char_end:46";
"meh() == 'http://localhost/meh',type='comparison_operator'\nline_star:112,line_end:112|char_star:15,char_end:46"[shape="box",fillcolor="white",style=filled];
"assert meh() == 'http://localhost/meh',type='assert_statement'\nline_star:112,line_end:112|char_star:8,char_end:46"->"meh() == 'http://localhost/meh',type='comparison_operator'\nline_star:112,line_end:112|char_star:15,char_end:46";
"meh(),type='call'\nline_star:112,line_end:112|char_star:15,char_end:20"[shape="box",fillcolor="white",style=filled];
"meh() == 'http://localhost/meh',type='comparison_operator'\nline_star:112,line_end:112|char_star:15,char_end:46"->"meh(),type='call'\nline_star:112,line_end:112|char_star:15,char_end:20";
"meh,type='identifier'\nline_star:112,line_end:112|char_star:15,char_end:18"[shape="point",fillcolor="#121013",style=filled];
"meh(),type='call'\nline_star:112,line_end:112|char_star:15,char_end:20"->"meh,type='identifier'\nline_star:112,line_end:112|char_star:15,char_end:18";
"assert flask._request_ctx_stack.top is None,type='assert_statement'\nline_star:113,line_end:113|char_star:4,char_end:47"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:101,line_end:113|char_star:4,char_end:47"->"assert flask._request_ctx_stack.top is None,type='assert_statement'\nline_star:113,line_end:113|char_star:4,char_end:47";
"flask._request_ctx_stack.top is None,type='comparison_operator'\nline_star:113,line_end:113|char_star:11,char_end:47"[shape="box",fillcolor="white",style=filled];
"assert flask._request_ctx_stack.top is None,type='assert_statement'\nline_star:113,line_end:113|char_star:4,char_end:47"->"flask._request_ctx_stack.top is None,type='comparison_operator'\nline_star:113,line_end:113|char_star:11,char_end:47";
"flask._request_ctx_stack.top,type='attribute'\nline_star:113,line_end:113|char_star:11,char_end:39"[shape="box",fillcolor="white",style=filled];
"flask._request_ctx_stack.top is None,type='comparison_operator'\nline_star:113,line_end:113|char_star:11,char_end:47"->"flask._request_ctx_stack.top,type='attribute'\nline_star:113,line_end:113|char_star:11,char_end:39";
"flask._request_ctx_stack,type='attribute'\nline_star:113,line_end:113|char_star:11,char_end:35"[shape="box",fillcolor="white",style=filled];
"flask._request_ctx_stack.top,type='attribute'\nline_star:113,line_end:113|char_star:11,char_end:39"->"flask._request_ctx_stack,type='attribute'\nline_star:113,line_end:113|char_star:11,char_end:35";
"flask,type='identifier'\nline_star:113,line_end:113|char_star:11,char_end:16"[shape="point",fillcolor="#121013",style=filled];
"flask._request_ctx_stack,type='attribute'\nline_star:113,line_end:113|char_star:11,char_end:35"->"flask,type='identifier'\nline_star:113,line_end:113|char_star:11,char_end:16";
"_request_ctx_stack,type='identifier'\nline_star:113,line_end:113|char_star:17,char_end:35"[shape="point",fillcolor="#121013",style=filled];
"flask._request_ctx_stack,type='attribute'\nline_star:113,line_end:113|char_star:11,char_end:35"->"_request_ctx_stack,type='identifier'\nline_star:113,line_end:113|char_star:17,char_end:35";
"top,type='identifier'\nline_star:113,line_end:113|char_star:36,char_end:39"[shape="point",fillcolor="#121013",style=filled];
"flask._request_ctx_stack.top,type='attribute'\nline_star:113,line_end:113|char_star:11,char_end:39"->"top,type='identifier'\nline_star:113,line_end:113|char_star:36,char_end:39";
"def test_context_test(app):\n    assert not flask.request\n    assert not flask.has_request_context()\n    ctx = app.test_request_context()\n    ctx.push()\n    try:\n        assert flask.request\n        assert flask.has_request_context()\n    finally:\n        ctx.pop(),type='function_definition'\nline_star:116,line_end:125|char_star:0,char_end:17"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_context_test(app):\n    assert not flask.request\n    assert not flask.has_request_context()\n    ctx = app.test_request_context()\n    ctx.push()\n    try:\n        assert flask.request\n        assert flask.has_request_context()\n    finally:\n        ctx.pop(),type='function_definition'\nline_star:116,line_end:125|char_star:0,char_end:17";
"test_context_test,type='identifier'\nline_star:116,line_end:116|char_star:4,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"def test_context_test(app):\n    assert not flask.request\n    assert not flask.has_request_context()\n    ctx = app.test_request_context()\n    ctx.push()\n    try:\n        assert flask.request\n        assert flask.has_request_context()\n    finally:\n        ctx.pop(),type='function_definition'\nline_star:116,line_end:125|char_star:0,char_end:17"->"test_context_test,type='identifier'\nline_star:116,line_end:116|char_star:4,char_end:21";
"(app),type='parameters'\nline_star:116,line_end:116|char_star:21,char_end:26"[shape="box",fillcolor="white",style=filled];
"def test_context_test(app):\n    assert not flask.request\n    assert not flask.has_request_context()\n    ctx = app.test_request_context()\n    ctx.push()\n    try:\n        assert flask.request\n        assert flask.has_request_context()\n    finally:\n        ctx.pop(),type='function_definition'\nline_star:116,line_end:125|char_star:0,char_end:17"->"(app),type='parameters'\nline_star:116,line_end:116|char_star:21,char_end:26";
"app,type='identifier'\nline_star:116,line_end:116|char_star:22,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"(app),type='parameters'\nline_star:116,line_end:116|char_star:21,char_end:26"->"app,type='identifier'\nline_star:116,line_end:116|char_star:22,char_end:25";
"type='INFORMATION BLOCK'\nline_star:117,line_end:125|char_star:4,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"def test_context_test(app):\n    assert not flask.request\n    assert not flask.has_request_context()\n    ctx = app.test_request_context()\n    ctx.push()\n    try:\n        assert flask.request\n        assert flask.has_request_context()\n    finally:\n        ctx.pop(),type='function_definition'\nline_star:116,line_end:125|char_star:0,char_end:17"->"type='INFORMATION BLOCK'\nline_star:117,line_end:125|char_star:4,char_end:17";
"assert not flask.request,type='assert_statement'\nline_star:117,line_end:117|char_star:4,char_end:28"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:117,line_end:125|char_star:4,char_end:17"->"assert not flask.request,type='assert_statement'\nline_star:117,line_end:117|char_star:4,char_end:28";
"not flask.request,type='not_operator'\nline_star:117,line_end:117|char_star:11,char_end:28"[shape="box",fillcolor="white",style=filled];
"assert not flask.request,type='assert_statement'\nline_star:117,line_end:117|char_star:4,char_end:28"->"not flask.request,type='not_operator'\nline_star:117,line_end:117|char_star:11,char_end:28";
"flask.request,type='attribute'\nline_star:117,line_end:117|char_star:15,char_end:28"[shape="box",fillcolor="white",style=filled];
"not flask.request,type='not_operator'\nline_star:117,line_end:117|char_star:11,char_end:28"->"flask.request,type='attribute'\nline_star:117,line_end:117|char_star:15,char_end:28";
"flask,type='identifier'\nline_star:117,line_end:117|char_star:15,char_end:20"[shape="point",fillcolor="#121013",style=filled];
"flask.request,type='attribute'\nline_star:117,line_end:117|char_star:15,char_end:28"->"flask,type='identifier'\nline_star:117,line_end:117|char_star:15,char_end:20";
"request,type='identifier'\nline_star:117,line_end:117|char_star:21,char_end:28"[shape="point",fillcolor="#121013",style=filled];
"flask.request,type='attribute'\nline_star:117,line_end:117|char_star:15,char_end:28"->"request,type='identifier'\nline_star:117,line_end:117|char_star:21,char_end:28";
"assert not flask.has_request_context(),type='assert_statement'\nline_star:118,line_end:118|char_star:4,char_end:42"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:117,line_end:125|char_star:4,char_end:17"->"assert not flask.has_request_context(),type='assert_statement'\nline_star:118,line_end:118|char_star:4,char_end:42";
"not flask.has_request_context(),type='not_operator'\nline_star:118,line_end:118|char_star:11,char_end:42"[shape="box",fillcolor="white",style=filled];
"assert not flask.has_request_context(),type='assert_statement'\nline_star:118,line_end:118|char_star:4,char_end:42"->"not flask.has_request_context(),type='not_operator'\nline_star:118,line_end:118|char_star:11,char_end:42";
"flask.has_request_context(),type='call'\nline_star:118,line_end:118|char_star:15,char_end:42"[shape="box",fillcolor="white",style=filled];
"not flask.has_request_context(),type='not_operator'\nline_star:118,line_end:118|char_star:11,char_end:42"->"flask.has_request_context(),type='call'\nline_star:118,line_end:118|char_star:15,char_end:42";
"flask.has_request_context,type='attribute'\nline_star:118,line_end:118|char_star:15,char_end:40"[shape="box",fillcolor="white",style=filled];
"flask.has_request_context(),type='call'\nline_star:118,line_end:118|char_star:15,char_end:42"->"flask.has_request_context,type='attribute'\nline_star:118,line_end:118|char_star:15,char_end:40";
"flask,type='identifier'\nline_star:118,line_end:118|char_star:15,char_end:20"[shape="point",fillcolor="#121013",style=filled];
"flask.has_request_context,type='attribute'\nline_star:118,line_end:118|char_star:15,char_end:40"->"flask,type='identifier'\nline_star:118,line_end:118|char_star:15,char_end:20";
"has_request_context,type='identifier'\nline_star:118,line_end:118|char_star:21,char_end:40"[shape="point",fillcolor="#121013",style=filled];
"flask.has_request_context,type='attribute'\nline_star:118,line_end:118|char_star:15,char_end:40"->"has_request_context,type='identifier'\nline_star:118,line_end:118|char_star:21,char_end:40";
"try:\n        assert flask.request\n        assert flask.has_request_context()\n    finally:\n        ctx.pop(),type='try_statement'\nline_star:121,line_end:125|char_star:4,char_end:17"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:117,line_end:125|char_star:4,char_end:17"->"try:\n        assert flask.request\n        assert flask.has_request_context()\n    finally:\n        ctx.pop(),type='try_statement'\nline_star:121,line_end:125|char_star:4,char_end:17";
"try,type='try'\nline_star:121,line_end:121|char_star:4,char_end:7"[shape="box",fillcolor="white",style=filled];
"try:\n        assert flask.request\n        assert flask.has_request_context()\n    finally:\n        ctx.pop(),type='try_statement'\nline_star:121,line_end:125|char_star:4,char_end:17"->"try,type='try'\nline_star:121,line_end:121|char_star:4,char_end:7";
"type='INFORMATION BLOCK'\nline_star:122,line_end:123|char_star:8,char_end:42"[shape="point",fillcolor="#121013",style=filled];
"try:\n        assert flask.request\n        assert flask.has_request_context()\n    finally:\n        ctx.pop(),type='try_statement'\nline_star:121,line_end:125|char_star:4,char_end:17"->"type='INFORMATION BLOCK'\nline_star:122,line_end:123|char_star:8,char_end:42";
"assert flask.request,type='assert_statement'\nline_star:122,line_end:122|char_star:8,char_end:28"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:122,line_end:123|char_star:8,char_end:42"->"assert flask.request,type='assert_statement'\nline_star:122,line_end:122|char_star:8,char_end:28";
"flask.request,type='attribute'\nline_star:122,line_end:122|char_star:15,char_end:28"[shape="box",fillcolor="white",style=filled];
"assert flask.request,type='assert_statement'\nline_star:122,line_end:122|char_star:8,char_end:28"->"flask.request,type='attribute'\nline_star:122,line_end:122|char_star:15,char_end:28";
"flask,type='identifier'\nline_star:122,line_end:122|char_star:15,char_end:20"[shape="point",fillcolor="#121013",style=filled];
"flask.request,type='attribute'\nline_star:122,line_end:122|char_star:15,char_end:28"->"flask,type='identifier'\nline_star:122,line_end:122|char_star:15,char_end:20";
"request,type='identifier'\nline_star:122,line_end:122|char_star:21,char_end:28"[shape="point",fillcolor="#121013",style=filled];
"flask.request,type='attribute'\nline_star:122,line_end:122|char_star:15,char_end:28"->"request,type='identifier'\nline_star:122,line_end:122|char_star:21,char_end:28";
"assert flask.has_request_context(),type='assert_statement'\nline_star:123,line_end:123|char_star:8,char_end:42"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:122,line_end:123|char_star:8,char_end:42"->"assert flask.has_request_context(),type='assert_statement'\nline_star:123,line_end:123|char_star:8,char_end:42";
"flask.has_request_context(),type='call'\nline_star:123,line_end:123|char_star:15,char_end:42"[shape="box",fillcolor="white",style=filled];
"assert flask.has_request_context(),type='assert_statement'\nline_star:123,line_end:123|char_star:8,char_end:42"->"flask.has_request_context(),type='call'\nline_star:123,line_end:123|char_star:15,char_end:42";
"flask.has_request_context,type='attribute'\nline_star:123,line_end:123|char_star:15,char_end:40"[shape="box",fillcolor="white",style=filled];
"flask.has_request_context(),type='call'\nline_star:123,line_end:123|char_star:15,char_end:42"->"flask.has_request_context,type='attribute'\nline_star:123,line_end:123|char_star:15,char_end:40";
"flask,type='identifier'\nline_star:123,line_end:123|char_star:15,char_end:20"[shape="point",fillcolor="#121013",style=filled];
"flask.has_request_context,type='attribute'\nline_star:123,line_end:123|char_star:15,char_end:40"->"flask,type='identifier'\nline_star:123,line_end:123|char_star:15,char_end:20";
"has_request_context,type='identifier'\nline_star:123,line_end:123|char_star:21,char_end:40"[shape="point",fillcolor="#121013",style=filled];
"flask.has_request_context,type='attribute'\nline_star:123,line_end:123|char_star:15,char_end:40"->"has_request_context,type='identifier'\nline_star:123,line_end:123|char_star:21,char_end:40";
"finally:\n        ctx.pop(),type='finally_clause'\nline_star:124,line_end:125|char_star:4,char_end:17"[shape="box",fillcolor="white",style=filled];
"try:\n        assert flask.request\n        assert flask.has_request_context()\n    finally:\n        ctx.pop(),type='try_statement'\nline_star:121,line_end:125|char_star:4,char_end:17"->"finally:\n        ctx.pop(),type='finally_clause'\nline_star:124,line_end:125|char_star:4,char_end:17";
"finally,type='finally'\nline_star:124,line_end:124|char_star:4,char_end:11"[shape="box",fillcolor="white",style=filled];
"finally:\n        ctx.pop(),type='finally_clause'\nline_star:124,line_end:125|char_star:4,char_end:17"->"finally,type='finally'\nline_star:124,line_end:124|char_star:4,char_end:11";
"type='INFORMATION BLOCK'\nline_star:125,line_end:125|char_star:8,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"finally:\n        ctx.pop(),type='finally_clause'\nline_star:124,line_end:125|char_star:4,char_end:17"->"type='INFORMATION BLOCK'\nline_star:125,line_end:125|char_star:8,char_end:17";
"def test_manual_context_binding(app):\n    @app.route('/')\n    def index():\n        return f'Hello {flask.request.args['name']}!'\n\n    ctx = app.test_request_context('/?name=World')\n    ctx.push()\n    assert index() == 'Hello World!'\n    ctx.pop()\n    with pytest.raises(RuntimeError):\n        index(),type='function_definition'\nline_star:128,line_end:138|char_star:0,char_end:15"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_manual_context_binding(app):\n    @app.route('/')\n    def index():\n        return f'Hello {flask.request.args['name']}!'\n\n    ctx = app.test_request_context('/?name=World')\n    ctx.push()\n    assert index() == 'Hello World!'\n    ctx.pop()\n    with pytest.raises(RuntimeError):\n        index(),type='function_definition'\nline_star:128,line_end:138|char_star:0,char_end:15";
"test_manual_context_binding,type='identifier'\nline_star:128,line_end:128|char_star:4,char_end:31"[shape="point",fillcolor="#121013",style=filled];
"def test_manual_context_binding(app):\n    @app.route('/')\n    def index():\n        return f'Hello {flask.request.args['name']}!'\n\n    ctx = app.test_request_context('/?name=World')\n    ctx.push()\n    assert index() == 'Hello World!'\n    ctx.pop()\n    with pytest.raises(RuntimeError):\n        index(),type='function_definition'\nline_star:128,line_end:138|char_star:0,char_end:15"->"test_manual_context_binding,type='identifier'\nline_star:128,line_end:128|char_star:4,char_end:31";
"(app),type='parameters'\nline_star:128,line_end:128|char_star:31,char_end:36"[shape="box",fillcolor="white",style=filled];
"def test_manual_context_binding(app):\n    @app.route('/')\n    def index():\n        return f'Hello {flask.request.args['name']}!'\n\n    ctx = app.test_request_context('/?name=World')\n    ctx.push()\n    assert index() == 'Hello World!'\n    ctx.pop()\n    with pytest.raises(RuntimeError):\n        index(),type='function_definition'\nline_star:128,line_end:138|char_star:0,char_end:15"->"(app),type='parameters'\nline_star:128,line_end:128|char_star:31,char_end:36";
"app,type='identifier'\nline_star:128,line_end:128|char_star:32,char_end:35"[shape="point",fillcolor="#121013",style=filled];
"(app),type='parameters'\nline_star:128,line_end:128|char_star:31,char_end:36"->"app,type='identifier'\nline_star:128,line_end:128|char_star:32,char_end:35";
"type='INFORMATION BLOCK'\nline_star:129,line_end:138|char_star:4,char_end:15"[shape="point",fillcolor="#121013",style=filled];
"def test_manual_context_binding(app):\n    @app.route('/')\n    def index():\n        return f'Hello {flask.request.args['name']}!'\n\n    ctx = app.test_request_context('/?name=World')\n    ctx.push()\n    assert index() == 'Hello World!'\n    ctx.pop()\n    with pytest.raises(RuntimeError):\n        index(),type='function_definition'\nline_star:128,line_end:138|char_star:0,char_end:15"->"type='INFORMATION BLOCK'\nline_star:129,line_end:138|char_star:4,char_end:15";
"@app.route('/')\n    def index():\n        return f'Hello {flask.request.args['name']}!',type='decorated_definition'\nline_star:129,line_end:131|char_star:4,char_end:53"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:129,line_end:138|char_star:4,char_end:15"->"@app.route('/')\n    def index():\n        return f'Hello {flask.request.args['name']}!',type='decorated_definition'\nline_star:129,line_end:131|char_star:4,char_end:53";
"@app.route('/'),type='decorator'\nline_star:129,line_end:129|char_star:4,char_end:19"[shape="box",fillcolor="white",style=filled];
"@app.route('/')\n    def index():\n        return f'Hello {flask.request.args['name']}!',type='decorated_definition'\nline_star:129,line_end:131|char_star:4,char_end:53"->"@app.route('/'),type='decorator'\nline_star:129,line_end:129|char_star:4,char_end:19";
"def index():\n        return f'Hello {flask.request.args['name']}!',type='function_definition'\nline_star:130,line_end:131|char_star:4,char_end:53"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.route('/')\n    def index():\n        return f'Hello {flask.request.args['name']}!',type='decorated_definition'\nline_star:129,line_end:131|char_star:4,char_end:53"->"def index():\n        return f'Hello {flask.request.args['name']}!',type='function_definition'\nline_star:130,line_end:131|char_star:4,char_end:53";
"index,type='identifier'\nline_star:130,line_end:130|char_star:8,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"def index():\n        return f'Hello {flask.request.args['name']}!',type='function_definition'\nline_star:130,line_end:131|char_star:4,char_end:53"->"index,type='identifier'\nline_star:130,line_end:130|char_star:8,char_end:13";
"type='INFORMATION BLOCK'\nline_star:131,line_end:131|char_star:8,char_end:53"[shape="point",fillcolor="#121013",style=filled];
"def index():\n        return f'Hello {flask.request.args['name']}!',type='function_definition'\nline_star:130,line_end:131|char_star:4,char_end:53"->"type='INFORMATION BLOCK'\nline_star:131,line_end:131|char_star:8,char_end:53";
"return f'Hello {flask.request.args['name']}!',type='return_statement'\nline_star:131,line_end:131|char_star:8,char_end:53"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:131,line_end:131|char_star:8,char_end:53"->"return f'Hello {flask.request.args['name']}!',type='return_statement'\nline_star:131,line_end:131|char_star:8,char_end:53";
"assert index() == 'Hello World!',type='assert_statement'\nline_star:135,line_end:135|char_star:4,char_end:36"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:129,line_end:138|char_star:4,char_end:15"->"assert index() == 'Hello World!',type='assert_statement'\nline_star:135,line_end:135|char_star:4,char_end:36";
"index() == 'Hello World!',type='comparison_operator'\nline_star:135,line_end:135|char_star:11,char_end:36"[shape="box",fillcolor="white",style=filled];
"assert index() == 'Hello World!',type='assert_statement'\nline_star:135,line_end:135|char_star:4,char_end:36"->"index() == 'Hello World!',type='comparison_operator'\nline_star:135,line_end:135|char_star:11,char_end:36";
"index(),type='call'\nline_star:135,line_end:135|char_star:11,char_end:18"[shape="box",fillcolor="white",style=filled];
"index() == 'Hello World!',type='comparison_operator'\nline_star:135,line_end:135|char_star:11,char_end:36"->"index(),type='call'\nline_star:135,line_end:135|char_star:11,char_end:18";
"index,type='identifier'\nline_star:135,line_end:135|char_star:11,char_end:16"[shape="point",fillcolor="#121013",style=filled];
"index(),type='call'\nline_star:135,line_end:135|char_star:11,char_end:18"->"index,type='identifier'\nline_star:135,line_end:135|char_star:11,char_end:16";
"with pytest.raises(RuntimeError):\n        index(),type='with_statement'\nline_star:137,line_end:138|char_star:4,char_end:15"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:129,line_end:138|char_star:4,char_end:15"->"with pytest.raises(RuntimeError):\n        index(),type='with_statement'\nline_star:137,line_end:138|char_star:4,char_end:15";
"pytest.raises(RuntimeError),type='with_clause'\nline_star:137,line_end:137|char_star:9,char_end:36"[shape="box",fillcolor="white",style=filled];
"with pytest.raises(RuntimeError):\n        index(),type='with_statement'\nline_star:137,line_end:138|char_star:4,char_end:15"->"pytest.raises(RuntimeError),type='with_clause'\nline_star:137,line_end:137|char_star:9,char_end:36";
"type='INFORMATION BLOCK'\nline_star:138,line_end:138|char_star:8,char_end:15"[shape="point",fillcolor="#121013",style=filled];
"with pytest.raises(RuntimeError):\n        index(),type='with_statement'\nline_star:137,line_end:138|char_star:4,char_end:15"->"type='INFORMATION BLOCK'\nline_star:138,line_end:138|char_star:8,char_end:15";
"@pytest.mark.skipif(greenlet is None, reason='greenlet not installed')\nclass TestGreenletContextCopying:\n    def test_greenlet_context_copying(self, app, client):\n        greenlets = []\n\n        @app.route('/')\n        def index():\n            flask.session['fizz'] = 'buzz'\n            reqctx = flask._request_ctx_stack.top.copy()\n\n            def g():\n                assert not flask.request\n                assert not flask.current_app\n                with reqctx:\n                    assert flask.request\n                    assert flask.current_app == app\n                    assert flask.request.path == '/'\n                    assert flask.request.args['foo'] == 'bar'\n                    assert flask.session.get('fizz') == 'buzz'\n                assert not flask.request\n                return 42\n\n            greenlets.append(greenlet(g))\n            return 'Hello World!'\n\n        rv = client.get('/?foo=bar')\n        assert rv.data == b'Hello World!'\n\n        result = greenlets[0].run()\n        assert result == 42\n\n    def test_greenlet_context_copying_api(self, app, client):\n        greenlets = []\n\n        @app.route('/')\n        def index():\n            flask.session['fizz'] = 'buzz'\n\n            @flask.copy_current_request_context\n            def g():\n                assert flask.request\n                assert flask.current_app == app\n                assert flask.request.path == '/'\n                assert flask.request.args['foo'] == 'bar'\n                assert flask.session.get('fizz') == 'buzz'\n                return 42\n\n            greenlets.append(greenlet(g))\n            return 'Hello World!'\n\n        rv = client.get('/?foo=bar')\n        assert rv.data == b'Hello World!'\n\n        result = greenlets[0].run()\n        assert result == 42,type='decorated_definition'\nline_star:141,line_end:195|char_star:0,char_end:27"[shape="box",fillcolor="#c8c6a7",style=filled];
"MODULE"->"@pytest.mark.skipif(greenlet is None, reason='greenlet not installed')\nclass TestGreenletContextCopying:\n    def test_greenlet_context_copying(self, app, client):\n        greenlets = []\n\n        @app.route('/')\n        def index():\n            flask.session['fizz'] = 'buzz'\n            reqctx = flask._request_ctx_stack.top.copy()\n\n            def g():\n                assert not flask.request\n                assert not flask.current_app\n                with reqctx:\n                    assert flask.request\n                    assert flask.current_app == app\n                    assert flask.request.path == '/'\n                    assert flask.request.args['foo'] == 'bar'\n                    assert flask.session.get('fizz') == 'buzz'\n                assert not flask.request\n                return 42\n\n            greenlets.append(greenlet(g))\n            return 'Hello World!'\n\n        rv = client.get('/?foo=bar')\n        assert rv.data == b'Hello World!'\n\n        result = greenlets[0].run()\n        assert result == 42\n\n    def test_greenlet_context_copying_api(self, app, client):\n        greenlets = []\n\n        @app.route('/')\n        def index():\n            flask.session['fizz'] = 'buzz'\n\n            @flask.copy_current_request_context\n            def g():\n                assert flask.request\n                assert flask.current_app == app\n                assert flask.request.path == '/'\n                assert flask.request.args['foo'] == 'bar'\n                assert flask.session.get('fizz') == 'buzz'\n                return 42\n\n            greenlets.append(greenlet(g))\n            return 'Hello World!'\n\n        rv = client.get('/?foo=bar')\n        assert rv.data == b'Hello World!'\n\n        result = greenlets[0].run()\n        assert result == 42,type='decorated_definition'\nline_star:141,line_end:195|char_star:0,char_end:27";
"@pytest.mark.skipif(greenlet is None, reason='greenlet not installed'),type='decorator'\nline_star:141,line_end:141|char_star:0,char_end:70"[shape="box",fillcolor="white",style=filled];
"@pytest.mark.skipif(greenlet is None, reason='greenlet not installed')\nclass TestGreenletContextCopying:\n    def test_greenlet_context_copying(self, app, client):\n        greenlets = []\n\n        @app.route('/')\n        def index():\n            flask.session['fizz'] = 'buzz'\n            reqctx = flask._request_ctx_stack.top.copy()\n\n            def g():\n                assert not flask.request\n                assert not flask.current_app\n                with reqctx:\n                    assert flask.request\n                    assert flask.current_app == app\n                    assert flask.request.path == '/'\n                    assert flask.request.args['foo'] == 'bar'\n                    assert flask.session.get('fizz') == 'buzz'\n                assert not flask.request\n                return 42\n\n            greenlets.append(greenlet(g))\n            return 'Hello World!'\n\n        rv = client.get('/?foo=bar')\n        assert rv.data == b'Hello World!'\n\n        result = greenlets[0].run()\n        assert result == 42\n\n    def test_greenlet_context_copying_api(self, app, client):\n        greenlets = []\n\n        @app.route('/')\n        def index():\n            flask.session['fizz'] = 'buzz'\n\n            @flask.copy_current_request_context\n            def g():\n                assert flask.request\n                assert flask.current_app == app\n                assert flask.request.path == '/'\n                assert flask.request.args['foo'] == 'bar'\n                assert flask.session.get('fizz') == 'buzz'\n                return 42\n\n            greenlets.append(greenlet(g))\n            return 'Hello World!'\n\n        rv = client.get('/?foo=bar')\n        assert rv.data == b'Hello World!'\n\n        result = greenlets[0].run()\n        assert result == 42,type='decorated_definition'\nline_star:141,line_end:195|char_star:0,char_end:27"->"@pytest.mark.skipif(greenlet is None, reason='greenlet not installed'),type='decorator'\nline_star:141,line_end:141|char_star:0,char_end:70";
"class TestGreenletContextCopying:\n    def test_greenlet_context_copying(self, app, client):\n        greenlets = []\n\n        @app.route('/')\n        def index():\n            flask.session['fizz'] = 'buzz'\n            reqctx = flask._request_ctx_stack.top.copy()\n\n            def g():\n                assert not flask.request\n                assert not flask.current_app\n                with reqctx:\n                    assert flask.request\n                    assert flask.current_app == app\n                    assert flask.request.path == '/'\n                    assert flask.request.args['foo'] == 'bar'\n                    assert flask.session.get('fizz') == 'buzz'\n                assert not flask.request\n                return 42\n\n            greenlets.append(greenlet(g))\n            return 'Hello World!'\n\n        rv = client.get('/?foo=bar')\n        assert rv.data == b'Hello World!'\n\n        result = greenlets[0].run()\n        assert result == 42\n\n    def test_greenlet_context_copying_api(self, app, client):\n        greenlets = []\n\n        @app.route('/')\n        def index():\n            flask.session['fizz'] = 'buzz'\n\n            @flask.copy_current_request_context\n            def g():\n                assert flask.request\n                assert flask.current_app == app\n                assert flask.request.path == '/'\n                assert flask.request.args['foo'] == 'bar'\n                assert flask.session.get('fizz') == 'buzz'\n                return 42\n\n            greenlets.append(greenlet(g))\n            return 'Hello World!'\n\n        rv = client.get('/?foo=bar')\n        assert rv.data == b'Hello World!'\n\n        result = greenlets[0].run()\n        assert result == 42,type='class_definition'\nline_star:142,line_end:195|char_star:0,char_end:27"[shape="box",fillcolor="#ffdf91",style=filled];
"@pytest.mark.skipif(greenlet is None, reason='greenlet not installed')\nclass TestGreenletContextCopying:\n    def test_greenlet_context_copying(self, app, client):\n        greenlets = []\n\n        @app.route('/')\n        def index():\n            flask.session['fizz'] = 'buzz'\n            reqctx = flask._request_ctx_stack.top.copy()\n\n            def g():\n                assert not flask.request\n                assert not flask.current_app\n                with reqctx:\n                    assert flask.request\n                    assert flask.current_app == app\n                    assert flask.request.path == '/'\n                    assert flask.request.args['foo'] == 'bar'\n                    assert flask.session.get('fizz') == 'buzz'\n                assert not flask.request\n                return 42\n\n            greenlets.append(greenlet(g))\n            return 'Hello World!'\n\n        rv = client.get('/?foo=bar')\n        assert rv.data == b'Hello World!'\n\n        result = greenlets[0].run()\n        assert result == 42\n\n    def test_greenlet_context_copying_api(self, app, client):\n        greenlets = []\n\n        @app.route('/')\n        def index():\n            flask.session['fizz'] = 'buzz'\n\n            @flask.copy_current_request_context\n            def g():\n                assert flask.request\n                assert flask.current_app == app\n                assert flask.request.path == '/'\n                assert flask.request.args['foo'] == 'bar'\n                assert flask.session.get('fizz') == 'buzz'\n                return 42\n\n            greenlets.append(greenlet(g))\n            return 'Hello World!'\n\n        rv = client.get('/?foo=bar')\n        assert rv.data == b'Hello World!'\n\n        result = greenlets[0].run()\n        assert result == 42,type='decorated_definition'\nline_star:141,line_end:195|char_star:0,char_end:27"->"class TestGreenletContextCopying:\n    def test_greenlet_context_copying(self, app, client):\n        greenlets = []\n\n        @app.route('/')\n        def index():\n            flask.session['fizz'] = 'buzz'\n            reqctx = flask._request_ctx_stack.top.copy()\n\n            def g():\n                assert not flask.request\n                assert not flask.current_app\n                with reqctx:\n                    assert flask.request\n                    assert flask.current_app == app\n                    assert flask.request.path == '/'\n                    assert flask.request.args['foo'] == 'bar'\n                    assert flask.session.get('fizz') == 'buzz'\n                assert not flask.request\n                return 42\n\n            greenlets.append(greenlet(g))\n            return 'Hello World!'\n\n        rv = client.get('/?foo=bar')\n        assert rv.data == b'Hello World!'\n\n        result = greenlets[0].run()\n        assert result == 42\n\n    def test_greenlet_context_copying_api(self, app, client):\n        greenlets = []\n\n        @app.route('/')\n        def index():\n            flask.session['fizz'] = 'buzz'\n\n            @flask.copy_current_request_context\n            def g():\n                assert flask.request\n                assert flask.current_app == app\n                assert flask.request.path == '/'\n                assert flask.request.args['foo'] == 'bar'\n                assert flask.session.get('fizz') == 'buzz'\n                return 42\n\n            greenlets.append(greenlet(g))\n            return 'Hello World!'\n\n        rv = client.get('/?foo=bar')\n        assert rv.data == b'Hello World!'\n\n        result = greenlets[0].run()\n        assert result == 42,type='class_definition'\nline_star:142,line_end:195|char_star:0,char_end:27";
"TestGreenletContextCopying,type='identifier'\nline_star:142,line_end:142|char_star:6,char_end:32"[shape="point",fillcolor="#121013",style=filled];
"class TestGreenletContextCopying:\n    def test_greenlet_context_copying(self, app, client):\n        greenlets = []\n\n        @app.route('/')\n        def index():\n            flask.session['fizz'] = 'buzz'\n            reqctx = flask._request_ctx_stack.top.copy()\n\n            def g():\n                assert not flask.request\n                assert not flask.current_app\n                with reqctx:\n                    assert flask.request\n                    assert flask.current_app == app\n                    assert flask.request.path == '/'\n                    assert flask.request.args['foo'] == 'bar'\n                    assert flask.session.get('fizz') == 'buzz'\n                assert not flask.request\n                return 42\n\n            greenlets.append(greenlet(g))\n            return 'Hello World!'\n\n        rv = client.get('/?foo=bar')\n        assert rv.data == b'Hello World!'\n\n        result = greenlets[0].run()\n        assert result == 42\n\n    def test_greenlet_context_copying_api(self, app, client):\n        greenlets = []\n\n        @app.route('/')\n        def index():\n            flask.session['fizz'] = 'buzz'\n\n            @flask.copy_current_request_context\n            def g():\n                assert flask.request\n                assert flask.current_app == app\n                assert flask.request.path == '/'\n                assert flask.request.args['foo'] == 'bar'\n                assert flask.session.get('fizz') == 'buzz'\n                return 42\n\n            greenlets.append(greenlet(g))\n            return 'Hello World!'\n\n        rv = client.get('/?foo=bar')\n        assert rv.data == b'Hello World!'\n\n        result = greenlets[0].run()\n        assert result == 42,type='class_definition'\nline_star:142,line_end:195|char_star:0,char_end:27"->"TestGreenletContextCopying,type='identifier'\nline_star:142,line_end:142|char_star:6,char_end:32";
"type='INFORMATION BLOCK'\nline_star:143,line_end:195|char_star:4,char_end:27"[shape="point",fillcolor="#121013",style=filled];
"class TestGreenletContextCopying:\n    def test_greenlet_context_copying(self, app, client):\n        greenlets = []\n\n        @app.route('/')\n        def index():\n            flask.session['fizz'] = 'buzz'\n            reqctx = flask._request_ctx_stack.top.copy()\n\n            def g():\n                assert not flask.request\n                assert not flask.current_app\n                with reqctx:\n                    assert flask.request\n                    assert flask.current_app == app\n                    assert flask.request.path == '/'\n                    assert flask.request.args['foo'] == 'bar'\n                    assert flask.session.get('fizz') == 'buzz'\n                assert not flask.request\n                return 42\n\n            greenlets.append(greenlet(g))\n            return 'Hello World!'\n\n        rv = client.get('/?foo=bar')\n        assert rv.data == b'Hello World!'\n\n        result = greenlets[0].run()\n        assert result == 42\n\n    def test_greenlet_context_copying_api(self, app, client):\n        greenlets = []\n\n        @app.route('/')\n        def index():\n            flask.session['fizz'] = 'buzz'\n\n            @flask.copy_current_request_context\n            def g():\n                assert flask.request\n                assert flask.current_app == app\n                assert flask.request.path == '/'\n                assert flask.request.args['foo'] == 'bar'\n                assert flask.session.get('fizz') == 'buzz'\n                return 42\n\n            greenlets.append(greenlet(g))\n            return 'Hello World!'\n\n        rv = client.get('/?foo=bar')\n        assert rv.data == b'Hello World!'\n\n        result = greenlets[0].run()\n        assert result == 42,type='class_definition'\nline_star:142,line_end:195|char_star:0,char_end:27"->"type='INFORMATION BLOCK'\nline_star:143,line_end:195|char_star:4,char_end:27";
"def test_greenlet_context_copying(self, app, client):\n        greenlets = []\n\n        @app.route('/')\n        def index():\n            flask.session['fizz'] = 'buzz'\n            reqctx = flask._request_ctx_stack.top.copy()\n\n            def g():\n                assert not flask.request\n                assert not flask.current_app\n                with reqctx:\n                    assert flask.request\n                    assert flask.current_app == app\n                    assert flask.request.path == '/'\n                    assert flask.request.args['foo'] == 'bar'\n                    assert flask.session.get('fizz') == 'buzz'\n                assert not flask.request\n                return 42\n\n            greenlets.append(greenlet(g))\n            return 'Hello World!'\n\n        rv = client.get('/?foo=bar')\n        assert rv.data == b'Hello World!'\n\n        result = greenlets[0].run()\n        assert result == 42,type='function_definition'\nline_star:143,line_end:170|char_star:4,char_end:27"[shape="box",fillcolor="#cee6b4",style=filled];
"type='INFORMATION BLOCK'\nline_star:143,line_end:195|char_star:4,char_end:27"->"def test_greenlet_context_copying(self, app, client):\n        greenlets = []\n\n        @app.route('/')\n        def index():\n            flask.session['fizz'] = 'buzz'\n            reqctx = flask._request_ctx_stack.top.copy()\n\n            def g():\n                assert not flask.request\n                assert not flask.current_app\n                with reqctx:\n                    assert flask.request\n                    assert flask.current_app == app\n                    assert flask.request.path == '/'\n                    assert flask.request.args['foo'] == 'bar'\n                    assert flask.session.get('fizz') == 'buzz'\n                assert not flask.request\n                return 42\n\n            greenlets.append(greenlet(g))\n            return 'Hello World!'\n\n        rv = client.get('/?foo=bar')\n        assert rv.data == b'Hello World!'\n\n        result = greenlets[0].run()\n        assert result == 42,type='function_definition'\nline_star:143,line_end:170|char_star:4,char_end:27";
"test_greenlet_context_copying,type='identifier'\nline_star:143,line_end:143|char_star:8,char_end:37"[shape="point",fillcolor="#121013",style=filled];
"def test_greenlet_context_copying(self, app, client):\n        greenlets = []\n\n        @app.route('/')\n        def index():\n            flask.session['fizz'] = 'buzz'\n            reqctx = flask._request_ctx_stack.top.copy()\n\n            def g():\n                assert not flask.request\n                assert not flask.current_app\n                with reqctx:\n                    assert flask.request\n                    assert flask.current_app == app\n                    assert flask.request.path == '/'\n                    assert flask.request.args['foo'] == 'bar'\n                    assert flask.session.get('fizz') == 'buzz'\n                assert not flask.request\n                return 42\n\n            greenlets.append(greenlet(g))\n            return 'Hello World!'\n\n        rv = client.get('/?foo=bar')\n        assert rv.data == b'Hello World!'\n\n        result = greenlets[0].run()\n        assert result == 42,type='function_definition'\nline_star:143,line_end:170|char_star:4,char_end:27"->"test_greenlet_context_copying,type='identifier'\nline_star:143,line_end:143|char_star:8,char_end:37";
"(self, app, client),type='parameters'\nline_star:143,line_end:143|char_star:37,char_end:56"[shape="box",fillcolor="white",style=filled];
"def test_greenlet_context_copying(self, app, client):\n        greenlets = []\n\n        @app.route('/')\n        def index():\n            flask.session['fizz'] = 'buzz'\n            reqctx = flask._request_ctx_stack.top.copy()\n\n            def g():\n                assert not flask.request\n                assert not flask.current_app\n                with reqctx:\n                    assert flask.request\n                    assert flask.current_app == app\n                    assert flask.request.path == '/'\n                    assert flask.request.args['foo'] == 'bar'\n                    assert flask.session.get('fizz') == 'buzz'\n                assert not flask.request\n                return 42\n\n            greenlets.append(greenlet(g))\n            return 'Hello World!'\n\n        rv = client.get('/?foo=bar')\n        assert rv.data == b'Hello World!'\n\n        result = greenlets[0].run()\n        assert result == 42,type='function_definition'\nline_star:143,line_end:170|char_star:4,char_end:27"->"(self, app, client),type='parameters'\nline_star:143,line_end:143|char_star:37,char_end:56";
"self,type='identifier'\nline_star:143,line_end:143|char_star:38,char_end:42"[shape="point",fillcolor="#121013",style=filled];
"(self, app, client),type='parameters'\nline_star:143,line_end:143|char_star:37,char_end:56"->"self,type='identifier'\nline_star:143,line_end:143|char_star:38,char_end:42";
"app,type='identifier'\nline_star:143,line_end:143|char_star:44,char_end:47"[shape="point",fillcolor="#121013",style=filled];
"(self, app, client),type='parameters'\nline_star:143,line_end:143|char_star:37,char_end:56"->"app,type='identifier'\nline_star:143,line_end:143|char_star:44,char_end:47";
"client,type='identifier'\nline_star:143,line_end:143|char_star:49,char_end:55"[shape="point",fillcolor="#121013",style=filled];
"(self, app, client),type='parameters'\nline_star:143,line_end:143|char_star:37,char_end:56"->"client,type='identifier'\nline_star:143,line_end:143|char_star:49,char_end:55";
"type='INFORMATION BLOCK'\nline_star:144,line_end:170|char_star:8,char_end:27"[shape="point",fillcolor="#121013",style=filled];
"def test_greenlet_context_copying(self, app, client):\n        greenlets = []\n\n        @app.route('/')\n        def index():\n            flask.session['fizz'] = 'buzz'\n            reqctx = flask._request_ctx_stack.top.copy()\n\n            def g():\n                assert not flask.request\n                assert not flask.current_app\n                with reqctx:\n                    assert flask.request\n                    assert flask.current_app == app\n                    assert flask.request.path == '/'\n                    assert flask.request.args['foo'] == 'bar'\n                    assert flask.session.get('fizz') == 'buzz'\n                assert not flask.request\n                return 42\n\n            greenlets.append(greenlet(g))\n            return 'Hello World!'\n\n        rv = client.get('/?foo=bar')\n        assert rv.data == b'Hello World!'\n\n        result = greenlets[0].run()\n        assert result == 42,type='function_definition'\nline_star:143,line_end:170|char_star:4,char_end:27"->"type='INFORMATION BLOCK'\nline_star:144,line_end:170|char_star:8,char_end:27";
"@app.route('/')\n        def index():\n            flask.session['fizz'] = 'buzz'\n            reqctx = flask._request_ctx_stack.top.copy()\n\n            def g():\n                assert not flask.request\n                assert not flask.current_app\n                with reqctx:\n                    assert flask.request\n                    assert flask.current_app == app\n                    assert flask.request.path == '/'\n                    assert flask.request.args['foo'] == 'bar'\n                    assert flask.session.get('fizz') == 'buzz'\n                assert not flask.request\n                return 42\n\n            greenlets.append(greenlet(g))\n            return 'Hello World!',type='decorated_definition'\nline_star:146,line_end:164|char_star:8,char_end:33"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:144,line_end:170|char_star:8,char_end:27"->"@app.route('/')\n        def index():\n            flask.session['fizz'] = 'buzz'\n            reqctx = flask._request_ctx_stack.top.copy()\n\n            def g():\n                assert not flask.request\n                assert not flask.current_app\n                with reqctx:\n                    assert flask.request\n                    assert flask.current_app == app\n                    assert flask.request.path == '/'\n                    assert flask.request.args['foo'] == 'bar'\n                    assert flask.session.get('fizz') == 'buzz'\n                assert not flask.request\n                return 42\n\n            greenlets.append(greenlet(g))\n            return 'Hello World!',type='decorated_definition'\nline_star:146,line_end:164|char_star:8,char_end:33";
"@app.route('/'),type='decorator'\nline_star:146,line_end:146|char_star:8,char_end:23"[shape="box",fillcolor="white",style=filled];
"@app.route('/')\n        def index():\n            flask.session['fizz'] = 'buzz'\n            reqctx = flask._request_ctx_stack.top.copy()\n\n            def g():\n                assert not flask.request\n                assert not flask.current_app\n                with reqctx:\n                    assert flask.request\n                    assert flask.current_app == app\n                    assert flask.request.path == '/'\n                    assert flask.request.args['foo'] == 'bar'\n                    assert flask.session.get('fizz') == 'buzz'\n                assert not flask.request\n                return 42\n\n            greenlets.append(greenlet(g))\n            return 'Hello World!',type='decorated_definition'\nline_star:146,line_end:164|char_star:8,char_end:33"->"@app.route('/'),type='decorator'\nline_star:146,line_end:146|char_star:8,char_end:23";
"def index():\n            flask.session['fizz'] = 'buzz'\n            reqctx = flask._request_ctx_stack.top.copy()\n\n            def g():\n                assert not flask.request\n                assert not flask.current_app\n                with reqctx:\n                    assert flask.request\n                    assert flask.current_app == app\n                    assert flask.request.path == '/'\n                    assert flask.request.args['foo'] == 'bar'\n                    assert flask.session.get('fizz') == 'buzz'\n                assert not flask.request\n                return 42\n\n            greenlets.append(greenlet(g))\n            return 'Hello World!',type='function_definition'\nline_star:147,line_end:164|char_star:8,char_end:33"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.route('/')\n        def index():\n            flask.session['fizz'] = 'buzz'\n            reqctx = flask._request_ctx_stack.top.copy()\n\n            def g():\n                assert not flask.request\n                assert not flask.current_app\n                with reqctx:\n                    assert flask.request\n                    assert flask.current_app == app\n                    assert flask.request.path == '/'\n                    assert flask.request.args['foo'] == 'bar'\n                    assert flask.session.get('fizz') == 'buzz'\n                assert not flask.request\n                return 42\n\n            greenlets.append(greenlet(g))\n            return 'Hello World!',type='decorated_definition'\nline_star:146,line_end:164|char_star:8,char_end:33"->"def index():\n            flask.session['fizz'] = 'buzz'\n            reqctx = flask._request_ctx_stack.top.copy()\n\n            def g():\n                assert not flask.request\n                assert not flask.current_app\n                with reqctx:\n                    assert flask.request\n                    assert flask.current_app == app\n                    assert flask.request.path == '/'\n                    assert flask.request.args['foo'] == 'bar'\n                    assert flask.session.get('fizz') == 'buzz'\n                assert not flask.request\n                return 42\n\n            greenlets.append(greenlet(g))\n            return 'Hello World!',type='function_definition'\nline_star:147,line_end:164|char_star:8,char_end:33";
"index,type='identifier'\nline_star:147,line_end:147|char_star:12,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"def index():\n            flask.session['fizz'] = 'buzz'\n            reqctx = flask._request_ctx_stack.top.copy()\n\n            def g():\n                assert not flask.request\n                assert not flask.current_app\n                with reqctx:\n                    assert flask.request\n                    assert flask.current_app == app\n                    assert flask.request.path == '/'\n                    assert flask.request.args['foo'] == 'bar'\n                    assert flask.session.get('fizz') == 'buzz'\n                assert not flask.request\n                return 42\n\n            greenlets.append(greenlet(g))\n            return 'Hello World!',type='function_definition'\nline_star:147,line_end:164|char_star:8,char_end:33"->"index,type='identifier'\nline_star:147,line_end:147|char_star:12,char_end:17";
"type='INFORMATION BLOCK'\nline_star:148,line_end:164|char_star:12,char_end:33"[shape="point",fillcolor="#121013",style=filled];
"def index():\n            flask.session['fizz'] = 'buzz'\n            reqctx = flask._request_ctx_stack.top.copy()\n\n            def g():\n                assert not flask.request\n                assert not flask.current_app\n                with reqctx:\n                    assert flask.request\n                    assert flask.current_app == app\n                    assert flask.request.path == '/'\n                    assert flask.request.args['foo'] == 'bar'\n                    assert flask.session.get('fizz') == 'buzz'\n                assert not flask.request\n                return 42\n\n            greenlets.append(greenlet(g))\n            return 'Hello World!',type='function_definition'\nline_star:147,line_end:164|char_star:8,char_end:33"->"type='INFORMATION BLOCK'\nline_star:148,line_end:164|char_star:12,char_end:33";
"def g():\n                assert not flask.request\n                assert not flask.current_app\n                with reqctx:\n                    assert flask.request\n                    assert flask.current_app == app\n                    assert flask.request.path == '/'\n                    assert flask.request.args['foo'] == 'bar'\n                    assert flask.session.get('fizz') == 'buzz'\n                assert not flask.request\n                return 42,type='function_definition'\nline_star:151,line_end:161|char_star:12,char_end:25"[shape="box",fillcolor="#cee6b4",style=filled];
"type='INFORMATION BLOCK'\nline_star:148,line_end:164|char_star:12,char_end:33"->"def g():\n                assert not flask.request\n                assert not flask.current_app\n                with reqctx:\n                    assert flask.request\n                    assert flask.current_app == app\n                    assert flask.request.path == '/'\n                    assert flask.request.args['foo'] == 'bar'\n                    assert flask.session.get('fizz') == 'buzz'\n                assert not flask.request\n                return 42,type='function_definition'\nline_star:151,line_end:161|char_star:12,char_end:25";
"g,type='identifier'\nline_star:151,line_end:151|char_star:16,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"def g():\n                assert not flask.request\n                assert not flask.current_app\n                with reqctx:\n                    assert flask.request\n                    assert flask.current_app == app\n                    assert flask.request.path == '/'\n                    assert flask.request.args['foo'] == 'bar'\n                    assert flask.session.get('fizz') == 'buzz'\n                assert not flask.request\n                return 42,type='function_definition'\nline_star:151,line_end:161|char_star:12,char_end:25"->"g,type='identifier'\nline_star:151,line_end:151|char_star:16,char_end:17";
"type='INFORMATION BLOCK'\nline_star:152,line_end:161|char_star:16,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"def g():\n                assert not flask.request\n                assert not flask.current_app\n                with reqctx:\n                    assert flask.request\n                    assert flask.current_app == app\n                    assert flask.request.path == '/'\n                    assert flask.request.args['foo'] == 'bar'\n                    assert flask.session.get('fizz') == 'buzz'\n                assert not flask.request\n                return 42,type='function_definition'\nline_star:151,line_end:161|char_star:12,char_end:25"->"type='INFORMATION BLOCK'\nline_star:152,line_end:161|char_star:16,char_end:25";
"assert not flask.request,type='assert_statement'\nline_star:152,line_end:152|char_star:16,char_end:40"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:152,line_end:161|char_star:16,char_end:25"->"assert not flask.request,type='assert_statement'\nline_star:152,line_end:152|char_star:16,char_end:40";
"not flask.request,type='not_operator'\nline_star:152,line_end:152|char_star:23,char_end:40"[shape="box",fillcolor="white",style=filled];
"assert not flask.request,type='assert_statement'\nline_star:152,line_end:152|char_star:16,char_end:40"->"not flask.request,type='not_operator'\nline_star:152,line_end:152|char_star:23,char_end:40";
"flask.request,type='attribute'\nline_star:152,line_end:152|char_star:27,char_end:40"[shape="box",fillcolor="white",style=filled];
"not flask.request,type='not_operator'\nline_star:152,line_end:152|char_star:23,char_end:40"->"flask.request,type='attribute'\nline_star:152,line_end:152|char_star:27,char_end:40";
"flask,type='identifier'\nline_star:152,line_end:152|char_star:27,char_end:32"[shape="point",fillcolor="#121013",style=filled];
"flask.request,type='attribute'\nline_star:152,line_end:152|char_star:27,char_end:40"->"flask,type='identifier'\nline_star:152,line_end:152|char_star:27,char_end:32";
"request,type='identifier'\nline_star:152,line_end:152|char_star:33,char_end:40"[shape="point",fillcolor="#121013",style=filled];
"flask.request,type='attribute'\nline_star:152,line_end:152|char_star:27,char_end:40"->"request,type='identifier'\nline_star:152,line_end:152|char_star:33,char_end:40";
"assert not flask.current_app,type='assert_statement'\nline_star:153,line_end:153|char_star:16,char_end:44"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:152,line_end:161|char_star:16,char_end:25"->"assert not flask.current_app,type='assert_statement'\nline_star:153,line_end:153|char_star:16,char_end:44";
"not flask.current_app,type='not_operator'\nline_star:153,line_end:153|char_star:23,char_end:44"[shape="box",fillcolor="white",style=filled];
"assert not flask.current_app,type='assert_statement'\nline_star:153,line_end:153|char_star:16,char_end:44"->"not flask.current_app,type='not_operator'\nline_star:153,line_end:153|char_star:23,char_end:44";
"flask.current_app,type='attribute'\nline_star:153,line_end:153|char_star:27,char_end:44"[shape="box",fillcolor="white",style=filled];
"not flask.current_app,type='not_operator'\nline_star:153,line_end:153|char_star:23,char_end:44"->"flask.current_app,type='attribute'\nline_star:153,line_end:153|char_star:27,char_end:44";
"flask,type='identifier'\nline_star:153,line_end:153|char_star:27,char_end:32"[shape="point",fillcolor="#121013",style=filled];
"flask.current_app,type='attribute'\nline_star:153,line_end:153|char_star:27,char_end:44"->"flask,type='identifier'\nline_star:153,line_end:153|char_star:27,char_end:32";
"current_app,type='identifier'\nline_star:153,line_end:153|char_star:33,char_end:44"[shape="point",fillcolor="#121013",style=filled];
"flask.current_app,type='attribute'\nline_star:153,line_end:153|char_star:27,char_end:44"->"current_app,type='identifier'\nline_star:153,line_end:153|char_star:33,char_end:44";
"with reqctx:\n                    assert flask.request\n                    assert flask.current_app == app\n                    assert flask.request.path == '/'\n                    assert flask.request.args['foo'] == 'bar'\n                    assert flask.session.get('fizz') == 'buzz',type='with_statement'\nline_star:154,line_end:159|char_star:16,char_end:62"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:152,line_end:161|char_star:16,char_end:25"->"with reqctx:\n                    assert flask.request\n                    assert flask.current_app == app\n                    assert flask.request.path == '/'\n                    assert flask.request.args['foo'] == 'bar'\n                    assert flask.session.get('fizz') == 'buzz',type='with_statement'\nline_star:154,line_end:159|char_star:16,char_end:62";
"reqctx,type='with_clause'\nline_star:154,line_end:154|char_star:21,char_end:27"[shape="box",fillcolor="white",style=filled];
"with reqctx:\n                    assert flask.request\n                    assert flask.current_app == app\n                    assert flask.request.path == '/'\n                    assert flask.request.args['foo'] == 'bar'\n                    assert flask.session.get('fizz') == 'buzz',type='with_statement'\nline_star:154,line_end:159|char_star:16,char_end:62"->"reqctx,type='with_clause'\nline_star:154,line_end:154|char_star:21,char_end:27";
"type='INFORMATION BLOCK'\nline_star:155,line_end:159|char_star:20,char_end:62"[shape="point",fillcolor="#121013",style=filled];
"with reqctx:\n                    assert flask.request\n                    assert flask.current_app == app\n                    assert flask.request.path == '/'\n                    assert flask.request.args['foo'] == 'bar'\n                    assert flask.session.get('fizz') == 'buzz',type='with_statement'\nline_star:154,line_end:159|char_star:16,char_end:62"->"type='INFORMATION BLOCK'\nline_star:155,line_end:159|char_star:20,char_end:62";
"assert flask.request,type='assert_statement'\nline_star:155,line_end:155|char_star:20,char_end:40"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:155,line_end:159|char_star:20,char_end:62"->"assert flask.request,type='assert_statement'\nline_star:155,line_end:155|char_star:20,char_end:40";
"flask.request,type='attribute'\nline_star:155,line_end:155|char_star:27,char_end:40"[shape="box",fillcolor="white",style=filled];
"assert flask.request,type='assert_statement'\nline_star:155,line_end:155|char_star:20,char_end:40"->"flask.request,type='attribute'\nline_star:155,line_end:155|char_star:27,char_end:40";
"flask,type='identifier'\nline_star:155,line_end:155|char_star:27,char_end:32"[shape="point",fillcolor="#121013",style=filled];
"flask.request,type='attribute'\nline_star:155,line_end:155|char_star:27,char_end:40"->"flask,type='identifier'\nline_star:155,line_end:155|char_star:27,char_end:32";
"request,type='identifier'\nline_star:155,line_end:155|char_star:33,char_end:40"[shape="point",fillcolor="#121013",style=filled];
"flask.request,type='attribute'\nline_star:155,line_end:155|char_star:27,char_end:40"->"request,type='identifier'\nline_star:155,line_end:155|char_star:33,char_end:40";
"assert flask.current_app == app,type='assert_statement'\nline_star:156,line_end:156|char_star:20,char_end:51"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:155,line_end:159|char_star:20,char_end:62"->"assert flask.current_app == app,type='assert_statement'\nline_star:156,line_end:156|char_star:20,char_end:51";
"flask.current_app == app,type='comparison_operator'\nline_star:156,line_end:156|char_star:27,char_end:51"[shape="box",fillcolor="white",style=filled];
"assert flask.current_app == app,type='assert_statement'\nline_star:156,line_end:156|char_star:20,char_end:51"->"flask.current_app == app,type='comparison_operator'\nline_star:156,line_end:156|char_star:27,char_end:51";
"flask.current_app,type='attribute'\nline_star:156,line_end:156|char_star:27,char_end:44"[shape="box",fillcolor="white",style=filled];
"flask.current_app == app,type='comparison_operator'\nline_star:156,line_end:156|char_star:27,char_end:51"->"flask.current_app,type='attribute'\nline_star:156,line_end:156|char_star:27,char_end:44";
"flask,type='identifier'\nline_star:156,line_end:156|char_star:27,char_end:32"[shape="point",fillcolor="#121013",style=filled];
"flask.current_app,type='attribute'\nline_star:156,line_end:156|char_star:27,char_end:44"->"flask,type='identifier'\nline_star:156,line_end:156|char_star:27,char_end:32";
"current_app,type='identifier'\nline_star:156,line_end:156|char_star:33,char_end:44"[shape="point",fillcolor="#121013",style=filled];
"flask.current_app,type='attribute'\nline_star:156,line_end:156|char_star:27,char_end:44"->"current_app,type='identifier'\nline_star:156,line_end:156|char_star:33,char_end:44";
"app,type='identifier'\nline_star:156,line_end:156|char_star:48,char_end:51"[shape="point",fillcolor="#121013",style=filled];
"flask.current_app == app,type='comparison_operator'\nline_star:156,line_end:156|char_star:27,char_end:51"->"app,type='identifier'\nline_star:156,line_end:156|char_star:48,char_end:51";
"assert flask.request.path == '/',type='assert_statement'\nline_star:157,line_end:157|char_star:20,char_end:52"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:155,line_end:159|char_star:20,char_end:62"->"assert flask.request.path == '/',type='assert_statement'\nline_star:157,line_end:157|char_star:20,char_end:52";
"flask.request.path == '/',type='comparison_operator'\nline_star:157,line_end:157|char_star:27,char_end:52"[shape="box",fillcolor="white",style=filled];
"assert flask.request.path == '/',type='assert_statement'\nline_star:157,line_end:157|char_star:20,char_end:52"->"flask.request.path == '/',type='comparison_operator'\nline_star:157,line_end:157|char_star:27,char_end:52";
"flask.request.path,type='attribute'\nline_star:157,line_end:157|char_star:27,char_end:45"[shape="box",fillcolor="white",style=filled];
"flask.request.path == '/',type='comparison_operator'\nline_star:157,line_end:157|char_star:27,char_end:52"->"flask.request.path,type='attribute'\nline_star:157,line_end:157|char_star:27,char_end:45";
"flask.request,type='attribute'\nline_star:157,line_end:157|char_star:27,char_end:40"[shape="box",fillcolor="white",style=filled];
"flask.request.path,type='attribute'\nline_star:157,line_end:157|char_star:27,char_end:45"->"flask.request,type='attribute'\nline_star:157,line_end:157|char_star:27,char_end:40";
"flask,type='identifier'\nline_star:157,line_end:157|char_star:27,char_end:32"[shape="point",fillcolor="#121013",style=filled];
"flask.request,type='attribute'\nline_star:157,line_end:157|char_star:27,char_end:40"->"flask,type='identifier'\nline_star:157,line_end:157|char_star:27,char_end:32";
"request,type='identifier'\nline_star:157,line_end:157|char_star:33,char_end:40"[shape="point",fillcolor="#121013",style=filled];
"flask.request,type='attribute'\nline_star:157,line_end:157|char_star:27,char_end:40"->"request,type='identifier'\nline_star:157,line_end:157|char_star:33,char_end:40";
"path,type='identifier'\nline_star:157,line_end:157|char_star:41,char_end:45"[shape="point",fillcolor="#121013",style=filled];
"flask.request.path,type='attribute'\nline_star:157,line_end:157|char_star:27,char_end:45"->"path,type='identifier'\nline_star:157,line_end:157|char_star:41,char_end:45";
"assert flask.request.args['foo'] == 'bar',type='assert_statement'\nline_star:158,line_end:158|char_star:20,char_end:61"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:155,line_end:159|char_star:20,char_end:62"->"assert flask.request.args['foo'] == 'bar',type='assert_statement'\nline_star:158,line_end:158|char_star:20,char_end:61";
"flask.request.args['foo'] == 'bar',type='comparison_operator'\nline_star:158,line_end:158|char_star:27,char_end:61"[shape="box",fillcolor="white",style=filled];
"assert flask.request.args['foo'] == 'bar',type='assert_statement'\nline_star:158,line_end:158|char_star:20,char_end:61"->"flask.request.args['foo'] == 'bar',type='comparison_operator'\nline_star:158,line_end:158|char_star:27,char_end:61";
"flask.request.args['foo'],type='subscript'\nline_star:158,line_end:158|char_star:27,char_end:52"[shape="box",fillcolor="white",style=filled];
"flask.request.args['foo'] == 'bar',type='comparison_operator'\nline_star:158,line_end:158|char_star:27,char_end:61"->"flask.request.args['foo'],type='subscript'\nline_star:158,line_end:158|char_star:27,char_end:52";
"flask.request.args,type='attribute'\nline_star:158,line_end:158|char_star:27,char_end:45"[shape="box",fillcolor="white",style=filled];
"flask.request.args['foo'],type='subscript'\nline_star:158,line_end:158|char_star:27,char_end:52"->"flask.request.args,type='attribute'\nline_star:158,line_end:158|char_star:27,char_end:45";
"flask.request,type='attribute'\nline_star:158,line_end:158|char_star:27,char_end:40"[shape="box",fillcolor="white",style=filled];
"flask.request.args,type='attribute'\nline_star:158,line_end:158|char_star:27,char_end:45"->"flask.request,type='attribute'\nline_star:158,line_end:158|char_star:27,char_end:40";
"flask,type='identifier'\nline_star:158,line_end:158|char_star:27,char_end:32"[shape="point",fillcolor="#121013",style=filled];
"flask.request,type='attribute'\nline_star:158,line_end:158|char_star:27,char_end:40"->"flask,type='identifier'\nline_star:158,line_end:158|char_star:27,char_end:32";
"request,type='identifier'\nline_star:158,line_end:158|char_star:33,char_end:40"[shape="point",fillcolor="#121013",style=filled];
"flask.request,type='attribute'\nline_star:158,line_end:158|char_star:27,char_end:40"->"request,type='identifier'\nline_star:158,line_end:158|char_star:33,char_end:40";
"args,type='identifier'\nline_star:158,line_end:158|char_star:41,char_end:45"[shape="point",fillcolor="#121013",style=filled];
"flask.request.args,type='attribute'\nline_star:158,line_end:158|char_star:27,char_end:45"->"args,type='identifier'\nline_star:158,line_end:158|char_star:41,char_end:45";
"assert flask.session.get('fizz') == 'buzz',type='assert_statement'\nline_star:159,line_end:159|char_star:20,char_end:62"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:155,line_end:159|char_star:20,char_end:62"->"assert flask.session.get('fizz') == 'buzz',type='assert_statement'\nline_star:159,line_end:159|char_star:20,char_end:62";
"flask.session.get('fizz') == 'buzz',type='comparison_operator'\nline_star:159,line_end:159|char_star:27,char_end:62"[shape="box",fillcolor="white",style=filled];
"assert flask.session.get('fizz') == 'buzz',type='assert_statement'\nline_star:159,line_end:159|char_star:20,char_end:62"->"flask.session.get('fizz') == 'buzz',type='comparison_operator'\nline_star:159,line_end:159|char_star:27,char_end:62";
"flask.session.get('fizz'),type='call'\nline_star:159,line_end:159|char_star:27,char_end:52"[shape="box",fillcolor="white",style=filled];
"flask.session.get('fizz') == 'buzz',type='comparison_operator'\nline_star:159,line_end:159|char_star:27,char_end:62"->"flask.session.get('fizz'),type='call'\nline_star:159,line_end:159|char_star:27,char_end:52";
"flask.session.get,type='attribute'\nline_star:159,line_end:159|char_star:27,char_end:44"[shape="box",fillcolor="white",style=filled];
"flask.session.get('fizz'),type='call'\nline_star:159,line_end:159|char_star:27,char_end:52"->"flask.session.get,type='attribute'\nline_star:159,line_end:159|char_star:27,char_end:44";
"flask.session,type='attribute'\nline_star:159,line_end:159|char_star:27,char_end:40"[shape="box",fillcolor="white",style=filled];
"flask.session.get,type='attribute'\nline_star:159,line_end:159|char_star:27,char_end:44"->"flask.session,type='attribute'\nline_star:159,line_end:159|char_star:27,char_end:40";
"flask,type='identifier'\nline_star:159,line_end:159|char_star:27,char_end:32"[shape="point",fillcolor="#121013",style=filled];
"flask.session,type='attribute'\nline_star:159,line_end:159|char_star:27,char_end:40"->"flask,type='identifier'\nline_star:159,line_end:159|char_star:27,char_end:32";
"session,type='identifier'\nline_star:159,line_end:159|char_star:33,char_end:40"[shape="point",fillcolor="#121013",style=filled];
"flask.session,type='attribute'\nline_star:159,line_end:159|char_star:27,char_end:40"->"session,type='identifier'\nline_star:159,line_end:159|char_star:33,char_end:40";
"get,type='identifier'\nline_star:159,line_end:159|char_star:41,char_end:44"[shape="point",fillcolor="#121013",style=filled];
"flask.session.get,type='attribute'\nline_star:159,line_end:159|char_star:27,char_end:44"->"get,type='identifier'\nline_star:159,line_end:159|char_star:41,char_end:44";
"('fizz'),type='argument_list'\nline_star:159,line_end:159|char_star:44,char_end:52"[shape="box",fillcolor="white",style=filled];
"flask.session.get('fizz'),type='call'\nline_star:159,line_end:159|char_star:27,char_end:52"->"('fizz'),type='argument_list'\nline_star:159,line_end:159|char_star:44,char_end:52";
"assert not flask.request,type='assert_statement'\nline_star:160,line_end:160|char_star:16,char_end:40"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:152,line_end:161|char_star:16,char_end:25"->"assert not flask.request,type='assert_statement'\nline_star:160,line_end:160|char_star:16,char_end:40";
"not flask.request,type='not_operator'\nline_star:160,line_end:160|char_star:23,char_end:40"[shape="box",fillcolor="white",style=filled];
"assert not flask.request,type='assert_statement'\nline_star:160,line_end:160|char_star:16,char_end:40"->"not flask.request,type='not_operator'\nline_star:160,line_end:160|char_star:23,char_end:40";
"flask.request,type='attribute'\nline_star:160,line_end:160|char_star:27,char_end:40"[shape="box",fillcolor="white",style=filled];
"not flask.request,type='not_operator'\nline_star:160,line_end:160|char_star:23,char_end:40"->"flask.request,type='attribute'\nline_star:160,line_end:160|char_star:27,char_end:40";
"flask,type='identifier'\nline_star:160,line_end:160|char_star:27,char_end:32"[shape="point",fillcolor="#121013",style=filled];
"flask.request,type='attribute'\nline_star:160,line_end:160|char_star:27,char_end:40"->"flask,type='identifier'\nline_star:160,line_end:160|char_star:27,char_end:32";
"request,type='identifier'\nline_star:160,line_end:160|char_star:33,char_end:40"[shape="point",fillcolor="#121013",style=filled];
"flask.request,type='attribute'\nline_star:160,line_end:160|char_star:27,char_end:40"->"request,type='identifier'\nline_star:160,line_end:160|char_star:33,char_end:40";
"return 42,type='return_statement'\nline_star:161,line_end:161|char_star:16,char_end:25"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:152,line_end:161|char_star:16,char_end:25"->"return 42,type='return_statement'\nline_star:161,line_end:161|char_star:16,char_end:25";
"return 'Hello World!',type='return_statement'\nline_star:164,line_end:164|char_star:12,char_end:33"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:148,line_end:164|char_star:12,char_end:33"->"return 'Hello World!',type='return_statement'\nline_star:164,line_end:164|char_star:12,char_end:33";
"assert rv.data == b'Hello World!',type='assert_statement'\nline_star:167,line_end:167|char_star:8,char_end:41"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:144,line_end:170|char_star:8,char_end:27"->"assert rv.data == b'Hello World!',type='assert_statement'\nline_star:167,line_end:167|char_star:8,char_end:41";
"rv.data == b'Hello World!',type='comparison_operator'\nline_star:167,line_end:167|char_star:15,char_end:41"[shape="box",fillcolor="white",style=filled];
"assert rv.data == b'Hello World!',type='assert_statement'\nline_star:167,line_end:167|char_star:8,char_end:41"->"rv.data == b'Hello World!',type='comparison_operator'\nline_star:167,line_end:167|char_star:15,char_end:41";
"rv.data,type='attribute'\nline_star:167,line_end:167|char_star:15,char_end:22"[shape="box",fillcolor="white",style=filled];
"rv.data == b'Hello World!',type='comparison_operator'\nline_star:167,line_end:167|char_star:15,char_end:41"->"rv.data,type='attribute'\nline_star:167,line_end:167|char_star:15,char_end:22";
"rv,type='identifier'\nline_star:167,line_end:167|char_star:15,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"rv.data,type='attribute'\nline_star:167,line_end:167|char_star:15,char_end:22"->"rv,type='identifier'\nline_star:167,line_end:167|char_star:15,char_end:17";
"data,type='identifier'\nline_star:167,line_end:167|char_star:18,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"rv.data,type='attribute'\nline_star:167,line_end:167|char_star:15,char_end:22"->"data,type='identifier'\nline_star:167,line_end:167|char_star:18,char_end:22";
"assert result == 42,type='assert_statement'\nline_star:170,line_end:170|char_star:8,char_end:27"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:144,line_end:170|char_star:8,char_end:27"->"assert result == 42,type='assert_statement'\nline_star:170,line_end:170|char_star:8,char_end:27";
"result == 42,type='comparison_operator'\nline_star:170,line_end:170|char_star:15,char_end:27"[shape="box",fillcolor="white",style=filled];
"assert result == 42,type='assert_statement'\nline_star:170,line_end:170|char_star:8,char_end:27"->"result == 42,type='comparison_operator'\nline_star:170,line_end:170|char_star:15,char_end:27";
"result,type='identifier'\nline_star:170,line_end:170|char_star:15,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"result == 42,type='comparison_operator'\nline_star:170,line_end:170|char_star:15,char_end:27"->"result,type='identifier'\nline_star:170,line_end:170|char_star:15,char_end:21";
"def test_greenlet_context_copying_api(self, app, client):\n        greenlets = []\n\n        @app.route('/')\n        def index():\n            flask.session['fizz'] = 'buzz'\n\n            @flask.copy_current_request_context\n            def g():\n                assert flask.request\n                assert flask.current_app == app\n                assert flask.request.path == '/'\n                assert flask.request.args['foo'] == 'bar'\n                assert flask.session.get('fizz') == 'buzz'\n                return 42\n\n            greenlets.append(greenlet(g))\n            return 'Hello World!'\n\n        rv = client.get('/?foo=bar')\n        assert rv.data == b'Hello World!'\n\n        result = greenlets[0].run()\n        assert result == 42,type='function_definition'\nline_star:172,line_end:195|char_star:4,char_end:27"[shape="box",fillcolor="#cee6b4",style=filled];
"type='INFORMATION BLOCK'\nline_star:143,line_end:195|char_star:4,char_end:27"->"def test_greenlet_context_copying_api(self, app, client):\n        greenlets = []\n\n        @app.route('/')\n        def index():\n            flask.session['fizz'] = 'buzz'\n\n            @flask.copy_current_request_context\n            def g():\n                assert flask.request\n                assert flask.current_app == app\n                assert flask.request.path == '/'\n                assert flask.request.args['foo'] == 'bar'\n                assert flask.session.get('fizz') == 'buzz'\n                return 42\n\n            greenlets.append(greenlet(g))\n            return 'Hello World!'\n\n        rv = client.get('/?foo=bar')\n        assert rv.data == b'Hello World!'\n\n        result = greenlets[0].run()\n        assert result == 42,type='function_definition'\nline_star:172,line_end:195|char_star:4,char_end:27";
"test_greenlet_context_copying_api,type='identifier'\nline_star:172,line_end:172|char_star:8,char_end:41"[shape="point",fillcolor="#121013",style=filled];
"def test_greenlet_context_copying_api(self, app, client):\n        greenlets = []\n\n        @app.route('/')\n        def index():\n            flask.session['fizz'] = 'buzz'\n\n            @flask.copy_current_request_context\n            def g():\n                assert flask.request\n                assert flask.current_app == app\n                assert flask.request.path == '/'\n                assert flask.request.args['foo'] == 'bar'\n                assert flask.session.get('fizz') == 'buzz'\n                return 42\n\n            greenlets.append(greenlet(g))\n            return 'Hello World!'\n\n        rv = client.get('/?foo=bar')\n        assert rv.data == b'Hello World!'\n\n        result = greenlets[0].run()\n        assert result == 42,type='function_definition'\nline_star:172,line_end:195|char_star:4,char_end:27"->"test_greenlet_context_copying_api,type='identifier'\nline_star:172,line_end:172|char_star:8,char_end:41";
"(self, app, client),type='parameters'\nline_star:172,line_end:172|char_star:41,char_end:60"[shape="box",fillcolor="white",style=filled];
"def test_greenlet_context_copying_api(self, app, client):\n        greenlets = []\n\n        @app.route('/')\n        def index():\n            flask.session['fizz'] = 'buzz'\n\n            @flask.copy_current_request_context\n            def g():\n                assert flask.request\n                assert flask.current_app == app\n                assert flask.request.path == '/'\n                assert flask.request.args['foo'] == 'bar'\n                assert flask.session.get('fizz') == 'buzz'\n                return 42\n\n            greenlets.append(greenlet(g))\n            return 'Hello World!'\n\n        rv = client.get('/?foo=bar')\n        assert rv.data == b'Hello World!'\n\n        result = greenlets[0].run()\n        assert result == 42,type='function_definition'\nline_star:172,line_end:195|char_star:4,char_end:27"->"(self, app, client),type='parameters'\nline_star:172,line_end:172|char_star:41,char_end:60";
"self,type='identifier'\nline_star:172,line_end:172|char_star:42,char_end:46"[shape="point",fillcolor="#121013",style=filled];
"(self, app, client),type='parameters'\nline_star:172,line_end:172|char_star:41,char_end:60"->"self,type='identifier'\nline_star:172,line_end:172|char_star:42,char_end:46";
"app,type='identifier'\nline_star:172,line_end:172|char_star:48,char_end:51"[shape="point",fillcolor="#121013",style=filled];
"(self, app, client),type='parameters'\nline_star:172,line_end:172|char_star:41,char_end:60"->"app,type='identifier'\nline_star:172,line_end:172|char_star:48,char_end:51";
"client,type='identifier'\nline_star:172,line_end:172|char_star:53,char_end:59"[shape="point",fillcolor="#121013",style=filled];
"(self, app, client),type='parameters'\nline_star:172,line_end:172|char_star:41,char_end:60"->"client,type='identifier'\nline_star:172,line_end:172|char_star:53,char_end:59";
"type='INFORMATION BLOCK'\nline_star:173,line_end:195|char_star:8,char_end:27"[shape="point",fillcolor="#121013",style=filled];
"def test_greenlet_context_copying_api(self, app, client):\n        greenlets = []\n\n        @app.route('/')\n        def index():\n            flask.session['fizz'] = 'buzz'\n\n            @flask.copy_current_request_context\n            def g():\n                assert flask.request\n                assert flask.current_app == app\n                assert flask.request.path == '/'\n                assert flask.request.args['foo'] == 'bar'\n                assert flask.session.get('fizz') == 'buzz'\n                return 42\n\n            greenlets.append(greenlet(g))\n            return 'Hello World!'\n\n        rv = client.get('/?foo=bar')\n        assert rv.data == b'Hello World!'\n\n        result = greenlets[0].run()\n        assert result == 42,type='function_definition'\nline_star:172,line_end:195|char_star:4,char_end:27"->"type='INFORMATION BLOCK'\nline_star:173,line_end:195|char_star:8,char_end:27";
"@app.route('/')\n        def index():\n            flask.session['fizz'] = 'buzz'\n\n            @flask.copy_current_request_context\n            def g():\n                assert flask.request\n                assert flask.current_app == app\n                assert flask.request.path == '/'\n                assert flask.request.args['foo'] == 'bar'\n                assert flask.session.get('fizz') == 'buzz'\n                return 42\n\n            greenlets.append(greenlet(g))\n            return 'Hello World!',type='decorated_definition'\nline_star:175,line_end:189|char_star:8,char_end:33"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:173,line_end:195|char_star:8,char_end:27"->"@app.route('/')\n        def index():\n            flask.session['fizz'] = 'buzz'\n\n            @flask.copy_current_request_context\n            def g():\n                assert flask.request\n                assert flask.current_app == app\n                assert flask.request.path == '/'\n                assert flask.request.args['foo'] == 'bar'\n                assert flask.session.get('fizz') == 'buzz'\n                return 42\n\n            greenlets.append(greenlet(g))\n            return 'Hello World!',type='decorated_definition'\nline_star:175,line_end:189|char_star:8,char_end:33";
"@app.route('/'),type='decorator'\nline_star:175,line_end:175|char_star:8,char_end:23"[shape="box",fillcolor="white",style=filled];
"@app.route('/')\n        def index():\n            flask.session['fizz'] = 'buzz'\n\n            @flask.copy_current_request_context\n            def g():\n                assert flask.request\n                assert flask.current_app == app\n                assert flask.request.path == '/'\n                assert flask.request.args['foo'] == 'bar'\n                assert flask.session.get('fizz') == 'buzz'\n                return 42\n\n            greenlets.append(greenlet(g))\n            return 'Hello World!',type='decorated_definition'\nline_star:175,line_end:189|char_star:8,char_end:33"->"@app.route('/'),type='decorator'\nline_star:175,line_end:175|char_star:8,char_end:23";
"def index():\n            flask.session['fizz'] = 'buzz'\n\n            @flask.copy_current_request_context\n            def g():\n                assert flask.request\n                assert flask.current_app == app\n                assert flask.request.path == '/'\n                assert flask.request.args['foo'] == 'bar'\n                assert flask.session.get('fizz') == 'buzz'\n                return 42\n\n            greenlets.append(greenlet(g))\n            return 'Hello World!',type='function_definition'\nline_star:176,line_end:189|char_star:8,char_end:33"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.route('/')\n        def index():\n            flask.session['fizz'] = 'buzz'\n\n            @flask.copy_current_request_context\n            def g():\n                assert flask.request\n                assert flask.current_app == app\n                assert flask.request.path == '/'\n                assert flask.request.args['foo'] == 'bar'\n                assert flask.session.get('fizz') == 'buzz'\n                return 42\n\n            greenlets.append(greenlet(g))\n            return 'Hello World!',type='decorated_definition'\nline_star:175,line_end:189|char_star:8,char_end:33"->"def index():\n            flask.session['fizz'] = 'buzz'\n\n            @flask.copy_current_request_context\n            def g():\n                assert flask.request\n                assert flask.current_app == app\n                assert flask.request.path == '/'\n                assert flask.request.args['foo'] == 'bar'\n                assert flask.session.get('fizz') == 'buzz'\n                return 42\n\n            greenlets.append(greenlet(g))\n            return 'Hello World!',type='function_definition'\nline_star:176,line_end:189|char_star:8,char_end:33";
"index,type='identifier'\nline_star:176,line_end:176|char_star:12,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"def index():\n            flask.session['fizz'] = 'buzz'\n\n            @flask.copy_current_request_context\n            def g():\n                assert flask.request\n                assert flask.current_app == app\n                assert flask.request.path == '/'\n                assert flask.request.args['foo'] == 'bar'\n                assert flask.session.get('fizz') == 'buzz'\n                return 42\n\n            greenlets.append(greenlet(g))\n            return 'Hello World!',type='function_definition'\nline_star:176,line_end:189|char_star:8,char_end:33"->"index,type='identifier'\nline_star:176,line_end:176|char_star:12,char_end:17";
"type='INFORMATION BLOCK'\nline_star:177,line_end:189|char_star:12,char_end:33"[shape="point",fillcolor="#121013",style=filled];
"def index():\n            flask.session['fizz'] = 'buzz'\n\n            @flask.copy_current_request_context\n            def g():\n                assert flask.request\n                assert flask.current_app == app\n                assert flask.request.path == '/'\n                assert flask.request.args['foo'] == 'bar'\n                assert flask.session.get('fizz') == 'buzz'\n                return 42\n\n            greenlets.append(greenlet(g))\n            return 'Hello World!',type='function_definition'\nline_star:176,line_end:189|char_star:8,char_end:33"->"type='INFORMATION BLOCK'\nline_star:177,line_end:189|char_star:12,char_end:33";
"@flask.copy_current_request_context\n            def g():\n                assert flask.request\n                assert flask.current_app == app\n                assert flask.request.path == '/'\n                assert flask.request.args['foo'] == 'bar'\n                assert flask.session.get('fizz') == 'buzz'\n                return 42,type='decorated_definition'\nline_star:179,line_end:186|char_star:12,char_end:25"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:177,line_end:189|char_star:12,char_end:33"->"@flask.copy_current_request_context\n            def g():\n                assert flask.request\n                assert flask.current_app == app\n                assert flask.request.path == '/'\n                assert flask.request.args['foo'] == 'bar'\n                assert flask.session.get('fizz') == 'buzz'\n                return 42,type='decorated_definition'\nline_star:179,line_end:186|char_star:12,char_end:25";
"@flask.copy_current_request_context,type='decorator'\nline_star:179,line_end:179|char_star:12,char_end:47"[shape="box",fillcolor="white",style=filled];
"@flask.copy_current_request_context\n            def g():\n                assert flask.request\n                assert flask.current_app == app\n                assert flask.request.path == '/'\n                assert flask.request.args['foo'] == 'bar'\n                assert flask.session.get('fizz') == 'buzz'\n                return 42,type='decorated_definition'\nline_star:179,line_end:186|char_star:12,char_end:25"->"@flask.copy_current_request_context,type='decorator'\nline_star:179,line_end:179|char_star:12,char_end:47";
"def g():\n                assert flask.request\n                assert flask.current_app == app\n                assert flask.request.path == '/'\n                assert flask.request.args['foo'] == 'bar'\n                assert flask.session.get('fizz') == 'buzz'\n                return 42,type='function_definition'\nline_star:180,line_end:186|char_star:12,char_end:25"[shape="box",fillcolor="#cee6b4",style=filled];
"@flask.copy_current_request_context\n            def g():\n                assert flask.request\n                assert flask.current_app == app\n                assert flask.request.path == '/'\n                assert flask.request.args['foo'] == 'bar'\n                assert flask.session.get('fizz') == 'buzz'\n                return 42,type='decorated_definition'\nline_star:179,line_end:186|char_star:12,char_end:25"->"def g():\n                assert flask.request\n                assert flask.current_app == app\n                assert flask.request.path == '/'\n                assert flask.request.args['foo'] == 'bar'\n                assert flask.session.get('fizz') == 'buzz'\n                return 42,type='function_definition'\nline_star:180,line_end:186|char_star:12,char_end:25";
"g,type='identifier'\nline_star:180,line_end:180|char_star:16,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"def g():\n                assert flask.request\n                assert flask.current_app == app\n                assert flask.request.path == '/'\n                assert flask.request.args['foo'] == 'bar'\n                assert flask.session.get('fizz') == 'buzz'\n                return 42,type='function_definition'\nline_star:180,line_end:186|char_star:12,char_end:25"->"g,type='identifier'\nline_star:180,line_end:180|char_star:16,char_end:17";
"type='INFORMATION BLOCK'\nline_star:181,line_end:186|char_star:16,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"def g():\n                assert flask.request\n                assert flask.current_app == app\n                assert flask.request.path == '/'\n                assert flask.request.args['foo'] == 'bar'\n                assert flask.session.get('fizz') == 'buzz'\n                return 42,type='function_definition'\nline_star:180,line_end:186|char_star:12,char_end:25"->"type='INFORMATION BLOCK'\nline_star:181,line_end:186|char_star:16,char_end:25";
"assert flask.request,type='assert_statement'\nline_star:181,line_end:181|char_star:16,char_end:36"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:181,line_end:186|char_star:16,char_end:25"->"assert flask.request,type='assert_statement'\nline_star:181,line_end:181|char_star:16,char_end:36";
"flask.request,type='attribute'\nline_star:181,line_end:181|char_star:23,char_end:36"[shape="box",fillcolor="white",style=filled];
"assert flask.request,type='assert_statement'\nline_star:181,line_end:181|char_star:16,char_end:36"->"flask.request,type='attribute'\nline_star:181,line_end:181|char_star:23,char_end:36";
"flask,type='identifier'\nline_star:181,line_end:181|char_star:23,char_end:28"[shape="point",fillcolor="#121013",style=filled];
"flask.request,type='attribute'\nline_star:181,line_end:181|char_star:23,char_end:36"->"flask,type='identifier'\nline_star:181,line_end:181|char_star:23,char_end:28";
"request,type='identifier'\nline_star:181,line_end:181|char_star:29,char_end:36"[shape="point",fillcolor="#121013",style=filled];
"flask.request,type='attribute'\nline_star:181,line_end:181|char_star:23,char_end:36"->"request,type='identifier'\nline_star:181,line_end:181|char_star:29,char_end:36";
"assert flask.current_app == app,type='assert_statement'\nline_star:182,line_end:182|char_star:16,char_end:47"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:181,line_end:186|char_star:16,char_end:25"->"assert flask.current_app == app,type='assert_statement'\nline_star:182,line_end:182|char_star:16,char_end:47";
"flask.current_app == app,type='comparison_operator'\nline_star:182,line_end:182|char_star:23,char_end:47"[shape="box",fillcolor="white",style=filled];
"assert flask.current_app == app,type='assert_statement'\nline_star:182,line_end:182|char_star:16,char_end:47"->"flask.current_app == app,type='comparison_operator'\nline_star:182,line_end:182|char_star:23,char_end:47";
"flask.current_app,type='attribute'\nline_star:182,line_end:182|char_star:23,char_end:40"[shape="box",fillcolor="white",style=filled];
"flask.current_app == app,type='comparison_operator'\nline_star:182,line_end:182|char_star:23,char_end:47"->"flask.current_app,type='attribute'\nline_star:182,line_end:182|char_star:23,char_end:40";
"flask,type='identifier'\nline_star:182,line_end:182|char_star:23,char_end:28"[shape="point",fillcolor="#121013",style=filled];
"flask.current_app,type='attribute'\nline_star:182,line_end:182|char_star:23,char_end:40"->"flask,type='identifier'\nline_star:182,line_end:182|char_star:23,char_end:28";
"current_app,type='identifier'\nline_star:182,line_end:182|char_star:29,char_end:40"[shape="point",fillcolor="#121013",style=filled];
"flask.current_app,type='attribute'\nline_star:182,line_end:182|char_star:23,char_end:40"->"current_app,type='identifier'\nline_star:182,line_end:182|char_star:29,char_end:40";
"app,type='identifier'\nline_star:182,line_end:182|char_star:44,char_end:47"[shape="point",fillcolor="#121013",style=filled];
"flask.current_app == app,type='comparison_operator'\nline_star:182,line_end:182|char_star:23,char_end:47"->"app,type='identifier'\nline_star:182,line_end:182|char_star:44,char_end:47";
"assert flask.request.path == '/',type='assert_statement'\nline_star:183,line_end:183|char_star:16,char_end:48"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:181,line_end:186|char_star:16,char_end:25"->"assert flask.request.path == '/',type='assert_statement'\nline_star:183,line_end:183|char_star:16,char_end:48";
"flask.request.path == '/',type='comparison_operator'\nline_star:183,line_end:183|char_star:23,char_end:48"[shape="box",fillcolor="white",style=filled];
"assert flask.request.path == '/',type='assert_statement'\nline_star:183,line_end:183|char_star:16,char_end:48"->"flask.request.path == '/',type='comparison_operator'\nline_star:183,line_end:183|char_star:23,char_end:48";
"flask.request.path,type='attribute'\nline_star:183,line_end:183|char_star:23,char_end:41"[shape="box",fillcolor="white",style=filled];
"flask.request.path == '/',type='comparison_operator'\nline_star:183,line_end:183|char_star:23,char_end:48"->"flask.request.path,type='attribute'\nline_star:183,line_end:183|char_star:23,char_end:41";
"flask.request,type='attribute'\nline_star:183,line_end:183|char_star:23,char_end:36"[shape="box",fillcolor="white",style=filled];
"flask.request.path,type='attribute'\nline_star:183,line_end:183|char_star:23,char_end:41"->"flask.request,type='attribute'\nline_star:183,line_end:183|char_star:23,char_end:36";
"flask,type='identifier'\nline_star:183,line_end:183|char_star:23,char_end:28"[shape="point",fillcolor="#121013",style=filled];
"flask.request,type='attribute'\nline_star:183,line_end:183|char_star:23,char_end:36"->"flask,type='identifier'\nline_star:183,line_end:183|char_star:23,char_end:28";
"request,type='identifier'\nline_star:183,line_end:183|char_star:29,char_end:36"[shape="point",fillcolor="#121013",style=filled];
"flask.request,type='attribute'\nline_star:183,line_end:183|char_star:23,char_end:36"->"request,type='identifier'\nline_star:183,line_end:183|char_star:29,char_end:36";
"path,type='identifier'\nline_star:183,line_end:183|char_star:37,char_end:41"[shape="point",fillcolor="#121013",style=filled];
"flask.request.path,type='attribute'\nline_star:183,line_end:183|char_star:23,char_end:41"->"path,type='identifier'\nline_star:183,line_end:183|char_star:37,char_end:41";
"assert flask.request.args['foo'] == 'bar',type='assert_statement'\nline_star:184,line_end:184|char_star:16,char_end:57"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:181,line_end:186|char_star:16,char_end:25"->"assert flask.request.args['foo'] == 'bar',type='assert_statement'\nline_star:184,line_end:184|char_star:16,char_end:57";
"flask.request.args['foo'] == 'bar',type='comparison_operator'\nline_star:184,line_end:184|char_star:23,char_end:57"[shape="box",fillcolor="white",style=filled];
"assert flask.request.args['foo'] == 'bar',type='assert_statement'\nline_star:184,line_end:184|char_star:16,char_end:57"->"flask.request.args['foo'] == 'bar',type='comparison_operator'\nline_star:184,line_end:184|char_star:23,char_end:57";
"flask.request.args['foo'],type='subscript'\nline_star:184,line_end:184|char_star:23,char_end:48"[shape="box",fillcolor="white",style=filled];
"flask.request.args['foo'] == 'bar',type='comparison_operator'\nline_star:184,line_end:184|char_star:23,char_end:57"->"flask.request.args['foo'],type='subscript'\nline_star:184,line_end:184|char_star:23,char_end:48";
"flask.request.args,type='attribute'\nline_star:184,line_end:184|char_star:23,char_end:41"[shape="box",fillcolor="white",style=filled];
"flask.request.args['foo'],type='subscript'\nline_star:184,line_end:184|char_star:23,char_end:48"->"flask.request.args,type='attribute'\nline_star:184,line_end:184|char_star:23,char_end:41";
"flask.request,type='attribute'\nline_star:184,line_end:184|char_star:23,char_end:36"[shape="box",fillcolor="white",style=filled];
"flask.request.args,type='attribute'\nline_star:184,line_end:184|char_star:23,char_end:41"->"flask.request,type='attribute'\nline_star:184,line_end:184|char_star:23,char_end:36";
"flask,type='identifier'\nline_star:184,line_end:184|char_star:23,char_end:28"[shape="point",fillcolor="#121013",style=filled];
"flask.request,type='attribute'\nline_star:184,line_end:184|char_star:23,char_end:36"->"flask,type='identifier'\nline_star:184,line_end:184|char_star:23,char_end:28";
"request,type='identifier'\nline_star:184,line_end:184|char_star:29,char_end:36"[shape="point",fillcolor="#121013",style=filled];
"flask.request,type='attribute'\nline_star:184,line_end:184|char_star:23,char_end:36"->"request,type='identifier'\nline_star:184,line_end:184|char_star:29,char_end:36";
"args,type='identifier'\nline_star:184,line_end:184|char_star:37,char_end:41"[shape="point",fillcolor="#121013",style=filled];
"flask.request.args,type='attribute'\nline_star:184,line_end:184|char_star:23,char_end:41"->"args,type='identifier'\nline_star:184,line_end:184|char_star:37,char_end:41";
"assert flask.session.get('fizz') == 'buzz',type='assert_statement'\nline_star:185,line_end:185|char_star:16,char_end:58"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:181,line_end:186|char_star:16,char_end:25"->"assert flask.session.get('fizz') == 'buzz',type='assert_statement'\nline_star:185,line_end:185|char_star:16,char_end:58";
"flask.session.get('fizz') == 'buzz',type='comparison_operator'\nline_star:185,line_end:185|char_star:23,char_end:58"[shape="box",fillcolor="white",style=filled];
"assert flask.session.get('fizz') == 'buzz',type='assert_statement'\nline_star:185,line_end:185|char_star:16,char_end:58"->"flask.session.get('fizz') == 'buzz',type='comparison_operator'\nline_star:185,line_end:185|char_star:23,char_end:58";
"flask.session.get('fizz'),type='call'\nline_star:185,line_end:185|char_star:23,char_end:48"[shape="box",fillcolor="white",style=filled];
"flask.session.get('fizz') == 'buzz',type='comparison_operator'\nline_star:185,line_end:185|char_star:23,char_end:58"->"flask.session.get('fizz'),type='call'\nline_star:185,line_end:185|char_star:23,char_end:48";
"flask.session.get,type='attribute'\nline_star:185,line_end:185|char_star:23,char_end:40"[shape="box",fillcolor="white",style=filled];
"flask.session.get('fizz'),type='call'\nline_star:185,line_end:185|char_star:23,char_end:48"->"flask.session.get,type='attribute'\nline_star:185,line_end:185|char_star:23,char_end:40";
"flask.session,type='attribute'\nline_star:185,line_end:185|char_star:23,char_end:36"[shape="box",fillcolor="white",style=filled];
"flask.session.get,type='attribute'\nline_star:185,line_end:185|char_star:23,char_end:40"->"flask.session,type='attribute'\nline_star:185,line_end:185|char_star:23,char_end:36";
"flask,type='identifier'\nline_star:185,line_end:185|char_star:23,char_end:28"[shape="point",fillcolor="#121013",style=filled];
"flask.session,type='attribute'\nline_star:185,line_end:185|char_star:23,char_end:36"->"flask,type='identifier'\nline_star:185,line_end:185|char_star:23,char_end:28";
"session,type='identifier'\nline_star:185,line_end:185|char_star:29,char_end:36"[shape="point",fillcolor="#121013",style=filled];
"flask.session,type='attribute'\nline_star:185,line_end:185|char_star:23,char_end:36"->"session,type='identifier'\nline_star:185,line_end:185|char_star:29,char_end:36";
"get,type='identifier'\nline_star:185,line_end:185|char_star:37,char_end:40"[shape="point",fillcolor="#121013",style=filled];
"flask.session.get,type='attribute'\nline_star:185,line_end:185|char_star:23,char_end:40"->"get,type='identifier'\nline_star:185,line_end:185|char_star:37,char_end:40";
"('fizz'),type='argument_list'\nline_star:185,line_end:185|char_star:40,char_end:48"[shape="box",fillcolor="white",style=filled];
"flask.session.get('fizz'),type='call'\nline_star:185,line_end:185|char_star:23,char_end:48"->"('fizz'),type='argument_list'\nline_star:185,line_end:185|char_star:40,char_end:48";
"return 42,type='return_statement'\nline_star:186,line_end:186|char_star:16,char_end:25"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:181,line_end:186|char_star:16,char_end:25"->"return 42,type='return_statement'\nline_star:186,line_end:186|char_star:16,char_end:25";
"return 'Hello World!',type='return_statement'\nline_star:189,line_end:189|char_star:12,char_end:33"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:177,line_end:189|char_star:12,char_end:33"->"return 'Hello World!',type='return_statement'\nline_star:189,line_end:189|char_star:12,char_end:33";
"assert rv.data == b'Hello World!',type='assert_statement'\nline_star:192,line_end:192|char_star:8,char_end:41"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:173,line_end:195|char_star:8,char_end:27"->"assert rv.data == b'Hello World!',type='assert_statement'\nline_star:192,line_end:192|char_star:8,char_end:41";
"rv.data == b'Hello World!',type='comparison_operator'\nline_star:192,line_end:192|char_star:15,char_end:41"[shape="box",fillcolor="white",style=filled];
"assert rv.data == b'Hello World!',type='assert_statement'\nline_star:192,line_end:192|char_star:8,char_end:41"->"rv.data == b'Hello World!',type='comparison_operator'\nline_star:192,line_end:192|char_star:15,char_end:41";
"rv.data,type='attribute'\nline_star:192,line_end:192|char_star:15,char_end:22"[shape="box",fillcolor="white",style=filled];
"rv.data == b'Hello World!',type='comparison_operator'\nline_star:192,line_end:192|char_star:15,char_end:41"->"rv.data,type='attribute'\nline_star:192,line_end:192|char_star:15,char_end:22";
"rv,type='identifier'\nline_star:192,line_end:192|char_star:15,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"rv.data,type='attribute'\nline_star:192,line_end:192|char_star:15,char_end:22"->"rv,type='identifier'\nline_star:192,line_end:192|char_star:15,char_end:17";
"data,type='identifier'\nline_star:192,line_end:192|char_star:18,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"rv.data,type='attribute'\nline_star:192,line_end:192|char_star:15,char_end:22"->"data,type='identifier'\nline_star:192,line_end:192|char_star:18,char_end:22";
"assert result == 42,type='assert_statement'\nline_star:195,line_end:195|char_star:8,char_end:27"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:173,line_end:195|char_star:8,char_end:27"->"assert result == 42,type='assert_statement'\nline_star:195,line_end:195|char_star:8,char_end:27";
"result == 42,type='comparison_operator'\nline_star:195,line_end:195|char_star:15,char_end:27"[shape="box",fillcolor="white",style=filled];
"assert result == 42,type='assert_statement'\nline_star:195,line_end:195|char_star:8,char_end:27"->"result == 42,type='comparison_operator'\nline_star:195,line_end:195|char_star:15,char_end:27";
"result,type='identifier'\nline_star:195,line_end:195|char_star:15,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"result == 42,type='comparison_operator'\nline_star:195,line_end:195|char_star:15,char_end:27"->"result,type='identifier'\nline_star:195,line_end:195|char_star:15,char_end:21";
"def test_session_error_pops_context():\n    class SessionError(Exception):\n        pass\n\n    class FailingSessionInterface(SessionInterface):\n        def open_session(self, app, request):\n            raise SessionError()\n\n    class CustomFlask(flask.Flask):\n        session_interface = FailingSessionInterface()\n\n    app = CustomFlask(__name__)\n\n    @app.route('/')\n    def index():\n        # shouldn't get here\n        AssertionError()\n\n    response = app.test_client().get('/')\n    assert response.status_code == 500\n    assert not flask.request\n    assert not flask.current_app,type='function_definition'\nline_star:198,line_end:219|char_star:0,char_end:32"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_session_error_pops_context():\n    class SessionError(Exception):\n        pass\n\n    class FailingSessionInterface(SessionInterface):\n        def open_session(self, app, request):\n            raise SessionError()\n\n    class CustomFlask(flask.Flask):\n        session_interface = FailingSessionInterface()\n\n    app = CustomFlask(__name__)\n\n    @app.route('/')\n    def index():\n        # shouldn't get here\n        AssertionError()\n\n    response = app.test_client().get('/')\n    assert response.status_code == 500\n    assert not flask.request\n    assert not flask.current_app,type='function_definition'\nline_star:198,line_end:219|char_star:0,char_end:32";
"test_session_error_pops_context,type='identifier'\nline_star:198,line_end:198|char_star:4,char_end:35"[shape="point",fillcolor="#121013",style=filled];
"def test_session_error_pops_context():\n    class SessionError(Exception):\n        pass\n\n    class FailingSessionInterface(SessionInterface):\n        def open_session(self, app, request):\n            raise SessionError()\n\n    class CustomFlask(flask.Flask):\n        session_interface = FailingSessionInterface()\n\n    app = CustomFlask(__name__)\n\n    @app.route('/')\n    def index():\n        # shouldn't get here\n        AssertionError()\n\n    response = app.test_client().get('/')\n    assert response.status_code == 500\n    assert not flask.request\n    assert not flask.current_app,type='function_definition'\nline_star:198,line_end:219|char_star:0,char_end:32"->"test_session_error_pops_context,type='identifier'\nline_star:198,line_end:198|char_star:4,char_end:35";
"type='INFORMATION BLOCK'\nline_star:199,line_end:219|char_star:4,char_end:32"[shape="point",fillcolor="#121013",style=filled];
"def test_session_error_pops_context():\n    class SessionError(Exception):\n        pass\n\n    class FailingSessionInterface(SessionInterface):\n        def open_session(self, app, request):\n            raise SessionError()\n\n    class CustomFlask(flask.Flask):\n        session_interface = FailingSessionInterface()\n\n    app = CustomFlask(__name__)\n\n    @app.route('/')\n    def index():\n        # shouldn't get here\n        AssertionError()\n\n    response = app.test_client().get('/')\n    assert response.status_code == 500\n    assert not flask.request\n    assert not flask.current_app,type='function_definition'\nline_star:198,line_end:219|char_star:0,char_end:32"->"type='INFORMATION BLOCK'\nline_star:199,line_end:219|char_star:4,char_end:32";
"class SessionError(Exception):\n        pass,type='class_definition'\nline_star:199,line_end:200|char_star:4,char_end:12"[shape="box",fillcolor="#ffdf91",style=filled];
"type='INFORMATION BLOCK'\nline_star:199,line_end:219|char_star:4,char_end:32"->"class SessionError(Exception):\n        pass,type='class_definition'\nline_star:199,line_end:200|char_star:4,char_end:12";
"SessionError,type='identifier'\nline_star:199,line_end:199|char_star:10,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"class SessionError(Exception):\n        pass,type='class_definition'\nline_star:199,line_end:200|char_star:4,char_end:12"->"SessionError,type='identifier'\nline_star:199,line_end:199|char_star:10,char_end:22";
"(Exception),type='argument_list'\nline_star:199,line_end:199|char_star:22,char_end:33"[shape="box",fillcolor="white",style=filled];
"class SessionError(Exception):\n        pass,type='class_definition'\nline_star:199,line_end:200|char_star:4,char_end:12"->"(Exception),type='argument_list'\nline_star:199,line_end:199|char_star:22,char_end:33";
"Exception,type='identifier'\nline_star:199,line_end:199|char_star:23,char_end:32"[shape="point",fillcolor="#121013",style=filled];
"(Exception),type='argument_list'\nline_star:199,line_end:199|char_star:22,char_end:33"->"Exception,type='identifier'\nline_star:199,line_end:199|char_star:23,char_end:32";
"type='INFORMATION BLOCK'\nline_star:200,line_end:200|char_star:8,char_end:12"[shape="point",fillcolor="#121013",style=filled];
"class SessionError(Exception):\n        pass,type='class_definition'\nline_star:199,line_end:200|char_star:4,char_end:12"->"type='INFORMATION BLOCK'\nline_star:200,line_end:200|char_star:8,char_end:12";
"pass,type='pass_statement'\nline_star:200,line_end:200|char_star:8,char_end:12"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:200,line_end:200|char_star:8,char_end:12"->"pass,type='pass_statement'\nline_star:200,line_end:200|char_star:8,char_end:12";
"pass,type='pass'\nline_star:200,line_end:200|char_star:8,char_end:12"[shape="box",fillcolor="white",style=filled];
"pass,type='pass_statement'\nline_star:200,line_end:200|char_star:8,char_end:12"->"pass,type='pass'\nline_star:200,line_end:200|char_star:8,char_end:12";
"class FailingSessionInterface(SessionInterface):\n        def open_session(self, app, request):\n            raise SessionError(),type='class_definition'\nline_star:202,line_end:204|char_star:4,char_end:32"[shape="box",fillcolor="#ffdf91",style=filled];
"type='INFORMATION BLOCK'\nline_star:199,line_end:219|char_star:4,char_end:32"->"class FailingSessionInterface(SessionInterface):\n        def open_session(self, app, request):\n            raise SessionError(),type='class_definition'\nline_star:202,line_end:204|char_star:4,char_end:32";
"FailingSessionInterface,type='identifier'\nline_star:202,line_end:202|char_star:10,char_end:33"[shape="point",fillcolor="#121013",style=filled];
"class FailingSessionInterface(SessionInterface):\n        def open_session(self, app, request):\n            raise SessionError(),type='class_definition'\nline_star:202,line_end:204|char_star:4,char_end:32"->"FailingSessionInterface,type='identifier'\nline_star:202,line_end:202|char_star:10,char_end:33";
"(SessionInterface),type='argument_list'\nline_star:202,line_end:202|char_star:33,char_end:51"[shape="box",fillcolor="white",style=filled];
"class FailingSessionInterface(SessionInterface):\n        def open_session(self, app, request):\n            raise SessionError(),type='class_definition'\nline_star:202,line_end:204|char_star:4,char_end:32"->"(SessionInterface),type='argument_list'\nline_star:202,line_end:202|char_star:33,char_end:51";
"SessionInterface,type='identifier'\nline_star:202,line_end:202|char_star:34,char_end:50"[shape="point",fillcolor="#121013",style=filled];
"(SessionInterface),type='argument_list'\nline_star:202,line_end:202|char_star:33,char_end:51"->"SessionInterface,type='identifier'\nline_star:202,line_end:202|char_star:34,char_end:50";
"type='INFORMATION BLOCK'\nline_star:203,line_end:204|char_star:8,char_end:32"[shape="point",fillcolor="#121013",style=filled];
"class FailingSessionInterface(SessionInterface):\n        def open_session(self, app, request):\n            raise SessionError(),type='class_definition'\nline_star:202,line_end:204|char_star:4,char_end:32"->"type='INFORMATION BLOCK'\nline_star:203,line_end:204|char_star:8,char_end:32";
"def open_session(self, app, request):\n            raise SessionError(),type='function_definition'\nline_star:203,line_end:204|char_star:8,char_end:32"[shape="box",fillcolor="#cee6b4",style=filled];
"type='INFORMATION BLOCK'\nline_star:203,line_end:204|char_star:8,char_end:32"->"def open_session(self, app, request):\n            raise SessionError(),type='function_definition'\nline_star:203,line_end:204|char_star:8,char_end:32";
"open_session,type='identifier'\nline_star:203,line_end:203|char_star:12,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"def open_session(self, app, request):\n            raise SessionError(),type='function_definition'\nline_star:203,line_end:204|char_star:8,char_end:32"->"open_session,type='identifier'\nline_star:203,line_end:203|char_star:12,char_end:24";
"(self, app, request),type='parameters'\nline_star:203,line_end:203|char_star:24,char_end:44"[shape="box",fillcolor="white",style=filled];
"def open_session(self, app, request):\n            raise SessionError(),type='function_definition'\nline_star:203,line_end:204|char_star:8,char_end:32"->"(self, app, request),type='parameters'\nline_star:203,line_end:203|char_star:24,char_end:44";
"self,type='identifier'\nline_star:203,line_end:203|char_star:25,char_end:29"[shape="point",fillcolor="#121013",style=filled];
"(self, app, request),type='parameters'\nline_star:203,line_end:203|char_star:24,char_end:44"->"self,type='identifier'\nline_star:203,line_end:203|char_star:25,char_end:29";
"app,type='identifier'\nline_star:203,line_end:203|char_star:31,char_end:34"[shape="point",fillcolor="#121013",style=filled];
"(self, app, request),type='parameters'\nline_star:203,line_end:203|char_star:24,char_end:44"->"app,type='identifier'\nline_star:203,line_end:203|char_star:31,char_end:34";
"request,type='identifier'\nline_star:203,line_end:203|char_star:36,char_end:43"[shape="point",fillcolor="#121013",style=filled];
"(self, app, request),type='parameters'\nline_star:203,line_end:203|char_star:24,char_end:44"->"request,type='identifier'\nline_star:203,line_end:203|char_star:36,char_end:43";
"type='INFORMATION BLOCK'\nline_star:204,line_end:204|char_star:12,char_end:32"[shape="point",fillcolor="#121013",style=filled];
"def open_session(self, app, request):\n            raise SessionError(),type='function_definition'\nline_star:203,line_end:204|char_star:8,char_end:32"->"type='INFORMATION BLOCK'\nline_star:204,line_end:204|char_star:12,char_end:32";
"raise SessionError(),type='raise_statement'\nline_star:204,line_end:204|char_star:12,char_end:32"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:204,line_end:204|char_star:12,char_end:32"->"raise SessionError(),type='raise_statement'\nline_star:204,line_end:204|char_star:12,char_end:32";
"raise,type='raise'\nline_star:204,line_end:204|char_star:12,char_end:17"[shape="box",fillcolor="white",style=filled];
"raise SessionError(),type='raise_statement'\nline_star:204,line_end:204|char_star:12,char_end:32"->"raise,type='raise'\nline_star:204,line_end:204|char_star:12,char_end:17";
"SessionError(),type='call'\nline_star:204,line_end:204|char_star:18,char_end:32"[shape="box",fillcolor="white",style=filled];
"raise SessionError(),type='raise_statement'\nline_star:204,line_end:204|char_star:12,char_end:32"->"SessionError(),type='call'\nline_star:204,line_end:204|char_star:18,char_end:32";
"SessionError,type='identifier'\nline_star:204,line_end:204|char_star:18,char_end:30"[shape="point",fillcolor="#121013",style=filled];
"SessionError(),type='call'\nline_star:204,line_end:204|char_star:18,char_end:32"->"SessionError,type='identifier'\nline_star:204,line_end:204|char_star:18,char_end:30";
"class CustomFlask(flask.Flask):\n        session_interface = FailingSessionInterface(),type='class_definition'\nline_star:206,line_end:207|char_star:4,char_end:53"[shape="box",fillcolor="#ffdf91",style=filled];
"type='INFORMATION BLOCK'\nline_star:199,line_end:219|char_star:4,char_end:32"->"class CustomFlask(flask.Flask):\n        session_interface = FailingSessionInterface(),type='class_definition'\nline_star:206,line_end:207|char_star:4,char_end:53";
"CustomFlask,type='identifier'\nline_star:206,line_end:206|char_star:10,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"class CustomFlask(flask.Flask):\n        session_interface = FailingSessionInterface(),type='class_definition'\nline_star:206,line_end:207|char_star:4,char_end:53"->"CustomFlask,type='identifier'\nline_star:206,line_end:206|char_star:10,char_end:21";
"(flask.Flask),type='argument_list'\nline_star:206,line_end:206|char_star:21,char_end:34"[shape="box",fillcolor="white",style=filled];
"class CustomFlask(flask.Flask):\n        session_interface = FailingSessionInterface(),type='class_definition'\nline_star:206,line_end:207|char_star:4,char_end:53"->"(flask.Flask),type='argument_list'\nline_star:206,line_end:206|char_star:21,char_end:34";
"flask.Flask,type='attribute'\nline_star:206,line_end:206|char_star:22,char_end:33"[shape="box",fillcolor="white",style=filled];
"(flask.Flask),type='argument_list'\nline_star:206,line_end:206|char_star:21,char_end:34"->"flask.Flask,type='attribute'\nline_star:206,line_end:206|char_star:22,char_end:33";
"flask,type='identifier'\nline_star:206,line_end:206|char_star:22,char_end:27"[shape="point",fillcolor="#121013",style=filled];
"flask.Flask,type='attribute'\nline_star:206,line_end:206|char_star:22,char_end:33"->"flask,type='identifier'\nline_star:206,line_end:206|char_star:22,char_end:27";
"Flask,type='identifier'\nline_star:206,line_end:206|char_star:28,char_end:33"[shape="point",fillcolor="#121013",style=filled];
"flask.Flask,type='attribute'\nline_star:206,line_end:206|char_star:22,char_end:33"->"Flask,type='identifier'\nline_star:206,line_end:206|char_star:28,char_end:33";
"type='INFORMATION BLOCK'\nline_star:207,line_end:207|char_star:8,char_end:53"[shape="point",fillcolor="#121013",style=filled];
"class CustomFlask(flask.Flask):\n        session_interface = FailingSessionInterface(),type='class_definition'\nline_star:206,line_end:207|char_star:4,char_end:53"->"type='INFORMATION BLOCK'\nline_star:207,line_end:207|char_star:8,char_end:53";
"@app.route('/')\n    def index():\n        # shouldn't get here\n        AssertionError(),type='decorated_definition'\nline_star:211,line_end:214|char_star:4,char_end:24"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:199,line_end:219|char_star:4,char_end:32"->"@app.route('/')\n    def index():\n        # shouldn't get here\n        AssertionError(),type='decorated_definition'\nline_star:211,line_end:214|char_star:4,char_end:24";
"@app.route('/'),type='decorator'\nline_star:211,line_end:211|char_star:4,char_end:19"[shape="box",fillcolor="white",style=filled];
"@app.route('/')\n    def index():\n        # shouldn't get here\n        AssertionError(),type='decorated_definition'\nline_star:211,line_end:214|char_star:4,char_end:24"->"@app.route('/'),type='decorator'\nline_star:211,line_end:211|char_star:4,char_end:19";
"def index():\n        # shouldn't get here\n        AssertionError(),type='function_definition'\nline_star:212,line_end:214|char_star:4,char_end:24"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.route('/')\n    def index():\n        # shouldn't get here\n        AssertionError(),type='decorated_definition'\nline_star:211,line_end:214|char_star:4,char_end:24"->"def index():\n        # shouldn't get here\n        AssertionError(),type='function_definition'\nline_star:212,line_end:214|char_star:4,char_end:24";
"index,type='identifier'\nline_star:212,line_end:212|char_star:8,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"def index():\n        # shouldn't get here\n        AssertionError(),type='function_definition'\nline_star:212,line_end:214|char_star:4,char_end:24"->"index,type='identifier'\nline_star:212,line_end:212|char_star:8,char_end:13";
"# shouldn't get here,type='comment'\nline_star:213,line_end:213|char_star:8,char_end:28"[shape="box",fillcolor="#f0c929",style=filled];
"def index():\n        # shouldn't get here\n        AssertionError(),type='function_definition'\nline_star:212,line_end:214|char_star:4,char_end:24"->"# shouldn't get here,type='comment'\nline_star:213,line_end:213|char_star:8,char_end:28";
"type='INFORMATION BLOCK'\nline_star:214,line_end:214|char_star:8,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"def index():\n        # shouldn't get here\n        AssertionError(),type='function_definition'\nline_star:212,line_end:214|char_star:4,char_end:24"->"type='INFORMATION BLOCK'\nline_star:214,line_end:214|char_star:8,char_end:24";
"assert response.status_code == 500,type='assert_statement'\nline_star:217,line_end:217|char_star:4,char_end:38"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:199,line_end:219|char_star:4,char_end:32"->"assert response.status_code == 500,type='assert_statement'\nline_star:217,line_end:217|char_star:4,char_end:38";
"response.status_code == 500,type='comparison_operator'\nline_star:217,line_end:217|char_star:11,char_end:38"[shape="box",fillcolor="white",style=filled];
"assert response.status_code == 500,type='assert_statement'\nline_star:217,line_end:217|char_star:4,char_end:38"->"response.status_code == 500,type='comparison_operator'\nline_star:217,line_end:217|char_star:11,char_end:38";
"response.status_code,type='attribute'\nline_star:217,line_end:217|char_star:11,char_end:31"[shape="box",fillcolor="white",style=filled];
"response.status_code == 500,type='comparison_operator'\nline_star:217,line_end:217|char_star:11,char_end:38"->"response.status_code,type='attribute'\nline_star:217,line_end:217|char_star:11,char_end:31";
"response,type='identifier'\nline_star:217,line_end:217|char_star:11,char_end:19"[shape="point",fillcolor="#121013",style=filled];
"response.status_code,type='attribute'\nline_star:217,line_end:217|char_star:11,char_end:31"->"response,type='identifier'\nline_star:217,line_end:217|char_star:11,char_end:19";
"status_code,type='identifier'\nline_star:217,line_end:217|char_star:20,char_end:31"[shape="point",fillcolor="#121013",style=filled];
"response.status_code,type='attribute'\nline_star:217,line_end:217|char_star:11,char_end:31"->"status_code,type='identifier'\nline_star:217,line_end:217|char_star:20,char_end:31";
"assert not flask.request,type='assert_statement'\nline_star:218,line_end:218|char_star:4,char_end:28"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:199,line_end:219|char_star:4,char_end:32"->"assert not flask.request,type='assert_statement'\nline_star:218,line_end:218|char_star:4,char_end:28";
"not flask.request,type='not_operator'\nline_star:218,line_end:218|char_star:11,char_end:28"[shape="box",fillcolor="white",style=filled];
"assert not flask.request,type='assert_statement'\nline_star:218,line_end:218|char_star:4,char_end:28"->"not flask.request,type='not_operator'\nline_star:218,line_end:218|char_star:11,char_end:28";
"flask.request,type='attribute'\nline_star:218,line_end:218|char_star:15,char_end:28"[shape="box",fillcolor="white",style=filled];
"not flask.request,type='not_operator'\nline_star:218,line_end:218|char_star:11,char_end:28"->"flask.request,type='attribute'\nline_star:218,line_end:218|char_star:15,char_end:28";
"flask,type='identifier'\nline_star:218,line_end:218|char_star:15,char_end:20"[shape="point",fillcolor="#121013",style=filled];
"flask.request,type='attribute'\nline_star:218,line_end:218|char_star:15,char_end:28"->"flask,type='identifier'\nline_star:218,line_end:218|char_star:15,char_end:20";
"request,type='identifier'\nline_star:218,line_end:218|char_star:21,char_end:28"[shape="point",fillcolor="#121013",style=filled];
"flask.request,type='attribute'\nline_star:218,line_end:218|char_star:15,char_end:28"->"request,type='identifier'\nline_star:218,line_end:218|char_star:21,char_end:28";
"assert not flask.current_app,type='assert_statement'\nline_star:219,line_end:219|char_star:4,char_end:32"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:199,line_end:219|char_star:4,char_end:32"->"assert not flask.current_app,type='assert_statement'\nline_star:219,line_end:219|char_star:4,char_end:32";
"not flask.current_app,type='not_operator'\nline_star:219,line_end:219|char_star:11,char_end:32"[shape="box",fillcolor="white",style=filled];
"assert not flask.current_app,type='assert_statement'\nline_star:219,line_end:219|char_star:4,char_end:32"->"not flask.current_app,type='not_operator'\nline_star:219,line_end:219|char_star:11,char_end:32";
"flask.current_app,type='attribute'\nline_star:219,line_end:219|char_star:15,char_end:32"[shape="box",fillcolor="white",style=filled];
"not flask.current_app,type='not_operator'\nline_star:219,line_end:219|char_star:11,char_end:32"->"flask.current_app,type='attribute'\nline_star:219,line_end:219|char_star:15,char_end:32";
"flask,type='identifier'\nline_star:219,line_end:219|char_star:15,char_end:20"[shape="point",fillcolor="#121013",style=filled];
"flask.current_app,type='attribute'\nline_star:219,line_end:219|char_star:15,char_end:32"->"flask,type='identifier'\nline_star:219,line_end:219|char_star:15,char_end:20";
"current_app,type='identifier'\nline_star:219,line_end:219|char_star:21,char_end:32"[shape="point",fillcolor="#121013",style=filled];
"flask.current_app,type='attribute'\nline_star:219,line_end:219|char_star:15,char_end:32"->"current_app,type='identifier'\nline_star:219,line_end:219|char_star:21,char_end:32";
"def test_session_dynamic_cookie_name():\n\n    # This session interface will use a cookie with a different name if the\n    # requested url ends with the string 'dynamic_cookie'\n    class PathAwareSessionInterface(SecureCookieSessionInterface):\n        def get_cookie_name(self, app):\n            if flask.request.url.endswith('dynamic_cookie'):\n                return 'dynamic_cookie_name'\n            else:\n                return super().get_cookie_name(app)\n\n    class CustomFlask(flask.Flask):\n        session_interface = PathAwareSessionInterface()\n\n    app = CustomFlask(__name__)\n    app.secret_key = 'secret_key'\n\n    @app.route('/set', methods=['POST'])\n    def set():\n        flask.session['value'] = flask.request.form['value']\n        return 'value set'\n\n    @app.route('/get')\n    def get():\n        v = flask.session.get('value', 'None')\n        return v\n\n    @app.route('/set_dynamic_cookie', methods=['POST'])\n    def set_dynamic_cookie():\n        flask.session['value'] = flask.request.form['value']\n        return 'value set'\n\n    @app.route('/get_dynamic_cookie')\n    def get_dynamic_cookie():\n        v = flask.session.get('value', 'None')\n        return v\n\n    test_client = app.test_client()\n\n    # first set the cookie in both /set urls but each with a different value\n    assert test_client.post('/set', data={'value': '42'}).data == b'value set'\n    assert (\n        test_client.post('/set_dynamic_cookie', data={'value': '616'}).data\n        == b'value set'\n    )\n\n    # now check that the relevant values come back - meaning that different\n    # cookies are being used for the urls that end with 'dynamic cookie'\n    assert test_client.get('/get').data == b'42'\n    assert test_client.get('/get_dynamic_cookie').data == b'616',type='function_definition'\nline_star:222,line_end:271|char_star:0,char_end:64"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_session_dynamic_cookie_name():\n\n    # This session interface will use a cookie with a different name if the\n    # requested url ends with the string 'dynamic_cookie'\n    class PathAwareSessionInterface(SecureCookieSessionInterface):\n        def get_cookie_name(self, app):\n            if flask.request.url.endswith('dynamic_cookie'):\n                return 'dynamic_cookie_name'\n            else:\n                return super().get_cookie_name(app)\n\n    class CustomFlask(flask.Flask):\n        session_interface = PathAwareSessionInterface()\n\n    app = CustomFlask(__name__)\n    app.secret_key = 'secret_key'\n\n    @app.route('/set', methods=['POST'])\n    def set():\n        flask.session['value'] = flask.request.form['value']\n        return 'value set'\n\n    @app.route('/get')\n    def get():\n        v = flask.session.get('value', 'None')\n        return v\n\n    @app.route('/set_dynamic_cookie', methods=['POST'])\n    def set_dynamic_cookie():\n        flask.session['value'] = flask.request.form['value']\n        return 'value set'\n\n    @app.route('/get_dynamic_cookie')\n    def get_dynamic_cookie():\n        v = flask.session.get('value', 'None')\n        return v\n\n    test_client = app.test_client()\n\n    # first set the cookie in both /set urls but each with a different value\n    assert test_client.post('/set', data={'value': '42'}).data == b'value set'\n    assert (\n        test_client.post('/set_dynamic_cookie', data={'value': '616'}).data\n        == b'value set'\n    )\n\n    # now check that the relevant values come back - meaning that different\n    # cookies are being used for the urls that end with 'dynamic cookie'\n    assert test_client.get('/get').data == b'42'\n    assert test_client.get('/get_dynamic_cookie').data == b'616',type='function_definition'\nline_star:222,line_end:271|char_star:0,char_end:64";
"test_session_dynamic_cookie_name,type='identifier'\nline_star:222,line_end:222|char_star:4,char_end:36"[shape="point",fillcolor="#121013",style=filled];
"def test_session_dynamic_cookie_name():\n\n    # This session interface will use a cookie with a different name if the\n    # requested url ends with the string 'dynamic_cookie'\n    class PathAwareSessionInterface(SecureCookieSessionInterface):\n        def get_cookie_name(self, app):\n            if flask.request.url.endswith('dynamic_cookie'):\n                return 'dynamic_cookie_name'\n            else:\n                return super().get_cookie_name(app)\n\n    class CustomFlask(flask.Flask):\n        session_interface = PathAwareSessionInterface()\n\n    app = CustomFlask(__name__)\n    app.secret_key = 'secret_key'\n\n    @app.route('/set', methods=['POST'])\n    def set():\n        flask.session['value'] = flask.request.form['value']\n        return 'value set'\n\n    @app.route('/get')\n    def get():\n        v = flask.session.get('value', 'None')\n        return v\n\n    @app.route('/set_dynamic_cookie', methods=['POST'])\n    def set_dynamic_cookie():\n        flask.session['value'] = flask.request.form['value']\n        return 'value set'\n\n    @app.route('/get_dynamic_cookie')\n    def get_dynamic_cookie():\n        v = flask.session.get('value', 'None')\n        return v\n\n    test_client = app.test_client()\n\n    # first set the cookie in both /set urls but each with a different value\n    assert test_client.post('/set', data={'value': '42'}).data == b'value set'\n    assert (\n        test_client.post('/set_dynamic_cookie', data={'value': '616'}).data\n        == b'value set'\n    )\n\n    # now check that the relevant values come back - meaning that different\n    # cookies are being used for the urls that end with 'dynamic cookie'\n    assert test_client.get('/get').data == b'42'\n    assert test_client.get('/get_dynamic_cookie').data == b'616',type='function_definition'\nline_star:222,line_end:271|char_star:0,char_end:64"->"test_session_dynamic_cookie_name,type='identifier'\nline_star:222,line_end:222|char_star:4,char_end:36";
"# This session interface will use a cookie with a different name if the,type='comment'\nline_star:224,line_end:224|char_star:4,char_end:75"[shape="box",fillcolor="#f0c929",style=filled];
"def test_session_dynamic_cookie_name():\n\n    # This session interface will use a cookie with a different name if the\n    # requested url ends with the string 'dynamic_cookie'\n    class PathAwareSessionInterface(SecureCookieSessionInterface):\n        def get_cookie_name(self, app):\n            if flask.request.url.endswith('dynamic_cookie'):\n                return 'dynamic_cookie_name'\n            else:\n                return super().get_cookie_name(app)\n\n    class CustomFlask(flask.Flask):\n        session_interface = PathAwareSessionInterface()\n\n    app = CustomFlask(__name__)\n    app.secret_key = 'secret_key'\n\n    @app.route('/set', methods=['POST'])\n    def set():\n        flask.session['value'] = flask.request.form['value']\n        return 'value set'\n\n    @app.route('/get')\n    def get():\n        v = flask.session.get('value', 'None')\n        return v\n\n    @app.route('/set_dynamic_cookie', methods=['POST'])\n    def set_dynamic_cookie():\n        flask.session['value'] = flask.request.form['value']\n        return 'value set'\n\n    @app.route('/get_dynamic_cookie')\n    def get_dynamic_cookie():\n        v = flask.session.get('value', 'None')\n        return v\n\n    test_client = app.test_client()\n\n    # first set the cookie in both /set urls but each with a different value\n    assert test_client.post('/set', data={'value': '42'}).data == b'value set'\n    assert (\n        test_client.post('/set_dynamic_cookie', data={'value': '616'}).data\n        == b'value set'\n    )\n\n    # now check that the relevant values come back - meaning that different\n    # cookies are being used for the urls that end with 'dynamic cookie'\n    assert test_client.get('/get').data == b'42'\n    assert test_client.get('/get_dynamic_cookie').data == b'616',type='function_definition'\nline_star:222,line_end:271|char_star:0,char_end:64"->"# This session interface will use a cookie with a different name if the,type='comment'\nline_star:224,line_end:224|char_star:4,char_end:75";
"# requested url ends with the string 'dynamic_cookie',type='comment'\nline_star:225,line_end:225|char_star:4,char_end:57"[shape="box",fillcolor="#f0c929",style=filled];
"def test_session_dynamic_cookie_name():\n\n    # This session interface will use a cookie with a different name if the\n    # requested url ends with the string 'dynamic_cookie'\n    class PathAwareSessionInterface(SecureCookieSessionInterface):\n        def get_cookie_name(self, app):\n            if flask.request.url.endswith('dynamic_cookie'):\n                return 'dynamic_cookie_name'\n            else:\n                return super().get_cookie_name(app)\n\n    class CustomFlask(flask.Flask):\n        session_interface = PathAwareSessionInterface()\n\n    app = CustomFlask(__name__)\n    app.secret_key = 'secret_key'\n\n    @app.route('/set', methods=['POST'])\n    def set():\n        flask.session['value'] = flask.request.form['value']\n        return 'value set'\n\n    @app.route('/get')\n    def get():\n        v = flask.session.get('value', 'None')\n        return v\n\n    @app.route('/set_dynamic_cookie', methods=['POST'])\n    def set_dynamic_cookie():\n        flask.session['value'] = flask.request.form['value']\n        return 'value set'\n\n    @app.route('/get_dynamic_cookie')\n    def get_dynamic_cookie():\n        v = flask.session.get('value', 'None')\n        return v\n\n    test_client = app.test_client()\n\n    # first set the cookie in both /set urls but each with a different value\n    assert test_client.post('/set', data={'value': '42'}).data == b'value set'\n    assert (\n        test_client.post('/set_dynamic_cookie', data={'value': '616'}).data\n        == b'value set'\n    )\n\n    # now check that the relevant values come back - meaning that different\n    # cookies are being used for the urls that end with 'dynamic cookie'\n    assert test_client.get('/get').data == b'42'\n    assert test_client.get('/get_dynamic_cookie').data == b'616',type='function_definition'\nline_star:222,line_end:271|char_star:0,char_end:64"->"# requested url ends with the string 'dynamic_cookie',type='comment'\nline_star:225,line_end:225|char_star:4,char_end:57";
"type='INFORMATION BLOCK'\nline_star:226,line_end:271|char_star:4,char_end:64"[shape="point",fillcolor="#121013",style=filled];
"def test_session_dynamic_cookie_name():\n\n    # This session interface will use a cookie with a different name if the\n    # requested url ends with the string 'dynamic_cookie'\n    class PathAwareSessionInterface(SecureCookieSessionInterface):\n        def get_cookie_name(self, app):\n            if flask.request.url.endswith('dynamic_cookie'):\n                return 'dynamic_cookie_name'\n            else:\n                return super().get_cookie_name(app)\n\n    class CustomFlask(flask.Flask):\n        session_interface = PathAwareSessionInterface()\n\n    app = CustomFlask(__name__)\n    app.secret_key = 'secret_key'\n\n    @app.route('/set', methods=['POST'])\n    def set():\n        flask.session['value'] = flask.request.form['value']\n        return 'value set'\n\n    @app.route('/get')\n    def get():\n        v = flask.session.get('value', 'None')\n        return v\n\n    @app.route('/set_dynamic_cookie', methods=['POST'])\n    def set_dynamic_cookie():\n        flask.session['value'] = flask.request.form['value']\n        return 'value set'\n\n    @app.route('/get_dynamic_cookie')\n    def get_dynamic_cookie():\n        v = flask.session.get('value', 'None')\n        return v\n\n    test_client = app.test_client()\n\n    # first set the cookie in both /set urls but each with a different value\n    assert test_client.post('/set', data={'value': '42'}).data == b'value set'\n    assert (\n        test_client.post('/set_dynamic_cookie', data={'value': '616'}).data\n        == b'value set'\n    )\n\n    # now check that the relevant values come back - meaning that different\n    # cookies are being used for the urls that end with 'dynamic cookie'\n    assert test_client.get('/get').data == b'42'\n    assert test_client.get('/get_dynamic_cookie').data == b'616',type='function_definition'\nline_star:222,line_end:271|char_star:0,char_end:64"->"type='INFORMATION BLOCK'\nline_star:226,line_end:271|char_star:4,char_end:64";
"class PathAwareSessionInterface(SecureCookieSessionInterface):\n        def get_cookie_name(self, app):\n            if flask.request.url.endswith('dynamic_cookie'):\n                return 'dynamic_cookie_name'\n            else:\n                return super().get_cookie_name(app),type='class_definition'\nline_star:226,line_end:231|char_star:4,char_end:51"[shape="box",fillcolor="#ffdf91",style=filled];
"type='INFORMATION BLOCK'\nline_star:226,line_end:271|char_star:4,char_end:64"->"class PathAwareSessionInterface(SecureCookieSessionInterface):\n        def get_cookie_name(self, app):\n            if flask.request.url.endswith('dynamic_cookie'):\n                return 'dynamic_cookie_name'\n            else:\n                return super().get_cookie_name(app),type='class_definition'\nline_star:226,line_end:231|char_star:4,char_end:51";
"PathAwareSessionInterface,type='identifier'\nline_star:226,line_end:226|char_star:10,char_end:35"[shape="point",fillcolor="#121013",style=filled];
"class PathAwareSessionInterface(SecureCookieSessionInterface):\n        def get_cookie_name(self, app):\n            if flask.request.url.endswith('dynamic_cookie'):\n                return 'dynamic_cookie_name'\n            else:\n                return super().get_cookie_name(app),type='class_definition'\nline_star:226,line_end:231|char_star:4,char_end:51"->"PathAwareSessionInterface,type='identifier'\nline_star:226,line_end:226|char_star:10,char_end:35";
"(SecureCookieSessionInterface),type='argument_list'\nline_star:226,line_end:226|char_star:35,char_end:65"[shape="box",fillcolor="white",style=filled];
"class PathAwareSessionInterface(SecureCookieSessionInterface):\n        def get_cookie_name(self, app):\n            if flask.request.url.endswith('dynamic_cookie'):\n                return 'dynamic_cookie_name'\n            else:\n                return super().get_cookie_name(app),type='class_definition'\nline_star:226,line_end:231|char_star:4,char_end:51"->"(SecureCookieSessionInterface),type='argument_list'\nline_star:226,line_end:226|char_star:35,char_end:65";
"SecureCookieSessionInterface,type='identifier'\nline_star:226,line_end:226|char_star:36,char_end:64"[shape="point",fillcolor="#121013",style=filled];
"(SecureCookieSessionInterface),type='argument_list'\nline_star:226,line_end:226|char_star:35,char_end:65"->"SecureCookieSessionInterface,type='identifier'\nline_star:226,line_end:226|char_star:36,char_end:64";
"type='INFORMATION BLOCK'\nline_star:227,line_end:231|char_star:8,char_end:51"[shape="point",fillcolor="#121013",style=filled];
"class PathAwareSessionInterface(SecureCookieSessionInterface):\n        def get_cookie_name(self, app):\n            if flask.request.url.endswith('dynamic_cookie'):\n                return 'dynamic_cookie_name'\n            else:\n                return super().get_cookie_name(app),type='class_definition'\nline_star:226,line_end:231|char_star:4,char_end:51"->"type='INFORMATION BLOCK'\nline_star:227,line_end:231|char_star:8,char_end:51";
"def get_cookie_name(self, app):\n            if flask.request.url.endswith('dynamic_cookie'):\n                return 'dynamic_cookie_name'\n            else:\n                return super().get_cookie_name(app),type='function_definition'\nline_star:227,line_end:231|char_star:8,char_end:51"[shape="box",fillcolor="#cee6b4",style=filled];
"type='INFORMATION BLOCK'\nline_star:227,line_end:231|char_star:8,char_end:51"->"def get_cookie_name(self, app):\n            if flask.request.url.endswith('dynamic_cookie'):\n                return 'dynamic_cookie_name'\n            else:\n                return super().get_cookie_name(app),type='function_definition'\nline_star:227,line_end:231|char_star:8,char_end:51";
"get_cookie_name,type='identifier'\nline_star:227,line_end:227|char_star:12,char_end:27"[shape="point",fillcolor="#121013",style=filled];
"def get_cookie_name(self, app):\n            if flask.request.url.endswith('dynamic_cookie'):\n                return 'dynamic_cookie_name'\n            else:\n                return super().get_cookie_name(app),type='function_definition'\nline_star:227,line_end:231|char_star:8,char_end:51"->"get_cookie_name,type='identifier'\nline_star:227,line_end:227|char_star:12,char_end:27";
"(self, app),type='parameters'\nline_star:227,line_end:227|char_star:27,char_end:38"[shape="box",fillcolor="white",style=filled];
"def get_cookie_name(self, app):\n            if flask.request.url.endswith('dynamic_cookie'):\n                return 'dynamic_cookie_name'\n            else:\n                return super().get_cookie_name(app),type='function_definition'\nline_star:227,line_end:231|char_star:8,char_end:51"->"(self, app),type='parameters'\nline_star:227,line_end:227|char_star:27,char_end:38";
"self,type='identifier'\nline_star:227,line_end:227|char_star:28,char_end:32"[shape="point",fillcolor="#121013",style=filled];
"(self, app),type='parameters'\nline_star:227,line_end:227|char_star:27,char_end:38"->"self,type='identifier'\nline_star:227,line_end:227|char_star:28,char_end:32";
"app,type='identifier'\nline_star:227,line_end:227|char_star:34,char_end:37"[shape="point",fillcolor="#121013",style=filled];
"(self, app),type='parameters'\nline_star:227,line_end:227|char_star:27,char_end:38"->"app,type='identifier'\nline_star:227,line_end:227|char_star:34,char_end:37";
"type='INFORMATION BLOCK'\nline_star:228,line_end:231|char_star:12,char_end:51"[shape="point",fillcolor="#121013",style=filled];
"def get_cookie_name(self, app):\n            if flask.request.url.endswith('dynamic_cookie'):\n                return 'dynamic_cookie_name'\n            else:\n                return super().get_cookie_name(app),type='function_definition'\nline_star:227,line_end:231|char_star:8,char_end:51"->"type='INFORMATION BLOCK'\nline_star:228,line_end:231|char_star:12,char_end:51";
"if flask.request.url.endswith('dynamic_cookie'):\n                return 'dynamic_cookie_name'\n            else:\n                return super().get_cookie_name(app),type='if_statement'\nline_star:228,line_end:231|char_star:12,char_end:51"[shape="box",fillcolor="#9ecca4",style=filled];
"type='INFORMATION BLOCK'\nline_star:228,line_end:231|char_star:12,char_end:51"->"if flask.request.url.endswith('dynamic_cookie'):\n                return 'dynamic_cookie_name'\n            else:\n                return super().get_cookie_name(app),type='if_statement'\nline_star:228,line_end:231|char_star:12,char_end:51";
"class CustomFlask(flask.Flask):\n        session_interface = PathAwareSessionInterface(),type='class_definition'\nline_star:233,line_end:234|char_star:4,char_end:55"[shape="box",fillcolor="#ffdf91",style=filled];
"type='INFORMATION BLOCK'\nline_star:226,line_end:271|char_star:4,char_end:64"->"class CustomFlask(flask.Flask):\n        session_interface = PathAwareSessionInterface(),type='class_definition'\nline_star:233,line_end:234|char_star:4,char_end:55";
"CustomFlask,type='identifier'\nline_star:233,line_end:233|char_star:10,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"class CustomFlask(flask.Flask):\n        session_interface = PathAwareSessionInterface(),type='class_definition'\nline_star:233,line_end:234|char_star:4,char_end:55"->"CustomFlask,type='identifier'\nline_star:233,line_end:233|char_star:10,char_end:21";
"(flask.Flask),type='argument_list'\nline_star:233,line_end:233|char_star:21,char_end:34"[shape="box",fillcolor="white",style=filled];
"class CustomFlask(flask.Flask):\n        session_interface = PathAwareSessionInterface(),type='class_definition'\nline_star:233,line_end:234|char_star:4,char_end:55"->"(flask.Flask),type='argument_list'\nline_star:233,line_end:233|char_star:21,char_end:34";
"flask.Flask,type='attribute'\nline_star:233,line_end:233|char_star:22,char_end:33"[shape="box",fillcolor="white",style=filled];
"(flask.Flask),type='argument_list'\nline_star:233,line_end:233|char_star:21,char_end:34"->"flask.Flask,type='attribute'\nline_star:233,line_end:233|char_star:22,char_end:33";
"flask,type='identifier'\nline_star:233,line_end:233|char_star:22,char_end:27"[shape="point",fillcolor="#121013",style=filled];
"flask.Flask,type='attribute'\nline_star:233,line_end:233|char_star:22,char_end:33"->"flask,type='identifier'\nline_star:233,line_end:233|char_star:22,char_end:27";
"Flask,type='identifier'\nline_star:233,line_end:233|char_star:28,char_end:33"[shape="point",fillcolor="#121013",style=filled];
"flask.Flask,type='attribute'\nline_star:233,line_end:233|char_star:22,char_end:33"->"Flask,type='identifier'\nline_star:233,line_end:233|char_star:28,char_end:33";
"type='INFORMATION BLOCK'\nline_star:234,line_end:234|char_star:8,char_end:55"[shape="point",fillcolor="#121013",style=filled];
"class CustomFlask(flask.Flask):\n        session_interface = PathAwareSessionInterface(),type='class_definition'\nline_star:233,line_end:234|char_star:4,char_end:55"->"type='INFORMATION BLOCK'\nline_star:234,line_end:234|char_star:8,char_end:55";
"@app.route('/set', methods=['POST'])\n    def set():\n        flask.session['value'] = flask.request.form['value']\n        return 'value set',type='decorated_definition'\nline_star:239,line_end:242|char_star:4,char_end:26"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:226,line_end:271|char_star:4,char_end:64"->"@app.route('/set', methods=['POST'])\n    def set():\n        flask.session['value'] = flask.request.form['value']\n        return 'value set',type='decorated_definition'\nline_star:239,line_end:242|char_star:4,char_end:26";
"@app.route('/set', methods=['POST']),type='decorator'\nline_star:239,line_end:239|char_star:4,char_end:40"[shape="box",fillcolor="white",style=filled];
"@app.route('/set', methods=['POST'])\n    def set():\n        flask.session['value'] = flask.request.form['value']\n        return 'value set',type='decorated_definition'\nline_star:239,line_end:242|char_star:4,char_end:26"->"@app.route('/set', methods=['POST']),type='decorator'\nline_star:239,line_end:239|char_star:4,char_end:40";
"def set():\n        flask.session['value'] = flask.request.form['value']\n        return 'value set',type='function_definition'\nline_star:240,line_end:242|char_star:4,char_end:26"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.route('/set', methods=['POST'])\n    def set():\n        flask.session['value'] = flask.request.form['value']\n        return 'value set',type='decorated_definition'\nline_star:239,line_end:242|char_star:4,char_end:26"->"def set():\n        flask.session['value'] = flask.request.form['value']\n        return 'value set',type='function_definition'\nline_star:240,line_end:242|char_star:4,char_end:26";
"set,type='identifier'\nline_star:240,line_end:240|char_star:8,char_end:11"[shape="point",fillcolor="#121013",style=filled];
"def set():\n        flask.session['value'] = flask.request.form['value']\n        return 'value set',type='function_definition'\nline_star:240,line_end:242|char_star:4,char_end:26"->"set,type='identifier'\nline_star:240,line_end:240|char_star:8,char_end:11";
"type='INFORMATION BLOCK'\nline_star:241,line_end:242|char_star:8,char_end:26"[shape="point",fillcolor="#121013",style=filled];
"def set():\n        flask.session['value'] = flask.request.form['value']\n        return 'value set',type='function_definition'\nline_star:240,line_end:242|char_star:4,char_end:26"->"type='INFORMATION BLOCK'\nline_star:241,line_end:242|char_star:8,char_end:26";
"return 'value set',type='return_statement'\nline_star:242,line_end:242|char_star:8,char_end:26"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:241,line_end:242|char_star:8,char_end:26"->"return 'value set',type='return_statement'\nline_star:242,line_end:242|char_star:8,char_end:26";
"@app.route('/get')\n    def get():\n        v = flask.session.get('value', 'None')\n        return v,type='decorated_definition'\nline_star:244,line_end:247|char_star:4,char_end:16"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:226,line_end:271|char_star:4,char_end:64"->"@app.route('/get')\n    def get():\n        v = flask.session.get('value', 'None')\n        return v,type='decorated_definition'\nline_star:244,line_end:247|char_star:4,char_end:16";
"@app.route('/get'),type='decorator'\nline_star:244,line_end:244|char_star:4,char_end:22"[shape="box",fillcolor="white",style=filled];
"@app.route('/get')\n    def get():\n        v = flask.session.get('value', 'None')\n        return v,type='decorated_definition'\nline_star:244,line_end:247|char_star:4,char_end:16"->"@app.route('/get'),type='decorator'\nline_star:244,line_end:244|char_star:4,char_end:22";
"def get():\n        v = flask.session.get('value', 'None')\n        return v,type='function_definition'\nline_star:245,line_end:247|char_star:4,char_end:16"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.route('/get')\n    def get():\n        v = flask.session.get('value', 'None')\n        return v,type='decorated_definition'\nline_star:244,line_end:247|char_star:4,char_end:16"->"def get():\n        v = flask.session.get('value', 'None')\n        return v,type='function_definition'\nline_star:245,line_end:247|char_star:4,char_end:16";
"get,type='identifier'\nline_star:245,line_end:245|char_star:8,char_end:11"[shape="point",fillcolor="#121013",style=filled];
"def get():\n        v = flask.session.get('value', 'None')\n        return v,type='function_definition'\nline_star:245,line_end:247|char_star:4,char_end:16"->"get,type='identifier'\nline_star:245,line_end:245|char_star:8,char_end:11";
"type='INFORMATION BLOCK'\nline_star:246,line_end:247|char_star:8,char_end:16"[shape="point",fillcolor="#121013",style=filled];
"def get():\n        v = flask.session.get('value', 'None')\n        return v,type='function_definition'\nline_star:245,line_end:247|char_star:4,char_end:16"->"type='INFORMATION BLOCK'\nline_star:246,line_end:247|char_star:8,char_end:16";
"return v,type='return_statement'\nline_star:247,line_end:247|char_star:8,char_end:16"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:246,line_end:247|char_star:8,char_end:16"->"return v,type='return_statement'\nline_star:247,line_end:247|char_star:8,char_end:16";
"@app.route('/set_dynamic_cookie', methods=['POST'])\n    def set_dynamic_cookie():\n        flask.session['value'] = flask.request.form['value']\n        return 'value set',type='decorated_definition'\nline_star:249,line_end:252|char_star:4,char_end:26"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:226,line_end:271|char_star:4,char_end:64"->"@app.route('/set_dynamic_cookie', methods=['POST'])\n    def set_dynamic_cookie():\n        flask.session['value'] = flask.request.form['value']\n        return 'value set',type='decorated_definition'\nline_star:249,line_end:252|char_star:4,char_end:26";
"@app.route('/set_dynamic_cookie', methods=['POST']),type='decorator'\nline_star:249,line_end:249|char_star:4,char_end:55"[shape="box",fillcolor="white",style=filled];
"@app.route('/set_dynamic_cookie', methods=['POST'])\n    def set_dynamic_cookie():\n        flask.session['value'] = flask.request.form['value']\n        return 'value set',type='decorated_definition'\nline_star:249,line_end:252|char_star:4,char_end:26"->"@app.route('/set_dynamic_cookie', methods=['POST']),type='decorator'\nline_star:249,line_end:249|char_star:4,char_end:55";
"def set_dynamic_cookie():\n        flask.session['value'] = flask.request.form['value']\n        return 'value set',type='function_definition'\nline_star:250,line_end:252|char_star:4,char_end:26"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.route('/set_dynamic_cookie', methods=['POST'])\n    def set_dynamic_cookie():\n        flask.session['value'] = flask.request.form['value']\n        return 'value set',type='decorated_definition'\nline_star:249,line_end:252|char_star:4,char_end:26"->"def set_dynamic_cookie():\n        flask.session['value'] = flask.request.form['value']\n        return 'value set',type='function_definition'\nline_star:250,line_end:252|char_star:4,char_end:26";
"set_dynamic_cookie,type='identifier'\nline_star:250,line_end:250|char_star:8,char_end:26"[shape="point",fillcolor="#121013",style=filled];
"def set_dynamic_cookie():\n        flask.session['value'] = flask.request.form['value']\n        return 'value set',type='function_definition'\nline_star:250,line_end:252|char_star:4,char_end:26"->"set_dynamic_cookie,type='identifier'\nline_star:250,line_end:250|char_star:8,char_end:26";
"type='INFORMATION BLOCK'\nline_star:251,line_end:252|char_star:8,char_end:26"[shape="point",fillcolor="#121013",style=filled];
"def set_dynamic_cookie():\n        flask.session['value'] = flask.request.form['value']\n        return 'value set',type='function_definition'\nline_star:250,line_end:252|char_star:4,char_end:26"->"type='INFORMATION BLOCK'\nline_star:251,line_end:252|char_star:8,char_end:26";
"return 'value set',type='return_statement'\nline_star:252,line_end:252|char_star:8,char_end:26"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:251,line_end:252|char_star:8,char_end:26"->"return 'value set',type='return_statement'\nline_star:252,line_end:252|char_star:8,char_end:26";
"@app.route('/get_dynamic_cookie')\n    def get_dynamic_cookie():\n        v = flask.session.get('value', 'None')\n        return v,type='decorated_definition'\nline_star:254,line_end:257|char_star:4,char_end:16"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:226,line_end:271|char_star:4,char_end:64"->"@app.route('/get_dynamic_cookie')\n    def get_dynamic_cookie():\n        v = flask.session.get('value', 'None')\n        return v,type='decorated_definition'\nline_star:254,line_end:257|char_star:4,char_end:16";
"@app.route('/get_dynamic_cookie'),type='decorator'\nline_star:254,line_end:254|char_star:4,char_end:37"[shape="box",fillcolor="white",style=filled];
"@app.route('/get_dynamic_cookie')\n    def get_dynamic_cookie():\n        v = flask.session.get('value', 'None')\n        return v,type='decorated_definition'\nline_star:254,line_end:257|char_star:4,char_end:16"->"@app.route('/get_dynamic_cookie'),type='decorator'\nline_star:254,line_end:254|char_star:4,char_end:37";
"def get_dynamic_cookie():\n        v = flask.session.get('value', 'None')\n        return v,type='function_definition'\nline_star:255,line_end:257|char_star:4,char_end:16"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.route('/get_dynamic_cookie')\n    def get_dynamic_cookie():\n        v = flask.session.get('value', 'None')\n        return v,type='decorated_definition'\nline_star:254,line_end:257|char_star:4,char_end:16"->"def get_dynamic_cookie():\n        v = flask.session.get('value', 'None')\n        return v,type='function_definition'\nline_star:255,line_end:257|char_star:4,char_end:16";
"get_dynamic_cookie,type='identifier'\nline_star:255,line_end:255|char_star:8,char_end:26"[shape="point",fillcolor="#121013",style=filled];
"def get_dynamic_cookie():\n        v = flask.session.get('value', 'None')\n        return v,type='function_definition'\nline_star:255,line_end:257|char_star:4,char_end:16"->"get_dynamic_cookie,type='identifier'\nline_star:255,line_end:255|char_star:8,char_end:26";
"type='INFORMATION BLOCK'\nline_star:256,line_end:257|char_star:8,char_end:16"[shape="point",fillcolor="#121013",style=filled];
"def get_dynamic_cookie():\n        v = flask.session.get('value', 'None')\n        return v,type='function_definition'\nline_star:255,line_end:257|char_star:4,char_end:16"->"type='INFORMATION BLOCK'\nline_star:256,line_end:257|char_star:8,char_end:16";
"return v,type='return_statement'\nline_star:257,line_end:257|char_star:8,char_end:16"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:256,line_end:257|char_star:8,char_end:16"->"return v,type='return_statement'\nline_star:257,line_end:257|char_star:8,char_end:16";
"# first set the cookie in both /set urls but each with a different value,type='comment'\nline_star:261,line_end:261|char_star:4,char_end:76"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:226,line_end:271|char_star:4,char_end:64"->"# first set the cookie in both /set urls but each with a different value,type='comment'\nline_star:261,line_end:261|char_star:4,char_end:76";
"assert test_client.post('/set', data={'value': '42'}).data == b'value set',type='assert_statement'\nline_star:262,line_end:262|char_star:4,char_end:78"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:226,line_end:271|char_star:4,char_end:64"->"assert test_client.post('/set', data={'value': '42'}).data == b'value set',type='assert_statement'\nline_star:262,line_end:262|char_star:4,char_end:78";
"test_client.post('/set', data={'value': '42'}).data == b'value set',type='comparison_operator'\nline_star:262,line_end:262|char_star:11,char_end:78"[shape="box",fillcolor="white",style=filled];
"assert test_client.post('/set', data={'value': '42'}).data == b'value set',type='assert_statement'\nline_star:262,line_end:262|char_star:4,char_end:78"->"test_client.post('/set', data={'value': '42'}).data == b'value set',type='comparison_operator'\nline_star:262,line_end:262|char_star:11,char_end:78";
"test_client.post('/set', data={'value': '42'}).data,type='attribute'\nline_star:262,line_end:262|char_star:11,char_end:62"[shape="box",fillcolor="white",style=filled];
"test_client.post('/set', data={'value': '42'}).data == b'value set',type='comparison_operator'\nline_star:262,line_end:262|char_star:11,char_end:78"->"test_client.post('/set', data={'value': '42'}).data,type='attribute'\nline_star:262,line_end:262|char_star:11,char_end:62";
"test_client.post('/set', data={'value': '42'}),type='call'\nline_star:262,line_end:262|char_star:11,char_end:57"[shape="box",fillcolor="white",style=filled];
"test_client.post('/set', data={'value': '42'}).data,type='attribute'\nline_star:262,line_end:262|char_star:11,char_end:62"->"test_client.post('/set', data={'value': '42'}),type='call'\nline_star:262,line_end:262|char_star:11,char_end:57";
"test_client.post,type='attribute'\nline_star:262,line_end:262|char_star:11,char_end:27"[shape="box",fillcolor="white",style=filled];
"test_client.post('/set', data={'value': '42'}),type='call'\nline_star:262,line_end:262|char_star:11,char_end:57"->"test_client.post,type='attribute'\nline_star:262,line_end:262|char_star:11,char_end:27";
"test_client,type='identifier'\nline_star:262,line_end:262|char_star:11,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"test_client.post,type='attribute'\nline_star:262,line_end:262|char_star:11,char_end:27"->"test_client,type='identifier'\nline_star:262,line_end:262|char_star:11,char_end:22";
"post,type='identifier'\nline_star:262,line_end:262|char_star:23,char_end:27"[shape="point",fillcolor="#121013",style=filled];
"test_client.post,type='attribute'\nline_star:262,line_end:262|char_star:11,char_end:27"->"post,type='identifier'\nline_star:262,line_end:262|char_star:23,char_end:27";
"('/set', data={'value': '42'}),type='argument_list'\nline_star:262,line_end:262|char_star:27,char_end:57"[shape="box",fillcolor="white",style=filled];
"test_client.post('/set', data={'value': '42'}),type='call'\nline_star:262,line_end:262|char_star:11,char_end:57"->"('/set', data={'value': '42'}),type='argument_list'\nline_star:262,line_end:262|char_star:27,char_end:57";
"data={'value': '42'},type='keyword_argument'\nline_star:262,line_end:262|char_star:36,char_end:56"[shape="box",fillcolor="white",style=filled];
"('/set', data={'value': '42'}),type='argument_list'\nline_star:262,line_end:262|char_star:27,char_end:57"->"data={'value': '42'},type='keyword_argument'\nline_star:262,line_end:262|char_star:36,char_end:56";
"data,type='identifier'\nline_star:262,line_end:262|char_star:36,char_end:40"[shape="point",fillcolor="#121013",style=filled];
"data={'value': '42'},type='keyword_argument'\nline_star:262,line_end:262|char_star:36,char_end:56"->"data,type='identifier'\nline_star:262,line_end:262|char_star:36,char_end:40";
"{'value': '42'},type='dictionary'\nline_star:262,line_end:262|char_star:41,char_end:56"[shape="box",fillcolor="white",style=filled];
"data={'value': '42'},type='keyword_argument'\nline_star:262,line_end:262|char_star:36,char_end:56"->"{'value': '42'},type='dictionary'\nline_star:262,line_end:262|char_star:41,char_end:56";
"{,type='{'\nline_star:262,line_end:262|char_star:41,char_end:42"[shape="box",fillcolor="white",style=filled];
"{'value': '42'},type='dictionary'\nline_star:262,line_end:262|char_star:41,char_end:56"->"{,type='{'\nline_star:262,line_end:262|char_star:41,char_end:42";
"'value': '42',type='pair'\nline_star:262,line_end:262|char_star:42,char_end:55"[shape="box",fillcolor="white",style=filled];
"{'value': '42'},type='dictionary'\nline_star:262,line_end:262|char_star:41,char_end:56"->"'value': '42',type='pair'\nline_star:262,line_end:262|char_star:42,char_end:55";
"},type='}'\nline_star:262,line_end:262|char_star:55,char_end:56"[shape="box",fillcolor="white",style=filled];
"{'value': '42'},type='dictionary'\nline_star:262,line_end:262|char_star:41,char_end:56"->"},type='}'\nline_star:262,line_end:262|char_star:55,char_end:56";
"data,type='identifier'\nline_star:262,line_end:262|char_star:58,char_end:62"[shape="point",fillcolor="#121013",style=filled];
"test_client.post('/set', data={'value': '42'}).data,type='attribute'\nline_star:262,line_end:262|char_star:11,char_end:62"->"data,type='identifier'\nline_star:262,line_end:262|char_star:58,char_end:62";
"assert (\n        test_client.post('/set_dynamic_cookie', data={'value': '616'}).data\n        == b'value set'\n    ),type='assert_statement'\nline_star:263,line_end:266|char_star:4,char_end:5"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:226,line_end:271|char_star:4,char_end:64"->"assert (\n        test_client.post('/set_dynamic_cookie', data={'value': '616'}).data\n        == b'value set'\n    ),type='assert_statement'\nline_star:263,line_end:266|char_star:4,char_end:5";
"(\n        test_client.post('/set_dynamic_cookie', data={'value': '616'}).data\n        == b'value set'\n    ),type='parenthesized_expression'\nline_star:263,line_end:266|char_star:11,char_end:5"[shape="box",fillcolor="white",style=filled];
"assert (\n        test_client.post('/set_dynamic_cookie', data={'value': '616'}).data\n        == b'value set'\n    ),type='assert_statement'\nline_star:263,line_end:266|char_star:4,char_end:5"->"(\n        test_client.post('/set_dynamic_cookie', data={'value': '616'}).data\n        == b'value set'\n    ),type='parenthesized_expression'\nline_star:263,line_end:266|char_star:11,char_end:5";
"test_client.post('/set_dynamic_cookie', data={'value': '616'}).data\n        == b'value set',type='comparison_operator'\nline_star:264,line_end:265|char_star:8,char_end:23"[shape="box",fillcolor="white",style=filled];
"(\n        test_client.post('/set_dynamic_cookie', data={'value': '616'}).data\n        == b'value set'\n    ),type='parenthesized_expression'\nline_star:263,line_end:266|char_star:11,char_end:5"->"test_client.post('/set_dynamic_cookie', data={'value': '616'}).data\n        == b'value set',type='comparison_operator'\nline_star:264,line_end:265|char_star:8,char_end:23";
"test_client.post('/set_dynamic_cookie', data={'value': '616'}).data,type='attribute'\nline_star:264,line_end:264|char_star:8,char_end:75"[shape="box",fillcolor="white",style=filled];
"test_client.post('/set_dynamic_cookie', data={'value': '616'}).data\n        == b'value set',type='comparison_operator'\nline_star:264,line_end:265|char_star:8,char_end:23"->"test_client.post('/set_dynamic_cookie', data={'value': '616'}).data,type='attribute'\nline_star:264,line_end:264|char_star:8,char_end:75";
"test_client.post('/set_dynamic_cookie', data={'value': '616'}),type='call'\nline_star:264,line_end:264|char_star:8,char_end:70"[shape="box",fillcolor="white",style=filled];
"test_client.post('/set_dynamic_cookie', data={'value': '616'}).data,type='attribute'\nline_star:264,line_end:264|char_star:8,char_end:75"->"test_client.post('/set_dynamic_cookie', data={'value': '616'}),type='call'\nline_star:264,line_end:264|char_star:8,char_end:70";
"test_client.post,type='attribute'\nline_star:264,line_end:264|char_star:8,char_end:24"[shape="box",fillcolor="white",style=filled];
"test_client.post('/set_dynamic_cookie', data={'value': '616'}),type='call'\nline_star:264,line_end:264|char_star:8,char_end:70"->"test_client.post,type='attribute'\nline_star:264,line_end:264|char_star:8,char_end:24";
"test_client,type='identifier'\nline_star:264,line_end:264|char_star:8,char_end:19"[shape="point",fillcolor="#121013",style=filled];
"test_client.post,type='attribute'\nline_star:264,line_end:264|char_star:8,char_end:24"->"test_client,type='identifier'\nline_star:264,line_end:264|char_star:8,char_end:19";
"post,type='identifier'\nline_star:264,line_end:264|char_star:20,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"test_client.post,type='attribute'\nline_star:264,line_end:264|char_star:8,char_end:24"->"post,type='identifier'\nline_star:264,line_end:264|char_star:20,char_end:24";
"('/set_dynamic_cookie', data={'value': '616'}),type='argument_list'\nline_star:264,line_end:264|char_star:24,char_end:70"[shape="box",fillcolor="white",style=filled];
"test_client.post('/set_dynamic_cookie', data={'value': '616'}),type='call'\nline_star:264,line_end:264|char_star:8,char_end:70"->"('/set_dynamic_cookie', data={'value': '616'}),type='argument_list'\nline_star:264,line_end:264|char_star:24,char_end:70";
"data={'value': '616'},type='keyword_argument'\nline_star:264,line_end:264|char_star:48,char_end:69"[shape="box",fillcolor="white",style=filled];
"('/set_dynamic_cookie', data={'value': '616'}),type='argument_list'\nline_star:264,line_end:264|char_star:24,char_end:70"->"data={'value': '616'},type='keyword_argument'\nline_star:264,line_end:264|char_star:48,char_end:69";
"data,type='identifier'\nline_star:264,line_end:264|char_star:48,char_end:52"[shape="point",fillcolor="#121013",style=filled];
"data={'value': '616'},type='keyword_argument'\nline_star:264,line_end:264|char_star:48,char_end:69"->"data,type='identifier'\nline_star:264,line_end:264|char_star:48,char_end:52";
"{'value': '616'},type='dictionary'\nline_star:264,line_end:264|char_star:53,char_end:69"[shape="box",fillcolor="white",style=filled];
"data={'value': '616'},type='keyword_argument'\nline_star:264,line_end:264|char_star:48,char_end:69"->"{'value': '616'},type='dictionary'\nline_star:264,line_end:264|char_star:53,char_end:69";
"{,type='{'\nline_star:264,line_end:264|char_star:53,char_end:54"[shape="box",fillcolor="white",style=filled];
"{'value': '616'},type='dictionary'\nline_star:264,line_end:264|char_star:53,char_end:69"->"{,type='{'\nline_star:264,line_end:264|char_star:53,char_end:54";
"'value': '616',type='pair'\nline_star:264,line_end:264|char_star:54,char_end:68"[shape="box",fillcolor="white",style=filled];
"{'value': '616'},type='dictionary'\nline_star:264,line_end:264|char_star:53,char_end:69"->"'value': '616',type='pair'\nline_star:264,line_end:264|char_star:54,char_end:68";
"},type='}'\nline_star:264,line_end:264|char_star:68,char_end:69"[shape="box",fillcolor="white",style=filled];
"{'value': '616'},type='dictionary'\nline_star:264,line_end:264|char_star:53,char_end:69"->"},type='}'\nline_star:264,line_end:264|char_star:68,char_end:69";
"data,type='identifier'\nline_star:264,line_end:264|char_star:71,char_end:75"[shape="point",fillcolor="#121013",style=filled];
"test_client.post('/set_dynamic_cookie', data={'value': '616'}).data,type='attribute'\nline_star:264,line_end:264|char_star:8,char_end:75"->"data,type='identifier'\nline_star:264,line_end:264|char_star:71,char_end:75";
"# now check that the relevant values come back - meaning that different,type='comment'\nline_star:268,line_end:268|char_star:4,char_end:75"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:226,line_end:271|char_star:4,char_end:64"->"# now check that the relevant values come back - meaning that different,type='comment'\nline_star:268,line_end:268|char_star:4,char_end:75";
"# cookies are being used for the urls that end with 'dynamic cookie',type='comment'\nline_star:269,line_end:269|char_star:4,char_end:72"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:226,line_end:271|char_star:4,char_end:64"->"# cookies are being used for the urls that end with 'dynamic cookie',type='comment'\nline_star:269,line_end:269|char_star:4,char_end:72";
"assert test_client.get('/get').data == b'42',type='assert_statement'\nline_star:270,line_end:270|char_star:4,char_end:48"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:226,line_end:271|char_star:4,char_end:64"->"assert test_client.get('/get').data == b'42',type='assert_statement'\nline_star:270,line_end:270|char_star:4,char_end:48";
"test_client.get('/get').data == b'42',type='comparison_operator'\nline_star:270,line_end:270|char_star:11,char_end:48"[shape="box",fillcolor="white",style=filled];
"assert test_client.get('/get').data == b'42',type='assert_statement'\nline_star:270,line_end:270|char_star:4,char_end:48"->"test_client.get('/get').data == b'42',type='comparison_operator'\nline_star:270,line_end:270|char_star:11,char_end:48";
"test_client.get('/get').data,type='attribute'\nline_star:270,line_end:270|char_star:11,char_end:39"[shape="box",fillcolor="white",style=filled];
"test_client.get('/get').data == b'42',type='comparison_operator'\nline_star:270,line_end:270|char_star:11,char_end:48"->"test_client.get('/get').data,type='attribute'\nline_star:270,line_end:270|char_star:11,char_end:39";
"test_client.get('/get'),type='call'\nline_star:270,line_end:270|char_star:11,char_end:34"[shape="box",fillcolor="white",style=filled];
"test_client.get('/get').data,type='attribute'\nline_star:270,line_end:270|char_star:11,char_end:39"->"test_client.get('/get'),type='call'\nline_star:270,line_end:270|char_star:11,char_end:34";
"test_client.get,type='attribute'\nline_star:270,line_end:270|char_star:11,char_end:26"[shape="box",fillcolor="white",style=filled];
"test_client.get('/get'),type='call'\nline_star:270,line_end:270|char_star:11,char_end:34"->"test_client.get,type='attribute'\nline_star:270,line_end:270|char_star:11,char_end:26";
"test_client,type='identifier'\nline_star:270,line_end:270|char_star:11,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"test_client.get,type='attribute'\nline_star:270,line_end:270|char_star:11,char_end:26"->"test_client,type='identifier'\nline_star:270,line_end:270|char_star:11,char_end:22";
"get,type='identifier'\nline_star:270,line_end:270|char_star:23,char_end:26"[shape="point",fillcolor="#121013",style=filled];
"test_client.get,type='attribute'\nline_star:270,line_end:270|char_star:11,char_end:26"->"get,type='identifier'\nline_star:270,line_end:270|char_star:23,char_end:26";
"('/get'),type='argument_list'\nline_star:270,line_end:270|char_star:26,char_end:34"[shape="box",fillcolor="white",style=filled];
"test_client.get('/get'),type='call'\nline_star:270,line_end:270|char_star:11,char_end:34"->"('/get'),type='argument_list'\nline_star:270,line_end:270|char_star:26,char_end:34";
"data,type='identifier'\nline_star:270,line_end:270|char_star:35,char_end:39"[shape="point",fillcolor="#121013",style=filled];
"test_client.get('/get').data,type='attribute'\nline_star:270,line_end:270|char_star:11,char_end:39"->"data,type='identifier'\nline_star:270,line_end:270|char_star:35,char_end:39";
"assert test_client.get('/get_dynamic_cookie').data == b'616',type='assert_statement'\nline_star:271,line_end:271|char_star:4,char_end:64"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:226,line_end:271|char_star:4,char_end:64"->"assert test_client.get('/get_dynamic_cookie').data == b'616',type='assert_statement'\nline_star:271,line_end:271|char_star:4,char_end:64";
"test_client.get('/get_dynamic_cookie').data == b'616',type='comparison_operator'\nline_star:271,line_end:271|char_star:11,char_end:64"[shape="box",fillcolor="white",style=filled];
"assert test_client.get('/get_dynamic_cookie').data == b'616',type='assert_statement'\nline_star:271,line_end:271|char_star:4,char_end:64"->"test_client.get('/get_dynamic_cookie').data == b'616',type='comparison_operator'\nline_star:271,line_end:271|char_star:11,char_end:64";
"test_client.get('/get_dynamic_cookie').data,type='attribute'\nline_star:271,line_end:271|char_star:11,char_end:54"[shape="box",fillcolor="white",style=filled];
"test_client.get('/get_dynamic_cookie').data == b'616',type='comparison_operator'\nline_star:271,line_end:271|char_star:11,char_end:64"->"test_client.get('/get_dynamic_cookie').data,type='attribute'\nline_star:271,line_end:271|char_star:11,char_end:54";
"test_client.get('/get_dynamic_cookie'),type='call'\nline_star:271,line_end:271|char_star:11,char_end:49"[shape="box",fillcolor="white",style=filled];
"test_client.get('/get_dynamic_cookie').data,type='attribute'\nline_star:271,line_end:271|char_star:11,char_end:54"->"test_client.get('/get_dynamic_cookie'),type='call'\nline_star:271,line_end:271|char_star:11,char_end:49";
"test_client.get,type='attribute'\nline_star:271,line_end:271|char_star:11,char_end:26"[shape="box",fillcolor="white",style=filled];
"test_client.get('/get_dynamic_cookie'),type='call'\nline_star:271,line_end:271|char_star:11,char_end:49"->"test_client.get,type='attribute'\nline_star:271,line_end:271|char_star:11,char_end:26";
"test_client,type='identifier'\nline_star:271,line_end:271|char_star:11,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"test_client.get,type='attribute'\nline_star:271,line_end:271|char_star:11,char_end:26"->"test_client,type='identifier'\nline_star:271,line_end:271|char_star:11,char_end:22";
"get,type='identifier'\nline_star:271,line_end:271|char_star:23,char_end:26"[shape="point",fillcolor="#121013",style=filled];
"test_client.get,type='attribute'\nline_star:271,line_end:271|char_star:11,char_end:26"->"get,type='identifier'\nline_star:271,line_end:271|char_star:23,char_end:26";
"('/get_dynamic_cookie'),type='argument_list'\nline_star:271,line_end:271|char_star:26,char_end:49"[shape="box",fillcolor="white",style=filled];
"test_client.get('/get_dynamic_cookie'),type='call'\nline_star:271,line_end:271|char_star:11,char_end:49"->"('/get_dynamic_cookie'),type='argument_list'\nline_star:271,line_end:271|char_star:26,char_end:49";
"data,type='identifier'\nline_star:271,line_end:271|char_star:50,char_end:54"[shape="point",fillcolor="#121013",style=filled];
"test_client.get('/get_dynamic_cookie').data,type='attribute'\nline_star:271,line_end:271|char_star:11,char_end:54"->"data,type='identifier'\nline_star:271,line_end:271|char_star:50,char_end:54";
"def test_bad_environ_raises_bad_request():\n    app = flask.Flask(__name__)\n\n    from flask.testing import EnvironBuilder\n\n    builder = EnvironBuilder(app)\n    environ = builder.get_environ()\n\n    # use a non-printable character in the Host - this is key to this test\n    environ['HTTP_HOST'] = '\x8a'\n\n    with app.request_context(environ):\n        response = app.full_dispatch_request()\n    assert response.status_code == 400,type='function_definition'\nline_star:274,line_end:287|char_star:0,char_end:38"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_bad_environ_raises_bad_request():\n    app = flask.Flask(__name__)\n\n    from flask.testing import EnvironBuilder\n\n    builder = EnvironBuilder(app)\n    environ = builder.get_environ()\n\n    # use a non-printable character in the Host - this is key to this test\n    environ['HTTP_HOST'] = '\x8a'\n\n    with app.request_context(environ):\n        response = app.full_dispatch_request()\n    assert response.status_code == 400,type='function_definition'\nline_star:274,line_end:287|char_star:0,char_end:38";
"test_bad_environ_raises_bad_request,type='identifier'\nline_star:274,line_end:274|char_star:4,char_end:39"[shape="point",fillcolor="#121013",style=filled];
"def test_bad_environ_raises_bad_request():\n    app = flask.Flask(__name__)\n\n    from flask.testing import EnvironBuilder\n\n    builder = EnvironBuilder(app)\n    environ = builder.get_environ()\n\n    # use a non-printable character in the Host - this is key to this test\n    environ['HTTP_HOST'] = '\x8a'\n\n    with app.request_context(environ):\n        response = app.full_dispatch_request()\n    assert response.status_code == 400,type='function_definition'\nline_star:274,line_end:287|char_star:0,char_end:38"->"test_bad_environ_raises_bad_request,type='identifier'\nline_star:274,line_end:274|char_star:4,char_end:39";
"type='INFORMATION BLOCK'\nline_star:275,line_end:287|char_star:4,char_end:38"[shape="point",fillcolor="#121013",style=filled];
"def test_bad_environ_raises_bad_request():\n    app = flask.Flask(__name__)\n\n    from flask.testing import EnvironBuilder\n\n    builder = EnvironBuilder(app)\n    environ = builder.get_environ()\n\n    # use a non-printable character in the Host - this is key to this test\n    environ['HTTP_HOST'] = '\x8a'\n\n    with app.request_context(environ):\n        response = app.full_dispatch_request()\n    assert response.status_code == 400,type='function_definition'\nline_star:274,line_end:287|char_star:0,char_end:38"->"type='INFORMATION BLOCK'\nline_star:275,line_end:287|char_star:4,char_end:38";
"from flask.testing import EnvironBuilder,type='import_from_statement'\nline_star:277,line_end:277|char_star:4,char_end:44"[shape="box",fillcolor="#f48b29",style=filled];
"type='INFORMATION BLOCK'\nline_star:275,line_end:287|char_star:4,char_end:38"->"from flask.testing import EnvironBuilder,type='import_from_statement'\nline_star:277,line_end:277|char_star:4,char_end:44";
"# use a non-printable character in the Host - this is key to this test,type='comment'\nline_star:282,line_end:282|char_star:4,char_end:74"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:275,line_end:287|char_star:4,char_end:38"->"# use a non-printable character in the Host - this is key to this test,type='comment'\nline_star:282,line_end:282|char_star:4,char_end:74";
"with app.request_context(environ):\n        response = app.full_dispatch_request(),type='with_statement'\nline_star:285,line_end:286|char_star:4,char_end:46"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:275,line_end:287|char_star:4,char_end:38"->"with app.request_context(environ):\n        response = app.full_dispatch_request(),type='with_statement'\nline_star:285,line_end:286|char_star:4,char_end:46";
"app.request_context(environ),type='with_clause'\nline_star:285,line_end:285|char_star:9,char_end:37"[shape="box",fillcolor="white",style=filled];
"with app.request_context(environ):\n        response = app.full_dispatch_request(),type='with_statement'\nline_star:285,line_end:286|char_star:4,char_end:46"->"app.request_context(environ),type='with_clause'\nline_star:285,line_end:285|char_star:9,char_end:37";
"type='INFORMATION BLOCK'\nline_star:286,line_end:286|char_star:8,char_end:46"[shape="point",fillcolor="#121013",style=filled];
"with app.request_context(environ):\n        response = app.full_dispatch_request(),type='with_statement'\nline_star:285,line_end:286|char_star:4,char_end:46"->"type='INFORMATION BLOCK'\nline_star:286,line_end:286|char_star:8,char_end:46";
"assert response.status_code == 400,type='assert_statement'\nline_star:287,line_end:287|char_star:4,char_end:38"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:275,line_end:287|char_star:4,char_end:38"->"assert response.status_code == 400,type='assert_statement'\nline_star:287,line_end:287|char_star:4,char_end:38";
"response.status_code == 400,type='comparison_operator'\nline_star:287,line_end:287|char_star:11,char_end:38"[shape="box",fillcolor="white",style=filled];
"assert response.status_code == 400,type='assert_statement'\nline_star:287,line_end:287|char_star:4,char_end:38"->"response.status_code == 400,type='comparison_operator'\nline_star:287,line_end:287|char_star:11,char_end:38";
"response.status_code,type='attribute'\nline_star:287,line_end:287|char_star:11,char_end:31"[shape="box",fillcolor="white",style=filled];
"response.status_code == 400,type='comparison_operator'\nline_star:287,line_end:287|char_star:11,char_end:38"->"response.status_code,type='attribute'\nline_star:287,line_end:287|char_star:11,char_end:31";
"response,type='identifier'\nline_star:287,line_end:287|char_star:11,char_end:19"[shape="point",fillcolor="#121013",style=filled];
"response.status_code,type='attribute'\nline_star:287,line_end:287|char_star:11,char_end:31"->"response,type='identifier'\nline_star:287,line_end:287|char_star:11,char_end:19";
"status_code,type='identifier'\nline_star:287,line_end:287|char_star:20,char_end:31"[shape="point",fillcolor="#121013",style=filled];
"response.status_code,type='attribute'\nline_star:287,line_end:287|char_star:11,char_end:31"->"status_code,type='identifier'\nline_star:287,line_end:287|char_star:20,char_end:31";
"def test_environ_for_valid_idna_completes():\n    app = flask.Flask(__name__)\n\n    @app.route('/')\n    def index():\n        return 'Hello World!'\n\n    from flask.testing import EnvironBuilder\n\n    builder = EnvironBuilder(app)\n    environ = builder.get_environ()\n\n    # these characters are all IDNA-compatible\n    environ['HTTP_HOST'] = 'ąśźäüжŠßя.com'\n\n    with app.request_context(environ):\n        response = app.full_dispatch_request()\n\n    assert response.status_code == 200,type='function_definition'\nline_star:290,line_end:308|char_star:0,char_end:38"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_environ_for_valid_idna_completes():\n    app = flask.Flask(__name__)\n\n    @app.route('/')\n    def index():\n        return 'Hello World!'\n\n    from flask.testing import EnvironBuilder\n\n    builder = EnvironBuilder(app)\n    environ = builder.get_environ()\n\n    # these characters are all IDNA-compatible\n    environ['HTTP_HOST'] = 'ąśźäüжŠßя.com'\n\n    with app.request_context(environ):\n        response = app.full_dispatch_request()\n\n    assert response.status_code == 200,type='function_definition'\nline_star:290,line_end:308|char_star:0,char_end:38";
"test_environ_for_valid_idna_completes,type='identifier'\nline_star:290,line_end:290|char_star:4,char_end:41"[shape="point",fillcolor="#121013",style=filled];
"def test_environ_for_valid_idna_completes():\n    app = flask.Flask(__name__)\n\n    @app.route('/')\n    def index():\n        return 'Hello World!'\n\n    from flask.testing import EnvironBuilder\n\n    builder = EnvironBuilder(app)\n    environ = builder.get_environ()\n\n    # these characters are all IDNA-compatible\n    environ['HTTP_HOST'] = 'ąśźäüжŠßя.com'\n\n    with app.request_context(environ):\n        response = app.full_dispatch_request()\n\n    assert response.status_code == 200,type='function_definition'\nline_star:290,line_end:308|char_star:0,char_end:38"->"test_environ_for_valid_idna_completes,type='identifier'\nline_star:290,line_end:290|char_star:4,char_end:41";
"type='INFORMATION BLOCK'\nline_star:291,line_end:308|char_star:4,char_end:38"[shape="point",fillcolor="#121013",style=filled];
"def test_environ_for_valid_idna_completes():\n    app = flask.Flask(__name__)\n\n    @app.route('/')\n    def index():\n        return 'Hello World!'\n\n    from flask.testing import EnvironBuilder\n\n    builder = EnvironBuilder(app)\n    environ = builder.get_environ()\n\n    # these characters are all IDNA-compatible\n    environ['HTTP_HOST'] = 'ąśźäüжŠßя.com'\n\n    with app.request_context(environ):\n        response = app.full_dispatch_request()\n\n    assert response.status_code == 200,type='function_definition'\nline_star:290,line_end:308|char_star:0,char_end:38"->"type='INFORMATION BLOCK'\nline_star:291,line_end:308|char_star:4,char_end:38";
"@app.route('/')\n    def index():\n        return 'Hello World!',type='decorated_definition'\nline_star:293,line_end:295|char_star:4,char_end:29"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:291,line_end:308|char_star:4,char_end:38"->"@app.route('/')\n    def index():\n        return 'Hello World!',type='decorated_definition'\nline_star:293,line_end:295|char_star:4,char_end:29";
"@app.route('/'),type='decorator'\nline_star:293,line_end:293|char_star:4,char_end:19"[shape="box",fillcolor="white",style=filled];
"@app.route('/')\n    def index():\n        return 'Hello World!',type='decorated_definition'\nline_star:293,line_end:295|char_star:4,char_end:29"->"@app.route('/'),type='decorator'\nline_star:293,line_end:293|char_star:4,char_end:19";
"def index():\n        return 'Hello World!',type='function_definition'\nline_star:294,line_end:295|char_star:4,char_end:29"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.route('/')\n    def index():\n        return 'Hello World!',type='decorated_definition'\nline_star:293,line_end:295|char_star:4,char_end:29"->"def index():\n        return 'Hello World!',type='function_definition'\nline_star:294,line_end:295|char_star:4,char_end:29";
"index,type='identifier'\nline_star:294,line_end:294|char_star:8,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"def index():\n        return 'Hello World!',type='function_definition'\nline_star:294,line_end:295|char_star:4,char_end:29"->"index,type='identifier'\nline_star:294,line_end:294|char_star:8,char_end:13";
"type='INFORMATION BLOCK'\nline_star:295,line_end:295|char_star:8,char_end:29"[shape="point",fillcolor="#121013",style=filled];
"def index():\n        return 'Hello World!',type='function_definition'\nline_star:294,line_end:295|char_star:4,char_end:29"->"type='INFORMATION BLOCK'\nline_star:295,line_end:295|char_star:8,char_end:29";
"return 'Hello World!',type='return_statement'\nline_star:295,line_end:295|char_star:8,char_end:29"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:295,line_end:295|char_star:8,char_end:29"->"return 'Hello World!',type='return_statement'\nline_star:295,line_end:295|char_star:8,char_end:29";
"from flask.testing import EnvironBuilder,type='import_from_statement'\nline_star:297,line_end:297|char_star:4,char_end:44"[shape="box",fillcolor="#f48b29",style=filled];
"type='INFORMATION BLOCK'\nline_star:291,line_end:308|char_star:4,char_end:38"->"from flask.testing import EnvironBuilder,type='import_from_statement'\nline_star:297,line_end:297|char_star:4,char_end:44";
"# these characters are all IDNA-compatible,type='comment'\nline_star:302,line_end:302|char_star:4,char_end:46"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:291,line_end:308|char_star:4,char_end:38"->"# these characters are all IDNA-compatible,type='comment'\nline_star:302,line_end:302|char_star:4,char_end:46";
"with app.request_context(environ):\n        response = app.full_dispatch_request(),type='with_statement'\nline_star:305,line_end:306|char_star:4,char_end:46"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:291,line_end:308|char_star:4,char_end:38"->"with app.request_context(environ):\n        response = app.full_dispatch_request(),type='with_statement'\nline_star:305,line_end:306|char_star:4,char_end:46";
"app.request_context(environ),type='with_clause'\nline_star:305,line_end:305|char_star:9,char_end:37"[shape="box",fillcolor="white",style=filled];
"with app.request_context(environ):\n        response = app.full_dispatch_request(),type='with_statement'\nline_star:305,line_end:306|char_star:4,char_end:46"->"app.request_context(environ),type='with_clause'\nline_star:305,line_end:305|char_star:9,char_end:37";
"type='INFORMATION BLOCK'\nline_star:306,line_end:306|char_star:8,char_end:46"[shape="point",fillcolor="#121013",style=filled];
"with app.request_context(environ):\n        response = app.full_dispatch_request(),type='with_statement'\nline_star:305,line_end:306|char_star:4,char_end:46"->"type='INFORMATION BLOCK'\nline_star:306,line_end:306|char_star:8,char_end:46";
"assert response.status_code == 200,type='assert_statement'\nline_star:308,line_end:308|char_star:4,char_end:38"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:291,line_end:308|char_star:4,char_end:38"->"assert response.status_code == 200,type='assert_statement'\nline_star:308,line_end:308|char_star:4,char_end:38";
"response.status_code == 200,type='comparison_operator'\nline_star:308,line_end:308|char_star:11,char_end:38"[shape="box",fillcolor="white",style=filled];
"assert response.status_code == 200,type='assert_statement'\nline_star:308,line_end:308|char_star:4,char_end:38"->"response.status_code == 200,type='comparison_operator'\nline_star:308,line_end:308|char_star:11,char_end:38";
"response.status_code,type='attribute'\nline_star:308,line_end:308|char_star:11,char_end:31"[shape="box",fillcolor="white",style=filled];
"response.status_code == 200,type='comparison_operator'\nline_star:308,line_end:308|char_star:11,char_end:38"->"response.status_code,type='attribute'\nline_star:308,line_end:308|char_star:11,char_end:31";
"response,type='identifier'\nline_star:308,line_end:308|char_star:11,char_end:19"[shape="point",fillcolor="#121013",style=filled];
"response.status_code,type='attribute'\nline_star:308,line_end:308|char_star:11,char_end:31"->"response,type='identifier'\nline_star:308,line_end:308|char_star:11,char_end:19";
"status_code,type='identifier'\nline_star:308,line_end:308|char_star:20,char_end:31"[shape="point",fillcolor="#121013",style=filled];
"response.status_code,type='attribute'\nline_star:308,line_end:308|char_star:11,char_end:31"->"status_code,type='identifier'\nline_star:308,line_end:308|char_star:20,char_end:31";
"def test_normal_environ_completes():\n    app = flask.Flask(__name__)\n\n    @app.route('/')\n    def index():\n        return 'Hello World!'\n\n    response = app.test_client().get('/', headers={'host': 'xn--on-0ia.com'})\n    assert response.status_code == 200,type='function_definition'\nline_star:311,line_end:319|char_star:0,char_end:38"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_normal_environ_completes():\n    app = flask.Flask(__name__)\n\n    @app.route('/')\n    def index():\n        return 'Hello World!'\n\n    response = app.test_client().get('/', headers={'host': 'xn--on-0ia.com'})\n    assert response.status_code == 200,type='function_definition'\nline_star:311,line_end:319|char_star:0,char_end:38";
"test_normal_environ_completes,type='identifier'\nline_star:311,line_end:311|char_star:4,char_end:33"[shape="point",fillcolor="#121013",style=filled];
"def test_normal_environ_completes():\n    app = flask.Flask(__name__)\n\n    @app.route('/')\n    def index():\n        return 'Hello World!'\n\n    response = app.test_client().get('/', headers={'host': 'xn--on-0ia.com'})\n    assert response.status_code == 200,type='function_definition'\nline_star:311,line_end:319|char_star:0,char_end:38"->"test_normal_environ_completes,type='identifier'\nline_star:311,line_end:311|char_star:4,char_end:33";
"type='INFORMATION BLOCK'\nline_star:312,line_end:319|char_star:4,char_end:38"[shape="point",fillcolor="#121013",style=filled];
"def test_normal_environ_completes():\n    app = flask.Flask(__name__)\n\n    @app.route('/')\n    def index():\n        return 'Hello World!'\n\n    response = app.test_client().get('/', headers={'host': 'xn--on-0ia.com'})\n    assert response.status_code == 200,type='function_definition'\nline_star:311,line_end:319|char_star:0,char_end:38"->"type='INFORMATION BLOCK'\nline_star:312,line_end:319|char_star:4,char_end:38";
"@app.route('/')\n    def index():\n        return 'Hello World!',type='decorated_definition'\nline_star:314,line_end:316|char_star:4,char_end:29"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:312,line_end:319|char_star:4,char_end:38"->"@app.route('/')\n    def index():\n        return 'Hello World!',type='decorated_definition'\nline_star:314,line_end:316|char_star:4,char_end:29";
"@app.route('/'),type='decorator'\nline_star:314,line_end:314|char_star:4,char_end:19"[shape="box",fillcolor="white",style=filled];
"@app.route('/')\n    def index():\n        return 'Hello World!',type='decorated_definition'\nline_star:314,line_end:316|char_star:4,char_end:29"->"@app.route('/'),type='decorator'\nline_star:314,line_end:314|char_star:4,char_end:19";
"def index():\n        return 'Hello World!',type='function_definition'\nline_star:315,line_end:316|char_star:4,char_end:29"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.route('/')\n    def index():\n        return 'Hello World!',type='decorated_definition'\nline_star:314,line_end:316|char_star:4,char_end:29"->"def index():\n        return 'Hello World!',type='function_definition'\nline_star:315,line_end:316|char_star:4,char_end:29";
"index,type='identifier'\nline_star:315,line_end:315|char_star:8,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"def index():\n        return 'Hello World!',type='function_definition'\nline_star:315,line_end:316|char_star:4,char_end:29"->"index,type='identifier'\nline_star:315,line_end:315|char_star:8,char_end:13";
"type='INFORMATION BLOCK'\nline_star:316,line_end:316|char_star:8,char_end:29"[shape="point",fillcolor="#121013",style=filled];
"def index():\n        return 'Hello World!',type='function_definition'\nline_star:315,line_end:316|char_star:4,char_end:29"->"type='INFORMATION BLOCK'\nline_star:316,line_end:316|char_star:8,char_end:29";
"return 'Hello World!',type='return_statement'\nline_star:316,line_end:316|char_star:8,char_end:29"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:316,line_end:316|char_star:8,char_end:29"->"return 'Hello World!',type='return_statement'\nline_star:316,line_end:316|char_star:8,char_end:29";
"assert response.status_code == 200,type='assert_statement'\nline_star:319,line_end:319|char_star:4,char_end:38"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:312,line_end:319|char_star:4,char_end:38"->"assert response.status_code == 200,type='assert_statement'\nline_star:319,line_end:319|char_star:4,char_end:38";
"response.status_code == 200,type='comparison_operator'\nline_star:319,line_end:319|char_star:11,char_end:38"[shape="box",fillcolor="white",style=filled];
"assert response.status_code == 200,type='assert_statement'\nline_star:319,line_end:319|char_star:4,char_end:38"->"response.status_code == 200,type='comparison_operator'\nline_star:319,line_end:319|char_star:11,char_end:38";
"response.status_code,type='attribute'\nline_star:319,line_end:319|char_star:11,char_end:31"[shape="box",fillcolor="white",style=filled];
"response.status_code == 200,type='comparison_operator'\nline_star:319,line_end:319|char_star:11,char_end:38"->"response.status_code,type='attribute'\nline_star:319,line_end:319|char_star:11,char_end:31";
"response,type='identifier'\nline_star:319,line_end:319|char_star:11,char_end:19"[shape="point",fillcolor="#121013",style=filled];
"response.status_code,type='attribute'\nline_star:319,line_end:319|char_star:11,char_end:31"->"response,type='identifier'\nline_star:319,line_end:319|char_star:11,char_end:19";
"status_code,type='identifier'\nline_star:319,line_end:319|char_star:20,char_end:31"[shape="point",fillcolor="#121013",style=filled];
"response.status_code,type='attribute'\nline_star:319,line_end:319|char_star:11,char_end:31"->"status_code,type='identifier'\nline_star:319,line_end:319|char_star:20,char_end:31";
"import pytest\nimport flask\nfrom flask.sessions import SecureCookieSessionInterface\nfrom flask.sessions import SessionInterface\nfrom greenlet import greenlet\nfrom flask.testing import EnvironBuilder\nfrom flask.testing import EnvironBuilde"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"import pytest\nimport flask\nfrom flask.sessions import SecureCookieSessionInterface\nfrom flask.sessions import SessionInterface\nfrom greenlet import greenlet\nfrom flask.testing import EnvironBuilder\nfrom flask.testing import EnvironBuilde"
}
