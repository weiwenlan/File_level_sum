digraph G{
rankdir="LR";
"MODULE"[shape="box",fillcolor="white",style=filled];
"import pytest,type='import_statement'\nline_star:0,line_end:0|char_star:0,char_end:13"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"import pytest,type='import_statement'\nline_star:0,line_end:0|char_star:0,char_end:13";
"import flask,type='import_statement'\nline_star:2,line_end:2|char_star:0,char_end:12"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"import flask,type='import_statement'\nline_star:2,line_end:2|char_star:0,char_end:12";
"def test_basic_url_generation(app):\n    app.config['SERVER_NAME'] = 'localhost'\n    app.config['PREFERRED_URL_SCHEME'] = 'https'\n\n    @app.route('/')\n    def index():\n        pass\n\n    with app.app_context():\n        rv = flask.url_for('index')\n        assert rv == 'https://localhost/',type='function_definition'\nline_star:5,line_end:15|char_star:0,char_end:41"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_basic_url_generation(app):\n    app.config['SERVER_NAME'] = 'localhost'\n    app.config['PREFERRED_URL_SCHEME'] = 'https'\n\n    @app.route('/')\n    def index():\n        pass\n\n    with app.app_context():\n        rv = flask.url_for('index')\n        assert rv == 'https://localhost/',type='function_definition'\nline_star:5,line_end:15|char_star:0,char_end:41";
"test_basic_url_generation,type='identifier'\nline_star:5,line_end:5|char_star:4,char_end:29"[shape="point",fillcolor="#121013",style=filled];
"def test_basic_url_generation(app):\n    app.config['SERVER_NAME'] = 'localhost'\n    app.config['PREFERRED_URL_SCHEME'] = 'https'\n\n    @app.route('/')\n    def index():\n        pass\n\n    with app.app_context():\n        rv = flask.url_for('index')\n        assert rv == 'https://localhost/',type='function_definition'\nline_star:5,line_end:15|char_star:0,char_end:41"->"test_basic_url_generation,type='identifier'\nline_star:5,line_end:5|char_star:4,char_end:29";
"(app),type='parameters'\nline_star:5,line_end:5|char_star:29,char_end:34"[shape="box",fillcolor="white",style=filled];
"def test_basic_url_generation(app):\n    app.config['SERVER_NAME'] = 'localhost'\n    app.config['PREFERRED_URL_SCHEME'] = 'https'\n\n    @app.route('/')\n    def index():\n        pass\n\n    with app.app_context():\n        rv = flask.url_for('index')\n        assert rv == 'https://localhost/',type='function_definition'\nline_star:5,line_end:15|char_star:0,char_end:41"->"(app),type='parameters'\nline_star:5,line_end:5|char_star:29,char_end:34";
"app,type='identifier'\nline_star:5,line_end:5|char_star:30,char_end:33"[shape="point",fillcolor="#121013",style=filled];
"(app),type='parameters'\nline_star:5,line_end:5|char_star:29,char_end:34"->"app,type='identifier'\nline_star:5,line_end:5|char_star:30,char_end:33";
"type='INFORMATION BLOCK'\nline_star:6,line_end:15|char_star:4,char_end:41"[shape="point",fillcolor="#121013",style=filled];
"def test_basic_url_generation(app):\n    app.config['SERVER_NAME'] = 'localhost'\n    app.config['PREFERRED_URL_SCHEME'] = 'https'\n\n    @app.route('/')\n    def index():\n        pass\n\n    with app.app_context():\n        rv = flask.url_for('index')\n        assert rv == 'https://localhost/',type='function_definition'\nline_star:5,line_end:15|char_star:0,char_end:41"->"type='INFORMATION BLOCK'\nline_star:6,line_end:15|char_star:4,char_end:41";
"@app.route('/')\n    def index():\n        pass,type='decorated_definition'\nline_star:9,line_end:11|char_star:4,char_end:12"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:6,line_end:15|char_star:4,char_end:41"->"@app.route('/')\n    def index():\n        pass,type='decorated_definition'\nline_star:9,line_end:11|char_star:4,char_end:12";
"@app.route('/'),type='decorator'\nline_star:9,line_end:9|char_star:4,char_end:19"[shape="box",fillcolor="white",style=filled];
"@app.route('/')\n    def index():\n        pass,type='decorated_definition'\nline_star:9,line_end:11|char_star:4,char_end:12"->"@app.route('/'),type='decorator'\nline_star:9,line_end:9|char_star:4,char_end:19";
"def index():\n        pass,type='function_definition'\nline_star:10,line_end:11|char_star:4,char_end:12"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.route('/')\n    def index():\n        pass,type='decorated_definition'\nline_star:9,line_end:11|char_star:4,char_end:12"->"def index():\n        pass,type='function_definition'\nline_star:10,line_end:11|char_star:4,char_end:12";
"index,type='identifier'\nline_star:10,line_end:10|char_star:8,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"def index():\n        pass,type='function_definition'\nline_star:10,line_end:11|char_star:4,char_end:12"->"index,type='identifier'\nline_star:10,line_end:10|char_star:8,char_end:13";
"type='INFORMATION BLOCK'\nline_star:11,line_end:11|char_star:8,char_end:12"[shape="point",fillcolor="#121013",style=filled];
"def index():\n        pass,type='function_definition'\nline_star:10,line_end:11|char_star:4,char_end:12"->"type='INFORMATION BLOCK'\nline_star:11,line_end:11|char_star:8,char_end:12";
"pass,type='pass_statement'\nline_star:11,line_end:11|char_star:8,char_end:12"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:11,line_end:11|char_star:8,char_end:12"->"pass,type='pass_statement'\nline_star:11,line_end:11|char_star:8,char_end:12";
"pass,type='pass'\nline_star:11,line_end:11|char_star:8,char_end:12"[shape="box",fillcolor="white",style=filled];
"pass,type='pass_statement'\nline_star:11,line_end:11|char_star:8,char_end:12"->"pass,type='pass'\nline_star:11,line_end:11|char_star:8,char_end:12";
"with app.app_context():\n        rv = flask.url_for('index')\n        assert rv == 'https://localhost/',type='with_statement'\nline_star:13,line_end:15|char_star:4,char_end:41"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:6,line_end:15|char_star:4,char_end:41"->"with app.app_context():\n        rv = flask.url_for('index')\n        assert rv == 'https://localhost/',type='with_statement'\nline_star:13,line_end:15|char_star:4,char_end:41";
"app.app_context(),type='with_clause'\nline_star:13,line_end:13|char_star:9,char_end:26"[shape="box",fillcolor="white",style=filled];
"with app.app_context():\n        rv = flask.url_for('index')\n        assert rv == 'https://localhost/',type='with_statement'\nline_star:13,line_end:15|char_star:4,char_end:41"->"app.app_context(),type='with_clause'\nline_star:13,line_end:13|char_star:9,char_end:26";
"type='INFORMATION BLOCK'\nline_star:14,line_end:15|char_star:8,char_end:41"[shape="point",fillcolor="#121013",style=filled];
"with app.app_context():\n        rv = flask.url_for('index')\n        assert rv == 'https://localhost/',type='with_statement'\nline_star:13,line_end:15|char_star:4,char_end:41"->"type='INFORMATION BLOCK'\nline_star:14,line_end:15|char_star:8,char_end:41";
"assert rv == 'https://localhost/',type='assert_statement'\nline_star:15,line_end:15|char_star:8,char_end:41"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:14,line_end:15|char_star:8,char_end:41"->"assert rv == 'https://localhost/',type='assert_statement'\nline_star:15,line_end:15|char_star:8,char_end:41";
"rv == 'https://localhost/',type='comparison_operator'\nline_star:15,line_end:15|char_star:15,char_end:41"[shape="box",fillcolor="white",style=filled];
"assert rv == 'https://localhost/',type='assert_statement'\nline_star:15,line_end:15|char_star:8,char_end:41"->"rv == 'https://localhost/',type='comparison_operator'\nline_star:15,line_end:15|char_star:15,char_end:41";
"rv,type='identifier'\nline_star:15,line_end:15|char_star:15,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"rv == 'https://localhost/',type='comparison_operator'\nline_star:15,line_end:15|char_star:15,char_end:41"->"rv,type='identifier'\nline_star:15,line_end:15|char_star:15,char_end:17";
"def test_url_generation_requires_server_name(app):\n    with app.app_context():\n        with pytest.raises(RuntimeError):\n            flask.url_for('index'),type='function_definition'\nline_star:18,line_end:21|char_star:0,char_end:34"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_url_generation_requires_server_name(app):\n    with app.app_context():\n        with pytest.raises(RuntimeError):\n            flask.url_for('index'),type='function_definition'\nline_star:18,line_end:21|char_star:0,char_end:34";
"test_url_generation_requires_server_name,type='identifier'\nline_star:18,line_end:18|char_star:4,char_end:44"[shape="point",fillcolor="#121013",style=filled];
"def test_url_generation_requires_server_name(app):\n    with app.app_context():\n        with pytest.raises(RuntimeError):\n            flask.url_for('index'),type='function_definition'\nline_star:18,line_end:21|char_star:0,char_end:34"->"test_url_generation_requires_server_name,type='identifier'\nline_star:18,line_end:18|char_star:4,char_end:44";
"(app),type='parameters'\nline_star:18,line_end:18|char_star:44,char_end:49"[shape="box",fillcolor="white",style=filled];
"def test_url_generation_requires_server_name(app):\n    with app.app_context():\n        with pytest.raises(RuntimeError):\n            flask.url_for('index'),type='function_definition'\nline_star:18,line_end:21|char_star:0,char_end:34"->"(app),type='parameters'\nline_star:18,line_end:18|char_star:44,char_end:49";
"app,type='identifier'\nline_star:18,line_end:18|char_star:45,char_end:48"[shape="point",fillcolor="#121013",style=filled];
"(app),type='parameters'\nline_star:18,line_end:18|char_star:44,char_end:49"->"app,type='identifier'\nline_star:18,line_end:18|char_star:45,char_end:48";
"type='INFORMATION BLOCK'\nline_star:19,line_end:21|char_star:4,char_end:34"[shape="point",fillcolor="#121013",style=filled];
"def test_url_generation_requires_server_name(app):\n    with app.app_context():\n        with pytest.raises(RuntimeError):\n            flask.url_for('index'),type='function_definition'\nline_star:18,line_end:21|char_star:0,char_end:34"->"type='INFORMATION BLOCK'\nline_star:19,line_end:21|char_star:4,char_end:34";
"with app.app_context():\n        with pytest.raises(RuntimeError):\n            flask.url_for('index'),type='with_statement'\nline_star:19,line_end:21|char_star:4,char_end:34"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:19,line_end:21|char_star:4,char_end:34"->"with app.app_context():\n        with pytest.raises(RuntimeError):\n            flask.url_for('index'),type='with_statement'\nline_star:19,line_end:21|char_star:4,char_end:34";
"app.app_context(),type='with_clause'\nline_star:19,line_end:19|char_star:9,char_end:26"[shape="box",fillcolor="white",style=filled];
"with app.app_context():\n        with pytest.raises(RuntimeError):\n            flask.url_for('index'),type='with_statement'\nline_star:19,line_end:21|char_star:4,char_end:34"->"app.app_context(),type='with_clause'\nline_star:19,line_end:19|char_star:9,char_end:26";
"type='INFORMATION BLOCK'\nline_star:20,line_end:21|char_star:8,char_end:34"[shape="point",fillcolor="#121013",style=filled];
"with app.app_context():\n        with pytest.raises(RuntimeError):\n            flask.url_for('index'),type='with_statement'\nline_star:19,line_end:21|char_star:4,char_end:34"->"type='INFORMATION BLOCK'\nline_star:20,line_end:21|char_star:8,char_end:34";
"with pytest.raises(RuntimeError):\n            flask.url_for('index'),type='with_statement'\nline_star:20,line_end:21|char_star:8,char_end:34"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:20,line_end:21|char_star:8,char_end:34"->"with pytest.raises(RuntimeError):\n            flask.url_for('index'),type='with_statement'\nline_star:20,line_end:21|char_star:8,char_end:34";
"pytest.raises(RuntimeError),type='with_clause'\nline_star:20,line_end:20|char_star:13,char_end:40"[shape="box",fillcolor="white",style=filled];
"with pytest.raises(RuntimeError):\n            flask.url_for('index'),type='with_statement'\nline_star:20,line_end:21|char_star:8,char_end:34"->"pytest.raises(RuntimeError),type='with_clause'\nline_star:20,line_end:20|char_star:13,char_end:40";
"type='INFORMATION BLOCK'\nline_star:21,line_end:21|char_star:12,char_end:34"[shape="point",fillcolor="#121013",style=filled];
"with pytest.raises(RuntimeError):\n            flask.url_for('index'),type='with_statement'\nline_star:20,line_end:21|char_star:8,char_end:34"->"type='INFORMATION BLOCK'\nline_star:21,line_end:21|char_star:12,char_end:34";
"def test_url_generation_without_context_fails():\n    with pytest.raises(RuntimeError):\n        flask.url_for('index'),type='function_definition'\nline_star:24,line_end:26|char_star:0,char_end:30"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_url_generation_without_context_fails():\n    with pytest.raises(RuntimeError):\n        flask.url_for('index'),type='function_definition'\nline_star:24,line_end:26|char_star:0,char_end:30";
"test_url_generation_without_context_fails,type='identifier'\nline_star:24,line_end:24|char_star:4,char_end:45"[shape="point",fillcolor="#121013",style=filled];
"def test_url_generation_without_context_fails():\n    with pytest.raises(RuntimeError):\n        flask.url_for('index'),type='function_definition'\nline_star:24,line_end:26|char_star:0,char_end:30"->"test_url_generation_without_context_fails,type='identifier'\nline_star:24,line_end:24|char_star:4,char_end:45";
"type='INFORMATION BLOCK'\nline_star:25,line_end:26|char_star:4,char_end:30"[shape="point",fillcolor="#121013",style=filled];
"def test_url_generation_without_context_fails():\n    with pytest.raises(RuntimeError):\n        flask.url_for('index'),type='function_definition'\nline_star:24,line_end:26|char_star:0,char_end:30"->"type='INFORMATION BLOCK'\nline_star:25,line_end:26|char_star:4,char_end:30";
"with pytest.raises(RuntimeError):\n        flask.url_for('index'),type='with_statement'\nline_star:25,line_end:26|char_star:4,char_end:30"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:25,line_end:26|char_star:4,char_end:30"->"with pytest.raises(RuntimeError):\n        flask.url_for('index'),type='with_statement'\nline_star:25,line_end:26|char_star:4,char_end:30";
"pytest.raises(RuntimeError),type='with_clause'\nline_star:25,line_end:25|char_star:9,char_end:36"[shape="box",fillcolor="white",style=filled];
"with pytest.raises(RuntimeError):\n        flask.url_for('index'),type='with_statement'\nline_star:25,line_end:26|char_star:4,char_end:30"->"pytest.raises(RuntimeError),type='with_clause'\nline_star:25,line_end:25|char_star:9,char_end:36";
"type='INFORMATION BLOCK'\nline_star:26,line_end:26|char_star:8,char_end:30"[shape="point",fillcolor="#121013",style=filled];
"with pytest.raises(RuntimeError):\n        flask.url_for('index'),type='with_statement'\nline_star:25,line_end:26|char_star:4,char_end:30"->"type='INFORMATION BLOCK'\nline_star:26,line_end:26|char_star:8,char_end:30";
"def test_request_context_means_app_context(app):\n    with app.test_request_context():\n        assert flask.current_app._get_current_object() == app\n    assert flask._app_ctx_stack.top is None,type='function_definition'\nline_star:29,line_end:32|char_star:0,char_end:43"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_request_context_means_app_context(app):\n    with app.test_request_context():\n        assert flask.current_app._get_current_object() == app\n    assert flask._app_ctx_stack.top is None,type='function_definition'\nline_star:29,line_end:32|char_star:0,char_end:43";
"test_request_context_means_app_context,type='identifier'\nline_star:29,line_end:29|char_star:4,char_end:42"[shape="point",fillcolor="#121013",style=filled];
"def test_request_context_means_app_context(app):\n    with app.test_request_context():\n        assert flask.current_app._get_current_object() == app\n    assert flask._app_ctx_stack.top is None,type='function_definition'\nline_star:29,line_end:32|char_star:0,char_end:43"->"test_request_context_means_app_context,type='identifier'\nline_star:29,line_end:29|char_star:4,char_end:42";
"(app),type='parameters'\nline_star:29,line_end:29|char_star:42,char_end:47"[shape="box",fillcolor="white",style=filled];
"def test_request_context_means_app_context(app):\n    with app.test_request_context():\n        assert flask.current_app._get_current_object() == app\n    assert flask._app_ctx_stack.top is None,type='function_definition'\nline_star:29,line_end:32|char_star:0,char_end:43"->"(app),type='parameters'\nline_star:29,line_end:29|char_star:42,char_end:47";
"app,type='identifier'\nline_star:29,line_end:29|char_star:43,char_end:46"[shape="point",fillcolor="#121013",style=filled];
"(app),type='parameters'\nline_star:29,line_end:29|char_star:42,char_end:47"->"app,type='identifier'\nline_star:29,line_end:29|char_star:43,char_end:46";
"type='INFORMATION BLOCK'\nline_star:30,line_end:32|char_star:4,char_end:43"[shape="point",fillcolor="#121013",style=filled];
"def test_request_context_means_app_context(app):\n    with app.test_request_context():\n        assert flask.current_app._get_current_object() == app\n    assert flask._app_ctx_stack.top is None,type='function_definition'\nline_star:29,line_end:32|char_star:0,char_end:43"->"type='INFORMATION BLOCK'\nline_star:30,line_end:32|char_star:4,char_end:43";
"with app.test_request_context():\n        assert flask.current_app._get_current_object() == app,type='with_statement'\nline_star:30,line_end:31|char_star:4,char_end:61"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:30,line_end:32|char_star:4,char_end:43"->"with app.test_request_context():\n        assert flask.current_app._get_current_object() == app,type='with_statement'\nline_star:30,line_end:31|char_star:4,char_end:61";
"app.test_request_context(),type='with_clause'\nline_star:30,line_end:30|char_star:9,char_end:35"[shape="box",fillcolor="white",style=filled];
"with app.test_request_context():\n        assert flask.current_app._get_current_object() == app,type='with_statement'\nline_star:30,line_end:31|char_star:4,char_end:61"->"app.test_request_context(),type='with_clause'\nline_star:30,line_end:30|char_star:9,char_end:35";
"type='INFORMATION BLOCK'\nline_star:31,line_end:31|char_star:8,char_end:61"[shape="point",fillcolor="#121013",style=filled];
"with app.test_request_context():\n        assert flask.current_app._get_current_object() == app,type='with_statement'\nline_star:30,line_end:31|char_star:4,char_end:61"->"type='INFORMATION BLOCK'\nline_star:31,line_end:31|char_star:8,char_end:61";
"assert flask.current_app._get_current_object() == app,type='assert_statement'\nline_star:31,line_end:31|char_star:8,char_end:61"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:31,line_end:31|char_star:8,char_end:61"->"assert flask.current_app._get_current_object() == app,type='assert_statement'\nline_star:31,line_end:31|char_star:8,char_end:61";
"flask.current_app._get_current_object() == app,type='comparison_operator'\nline_star:31,line_end:31|char_star:15,char_end:61"[shape="box",fillcolor="white",style=filled];
"assert flask.current_app._get_current_object() == app,type='assert_statement'\nline_star:31,line_end:31|char_star:8,char_end:61"->"flask.current_app._get_current_object() == app,type='comparison_operator'\nline_star:31,line_end:31|char_star:15,char_end:61";
"flask.current_app._get_current_object(),type='call'\nline_star:31,line_end:31|char_star:15,char_end:54"[shape="box",fillcolor="white",style=filled];
"flask.current_app._get_current_object() == app,type='comparison_operator'\nline_star:31,line_end:31|char_star:15,char_end:61"->"flask.current_app._get_current_object(),type='call'\nline_star:31,line_end:31|char_star:15,char_end:54";
"flask.current_app._get_current_object,type='attribute'\nline_star:31,line_end:31|char_star:15,char_end:52"[shape="box",fillcolor="white",style=filled];
"flask.current_app._get_current_object(),type='call'\nline_star:31,line_end:31|char_star:15,char_end:54"->"flask.current_app._get_current_object,type='attribute'\nline_star:31,line_end:31|char_star:15,char_end:52";
"flask.current_app,type='attribute'\nline_star:31,line_end:31|char_star:15,char_end:32"[shape="box",fillcolor="white",style=filled];
"flask.current_app._get_current_object,type='attribute'\nline_star:31,line_end:31|char_star:15,char_end:52"->"flask.current_app,type='attribute'\nline_star:31,line_end:31|char_star:15,char_end:32";
"flask,type='identifier'\nline_star:31,line_end:31|char_star:15,char_end:20"[shape="point",fillcolor="#121013",style=filled];
"flask.current_app,type='attribute'\nline_star:31,line_end:31|char_star:15,char_end:32"->"flask,type='identifier'\nline_star:31,line_end:31|char_star:15,char_end:20";
"current_app,type='identifier'\nline_star:31,line_end:31|char_star:21,char_end:32"[shape="point",fillcolor="#121013",style=filled];
"flask.current_app,type='attribute'\nline_star:31,line_end:31|char_star:15,char_end:32"->"current_app,type='identifier'\nline_star:31,line_end:31|char_star:21,char_end:32";
"_get_current_object,type='identifier'\nline_star:31,line_end:31|char_star:33,char_end:52"[shape="point",fillcolor="#121013",style=filled];
"flask.current_app._get_current_object,type='attribute'\nline_star:31,line_end:31|char_star:15,char_end:52"->"_get_current_object,type='identifier'\nline_star:31,line_end:31|char_star:33,char_end:52";
"app,type='identifier'\nline_star:31,line_end:31|char_star:58,char_end:61"[shape="point",fillcolor="#121013",style=filled];
"flask.current_app._get_current_object() == app,type='comparison_operator'\nline_star:31,line_end:31|char_star:15,char_end:61"->"app,type='identifier'\nline_star:31,line_end:31|char_star:58,char_end:61";
"assert flask._app_ctx_stack.top is None,type='assert_statement'\nline_star:32,line_end:32|char_star:4,char_end:43"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:30,line_end:32|char_star:4,char_end:43"->"assert flask._app_ctx_stack.top is None,type='assert_statement'\nline_star:32,line_end:32|char_star:4,char_end:43";
"flask._app_ctx_stack.top is None,type='comparison_operator'\nline_star:32,line_end:32|char_star:11,char_end:43"[shape="box",fillcolor="white",style=filled];
"assert flask._app_ctx_stack.top is None,type='assert_statement'\nline_star:32,line_end:32|char_star:4,char_end:43"->"flask._app_ctx_stack.top is None,type='comparison_operator'\nline_star:32,line_end:32|char_star:11,char_end:43";
"flask._app_ctx_stack.top,type='attribute'\nline_star:32,line_end:32|char_star:11,char_end:35"[shape="box",fillcolor="white",style=filled];
"flask._app_ctx_stack.top is None,type='comparison_operator'\nline_star:32,line_end:32|char_star:11,char_end:43"->"flask._app_ctx_stack.top,type='attribute'\nline_star:32,line_end:32|char_star:11,char_end:35";
"flask._app_ctx_stack,type='attribute'\nline_star:32,line_end:32|char_star:11,char_end:31"[shape="box",fillcolor="white",style=filled];
"flask._app_ctx_stack.top,type='attribute'\nline_star:32,line_end:32|char_star:11,char_end:35"->"flask._app_ctx_stack,type='attribute'\nline_star:32,line_end:32|char_star:11,char_end:31";
"flask,type='identifier'\nline_star:32,line_end:32|char_star:11,char_end:16"[shape="point",fillcolor="#121013",style=filled];
"flask._app_ctx_stack,type='attribute'\nline_star:32,line_end:32|char_star:11,char_end:31"->"flask,type='identifier'\nline_star:32,line_end:32|char_star:11,char_end:16";
"_app_ctx_stack,type='identifier'\nline_star:32,line_end:32|char_star:17,char_end:31"[shape="point",fillcolor="#121013",style=filled];
"flask._app_ctx_stack,type='attribute'\nline_star:32,line_end:32|char_star:11,char_end:31"->"_app_ctx_stack,type='identifier'\nline_star:32,line_end:32|char_star:17,char_end:31";
"top,type='identifier'\nline_star:32,line_end:32|char_star:32,char_end:35"[shape="point",fillcolor="#121013",style=filled];
"flask._app_ctx_stack.top,type='attribute'\nline_star:32,line_end:32|char_star:11,char_end:35"->"top,type='identifier'\nline_star:32,line_end:32|char_star:32,char_end:35";
"def test_app_context_provides_current_app(app):\n    with app.app_context():\n        assert flask.current_app._get_current_object() == app\n    assert flask._app_ctx_stack.top is None,type='function_definition'\nline_star:35,line_end:38|char_star:0,char_end:43"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_app_context_provides_current_app(app):\n    with app.app_context():\n        assert flask.current_app._get_current_object() == app\n    assert flask._app_ctx_stack.top is None,type='function_definition'\nline_star:35,line_end:38|char_star:0,char_end:43";
"test_app_context_provides_current_app,type='identifier'\nline_star:35,line_end:35|char_star:4,char_end:41"[shape="point",fillcolor="#121013",style=filled];
"def test_app_context_provides_current_app(app):\n    with app.app_context():\n        assert flask.current_app._get_current_object() == app\n    assert flask._app_ctx_stack.top is None,type='function_definition'\nline_star:35,line_end:38|char_star:0,char_end:43"->"test_app_context_provides_current_app,type='identifier'\nline_star:35,line_end:35|char_star:4,char_end:41";
"(app),type='parameters'\nline_star:35,line_end:35|char_star:41,char_end:46"[shape="box",fillcolor="white",style=filled];
"def test_app_context_provides_current_app(app):\n    with app.app_context():\n        assert flask.current_app._get_current_object() == app\n    assert flask._app_ctx_stack.top is None,type='function_definition'\nline_star:35,line_end:38|char_star:0,char_end:43"->"(app),type='parameters'\nline_star:35,line_end:35|char_star:41,char_end:46";
"app,type='identifier'\nline_star:35,line_end:35|char_star:42,char_end:45"[shape="point",fillcolor="#121013",style=filled];
"(app),type='parameters'\nline_star:35,line_end:35|char_star:41,char_end:46"->"app,type='identifier'\nline_star:35,line_end:35|char_star:42,char_end:45";
"type='INFORMATION BLOCK'\nline_star:36,line_end:38|char_star:4,char_end:43"[shape="point",fillcolor="#121013",style=filled];
"def test_app_context_provides_current_app(app):\n    with app.app_context():\n        assert flask.current_app._get_current_object() == app\n    assert flask._app_ctx_stack.top is None,type='function_definition'\nline_star:35,line_end:38|char_star:0,char_end:43"->"type='INFORMATION BLOCK'\nline_star:36,line_end:38|char_star:4,char_end:43";
"with app.app_context():\n        assert flask.current_app._get_current_object() == app,type='with_statement'\nline_star:36,line_end:37|char_star:4,char_end:61"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:36,line_end:38|char_star:4,char_end:43"->"with app.app_context():\n        assert flask.current_app._get_current_object() == app,type='with_statement'\nline_star:36,line_end:37|char_star:4,char_end:61";
"app.app_context(),type='with_clause'\nline_star:36,line_end:36|char_star:9,char_end:26"[shape="box",fillcolor="white",style=filled];
"with app.app_context():\n        assert flask.current_app._get_current_object() == app,type='with_statement'\nline_star:36,line_end:37|char_star:4,char_end:61"->"app.app_context(),type='with_clause'\nline_star:36,line_end:36|char_star:9,char_end:26";
"type='INFORMATION BLOCK'\nline_star:37,line_end:37|char_star:8,char_end:61"[shape="point",fillcolor="#121013",style=filled];
"with app.app_context():\n        assert flask.current_app._get_current_object() == app,type='with_statement'\nline_star:36,line_end:37|char_star:4,char_end:61"->"type='INFORMATION BLOCK'\nline_star:37,line_end:37|char_star:8,char_end:61";
"assert flask.current_app._get_current_object() == app,type='assert_statement'\nline_star:37,line_end:37|char_star:8,char_end:61"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:37,line_end:37|char_star:8,char_end:61"->"assert flask.current_app._get_current_object() == app,type='assert_statement'\nline_star:37,line_end:37|char_star:8,char_end:61";
"flask.current_app._get_current_object() == app,type='comparison_operator'\nline_star:37,line_end:37|char_star:15,char_end:61"[shape="box",fillcolor="white",style=filled];
"assert flask.current_app._get_current_object() == app,type='assert_statement'\nline_star:37,line_end:37|char_star:8,char_end:61"->"flask.current_app._get_current_object() == app,type='comparison_operator'\nline_star:37,line_end:37|char_star:15,char_end:61";
"flask.current_app._get_current_object(),type='call'\nline_star:37,line_end:37|char_star:15,char_end:54"[shape="box",fillcolor="white",style=filled];
"flask.current_app._get_current_object() == app,type='comparison_operator'\nline_star:37,line_end:37|char_star:15,char_end:61"->"flask.current_app._get_current_object(),type='call'\nline_star:37,line_end:37|char_star:15,char_end:54";
"flask.current_app._get_current_object,type='attribute'\nline_star:37,line_end:37|char_star:15,char_end:52"[shape="box",fillcolor="white",style=filled];
"flask.current_app._get_current_object(),type='call'\nline_star:37,line_end:37|char_star:15,char_end:54"->"flask.current_app._get_current_object,type='attribute'\nline_star:37,line_end:37|char_star:15,char_end:52";
"flask.current_app,type='attribute'\nline_star:37,line_end:37|char_star:15,char_end:32"[shape="box",fillcolor="white",style=filled];
"flask.current_app._get_current_object,type='attribute'\nline_star:37,line_end:37|char_star:15,char_end:52"->"flask.current_app,type='attribute'\nline_star:37,line_end:37|char_star:15,char_end:32";
"flask,type='identifier'\nline_star:37,line_end:37|char_star:15,char_end:20"[shape="point",fillcolor="#121013",style=filled];
"flask.current_app,type='attribute'\nline_star:37,line_end:37|char_star:15,char_end:32"->"flask,type='identifier'\nline_star:37,line_end:37|char_star:15,char_end:20";
"current_app,type='identifier'\nline_star:37,line_end:37|char_star:21,char_end:32"[shape="point",fillcolor="#121013",style=filled];
"flask.current_app,type='attribute'\nline_star:37,line_end:37|char_star:15,char_end:32"->"current_app,type='identifier'\nline_star:37,line_end:37|char_star:21,char_end:32";
"_get_current_object,type='identifier'\nline_star:37,line_end:37|char_star:33,char_end:52"[shape="point",fillcolor="#121013",style=filled];
"flask.current_app._get_current_object,type='attribute'\nline_star:37,line_end:37|char_star:15,char_end:52"->"_get_current_object,type='identifier'\nline_star:37,line_end:37|char_star:33,char_end:52";
"app,type='identifier'\nline_star:37,line_end:37|char_star:58,char_end:61"[shape="point",fillcolor="#121013",style=filled];
"flask.current_app._get_current_object() == app,type='comparison_operator'\nline_star:37,line_end:37|char_star:15,char_end:61"->"app,type='identifier'\nline_star:37,line_end:37|char_star:58,char_end:61";
"assert flask._app_ctx_stack.top is None,type='assert_statement'\nline_star:38,line_end:38|char_star:4,char_end:43"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:36,line_end:38|char_star:4,char_end:43"->"assert flask._app_ctx_stack.top is None,type='assert_statement'\nline_star:38,line_end:38|char_star:4,char_end:43";
"flask._app_ctx_stack.top is None,type='comparison_operator'\nline_star:38,line_end:38|char_star:11,char_end:43"[shape="box",fillcolor="white",style=filled];
"assert flask._app_ctx_stack.top is None,type='assert_statement'\nline_star:38,line_end:38|char_star:4,char_end:43"->"flask._app_ctx_stack.top is None,type='comparison_operator'\nline_star:38,line_end:38|char_star:11,char_end:43";
"flask._app_ctx_stack.top,type='attribute'\nline_star:38,line_end:38|char_star:11,char_end:35"[shape="box",fillcolor="white",style=filled];
"flask._app_ctx_stack.top is None,type='comparison_operator'\nline_star:38,line_end:38|char_star:11,char_end:43"->"flask._app_ctx_stack.top,type='attribute'\nline_star:38,line_end:38|char_star:11,char_end:35";
"flask._app_ctx_stack,type='attribute'\nline_star:38,line_end:38|char_star:11,char_end:31"[shape="box",fillcolor="white",style=filled];
"flask._app_ctx_stack.top,type='attribute'\nline_star:38,line_end:38|char_star:11,char_end:35"->"flask._app_ctx_stack,type='attribute'\nline_star:38,line_end:38|char_star:11,char_end:31";
"flask,type='identifier'\nline_star:38,line_end:38|char_star:11,char_end:16"[shape="point",fillcolor="#121013",style=filled];
"flask._app_ctx_stack,type='attribute'\nline_star:38,line_end:38|char_star:11,char_end:31"->"flask,type='identifier'\nline_star:38,line_end:38|char_star:11,char_end:16";
"_app_ctx_stack,type='identifier'\nline_star:38,line_end:38|char_star:17,char_end:31"[shape="point",fillcolor="#121013",style=filled];
"flask._app_ctx_stack,type='attribute'\nline_star:38,line_end:38|char_star:11,char_end:31"->"_app_ctx_stack,type='identifier'\nline_star:38,line_end:38|char_star:17,char_end:31";
"top,type='identifier'\nline_star:38,line_end:38|char_star:32,char_end:35"[shape="point",fillcolor="#121013",style=filled];
"flask._app_ctx_stack.top,type='attribute'\nline_star:38,line_end:38|char_star:11,char_end:35"->"top,type='identifier'\nline_star:38,line_end:38|char_star:32,char_end:35";
"def test_app_tearing_down(app):\n    cleanup_stuff = []\n\n    @app.teardown_appcontext\n    def cleanup(exception):\n        cleanup_stuff.append(exception)\n\n    with app.app_context():\n        pass\n\n    assert cleanup_stuff == [None],type='function_definition'\nline_star:41,line_end:51|char_star:0,char_end:34"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_app_tearing_down(app):\n    cleanup_stuff = []\n\n    @app.teardown_appcontext\n    def cleanup(exception):\n        cleanup_stuff.append(exception)\n\n    with app.app_context():\n        pass\n\n    assert cleanup_stuff == [None],type='function_definition'\nline_star:41,line_end:51|char_star:0,char_end:34";
"test_app_tearing_down,type='identifier'\nline_star:41,line_end:41|char_star:4,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"def test_app_tearing_down(app):\n    cleanup_stuff = []\n\n    @app.teardown_appcontext\n    def cleanup(exception):\n        cleanup_stuff.append(exception)\n\n    with app.app_context():\n        pass\n\n    assert cleanup_stuff == [None],type='function_definition'\nline_star:41,line_end:51|char_star:0,char_end:34"->"test_app_tearing_down,type='identifier'\nline_star:41,line_end:41|char_star:4,char_end:25";
"(app),type='parameters'\nline_star:41,line_end:41|char_star:25,char_end:30"[shape="box",fillcolor="white",style=filled];
"def test_app_tearing_down(app):\n    cleanup_stuff = []\n\n    @app.teardown_appcontext\n    def cleanup(exception):\n        cleanup_stuff.append(exception)\n\n    with app.app_context():\n        pass\n\n    assert cleanup_stuff == [None],type='function_definition'\nline_star:41,line_end:51|char_star:0,char_end:34"->"(app),type='parameters'\nline_star:41,line_end:41|char_star:25,char_end:30";
"app,type='identifier'\nline_star:41,line_end:41|char_star:26,char_end:29"[shape="point",fillcolor="#121013",style=filled];
"(app),type='parameters'\nline_star:41,line_end:41|char_star:25,char_end:30"->"app,type='identifier'\nline_star:41,line_end:41|char_star:26,char_end:29";
"type='INFORMATION BLOCK'\nline_star:42,line_end:51|char_star:4,char_end:34"[shape="point",fillcolor="#121013",style=filled];
"def test_app_tearing_down(app):\n    cleanup_stuff = []\n\n    @app.teardown_appcontext\n    def cleanup(exception):\n        cleanup_stuff.append(exception)\n\n    with app.app_context():\n        pass\n\n    assert cleanup_stuff == [None],type='function_definition'\nline_star:41,line_end:51|char_star:0,char_end:34"->"type='INFORMATION BLOCK'\nline_star:42,line_end:51|char_star:4,char_end:34";
"@app.teardown_appcontext\n    def cleanup(exception):\n        cleanup_stuff.append(exception),type='decorated_definition'\nline_star:44,line_end:46|char_star:4,char_end:39"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:42,line_end:51|char_star:4,char_end:34"->"@app.teardown_appcontext\n    def cleanup(exception):\n        cleanup_stuff.append(exception),type='decorated_definition'\nline_star:44,line_end:46|char_star:4,char_end:39";
"@app.teardown_appcontext,type='decorator'\nline_star:44,line_end:44|char_star:4,char_end:28"[shape="box",fillcolor="white",style=filled];
"@app.teardown_appcontext\n    def cleanup(exception):\n        cleanup_stuff.append(exception),type='decorated_definition'\nline_star:44,line_end:46|char_star:4,char_end:39"->"@app.teardown_appcontext,type='decorator'\nline_star:44,line_end:44|char_star:4,char_end:28";
"def cleanup(exception):\n        cleanup_stuff.append(exception),type='function_definition'\nline_star:45,line_end:46|char_star:4,char_end:39"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.teardown_appcontext\n    def cleanup(exception):\n        cleanup_stuff.append(exception),type='decorated_definition'\nline_star:44,line_end:46|char_star:4,char_end:39"->"def cleanup(exception):\n        cleanup_stuff.append(exception),type='function_definition'\nline_star:45,line_end:46|char_star:4,char_end:39";
"cleanup,type='identifier'\nline_star:45,line_end:45|char_star:8,char_end:15"[shape="point",fillcolor="#121013",style=filled];
"def cleanup(exception):\n        cleanup_stuff.append(exception),type='function_definition'\nline_star:45,line_end:46|char_star:4,char_end:39"->"cleanup,type='identifier'\nline_star:45,line_end:45|char_star:8,char_end:15";
"(exception),type='parameters'\nline_star:45,line_end:45|char_star:15,char_end:26"[shape="box",fillcolor="white",style=filled];
"def cleanup(exception):\n        cleanup_stuff.append(exception),type='function_definition'\nline_star:45,line_end:46|char_star:4,char_end:39"->"(exception),type='parameters'\nline_star:45,line_end:45|char_star:15,char_end:26";
"exception,type='identifier'\nline_star:45,line_end:45|char_star:16,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"(exception),type='parameters'\nline_star:45,line_end:45|char_star:15,char_end:26"->"exception,type='identifier'\nline_star:45,line_end:45|char_star:16,char_end:25";
"type='INFORMATION BLOCK'\nline_star:46,line_end:46|char_star:8,char_end:39"[shape="point",fillcolor="#121013",style=filled];
"def cleanup(exception):\n        cleanup_stuff.append(exception),type='function_definition'\nline_star:45,line_end:46|char_star:4,char_end:39"->"type='INFORMATION BLOCK'\nline_star:46,line_end:46|char_star:8,char_end:39";
"with app.app_context():\n        pass,type='with_statement'\nline_star:48,line_end:49|char_star:4,char_end:12"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:42,line_end:51|char_star:4,char_end:34"->"with app.app_context():\n        pass,type='with_statement'\nline_star:48,line_end:49|char_star:4,char_end:12";
"app.app_context(),type='with_clause'\nline_star:48,line_end:48|char_star:9,char_end:26"[shape="box",fillcolor="white",style=filled];
"with app.app_context():\n        pass,type='with_statement'\nline_star:48,line_end:49|char_star:4,char_end:12"->"app.app_context(),type='with_clause'\nline_star:48,line_end:48|char_star:9,char_end:26";
"type='INFORMATION BLOCK'\nline_star:49,line_end:49|char_star:8,char_end:12"[shape="point",fillcolor="#121013",style=filled];
"with app.app_context():\n        pass,type='with_statement'\nline_star:48,line_end:49|char_star:4,char_end:12"->"type='INFORMATION BLOCK'\nline_star:49,line_end:49|char_star:8,char_end:12";
"pass,type='pass_statement'\nline_star:49,line_end:49|char_star:8,char_end:12"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:49,line_end:49|char_star:8,char_end:12"->"pass,type='pass_statement'\nline_star:49,line_end:49|char_star:8,char_end:12";
"pass,type='pass'\nline_star:49,line_end:49|char_star:8,char_end:12"[shape="box",fillcolor="white",style=filled];
"pass,type='pass_statement'\nline_star:49,line_end:49|char_star:8,char_end:12"->"pass,type='pass'\nline_star:49,line_end:49|char_star:8,char_end:12";
"assert cleanup_stuff == [None],type='assert_statement'\nline_star:51,line_end:51|char_star:4,char_end:34"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:42,line_end:51|char_star:4,char_end:34"->"assert cleanup_stuff == [None],type='assert_statement'\nline_star:51,line_end:51|char_star:4,char_end:34";
"cleanup_stuff == [None],type='comparison_operator'\nline_star:51,line_end:51|char_star:11,char_end:34"[shape="box",fillcolor="white",style=filled];
"assert cleanup_stuff == [None],type='assert_statement'\nline_star:51,line_end:51|char_star:4,char_end:34"->"cleanup_stuff == [None],type='comparison_operator'\nline_star:51,line_end:51|char_star:11,char_end:34";
"cleanup_stuff,type='identifier'\nline_star:51,line_end:51|char_star:11,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"cleanup_stuff == [None],type='comparison_operator'\nline_star:51,line_end:51|char_star:11,char_end:34"->"cleanup_stuff,type='identifier'\nline_star:51,line_end:51|char_star:11,char_end:24";
"[None],type='list'\nline_star:51,line_end:51|char_star:28,char_end:34"[shape="box",fillcolor="white",style=filled];
"cleanup_stuff == [None],type='comparison_operator'\nline_star:51,line_end:51|char_star:11,char_end:34"->"[None],type='list'\nline_star:51,line_end:51|char_star:28,char_end:34";
"def test_app_tearing_down_with_previous_exception(app):\n    cleanup_stuff = []\n\n    @app.teardown_appcontext\n    def cleanup(exception):\n        cleanup_stuff.append(exception)\n\n    try:\n        raise Exception('dummy')\n    except Exception:\n        pass\n\n    with app.app_context():\n        pass\n\n    assert cleanup_stuff == [None],type='function_definition'\nline_star:54,line_end:69|char_star:0,char_end:34"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_app_tearing_down_with_previous_exception(app):\n    cleanup_stuff = []\n\n    @app.teardown_appcontext\n    def cleanup(exception):\n        cleanup_stuff.append(exception)\n\n    try:\n        raise Exception('dummy')\n    except Exception:\n        pass\n\n    with app.app_context():\n        pass\n\n    assert cleanup_stuff == [None],type='function_definition'\nline_star:54,line_end:69|char_star:0,char_end:34";
"test_app_tearing_down_with_previous_exception,type='identifier'\nline_star:54,line_end:54|char_star:4,char_end:49"[shape="point",fillcolor="#121013",style=filled];
"def test_app_tearing_down_with_previous_exception(app):\n    cleanup_stuff = []\n\n    @app.teardown_appcontext\n    def cleanup(exception):\n        cleanup_stuff.append(exception)\n\n    try:\n        raise Exception('dummy')\n    except Exception:\n        pass\n\n    with app.app_context():\n        pass\n\n    assert cleanup_stuff == [None],type='function_definition'\nline_star:54,line_end:69|char_star:0,char_end:34"->"test_app_tearing_down_with_previous_exception,type='identifier'\nline_star:54,line_end:54|char_star:4,char_end:49";
"(app),type='parameters'\nline_star:54,line_end:54|char_star:49,char_end:54"[shape="box",fillcolor="white",style=filled];
"def test_app_tearing_down_with_previous_exception(app):\n    cleanup_stuff = []\n\n    @app.teardown_appcontext\n    def cleanup(exception):\n        cleanup_stuff.append(exception)\n\n    try:\n        raise Exception('dummy')\n    except Exception:\n        pass\n\n    with app.app_context():\n        pass\n\n    assert cleanup_stuff == [None],type='function_definition'\nline_star:54,line_end:69|char_star:0,char_end:34"->"(app),type='parameters'\nline_star:54,line_end:54|char_star:49,char_end:54";
"app,type='identifier'\nline_star:54,line_end:54|char_star:50,char_end:53"[shape="point",fillcolor="#121013",style=filled];
"(app),type='parameters'\nline_star:54,line_end:54|char_star:49,char_end:54"->"app,type='identifier'\nline_star:54,line_end:54|char_star:50,char_end:53";
"type='INFORMATION BLOCK'\nline_star:55,line_end:69|char_star:4,char_end:34"[shape="point",fillcolor="#121013",style=filled];
"def test_app_tearing_down_with_previous_exception(app):\n    cleanup_stuff = []\n\n    @app.teardown_appcontext\n    def cleanup(exception):\n        cleanup_stuff.append(exception)\n\n    try:\n        raise Exception('dummy')\n    except Exception:\n        pass\n\n    with app.app_context():\n        pass\n\n    assert cleanup_stuff == [None],type='function_definition'\nline_star:54,line_end:69|char_star:0,char_end:34"->"type='INFORMATION BLOCK'\nline_star:55,line_end:69|char_star:4,char_end:34";
"@app.teardown_appcontext\n    def cleanup(exception):\n        cleanup_stuff.append(exception),type='decorated_definition'\nline_star:57,line_end:59|char_star:4,char_end:39"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:55,line_end:69|char_star:4,char_end:34"->"@app.teardown_appcontext\n    def cleanup(exception):\n        cleanup_stuff.append(exception),type='decorated_definition'\nline_star:57,line_end:59|char_star:4,char_end:39";
"@app.teardown_appcontext,type='decorator'\nline_star:57,line_end:57|char_star:4,char_end:28"[shape="box",fillcolor="white",style=filled];
"@app.teardown_appcontext\n    def cleanup(exception):\n        cleanup_stuff.append(exception),type='decorated_definition'\nline_star:57,line_end:59|char_star:4,char_end:39"->"@app.teardown_appcontext,type='decorator'\nline_star:57,line_end:57|char_star:4,char_end:28";
"def cleanup(exception):\n        cleanup_stuff.append(exception),type='function_definition'\nline_star:58,line_end:59|char_star:4,char_end:39"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.teardown_appcontext\n    def cleanup(exception):\n        cleanup_stuff.append(exception),type='decorated_definition'\nline_star:57,line_end:59|char_star:4,char_end:39"->"def cleanup(exception):\n        cleanup_stuff.append(exception),type='function_definition'\nline_star:58,line_end:59|char_star:4,char_end:39";
"cleanup,type='identifier'\nline_star:58,line_end:58|char_star:8,char_end:15"[shape="point",fillcolor="#121013",style=filled];
"def cleanup(exception):\n        cleanup_stuff.append(exception),type='function_definition'\nline_star:58,line_end:59|char_star:4,char_end:39"->"cleanup,type='identifier'\nline_star:58,line_end:58|char_star:8,char_end:15";
"(exception),type='parameters'\nline_star:58,line_end:58|char_star:15,char_end:26"[shape="box",fillcolor="white",style=filled];
"def cleanup(exception):\n        cleanup_stuff.append(exception),type='function_definition'\nline_star:58,line_end:59|char_star:4,char_end:39"->"(exception),type='parameters'\nline_star:58,line_end:58|char_star:15,char_end:26";
"exception,type='identifier'\nline_star:58,line_end:58|char_star:16,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"(exception),type='parameters'\nline_star:58,line_end:58|char_star:15,char_end:26"->"exception,type='identifier'\nline_star:58,line_end:58|char_star:16,char_end:25";
"type='INFORMATION BLOCK'\nline_star:59,line_end:59|char_star:8,char_end:39"[shape="point",fillcolor="#121013",style=filled];
"def cleanup(exception):\n        cleanup_stuff.append(exception),type='function_definition'\nline_star:58,line_end:59|char_star:4,char_end:39"->"type='INFORMATION BLOCK'\nline_star:59,line_end:59|char_star:8,char_end:39";
"try:\n        raise Exception('dummy')\n    except Exception:\n        pass,type='try_statement'\nline_star:61,line_end:64|char_star:4,char_end:12"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:55,line_end:69|char_star:4,char_end:34"->"try:\n        raise Exception('dummy')\n    except Exception:\n        pass,type='try_statement'\nline_star:61,line_end:64|char_star:4,char_end:12";
"try,type='try'\nline_star:61,line_end:61|char_star:4,char_end:7"[shape="box",fillcolor="white",style=filled];
"try:\n        raise Exception('dummy')\n    except Exception:\n        pass,type='try_statement'\nline_star:61,line_end:64|char_star:4,char_end:12"->"try,type='try'\nline_star:61,line_end:61|char_star:4,char_end:7";
"type='INFORMATION BLOCK'\nline_star:62,line_end:62|char_star:8,char_end:32"[shape="point",fillcolor="#121013",style=filled];
"try:\n        raise Exception('dummy')\n    except Exception:\n        pass,type='try_statement'\nline_star:61,line_end:64|char_star:4,char_end:12"->"type='INFORMATION BLOCK'\nline_star:62,line_end:62|char_star:8,char_end:32";
"raise Exception('dummy'),type='raise_statement'\nline_star:62,line_end:62|char_star:8,char_end:32"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:62,line_end:62|char_star:8,char_end:32"->"raise Exception('dummy'),type='raise_statement'\nline_star:62,line_end:62|char_star:8,char_end:32";
"raise,type='raise'\nline_star:62,line_end:62|char_star:8,char_end:13"[shape="box",fillcolor="white",style=filled];
"raise Exception('dummy'),type='raise_statement'\nline_star:62,line_end:62|char_star:8,char_end:32"->"raise,type='raise'\nline_star:62,line_end:62|char_star:8,char_end:13";
"Exception('dummy'),type='call'\nline_star:62,line_end:62|char_star:14,char_end:32"[shape="box",fillcolor="white",style=filled];
"raise Exception('dummy'),type='raise_statement'\nline_star:62,line_end:62|char_star:8,char_end:32"->"Exception('dummy'),type='call'\nline_star:62,line_end:62|char_star:14,char_end:32";
"Exception,type='identifier'\nline_star:62,line_end:62|char_star:14,char_end:23"[shape="point",fillcolor="#121013",style=filled];
"Exception('dummy'),type='call'\nline_star:62,line_end:62|char_star:14,char_end:32"->"Exception,type='identifier'\nline_star:62,line_end:62|char_star:14,char_end:23";
"('dummy'),type='argument_list'\nline_star:62,line_end:62|char_star:23,char_end:32"[shape="box",fillcolor="white",style=filled];
"Exception('dummy'),type='call'\nline_star:62,line_end:62|char_star:14,char_end:32"->"('dummy'),type='argument_list'\nline_star:62,line_end:62|char_star:23,char_end:32";
"except Exception:\n        pass,type='except_clause'\nline_star:63,line_end:64|char_star:4,char_end:12"[shape="box",fillcolor="white",style=filled];
"try:\n        raise Exception('dummy')\n    except Exception:\n        pass,type='try_statement'\nline_star:61,line_end:64|char_star:4,char_end:12"->"except Exception:\n        pass,type='except_clause'\nline_star:63,line_end:64|char_star:4,char_end:12";
"except,type='except'\nline_star:63,line_end:63|char_star:4,char_end:10"[shape="box",fillcolor="white",style=filled];
"except Exception:\n        pass,type='except_clause'\nline_star:63,line_end:64|char_star:4,char_end:12"->"except,type='except'\nline_star:63,line_end:63|char_star:4,char_end:10";
"Exception,type='identifier'\nline_star:63,line_end:63|char_star:11,char_end:20"[shape="point",fillcolor="#121013",style=filled];
"except Exception:\n        pass,type='except_clause'\nline_star:63,line_end:64|char_star:4,char_end:12"->"Exception,type='identifier'\nline_star:63,line_end:63|char_star:11,char_end:20";
"type='INFORMATION BLOCK'\nline_star:64,line_end:64|char_star:8,char_end:12"[shape="point",fillcolor="#121013",style=filled];
"except Exception:\n        pass,type='except_clause'\nline_star:63,line_end:64|char_star:4,char_end:12"->"type='INFORMATION BLOCK'\nline_star:64,line_end:64|char_star:8,char_end:12";
"pass,type='pass_statement'\nline_star:64,line_end:64|char_star:8,char_end:12"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:64,line_end:64|char_star:8,char_end:12"->"pass,type='pass_statement'\nline_star:64,line_end:64|char_star:8,char_end:12";
"pass,type='pass'\nline_star:64,line_end:64|char_star:8,char_end:12"[shape="box",fillcolor="white",style=filled];
"pass,type='pass_statement'\nline_star:64,line_end:64|char_star:8,char_end:12"->"pass,type='pass'\nline_star:64,line_end:64|char_star:8,char_end:12";
"with app.app_context():\n        pass,type='with_statement'\nline_star:66,line_end:67|char_star:4,char_end:12"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:55,line_end:69|char_star:4,char_end:34"->"with app.app_context():\n        pass,type='with_statement'\nline_star:66,line_end:67|char_star:4,char_end:12";
"app.app_context(),type='with_clause'\nline_star:66,line_end:66|char_star:9,char_end:26"[shape="box",fillcolor="white",style=filled];
"with app.app_context():\n        pass,type='with_statement'\nline_star:66,line_end:67|char_star:4,char_end:12"->"app.app_context(),type='with_clause'\nline_star:66,line_end:66|char_star:9,char_end:26";
"type='INFORMATION BLOCK'\nline_star:67,line_end:67|char_star:8,char_end:12"[shape="point",fillcolor="#121013",style=filled];
"with app.app_context():\n        pass,type='with_statement'\nline_star:66,line_end:67|char_star:4,char_end:12"->"type='INFORMATION BLOCK'\nline_star:67,line_end:67|char_star:8,char_end:12";
"pass,type='pass_statement'\nline_star:67,line_end:67|char_star:8,char_end:12"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:67,line_end:67|char_star:8,char_end:12"->"pass,type='pass_statement'\nline_star:67,line_end:67|char_star:8,char_end:12";
"pass,type='pass'\nline_star:67,line_end:67|char_star:8,char_end:12"[shape="box",fillcolor="white",style=filled];
"pass,type='pass_statement'\nline_star:67,line_end:67|char_star:8,char_end:12"->"pass,type='pass'\nline_star:67,line_end:67|char_star:8,char_end:12";
"assert cleanup_stuff == [None],type='assert_statement'\nline_star:69,line_end:69|char_star:4,char_end:34"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:55,line_end:69|char_star:4,char_end:34"->"assert cleanup_stuff == [None],type='assert_statement'\nline_star:69,line_end:69|char_star:4,char_end:34";
"cleanup_stuff == [None],type='comparison_operator'\nline_star:69,line_end:69|char_star:11,char_end:34"[shape="box",fillcolor="white",style=filled];
"assert cleanup_stuff == [None],type='assert_statement'\nline_star:69,line_end:69|char_star:4,char_end:34"->"cleanup_stuff == [None],type='comparison_operator'\nline_star:69,line_end:69|char_star:11,char_end:34";
"cleanup_stuff,type='identifier'\nline_star:69,line_end:69|char_star:11,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"cleanup_stuff == [None],type='comparison_operator'\nline_star:69,line_end:69|char_star:11,char_end:34"->"cleanup_stuff,type='identifier'\nline_star:69,line_end:69|char_star:11,char_end:24";
"[None],type='list'\nline_star:69,line_end:69|char_star:28,char_end:34"[shape="box",fillcolor="white",style=filled];
"cleanup_stuff == [None],type='comparison_operator'\nline_star:69,line_end:69|char_star:11,char_end:34"->"[None],type='list'\nline_star:69,line_end:69|char_star:28,char_end:34";
"def test_app_tearing_down_with_handled_exception_by_except_block(app):\n    cleanup_stuff = []\n\n    @app.teardown_appcontext\n    def cleanup(exception):\n        cleanup_stuff.append(exception)\n\n    with app.app_context():\n        try:\n            raise Exception('dummy')\n        except Exception:\n            pass\n\n    assert cleanup_stuff == [None],type='function_definition'\nline_star:72,line_end:85|char_star:0,char_end:34"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_app_tearing_down_with_handled_exception_by_except_block(app):\n    cleanup_stuff = []\n\n    @app.teardown_appcontext\n    def cleanup(exception):\n        cleanup_stuff.append(exception)\n\n    with app.app_context():\n        try:\n            raise Exception('dummy')\n        except Exception:\n            pass\n\n    assert cleanup_stuff == [None],type='function_definition'\nline_star:72,line_end:85|char_star:0,char_end:34";
"test_app_tearing_down_with_handled_exception_by_except_block,type='identifier'\nline_star:72,line_end:72|char_star:4,char_end:64"[shape="point",fillcolor="#121013",style=filled];
"def test_app_tearing_down_with_handled_exception_by_except_block(app):\n    cleanup_stuff = []\n\n    @app.teardown_appcontext\n    def cleanup(exception):\n        cleanup_stuff.append(exception)\n\n    with app.app_context():\n        try:\n            raise Exception('dummy')\n        except Exception:\n            pass\n\n    assert cleanup_stuff == [None],type='function_definition'\nline_star:72,line_end:85|char_star:0,char_end:34"->"test_app_tearing_down_with_handled_exception_by_except_block,type='identifier'\nline_star:72,line_end:72|char_star:4,char_end:64";
"(app),type='parameters'\nline_star:72,line_end:72|char_star:64,char_end:69"[shape="box",fillcolor="white",style=filled];
"def test_app_tearing_down_with_handled_exception_by_except_block(app):\n    cleanup_stuff = []\n\n    @app.teardown_appcontext\n    def cleanup(exception):\n        cleanup_stuff.append(exception)\n\n    with app.app_context():\n        try:\n            raise Exception('dummy')\n        except Exception:\n            pass\n\n    assert cleanup_stuff == [None],type='function_definition'\nline_star:72,line_end:85|char_star:0,char_end:34"->"(app),type='parameters'\nline_star:72,line_end:72|char_star:64,char_end:69";
"app,type='identifier'\nline_star:72,line_end:72|char_star:65,char_end:68"[shape="point",fillcolor="#121013",style=filled];
"(app),type='parameters'\nline_star:72,line_end:72|char_star:64,char_end:69"->"app,type='identifier'\nline_star:72,line_end:72|char_star:65,char_end:68";
"type='INFORMATION BLOCK'\nline_star:73,line_end:85|char_star:4,char_end:34"[shape="point",fillcolor="#121013",style=filled];
"def test_app_tearing_down_with_handled_exception_by_except_block(app):\n    cleanup_stuff = []\n\n    @app.teardown_appcontext\n    def cleanup(exception):\n        cleanup_stuff.append(exception)\n\n    with app.app_context():\n        try:\n            raise Exception('dummy')\n        except Exception:\n            pass\n\n    assert cleanup_stuff == [None],type='function_definition'\nline_star:72,line_end:85|char_star:0,char_end:34"->"type='INFORMATION BLOCK'\nline_star:73,line_end:85|char_star:4,char_end:34";
"@app.teardown_appcontext\n    def cleanup(exception):\n        cleanup_stuff.append(exception),type='decorated_definition'\nline_star:75,line_end:77|char_star:4,char_end:39"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:73,line_end:85|char_star:4,char_end:34"->"@app.teardown_appcontext\n    def cleanup(exception):\n        cleanup_stuff.append(exception),type='decorated_definition'\nline_star:75,line_end:77|char_star:4,char_end:39";
"@app.teardown_appcontext,type='decorator'\nline_star:75,line_end:75|char_star:4,char_end:28"[shape="box",fillcolor="white",style=filled];
"@app.teardown_appcontext\n    def cleanup(exception):\n        cleanup_stuff.append(exception),type='decorated_definition'\nline_star:75,line_end:77|char_star:4,char_end:39"->"@app.teardown_appcontext,type='decorator'\nline_star:75,line_end:75|char_star:4,char_end:28";
"def cleanup(exception):\n        cleanup_stuff.append(exception),type='function_definition'\nline_star:76,line_end:77|char_star:4,char_end:39"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.teardown_appcontext\n    def cleanup(exception):\n        cleanup_stuff.append(exception),type='decorated_definition'\nline_star:75,line_end:77|char_star:4,char_end:39"->"def cleanup(exception):\n        cleanup_stuff.append(exception),type='function_definition'\nline_star:76,line_end:77|char_star:4,char_end:39";
"cleanup,type='identifier'\nline_star:76,line_end:76|char_star:8,char_end:15"[shape="point",fillcolor="#121013",style=filled];
"def cleanup(exception):\n        cleanup_stuff.append(exception),type='function_definition'\nline_star:76,line_end:77|char_star:4,char_end:39"->"cleanup,type='identifier'\nline_star:76,line_end:76|char_star:8,char_end:15";
"(exception),type='parameters'\nline_star:76,line_end:76|char_star:15,char_end:26"[shape="box",fillcolor="white",style=filled];
"def cleanup(exception):\n        cleanup_stuff.append(exception),type='function_definition'\nline_star:76,line_end:77|char_star:4,char_end:39"->"(exception),type='parameters'\nline_star:76,line_end:76|char_star:15,char_end:26";
"exception,type='identifier'\nline_star:76,line_end:76|char_star:16,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"(exception),type='parameters'\nline_star:76,line_end:76|char_star:15,char_end:26"->"exception,type='identifier'\nline_star:76,line_end:76|char_star:16,char_end:25";
"type='INFORMATION BLOCK'\nline_star:77,line_end:77|char_star:8,char_end:39"[shape="point",fillcolor="#121013",style=filled];
"def cleanup(exception):\n        cleanup_stuff.append(exception),type='function_definition'\nline_star:76,line_end:77|char_star:4,char_end:39"->"type='INFORMATION BLOCK'\nline_star:77,line_end:77|char_star:8,char_end:39";
"with app.app_context():\n        try:\n            raise Exception('dummy')\n        except Exception:\n            pass,type='with_statement'\nline_star:79,line_end:83|char_star:4,char_end:16"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:73,line_end:85|char_star:4,char_end:34"->"with app.app_context():\n        try:\n            raise Exception('dummy')\n        except Exception:\n            pass,type='with_statement'\nline_star:79,line_end:83|char_star:4,char_end:16";
"app.app_context(),type='with_clause'\nline_star:79,line_end:79|char_star:9,char_end:26"[shape="box",fillcolor="white",style=filled];
"with app.app_context():\n        try:\n            raise Exception('dummy')\n        except Exception:\n            pass,type='with_statement'\nline_star:79,line_end:83|char_star:4,char_end:16"->"app.app_context(),type='with_clause'\nline_star:79,line_end:79|char_star:9,char_end:26";
"type='INFORMATION BLOCK'\nline_star:80,line_end:83|char_star:8,char_end:16"[shape="point",fillcolor="#121013",style=filled];
"with app.app_context():\n        try:\n            raise Exception('dummy')\n        except Exception:\n            pass,type='with_statement'\nline_star:79,line_end:83|char_star:4,char_end:16"->"type='INFORMATION BLOCK'\nline_star:80,line_end:83|char_star:8,char_end:16";
"try:\n            raise Exception('dummy')\n        except Exception:\n            pass,type='try_statement'\nline_star:80,line_end:83|char_star:8,char_end:16"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:80,line_end:83|char_star:8,char_end:16"->"try:\n            raise Exception('dummy')\n        except Exception:\n            pass,type='try_statement'\nline_star:80,line_end:83|char_star:8,char_end:16";
"try,type='try'\nline_star:80,line_end:80|char_star:8,char_end:11"[shape="box",fillcolor="white",style=filled];
"try:\n            raise Exception('dummy')\n        except Exception:\n            pass,type='try_statement'\nline_star:80,line_end:83|char_star:8,char_end:16"->"try,type='try'\nline_star:80,line_end:80|char_star:8,char_end:11";
"type='INFORMATION BLOCK'\nline_star:81,line_end:81|char_star:12,char_end:36"[shape="point",fillcolor="#121013",style=filled];
"try:\n            raise Exception('dummy')\n        except Exception:\n            pass,type='try_statement'\nline_star:80,line_end:83|char_star:8,char_end:16"->"type='INFORMATION BLOCK'\nline_star:81,line_end:81|char_star:12,char_end:36";
"raise Exception('dummy'),type='raise_statement'\nline_star:81,line_end:81|char_star:12,char_end:36"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:81,line_end:81|char_star:12,char_end:36"->"raise Exception('dummy'),type='raise_statement'\nline_star:81,line_end:81|char_star:12,char_end:36";
"raise,type='raise'\nline_star:81,line_end:81|char_star:12,char_end:17"[shape="box",fillcolor="white",style=filled];
"raise Exception('dummy'),type='raise_statement'\nline_star:81,line_end:81|char_star:12,char_end:36"->"raise,type='raise'\nline_star:81,line_end:81|char_star:12,char_end:17";
"Exception('dummy'),type='call'\nline_star:81,line_end:81|char_star:18,char_end:36"[shape="box",fillcolor="white",style=filled];
"raise Exception('dummy'),type='raise_statement'\nline_star:81,line_end:81|char_star:12,char_end:36"->"Exception('dummy'),type='call'\nline_star:81,line_end:81|char_star:18,char_end:36";
"Exception,type='identifier'\nline_star:81,line_end:81|char_star:18,char_end:27"[shape="point",fillcolor="#121013",style=filled];
"Exception('dummy'),type='call'\nline_star:81,line_end:81|char_star:18,char_end:36"->"Exception,type='identifier'\nline_star:81,line_end:81|char_star:18,char_end:27";
"('dummy'),type='argument_list'\nline_star:81,line_end:81|char_star:27,char_end:36"[shape="box",fillcolor="white",style=filled];
"Exception('dummy'),type='call'\nline_star:81,line_end:81|char_star:18,char_end:36"->"('dummy'),type='argument_list'\nline_star:81,line_end:81|char_star:27,char_end:36";
"except Exception:\n            pass,type='except_clause'\nline_star:82,line_end:83|char_star:8,char_end:16"[shape="box",fillcolor="white",style=filled];
"try:\n            raise Exception('dummy')\n        except Exception:\n            pass,type='try_statement'\nline_star:80,line_end:83|char_star:8,char_end:16"->"except Exception:\n            pass,type='except_clause'\nline_star:82,line_end:83|char_star:8,char_end:16";
"except,type='except'\nline_star:82,line_end:82|char_star:8,char_end:14"[shape="box",fillcolor="white",style=filled];
"except Exception:\n            pass,type='except_clause'\nline_star:82,line_end:83|char_star:8,char_end:16"->"except,type='except'\nline_star:82,line_end:82|char_star:8,char_end:14";
"Exception,type='identifier'\nline_star:82,line_end:82|char_star:15,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"except Exception:\n            pass,type='except_clause'\nline_star:82,line_end:83|char_star:8,char_end:16"->"Exception,type='identifier'\nline_star:82,line_end:82|char_star:15,char_end:24";
"type='INFORMATION BLOCK'\nline_star:83,line_end:83|char_star:12,char_end:16"[shape="point",fillcolor="#121013",style=filled];
"except Exception:\n            pass,type='except_clause'\nline_star:82,line_end:83|char_star:8,char_end:16"->"type='INFORMATION BLOCK'\nline_star:83,line_end:83|char_star:12,char_end:16";
"pass,type='pass_statement'\nline_star:83,line_end:83|char_star:12,char_end:16"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:83,line_end:83|char_star:12,char_end:16"->"pass,type='pass_statement'\nline_star:83,line_end:83|char_star:12,char_end:16";
"pass,type='pass'\nline_star:83,line_end:83|char_star:12,char_end:16"[shape="box",fillcolor="white",style=filled];
"pass,type='pass_statement'\nline_star:83,line_end:83|char_star:12,char_end:16"->"pass,type='pass'\nline_star:83,line_end:83|char_star:12,char_end:16";
"assert cleanup_stuff == [None],type='assert_statement'\nline_star:85,line_end:85|char_star:4,char_end:34"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:73,line_end:85|char_star:4,char_end:34"->"assert cleanup_stuff == [None],type='assert_statement'\nline_star:85,line_end:85|char_star:4,char_end:34";
"cleanup_stuff == [None],type='comparison_operator'\nline_star:85,line_end:85|char_star:11,char_end:34"[shape="box",fillcolor="white",style=filled];
"assert cleanup_stuff == [None],type='assert_statement'\nline_star:85,line_end:85|char_star:4,char_end:34"->"cleanup_stuff == [None],type='comparison_operator'\nline_star:85,line_end:85|char_star:11,char_end:34";
"cleanup_stuff,type='identifier'\nline_star:85,line_end:85|char_star:11,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"cleanup_stuff == [None],type='comparison_operator'\nline_star:85,line_end:85|char_star:11,char_end:34"->"cleanup_stuff,type='identifier'\nline_star:85,line_end:85|char_star:11,char_end:24";
"[None],type='list'\nline_star:85,line_end:85|char_star:28,char_end:34"[shape="box",fillcolor="white",style=filled];
"cleanup_stuff == [None],type='comparison_operator'\nline_star:85,line_end:85|char_star:11,char_end:34"->"[None],type='list'\nline_star:85,line_end:85|char_star:28,char_end:34";
"def test_app_tearing_down_with_handled_exception_by_app_handler(app, client):\n    app.config['PROPAGATE_EXCEPTIONS'] = True\n    cleanup_stuff = []\n\n    @app.teardown_appcontext\n    def cleanup(exception):\n        cleanup_stuff.append(exception)\n\n    @app.route('/')\n    def index():\n        raise Exception('dummy')\n\n    @app.errorhandler(Exception)\n    def handler(f):\n        return flask.jsonify(str(f))\n\n    with app.app_context():\n        client.get('/')\n\n    assert cleanup_stuff == [None],type='function_definition'\nline_star:88,line_end:107|char_star:0,char_end:34"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_app_tearing_down_with_handled_exception_by_app_handler(app, client):\n    app.config['PROPAGATE_EXCEPTIONS'] = True\n    cleanup_stuff = []\n\n    @app.teardown_appcontext\n    def cleanup(exception):\n        cleanup_stuff.append(exception)\n\n    @app.route('/')\n    def index():\n        raise Exception('dummy')\n\n    @app.errorhandler(Exception)\n    def handler(f):\n        return flask.jsonify(str(f))\n\n    with app.app_context():\n        client.get('/')\n\n    assert cleanup_stuff == [None],type='function_definition'\nline_star:88,line_end:107|char_star:0,char_end:34";
"test_app_tearing_down_with_handled_exception_by_app_handler,type='identifier'\nline_star:88,line_end:88|char_star:4,char_end:63"[shape="point",fillcolor="#121013",style=filled];
"def test_app_tearing_down_with_handled_exception_by_app_handler(app, client):\n    app.config['PROPAGATE_EXCEPTIONS'] = True\n    cleanup_stuff = []\n\n    @app.teardown_appcontext\n    def cleanup(exception):\n        cleanup_stuff.append(exception)\n\n    @app.route('/')\n    def index():\n        raise Exception('dummy')\n\n    @app.errorhandler(Exception)\n    def handler(f):\n        return flask.jsonify(str(f))\n\n    with app.app_context():\n        client.get('/')\n\n    assert cleanup_stuff == [None],type='function_definition'\nline_star:88,line_end:107|char_star:0,char_end:34"->"test_app_tearing_down_with_handled_exception_by_app_handler,type='identifier'\nline_star:88,line_end:88|char_star:4,char_end:63";
"(app, client),type='parameters'\nline_star:88,line_end:88|char_star:63,char_end:76"[shape="box",fillcolor="white",style=filled];
"def test_app_tearing_down_with_handled_exception_by_app_handler(app, client):\n    app.config['PROPAGATE_EXCEPTIONS'] = True\n    cleanup_stuff = []\n\n    @app.teardown_appcontext\n    def cleanup(exception):\n        cleanup_stuff.append(exception)\n\n    @app.route('/')\n    def index():\n        raise Exception('dummy')\n\n    @app.errorhandler(Exception)\n    def handler(f):\n        return flask.jsonify(str(f))\n\n    with app.app_context():\n        client.get('/')\n\n    assert cleanup_stuff == [None],type='function_definition'\nline_star:88,line_end:107|char_star:0,char_end:34"->"(app, client),type='parameters'\nline_star:88,line_end:88|char_star:63,char_end:76";
"app,type='identifier'\nline_star:88,line_end:88|char_star:64,char_end:67"[shape="point",fillcolor="#121013",style=filled];
"(app, client),type='parameters'\nline_star:88,line_end:88|char_star:63,char_end:76"->"app,type='identifier'\nline_star:88,line_end:88|char_star:64,char_end:67";
"client,type='identifier'\nline_star:88,line_end:88|char_star:69,char_end:75"[shape="point",fillcolor="#121013",style=filled];
"(app, client),type='parameters'\nline_star:88,line_end:88|char_star:63,char_end:76"->"client,type='identifier'\nline_star:88,line_end:88|char_star:69,char_end:75";
"type='INFORMATION BLOCK'\nline_star:89,line_end:107|char_star:4,char_end:34"[shape="point",fillcolor="#121013",style=filled];
"def test_app_tearing_down_with_handled_exception_by_app_handler(app, client):\n    app.config['PROPAGATE_EXCEPTIONS'] = True\n    cleanup_stuff = []\n\n    @app.teardown_appcontext\n    def cleanup(exception):\n        cleanup_stuff.append(exception)\n\n    @app.route('/')\n    def index():\n        raise Exception('dummy')\n\n    @app.errorhandler(Exception)\n    def handler(f):\n        return flask.jsonify(str(f))\n\n    with app.app_context():\n        client.get('/')\n\n    assert cleanup_stuff == [None],type='function_definition'\nline_star:88,line_end:107|char_star:0,char_end:34"->"type='INFORMATION BLOCK'\nline_star:89,line_end:107|char_star:4,char_end:34";
"@app.teardown_appcontext\n    def cleanup(exception):\n        cleanup_stuff.append(exception),type='decorated_definition'\nline_star:92,line_end:94|char_star:4,char_end:39"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:89,line_end:107|char_star:4,char_end:34"->"@app.teardown_appcontext\n    def cleanup(exception):\n        cleanup_stuff.append(exception),type='decorated_definition'\nline_star:92,line_end:94|char_star:4,char_end:39";
"@app.teardown_appcontext,type='decorator'\nline_star:92,line_end:92|char_star:4,char_end:28"[shape="box",fillcolor="white",style=filled];
"@app.teardown_appcontext\n    def cleanup(exception):\n        cleanup_stuff.append(exception),type='decorated_definition'\nline_star:92,line_end:94|char_star:4,char_end:39"->"@app.teardown_appcontext,type='decorator'\nline_star:92,line_end:92|char_star:4,char_end:28";
"def cleanup(exception):\n        cleanup_stuff.append(exception),type='function_definition'\nline_star:93,line_end:94|char_star:4,char_end:39"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.teardown_appcontext\n    def cleanup(exception):\n        cleanup_stuff.append(exception),type='decorated_definition'\nline_star:92,line_end:94|char_star:4,char_end:39"->"def cleanup(exception):\n        cleanup_stuff.append(exception),type='function_definition'\nline_star:93,line_end:94|char_star:4,char_end:39";
"cleanup,type='identifier'\nline_star:93,line_end:93|char_star:8,char_end:15"[shape="point",fillcolor="#121013",style=filled];
"def cleanup(exception):\n        cleanup_stuff.append(exception),type='function_definition'\nline_star:93,line_end:94|char_star:4,char_end:39"->"cleanup,type='identifier'\nline_star:93,line_end:93|char_star:8,char_end:15";
"(exception),type='parameters'\nline_star:93,line_end:93|char_star:15,char_end:26"[shape="box",fillcolor="white",style=filled];
"def cleanup(exception):\n        cleanup_stuff.append(exception),type='function_definition'\nline_star:93,line_end:94|char_star:4,char_end:39"->"(exception),type='parameters'\nline_star:93,line_end:93|char_star:15,char_end:26";
"exception,type='identifier'\nline_star:93,line_end:93|char_star:16,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"(exception),type='parameters'\nline_star:93,line_end:93|char_star:15,char_end:26"->"exception,type='identifier'\nline_star:93,line_end:93|char_star:16,char_end:25";
"type='INFORMATION BLOCK'\nline_star:94,line_end:94|char_star:8,char_end:39"[shape="point",fillcolor="#121013",style=filled];
"def cleanup(exception):\n        cleanup_stuff.append(exception),type='function_definition'\nline_star:93,line_end:94|char_star:4,char_end:39"->"type='INFORMATION BLOCK'\nline_star:94,line_end:94|char_star:8,char_end:39";
"@app.route('/')\n    def index():\n        raise Exception('dummy'),type='decorated_definition'\nline_star:96,line_end:98|char_star:4,char_end:32"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:89,line_end:107|char_star:4,char_end:34"->"@app.route('/')\n    def index():\n        raise Exception('dummy'),type='decorated_definition'\nline_star:96,line_end:98|char_star:4,char_end:32";
"@app.route('/'),type='decorator'\nline_star:96,line_end:96|char_star:4,char_end:19"[shape="box",fillcolor="white",style=filled];
"@app.route('/')\n    def index():\n        raise Exception('dummy'),type='decorated_definition'\nline_star:96,line_end:98|char_star:4,char_end:32"->"@app.route('/'),type='decorator'\nline_star:96,line_end:96|char_star:4,char_end:19";
"def index():\n        raise Exception('dummy'),type='function_definition'\nline_star:97,line_end:98|char_star:4,char_end:32"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.route('/')\n    def index():\n        raise Exception('dummy'),type='decorated_definition'\nline_star:96,line_end:98|char_star:4,char_end:32"->"def index():\n        raise Exception('dummy'),type='function_definition'\nline_star:97,line_end:98|char_star:4,char_end:32";
"index,type='identifier'\nline_star:97,line_end:97|char_star:8,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"def index():\n        raise Exception('dummy'),type='function_definition'\nline_star:97,line_end:98|char_star:4,char_end:32"->"index,type='identifier'\nline_star:97,line_end:97|char_star:8,char_end:13";
"type='INFORMATION BLOCK'\nline_star:98,line_end:98|char_star:8,char_end:32"[shape="point",fillcolor="#121013",style=filled];
"def index():\n        raise Exception('dummy'),type='function_definition'\nline_star:97,line_end:98|char_star:4,char_end:32"->"type='INFORMATION BLOCK'\nline_star:98,line_end:98|char_star:8,char_end:32";
"raise Exception('dummy'),type='raise_statement'\nline_star:98,line_end:98|char_star:8,char_end:32"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:98,line_end:98|char_star:8,char_end:32"->"raise Exception('dummy'),type='raise_statement'\nline_star:98,line_end:98|char_star:8,char_end:32";
"raise,type='raise'\nline_star:98,line_end:98|char_star:8,char_end:13"[shape="box",fillcolor="white",style=filled];
"raise Exception('dummy'),type='raise_statement'\nline_star:98,line_end:98|char_star:8,char_end:32"->"raise,type='raise'\nline_star:98,line_end:98|char_star:8,char_end:13";
"Exception('dummy'),type='call'\nline_star:98,line_end:98|char_star:14,char_end:32"[shape="box",fillcolor="white",style=filled];
"raise Exception('dummy'),type='raise_statement'\nline_star:98,line_end:98|char_star:8,char_end:32"->"Exception('dummy'),type='call'\nline_star:98,line_end:98|char_star:14,char_end:32";
"Exception,type='identifier'\nline_star:98,line_end:98|char_star:14,char_end:23"[shape="point",fillcolor="#121013",style=filled];
"Exception('dummy'),type='call'\nline_star:98,line_end:98|char_star:14,char_end:32"->"Exception,type='identifier'\nline_star:98,line_end:98|char_star:14,char_end:23";
"('dummy'),type='argument_list'\nline_star:98,line_end:98|char_star:23,char_end:32"[shape="box",fillcolor="white",style=filled];
"Exception('dummy'),type='call'\nline_star:98,line_end:98|char_star:14,char_end:32"->"('dummy'),type='argument_list'\nline_star:98,line_end:98|char_star:23,char_end:32";
"@app.errorhandler(Exception)\n    def handler(f):\n        return flask.jsonify(str(f)),type='decorated_definition'\nline_star:100,line_end:102|char_star:4,char_end:36"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:89,line_end:107|char_star:4,char_end:34"->"@app.errorhandler(Exception)\n    def handler(f):\n        return flask.jsonify(str(f)),type='decorated_definition'\nline_star:100,line_end:102|char_star:4,char_end:36";
"@app.errorhandler(Exception),type='decorator'\nline_star:100,line_end:100|char_star:4,char_end:32"[shape="box",fillcolor="white",style=filled];
"@app.errorhandler(Exception)\n    def handler(f):\n        return flask.jsonify(str(f)),type='decorated_definition'\nline_star:100,line_end:102|char_star:4,char_end:36"->"@app.errorhandler(Exception),type='decorator'\nline_star:100,line_end:100|char_star:4,char_end:32";
"def handler(f):\n        return flask.jsonify(str(f)),type='function_definition'\nline_star:101,line_end:102|char_star:4,char_end:36"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.errorhandler(Exception)\n    def handler(f):\n        return flask.jsonify(str(f)),type='decorated_definition'\nline_star:100,line_end:102|char_star:4,char_end:36"->"def handler(f):\n        return flask.jsonify(str(f)),type='function_definition'\nline_star:101,line_end:102|char_star:4,char_end:36";
"handler,type='identifier'\nline_star:101,line_end:101|char_star:8,char_end:15"[shape="point",fillcolor="#121013",style=filled];
"def handler(f):\n        return flask.jsonify(str(f)),type='function_definition'\nline_star:101,line_end:102|char_star:4,char_end:36"->"handler,type='identifier'\nline_star:101,line_end:101|char_star:8,char_end:15";
"(f),type='parameters'\nline_star:101,line_end:101|char_star:15,char_end:18"[shape="box",fillcolor="white",style=filled];
"def handler(f):\n        return flask.jsonify(str(f)),type='function_definition'\nline_star:101,line_end:102|char_star:4,char_end:36"->"(f),type='parameters'\nline_star:101,line_end:101|char_star:15,char_end:18";
"f,type='identifier'\nline_star:101,line_end:101|char_star:16,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"(f),type='parameters'\nline_star:101,line_end:101|char_star:15,char_end:18"->"f,type='identifier'\nline_star:101,line_end:101|char_star:16,char_end:17";
"type='INFORMATION BLOCK'\nline_star:102,line_end:102|char_star:8,char_end:36"[shape="point",fillcolor="#121013",style=filled];
"def handler(f):\n        return flask.jsonify(str(f)),type='function_definition'\nline_star:101,line_end:102|char_star:4,char_end:36"->"type='INFORMATION BLOCK'\nline_star:102,line_end:102|char_star:8,char_end:36";
"return flask.jsonify(str(f)),type='return_statement'\nline_star:102,line_end:102|char_star:8,char_end:36"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:102,line_end:102|char_star:8,char_end:36"->"return flask.jsonify(str(f)),type='return_statement'\nline_star:102,line_end:102|char_star:8,char_end:36";
"with app.app_context():\n        client.get('/'),type='with_statement'\nline_star:104,line_end:105|char_star:4,char_end:23"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:89,line_end:107|char_star:4,char_end:34"->"with app.app_context():\n        client.get('/'),type='with_statement'\nline_star:104,line_end:105|char_star:4,char_end:23";
"app.app_context(),type='with_clause'\nline_star:104,line_end:104|char_star:9,char_end:26"[shape="box",fillcolor="white",style=filled];
"with app.app_context():\n        client.get('/'),type='with_statement'\nline_star:104,line_end:105|char_star:4,char_end:23"->"app.app_context(),type='with_clause'\nline_star:104,line_end:104|char_star:9,char_end:26";
"type='INFORMATION BLOCK'\nline_star:105,line_end:105|char_star:8,char_end:23"[shape="point",fillcolor="#121013",style=filled];
"with app.app_context():\n        client.get('/'),type='with_statement'\nline_star:104,line_end:105|char_star:4,char_end:23"->"type='INFORMATION BLOCK'\nline_star:105,line_end:105|char_star:8,char_end:23";
"assert cleanup_stuff == [None],type='assert_statement'\nline_star:107,line_end:107|char_star:4,char_end:34"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:89,line_end:107|char_star:4,char_end:34"->"assert cleanup_stuff == [None],type='assert_statement'\nline_star:107,line_end:107|char_star:4,char_end:34";
"cleanup_stuff == [None],type='comparison_operator'\nline_star:107,line_end:107|char_star:11,char_end:34"[shape="box",fillcolor="white",style=filled];
"assert cleanup_stuff == [None],type='assert_statement'\nline_star:107,line_end:107|char_star:4,char_end:34"->"cleanup_stuff == [None],type='comparison_operator'\nline_star:107,line_end:107|char_star:11,char_end:34";
"cleanup_stuff,type='identifier'\nline_star:107,line_end:107|char_star:11,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"cleanup_stuff == [None],type='comparison_operator'\nline_star:107,line_end:107|char_star:11,char_end:34"->"cleanup_stuff,type='identifier'\nline_star:107,line_end:107|char_star:11,char_end:24";
"[None],type='list'\nline_star:107,line_end:107|char_star:28,char_end:34"[shape="box",fillcolor="white",style=filled];
"cleanup_stuff == [None],type='comparison_operator'\nline_star:107,line_end:107|char_star:11,char_end:34"->"[None],type='list'\nline_star:107,line_end:107|char_star:28,char_end:34";
"def test_app_tearing_down_with_unhandled_exception(app, client):\n    app.config['PROPAGATE_EXCEPTIONS'] = True\n    cleanup_stuff = []\n\n    @app.teardown_appcontext\n    def cleanup(exception):\n        cleanup_stuff.append(exception)\n\n    @app.route('/')\n    def index():\n        raise Exception('dummy')\n\n    with pytest.raises(Exception):\n        with app.app_context():\n            client.get('/')\n\n    assert len(cleanup_stuff) == 1\n    assert isinstance(cleanup_stuff[0], Exception)\n    assert str(cleanup_stuff[0]) == 'dummy',type='function_definition'\nline_star:110,line_end:128|char_star:0,char_end:43"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_app_tearing_down_with_unhandled_exception(app, client):\n    app.config['PROPAGATE_EXCEPTIONS'] = True\n    cleanup_stuff = []\n\n    @app.teardown_appcontext\n    def cleanup(exception):\n        cleanup_stuff.append(exception)\n\n    @app.route('/')\n    def index():\n        raise Exception('dummy')\n\n    with pytest.raises(Exception):\n        with app.app_context():\n            client.get('/')\n\n    assert len(cleanup_stuff) == 1\n    assert isinstance(cleanup_stuff[0], Exception)\n    assert str(cleanup_stuff[0]) == 'dummy',type='function_definition'\nline_star:110,line_end:128|char_star:0,char_end:43";
"test_app_tearing_down_with_unhandled_exception,type='identifier'\nline_star:110,line_end:110|char_star:4,char_end:50"[shape="point",fillcolor="#121013",style=filled];
"def test_app_tearing_down_with_unhandled_exception(app, client):\n    app.config['PROPAGATE_EXCEPTIONS'] = True\n    cleanup_stuff = []\n\n    @app.teardown_appcontext\n    def cleanup(exception):\n        cleanup_stuff.append(exception)\n\n    @app.route('/')\n    def index():\n        raise Exception('dummy')\n\n    with pytest.raises(Exception):\n        with app.app_context():\n            client.get('/')\n\n    assert len(cleanup_stuff) == 1\n    assert isinstance(cleanup_stuff[0], Exception)\n    assert str(cleanup_stuff[0]) == 'dummy',type='function_definition'\nline_star:110,line_end:128|char_star:0,char_end:43"->"test_app_tearing_down_with_unhandled_exception,type='identifier'\nline_star:110,line_end:110|char_star:4,char_end:50";
"(app, client),type='parameters'\nline_star:110,line_end:110|char_star:50,char_end:63"[shape="box",fillcolor="white",style=filled];
"def test_app_tearing_down_with_unhandled_exception(app, client):\n    app.config['PROPAGATE_EXCEPTIONS'] = True\n    cleanup_stuff = []\n\n    @app.teardown_appcontext\n    def cleanup(exception):\n        cleanup_stuff.append(exception)\n\n    @app.route('/')\n    def index():\n        raise Exception('dummy')\n\n    with pytest.raises(Exception):\n        with app.app_context():\n            client.get('/')\n\n    assert len(cleanup_stuff) == 1\n    assert isinstance(cleanup_stuff[0], Exception)\n    assert str(cleanup_stuff[0]) == 'dummy',type='function_definition'\nline_star:110,line_end:128|char_star:0,char_end:43"->"(app, client),type='parameters'\nline_star:110,line_end:110|char_star:50,char_end:63";
"app,type='identifier'\nline_star:110,line_end:110|char_star:51,char_end:54"[shape="point",fillcolor="#121013",style=filled];
"(app, client),type='parameters'\nline_star:110,line_end:110|char_star:50,char_end:63"->"app,type='identifier'\nline_star:110,line_end:110|char_star:51,char_end:54";
"client,type='identifier'\nline_star:110,line_end:110|char_star:56,char_end:62"[shape="point",fillcolor="#121013",style=filled];
"(app, client),type='parameters'\nline_star:110,line_end:110|char_star:50,char_end:63"->"client,type='identifier'\nline_star:110,line_end:110|char_star:56,char_end:62";
"type='INFORMATION BLOCK'\nline_star:111,line_end:128|char_star:4,char_end:43"[shape="point",fillcolor="#121013",style=filled];
"def test_app_tearing_down_with_unhandled_exception(app, client):\n    app.config['PROPAGATE_EXCEPTIONS'] = True\n    cleanup_stuff = []\n\n    @app.teardown_appcontext\n    def cleanup(exception):\n        cleanup_stuff.append(exception)\n\n    @app.route('/')\n    def index():\n        raise Exception('dummy')\n\n    with pytest.raises(Exception):\n        with app.app_context():\n            client.get('/')\n\n    assert len(cleanup_stuff) == 1\n    assert isinstance(cleanup_stuff[0], Exception)\n    assert str(cleanup_stuff[0]) == 'dummy',type='function_definition'\nline_star:110,line_end:128|char_star:0,char_end:43"->"type='INFORMATION BLOCK'\nline_star:111,line_end:128|char_star:4,char_end:43";
"@app.teardown_appcontext\n    def cleanup(exception):\n        cleanup_stuff.append(exception),type='decorated_definition'\nline_star:114,line_end:116|char_star:4,char_end:39"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:111,line_end:128|char_star:4,char_end:43"->"@app.teardown_appcontext\n    def cleanup(exception):\n        cleanup_stuff.append(exception),type='decorated_definition'\nline_star:114,line_end:116|char_star:4,char_end:39";
"@app.teardown_appcontext,type='decorator'\nline_star:114,line_end:114|char_star:4,char_end:28"[shape="box",fillcolor="white",style=filled];
"@app.teardown_appcontext\n    def cleanup(exception):\n        cleanup_stuff.append(exception),type='decorated_definition'\nline_star:114,line_end:116|char_star:4,char_end:39"->"@app.teardown_appcontext,type='decorator'\nline_star:114,line_end:114|char_star:4,char_end:28";
"def cleanup(exception):\n        cleanup_stuff.append(exception),type='function_definition'\nline_star:115,line_end:116|char_star:4,char_end:39"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.teardown_appcontext\n    def cleanup(exception):\n        cleanup_stuff.append(exception),type='decorated_definition'\nline_star:114,line_end:116|char_star:4,char_end:39"->"def cleanup(exception):\n        cleanup_stuff.append(exception),type='function_definition'\nline_star:115,line_end:116|char_star:4,char_end:39";
"cleanup,type='identifier'\nline_star:115,line_end:115|char_star:8,char_end:15"[shape="point",fillcolor="#121013",style=filled];
"def cleanup(exception):\n        cleanup_stuff.append(exception),type='function_definition'\nline_star:115,line_end:116|char_star:4,char_end:39"->"cleanup,type='identifier'\nline_star:115,line_end:115|char_star:8,char_end:15";
"(exception),type='parameters'\nline_star:115,line_end:115|char_star:15,char_end:26"[shape="box",fillcolor="white",style=filled];
"def cleanup(exception):\n        cleanup_stuff.append(exception),type='function_definition'\nline_star:115,line_end:116|char_star:4,char_end:39"->"(exception),type='parameters'\nline_star:115,line_end:115|char_star:15,char_end:26";
"exception,type='identifier'\nline_star:115,line_end:115|char_star:16,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"(exception),type='parameters'\nline_star:115,line_end:115|char_star:15,char_end:26"->"exception,type='identifier'\nline_star:115,line_end:115|char_star:16,char_end:25";
"type='INFORMATION BLOCK'\nline_star:116,line_end:116|char_star:8,char_end:39"[shape="point",fillcolor="#121013",style=filled];
"def cleanup(exception):\n        cleanup_stuff.append(exception),type='function_definition'\nline_star:115,line_end:116|char_star:4,char_end:39"->"type='INFORMATION BLOCK'\nline_star:116,line_end:116|char_star:8,char_end:39";
"@app.route('/')\n    def index():\n        raise Exception('dummy'),type='decorated_definition'\nline_star:118,line_end:120|char_star:4,char_end:32"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:111,line_end:128|char_star:4,char_end:43"->"@app.route('/')\n    def index():\n        raise Exception('dummy'),type='decorated_definition'\nline_star:118,line_end:120|char_star:4,char_end:32";
"@app.route('/'),type='decorator'\nline_star:118,line_end:118|char_star:4,char_end:19"[shape="box",fillcolor="white",style=filled];
"@app.route('/')\n    def index():\n        raise Exception('dummy'),type='decorated_definition'\nline_star:118,line_end:120|char_star:4,char_end:32"->"@app.route('/'),type='decorator'\nline_star:118,line_end:118|char_star:4,char_end:19";
"def index():\n        raise Exception('dummy'),type='function_definition'\nline_star:119,line_end:120|char_star:4,char_end:32"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.route('/')\n    def index():\n        raise Exception('dummy'),type='decorated_definition'\nline_star:118,line_end:120|char_star:4,char_end:32"->"def index():\n        raise Exception('dummy'),type='function_definition'\nline_star:119,line_end:120|char_star:4,char_end:32";
"index,type='identifier'\nline_star:119,line_end:119|char_star:8,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"def index():\n        raise Exception('dummy'),type='function_definition'\nline_star:119,line_end:120|char_star:4,char_end:32"->"index,type='identifier'\nline_star:119,line_end:119|char_star:8,char_end:13";
"type='INFORMATION BLOCK'\nline_star:120,line_end:120|char_star:8,char_end:32"[shape="point",fillcolor="#121013",style=filled];
"def index():\n        raise Exception('dummy'),type='function_definition'\nline_star:119,line_end:120|char_star:4,char_end:32"->"type='INFORMATION BLOCK'\nline_star:120,line_end:120|char_star:8,char_end:32";
"raise Exception('dummy'),type='raise_statement'\nline_star:120,line_end:120|char_star:8,char_end:32"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:120,line_end:120|char_star:8,char_end:32"->"raise Exception('dummy'),type='raise_statement'\nline_star:120,line_end:120|char_star:8,char_end:32";
"raise,type='raise'\nline_star:120,line_end:120|char_star:8,char_end:13"[shape="box",fillcolor="white",style=filled];
"raise Exception('dummy'),type='raise_statement'\nline_star:120,line_end:120|char_star:8,char_end:32"->"raise,type='raise'\nline_star:120,line_end:120|char_star:8,char_end:13";
"Exception('dummy'),type='call'\nline_star:120,line_end:120|char_star:14,char_end:32"[shape="box",fillcolor="white",style=filled];
"raise Exception('dummy'),type='raise_statement'\nline_star:120,line_end:120|char_star:8,char_end:32"->"Exception('dummy'),type='call'\nline_star:120,line_end:120|char_star:14,char_end:32";
"Exception,type='identifier'\nline_star:120,line_end:120|char_star:14,char_end:23"[shape="point",fillcolor="#121013",style=filled];
"Exception('dummy'),type='call'\nline_star:120,line_end:120|char_star:14,char_end:32"->"Exception,type='identifier'\nline_star:120,line_end:120|char_star:14,char_end:23";
"('dummy'),type='argument_list'\nline_star:120,line_end:120|char_star:23,char_end:32"[shape="box",fillcolor="white",style=filled];
"Exception('dummy'),type='call'\nline_star:120,line_end:120|char_star:14,char_end:32"->"('dummy'),type='argument_list'\nline_star:120,line_end:120|char_star:23,char_end:32";
"with pytest.raises(Exception):\n        with app.app_context():\n            client.get('/'),type='with_statement'\nline_star:122,line_end:124|char_star:4,char_end:27"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:111,line_end:128|char_star:4,char_end:43"->"with pytest.raises(Exception):\n        with app.app_context():\n            client.get('/'),type='with_statement'\nline_star:122,line_end:124|char_star:4,char_end:27";
"pytest.raises(Exception),type='with_clause'\nline_star:122,line_end:122|char_star:9,char_end:33"[shape="box",fillcolor="white",style=filled];
"with pytest.raises(Exception):\n        with app.app_context():\n            client.get('/'),type='with_statement'\nline_star:122,line_end:124|char_star:4,char_end:27"->"pytest.raises(Exception),type='with_clause'\nline_star:122,line_end:122|char_star:9,char_end:33";
"type='INFORMATION BLOCK'\nline_star:123,line_end:124|char_star:8,char_end:27"[shape="point",fillcolor="#121013",style=filled];
"with pytest.raises(Exception):\n        with app.app_context():\n            client.get('/'),type='with_statement'\nline_star:122,line_end:124|char_star:4,char_end:27"->"type='INFORMATION BLOCK'\nline_star:123,line_end:124|char_star:8,char_end:27";
"with app.app_context():\n            client.get('/'),type='with_statement'\nline_star:123,line_end:124|char_star:8,char_end:27"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:123,line_end:124|char_star:8,char_end:27"->"with app.app_context():\n            client.get('/'),type='with_statement'\nline_star:123,line_end:124|char_star:8,char_end:27";
"app.app_context(),type='with_clause'\nline_star:123,line_end:123|char_star:13,char_end:30"[shape="box",fillcolor="white",style=filled];
"with app.app_context():\n            client.get('/'),type='with_statement'\nline_star:123,line_end:124|char_star:8,char_end:27"->"app.app_context(),type='with_clause'\nline_star:123,line_end:123|char_star:13,char_end:30";
"type='INFORMATION BLOCK'\nline_star:124,line_end:124|char_star:12,char_end:27"[shape="point",fillcolor="#121013",style=filled];
"with app.app_context():\n            client.get('/'),type='with_statement'\nline_star:123,line_end:124|char_star:8,char_end:27"->"type='INFORMATION BLOCK'\nline_star:124,line_end:124|char_star:12,char_end:27";
"assert len(cleanup_stuff) == 1,type='assert_statement'\nline_star:126,line_end:126|char_star:4,char_end:34"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:111,line_end:128|char_star:4,char_end:43"->"assert len(cleanup_stuff) == 1,type='assert_statement'\nline_star:126,line_end:126|char_star:4,char_end:34";
"len(cleanup_stuff) == 1,type='comparison_operator'\nline_star:126,line_end:126|char_star:11,char_end:34"[shape="box",fillcolor="white",style=filled];
"assert len(cleanup_stuff) == 1,type='assert_statement'\nline_star:126,line_end:126|char_star:4,char_end:34"->"len(cleanup_stuff) == 1,type='comparison_operator'\nline_star:126,line_end:126|char_star:11,char_end:34";
"len(cleanup_stuff),type='call'\nline_star:126,line_end:126|char_star:11,char_end:29"[shape="box",fillcolor="white",style=filled];
"len(cleanup_stuff) == 1,type='comparison_operator'\nline_star:126,line_end:126|char_star:11,char_end:34"->"len(cleanup_stuff),type='call'\nline_star:126,line_end:126|char_star:11,char_end:29";
"len,type='identifier'\nline_star:126,line_end:126|char_star:11,char_end:14"[shape="point",fillcolor="#121013",style=filled];
"len(cleanup_stuff),type='call'\nline_star:126,line_end:126|char_star:11,char_end:29"->"len,type='identifier'\nline_star:126,line_end:126|char_star:11,char_end:14";
"(cleanup_stuff),type='argument_list'\nline_star:126,line_end:126|char_star:14,char_end:29"[shape="box",fillcolor="white",style=filled];
"len(cleanup_stuff),type='call'\nline_star:126,line_end:126|char_star:11,char_end:29"->"(cleanup_stuff),type='argument_list'\nline_star:126,line_end:126|char_star:14,char_end:29";
"cleanup_stuff,type='identifier'\nline_star:126,line_end:126|char_star:15,char_end:28"[shape="point",fillcolor="#121013",style=filled];
"(cleanup_stuff),type='argument_list'\nline_star:126,line_end:126|char_star:14,char_end:29"->"cleanup_stuff,type='identifier'\nline_star:126,line_end:126|char_star:15,char_end:28";
"assert isinstance(cleanup_stuff[0], Exception),type='assert_statement'\nline_star:127,line_end:127|char_star:4,char_end:50"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:111,line_end:128|char_star:4,char_end:43"->"assert isinstance(cleanup_stuff[0], Exception),type='assert_statement'\nline_star:127,line_end:127|char_star:4,char_end:50";
"isinstance(cleanup_stuff[0], Exception),type='call'\nline_star:127,line_end:127|char_star:11,char_end:50"[shape="box",fillcolor="white",style=filled];
"assert isinstance(cleanup_stuff[0], Exception),type='assert_statement'\nline_star:127,line_end:127|char_star:4,char_end:50"->"isinstance(cleanup_stuff[0], Exception),type='call'\nline_star:127,line_end:127|char_star:11,char_end:50";
"isinstance,type='identifier'\nline_star:127,line_end:127|char_star:11,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"isinstance(cleanup_stuff[0], Exception),type='call'\nline_star:127,line_end:127|char_star:11,char_end:50"->"isinstance,type='identifier'\nline_star:127,line_end:127|char_star:11,char_end:21";
"(cleanup_stuff[0], Exception),type='argument_list'\nline_star:127,line_end:127|char_star:21,char_end:50"[shape="box",fillcolor="white",style=filled];
"isinstance(cleanup_stuff[0], Exception),type='call'\nline_star:127,line_end:127|char_star:11,char_end:50"->"(cleanup_stuff[0], Exception),type='argument_list'\nline_star:127,line_end:127|char_star:21,char_end:50";
"cleanup_stuff[0],type='subscript'\nline_star:127,line_end:127|char_star:22,char_end:38"[shape="box",fillcolor="white",style=filled];
"(cleanup_stuff[0], Exception),type='argument_list'\nline_star:127,line_end:127|char_star:21,char_end:50"->"cleanup_stuff[0],type='subscript'\nline_star:127,line_end:127|char_star:22,char_end:38";
"cleanup_stuff,type='identifier'\nline_star:127,line_end:127|char_star:22,char_end:35"[shape="point",fillcolor="#121013",style=filled];
"cleanup_stuff[0],type='subscript'\nline_star:127,line_end:127|char_star:22,char_end:38"->"cleanup_stuff,type='identifier'\nline_star:127,line_end:127|char_star:22,char_end:35";
"Exception,type='identifier'\nline_star:127,line_end:127|char_star:40,char_end:49"[shape="point",fillcolor="#121013",style=filled];
"(cleanup_stuff[0], Exception),type='argument_list'\nline_star:127,line_end:127|char_star:21,char_end:50"->"Exception,type='identifier'\nline_star:127,line_end:127|char_star:40,char_end:49";
"assert str(cleanup_stuff[0]) == 'dummy',type='assert_statement'\nline_star:128,line_end:128|char_star:4,char_end:43"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:111,line_end:128|char_star:4,char_end:43"->"assert str(cleanup_stuff[0]) == 'dummy',type='assert_statement'\nline_star:128,line_end:128|char_star:4,char_end:43";
"str(cleanup_stuff[0]) == 'dummy',type='comparison_operator'\nline_star:128,line_end:128|char_star:11,char_end:43"[shape="box",fillcolor="white",style=filled];
"assert str(cleanup_stuff[0]) == 'dummy',type='assert_statement'\nline_star:128,line_end:128|char_star:4,char_end:43"->"str(cleanup_stuff[0]) == 'dummy',type='comparison_operator'\nline_star:128,line_end:128|char_star:11,char_end:43";
"str(cleanup_stuff[0]),type='call'\nline_star:128,line_end:128|char_star:11,char_end:32"[shape="box",fillcolor="white",style=filled];
"str(cleanup_stuff[0]) == 'dummy',type='comparison_operator'\nline_star:128,line_end:128|char_star:11,char_end:43"->"str(cleanup_stuff[0]),type='call'\nline_star:128,line_end:128|char_star:11,char_end:32";
"str,type='identifier'\nline_star:128,line_end:128|char_star:11,char_end:14"[shape="point",fillcolor="#121013",style=filled];
"str(cleanup_stuff[0]),type='call'\nline_star:128,line_end:128|char_star:11,char_end:32"->"str,type='identifier'\nline_star:128,line_end:128|char_star:11,char_end:14";
"(cleanup_stuff[0]),type='argument_list'\nline_star:128,line_end:128|char_star:14,char_end:32"[shape="box",fillcolor="white",style=filled];
"str(cleanup_stuff[0]),type='call'\nline_star:128,line_end:128|char_star:11,char_end:32"->"(cleanup_stuff[0]),type='argument_list'\nline_star:128,line_end:128|char_star:14,char_end:32";
"cleanup_stuff[0],type='subscript'\nline_star:128,line_end:128|char_star:15,char_end:31"[shape="box",fillcolor="white",style=filled];
"(cleanup_stuff[0]),type='argument_list'\nline_star:128,line_end:128|char_star:14,char_end:32"->"cleanup_stuff[0],type='subscript'\nline_star:128,line_end:128|char_star:15,char_end:31";
"cleanup_stuff,type='identifier'\nline_star:128,line_end:128|char_star:15,char_end:28"[shape="point",fillcolor="#121013",style=filled];
"cleanup_stuff[0],type='subscript'\nline_star:128,line_end:128|char_star:15,char_end:31"->"cleanup_stuff,type='identifier'\nline_star:128,line_end:128|char_star:15,char_end:28";
"def test_app_ctx_globals_methods(app, app_ctx):\n    # get\n    assert flask.g.get('foo') is None\n    assert flask.g.get('foo', 'bar') == 'bar'\n    # __contains__\n    assert 'foo' not in flask.g\n    flask.g.foo = 'bar'\n    assert 'foo' in flask.g\n    # setdefault\n    flask.g.setdefault('bar', 'the cake is a lie')\n    flask.g.setdefault('bar', 'hello world')\n    assert flask.g.bar == 'the cake is a lie'\n    # pop\n    assert flask.g.pop('bar') == 'the cake is a lie'\n    with pytest.raises(KeyError):\n        flask.g.pop('bar')\n    assert flask.g.pop('bar', 'more cake') == 'more cake'\n    # __iter__\n    assert list(flask.g) == ['foo']\n    # __repr__\n    assert repr(flask.g) == '<flask.g of 'flask_test'>',type='function_definition'\nline_star:131,line_end:151|char_star:0,char_end:55"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_app_ctx_globals_methods(app, app_ctx):\n    # get\n    assert flask.g.get('foo') is None\n    assert flask.g.get('foo', 'bar') == 'bar'\n    # __contains__\n    assert 'foo' not in flask.g\n    flask.g.foo = 'bar'\n    assert 'foo' in flask.g\n    # setdefault\n    flask.g.setdefault('bar', 'the cake is a lie')\n    flask.g.setdefault('bar', 'hello world')\n    assert flask.g.bar == 'the cake is a lie'\n    # pop\n    assert flask.g.pop('bar') == 'the cake is a lie'\n    with pytest.raises(KeyError):\n        flask.g.pop('bar')\n    assert flask.g.pop('bar', 'more cake') == 'more cake'\n    # __iter__\n    assert list(flask.g) == ['foo']\n    # __repr__\n    assert repr(flask.g) == '<flask.g of 'flask_test'>',type='function_definition'\nline_star:131,line_end:151|char_star:0,char_end:55";
"test_app_ctx_globals_methods,type='identifier'\nline_star:131,line_end:131|char_star:4,char_end:32"[shape="point",fillcolor="#121013",style=filled];
"def test_app_ctx_globals_methods(app, app_ctx):\n    # get\n    assert flask.g.get('foo') is None\n    assert flask.g.get('foo', 'bar') == 'bar'\n    # __contains__\n    assert 'foo' not in flask.g\n    flask.g.foo = 'bar'\n    assert 'foo' in flask.g\n    # setdefault\n    flask.g.setdefault('bar', 'the cake is a lie')\n    flask.g.setdefault('bar', 'hello world')\n    assert flask.g.bar == 'the cake is a lie'\n    # pop\n    assert flask.g.pop('bar') == 'the cake is a lie'\n    with pytest.raises(KeyError):\n        flask.g.pop('bar')\n    assert flask.g.pop('bar', 'more cake') == 'more cake'\n    # __iter__\n    assert list(flask.g) == ['foo']\n    # __repr__\n    assert repr(flask.g) == '<flask.g of 'flask_test'>',type='function_definition'\nline_star:131,line_end:151|char_star:0,char_end:55"->"test_app_ctx_globals_methods,type='identifier'\nline_star:131,line_end:131|char_star:4,char_end:32";
"(app, app_ctx),type='parameters'\nline_star:131,line_end:131|char_star:32,char_end:46"[shape="box",fillcolor="white",style=filled];
"def test_app_ctx_globals_methods(app, app_ctx):\n    # get\n    assert flask.g.get('foo') is None\n    assert flask.g.get('foo', 'bar') == 'bar'\n    # __contains__\n    assert 'foo' not in flask.g\n    flask.g.foo = 'bar'\n    assert 'foo' in flask.g\n    # setdefault\n    flask.g.setdefault('bar', 'the cake is a lie')\n    flask.g.setdefault('bar', 'hello world')\n    assert flask.g.bar == 'the cake is a lie'\n    # pop\n    assert flask.g.pop('bar') == 'the cake is a lie'\n    with pytest.raises(KeyError):\n        flask.g.pop('bar')\n    assert flask.g.pop('bar', 'more cake') == 'more cake'\n    # __iter__\n    assert list(flask.g) == ['foo']\n    # __repr__\n    assert repr(flask.g) == '<flask.g of 'flask_test'>',type='function_definition'\nline_star:131,line_end:151|char_star:0,char_end:55"->"(app, app_ctx),type='parameters'\nline_star:131,line_end:131|char_star:32,char_end:46";
"app,type='identifier'\nline_star:131,line_end:131|char_star:33,char_end:36"[shape="point",fillcolor="#121013",style=filled];
"(app, app_ctx),type='parameters'\nline_star:131,line_end:131|char_star:32,char_end:46"->"app,type='identifier'\nline_star:131,line_end:131|char_star:33,char_end:36";
"app_ctx,type='identifier'\nline_star:131,line_end:131|char_star:38,char_end:45"[shape="point",fillcolor="#121013",style=filled];
"(app, app_ctx),type='parameters'\nline_star:131,line_end:131|char_star:32,char_end:46"->"app_ctx,type='identifier'\nline_star:131,line_end:131|char_star:38,char_end:45";
"# get,type='comment'\nline_star:132,line_end:132|char_star:4,char_end:9"[shape="box",fillcolor="#f0c929",style=filled];
"def test_app_ctx_globals_methods(app, app_ctx):\n    # get\n    assert flask.g.get('foo') is None\n    assert flask.g.get('foo', 'bar') == 'bar'\n    # __contains__\n    assert 'foo' not in flask.g\n    flask.g.foo = 'bar'\n    assert 'foo' in flask.g\n    # setdefault\n    flask.g.setdefault('bar', 'the cake is a lie')\n    flask.g.setdefault('bar', 'hello world')\n    assert flask.g.bar == 'the cake is a lie'\n    # pop\n    assert flask.g.pop('bar') == 'the cake is a lie'\n    with pytest.raises(KeyError):\n        flask.g.pop('bar')\n    assert flask.g.pop('bar', 'more cake') == 'more cake'\n    # __iter__\n    assert list(flask.g) == ['foo']\n    # __repr__\n    assert repr(flask.g) == '<flask.g of 'flask_test'>',type='function_definition'\nline_star:131,line_end:151|char_star:0,char_end:55"->"# get,type='comment'\nline_star:132,line_end:132|char_star:4,char_end:9";
"type='INFORMATION BLOCK'\nline_star:133,line_end:151|char_star:4,char_end:55"[shape="point",fillcolor="#121013",style=filled];
"def test_app_ctx_globals_methods(app, app_ctx):\n    # get\n    assert flask.g.get('foo') is None\n    assert flask.g.get('foo', 'bar') == 'bar'\n    # __contains__\n    assert 'foo' not in flask.g\n    flask.g.foo = 'bar'\n    assert 'foo' in flask.g\n    # setdefault\n    flask.g.setdefault('bar', 'the cake is a lie')\n    flask.g.setdefault('bar', 'hello world')\n    assert flask.g.bar == 'the cake is a lie'\n    # pop\n    assert flask.g.pop('bar') == 'the cake is a lie'\n    with pytest.raises(KeyError):\n        flask.g.pop('bar')\n    assert flask.g.pop('bar', 'more cake') == 'more cake'\n    # __iter__\n    assert list(flask.g) == ['foo']\n    # __repr__\n    assert repr(flask.g) == '<flask.g of 'flask_test'>',type='function_definition'\nline_star:131,line_end:151|char_star:0,char_end:55"->"type='INFORMATION BLOCK'\nline_star:133,line_end:151|char_star:4,char_end:55";
"assert flask.g.get('foo') is None,type='assert_statement'\nline_star:133,line_end:133|char_star:4,char_end:37"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:133,line_end:151|char_star:4,char_end:55"->"assert flask.g.get('foo') is None,type='assert_statement'\nline_star:133,line_end:133|char_star:4,char_end:37";
"flask.g.get('foo') is None,type='comparison_operator'\nline_star:133,line_end:133|char_star:11,char_end:37"[shape="box",fillcolor="white",style=filled];
"assert flask.g.get('foo') is None,type='assert_statement'\nline_star:133,line_end:133|char_star:4,char_end:37"->"flask.g.get('foo') is None,type='comparison_operator'\nline_star:133,line_end:133|char_star:11,char_end:37";
"flask.g.get('foo'),type='call'\nline_star:133,line_end:133|char_star:11,char_end:29"[shape="box",fillcolor="white",style=filled];
"flask.g.get('foo') is None,type='comparison_operator'\nline_star:133,line_end:133|char_star:11,char_end:37"->"flask.g.get('foo'),type='call'\nline_star:133,line_end:133|char_star:11,char_end:29";
"flask.g.get,type='attribute'\nline_star:133,line_end:133|char_star:11,char_end:22"[shape="box",fillcolor="white",style=filled];
"flask.g.get('foo'),type='call'\nline_star:133,line_end:133|char_star:11,char_end:29"->"flask.g.get,type='attribute'\nline_star:133,line_end:133|char_star:11,char_end:22";
"flask.g,type='attribute'\nline_star:133,line_end:133|char_star:11,char_end:18"[shape="box",fillcolor="white",style=filled];
"flask.g.get,type='attribute'\nline_star:133,line_end:133|char_star:11,char_end:22"->"flask.g,type='attribute'\nline_star:133,line_end:133|char_star:11,char_end:18";
"flask,type='identifier'\nline_star:133,line_end:133|char_star:11,char_end:16"[shape="point",fillcolor="#121013",style=filled];
"flask.g,type='attribute'\nline_star:133,line_end:133|char_star:11,char_end:18"->"flask,type='identifier'\nline_star:133,line_end:133|char_star:11,char_end:16";
"g,type='identifier'\nline_star:133,line_end:133|char_star:17,char_end:18"[shape="point",fillcolor="#121013",style=filled];
"flask.g,type='attribute'\nline_star:133,line_end:133|char_star:11,char_end:18"->"g,type='identifier'\nline_star:133,line_end:133|char_star:17,char_end:18";
"get,type='identifier'\nline_star:133,line_end:133|char_star:19,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"flask.g.get,type='attribute'\nline_star:133,line_end:133|char_star:11,char_end:22"->"get,type='identifier'\nline_star:133,line_end:133|char_star:19,char_end:22";
"('foo'),type='argument_list'\nline_star:133,line_end:133|char_star:22,char_end:29"[shape="box",fillcolor="white",style=filled];
"flask.g.get('foo'),type='call'\nline_star:133,line_end:133|char_star:11,char_end:29"->"('foo'),type='argument_list'\nline_star:133,line_end:133|char_star:22,char_end:29";
"assert flask.g.get('foo', 'bar') == 'bar',type='assert_statement'\nline_star:134,line_end:134|char_star:4,char_end:45"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:133,line_end:151|char_star:4,char_end:55"->"assert flask.g.get('foo', 'bar') == 'bar',type='assert_statement'\nline_star:134,line_end:134|char_star:4,char_end:45";
"flask.g.get('foo', 'bar') == 'bar',type='comparison_operator'\nline_star:134,line_end:134|char_star:11,char_end:45"[shape="box",fillcolor="white",style=filled];
"assert flask.g.get('foo', 'bar') == 'bar',type='assert_statement'\nline_star:134,line_end:134|char_star:4,char_end:45"->"flask.g.get('foo', 'bar') == 'bar',type='comparison_operator'\nline_star:134,line_end:134|char_star:11,char_end:45";
"flask.g.get('foo', 'bar'),type='call'\nline_star:134,line_end:134|char_star:11,char_end:36"[shape="box",fillcolor="white",style=filled];
"flask.g.get('foo', 'bar') == 'bar',type='comparison_operator'\nline_star:134,line_end:134|char_star:11,char_end:45"->"flask.g.get('foo', 'bar'),type='call'\nline_star:134,line_end:134|char_star:11,char_end:36";
"flask.g.get,type='attribute'\nline_star:134,line_end:134|char_star:11,char_end:22"[shape="box",fillcolor="white",style=filled];
"flask.g.get('foo', 'bar'),type='call'\nline_star:134,line_end:134|char_star:11,char_end:36"->"flask.g.get,type='attribute'\nline_star:134,line_end:134|char_star:11,char_end:22";
"flask.g,type='attribute'\nline_star:134,line_end:134|char_star:11,char_end:18"[shape="box",fillcolor="white",style=filled];
"flask.g.get,type='attribute'\nline_star:134,line_end:134|char_star:11,char_end:22"->"flask.g,type='attribute'\nline_star:134,line_end:134|char_star:11,char_end:18";
"flask,type='identifier'\nline_star:134,line_end:134|char_star:11,char_end:16"[shape="point",fillcolor="#121013",style=filled];
"flask.g,type='attribute'\nline_star:134,line_end:134|char_star:11,char_end:18"->"flask,type='identifier'\nline_star:134,line_end:134|char_star:11,char_end:16";
"g,type='identifier'\nline_star:134,line_end:134|char_star:17,char_end:18"[shape="point",fillcolor="#121013",style=filled];
"flask.g,type='attribute'\nline_star:134,line_end:134|char_star:11,char_end:18"->"g,type='identifier'\nline_star:134,line_end:134|char_star:17,char_end:18";
"get,type='identifier'\nline_star:134,line_end:134|char_star:19,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"flask.g.get,type='attribute'\nline_star:134,line_end:134|char_star:11,char_end:22"->"get,type='identifier'\nline_star:134,line_end:134|char_star:19,char_end:22";
"('foo', 'bar'),type='argument_list'\nline_star:134,line_end:134|char_star:22,char_end:36"[shape="box",fillcolor="white",style=filled];
"flask.g.get('foo', 'bar'),type='call'\nline_star:134,line_end:134|char_star:11,char_end:36"->"('foo', 'bar'),type='argument_list'\nline_star:134,line_end:134|char_star:22,char_end:36";
"# __contains__,type='comment'\nline_star:135,line_end:135|char_star:4,char_end:18"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:133,line_end:151|char_star:4,char_end:55"->"# __contains__,type='comment'\nline_star:135,line_end:135|char_star:4,char_end:18";
"assert 'foo' not in flask.g,type='assert_statement'\nline_star:136,line_end:136|char_star:4,char_end:31"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:133,line_end:151|char_star:4,char_end:55"->"assert 'foo' not in flask.g,type='assert_statement'\nline_star:136,line_end:136|char_star:4,char_end:31";
"'foo' not in flask.g,type='comparison_operator'\nline_star:136,line_end:136|char_star:11,char_end:31"[shape="box",fillcolor="white",style=filled];
"assert 'foo' not in flask.g,type='assert_statement'\nline_star:136,line_end:136|char_star:4,char_end:31"->"'foo' not in flask.g,type='comparison_operator'\nline_star:136,line_end:136|char_star:11,char_end:31";
"flask.g,type='attribute'\nline_star:136,line_end:136|char_star:24,char_end:31"[shape="box",fillcolor="white",style=filled];
"'foo' not in flask.g,type='comparison_operator'\nline_star:136,line_end:136|char_star:11,char_end:31"->"flask.g,type='attribute'\nline_star:136,line_end:136|char_star:24,char_end:31";
"flask,type='identifier'\nline_star:136,line_end:136|char_star:24,char_end:29"[shape="point",fillcolor="#121013",style=filled];
"flask.g,type='attribute'\nline_star:136,line_end:136|char_star:24,char_end:31"->"flask,type='identifier'\nline_star:136,line_end:136|char_star:24,char_end:29";
"g,type='identifier'\nline_star:136,line_end:136|char_star:30,char_end:31"[shape="point",fillcolor="#121013",style=filled];
"flask.g,type='attribute'\nline_star:136,line_end:136|char_star:24,char_end:31"->"g,type='identifier'\nline_star:136,line_end:136|char_star:30,char_end:31";
"assert 'foo' in flask.g,type='assert_statement'\nline_star:138,line_end:138|char_star:4,char_end:27"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:133,line_end:151|char_star:4,char_end:55"->"assert 'foo' in flask.g,type='assert_statement'\nline_star:138,line_end:138|char_star:4,char_end:27";
"'foo' in flask.g,type='comparison_operator'\nline_star:138,line_end:138|char_star:11,char_end:27"[shape="box",fillcolor="white",style=filled];
"assert 'foo' in flask.g,type='assert_statement'\nline_star:138,line_end:138|char_star:4,char_end:27"->"'foo' in flask.g,type='comparison_operator'\nline_star:138,line_end:138|char_star:11,char_end:27";
"flask.g,type='attribute'\nline_star:138,line_end:138|char_star:20,char_end:27"[shape="box",fillcolor="white",style=filled];
"'foo' in flask.g,type='comparison_operator'\nline_star:138,line_end:138|char_star:11,char_end:27"->"flask.g,type='attribute'\nline_star:138,line_end:138|char_star:20,char_end:27";
"flask,type='identifier'\nline_star:138,line_end:138|char_star:20,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"flask.g,type='attribute'\nline_star:138,line_end:138|char_star:20,char_end:27"->"flask,type='identifier'\nline_star:138,line_end:138|char_star:20,char_end:25";
"g,type='identifier'\nline_star:138,line_end:138|char_star:26,char_end:27"[shape="point",fillcolor="#121013",style=filled];
"flask.g,type='attribute'\nline_star:138,line_end:138|char_star:20,char_end:27"->"g,type='identifier'\nline_star:138,line_end:138|char_star:26,char_end:27";
"# setdefault,type='comment'\nline_star:139,line_end:139|char_star:4,char_end:16"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:133,line_end:151|char_star:4,char_end:55"->"# setdefault,type='comment'\nline_star:139,line_end:139|char_star:4,char_end:16";
"assert flask.g.bar == 'the cake is a lie',type='assert_statement'\nline_star:142,line_end:142|char_star:4,char_end:45"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:133,line_end:151|char_star:4,char_end:55"->"assert flask.g.bar == 'the cake is a lie',type='assert_statement'\nline_star:142,line_end:142|char_star:4,char_end:45";
"flask.g.bar == 'the cake is a lie',type='comparison_operator'\nline_star:142,line_end:142|char_star:11,char_end:45"[shape="box",fillcolor="white",style=filled];
"assert flask.g.bar == 'the cake is a lie',type='assert_statement'\nline_star:142,line_end:142|char_star:4,char_end:45"->"flask.g.bar == 'the cake is a lie',type='comparison_operator'\nline_star:142,line_end:142|char_star:11,char_end:45";
"flask.g.bar,type='attribute'\nline_star:142,line_end:142|char_star:11,char_end:22"[shape="box",fillcolor="white",style=filled];
"flask.g.bar == 'the cake is a lie',type='comparison_operator'\nline_star:142,line_end:142|char_star:11,char_end:45"->"flask.g.bar,type='attribute'\nline_star:142,line_end:142|char_star:11,char_end:22";
"flask.g,type='attribute'\nline_star:142,line_end:142|char_star:11,char_end:18"[shape="box",fillcolor="white",style=filled];
"flask.g.bar,type='attribute'\nline_star:142,line_end:142|char_star:11,char_end:22"->"flask.g,type='attribute'\nline_star:142,line_end:142|char_star:11,char_end:18";
"flask,type='identifier'\nline_star:142,line_end:142|char_star:11,char_end:16"[shape="point",fillcolor="#121013",style=filled];
"flask.g,type='attribute'\nline_star:142,line_end:142|char_star:11,char_end:18"->"flask,type='identifier'\nline_star:142,line_end:142|char_star:11,char_end:16";
"g,type='identifier'\nline_star:142,line_end:142|char_star:17,char_end:18"[shape="point",fillcolor="#121013",style=filled];
"flask.g,type='attribute'\nline_star:142,line_end:142|char_star:11,char_end:18"->"g,type='identifier'\nline_star:142,line_end:142|char_star:17,char_end:18";
"bar,type='identifier'\nline_star:142,line_end:142|char_star:19,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"flask.g.bar,type='attribute'\nline_star:142,line_end:142|char_star:11,char_end:22"->"bar,type='identifier'\nline_star:142,line_end:142|char_star:19,char_end:22";
"# pop,type='comment'\nline_star:143,line_end:143|char_star:4,char_end:9"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:133,line_end:151|char_star:4,char_end:55"->"# pop,type='comment'\nline_star:143,line_end:143|char_star:4,char_end:9";
"assert flask.g.pop('bar') == 'the cake is a lie',type='assert_statement'\nline_star:144,line_end:144|char_star:4,char_end:52"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:133,line_end:151|char_star:4,char_end:55"->"assert flask.g.pop('bar') == 'the cake is a lie',type='assert_statement'\nline_star:144,line_end:144|char_star:4,char_end:52";
"flask.g.pop('bar') == 'the cake is a lie',type='comparison_operator'\nline_star:144,line_end:144|char_star:11,char_end:52"[shape="box",fillcolor="white",style=filled];
"assert flask.g.pop('bar') == 'the cake is a lie',type='assert_statement'\nline_star:144,line_end:144|char_star:4,char_end:52"->"flask.g.pop('bar') == 'the cake is a lie',type='comparison_operator'\nline_star:144,line_end:144|char_star:11,char_end:52";
"flask.g.pop('bar'),type='call'\nline_star:144,line_end:144|char_star:11,char_end:29"[shape="box",fillcolor="white",style=filled];
"flask.g.pop('bar') == 'the cake is a lie',type='comparison_operator'\nline_star:144,line_end:144|char_star:11,char_end:52"->"flask.g.pop('bar'),type='call'\nline_star:144,line_end:144|char_star:11,char_end:29";
"flask.g.pop,type='attribute'\nline_star:144,line_end:144|char_star:11,char_end:22"[shape="box",fillcolor="white",style=filled];
"flask.g.pop('bar'),type='call'\nline_star:144,line_end:144|char_star:11,char_end:29"->"flask.g.pop,type='attribute'\nline_star:144,line_end:144|char_star:11,char_end:22";
"flask.g,type='attribute'\nline_star:144,line_end:144|char_star:11,char_end:18"[shape="box",fillcolor="white",style=filled];
"flask.g.pop,type='attribute'\nline_star:144,line_end:144|char_star:11,char_end:22"->"flask.g,type='attribute'\nline_star:144,line_end:144|char_star:11,char_end:18";
"flask,type='identifier'\nline_star:144,line_end:144|char_star:11,char_end:16"[shape="point",fillcolor="#121013",style=filled];
"flask.g,type='attribute'\nline_star:144,line_end:144|char_star:11,char_end:18"->"flask,type='identifier'\nline_star:144,line_end:144|char_star:11,char_end:16";
"g,type='identifier'\nline_star:144,line_end:144|char_star:17,char_end:18"[shape="point",fillcolor="#121013",style=filled];
"flask.g,type='attribute'\nline_star:144,line_end:144|char_star:11,char_end:18"->"g,type='identifier'\nline_star:144,line_end:144|char_star:17,char_end:18";
"pop,type='identifier'\nline_star:144,line_end:144|char_star:19,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"flask.g.pop,type='attribute'\nline_star:144,line_end:144|char_star:11,char_end:22"->"pop,type='identifier'\nline_star:144,line_end:144|char_star:19,char_end:22";
"('bar'),type='argument_list'\nline_star:144,line_end:144|char_star:22,char_end:29"[shape="box",fillcolor="white",style=filled];
"flask.g.pop('bar'),type='call'\nline_star:144,line_end:144|char_star:11,char_end:29"->"('bar'),type='argument_list'\nline_star:144,line_end:144|char_star:22,char_end:29";
"with pytest.raises(KeyError):\n        flask.g.pop('bar'),type='with_statement'\nline_star:145,line_end:146|char_star:4,char_end:26"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:133,line_end:151|char_star:4,char_end:55"->"with pytest.raises(KeyError):\n        flask.g.pop('bar'),type='with_statement'\nline_star:145,line_end:146|char_star:4,char_end:26";
"pytest.raises(KeyError),type='with_clause'\nline_star:145,line_end:145|char_star:9,char_end:32"[shape="box",fillcolor="white",style=filled];
"with pytest.raises(KeyError):\n        flask.g.pop('bar'),type='with_statement'\nline_star:145,line_end:146|char_star:4,char_end:26"->"pytest.raises(KeyError),type='with_clause'\nline_star:145,line_end:145|char_star:9,char_end:32";
"type='INFORMATION BLOCK'\nline_star:146,line_end:146|char_star:8,char_end:26"[shape="point",fillcolor="#121013",style=filled];
"with pytest.raises(KeyError):\n        flask.g.pop('bar'),type='with_statement'\nline_star:145,line_end:146|char_star:4,char_end:26"->"type='INFORMATION BLOCK'\nline_star:146,line_end:146|char_star:8,char_end:26";
"assert flask.g.pop('bar', 'more cake') == 'more cake',type='assert_statement'\nline_star:147,line_end:147|char_star:4,char_end:57"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:133,line_end:151|char_star:4,char_end:55"->"assert flask.g.pop('bar', 'more cake') == 'more cake',type='assert_statement'\nline_star:147,line_end:147|char_star:4,char_end:57";
"flask.g.pop('bar', 'more cake') == 'more cake',type='comparison_operator'\nline_star:147,line_end:147|char_star:11,char_end:57"[shape="box",fillcolor="white",style=filled];
"assert flask.g.pop('bar', 'more cake') == 'more cake',type='assert_statement'\nline_star:147,line_end:147|char_star:4,char_end:57"->"flask.g.pop('bar', 'more cake') == 'more cake',type='comparison_operator'\nline_star:147,line_end:147|char_star:11,char_end:57";
"flask.g.pop('bar', 'more cake'),type='call'\nline_star:147,line_end:147|char_star:11,char_end:42"[shape="box",fillcolor="white",style=filled];
"flask.g.pop('bar', 'more cake') == 'more cake',type='comparison_operator'\nline_star:147,line_end:147|char_star:11,char_end:57"->"flask.g.pop('bar', 'more cake'),type='call'\nline_star:147,line_end:147|char_star:11,char_end:42";
"flask.g.pop,type='attribute'\nline_star:147,line_end:147|char_star:11,char_end:22"[shape="box",fillcolor="white",style=filled];
"flask.g.pop('bar', 'more cake'),type='call'\nline_star:147,line_end:147|char_star:11,char_end:42"->"flask.g.pop,type='attribute'\nline_star:147,line_end:147|char_star:11,char_end:22";
"flask.g,type='attribute'\nline_star:147,line_end:147|char_star:11,char_end:18"[shape="box",fillcolor="white",style=filled];
"flask.g.pop,type='attribute'\nline_star:147,line_end:147|char_star:11,char_end:22"->"flask.g,type='attribute'\nline_star:147,line_end:147|char_star:11,char_end:18";
"flask,type='identifier'\nline_star:147,line_end:147|char_star:11,char_end:16"[shape="point",fillcolor="#121013",style=filled];
"flask.g,type='attribute'\nline_star:147,line_end:147|char_star:11,char_end:18"->"flask,type='identifier'\nline_star:147,line_end:147|char_star:11,char_end:16";
"g,type='identifier'\nline_star:147,line_end:147|char_star:17,char_end:18"[shape="point",fillcolor="#121013",style=filled];
"flask.g,type='attribute'\nline_star:147,line_end:147|char_star:11,char_end:18"->"g,type='identifier'\nline_star:147,line_end:147|char_star:17,char_end:18";
"pop,type='identifier'\nline_star:147,line_end:147|char_star:19,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"flask.g.pop,type='attribute'\nline_star:147,line_end:147|char_star:11,char_end:22"->"pop,type='identifier'\nline_star:147,line_end:147|char_star:19,char_end:22";
"('bar', 'more cake'),type='argument_list'\nline_star:147,line_end:147|char_star:22,char_end:42"[shape="box",fillcolor="white",style=filled];
"flask.g.pop('bar', 'more cake'),type='call'\nline_star:147,line_end:147|char_star:11,char_end:42"->"('bar', 'more cake'),type='argument_list'\nline_star:147,line_end:147|char_star:22,char_end:42";
"# __iter__,type='comment'\nline_star:148,line_end:148|char_star:4,char_end:14"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:133,line_end:151|char_star:4,char_end:55"->"# __iter__,type='comment'\nline_star:148,line_end:148|char_star:4,char_end:14";
"assert list(flask.g) == ['foo'],type='assert_statement'\nline_star:149,line_end:149|char_star:4,char_end:35"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:133,line_end:151|char_star:4,char_end:55"->"assert list(flask.g) == ['foo'],type='assert_statement'\nline_star:149,line_end:149|char_star:4,char_end:35";
"list(flask.g) == ['foo'],type='comparison_operator'\nline_star:149,line_end:149|char_star:11,char_end:35"[shape="box",fillcolor="white",style=filled];
"assert list(flask.g) == ['foo'],type='assert_statement'\nline_star:149,line_end:149|char_star:4,char_end:35"->"list(flask.g) == ['foo'],type='comparison_operator'\nline_star:149,line_end:149|char_star:11,char_end:35";
"list(flask.g),type='call'\nline_star:149,line_end:149|char_star:11,char_end:24"[shape="box",fillcolor="white",style=filled];
"list(flask.g) == ['foo'],type='comparison_operator'\nline_star:149,line_end:149|char_star:11,char_end:35"->"list(flask.g),type='call'\nline_star:149,line_end:149|char_star:11,char_end:24";
"list,type='identifier'\nline_star:149,line_end:149|char_star:11,char_end:15"[shape="point",fillcolor="#121013",style=filled];
"list(flask.g),type='call'\nline_star:149,line_end:149|char_star:11,char_end:24"->"list,type='identifier'\nline_star:149,line_end:149|char_star:11,char_end:15";
"(flask.g),type='argument_list'\nline_star:149,line_end:149|char_star:15,char_end:24"[shape="box",fillcolor="white",style=filled];
"list(flask.g),type='call'\nline_star:149,line_end:149|char_star:11,char_end:24"->"(flask.g),type='argument_list'\nline_star:149,line_end:149|char_star:15,char_end:24";
"flask.g,type='attribute'\nline_star:149,line_end:149|char_star:16,char_end:23"[shape="box",fillcolor="white",style=filled];
"(flask.g),type='argument_list'\nline_star:149,line_end:149|char_star:15,char_end:24"->"flask.g,type='attribute'\nline_star:149,line_end:149|char_star:16,char_end:23";
"flask,type='identifier'\nline_star:149,line_end:149|char_star:16,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"flask.g,type='attribute'\nline_star:149,line_end:149|char_star:16,char_end:23"->"flask,type='identifier'\nline_star:149,line_end:149|char_star:16,char_end:21";
"g,type='identifier'\nline_star:149,line_end:149|char_star:22,char_end:23"[shape="point",fillcolor="#121013",style=filled];
"flask.g,type='attribute'\nline_star:149,line_end:149|char_star:16,char_end:23"->"g,type='identifier'\nline_star:149,line_end:149|char_star:22,char_end:23";
"['foo'],type='list'\nline_star:149,line_end:149|char_star:28,char_end:35"[shape="box",fillcolor="white",style=filled];
"list(flask.g) == ['foo'],type='comparison_operator'\nline_star:149,line_end:149|char_star:11,char_end:35"->"['foo'],type='list'\nline_star:149,line_end:149|char_star:28,char_end:35";
"# __repr__,type='comment'\nline_star:150,line_end:150|char_star:4,char_end:14"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:133,line_end:151|char_star:4,char_end:55"->"# __repr__,type='comment'\nline_star:150,line_end:150|char_star:4,char_end:14";
"assert repr(flask.g) == '<flask.g of 'flask_test'>',type='assert_statement'\nline_star:151,line_end:151|char_star:4,char_end:55"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:133,line_end:151|char_star:4,char_end:55"->"assert repr(flask.g) == '<flask.g of 'flask_test'>',type='assert_statement'\nline_star:151,line_end:151|char_star:4,char_end:55";
"repr(flask.g) == '<flask.g of 'flask_test'>',type='comparison_operator'\nline_star:151,line_end:151|char_star:11,char_end:55"[shape="box",fillcolor="white",style=filled];
"assert repr(flask.g) == '<flask.g of 'flask_test'>',type='assert_statement'\nline_star:151,line_end:151|char_star:4,char_end:55"->"repr(flask.g) == '<flask.g of 'flask_test'>',type='comparison_operator'\nline_star:151,line_end:151|char_star:11,char_end:55";
"repr(flask.g),type='call'\nline_star:151,line_end:151|char_star:11,char_end:24"[shape="box",fillcolor="white",style=filled];
"repr(flask.g) == '<flask.g of 'flask_test'>',type='comparison_operator'\nline_star:151,line_end:151|char_star:11,char_end:55"->"repr(flask.g),type='call'\nline_star:151,line_end:151|char_star:11,char_end:24";
"repr,type='identifier'\nline_star:151,line_end:151|char_star:11,char_end:15"[shape="point",fillcolor="#121013",style=filled];
"repr(flask.g),type='call'\nline_star:151,line_end:151|char_star:11,char_end:24"->"repr,type='identifier'\nline_star:151,line_end:151|char_star:11,char_end:15";
"(flask.g),type='argument_list'\nline_star:151,line_end:151|char_star:15,char_end:24"[shape="box",fillcolor="white",style=filled];
"repr(flask.g),type='call'\nline_star:151,line_end:151|char_star:11,char_end:24"->"(flask.g),type='argument_list'\nline_star:151,line_end:151|char_star:15,char_end:24";
"flask.g,type='attribute'\nline_star:151,line_end:151|char_star:16,char_end:23"[shape="box",fillcolor="white",style=filled];
"(flask.g),type='argument_list'\nline_star:151,line_end:151|char_star:15,char_end:24"->"flask.g,type='attribute'\nline_star:151,line_end:151|char_star:16,char_end:23";
"flask,type='identifier'\nline_star:151,line_end:151|char_star:16,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"flask.g,type='attribute'\nline_star:151,line_end:151|char_star:16,char_end:23"->"flask,type='identifier'\nline_star:151,line_end:151|char_star:16,char_end:21";
"g,type='identifier'\nline_star:151,line_end:151|char_star:22,char_end:23"[shape="point",fillcolor="#121013",style=filled];
"flask.g,type='attribute'\nline_star:151,line_end:151|char_star:16,char_end:23"->"g,type='identifier'\nline_star:151,line_end:151|char_star:22,char_end:23";
"def test_custom_app_ctx_globals_class(app):\n    class CustomRequestGlobals:\n        def __init__(self):\n            self.spam = 'eggs'\n\n    app.app_ctx_globals_class = CustomRequestGlobals\n    with app.app_context():\n        assert flask.render_template_string('{{ g.spam }}') == 'eggs',type='function_definition'\nline_star:154,line_end:161|char_star:0,char_end:69"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_custom_app_ctx_globals_class(app):\n    class CustomRequestGlobals:\n        def __init__(self):\n            self.spam = 'eggs'\n\n    app.app_ctx_globals_class = CustomRequestGlobals\n    with app.app_context():\n        assert flask.render_template_string('{{ g.spam }}') == 'eggs',type='function_definition'\nline_star:154,line_end:161|char_star:0,char_end:69";
"test_custom_app_ctx_globals_class,type='identifier'\nline_star:154,line_end:154|char_star:4,char_end:37"[shape="point",fillcolor="#121013",style=filled];
"def test_custom_app_ctx_globals_class(app):\n    class CustomRequestGlobals:\n        def __init__(self):\n            self.spam = 'eggs'\n\n    app.app_ctx_globals_class = CustomRequestGlobals\n    with app.app_context():\n        assert flask.render_template_string('{{ g.spam }}') == 'eggs',type='function_definition'\nline_star:154,line_end:161|char_star:0,char_end:69"->"test_custom_app_ctx_globals_class,type='identifier'\nline_star:154,line_end:154|char_star:4,char_end:37";
"(app),type='parameters'\nline_star:154,line_end:154|char_star:37,char_end:42"[shape="box",fillcolor="white",style=filled];
"def test_custom_app_ctx_globals_class(app):\n    class CustomRequestGlobals:\n        def __init__(self):\n            self.spam = 'eggs'\n\n    app.app_ctx_globals_class = CustomRequestGlobals\n    with app.app_context():\n        assert flask.render_template_string('{{ g.spam }}') == 'eggs',type='function_definition'\nline_star:154,line_end:161|char_star:0,char_end:69"->"(app),type='parameters'\nline_star:154,line_end:154|char_star:37,char_end:42";
"app,type='identifier'\nline_star:154,line_end:154|char_star:38,char_end:41"[shape="point",fillcolor="#121013",style=filled];
"(app),type='parameters'\nline_star:154,line_end:154|char_star:37,char_end:42"->"app,type='identifier'\nline_star:154,line_end:154|char_star:38,char_end:41";
"type='INFORMATION BLOCK'\nline_star:155,line_end:161|char_star:4,char_end:69"[shape="point",fillcolor="#121013",style=filled];
"def test_custom_app_ctx_globals_class(app):\n    class CustomRequestGlobals:\n        def __init__(self):\n            self.spam = 'eggs'\n\n    app.app_ctx_globals_class = CustomRequestGlobals\n    with app.app_context():\n        assert flask.render_template_string('{{ g.spam }}') == 'eggs',type='function_definition'\nline_star:154,line_end:161|char_star:0,char_end:69"->"type='INFORMATION BLOCK'\nline_star:155,line_end:161|char_star:4,char_end:69";
"class CustomRequestGlobals:\n        def __init__(self):\n            self.spam = 'eggs',type='class_definition'\nline_star:155,line_end:157|char_star:4,char_end:30"[shape="box",fillcolor="#ffdf91",style=filled];
"type='INFORMATION BLOCK'\nline_star:155,line_end:161|char_star:4,char_end:69"->"class CustomRequestGlobals:\n        def __init__(self):\n            self.spam = 'eggs',type='class_definition'\nline_star:155,line_end:157|char_star:4,char_end:30";
"CustomRequestGlobals,type='identifier'\nline_star:155,line_end:155|char_star:10,char_end:30"[shape="point",fillcolor="#121013",style=filled];
"class CustomRequestGlobals:\n        def __init__(self):\n            self.spam = 'eggs',type='class_definition'\nline_star:155,line_end:157|char_star:4,char_end:30"->"CustomRequestGlobals,type='identifier'\nline_star:155,line_end:155|char_star:10,char_end:30";
"type='INFORMATION BLOCK'\nline_star:156,line_end:157|char_star:8,char_end:30"[shape="point",fillcolor="#121013",style=filled];
"class CustomRequestGlobals:\n        def __init__(self):\n            self.spam = 'eggs',type='class_definition'\nline_star:155,line_end:157|char_star:4,char_end:30"->"type='INFORMATION BLOCK'\nline_star:156,line_end:157|char_star:8,char_end:30";
"def __init__(self):\n            self.spam = 'eggs',type='function_definition'\nline_star:156,line_end:157|char_star:8,char_end:30"[shape="box",fillcolor="#cee6b4",style=filled];
"type='INFORMATION BLOCK'\nline_star:156,line_end:157|char_star:8,char_end:30"->"def __init__(self):\n            self.spam = 'eggs',type='function_definition'\nline_star:156,line_end:157|char_star:8,char_end:30";
"__init__,type='identifier'\nline_star:156,line_end:156|char_star:12,char_end:20"[shape="point",fillcolor="#121013",style=filled];
"def __init__(self):\n            self.spam = 'eggs',type='function_definition'\nline_star:156,line_end:157|char_star:8,char_end:30"->"__init__,type='identifier'\nline_star:156,line_end:156|char_star:12,char_end:20";
"(self),type='parameters'\nline_star:156,line_end:156|char_star:20,char_end:26"[shape="box",fillcolor="white",style=filled];
"def __init__(self):\n            self.spam = 'eggs',type='function_definition'\nline_star:156,line_end:157|char_star:8,char_end:30"->"(self),type='parameters'\nline_star:156,line_end:156|char_star:20,char_end:26";
"self,type='identifier'\nline_star:156,line_end:156|char_star:21,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"(self),type='parameters'\nline_star:156,line_end:156|char_star:20,char_end:26"->"self,type='identifier'\nline_star:156,line_end:156|char_star:21,char_end:25";
"type='INFORMATION BLOCK'\nline_star:157,line_end:157|char_star:12,char_end:30"[shape="point",fillcolor="#121013",style=filled];
"def __init__(self):\n            self.spam = 'eggs',type='function_definition'\nline_star:156,line_end:157|char_star:8,char_end:30"->"type='INFORMATION BLOCK'\nline_star:157,line_end:157|char_star:12,char_end:30";
"with app.app_context():\n        assert flask.render_template_string('{{ g.spam }}') == 'eggs',type='with_statement'\nline_star:160,line_end:161|char_star:4,char_end:69"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:155,line_end:161|char_star:4,char_end:69"->"with app.app_context():\n        assert flask.render_template_string('{{ g.spam }}') == 'eggs',type='with_statement'\nline_star:160,line_end:161|char_star:4,char_end:69";
"app.app_context(),type='with_clause'\nline_star:160,line_end:160|char_star:9,char_end:26"[shape="box",fillcolor="white",style=filled];
"with app.app_context():\n        assert flask.render_template_string('{{ g.spam }}') == 'eggs',type='with_statement'\nline_star:160,line_end:161|char_star:4,char_end:69"->"app.app_context(),type='with_clause'\nline_star:160,line_end:160|char_star:9,char_end:26";
"type='INFORMATION BLOCK'\nline_star:161,line_end:161|char_star:8,char_end:69"[shape="point",fillcolor="#121013",style=filled];
"with app.app_context():\n        assert flask.render_template_string('{{ g.spam }}') == 'eggs',type='with_statement'\nline_star:160,line_end:161|char_star:4,char_end:69"->"type='INFORMATION BLOCK'\nline_star:161,line_end:161|char_star:8,char_end:69";
"assert flask.render_template_string('{{ g.spam }}') == 'eggs',type='assert_statement'\nline_star:161,line_end:161|char_star:8,char_end:69"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:161,line_end:161|char_star:8,char_end:69"->"assert flask.render_template_string('{{ g.spam }}') == 'eggs',type='assert_statement'\nline_star:161,line_end:161|char_star:8,char_end:69";
"flask.render_template_string('{{ g.spam }}') == 'eggs',type='comparison_operator'\nline_star:161,line_end:161|char_star:15,char_end:69"[shape="box",fillcolor="white",style=filled];
"assert flask.render_template_string('{{ g.spam }}') == 'eggs',type='assert_statement'\nline_star:161,line_end:161|char_star:8,char_end:69"->"flask.render_template_string('{{ g.spam }}') == 'eggs',type='comparison_operator'\nline_star:161,line_end:161|char_star:15,char_end:69";
"flask.render_template_string('{{ g.spam }}'),type='call'\nline_star:161,line_end:161|char_star:15,char_end:59"[shape="box",fillcolor="white",style=filled];
"flask.render_template_string('{{ g.spam }}') == 'eggs',type='comparison_operator'\nline_star:161,line_end:161|char_star:15,char_end:69"->"flask.render_template_string('{{ g.spam }}'),type='call'\nline_star:161,line_end:161|char_star:15,char_end:59";
"flask.render_template_string,type='attribute'\nline_star:161,line_end:161|char_star:15,char_end:43"[shape="box",fillcolor="white",style=filled];
"flask.render_template_string('{{ g.spam }}'),type='call'\nline_star:161,line_end:161|char_star:15,char_end:59"->"flask.render_template_string,type='attribute'\nline_star:161,line_end:161|char_star:15,char_end:43";
"flask,type='identifier'\nline_star:161,line_end:161|char_star:15,char_end:20"[shape="point",fillcolor="#121013",style=filled];
"flask.render_template_string,type='attribute'\nline_star:161,line_end:161|char_star:15,char_end:43"->"flask,type='identifier'\nline_star:161,line_end:161|char_star:15,char_end:20";
"render_template_string,type='identifier'\nline_star:161,line_end:161|char_star:21,char_end:43"[shape="point",fillcolor="#121013",style=filled];
"flask.render_template_string,type='attribute'\nline_star:161,line_end:161|char_star:15,char_end:43"->"render_template_string,type='identifier'\nline_star:161,line_end:161|char_star:21,char_end:43";
"('{{ g.spam }}'),type='argument_list'\nline_star:161,line_end:161|char_star:43,char_end:59"[shape="box",fillcolor="white",style=filled];
"flask.render_template_string('{{ g.spam }}'),type='call'\nline_star:161,line_end:161|char_star:15,char_end:59"->"('{{ g.spam }}'),type='argument_list'\nline_star:161,line_end:161|char_star:43,char_end:59";
"def test_context_refcounts(app, client):\n    called = []\n\n    @app.teardown_request\n    def teardown_req(error=None):\n        called.append('request')\n\n    @app.teardown_appcontext\n    def teardown_app(error=None):\n        called.append('app')\n\n    @app.route('/')\n    def index():\n        with flask._app_ctx_stack.top:\n            with flask._request_ctx_stack.top:\n                pass\n        env = flask._request_ctx_stack.top.request.environ\n        assert env['werkzeug.request'] is not None\n        return ''\n\n    res = client.get('/')\n    assert res.status_code == 200\n    assert res.data == b''\n    assert called == ['request', 'app'],type='function_definition'\nline_star:164,line_end:187|char_star:0,char_end:39"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_context_refcounts(app, client):\n    called = []\n\n    @app.teardown_request\n    def teardown_req(error=None):\n        called.append('request')\n\n    @app.teardown_appcontext\n    def teardown_app(error=None):\n        called.append('app')\n\n    @app.route('/')\n    def index():\n        with flask._app_ctx_stack.top:\n            with flask._request_ctx_stack.top:\n                pass\n        env = flask._request_ctx_stack.top.request.environ\n        assert env['werkzeug.request'] is not None\n        return ''\n\n    res = client.get('/')\n    assert res.status_code == 200\n    assert res.data == b''\n    assert called == ['request', 'app'],type='function_definition'\nline_star:164,line_end:187|char_star:0,char_end:39";
"test_context_refcounts,type='identifier'\nline_star:164,line_end:164|char_star:4,char_end:26"[shape="point",fillcolor="#121013",style=filled];
"def test_context_refcounts(app, client):\n    called = []\n\n    @app.teardown_request\n    def teardown_req(error=None):\n        called.append('request')\n\n    @app.teardown_appcontext\n    def teardown_app(error=None):\n        called.append('app')\n\n    @app.route('/')\n    def index():\n        with flask._app_ctx_stack.top:\n            with flask._request_ctx_stack.top:\n                pass\n        env = flask._request_ctx_stack.top.request.environ\n        assert env['werkzeug.request'] is not None\n        return ''\n\n    res = client.get('/')\n    assert res.status_code == 200\n    assert res.data == b''\n    assert called == ['request', 'app'],type='function_definition'\nline_star:164,line_end:187|char_star:0,char_end:39"->"test_context_refcounts,type='identifier'\nline_star:164,line_end:164|char_star:4,char_end:26";
"(app, client),type='parameters'\nline_star:164,line_end:164|char_star:26,char_end:39"[shape="box",fillcolor="white",style=filled];
"def test_context_refcounts(app, client):\n    called = []\n\n    @app.teardown_request\n    def teardown_req(error=None):\n        called.append('request')\n\n    @app.teardown_appcontext\n    def teardown_app(error=None):\n        called.append('app')\n\n    @app.route('/')\n    def index():\n        with flask._app_ctx_stack.top:\n            with flask._request_ctx_stack.top:\n                pass\n        env = flask._request_ctx_stack.top.request.environ\n        assert env['werkzeug.request'] is not None\n        return ''\n\n    res = client.get('/')\n    assert res.status_code == 200\n    assert res.data == b''\n    assert called == ['request', 'app'],type='function_definition'\nline_star:164,line_end:187|char_star:0,char_end:39"->"(app, client),type='parameters'\nline_star:164,line_end:164|char_star:26,char_end:39";
"app,type='identifier'\nline_star:164,line_end:164|char_star:27,char_end:30"[shape="point",fillcolor="#121013",style=filled];
"(app, client),type='parameters'\nline_star:164,line_end:164|char_star:26,char_end:39"->"app,type='identifier'\nline_star:164,line_end:164|char_star:27,char_end:30";
"client,type='identifier'\nline_star:164,line_end:164|char_star:32,char_end:38"[shape="point",fillcolor="#121013",style=filled];
"(app, client),type='parameters'\nline_star:164,line_end:164|char_star:26,char_end:39"->"client,type='identifier'\nline_star:164,line_end:164|char_star:32,char_end:38";
"type='INFORMATION BLOCK'\nline_star:165,line_end:187|char_star:4,char_end:39"[shape="point",fillcolor="#121013",style=filled];
"def test_context_refcounts(app, client):\n    called = []\n\n    @app.teardown_request\n    def teardown_req(error=None):\n        called.append('request')\n\n    @app.teardown_appcontext\n    def teardown_app(error=None):\n        called.append('app')\n\n    @app.route('/')\n    def index():\n        with flask._app_ctx_stack.top:\n            with flask._request_ctx_stack.top:\n                pass\n        env = flask._request_ctx_stack.top.request.environ\n        assert env['werkzeug.request'] is not None\n        return ''\n\n    res = client.get('/')\n    assert res.status_code == 200\n    assert res.data == b''\n    assert called == ['request', 'app'],type='function_definition'\nline_star:164,line_end:187|char_star:0,char_end:39"->"type='INFORMATION BLOCK'\nline_star:165,line_end:187|char_star:4,char_end:39";
"@app.teardown_request\n    def teardown_req(error=None):\n        called.append('request'),type='decorated_definition'\nline_star:167,line_end:169|char_star:4,char_end:32"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:165,line_end:187|char_star:4,char_end:39"->"@app.teardown_request\n    def teardown_req(error=None):\n        called.append('request'),type='decorated_definition'\nline_star:167,line_end:169|char_star:4,char_end:32";
"@app.teardown_request,type='decorator'\nline_star:167,line_end:167|char_star:4,char_end:25"[shape="box",fillcolor="white",style=filled];
"@app.teardown_request\n    def teardown_req(error=None):\n        called.append('request'),type='decorated_definition'\nline_star:167,line_end:169|char_star:4,char_end:32"->"@app.teardown_request,type='decorator'\nline_star:167,line_end:167|char_star:4,char_end:25";
"def teardown_req(error=None):\n        called.append('request'),type='function_definition'\nline_star:168,line_end:169|char_star:4,char_end:32"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.teardown_request\n    def teardown_req(error=None):\n        called.append('request'),type='decorated_definition'\nline_star:167,line_end:169|char_star:4,char_end:32"->"def teardown_req(error=None):\n        called.append('request'),type='function_definition'\nline_star:168,line_end:169|char_star:4,char_end:32";
"teardown_req,type='identifier'\nline_star:168,line_end:168|char_star:8,char_end:20"[shape="point",fillcolor="#121013",style=filled];
"def teardown_req(error=None):\n        called.append('request'),type='function_definition'\nline_star:168,line_end:169|char_star:4,char_end:32"->"teardown_req,type='identifier'\nline_star:168,line_end:168|char_star:8,char_end:20";
"(error=None),type='parameters'\nline_star:168,line_end:168|char_star:20,char_end:32"[shape="box",fillcolor="white",style=filled];
"def teardown_req(error=None):\n        called.append('request'),type='function_definition'\nline_star:168,line_end:169|char_star:4,char_end:32"->"(error=None),type='parameters'\nline_star:168,line_end:168|char_star:20,char_end:32";
"error=None,type='default_parameter'\nline_star:168,line_end:168|char_star:21,char_end:31"[shape="box",fillcolor="white",style=filled];
"(error=None),type='parameters'\nline_star:168,line_end:168|char_star:20,char_end:32"->"error=None,type='default_parameter'\nline_star:168,line_end:168|char_star:21,char_end:31";
"error,type='identifier'\nline_star:168,line_end:168|char_star:21,char_end:26"[shape="point",fillcolor="#121013",style=filled];
"error=None,type='default_parameter'\nline_star:168,line_end:168|char_star:21,char_end:31"->"error,type='identifier'\nline_star:168,line_end:168|char_star:21,char_end:26";
"type='INFORMATION BLOCK'\nline_star:169,line_end:169|char_star:8,char_end:32"[shape="point",fillcolor="#121013",style=filled];
"def teardown_req(error=None):\n        called.append('request'),type='function_definition'\nline_star:168,line_end:169|char_star:4,char_end:32"->"type='INFORMATION BLOCK'\nline_star:169,line_end:169|char_star:8,char_end:32";
"@app.teardown_appcontext\n    def teardown_app(error=None):\n        called.append('app'),type='decorated_definition'\nline_star:171,line_end:173|char_star:4,char_end:28"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:165,line_end:187|char_star:4,char_end:39"->"@app.teardown_appcontext\n    def teardown_app(error=None):\n        called.append('app'),type='decorated_definition'\nline_star:171,line_end:173|char_star:4,char_end:28";
"@app.teardown_appcontext,type='decorator'\nline_star:171,line_end:171|char_star:4,char_end:28"[shape="box",fillcolor="white",style=filled];
"@app.teardown_appcontext\n    def teardown_app(error=None):\n        called.append('app'),type='decorated_definition'\nline_star:171,line_end:173|char_star:4,char_end:28"->"@app.teardown_appcontext,type='decorator'\nline_star:171,line_end:171|char_star:4,char_end:28";
"def teardown_app(error=None):\n        called.append('app'),type='function_definition'\nline_star:172,line_end:173|char_star:4,char_end:28"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.teardown_appcontext\n    def teardown_app(error=None):\n        called.append('app'),type='decorated_definition'\nline_star:171,line_end:173|char_star:4,char_end:28"->"def teardown_app(error=None):\n        called.append('app'),type='function_definition'\nline_star:172,line_end:173|char_star:4,char_end:28";
"teardown_app,type='identifier'\nline_star:172,line_end:172|char_star:8,char_end:20"[shape="point",fillcolor="#121013",style=filled];
"def teardown_app(error=None):\n        called.append('app'),type='function_definition'\nline_star:172,line_end:173|char_star:4,char_end:28"->"teardown_app,type='identifier'\nline_star:172,line_end:172|char_star:8,char_end:20";
"(error=None),type='parameters'\nline_star:172,line_end:172|char_star:20,char_end:32"[shape="box",fillcolor="white",style=filled];
"def teardown_app(error=None):\n        called.append('app'),type='function_definition'\nline_star:172,line_end:173|char_star:4,char_end:28"->"(error=None),type='parameters'\nline_star:172,line_end:172|char_star:20,char_end:32";
"error=None,type='default_parameter'\nline_star:172,line_end:172|char_star:21,char_end:31"[shape="box",fillcolor="white",style=filled];
"(error=None),type='parameters'\nline_star:172,line_end:172|char_star:20,char_end:32"->"error=None,type='default_parameter'\nline_star:172,line_end:172|char_star:21,char_end:31";
"error,type='identifier'\nline_star:172,line_end:172|char_star:21,char_end:26"[shape="point",fillcolor="#121013",style=filled];
"error=None,type='default_parameter'\nline_star:172,line_end:172|char_star:21,char_end:31"->"error,type='identifier'\nline_star:172,line_end:172|char_star:21,char_end:26";
"type='INFORMATION BLOCK'\nline_star:173,line_end:173|char_star:8,char_end:28"[shape="point",fillcolor="#121013",style=filled];
"def teardown_app(error=None):\n        called.append('app'),type='function_definition'\nline_star:172,line_end:173|char_star:4,char_end:28"->"type='INFORMATION BLOCK'\nline_star:173,line_end:173|char_star:8,char_end:28";
"@app.route('/')\n    def index():\n        with flask._app_ctx_stack.top:\n            with flask._request_ctx_stack.top:\n                pass\n        env = flask._request_ctx_stack.top.request.environ\n        assert env['werkzeug.request'] is not None\n        return '',type='decorated_definition'\nline_star:175,line_end:182|char_star:4,char_end:17"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:165,line_end:187|char_star:4,char_end:39"->"@app.route('/')\n    def index():\n        with flask._app_ctx_stack.top:\n            with flask._request_ctx_stack.top:\n                pass\n        env = flask._request_ctx_stack.top.request.environ\n        assert env['werkzeug.request'] is not None\n        return '',type='decorated_definition'\nline_star:175,line_end:182|char_star:4,char_end:17";
"@app.route('/'),type='decorator'\nline_star:175,line_end:175|char_star:4,char_end:19"[shape="box",fillcolor="white",style=filled];
"@app.route('/')\n    def index():\n        with flask._app_ctx_stack.top:\n            with flask._request_ctx_stack.top:\n                pass\n        env = flask._request_ctx_stack.top.request.environ\n        assert env['werkzeug.request'] is not None\n        return '',type='decorated_definition'\nline_star:175,line_end:182|char_star:4,char_end:17"->"@app.route('/'),type='decorator'\nline_star:175,line_end:175|char_star:4,char_end:19";
"def index():\n        with flask._app_ctx_stack.top:\n            with flask._request_ctx_stack.top:\n                pass\n        env = flask._request_ctx_stack.top.request.environ\n        assert env['werkzeug.request'] is not None\n        return '',type='function_definition'\nline_star:176,line_end:182|char_star:4,char_end:17"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.route('/')\n    def index():\n        with flask._app_ctx_stack.top:\n            with flask._request_ctx_stack.top:\n                pass\n        env = flask._request_ctx_stack.top.request.environ\n        assert env['werkzeug.request'] is not None\n        return '',type='decorated_definition'\nline_star:175,line_end:182|char_star:4,char_end:17"->"def index():\n        with flask._app_ctx_stack.top:\n            with flask._request_ctx_stack.top:\n                pass\n        env = flask._request_ctx_stack.top.request.environ\n        assert env['werkzeug.request'] is not None\n        return '',type='function_definition'\nline_star:176,line_end:182|char_star:4,char_end:17";
"index,type='identifier'\nline_star:176,line_end:176|char_star:8,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"def index():\n        with flask._app_ctx_stack.top:\n            with flask._request_ctx_stack.top:\n                pass\n        env = flask._request_ctx_stack.top.request.environ\n        assert env['werkzeug.request'] is not None\n        return '',type='function_definition'\nline_star:176,line_end:182|char_star:4,char_end:17"->"index,type='identifier'\nline_star:176,line_end:176|char_star:8,char_end:13";
"type='INFORMATION BLOCK'\nline_star:177,line_end:182|char_star:8,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"def index():\n        with flask._app_ctx_stack.top:\n            with flask._request_ctx_stack.top:\n                pass\n        env = flask._request_ctx_stack.top.request.environ\n        assert env['werkzeug.request'] is not None\n        return '',type='function_definition'\nline_star:176,line_end:182|char_star:4,char_end:17"->"type='INFORMATION BLOCK'\nline_star:177,line_end:182|char_star:8,char_end:17";
"with flask._app_ctx_stack.top:\n            with flask._request_ctx_stack.top:\n                pass,type='with_statement'\nline_star:177,line_end:179|char_star:8,char_end:20"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:177,line_end:182|char_star:8,char_end:17"->"with flask._app_ctx_stack.top:\n            with flask._request_ctx_stack.top:\n                pass,type='with_statement'\nline_star:177,line_end:179|char_star:8,char_end:20";
"flask._app_ctx_stack.top,type='with_clause'\nline_star:177,line_end:177|char_star:13,char_end:37"[shape="box",fillcolor="white",style=filled];
"with flask._app_ctx_stack.top:\n            with flask._request_ctx_stack.top:\n                pass,type='with_statement'\nline_star:177,line_end:179|char_star:8,char_end:20"->"flask._app_ctx_stack.top,type='with_clause'\nline_star:177,line_end:177|char_star:13,char_end:37";
"type='INFORMATION BLOCK'\nline_star:178,line_end:179|char_star:12,char_end:20"[shape="point",fillcolor="#121013",style=filled];
"with flask._app_ctx_stack.top:\n            with flask._request_ctx_stack.top:\n                pass,type='with_statement'\nline_star:177,line_end:179|char_star:8,char_end:20"->"type='INFORMATION BLOCK'\nline_star:178,line_end:179|char_star:12,char_end:20";
"with flask._request_ctx_stack.top:\n                pass,type='with_statement'\nline_star:178,line_end:179|char_star:12,char_end:20"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:178,line_end:179|char_star:12,char_end:20"->"with flask._request_ctx_stack.top:\n                pass,type='with_statement'\nline_star:178,line_end:179|char_star:12,char_end:20";
"flask._request_ctx_stack.top,type='with_clause'\nline_star:178,line_end:178|char_star:17,char_end:45"[shape="box",fillcolor="white",style=filled];
"with flask._request_ctx_stack.top:\n                pass,type='with_statement'\nline_star:178,line_end:179|char_star:12,char_end:20"->"flask._request_ctx_stack.top,type='with_clause'\nline_star:178,line_end:178|char_star:17,char_end:45";
"type='INFORMATION BLOCK'\nline_star:179,line_end:179|char_star:16,char_end:20"[shape="point",fillcolor="#121013",style=filled];
"with flask._request_ctx_stack.top:\n                pass,type='with_statement'\nline_star:178,line_end:179|char_star:12,char_end:20"->"type='INFORMATION BLOCK'\nline_star:179,line_end:179|char_star:16,char_end:20";
"pass,type='pass_statement'\nline_star:179,line_end:179|char_star:16,char_end:20"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:179,line_end:179|char_star:16,char_end:20"->"pass,type='pass_statement'\nline_star:179,line_end:179|char_star:16,char_end:20";
"pass,type='pass'\nline_star:179,line_end:179|char_star:16,char_end:20"[shape="box",fillcolor="white",style=filled];
"pass,type='pass_statement'\nline_star:179,line_end:179|char_star:16,char_end:20"->"pass,type='pass'\nline_star:179,line_end:179|char_star:16,char_end:20";
"assert env['werkzeug.request'] is not None,type='assert_statement'\nline_star:181,line_end:181|char_star:8,char_end:50"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:177,line_end:182|char_star:8,char_end:17"->"assert env['werkzeug.request'] is not None,type='assert_statement'\nline_star:181,line_end:181|char_star:8,char_end:50";
"env['werkzeug.request'] is not None,type='comparison_operator'\nline_star:181,line_end:181|char_star:15,char_end:50"[shape="box",fillcolor="white",style=filled];
"assert env['werkzeug.request'] is not None,type='assert_statement'\nline_star:181,line_end:181|char_star:8,char_end:50"->"env['werkzeug.request'] is not None,type='comparison_operator'\nline_star:181,line_end:181|char_star:15,char_end:50";
"env['werkzeug.request'],type='subscript'\nline_star:181,line_end:181|char_star:15,char_end:38"[shape="box",fillcolor="white",style=filled];
"env['werkzeug.request'] is not None,type='comparison_operator'\nline_star:181,line_end:181|char_star:15,char_end:50"->"env['werkzeug.request'],type='subscript'\nline_star:181,line_end:181|char_star:15,char_end:38";
"env,type='identifier'\nline_star:181,line_end:181|char_star:15,char_end:18"[shape="point",fillcolor="#121013",style=filled];
"env['werkzeug.request'],type='subscript'\nline_star:181,line_end:181|char_star:15,char_end:38"->"env,type='identifier'\nline_star:181,line_end:181|char_star:15,char_end:18";
"return '',type='return_statement'\nline_star:182,line_end:182|char_star:8,char_end:17"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:177,line_end:182|char_star:8,char_end:17"->"return '',type='return_statement'\nline_star:182,line_end:182|char_star:8,char_end:17";
"assert res.status_code == 200,type='assert_statement'\nline_star:185,line_end:185|char_star:4,char_end:33"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:165,line_end:187|char_star:4,char_end:39"->"assert res.status_code == 200,type='assert_statement'\nline_star:185,line_end:185|char_star:4,char_end:33";
"res.status_code == 200,type='comparison_operator'\nline_star:185,line_end:185|char_star:11,char_end:33"[shape="box",fillcolor="white",style=filled];
"assert res.status_code == 200,type='assert_statement'\nline_star:185,line_end:185|char_star:4,char_end:33"->"res.status_code == 200,type='comparison_operator'\nline_star:185,line_end:185|char_star:11,char_end:33";
"res.status_code,type='attribute'\nline_star:185,line_end:185|char_star:11,char_end:26"[shape="box",fillcolor="white",style=filled];
"res.status_code == 200,type='comparison_operator'\nline_star:185,line_end:185|char_star:11,char_end:33"->"res.status_code,type='attribute'\nline_star:185,line_end:185|char_star:11,char_end:26";
"res,type='identifier'\nline_star:185,line_end:185|char_star:11,char_end:14"[shape="point",fillcolor="#121013",style=filled];
"res.status_code,type='attribute'\nline_star:185,line_end:185|char_star:11,char_end:26"->"res,type='identifier'\nline_star:185,line_end:185|char_star:11,char_end:14";
"status_code,type='identifier'\nline_star:185,line_end:185|char_star:15,char_end:26"[shape="point",fillcolor="#121013",style=filled];
"res.status_code,type='attribute'\nline_star:185,line_end:185|char_star:11,char_end:26"->"status_code,type='identifier'\nline_star:185,line_end:185|char_star:15,char_end:26";
"assert res.data == b'',type='assert_statement'\nline_star:186,line_end:186|char_star:4,char_end:26"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:165,line_end:187|char_star:4,char_end:39"->"assert res.data == b'',type='assert_statement'\nline_star:186,line_end:186|char_star:4,char_end:26";
"res.data == b'',type='comparison_operator'\nline_star:186,line_end:186|char_star:11,char_end:26"[shape="box",fillcolor="white",style=filled];
"assert res.data == b'',type='assert_statement'\nline_star:186,line_end:186|char_star:4,char_end:26"->"res.data == b'',type='comparison_operator'\nline_star:186,line_end:186|char_star:11,char_end:26";
"res.data,type='attribute'\nline_star:186,line_end:186|char_star:11,char_end:19"[shape="box",fillcolor="white",style=filled];
"res.data == b'',type='comparison_operator'\nline_star:186,line_end:186|char_star:11,char_end:26"->"res.data,type='attribute'\nline_star:186,line_end:186|char_star:11,char_end:19";
"res,type='identifier'\nline_star:186,line_end:186|char_star:11,char_end:14"[shape="point",fillcolor="#121013",style=filled];
"res.data,type='attribute'\nline_star:186,line_end:186|char_star:11,char_end:19"->"res,type='identifier'\nline_star:186,line_end:186|char_star:11,char_end:14";
"data,type='identifier'\nline_star:186,line_end:186|char_star:15,char_end:19"[shape="point",fillcolor="#121013",style=filled];
"res.data,type='attribute'\nline_star:186,line_end:186|char_star:11,char_end:19"->"data,type='identifier'\nline_star:186,line_end:186|char_star:15,char_end:19";
"assert called == ['request', 'app'],type='assert_statement'\nline_star:187,line_end:187|char_star:4,char_end:39"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:165,line_end:187|char_star:4,char_end:39"->"assert called == ['request', 'app'],type='assert_statement'\nline_star:187,line_end:187|char_star:4,char_end:39";
"called == ['request', 'app'],type='comparison_operator'\nline_star:187,line_end:187|char_star:11,char_end:39"[shape="box",fillcolor="white",style=filled];
"assert called == ['request', 'app'],type='assert_statement'\nline_star:187,line_end:187|char_star:4,char_end:39"->"called == ['request', 'app'],type='comparison_operator'\nline_star:187,line_end:187|char_star:11,char_end:39";
"called,type='identifier'\nline_star:187,line_end:187|char_star:11,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"called == ['request', 'app'],type='comparison_operator'\nline_star:187,line_end:187|char_star:11,char_end:39"->"called,type='identifier'\nline_star:187,line_end:187|char_star:11,char_end:17";
"['request', 'app'],type='list'\nline_star:187,line_end:187|char_star:21,char_end:39"[shape="box",fillcolor="white",style=filled];
"called == ['request', 'app'],type='comparison_operator'\nline_star:187,line_end:187|char_star:11,char_end:39"->"['request', 'app'],type='list'\nline_star:187,line_end:187|char_star:21,char_end:39";
"def test_clean_pop(app):\n    app.testing = False\n    called = []\n\n    @app.teardown_request\n    def teardown_req(error=None):\n        1 / 0\n\n    @app.teardown_appcontext\n    def teardown_app(error=None):\n        called.append('TEARDOWN')\n\n    try:\n        with app.test_request_context():\n            called.append(flask.current_app.name)\n    except ZeroDivisionError:\n        pass\n\n    assert called == ['flask_test', 'TEARDOWN']\n    assert not flask.current_app,type='function_definition'\nline_star:190,line_end:209|char_star:0,char_end:32"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_clean_pop(app):\n    app.testing = False\n    called = []\n\n    @app.teardown_request\n    def teardown_req(error=None):\n        1 / 0\n\n    @app.teardown_appcontext\n    def teardown_app(error=None):\n        called.append('TEARDOWN')\n\n    try:\n        with app.test_request_context():\n            called.append(flask.current_app.name)\n    except ZeroDivisionError:\n        pass\n\n    assert called == ['flask_test', 'TEARDOWN']\n    assert not flask.current_app,type='function_definition'\nline_star:190,line_end:209|char_star:0,char_end:32";
"test_clean_pop,type='identifier'\nline_star:190,line_end:190|char_star:4,char_end:18"[shape="point",fillcolor="#121013",style=filled];
"def test_clean_pop(app):\n    app.testing = False\n    called = []\n\n    @app.teardown_request\n    def teardown_req(error=None):\n        1 / 0\n\n    @app.teardown_appcontext\n    def teardown_app(error=None):\n        called.append('TEARDOWN')\n\n    try:\n        with app.test_request_context():\n            called.append(flask.current_app.name)\n    except ZeroDivisionError:\n        pass\n\n    assert called == ['flask_test', 'TEARDOWN']\n    assert not flask.current_app,type='function_definition'\nline_star:190,line_end:209|char_star:0,char_end:32"->"test_clean_pop,type='identifier'\nline_star:190,line_end:190|char_star:4,char_end:18";
"(app),type='parameters'\nline_star:190,line_end:190|char_star:18,char_end:23"[shape="box",fillcolor="white",style=filled];
"def test_clean_pop(app):\n    app.testing = False\n    called = []\n\n    @app.teardown_request\n    def teardown_req(error=None):\n        1 / 0\n\n    @app.teardown_appcontext\n    def teardown_app(error=None):\n        called.append('TEARDOWN')\n\n    try:\n        with app.test_request_context():\n            called.append(flask.current_app.name)\n    except ZeroDivisionError:\n        pass\n\n    assert called == ['flask_test', 'TEARDOWN']\n    assert not flask.current_app,type='function_definition'\nline_star:190,line_end:209|char_star:0,char_end:32"->"(app),type='parameters'\nline_star:190,line_end:190|char_star:18,char_end:23";
"app,type='identifier'\nline_star:190,line_end:190|char_star:19,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"(app),type='parameters'\nline_star:190,line_end:190|char_star:18,char_end:23"->"app,type='identifier'\nline_star:190,line_end:190|char_star:19,char_end:22";
"type='INFORMATION BLOCK'\nline_star:191,line_end:209|char_star:4,char_end:32"[shape="point",fillcolor="#121013",style=filled];
"def test_clean_pop(app):\n    app.testing = False\n    called = []\n\n    @app.teardown_request\n    def teardown_req(error=None):\n        1 / 0\n\n    @app.teardown_appcontext\n    def teardown_app(error=None):\n        called.append('TEARDOWN')\n\n    try:\n        with app.test_request_context():\n            called.append(flask.current_app.name)\n    except ZeroDivisionError:\n        pass\n\n    assert called == ['flask_test', 'TEARDOWN']\n    assert not flask.current_app,type='function_definition'\nline_star:190,line_end:209|char_star:0,char_end:32"->"type='INFORMATION BLOCK'\nline_star:191,line_end:209|char_star:4,char_end:32";
"@app.teardown_request\n    def teardown_req(error=None):\n        1 / 0,type='decorated_definition'\nline_star:194,line_end:196|char_star:4,char_end:13"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:191,line_end:209|char_star:4,char_end:32"->"@app.teardown_request\n    def teardown_req(error=None):\n        1 / 0,type='decorated_definition'\nline_star:194,line_end:196|char_star:4,char_end:13";
"@app.teardown_request,type='decorator'\nline_star:194,line_end:194|char_star:4,char_end:25"[shape="box",fillcolor="white",style=filled];
"@app.teardown_request\n    def teardown_req(error=None):\n        1 / 0,type='decorated_definition'\nline_star:194,line_end:196|char_star:4,char_end:13"->"@app.teardown_request,type='decorator'\nline_star:194,line_end:194|char_star:4,char_end:25";
"def teardown_req(error=None):\n        1 / 0,type='function_definition'\nline_star:195,line_end:196|char_star:4,char_end:13"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.teardown_request\n    def teardown_req(error=None):\n        1 / 0,type='decorated_definition'\nline_star:194,line_end:196|char_star:4,char_end:13"->"def teardown_req(error=None):\n        1 / 0,type='function_definition'\nline_star:195,line_end:196|char_star:4,char_end:13";
"teardown_req,type='identifier'\nline_star:195,line_end:195|char_star:8,char_end:20"[shape="point",fillcolor="#121013",style=filled];
"def teardown_req(error=None):\n        1 / 0,type='function_definition'\nline_star:195,line_end:196|char_star:4,char_end:13"->"teardown_req,type='identifier'\nline_star:195,line_end:195|char_star:8,char_end:20";
"(error=None),type='parameters'\nline_star:195,line_end:195|char_star:20,char_end:32"[shape="box",fillcolor="white",style=filled];
"def teardown_req(error=None):\n        1 / 0,type='function_definition'\nline_star:195,line_end:196|char_star:4,char_end:13"->"(error=None),type='parameters'\nline_star:195,line_end:195|char_star:20,char_end:32";
"error=None,type='default_parameter'\nline_star:195,line_end:195|char_star:21,char_end:31"[shape="box",fillcolor="white",style=filled];
"(error=None),type='parameters'\nline_star:195,line_end:195|char_star:20,char_end:32"->"error=None,type='default_parameter'\nline_star:195,line_end:195|char_star:21,char_end:31";
"error,type='identifier'\nline_star:195,line_end:195|char_star:21,char_end:26"[shape="point",fillcolor="#121013",style=filled];
"error=None,type='default_parameter'\nline_star:195,line_end:195|char_star:21,char_end:31"->"error,type='identifier'\nline_star:195,line_end:195|char_star:21,char_end:26";
"type='INFORMATION BLOCK'\nline_star:196,line_end:196|char_star:8,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"def teardown_req(error=None):\n        1 / 0,type='function_definition'\nline_star:195,line_end:196|char_star:4,char_end:13"->"type='INFORMATION BLOCK'\nline_star:196,line_end:196|char_star:8,char_end:13";
"@app.teardown_appcontext\n    def teardown_app(error=None):\n        called.append('TEARDOWN'),type='decorated_definition'\nline_star:198,line_end:200|char_star:4,char_end:33"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:191,line_end:209|char_star:4,char_end:32"->"@app.teardown_appcontext\n    def teardown_app(error=None):\n        called.append('TEARDOWN'),type='decorated_definition'\nline_star:198,line_end:200|char_star:4,char_end:33";
"@app.teardown_appcontext,type='decorator'\nline_star:198,line_end:198|char_star:4,char_end:28"[shape="box",fillcolor="white",style=filled];
"@app.teardown_appcontext\n    def teardown_app(error=None):\n        called.append('TEARDOWN'),type='decorated_definition'\nline_star:198,line_end:200|char_star:4,char_end:33"->"@app.teardown_appcontext,type='decorator'\nline_star:198,line_end:198|char_star:4,char_end:28";
"def teardown_app(error=None):\n        called.append('TEARDOWN'),type='function_definition'\nline_star:199,line_end:200|char_star:4,char_end:33"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.teardown_appcontext\n    def teardown_app(error=None):\n        called.append('TEARDOWN'),type='decorated_definition'\nline_star:198,line_end:200|char_star:4,char_end:33"->"def teardown_app(error=None):\n        called.append('TEARDOWN'),type='function_definition'\nline_star:199,line_end:200|char_star:4,char_end:33";
"teardown_app,type='identifier'\nline_star:199,line_end:199|char_star:8,char_end:20"[shape="point",fillcolor="#121013",style=filled];
"def teardown_app(error=None):\n        called.append('TEARDOWN'),type='function_definition'\nline_star:199,line_end:200|char_star:4,char_end:33"->"teardown_app,type='identifier'\nline_star:199,line_end:199|char_star:8,char_end:20";
"(error=None),type='parameters'\nline_star:199,line_end:199|char_star:20,char_end:32"[shape="box",fillcolor="white",style=filled];
"def teardown_app(error=None):\n        called.append('TEARDOWN'),type='function_definition'\nline_star:199,line_end:200|char_star:4,char_end:33"->"(error=None),type='parameters'\nline_star:199,line_end:199|char_star:20,char_end:32";
"error=None,type='default_parameter'\nline_star:199,line_end:199|char_star:21,char_end:31"[shape="box",fillcolor="white",style=filled];
"(error=None),type='parameters'\nline_star:199,line_end:199|char_star:20,char_end:32"->"error=None,type='default_parameter'\nline_star:199,line_end:199|char_star:21,char_end:31";
"error,type='identifier'\nline_star:199,line_end:199|char_star:21,char_end:26"[shape="point",fillcolor="#121013",style=filled];
"error=None,type='default_parameter'\nline_star:199,line_end:199|char_star:21,char_end:31"->"error,type='identifier'\nline_star:199,line_end:199|char_star:21,char_end:26";
"type='INFORMATION BLOCK'\nline_star:200,line_end:200|char_star:8,char_end:33"[shape="point",fillcolor="#121013",style=filled];
"def teardown_app(error=None):\n        called.append('TEARDOWN'),type='function_definition'\nline_star:199,line_end:200|char_star:4,char_end:33"->"type='INFORMATION BLOCK'\nline_star:200,line_end:200|char_star:8,char_end:33";
"try:\n        with app.test_request_context():\n            called.append(flask.current_app.name)\n    except ZeroDivisionError:\n        pass,type='try_statement'\nline_star:202,line_end:206|char_star:4,char_end:12"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:191,line_end:209|char_star:4,char_end:32"->"try:\n        with app.test_request_context():\n            called.append(flask.current_app.name)\n    except ZeroDivisionError:\n        pass,type='try_statement'\nline_star:202,line_end:206|char_star:4,char_end:12";
"try,type='try'\nline_star:202,line_end:202|char_star:4,char_end:7"[shape="box",fillcolor="white",style=filled];
"try:\n        with app.test_request_context():\n            called.append(flask.current_app.name)\n    except ZeroDivisionError:\n        pass,type='try_statement'\nline_star:202,line_end:206|char_star:4,char_end:12"->"try,type='try'\nline_star:202,line_end:202|char_star:4,char_end:7";
"type='INFORMATION BLOCK'\nline_star:203,line_end:204|char_star:8,char_end:49"[shape="point",fillcolor="#121013",style=filled];
"try:\n        with app.test_request_context():\n            called.append(flask.current_app.name)\n    except ZeroDivisionError:\n        pass,type='try_statement'\nline_star:202,line_end:206|char_star:4,char_end:12"->"type='INFORMATION BLOCK'\nline_star:203,line_end:204|char_star:8,char_end:49";
"with app.test_request_context():\n            called.append(flask.current_app.name),type='with_statement'\nline_star:203,line_end:204|char_star:8,char_end:49"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:203,line_end:204|char_star:8,char_end:49"->"with app.test_request_context():\n            called.append(flask.current_app.name),type='with_statement'\nline_star:203,line_end:204|char_star:8,char_end:49";
"app.test_request_context(),type='with_clause'\nline_star:203,line_end:203|char_star:13,char_end:39"[shape="box",fillcolor="white",style=filled];
"with app.test_request_context():\n            called.append(flask.current_app.name),type='with_statement'\nline_star:203,line_end:204|char_star:8,char_end:49"->"app.test_request_context(),type='with_clause'\nline_star:203,line_end:203|char_star:13,char_end:39";
"type='INFORMATION BLOCK'\nline_star:204,line_end:204|char_star:12,char_end:49"[shape="point",fillcolor="#121013",style=filled];
"with app.test_request_context():\n            called.append(flask.current_app.name),type='with_statement'\nline_star:203,line_end:204|char_star:8,char_end:49"->"type='INFORMATION BLOCK'\nline_star:204,line_end:204|char_star:12,char_end:49";
"except ZeroDivisionError:\n        pass,type='except_clause'\nline_star:205,line_end:206|char_star:4,char_end:12"[shape="box",fillcolor="white",style=filled];
"try:\n        with app.test_request_context():\n            called.append(flask.current_app.name)\n    except ZeroDivisionError:\n        pass,type='try_statement'\nline_star:202,line_end:206|char_star:4,char_end:12"->"except ZeroDivisionError:\n        pass,type='except_clause'\nline_star:205,line_end:206|char_star:4,char_end:12";
"except,type='except'\nline_star:205,line_end:205|char_star:4,char_end:10"[shape="box",fillcolor="white",style=filled];
"except ZeroDivisionError:\n        pass,type='except_clause'\nline_star:205,line_end:206|char_star:4,char_end:12"->"except,type='except'\nline_star:205,line_end:205|char_star:4,char_end:10";
"ZeroDivisionError,type='identifier'\nline_star:205,line_end:205|char_star:11,char_end:28"[shape="point",fillcolor="#121013",style=filled];
"except ZeroDivisionError:\n        pass,type='except_clause'\nline_star:205,line_end:206|char_star:4,char_end:12"->"ZeroDivisionError,type='identifier'\nline_star:205,line_end:205|char_star:11,char_end:28";
"type='INFORMATION BLOCK'\nline_star:206,line_end:206|char_star:8,char_end:12"[shape="point",fillcolor="#121013",style=filled];
"except ZeroDivisionError:\n        pass,type='except_clause'\nline_star:205,line_end:206|char_star:4,char_end:12"->"type='INFORMATION BLOCK'\nline_star:206,line_end:206|char_star:8,char_end:12";
"pass,type='pass_statement'\nline_star:206,line_end:206|char_star:8,char_end:12"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:206,line_end:206|char_star:8,char_end:12"->"pass,type='pass_statement'\nline_star:206,line_end:206|char_star:8,char_end:12";
"pass,type='pass'\nline_star:206,line_end:206|char_star:8,char_end:12"[shape="box",fillcolor="white",style=filled];
"pass,type='pass_statement'\nline_star:206,line_end:206|char_star:8,char_end:12"->"pass,type='pass'\nline_star:206,line_end:206|char_star:8,char_end:12";
"assert called == ['flask_test', 'TEARDOWN'],type='assert_statement'\nline_star:208,line_end:208|char_star:4,char_end:47"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:191,line_end:209|char_star:4,char_end:32"->"assert called == ['flask_test', 'TEARDOWN'],type='assert_statement'\nline_star:208,line_end:208|char_star:4,char_end:47";
"called == ['flask_test', 'TEARDOWN'],type='comparison_operator'\nline_star:208,line_end:208|char_star:11,char_end:47"[shape="box",fillcolor="white",style=filled];
"assert called == ['flask_test', 'TEARDOWN'],type='assert_statement'\nline_star:208,line_end:208|char_star:4,char_end:47"->"called == ['flask_test', 'TEARDOWN'],type='comparison_operator'\nline_star:208,line_end:208|char_star:11,char_end:47";
"called,type='identifier'\nline_star:208,line_end:208|char_star:11,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"called == ['flask_test', 'TEARDOWN'],type='comparison_operator'\nline_star:208,line_end:208|char_star:11,char_end:47"->"called,type='identifier'\nline_star:208,line_end:208|char_star:11,char_end:17";
"['flask_test', 'TEARDOWN'],type='list'\nline_star:208,line_end:208|char_star:21,char_end:47"[shape="box",fillcolor="white",style=filled];
"called == ['flask_test', 'TEARDOWN'],type='comparison_operator'\nline_star:208,line_end:208|char_star:11,char_end:47"->"['flask_test', 'TEARDOWN'],type='list'\nline_star:208,line_end:208|char_star:21,char_end:47";
"assert not flask.current_app,type='assert_statement'\nline_star:209,line_end:209|char_star:4,char_end:32"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:191,line_end:209|char_star:4,char_end:32"->"assert not flask.current_app,type='assert_statement'\nline_star:209,line_end:209|char_star:4,char_end:32";
"not flask.current_app,type='not_operator'\nline_star:209,line_end:209|char_star:11,char_end:32"[shape="box",fillcolor="white",style=filled];
"assert not flask.current_app,type='assert_statement'\nline_star:209,line_end:209|char_star:4,char_end:32"->"not flask.current_app,type='not_operator'\nline_star:209,line_end:209|char_star:11,char_end:32";
"flask.current_app,type='attribute'\nline_star:209,line_end:209|char_star:15,char_end:32"[shape="box",fillcolor="white",style=filled];
"not flask.current_app,type='not_operator'\nline_star:209,line_end:209|char_star:11,char_end:32"->"flask.current_app,type='attribute'\nline_star:209,line_end:209|char_star:15,char_end:32";
"flask,type='identifier'\nline_star:209,line_end:209|char_star:15,char_end:20"[shape="point",fillcolor="#121013",style=filled];
"flask.current_app,type='attribute'\nline_star:209,line_end:209|char_star:15,char_end:32"->"flask,type='identifier'\nline_star:209,line_end:209|char_star:15,char_end:20";
"current_app,type='identifier'\nline_star:209,line_end:209|char_star:21,char_end:32"[shape="point",fillcolor="#121013",style=filled];
"flask.current_app,type='attribute'\nline_star:209,line_end:209|char_star:15,char_end:32"->"current_app,type='identifier'\nline_star:209,line_end:209|char_star:21,char_end:32";
"import pytest\nimport flas"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"import pytest\nimport flas"
}
