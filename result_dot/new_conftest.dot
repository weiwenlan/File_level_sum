digraph G{
rankdir="LR";
"MODULE"[shape="box",fillcolor="white",style=filled];
"import os,type='import_statement'\nline_star:0,line_end:0|char_star:0,char_end:9"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"import os,type='import_statement'\nline_star:0,line_end:0|char_star:0,char_end:9";
"import pkgutil,type='import_statement'\nline_star:1,line_end:1|char_star:0,char_end:14"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"import pkgutil,type='import_statement'\nline_star:1,line_end:1|char_star:0,char_end:14";
"import sys,type='import_statement'\nline_star:2,line_end:2|char_star:0,char_end:10"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"import sys,type='import_statement'\nline_star:2,line_end:2|char_star:0,char_end:10";
"import textwrap,type='import_statement'\nline_star:3,line_end:3|char_star:0,char_end:15"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"import textwrap,type='import_statement'\nline_star:3,line_end:3|char_star:0,char_end:15";
"import pytest,type='import_statement'\nline_star:5,line_end:5|char_star:0,char_end:13"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"import pytest,type='import_statement'\nline_star:5,line_end:5|char_star:0,char_end:13";
"from _pytest import monkeypatch,type='import_from_statement'\nline_star:6,line_end:6|char_star:0,char_end:31"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"from _pytest import monkeypatch,type='import_from_statement'\nline_star:6,line_end:6|char_star:0,char_end:31";
"import flask,type='import_statement'\nline_star:8,line_end:8|char_star:0,char_end:12"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"import flask,type='import_statement'\nline_star:8,line_end:8|char_star:0,char_end:12";
"from flask import Flask as _Flask,type='import_from_statement'\nline_star:9,line_end:9|char_star:0,char_end:33"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"from flask import Flask as _Flask,type='import_from_statement'\nline_star:9,line_end:9|char_star:0,char_end:33";
"@pytest.fixture(scope='session', autouse=True)\ndef _standard_os_environ():\n    '''Set up ``os.environ`` at the start of the test session to have\n    standard values. Returns a list of operations that is used by\n    :func:`._reset_os_environ` after each test.\n    '''\n    mp = monkeypatch.MonkeyPatch()\n    out = (\n        (os.environ, 'FLASK_APP', monkeypatch.notset),\n        (os.environ, 'FLASK_ENV', monkeypatch.notset),\n        (os.environ, 'FLASK_DEBUG', monkeypatch.notset),\n        (os.environ, 'FLASK_RUN_FROM_CLI', monkeypatch.notset),\n        (os.environ, 'WERKZEUG_RUN_MAIN', monkeypatch.notset),\n    )\n\n    for _, key, value in out:\n        if value is monkeypatch.notset:\n            mp.delenv(key, False)\n        else:\n            mp.setenv(key, value)\n\n    yield out\n    mp.undo(),type='decorated_definition'\nline_star:12,line_end:34|char_star:0,char_end:13"[shape="box",fillcolor="#c8c6a7",style=filled];
"MODULE"->"@pytest.fixture(scope='session', autouse=True)\ndef _standard_os_environ():\n    '''Set up ``os.environ`` at the start of the test session to have\n    standard values. Returns a list of operations that is used by\n    :func:`._reset_os_environ` after each test.\n    '''\n    mp = monkeypatch.MonkeyPatch()\n    out = (\n        (os.environ, 'FLASK_APP', monkeypatch.notset),\n        (os.environ, 'FLASK_ENV', monkeypatch.notset),\n        (os.environ, 'FLASK_DEBUG', monkeypatch.notset),\n        (os.environ, 'FLASK_RUN_FROM_CLI', monkeypatch.notset),\n        (os.environ, 'WERKZEUG_RUN_MAIN', monkeypatch.notset),\n    )\n\n    for _, key, value in out:\n        if value is monkeypatch.notset:\n            mp.delenv(key, False)\n        else:\n            mp.setenv(key, value)\n\n    yield out\n    mp.undo(),type='decorated_definition'\nline_star:12,line_end:34|char_star:0,char_end:13";
"@pytest.fixture(scope='session', autouse=True),type='decorator'\nline_star:12,line_end:12|char_star:0,char_end:46"[shape="box",fillcolor="white",style=filled];
"@pytest.fixture(scope='session', autouse=True)\ndef _standard_os_environ():\n    '''Set up ``os.environ`` at the start of the test session to have\n    standard values. Returns a list of operations that is used by\n    :func:`._reset_os_environ` after each test.\n    '''\n    mp = monkeypatch.MonkeyPatch()\n    out = (\n        (os.environ, 'FLASK_APP', monkeypatch.notset),\n        (os.environ, 'FLASK_ENV', monkeypatch.notset),\n        (os.environ, 'FLASK_DEBUG', monkeypatch.notset),\n        (os.environ, 'FLASK_RUN_FROM_CLI', monkeypatch.notset),\n        (os.environ, 'WERKZEUG_RUN_MAIN', monkeypatch.notset),\n    )\n\n    for _, key, value in out:\n        if value is monkeypatch.notset:\n            mp.delenv(key, False)\n        else:\n            mp.setenv(key, value)\n\n    yield out\n    mp.undo(),type='decorated_definition'\nline_star:12,line_end:34|char_star:0,char_end:13"->"@pytest.fixture(scope='session', autouse=True),type='decorator'\nline_star:12,line_end:12|char_star:0,char_end:46";
"def _standard_os_environ():\n    '''Set up ``os.environ`` at the start of the test session to have\n    standard values. Returns a list of operations that is used by\n    :func:`._reset_os_environ` after each test.\n    '''\n    mp = monkeypatch.MonkeyPatch()\n    out = (\n        (os.environ, 'FLASK_APP', monkeypatch.notset),\n        (os.environ, 'FLASK_ENV', monkeypatch.notset),\n        (os.environ, 'FLASK_DEBUG', monkeypatch.notset),\n        (os.environ, 'FLASK_RUN_FROM_CLI', monkeypatch.notset),\n        (os.environ, 'WERKZEUG_RUN_MAIN', monkeypatch.notset),\n    )\n\n    for _, key, value in out:\n        if value is monkeypatch.notset:\n            mp.delenv(key, False)\n        else:\n            mp.setenv(key, value)\n\n    yield out\n    mp.undo(),type='function_definition'\nline_star:13,line_end:34|char_star:0,char_end:13"[shape="box",fillcolor="#cee6b4",style=filled];
"@pytest.fixture(scope='session', autouse=True)\ndef _standard_os_environ():\n    '''Set up ``os.environ`` at the start of the test session to have\n    standard values. Returns a list of operations that is used by\n    :func:`._reset_os_environ` after each test.\n    '''\n    mp = monkeypatch.MonkeyPatch()\n    out = (\n        (os.environ, 'FLASK_APP', monkeypatch.notset),\n        (os.environ, 'FLASK_ENV', monkeypatch.notset),\n        (os.environ, 'FLASK_DEBUG', monkeypatch.notset),\n        (os.environ, 'FLASK_RUN_FROM_CLI', monkeypatch.notset),\n        (os.environ, 'WERKZEUG_RUN_MAIN', monkeypatch.notset),\n    )\n\n    for _, key, value in out:\n        if value is monkeypatch.notset:\n            mp.delenv(key, False)\n        else:\n            mp.setenv(key, value)\n\n    yield out\n    mp.undo(),type='decorated_definition'\nline_star:12,line_end:34|char_star:0,char_end:13"->"def _standard_os_environ():\n    '''Set up ``os.environ`` at the start of the test session to have\n    standard values. Returns a list of operations that is used by\n    :func:`._reset_os_environ` after each test.\n    '''\n    mp = monkeypatch.MonkeyPatch()\n    out = (\n        (os.environ, 'FLASK_APP', monkeypatch.notset),\n        (os.environ, 'FLASK_ENV', monkeypatch.notset),\n        (os.environ, 'FLASK_DEBUG', monkeypatch.notset),\n        (os.environ, 'FLASK_RUN_FROM_CLI', monkeypatch.notset),\n        (os.environ, 'WERKZEUG_RUN_MAIN', monkeypatch.notset),\n    )\n\n    for _, key, value in out:\n        if value is monkeypatch.notset:\n            mp.delenv(key, False)\n        else:\n            mp.setenv(key, value)\n\n    yield out\n    mp.undo(),type='function_definition'\nline_star:13,line_end:34|char_star:0,char_end:13";
"_standard_os_environ,type='identifier'\nline_star:13,line_end:13|char_star:4,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"def _standard_os_environ():\n    '''Set up ``os.environ`` at the start of the test session to have\n    standard values. Returns a list of operations that is used by\n    :func:`._reset_os_environ` after each test.\n    '''\n    mp = monkeypatch.MonkeyPatch()\n    out = (\n        (os.environ, 'FLASK_APP', monkeypatch.notset),\n        (os.environ, 'FLASK_ENV', monkeypatch.notset),\n        (os.environ, 'FLASK_DEBUG', monkeypatch.notset),\n        (os.environ, 'FLASK_RUN_FROM_CLI', monkeypatch.notset),\n        (os.environ, 'WERKZEUG_RUN_MAIN', monkeypatch.notset),\n    )\n\n    for _, key, value in out:\n        if value is monkeypatch.notset:\n            mp.delenv(key, False)\n        else:\n            mp.setenv(key, value)\n\n    yield out\n    mp.undo(),type='function_definition'\nline_star:13,line_end:34|char_star:0,char_end:13"->"_standard_os_environ,type='identifier'\nline_star:13,line_end:13|char_star:4,char_end:24";
"type='INFORMATION BLOCK'\nline_star:14,line_end:34|char_star:4,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"def _standard_os_environ():\n    '''Set up ``os.environ`` at the start of the test session to have\n    standard values. Returns a list of operations that is used by\n    :func:`._reset_os_environ` after each test.\n    '''\n    mp = monkeypatch.MonkeyPatch()\n    out = (\n        (os.environ, 'FLASK_APP', monkeypatch.notset),\n        (os.environ, 'FLASK_ENV', monkeypatch.notset),\n        (os.environ, 'FLASK_DEBUG', monkeypatch.notset),\n        (os.environ, 'FLASK_RUN_FROM_CLI', monkeypatch.notset),\n        (os.environ, 'WERKZEUG_RUN_MAIN', monkeypatch.notset),\n    )\n\n    for _, key, value in out:\n        if value is monkeypatch.notset:\n            mp.delenv(key, False)\n        else:\n            mp.setenv(key, value)\n\n    yield out\n    mp.undo(),type='function_definition'\nline_star:13,line_end:34|char_star:0,char_end:13"->"type='INFORMATION BLOCK'\nline_star:14,line_end:34|char_star:4,char_end:13";
"for _, key, value in out:\n        if value is monkeypatch.notset:\n            mp.delenv(key, False)\n        else:\n            mp.setenv(key, value),type='for_statement'\nline_star:27,line_end:31|char_star:4,char_end:33"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:14,line_end:34|char_star:4,char_end:13"->"for _, key, value in out:\n        if value is monkeypatch.notset:\n            mp.delenv(key, False)\n        else:\n            mp.setenv(key, value),type='for_statement'\nline_star:27,line_end:31|char_star:4,char_end:33";
"@pytest.fixture(autouse=True)\ndef _reset_os_environ(monkeypatch, _standard_os_environ):\n    '''Reset ``os.environ`` to the standard environ after each test,\n    in case a test changed something without cleaning up.\n    '''\n    monkeypatch._setitem.extend(_standard_os_environ),type='decorated_definition'\nline_star:37,line_end:42|char_star:0,char_end:53"[shape="box",fillcolor="#c8c6a7",style=filled];
"MODULE"->"@pytest.fixture(autouse=True)\ndef _reset_os_environ(monkeypatch, _standard_os_environ):\n    '''Reset ``os.environ`` to the standard environ after each test,\n    in case a test changed something without cleaning up.\n    '''\n    monkeypatch._setitem.extend(_standard_os_environ),type='decorated_definition'\nline_star:37,line_end:42|char_star:0,char_end:53";
"@pytest.fixture(autouse=True),type='decorator'\nline_star:37,line_end:37|char_star:0,char_end:29"[shape="box",fillcolor="white",style=filled];
"@pytest.fixture(autouse=True)\ndef _reset_os_environ(monkeypatch, _standard_os_environ):\n    '''Reset ``os.environ`` to the standard environ after each test,\n    in case a test changed something without cleaning up.\n    '''\n    monkeypatch._setitem.extend(_standard_os_environ),type='decorated_definition'\nline_star:37,line_end:42|char_star:0,char_end:53"->"@pytest.fixture(autouse=True),type='decorator'\nline_star:37,line_end:37|char_star:0,char_end:29";
"def _reset_os_environ(monkeypatch, _standard_os_environ):\n    '''Reset ``os.environ`` to the standard environ after each test,\n    in case a test changed something without cleaning up.\n    '''\n    monkeypatch._setitem.extend(_standard_os_environ),type='function_definition'\nline_star:38,line_end:42|char_star:0,char_end:53"[shape="box",fillcolor="#cee6b4",style=filled];
"@pytest.fixture(autouse=True)\ndef _reset_os_environ(monkeypatch, _standard_os_environ):\n    '''Reset ``os.environ`` to the standard environ after each test,\n    in case a test changed something without cleaning up.\n    '''\n    monkeypatch._setitem.extend(_standard_os_environ),type='decorated_definition'\nline_star:37,line_end:42|char_star:0,char_end:53"->"def _reset_os_environ(monkeypatch, _standard_os_environ):\n    '''Reset ``os.environ`` to the standard environ after each test,\n    in case a test changed something without cleaning up.\n    '''\n    monkeypatch._setitem.extend(_standard_os_environ),type='function_definition'\nline_star:38,line_end:42|char_star:0,char_end:53";
"_reset_os_environ,type='identifier'\nline_star:38,line_end:38|char_star:4,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"def _reset_os_environ(monkeypatch, _standard_os_environ):\n    '''Reset ``os.environ`` to the standard environ after each test,\n    in case a test changed something without cleaning up.\n    '''\n    monkeypatch._setitem.extend(_standard_os_environ),type='function_definition'\nline_star:38,line_end:42|char_star:0,char_end:53"->"_reset_os_environ,type='identifier'\nline_star:38,line_end:38|char_star:4,char_end:21";
"(monkeypatch, _standard_os_environ),type='parameters'\nline_star:38,line_end:38|char_star:21,char_end:56"[shape="box",fillcolor="white",style=filled];
"def _reset_os_environ(monkeypatch, _standard_os_environ):\n    '''Reset ``os.environ`` to the standard environ after each test,\n    in case a test changed something without cleaning up.\n    '''\n    monkeypatch._setitem.extend(_standard_os_environ),type='function_definition'\nline_star:38,line_end:42|char_star:0,char_end:53"->"(monkeypatch, _standard_os_environ),type='parameters'\nline_star:38,line_end:38|char_star:21,char_end:56";
"monkeypatch,type='identifier'\nline_star:38,line_end:38|char_star:22,char_end:33"[shape="point",fillcolor="#121013",style=filled];
"(monkeypatch, _standard_os_environ),type='parameters'\nline_star:38,line_end:38|char_star:21,char_end:56"->"monkeypatch,type='identifier'\nline_star:38,line_end:38|char_star:22,char_end:33";
"_standard_os_environ,type='identifier'\nline_star:38,line_end:38|char_star:35,char_end:55"[shape="point",fillcolor="#121013",style=filled];
"(monkeypatch, _standard_os_environ),type='parameters'\nline_star:38,line_end:38|char_star:21,char_end:56"->"_standard_os_environ,type='identifier'\nline_star:38,line_end:38|char_star:35,char_end:55";
"type='INFORMATION BLOCK'\nline_star:39,line_end:42|char_star:4,char_end:53"[shape="point",fillcolor="#121013",style=filled];
"def _reset_os_environ(monkeypatch, _standard_os_environ):\n    '''Reset ``os.environ`` to the standard environ after each test,\n    in case a test changed something without cleaning up.\n    '''\n    monkeypatch._setitem.extend(_standard_os_environ),type='function_definition'\nline_star:38,line_end:42|char_star:0,char_end:53"->"type='INFORMATION BLOCK'\nline_star:39,line_end:42|char_star:4,char_end:53";
"class Flask(_Flask):\n    testing = True\n    secret_key = 'test key',type='class_definition'\nline_star:45,line_end:47|char_star:0,char_end:27"[shape="box",fillcolor="#ffdf91",style=filled];
"MODULE"->"class Flask(_Flask):\n    testing = True\n    secret_key = 'test key',type='class_definition'\nline_star:45,line_end:47|char_star:0,char_end:27";
"Flask,type='identifier'\nline_star:45,line_end:45|char_star:6,char_end:11"[shape="point",fillcolor="#121013",style=filled];
"class Flask(_Flask):\n    testing = True\n    secret_key = 'test key',type='class_definition'\nline_star:45,line_end:47|char_star:0,char_end:27"->"Flask,type='identifier'\nline_star:45,line_end:45|char_star:6,char_end:11";
"(_Flask),type='argument_list'\nline_star:45,line_end:45|char_star:11,char_end:19"[shape="box",fillcolor="white",style=filled];
"class Flask(_Flask):\n    testing = True\n    secret_key = 'test key',type='class_definition'\nline_star:45,line_end:47|char_star:0,char_end:27"->"(_Flask),type='argument_list'\nline_star:45,line_end:45|char_star:11,char_end:19";
"_Flask,type='identifier'\nline_star:45,line_end:45|char_star:12,char_end:18"[shape="point",fillcolor="#121013",style=filled];
"(_Flask),type='argument_list'\nline_star:45,line_end:45|char_star:11,char_end:19"->"_Flask,type='identifier'\nline_star:45,line_end:45|char_star:12,char_end:18";
"type='INFORMATION BLOCK'\nline_star:46,line_end:47|char_star:4,char_end:27"[shape="point",fillcolor="#121013",style=filled];
"class Flask(_Flask):\n    testing = True\n    secret_key = 'test key',type='class_definition'\nline_star:45,line_end:47|char_star:0,char_end:27"->"type='INFORMATION BLOCK'\nline_star:46,line_end:47|char_star:4,char_end:27";
"@pytest.fixture\ndef app():\n    app = Flask('flask_test', root_path=os.path.dirname(__file__))\n    return app,type='decorated_definition'\nline_star:50,line_end:53|char_star:0,char_end:14"[shape="box",fillcolor="#c8c6a7",style=filled];
"MODULE"->"@pytest.fixture\ndef app():\n    app = Flask('flask_test', root_path=os.path.dirname(__file__))\n    return app,type='decorated_definition'\nline_star:50,line_end:53|char_star:0,char_end:14";
"@pytest.fixture,type='decorator'\nline_star:50,line_end:50|char_star:0,char_end:15"[shape="box",fillcolor="white",style=filled];
"@pytest.fixture\ndef app():\n    app = Flask('flask_test', root_path=os.path.dirname(__file__))\n    return app,type='decorated_definition'\nline_star:50,line_end:53|char_star:0,char_end:14"->"@pytest.fixture,type='decorator'\nline_star:50,line_end:50|char_star:0,char_end:15";
"def app():\n    app = Flask('flask_test', root_path=os.path.dirname(__file__))\n    return app,type='function_definition'\nline_star:51,line_end:53|char_star:0,char_end:14"[shape="box",fillcolor="#cee6b4",style=filled];
"@pytest.fixture\ndef app():\n    app = Flask('flask_test', root_path=os.path.dirname(__file__))\n    return app,type='decorated_definition'\nline_star:50,line_end:53|char_star:0,char_end:14"->"def app():\n    app = Flask('flask_test', root_path=os.path.dirname(__file__))\n    return app,type='function_definition'\nline_star:51,line_end:53|char_star:0,char_end:14";
"app,type='identifier'\nline_star:51,line_end:51|char_star:4,char_end:7"[shape="point",fillcolor="#121013",style=filled];
"def app():\n    app = Flask('flask_test', root_path=os.path.dirname(__file__))\n    return app,type='function_definition'\nline_star:51,line_end:53|char_star:0,char_end:14"->"app,type='identifier'\nline_star:51,line_end:51|char_star:4,char_end:7";
"type='INFORMATION BLOCK'\nline_star:52,line_end:53|char_star:4,char_end:14"[shape="point",fillcolor="#121013",style=filled];
"def app():\n    app = Flask('flask_test', root_path=os.path.dirname(__file__))\n    return app,type='function_definition'\nline_star:51,line_end:53|char_star:0,char_end:14"->"type='INFORMATION BLOCK'\nline_star:52,line_end:53|char_star:4,char_end:14";
"return app,type='return_statement'\nline_star:53,line_end:53|char_star:4,char_end:14"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:52,line_end:53|char_star:4,char_end:14"->"return app,type='return_statement'\nline_star:53,line_end:53|char_star:4,char_end:14";
"@pytest.fixture\ndef app_ctx(app):\n    with app.app_context() as ctx:\n        yield ctx,type='decorated_definition'\nline_star:56,line_end:59|char_star:0,char_end:17"[shape="box",fillcolor="#c8c6a7",style=filled];
"MODULE"->"@pytest.fixture\ndef app_ctx(app):\n    with app.app_context() as ctx:\n        yield ctx,type='decorated_definition'\nline_star:56,line_end:59|char_star:0,char_end:17";
"@pytest.fixture,type='decorator'\nline_star:56,line_end:56|char_star:0,char_end:15"[shape="box",fillcolor="white",style=filled];
"@pytest.fixture\ndef app_ctx(app):\n    with app.app_context() as ctx:\n        yield ctx,type='decorated_definition'\nline_star:56,line_end:59|char_star:0,char_end:17"->"@pytest.fixture,type='decorator'\nline_star:56,line_end:56|char_star:0,char_end:15";
"def app_ctx(app):\n    with app.app_context() as ctx:\n        yield ctx,type='function_definition'\nline_star:57,line_end:59|char_star:0,char_end:17"[shape="box",fillcolor="#cee6b4",style=filled];
"@pytest.fixture\ndef app_ctx(app):\n    with app.app_context() as ctx:\n        yield ctx,type='decorated_definition'\nline_star:56,line_end:59|char_star:0,char_end:17"->"def app_ctx(app):\n    with app.app_context() as ctx:\n        yield ctx,type='function_definition'\nline_star:57,line_end:59|char_star:0,char_end:17";
"app_ctx,type='identifier'\nline_star:57,line_end:57|char_star:4,char_end:11"[shape="point",fillcolor="#121013",style=filled];
"def app_ctx(app):\n    with app.app_context() as ctx:\n        yield ctx,type='function_definition'\nline_star:57,line_end:59|char_star:0,char_end:17"->"app_ctx,type='identifier'\nline_star:57,line_end:57|char_star:4,char_end:11";
"(app),type='parameters'\nline_star:57,line_end:57|char_star:11,char_end:16"[shape="box",fillcolor="white",style=filled];
"def app_ctx(app):\n    with app.app_context() as ctx:\n        yield ctx,type='function_definition'\nline_star:57,line_end:59|char_star:0,char_end:17"->"(app),type='parameters'\nline_star:57,line_end:57|char_star:11,char_end:16";
"app,type='identifier'\nline_star:57,line_end:57|char_star:12,char_end:15"[shape="point",fillcolor="#121013",style=filled];
"(app),type='parameters'\nline_star:57,line_end:57|char_star:11,char_end:16"->"app,type='identifier'\nline_star:57,line_end:57|char_star:12,char_end:15";
"type='INFORMATION BLOCK'\nline_star:58,line_end:59|char_star:4,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"def app_ctx(app):\n    with app.app_context() as ctx:\n        yield ctx,type='function_definition'\nline_star:57,line_end:59|char_star:0,char_end:17"->"type='INFORMATION BLOCK'\nline_star:58,line_end:59|char_star:4,char_end:17";
"with app.app_context() as ctx:\n        yield ctx,type='with_statement'\nline_star:58,line_end:59|char_star:4,char_end:17"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:58,line_end:59|char_star:4,char_end:17"->"with app.app_context() as ctx:\n        yield ctx,type='with_statement'\nline_star:58,line_end:59|char_star:4,char_end:17";
"app.app_context() as ctx,type='with_clause'\nline_star:58,line_end:58|char_star:9,char_end:33"[shape="box",fillcolor="white",style=filled];
"with app.app_context() as ctx:\n        yield ctx,type='with_statement'\nline_star:58,line_end:59|char_star:4,char_end:17"->"app.app_context() as ctx,type='with_clause'\nline_star:58,line_end:58|char_star:9,char_end:33";
"type='INFORMATION BLOCK'\nline_star:59,line_end:59|char_star:8,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"with app.app_context() as ctx:\n        yield ctx,type='with_statement'\nline_star:58,line_end:59|char_star:4,char_end:17"->"type='INFORMATION BLOCK'\nline_star:59,line_end:59|char_star:8,char_end:17";
"@pytest.fixture\ndef req_ctx(app):\n    with app.test_request_context() as ctx:\n        yield ctx,type='decorated_definition'\nline_star:62,line_end:65|char_star:0,char_end:17"[shape="box",fillcolor="#c8c6a7",style=filled];
"MODULE"->"@pytest.fixture\ndef req_ctx(app):\n    with app.test_request_context() as ctx:\n        yield ctx,type='decorated_definition'\nline_star:62,line_end:65|char_star:0,char_end:17";
"@pytest.fixture,type='decorator'\nline_star:62,line_end:62|char_star:0,char_end:15"[shape="box",fillcolor="white",style=filled];
"@pytest.fixture\ndef req_ctx(app):\n    with app.test_request_context() as ctx:\n        yield ctx,type='decorated_definition'\nline_star:62,line_end:65|char_star:0,char_end:17"->"@pytest.fixture,type='decorator'\nline_star:62,line_end:62|char_star:0,char_end:15";
"def req_ctx(app):\n    with app.test_request_context() as ctx:\n        yield ctx,type='function_definition'\nline_star:63,line_end:65|char_star:0,char_end:17"[shape="box",fillcolor="#cee6b4",style=filled];
"@pytest.fixture\ndef req_ctx(app):\n    with app.test_request_context() as ctx:\n        yield ctx,type='decorated_definition'\nline_star:62,line_end:65|char_star:0,char_end:17"->"def req_ctx(app):\n    with app.test_request_context() as ctx:\n        yield ctx,type='function_definition'\nline_star:63,line_end:65|char_star:0,char_end:17";
"req_ctx,type='identifier'\nline_star:63,line_end:63|char_star:4,char_end:11"[shape="point",fillcolor="#121013",style=filled];
"def req_ctx(app):\n    with app.test_request_context() as ctx:\n        yield ctx,type='function_definition'\nline_star:63,line_end:65|char_star:0,char_end:17"->"req_ctx,type='identifier'\nline_star:63,line_end:63|char_star:4,char_end:11";
"(app),type='parameters'\nline_star:63,line_end:63|char_star:11,char_end:16"[shape="box",fillcolor="white",style=filled];
"def req_ctx(app):\n    with app.test_request_context() as ctx:\n        yield ctx,type='function_definition'\nline_star:63,line_end:65|char_star:0,char_end:17"->"(app),type='parameters'\nline_star:63,line_end:63|char_star:11,char_end:16";
"app,type='identifier'\nline_star:63,line_end:63|char_star:12,char_end:15"[shape="point",fillcolor="#121013",style=filled];
"(app),type='parameters'\nline_star:63,line_end:63|char_star:11,char_end:16"->"app,type='identifier'\nline_star:63,line_end:63|char_star:12,char_end:15";
"type='INFORMATION BLOCK'\nline_star:64,line_end:65|char_star:4,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"def req_ctx(app):\n    with app.test_request_context() as ctx:\n        yield ctx,type='function_definition'\nline_star:63,line_end:65|char_star:0,char_end:17"->"type='INFORMATION BLOCK'\nline_star:64,line_end:65|char_star:4,char_end:17";
"with app.test_request_context() as ctx:\n        yield ctx,type='with_statement'\nline_star:64,line_end:65|char_star:4,char_end:17"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:64,line_end:65|char_star:4,char_end:17"->"with app.test_request_context() as ctx:\n        yield ctx,type='with_statement'\nline_star:64,line_end:65|char_star:4,char_end:17";
"app.test_request_context() as ctx,type='with_clause'\nline_star:64,line_end:64|char_star:9,char_end:42"[shape="box",fillcolor="white",style=filled];
"with app.test_request_context() as ctx:\n        yield ctx,type='with_statement'\nline_star:64,line_end:65|char_star:4,char_end:17"->"app.test_request_context() as ctx,type='with_clause'\nline_star:64,line_end:64|char_star:9,char_end:42";
"type='INFORMATION BLOCK'\nline_star:65,line_end:65|char_star:8,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"with app.test_request_context() as ctx:\n        yield ctx,type='with_statement'\nline_star:64,line_end:65|char_star:4,char_end:17"->"type='INFORMATION BLOCK'\nline_star:65,line_end:65|char_star:8,char_end:17";
"@pytest.fixture\ndef client(app):\n    return app.test_client(),type='decorated_definition'\nline_star:68,line_end:70|char_star:0,char_end:28"[shape="box",fillcolor="#c8c6a7",style=filled];
"MODULE"->"@pytest.fixture\ndef client(app):\n    return app.test_client(),type='decorated_definition'\nline_star:68,line_end:70|char_star:0,char_end:28";
"@pytest.fixture,type='decorator'\nline_star:68,line_end:68|char_star:0,char_end:15"[shape="box",fillcolor="white",style=filled];
"@pytest.fixture\ndef client(app):\n    return app.test_client(),type='decorated_definition'\nline_star:68,line_end:70|char_star:0,char_end:28"->"@pytest.fixture,type='decorator'\nline_star:68,line_end:68|char_star:0,char_end:15";
"def client(app):\n    return app.test_client(),type='function_definition'\nline_star:69,line_end:70|char_star:0,char_end:28"[shape="box",fillcolor="#cee6b4",style=filled];
"@pytest.fixture\ndef client(app):\n    return app.test_client(),type='decorated_definition'\nline_star:68,line_end:70|char_star:0,char_end:28"->"def client(app):\n    return app.test_client(),type='function_definition'\nline_star:69,line_end:70|char_star:0,char_end:28";
"client,type='identifier'\nline_star:69,line_end:69|char_star:4,char_end:10"[shape="point",fillcolor="#121013",style=filled];
"def client(app):\n    return app.test_client(),type='function_definition'\nline_star:69,line_end:70|char_star:0,char_end:28"->"client,type='identifier'\nline_star:69,line_end:69|char_star:4,char_end:10";
"(app),type='parameters'\nline_star:69,line_end:69|char_star:10,char_end:15"[shape="box",fillcolor="white",style=filled];
"def client(app):\n    return app.test_client(),type='function_definition'\nline_star:69,line_end:70|char_star:0,char_end:28"->"(app),type='parameters'\nline_star:69,line_end:69|char_star:10,char_end:15";
"app,type='identifier'\nline_star:69,line_end:69|char_star:11,char_end:14"[shape="point",fillcolor="#121013",style=filled];
"(app),type='parameters'\nline_star:69,line_end:69|char_star:10,char_end:15"->"app,type='identifier'\nline_star:69,line_end:69|char_star:11,char_end:14";
"type='INFORMATION BLOCK'\nline_star:70,line_end:70|char_star:4,char_end:28"[shape="point",fillcolor="#121013",style=filled];
"def client(app):\n    return app.test_client(),type='function_definition'\nline_star:69,line_end:70|char_star:0,char_end:28"->"type='INFORMATION BLOCK'\nline_star:70,line_end:70|char_star:4,char_end:28";
"return app.test_client(),type='return_statement'\nline_star:70,line_end:70|char_star:4,char_end:28"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:70,line_end:70|char_star:4,char_end:28"->"return app.test_client(),type='return_statement'\nline_star:70,line_end:70|char_star:4,char_end:28";
"@pytest.fixture\ndef test_apps(monkeypatch):\n    monkeypatch.syspath_prepend(os.path.join(os.path.dirname(__file__), 'test_apps'))\n    original_modules = set(sys.modules.keys())\n\n    yield\n\n    # Remove any imports cached during the test. Otherwise 'import app'\n    # will work in the next test even though it's no longer on the path.\n    for key in sys.modules.keys() - original_modules:\n        sys.modules.pop(key),type='decorated_definition'\nline_star:73,line_end:83|char_star:0,char_end:28"[shape="box",fillcolor="#c8c6a7",style=filled];
"MODULE"->"@pytest.fixture\ndef test_apps(monkeypatch):\n    monkeypatch.syspath_prepend(os.path.join(os.path.dirname(__file__), 'test_apps'))\n    original_modules = set(sys.modules.keys())\n\n    yield\n\n    # Remove any imports cached during the test. Otherwise 'import app'\n    # will work in the next test even though it's no longer on the path.\n    for key in sys.modules.keys() - original_modules:\n        sys.modules.pop(key),type='decorated_definition'\nline_star:73,line_end:83|char_star:0,char_end:28";
"@pytest.fixture,type='decorator'\nline_star:73,line_end:73|char_star:0,char_end:15"[shape="box",fillcolor="white",style=filled];
"@pytest.fixture\ndef test_apps(monkeypatch):\n    monkeypatch.syspath_prepend(os.path.join(os.path.dirname(__file__), 'test_apps'))\n    original_modules = set(sys.modules.keys())\n\n    yield\n\n    # Remove any imports cached during the test. Otherwise 'import app'\n    # will work in the next test even though it's no longer on the path.\n    for key in sys.modules.keys() - original_modules:\n        sys.modules.pop(key),type='decorated_definition'\nline_star:73,line_end:83|char_star:0,char_end:28"->"@pytest.fixture,type='decorator'\nline_star:73,line_end:73|char_star:0,char_end:15";
"def test_apps(monkeypatch):\n    monkeypatch.syspath_prepend(os.path.join(os.path.dirname(__file__), 'test_apps'))\n    original_modules = set(sys.modules.keys())\n\n    yield\n\n    # Remove any imports cached during the test. Otherwise 'import app'\n    # will work in the next test even though it's no longer on the path.\n    for key in sys.modules.keys() - original_modules:\n        sys.modules.pop(key),type='function_definition'\nline_star:74,line_end:83|char_star:0,char_end:28"[shape="box",fillcolor="#cee6b4",style=filled];
"@pytest.fixture\ndef test_apps(monkeypatch):\n    monkeypatch.syspath_prepend(os.path.join(os.path.dirname(__file__), 'test_apps'))\n    original_modules = set(sys.modules.keys())\n\n    yield\n\n    # Remove any imports cached during the test. Otherwise 'import app'\n    # will work in the next test even though it's no longer on the path.\n    for key in sys.modules.keys() - original_modules:\n        sys.modules.pop(key),type='decorated_definition'\nline_star:73,line_end:83|char_star:0,char_end:28"->"def test_apps(monkeypatch):\n    monkeypatch.syspath_prepend(os.path.join(os.path.dirname(__file__), 'test_apps'))\n    original_modules = set(sys.modules.keys())\n\n    yield\n\n    # Remove any imports cached during the test. Otherwise 'import app'\n    # will work in the next test even though it's no longer on the path.\n    for key in sys.modules.keys() - original_modules:\n        sys.modules.pop(key),type='function_definition'\nline_star:74,line_end:83|char_star:0,char_end:28";
"test_apps,type='identifier'\nline_star:74,line_end:74|char_star:4,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"def test_apps(monkeypatch):\n    monkeypatch.syspath_prepend(os.path.join(os.path.dirname(__file__), 'test_apps'))\n    original_modules = set(sys.modules.keys())\n\n    yield\n\n    # Remove any imports cached during the test. Otherwise 'import app'\n    # will work in the next test even though it's no longer on the path.\n    for key in sys.modules.keys() - original_modules:\n        sys.modules.pop(key),type='function_definition'\nline_star:74,line_end:83|char_star:0,char_end:28"->"test_apps,type='identifier'\nline_star:74,line_end:74|char_star:4,char_end:13";
"(monkeypatch),type='parameters'\nline_star:74,line_end:74|char_star:13,char_end:26"[shape="box",fillcolor="white",style=filled];
"def test_apps(monkeypatch):\n    monkeypatch.syspath_prepend(os.path.join(os.path.dirname(__file__), 'test_apps'))\n    original_modules = set(sys.modules.keys())\n\n    yield\n\n    # Remove any imports cached during the test. Otherwise 'import app'\n    # will work in the next test even though it's no longer on the path.\n    for key in sys.modules.keys() - original_modules:\n        sys.modules.pop(key),type='function_definition'\nline_star:74,line_end:83|char_star:0,char_end:28"->"(monkeypatch),type='parameters'\nline_star:74,line_end:74|char_star:13,char_end:26";
"monkeypatch,type='identifier'\nline_star:74,line_end:74|char_star:14,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"(monkeypatch),type='parameters'\nline_star:74,line_end:74|char_star:13,char_end:26"->"monkeypatch,type='identifier'\nline_star:74,line_end:74|char_star:14,char_end:25";
"type='INFORMATION BLOCK'\nline_star:75,line_end:83|char_star:4,char_end:28"[shape="point",fillcolor="#121013",style=filled];
"def test_apps(monkeypatch):\n    monkeypatch.syspath_prepend(os.path.join(os.path.dirname(__file__), 'test_apps'))\n    original_modules = set(sys.modules.keys())\n\n    yield\n\n    # Remove any imports cached during the test. Otherwise 'import app'\n    # will work in the next test even though it's no longer on the path.\n    for key in sys.modules.keys() - original_modules:\n        sys.modules.pop(key),type='function_definition'\nline_star:74,line_end:83|char_star:0,char_end:28"->"type='INFORMATION BLOCK'\nline_star:75,line_end:83|char_star:4,char_end:28";
"# Remove any imports cached during the test. Otherwise 'import app',type='comment'\nline_star:80,line_end:80|char_star:4,char_end:71"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:75,line_end:83|char_star:4,char_end:28"->"# Remove any imports cached during the test. Otherwise 'import app',type='comment'\nline_star:80,line_end:80|char_star:4,char_end:71";
"# will work in the next test even though it's no longer on the path.,type='comment'\nline_star:81,line_end:81|char_star:4,char_end:72"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:75,line_end:83|char_star:4,char_end:28"->"# will work in the next test even though it's no longer on the path.,type='comment'\nline_star:81,line_end:81|char_star:4,char_end:72";
"for key in sys.modules.keys() - original_modules:\n        sys.modules.pop(key),type='for_statement'\nline_star:82,line_end:83|char_star:4,char_end:28"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:75,line_end:83|char_star:4,char_end:28"->"for key in sys.modules.keys() - original_modules:\n        sys.modules.pop(key),type='for_statement'\nline_star:82,line_end:83|char_star:4,char_end:28";
"@pytest.fixture(autouse=True)\ndef leak_detector():\n    yield\n\n    # make sure we're not leaking a request context since we are\n    # testing flask internally in debug mode in a few cases\n    leaks = []\n    while flask._request_ctx_stack.top is not None:\n        leaks.append(flask._request_ctx_stack.pop())\n    assert leaks == [],type='decorated_definition'\nline_star:86,line_end:95|char_star:0,char_end:22"[shape="box",fillcolor="#c8c6a7",style=filled];
"MODULE"->"@pytest.fixture(autouse=True)\ndef leak_detector():\n    yield\n\n    # make sure we're not leaking a request context since we are\n    # testing flask internally in debug mode in a few cases\n    leaks = []\n    while flask._request_ctx_stack.top is not None:\n        leaks.append(flask._request_ctx_stack.pop())\n    assert leaks == [],type='decorated_definition'\nline_star:86,line_end:95|char_star:0,char_end:22";
"@pytest.fixture(autouse=True),type='decorator'\nline_star:86,line_end:86|char_star:0,char_end:29"[shape="box",fillcolor="white",style=filled];
"@pytest.fixture(autouse=True)\ndef leak_detector():\n    yield\n\n    # make sure we're not leaking a request context since we are\n    # testing flask internally in debug mode in a few cases\n    leaks = []\n    while flask._request_ctx_stack.top is not None:\n        leaks.append(flask._request_ctx_stack.pop())\n    assert leaks == [],type='decorated_definition'\nline_star:86,line_end:95|char_star:0,char_end:22"->"@pytest.fixture(autouse=True),type='decorator'\nline_star:86,line_end:86|char_star:0,char_end:29";
"def leak_detector():\n    yield\n\n    # make sure we're not leaking a request context since we are\n    # testing flask internally in debug mode in a few cases\n    leaks = []\n    while flask._request_ctx_stack.top is not None:\n        leaks.append(flask._request_ctx_stack.pop())\n    assert leaks == [],type='function_definition'\nline_star:87,line_end:95|char_star:0,char_end:22"[shape="box",fillcolor="#cee6b4",style=filled];
"@pytest.fixture(autouse=True)\ndef leak_detector():\n    yield\n\n    # make sure we're not leaking a request context since we are\n    # testing flask internally in debug mode in a few cases\n    leaks = []\n    while flask._request_ctx_stack.top is not None:\n        leaks.append(flask._request_ctx_stack.pop())\n    assert leaks == [],type='decorated_definition'\nline_star:86,line_end:95|char_star:0,char_end:22"->"def leak_detector():\n    yield\n\n    # make sure we're not leaking a request context since we are\n    # testing flask internally in debug mode in a few cases\n    leaks = []\n    while flask._request_ctx_stack.top is not None:\n        leaks.append(flask._request_ctx_stack.pop())\n    assert leaks == [],type='function_definition'\nline_star:87,line_end:95|char_star:0,char_end:22";
"leak_detector,type='identifier'\nline_star:87,line_end:87|char_star:4,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"def leak_detector():\n    yield\n\n    # make sure we're not leaking a request context since we are\n    # testing flask internally in debug mode in a few cases\n    leaks = []\n    while flask._request_ctx_stack.top is not None:\n        leaks.append(flask._request_ctx_stack.pop())\n    assert leaks == [],type='function_definition'\nline_star:87,line_end:95|char_star:0,char_end:22"->"leak_detector,type='identifier'\nline_star:87,line_end:87|char_star:4,char_end:17";
"type='INFORMATION BLOCK'\nline_star:88,line_end:95|char_star:4,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"def leak_detector():\n    yield\n\n    # make sure we're not leaking a request context since we are\n    # testing flask internally in debug mode in a few cases\n    leaks = []\n    while flask._request_ctx_stack.top is not None:\n        leaks.append(flask._request_ctx_stack.pop())\n    assert leaks == [],type='function_definition'\nline_star:87,line_end:95|char_star:0,char_end:22"->"type='INFORMATION BLOCK'\nline_star:88,line_end:95|char_star:4,char_end:22";
"# make sure we're not leaking a request context since we are,type='comment'\nline_star:90,line_end:90|char_star:4,char_end:64"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:88,line_end:95|char_star:4,char_end:22"->"# make sure we're not leaking a request context since we are,type='comment'\nline_star:90,line_end:90|char_star:4,char_end:64";
"# testing flask internally in debug mode in a few cases,type='comment'\nline_star:91,line_end:91|char_star:4,char_end:59"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:88,line_end:95|char_star:4,char_end:22"->"# testing flask internally in debug mode in a few cases,type='comment'\nline_star:91,line_end:91|char_star:4,char_end:59";
"while flask._request_ctx_stack.top is not None:\n        leaks.append(flask._request_ctx_stack.pop()),type='while_statement'\nline_star:93,line_end:94|char_star:4,char_end:52"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:88,line_end:95|char_star:4,char_end:22"->"while flask._request_ctx_stack.top is not None:\n        leaks.append(flask._request_ctx_stack.pop()),type='while_statement'\nline_star:93,line_end:94|char_star:4,char_end:52";
"assert leaks == [],type='assert_statement'\nline_star:95,line_end:95|char_star:4,char_end:22"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:88,line_end:95|char_star:4,char_end:22"->"assert leaks == [],type='assert_statement'\nline_star:95,line_end:95|char_star:4,char_end:22";
"leaks == [],type='comparison_operator'\nline_star:95,line_end:95|char_star:11,char_end:22"[shape="box",fillcolor="white",style=filled];
"assert leaks == [],type='assert_statement'\nline_star:95,line_end:95|char_star:4,char_end:22"->"leaks == [],type='comparison_operator'\nline_star:95,line_end:95|char_star:11,char_end:22";
"leaks,type='identifier'\nline_star:95,line_end:95|char_star:11,char_end:16"[shape="point",fillcolor="#121013",style=filled];
"leaks == [],type='comparison_operator'\nline_star:95,line_end:95|char_star:11,char_end:22"->"leaks,type='identifier'\nline_star:95,line_end:95|char_star:11,char_end:16";
"@pytest.fixture(params=(True, False))\ndef limit_loader(request, monkeypatch):\n    '''Patch pkgutil.get_loader to give loader without get_filename or archive.\n\n    This provides for tests where a system has custom loaders, e.g. Google App\n    Engine's HardenedModulesHook, which have neither the `get_filename` method\n    nor the `archive` attribute.\n\n    This fixture will run the testcase twice, once with and once without the\n    limitation/mock.\n    '''\n    if not request.param:\n        return\n\n    class LimitedLoader:\n        def __init__(self, loader):\n            self.loader = loader\n\n        def __getattr__(self, name):\n            if name in {'archive', 'get_filename'}:\n                raise AttributeError(f'Mocking a loader which does not have {name!r}.')\n            return getattr(self.loader, name)\n\n    old_get_loader = pkgutil.get_loader\n\n    def get_loader(*args, **kwargs):\n        return LimitedLoader(old_get_loader(*args, **kwargs))\n\n    monkeypatch.setattr(pkgutil, 'get_loader', get_loader),type='decorated_definition'\nline_star:98,line_end:126|char_star:0,char_end:58"[shape="box",fillcolor="#c8c6a7",style=filled];
"MODULE"->"@pytest.fixture(params=(True, False))\ndef limit_loader(request, monkeypatch):\n    '''Patch pkgutil.get_loader to give loader without get_filename or archive.\n\n    This provides for tests where a system has custom loaders, e.g. Google App\n    Engine's HardenedModulesHook, which have neither the `get_filename` method\n    nor the `archive` attribute.\n\n    This fixture will run the testcase twice, once with and once without the\n    limitation/mock.\n    '''\n    if not request.param:\n        return\n\n    class LimitedLoader:\n        def __init__(self, loader):\n            self.loader = loader\n\n        def __getattr__(self, name):\n            if name in {'archive', 'get_filename'}:\n                raise AttributeError(f'Mocking a loader which does not have {name!r}.')\n            return getattr(self.loader, name)\n\n    old_get_loader = pkgutil.get_loader\n\n    def get_loader(*args, **kwargs):\n        return LimitedLoader(old_get_loader(*args, **kwargs))\n\n    monkeypatch.setattr(pkgutil, 'get_loader', get_loader),type='decorated_definition'\nline_star:98,line_end:126|char_star:0,char_end:58";
"@pytest.fixture(params=(True, False)),type='decorator'\nline_star:98,line_end:98|char_star:0,char_end:37"[shape="box",fillcolor="white",style=filled];
"@pytest.fixture(params=(True, False))\ndef limit_loader(request, monkeypatch):\n    '''Patch pkgutil.get_loader to give loader without get_filename or archive.\n\n    This provides for tests where a system has custom loaders, e.g. Google App\n    Engine's HardenedModulesHook, which have neither the `get_filename` method\n    nor the `archive` attribute.\n\n    This fixture will run the testcase twice, once with and once without the\n    limitation/mock.\n    '''\n    if not request.param:\n        return\n\n    class LimitedLoader:\n        def __init__(self, loader):\n            self.loader = loader\n\n        def __getattr__(self, name):\n            if name in {'archive', 'get_filename'}:\n                raise AttributeError(f'Mocking a loader which does not have {name!r}.')\n            return getattr(self.loader, name)\n\n    old_get_loader = pkgutil.get_loader\n\n    def get_loader(*args, **kwargs):\n        return LimitedLoader(old_get_loader(*args, **kwargs))\n\n    monkeypatch.setattr(pkgutil, 'get_loader', get_loader),type='decorated_definition'\nline_star:98,line_end:126|char_star:0,char_end:58"->"@pytest.fixture(params=(True, False)),type='decorator'\nline_star:98,line_end:98|char_star:0,char_end:37";
"def limit_loader(request, monkeypatch):\n    '''Patch pkgutil.get_loader to give loader without get_filename or archive.\n\n    This provides for tests where a system has custom loaders, e.g. Google App\n    Engine's HardenedModulesHook, which have neither the `get_filename` method\n    nor the `archive` attribute.\n\n    This fixture will run the testcase twice, once with and once without the\n    limitation/mock.\n    '''\n    if not request.param:\n        return\n\n    class LimitedLoader:\n        def __init__(self, loader):\n            self.loader = loader\n\n        def __getattr__(self, name):\n            if name in {'archive', 'get_filename'}:\n                raise AttributeError(f'Mocking a loader which does not have {name!r}.')\n            return getattr(self.loader, name)\n\n    old_get_loader = pkgutil.get_loader\n\n    def get_loader(*args, **kwargs):\n        return LimitedLoader(old_get_loader(*args, **kwargs))\n\n    monkeypatch.setattr(pkgutil, 'get_loader', get_loader),type='function_definition'\nline_star:99,line_end:126|char_star:0,char_end:58"[shape="box",fillcolor="#cee6b4",style=filled];
"@pytest.fixture(params=(True, False))\ndef limit_loader(request, monkeypatch):\n    '''Patch pkgutil.get_loader to give loader without get_filename or archive.\n\n    This provides for tests where a system has custom loaders, e.g. Google App\n    Engine's HardenedModulesHook, which have neither the `get_filename` method\n    nor the `archive` attribute.\n\n    This fixture will run the testcase twice, once with and once without the\n    limitation/mock.\n    '''\n    if not request.param:\n        return\n\n    class LimitedLoader:\n        def __init__(self, loader):\n            self.loader = loader\n\n        def __getattr__(self, name):\n            if name in {'archive', 'get_filename'}:\n                raise AttributeError(f'Mocking a loader which does not have {name!r}.')\n            return getattr(self.loader, name)\n\n    old_get_loader = pkgutil.get_loader\n\n    def get_loader(*args, **kwargs):\n        return LimitedLoader(old_get_loader(*args, **kwargs))\n\n    monkeypatch.setattr(pkgutil, 'get_loader', get_loader),type='decorated_definition'\nline_star:98,line_end:126|char_star:0,char_end:58"->"def limit_loader(request, monkeypatch):\n    '''Patch pkgutil.get_loader to give loader without get_filename or archive.\n\n    This provides for tests where a system has custom loaders, e.g. Google App\n    Engine's HardenedModulesHook, which have neither the `get_filename` method\n    nor the `archive` attribute.\n\n    This fixture will run the testcase twice, once with and once without the\n    limitation/mock.\n    '''\n    if not request.param:\n        return\n\n    class LimitedLoader:\n        def __init__(self, loader):\n            self.loader = loader\n\n        def __getattr__(self, name):\n            if name in {'archive', 'get_filename'}:\n                raise AttributeError(f'Mocking a loader which does not have {name!r}.')\n            return getattr(self.loader, name)\n\n    old_get_loader = pkgutil.get_loader\n\n    def get_loader(*args, **kwargs):\n        return LimitedLoader(old_get_loader(*args, **kwargs))\n\n    monkeypatch.setattr(pkgutil, 'get_loader', get_loader),type='function_definition'\nline_star:99,line_end:126|char_star:0,char_end:58";
"limit_loader,type='identifier'\nline_star:99,line_end:99|char_star:4,char_end:16"[shape="point",fillcolor="#121013",style=filled];
"def limit_loader(request, monkeypatch):\n    '''Patch pkgutil.get_loader to give loader without get_filename or archive.\n\n    This provides for tests where a system has custom loaders, e.g. Google App\n    Engine's HardenedModulesHook, which have neither the `get_filename` method\n    nor the `archive` attribute.\n\n    This fixture will run the testcase twice, once with and once without the\n    limitation/mock.\n    '''\n    if not request.param:\n        return\n\n    class LimitedLoader:\n        def __init__(self, loader):\n            self.loader = loader\n\n        def __getattr__(self, name):\n            if name in {'archive', 'get_filename'}:\n                raise AttributeError(f'Mocking a loader which does not have {name!r}.')\n            return getattr(self.loader, name)\n\n    old_get_loader = pkgutil.get_loader\n\n    def get_loader(*args, **kwargs):\n        return LimitedLoader(old_get_loader(*args, **kwargs))\n\n    monkeypatch.setattr(pkgutil, 'get_loader', get_loader),type='function_definition'\nline_star:99,line_end:126|char_star:0,char_end:58"->"limit_loader,type='identifier'\nline_star:99,line_end:99|char_star:4,char_end:16";
"(request, monkeypatch),type='parameters'\nline_star:99,line_end:99|char_star:16,char_end:38"[shape="box",fillcolor="white",style=filled];
"def limit_loader(request, monkeypatch):\n    '''Patch pkgutil.get_loader to give loader without get_filename or archive.\n\n    This provides for tests where a system has custom loaders, e.g. Google App\n    Engine's HardenedModulesHook, which have neither the `get_filename` method\n    nor the `archive` attribute.\n\n    This fixture will run the testcase twice, once with and once without the\n    limitation/mock.\n    '''\n    if not request.param:\n        return\n\n    class LimitedLoader:\n        def __init__(self, loader):\n            self.loader = loader\n\n        def __getattr__(self, name):\n            if name in {'archive', 'get_filename'}:\n                raise AttributeError(f'Mocking a loader which does not have {name!r}.')\n            return getattr(self.loader, name)\n\n    old_get_loader = pkgutil.get_loader\n\n    def get_loader(*args, **kwargs):\n        return LimitedLoader(old_get_loader(*args, **kwargs))\n\n    monkeypatch.setattr(pkgutil, 'get_loader', get_loader),type='function_definition'\nline_star:99,line_end:126|char_star:0,char_end:58"->"(request, monkeypatch),type='parameters'\nline_star:99,line_end:99|char_star:16,char_end:38";
"request,type='identifier'\nline_star:99,line_end:99|char_star:17,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"(request, monkeypatch),type='parameters'\nline_star:99,line_end:99|char_star:16,char_end:38"->"request,type='identifier'\nline_star:99,line_end:99|char_star:17,char_end:24";
"monkeypatch,type='identifier'\nline_star:99,line_end:99|char_star:26,char_end:37"[shape="point",fillcolor="#121013",style=filled];
"(request, monkeypatch),type='parameters'\nline_star:99,line_end:99|char_star:16,char_end:38"->"monkeypatch,type='identifier'\nline_star:99,line_end:99|char_star:26,char_end:37";
"type='INFORMATION BLOCK'\nline_star:100,line_end:126|char_star:4,char_end:58"[shape="point",fillcolor="#121013",style=filled];
"def limit_loader(request, monkeypatch):\n    '''Patch pkgutil.get_loader to give loader without get_filename or archive.\n\n    This provides for tests where a system has custom loaders, e.g. Google App\n    Engine's HardenedModulesHook, which have neither the `get_filename` method\n    nor the `archive` attribute.\n\n    This fixture will run the testcase twice, once with and once without the\n    limitation/mock.\n    '''\n    if not request.param:\n        return\n\n    class LimitedLoader:\n        def __init__(self, loader):\n            self.loader = loader\n\n        def __getattr__(self, name):\n            if name in {'archive', 'get_filename'}:\n                raise AttributeError(f'Mocking a loader which does not have {name!r}.')\n            return getattr(self.loader, name)\n\n    old_get_loader = pkgutil.get_loader\n\n    def get_loader(*args, **kwargs):\n        return LimitedLoader(old_get_loader(*args, **kwargs))\n\n    monkeypatch.setattr(pkgutil, 'get_loader', get_loader),type='function_definition'\nline_star:99,line_end:126|char_star:0,char_end:58"->"type='INFORMATION BLOCK'\nline_star:100,line_end:126|char_star:4,char_end:58";
"if not request.param:\n        return,type='if_statement'\nline_star:109,line_end:110|char_star:4,char_end:14"[shape="box",fillcolor="#9ecca4",style=filled];
"type='INFORMATION BLOCK'\nline_star:100,line_end:126|char_star:4,char_end:58"->"if not request.param:\n        return,type='if_statement'\nline_star:109,line_end:110|char_star:4,char_end:14";
"class LimitedLoader:\n        def __init__(self, loader):\n            self.loader = loader\n\n        def __getattr__(self, name):\n            if name in {'archive', 'get_filename'}:\n                raise AttributeError(f'Mocking a loader which does not have {name!r}.')\n            return getattr(self.loader, name),type='class_definition'\nline_star:112,line_end:119|char_star:4,char_end:45"[shape="box",fillcolor="#ffdf91",style=filled];
"type='INFORMATION BLOCK'\nline_star:100,line_end:126|char_star:4,char_end:58"->"class LimitedLoader:\n        def __init__(self, loader):\n            self.loader = loader\n\n        def __getattr__(self, name):\n            if name in {'archive', 'get_filename'}:\n                raise AttributeError(f'Mocking a loader which does not have {name!r}.')\n            return getattr(self.loader, name),type='class_definition'\nline_star:112,line_end:119|char_star:4,char_end:45";
"LimitedLoader,type='identifier'\nline_star:112,line_end:112|char_star:10,char_end:23"[shape="point",fillcolor="#121013",style=filled];
"class LimitedLoader:\n        def __init__(self, loader):\n            self.loader = loader\n\n        def __getattr__(self, name):\n            if name in {'archive', 'get_filename'}:\n                raise AttributeError(f'Mocking a loader which does not have {name!r}.')\n            return getattr(self.loader, name),type='class_definition'\nline_star:112,line_end:119|char_star:4,char_end:45"->"LimitedLoader,type='identifier'\nline_star:112,line_end:112|char_star:10,char_end:23";
"type='INFORMATION BLOCK'\nline_star:113,line_end:119|char_star:8,char_end:45"[shape="point",fillcolor="#121013",style=filled];
"class LimitedLoader:\n        def __init__(self, loader):\n            self.loader = loader\n\n        def __getattr__(self, name):\n            if name in {'archive', 'get_filename'}:\n                raise AttributeError(f'Mocking a loader which does not have {name!r}.')\n            return getattr(self.loader, name),type='class_definition'\nline_star:112,line_end:119|char_star:4,char_end:45"->"type='INFORMATION BLOCK'\nline_star:113,line_end:119|char_star:8,char_end:45";
"def __init__(self, loader):\n            self.loader = loader,type='function_definition'\nline_star:113,line_end:114|char_star:8,char_end:32"[shape="box",fillcolor="#cee6b4",style=filled];
"type='INFORMATION BLOCK'\nline_star:113,line_end:119|char_star:8,char_end:45"->"def __init__(self, loader):\n            self.loader = loader,type='function_definition'\nline_star:113,line_end:114|char_star:8,char_end:32";
"__init__,type='identifier'\nline_star:113,line_end:113|char_star:12,char_end:20"[shape="point",fillcolor="#121013",style=filled];
"def __init__(self, loader):\n            self.loader = loader,type='function_definition'\nline_star:113,line_end:114|char_star:8,char_end:32"->"__init__,type='identifier'\nline_star:113,line_end:113|char_star:12,char_end:20";
"(self, loader),type='parameters'\nline_star:113,line_end:113|char_star:20,char_end:34"[shape="box",fillcolor="white",style=filled];
"def __init__(self, loader):\n            self.loader = loader,type='function_definition'\nline_star:113,line_end:114|char_star:8,char_end:32"->"(self, loader),type='parameters'\nline_star:113,line_end:113|char_star:20,char_end:34";
"self,type='identifier'\nline_star:113,line_end:113|char_star:21,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"(self, loader),type='parameters'\nline_star:113,line_end:113|char_star:20,char_end:34"->"self,type='identifier'\nline_star:113,line_end:113|char_star:21,char_end:25";
"loader,type='identifier'\nline_star:113,line_end:113|char_star:27,char_end:33"[shape="point",fillcolor="#121013",style=filled];
"(self, loader),type='parameters'\nline_star:113,line_end:113|char_star:20,char_end:34"->"loader,type='identifier'\nline_star:113,line_end:113|char_star:27,char_end:33";
"type='INFORMATION BLOCK'\nline_star:114,line_end:114|char_star:12,char_end:32"[shape="point",fillcolor="#121013",style=filled];
"def __init__(self, loader):\n            self.loader = loader,type='function_definition'\nline_star:113,line_end:114|char_star:8,char_end:32"->"type='INFORMATION BLOCK'\nline_star:114,line_end:114|char_star:12,char_end:32";
"def __getattr__(self, name):\n            if name in {'archive', 'get_filename'}:\n                raise AttributeError(f'Mocking a loader which does not have {name!r}.')\n            return getattr(self.loader, name),type='function_definition'\nline_star:116,line_end:119|char_star:8,char_end:45"[shape="box",fillcolor="#cee6b4",style=filled];
"type='INFORMATION BLOCK'\nline_star:113,line_end:119|char_star:8,char_end:45"->"def __getattr__(self, name):\n            if name in {'archive', 'get_filename'}:\n                raise AttributeError(f'Mocking a loader which does not have {name!r}.')\n            return getattr(self.loader, name),type='function_definition'\nline_star:116,line_end:119|char_star:8,char_end:45";
"__getattr__,type='identifier'\nline_star:116,line_end:116|char_star:12,char_end:23"[shape="point",fillcolor="#121013",style=filled];
"def __getattr__(self, name):\n            if name in {'archive', 'get_filename'}:\n                raise AttributeError(f'Mocking a loader which does not have {name!r}.')\n            return getattr(self.loader, name),type='function_definition'\nline_star:116,line_end:119|char_star:8,char_end:45"->"__getattr__,type='identifier'\nline_star:116,line_end:116|char_star:12,char_end:23";
"(self, name),type='parameters'\nline_star:116,line_end:116|char_star:23,char_end:35"[shape="box",fillcolor="white",style=filled];
"def __getattr__(self, name):\n            if name in {'archive', 'get_filename'}:\n                raise AttributeError(f'Mocking a loader which does not have {name!r}.')\n            return getattr(self.loader, name),type='function_definition'\nline_star:116,line_end:119|char_star:8,char_end:45"->"(self, name),type='parameters'\nline_star:116,line_end:116|char_star:23,char_end:35";
"self,type='identifier'\nline_star:116,line_end:116|char_star:24,char_end:28"[shape="point",fillcolor="#121013",style=filled];
"(self, name),type='parameters'\nline_star:116,line_end:116|char_star:23,char_end:35"->"self,type='identifier'\nline_star:116,line_end:116|char_star:24,char_end:28";
"name,type='identifier'\nline_star:116,line_end:116|char_star:30,char_end:34"[shape="point",fillcolor="#121013",style=filled];
"(self, name),type='parameters'\nline_star:116,line_end:116|char_star:23,char_end:35"->"name,type='identifier'\nline_star:116,line_end:116|char_star:30,char_end:34";
"type='INFORMATION BLOCK'\nline_star:117,line_end:119|char_star:12,char_end:45"[shape="point",fillcolor="#121013",style=filled];
"def __getattr__(self, name):\n            if name in {'archive', 'get_filename'}:\n                raise AttributeError(f'Mocking a loader which does not have {name!r}.')\n            return getattr(self.loader, name),type='function_definition'\nline_star:116,line_end:119|char_star:8,char_end:45"->"type='INFORMATION BLOCK'\nline_star:117,line_end:119|char_star:12,char_end:45";
"if name in {'archive', 'get_filename'}:\n                raise AttributeError(f'Mocking a loader which does not have {name!r}.'),type='if_statement'\nline_star:117,line_end:118|char_star:12,char_end:87"[shape="box",fillcolor="#9ecca4",style=filled];
"type='INFORMATION BLOCK'\nline_star:117,line_end:119|char_star:12,char_end:45"->"if name in {'archive', 'get_filename'}:\n                raise AttributeError(f'Mocking a loader which does not have {name!r}.'),type='if_statement'\nline_star:117,line_end:118|char_star:12,char_end:87";
"return getattr(self.loader, name),type='return_statement'\nline_star:119,line_end:119|char_star:12,char_end:45"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:117,line_end:119|char_star:12,char_end:45"->"return getattr(self.loader, name),type='return_statement'\nline_star:119,line_end:119|char_star:12,char_end:45";
"def get_loader(*args, **kwargs):\n        return LimitedLoader(old_get_loader(*args, **kwargs)),type='function_definition'\nline_star:123,line_end:124|char_star:4,char_end:61"[shape="box",fillcolor="#cee6b4",style=filled];
"type='INFORMATION BLOCK'\nline_star:100,line_end:126|char_star:4,char_end:58"->"def get_loader(*args, **kwargs):\n        return LimitedLoader(old_get_loader(*args, **kwargs)),type='function_definition'\nline_star:123,line_end:124|char_star:4,char_end:61";
"get_loader,type='identifier'\nline_star:123,line_end:123|char_star:8,char_end:18"[shape="point",fillcolor="#121013",style=filled];
"def get_loader(*args, **kwargs):\n        return LimitedLoader(old_get_loader(*args, **kwargs)),type='function_definition'\nline_star:123,line_end:124|char_star:4,char_end:61"->"get_loader,type='identifier'\nline_star:123,line_end:123|char_star:8,char_end:18";
"(*args, **kwargs),type='parameters'\nline_star:123,line_end:123|char_star:18,char_end:35"[shape="box",fillcolor="white",style=filled];
"def get_loader(*args, **kwargs):\n        return LimitedLoader(old_get_loader(*args, **kwargs)),type='function_definition'\nline_star:123,line_end:124|char_star:4,char_end:61"->"(*args, **kwargs),type='parameters'\nline_star:123,line_end:123|char_star:18,char_end:35";
"*args,type='list_splat_pattern'\nline_star:123,line_end:123|char_star:19,char_end:24"[shape="box",fillcolor="white",style=filled];
"(*args, **kwargs),type='parameters'\nline_star:123,line_end:123|char_star:18,char_end:35"->"*args,type='list_splat_pattern'\nline_star:123,line_end:123|char_star:19,char_end:24";
"*,type='*'\nline_star:123,line_end:123|char_star:19,char_end:20"[shape="box",fillcolor="white",style=filled];
"*args,type='list_splat_pattern'\nline_star:123,line_end:123|char_star:19,char_end:24"->"*,type='*'\nline_star:123,line_end:123|char_star:19,char_end:20";
"args,type='identifier'\nline_star:123,line_end:123|char_star:20,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"*args,type='list_splat_pattern'\nline_star:123,line_end:123|char_star:19,char_end:24"->"args,type='identifier'\nline_star:123,line_end:123|char_star:20,char_end:24";
"**kwargs,type='dictionary_splat_pattern'\nline_star:123,line_end:123|char_star:26,char_end:34"[shape="box",fillcolor="white",style=filled];
"(*args, **kwargs),type='parameters'\nline_star:123,line_end:123|char_star:18,char_end:35"->"**kwargs,type='dictionary_splat_pattern'\nline_star:123,line_end:123|char_star:26,char_end:34";
"**,type='**'\nline_star:123,line_end:123|char_star:26,char_end:28"[shape="box",fillcolor="white",style=filled];
"**kwargs,type='dictionary_splat_pattern'\nline_star:123,line_end:123|char_star:26,char_end:34"->"**,type='**'\nline_star:123,line_end:123|char_star:26,char_end:28";
"kwargs,type='identifier'\nline_star:123,line_end:123|char_star:28,char_end:34"[shape="point",fillcolor="#121013",style=filled];
"**kwargs,type='dictionary_splat_pattern'\nline_star:123,line_end:123|char_star:26,char_end:34"->"kwargs,type='identifier'\nline_star:123,line_end:123|char_star:28,char_end:34";
"type='INFORMATION BLOCK'\nline_star:124,line_end:124|char_star:8,char_end:61"[shape="point",fillcolor="#121013",style=filled];
"def get_loader(*args, **kwargs):\n        return LimitedLoader(old_get_loader(*args, **kwargs)),type='function_definition'\nline_star:123,line_end:124|char_star:4,char_end:61"->"type='INFORMATION BLOCK'\nline_star:124,line_end:124|char_star:8,char_end:61";
"return LimitedLoader(old_get_loader(*args, **kwargs)),type='return_statement'\nline_star:124,line_end:124|char_star:8,char_end:61"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:124,line_end:124|char_star:8,char_end:61"->"return LimitedLoader(old_get_loader(*args, **kwargs)),type='return_statement'\nline_star:124,line_end:124|char_star:8,char_end:61";
"@pytest.fixture\ndef modules_tmpdir(tmpdir, monkeypatch):\n    '''A tmpdir added to sys.path.'''\n    rv = tmpdir.mkdir('modules_tmpdir')\n    monkeypatch.syspath_prepend(str(rv))\n    return rv,type='decorated_definition'\nline_star:129,line_end:134|char_star:0,char_end:13"[shape="box",fillcolor="#c8c6a7",style=filled];
"MODULE"->"@pytest.fixture\ndef modules_tmpdir(tmpdir, monkeypatch):\n    '''A tmpdir added to sys.path.'''\n    rv = tmpdir.mkdir('modules_tmpdir')\n    monkeypatch.syspath_prepend(str(rv))\n    return rv,type='decorated_definition'\nline_star:129,line_end:134|char_star:0,char_end:13";
"@pytest.fixture,type='decorator'\nline_star:129,line_end:129|char_star:0,char_end:15"[shape="box",fillcolor="white",style=filled];
"@pytest.fixture\ndef modules_tmpdir(tmpdir, monkeypatch):\n    '''A tmpdir added to sys.path.'''\n    rv = tmpdir.mkdir('modules_tmpdir')\n    monkeypatch.syspath_prepend(str(rv))\n    return rv,type='decorated_definition'\nline_star:129,line_end:134|char_star:0,char_end:13"->"@pytest.fixture,type='decorator'\nline_star:129,line_end:129|char_star:0,char_end:15";
"def modules_tmpdir(tmpdir, monkeypatch):\n    '''A tmpdir added to sys.path.'''\n    rv = tmpdir.mkdir('modules_tmpdir')\n    monkeypatch.syspath_prepend(str(rv))\n    return rv,type='function_definition'\nline_star:130,line_end:134|char_star:0,char_end:13"[shape="box",fillcolor="#cee6b4",style=filled];
"@pytest.fixture\ndef modules_tmpdir(tmpdir, monkeypatch):\n    '''A tmpdir added to sys.path.'''\n    rv = tmpdir.mkdir('modules_tmpdir')\n    monkeypatch.syspath_prepend(str(rv))\n    return rv,type='decorated_definition'\nline_star:129,line_end:134|char_star:0,char_end:13"->"def modules_tmpdir(tmpdir, monkeypatch):\n    '''A tmpdir added to sys.path.'''\n    rv = tmpdir.mkdir('modules_tmpdir')\n    monkeypatch.syspath_prepend(str(rv))\n    return rv,type='function_definition'\nline_star:130,line_end:134|char_star:0,char_end:13";
"modules_tmpdir,type='identifier'\nline_star:130,line_end:130|char_star:4,char_end:18"[shape="point",fillcolor="#121013",style=filled];
"def modules_tmpdir(tmpdir, monkeypatch):\n    '''A tmpdir added to sys.path.'''\n    rv = tmpdir.mkdir('modules_tmpdir')\n    monkeypatch.syspath_prepend(str(rv))\n    return rv,type='function_definition'\nline_star:130,line_end:134|char_star:0,char_end:13"->"modules_tmpdir,type='identifier'\nline_star:130,line_end:130|char_star:4,char_end:18";
"(tmpdir, monkeypatch),type='parameters'\nline_star:130,line_end:130|char_star:18,char_end:39"[shape="box",fillcolor="white",style=filled];
"def modules_tmpdir(tmpdir, monkeypatch):\n    '''A tmpdir added to sys.path.'''\n    rv = tmpdir.mkdir('modules_tmpdir')\n    monkeypatch.syspath_prepend(str(rv))\n    return rv,type='function_definition'\nline_star:130,line_end:134|char_star:0,char_end:13"->"(tmpdir, monkeypatch),type='parameters'\nline_star:130,line_end:130|char_star:18,char_end:39";
"tmpdir,type='identifier'\nline_star:130,line_end:130|char_star:19,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"(tmpdir, monkeypatch),type='parameters'\nline_star:130,line_end:130|char_star:18,char_end:39"->"tmpdir,type='identifier'\nline_star:130,line_end:130|char_star:19,char_end:25";
"monkeypatch,type='identifier'\nline_star:130,line_end:130|char_star:27,char_end:38"[shape="point",fillcolor="#121013",style=filled];
"(tmpdir, monkeypatch),type='parameters'\nline_star:130,line_end:130|char_star:18,char_end:39"->"monkeypatch,type='identifier'\nline_star:130,line_end:130|char_star:27,char_end:38";
"type='INFORMATION BLOCK'\nline_star:131,line_end:134|char_star:4,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"def modules_tmpdir(tmpdir, monkeypatch):\n    '''A tmpdir added to sys.path.'''\n    rv = tmpdir.mkdir('modules_tmpdir')\n    monkeypatch.syspath_prepend(str(rv))\n    return rv,type='function_definition'\nline_star:130,line_end:134|char_star:0,char_end:13"->"type='INFORMATION BLOCK'\nline_star:131,line_end:134|char_star:4,char_end:13";
"return rv,type='return_statement'\nline_star:134,line_end:134|char_star:4,char_end:13"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:131,line_end:134|char_star:4,char_end:13"->"return rv,type='return_statement'\nline_star:134,line_end:134|char_star:4,char_end:13";
"@pytest.fixture\ndef modules_tmpdir_prefix(modules_tmpdir, monkeypatch):\n    monkeypatch.setattr(sys, 'prefix', str(modules_tmpdir))\n    return modules_tmpdir,type='decorated_definition'\nline_star:137,line_end:140|char_star:0,char_end:25"[shape="box",fillcolor="#c8c6a7",style=filled];
"MODULE"->"@pytest.fixture\ndef modules_tmpdir_prefix(modules_tmpdir, monkeypatch):\n    monkeypatch.setattr(sys, 'prefix', str(modules_tmpdir))\n    return modules_tmpdir,type='decorated_definition'\nline_star:137,line_end:140|char_star:0,char_end:25";
"@pytest.fixture,type='decorator'\nline_star:137,line_end:137|char_star:0,char_end:15"[shape="box",fillcolor="white",style=filled];
"@pytest.fixture\ndef modules_tmpdir_prefix(modules_tmpdir, monkeypatch):\n    monkeypatch.setattr(sys, 'prefix', str(modules_tmpdir))\n    return modules_tmpdir,type='decorated_definition'\nline_star:137,line_end:140|char_star:0,char_end:25"->"@pytest.fixture,type='decorator'\nline_star:137,line_end:137|char_star:0,char_end:15";
"def modules_tmpdir_prefix(modules_tmpdir, monkeypatch):\n    monkeypatch.setattr(sys, 'prefix', str(modules_tmpdir))\n    return modules_tmpdir,type='function_definition'\nline_star:138,line_end:140|char_star:0,char_end:25"[shape="box",fillcolor="#cee6b4",style=filled];
"@pytest.fixture\ndef modules_tmpdir_prefix(modules_tmpdir, monkeypatch):\n    monkeypatch.setattr(sys, 'prefix', str(modules_tmpdir))\n    return modules_tmpdir,type='decorated_definition'\nline_star:137,line_end:140|char_star:0,char_end:25"->"def modules_tmpdir_prefix(modules_tmpdir, monkeypatch):\n    monkeypatch.setattr(sys, 'prefix', str(modules_tmpdir))\n    return modules_tmpdir,type='function_definition'\nline_star:138,line_end:140|char_star:0,char_end:25";
"modules_tmpdir_prefix,type='identifier'\nline_star:138,line_end:138|char_star:4,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"def modules_tmpdir_prefix(modules_tmpdir, monkeypatch):\n    monkeypatch.setattr(sys, 'prefix', str(modules_tmpdir))\n    return modules_tmpdir,type='function_definition'\nline_star:138,line_end:140|char_star:0,char_end:25"->"modules_tmpdir_prefix,type='identifier'\nline_star:138,line_end:138|char_star:4,char_end:25";
"(modules_tmpdir, monkeypatch),type='parameters'\nline_star:138,line_end:138|char_star:25,char_end:54"[shape="box",fillcolor="white",style=filled];
"def modules_tmpdir_prefix(modules_tmpdir, monkeypatch):\n    monkeypatch.setattr(sys, 'prefix', str(modules_tmpdir))\n    return modules_tmpdir,type='function_definition'\nline_star:138,line_end:140|char_star:0,char_end:25"->"(modules_tmpdir, monkeypatch),type='parameters'\nline_star:138,line_end:138|char_star:25,char_end:54";
"modules_tmpdir,type='identifier'\nline_star:138,line_end:138|char_star:26,char_end:40"[shape="point",fillcolor="#121013",style=filled];
"(modules_tmpdir, monkeypatch),type='parameters'\nline_star:138,line_end:138|char_star:25,char_end:54"->"modules_tmpdir,type='identifier'\nline_star:138,line_end:138|char_star:26,char_end:40";
"monkeypatch,type='identifier'\nline_star:138,line_end:138|char_star:42,char_end:53"[shape="point",fillcolor="#121013",style=filled];
"(modules_tmpdir, monkeypatch),type='parameters'\nline_star:138,line_end:138|char_star:25,char_end:54"->"monkeypatch,type='identifier'\nline_star:138,line_end:138|char_star:42,char_end:53";
"type='INFORMATION BLOCK'\nline_star:139,line_end:140|char_star:4,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"def modules_tmpdir_prefix(modules_tmpdir, monkeypatch):\n    monkeypatch.setattr(sys, 'prefix', str(modules_tmpdir))\n    return modules_tmpdir,type='function_definition'\nline_star:138,line_end:140|char_star:0,char_end:25"->"type='INFORMATION BLOCK'\nline_star:139,line_end:140|char_star:4,char_end:25";
"return modules_tmpdir,type='return_statement'\nline_star:140,line_end:140|char_star:4,char_end:25"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:139,line_end:140|char_star:4,char_end:25"->"return modules_tmpdir,type='return_statement'\nline_star:140,line_end:140|char_star:4,char_end:25";
"@pytest.fixture\ndef site_packages(modules_tmpdir, monkeypatch):\n    '''Create a fake site-packages.'''\n    rv = (\n        modules_tmpdir.mkdir('lib')\n        .mkdir(f'python{sys.version_info.major}.{sys.version_info.minor}')\n        .mkdir('site-packages')\n    )\n    monkeypatch.syspath_prepend(str(rv))\n    return rv,type='decorated_definition'\nline_star:143,line_end:152|char_star:0,char_end:13"[shape="box",fillcolor="#c8c6a7",style=filled];
"MODULE"->"@pytest.fixture\ndef site_packages(modules_tmpdir, monkeypatch):\n    '''Create a fake site-packages.'''\n    rv = (\n        modules_tmpdir.mkdir('lib')\n        .mkdir(f'python{sys.version_info.major}.{sys.version_info.minor}')\n        .mkdir('site-packages')\n    )\n    monkeypatch.syspath_prepend(str(rv))\n    return rv,type='decorated_definition'\nline_star:143,line_end:152|char_star:0,char_end:13";
"@pytest.fixture,type='decorator'\nline_star:143,line_end:143|char_star:0,char_end:15"[shape="box",fillcolor="white",style=filled];
"@pytest.fixture\ndef site_packages(modules_tmpdir, monkeypatch):\n    '''Create a fake site-packages.'''\n    rv = (\n        modules_tmpdir.mkdir('lib')\n        .mkdir(f'python{sys.version_info.major}.{sys.version_info.minor}')\n        .mkdir('site-packages')\n    )\n    monkeypatch.syspath_prepend(str(rv))\n    return rv,type='decorated_definition'\nline_star:143,line_end:152|char_star:0,char_end:13"->"@pytest.fixture,type='decorator'\nline_star:143,line_end:143|char_star:0,char_end:15";
"def site_packages(modules_tmpdir, monkeypatch):\n    '''Create a fake site-packages.'''\n    rv = (\n        modules_tmpdir.mkdir('lib')\n        .mkdir(f'python{sys.version_info.major}.{sys.version_info.minor}')\n        .mkdir('site-packages')\n    )\n    monkeypatch.syspath_prepend(str(rv))\n    return rv,type='function_definition'\nline_star:144,line_end:152|char_star:0,char_end:13"[shape="box",fillcolor="#cee6b4",style=filled];
"@pytest.fixture\ndef site_packages(modules_tmpdir, monkeypatch):\n    '''Create a fake site-packages.'''\n    rv = (\n        modules_tmpdir.mkdir('lib')\n        .mkdir(f'python{sys.version_info.major}.{sys.version_info.minor}')\n        .mkdir('site-packages')\n    )\n    monkeypatch.syspath_prepend(str(rv))\n    return rv,type='decorated_definition'\nline_star:143,line_end:152|char_star:0,char_end:13"->"def site_packages(modules_tmpdir, monkeypatch):\n    '''Create a fake site-packages.'''\n    rv = (\n        modules_tmpdir.mkdir('lib')\n        .mkdir(f'python{sys.version_info.major}.{sys.version_info.minor}')\n        .mkdir('site-packages')\n    )\n    monkeypatch.syspath_prepend(str(rv))\n    return rv,type='function_definition'\nline_star:144,line_end:152|char_star:0,char_end:13";
"site_packages,type='identifier'\nline_star:144,line_end:144|char_star:4,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"def site_packages(modules_tmpdir, monkeypatch):\n    '''Create a fake site-packages.'''\n    rv = (\n        modules_tmpdir.mkdir('lib')\n        .mkdir(f'python{sys.version_info.major}.{sys.version_info.minor}')\n        .mkdir('site-packages')\n    )\n    monkeypatch.syspath_prepend(str(rv))\n    return rv,type='function_definition'\nline_star:144,line_end:152|char_star:0,char_end:13"->"site_packages,type='identifier'\nline_star:144,line_end:144|char_star:4,char_end:17";
"(modules_tmpdir, monkeypatch),type='parameters'\nline_star:144,line_end:144|char_star:17,char_end:46"[shape="box",fillcolor="white",style=filled];
"def site_packages(modules_tmpdir, monkeypatch):\n    '''Create a fake site-packages.'''\n    rv = (\n        modules_tmpdir.mkdir('lib')\n        .mkdir(f'python{sys.version_info.major}.{sys.version_info.minor}')\n        .mkdir('site-packages')\n    )\n    monkeypatch.syspath_prepend(str(rv))\n    return rv,type='function_definition'\nline_star:144,line_end:152|char_star:0,char_end:13"->"(modules_tmpdir, monkeypatch),type='parameters'\nline_star:144,line_end:144|char_star:17,char_end:46";
"modules_tmpdir,type='identifier'\nline_star:144,line_end:144|char_star:18,char_end:32"[shape="point",fillcolor="#121013",style=filled];
"(modules_tmpdir, monkeypatch),type='parameters'\nline_star:144,line_end:144|char_star:17,char_end:46"->"modules_tmpdir,type='identifier'\nline_star:144,line_end:144|char_star:18,char_end:32";
"monkeypatch,type='identifier'\nline_star:144,line_end:144|char_star:34,char_end:45"[shape="point",fillcolor="#121013",style=filled];
"(modules_tmpdir, monkeypatch),type='parameters'\nline_star:144,line_end:144|char_star:17,char_end:46"->"monkeypatch,type='identifier'\nline_star:144,line_end:144|char_star:34,char_end:45";
"type='INFORMATION BLOCK'\nline_star:145,line_end:152|char_star:4,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"def site_packages(modules_tmpdir, monkeypatch):\n    '''Create a fake site-packages.'''\n    rv = (\n        modules_tmpdir.mkdir('lib')\n        .mkdir(f'python{sys.version_info.major}.{sys.version_info.minor}')\n        .mkdir('site-packages')\n    )\n    monkeypatch.syspath_prepend(str(rv))\n    return rv,type='function_definition'\nline_star:144,line_end:152|char_star:0,char_end:13"->"type='INFORMATION BLOCK'\nline_star:145,line_end:152|char_star:4,char_end:13";
"return rv,type='return_statement'\nline_star:152,line_end:152|char_star:4,char_end:13"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:145,line_end:152|char_star:4,char_end:13"->"return rv,type='return_statement'\nline_star:152,line_end:152|char_star:4,char_end:13";
"@pytest.fixture\ndef install_egg(modules_tmpdir, monkeypatch):\n    '''Generate egg from package name inside base and put the egg into\n    sys.path.'''\n\n    def inner(name, base=modules_tmpdir):\n        base.join(name).ensure_dir()\n        base.join(name).join('__init__.py').ensure()\n\n        egg_setup = base.join('setup.py')\n        egg_setup.write(\n            textwrap.dedent(\n                f'''\n                from setuptools import setup\n                setup(\n                    name='{name}',\n                    version='1.0',\n                    packages=['site_egg'],\n                    zip_safe=True,\n                )\n                '''\n            )\n        )\n\n        import subprocess\n\n        subprocess.check_call(\n            [sys.executable, 'setup.py', 'bdist_egg'], cwd=str(modules_tmpdir)\n        )\n        (egg_path,) = modules_tmpdir.join('dist/').listdir()\n        monkeypatch.syspath_prepend(str(egg_path))\n        return egg_path\n\n    return inner,type='decorated_definition'\nline_star:155,line_end:188|char_star:0,char_end:16"[shape="box",fillcolor="#c8c6a7",style=filled];
"MODULE"->"@pytest.fixture\ndef install_egg(modules_tmpdir, monkeypatch):\n    '''Generate egg from package name inside base and put the egg into\n    sys.path.'''\n\n    def inner(name, base=modules_tmpdir):\n        base.join(name).ensure_dir()\n        base.join(name).join('__init__.py').ensure()\n\n        egg_setup = base.join('setup.py')\n        egg_setup.write(\n            textwrap.dedent(\n                f'''\n                from setuptools import setup\n                setup(\n                    name='{name}',\n                    version='1.0',\n                    packages=['site_egg'],\n                    zip_safe=True,\n                )\n                '''\n            )\n        )\n\n        import subprocess\n\n        subprocess.check_call(\n            [sys.executable, 'setup.py', 'bdist_egg'], cwd=str(modules_tmpdir)\n        )\n        (egg_path,) = modules_tmpdir.join('dist/').listdir()\n        monkeypatch.syspath_prepend(str(egg_path))\n        return egg_path\n\n    return inner,type='decorated_definition'\nline_star:155,line_end:188|char_star:0,char_end:16";
"@pytest.fixture,type='decorator'\nline_star:155,line_end:155|char_star:0,char_end:15"[shape="box",fillcolor="white",style=filled];
"@pytest.fixture\ndef install_egg(modules_tmpdir, monkeypatch):\n    '''Generate egg from package name inside base and put the egg into\n    sys.path.'''\n\n    def inner(name, base=modules_tmpdir):\n        base.join(name).ensure_dir()\n        base.join(name).join('__init__.py').ensure()\n\n        egg_setup = base.join('setup.py')\n        egg_setup.write(\n            textwrap.dedent(\n                f'''\n                from setuptools import setup\n                setup(\n                    name='{name}',\n                    version='1.0',\n                    packages=['site_egg'],\n                    zip_safe=True,\n                )\n                '''\n            )\n        )\n\n        import subprocess\n\n        subprocess.check_call(\n            [sys.executable, 'setup.py', 'bdist_egg'], cwd=str(modules_tmpdir)\n        )\n        (egg_path,) = modules_tmpdir.join('dist/').listdir()\n        monkeypatch.syspath_prepend(str(egg_path))\n        return egg_path\n\n    return inner,type='decorated_definition'\nline_star:155,line_end:188|char_star:0,char_end:16"->"@pytest.fixture,type='decorator'\nline_star:155,line_end:155|char_star:0,char_end:15";
"def install_egg(modules_tmpdir, monkeypatch):\n    '''Generate egg from package name inside base and put the egg into\n    sys.path.'''\n\n    def inner(name, base=modules_tmpdir):\n        base.join(name).ensure_dir()\n        base.join(name).join('__init__.py').ensure()\n\n        egg_setup = base.join('setup.py')\n        egg_setup.write(\n            textwrap.dedent(\n                f'''\n                from setuptools import setup\n                setup(\n                    name='{name}',\n                    version='1.0',\n                    packages=['site_egg'],\n                    zip_safe=True,\n                )\n                '''\n            )\n        )\n\n        import subprocess\n\n        subprocess.check_call(\n            [sys.executable, 'setup.py', 'bdist_egg'], cwd=str(modules_tmpdir)\n        )\n        (egg_path,) = modules_tmpdir.join('dist/').listdir()\n        monkeypatch.syspath_prepend(str(egg_path))\n        return egg_path\n\n    return inner,type='function_definition'\nline_star:156,line_end:188|char_star:0,char_end:16"[shape="box",fillcolor="#cee6b4",style=filled];
"@pytest.fixture\ndef install_egg(modules_tmpdir, monkeypatch):\n    '''Generate egg from package name inside base and put the egg into\n    sys.path.'''\n\n    def inner(name, base=modules_tmpdir):\n        base.join(name).ensure_dir()\n        base.join(name).join('__init__.py').ensure()\n\n        egg_setup = base.join('setup.py')\n        egg_setup.write(\n            textwrap.dedent(\n                f'''\n                from setuptools import setup\n                setup(\n                    name='{name}',\n                    version='1.0',\n                    packages=['site_egg'],\n                    zip_safe=True,\n                )\n                '''\n            )\n        )\n\n        import subprocess\n\n        subprocess.check_call(\n            [sys.executable, 'setup.py', 'bdist_egg'], cwd=str(modules_tmpdir)\n        )\n        (egg_path,) = modules_tmpdir.join('dist/').listdir()\n        monkeypatch.syspath_prepend(str(egg_path))\n        return egg_path\n\n    return inner,type='decorated_definition'\nline_star:155,line_end:188|char_star:0,char_end:16"->"def install_egg(modules_tmpdir, monkeypatch):\n    '''Generate egg from package name inside base and put the egg into\n    sys.path.'''\n\n    def inner(name, base=modules_tmpdir):\n        base.join(name).ensure_dir()\n        base.join(name).join('__init__.py').ensure()\n\n        egg_setup = base.join('setup.py')\n        egg_setup.write(\n            textwrap.dedent(\n                f'''\n                from setuptools import setup\n                setup(\n                    name='{name}',\n                    version='1.0',\n                    packages=['site_egg'],\n                    zip_safe=True,\n                )\n                '''\n            )\n        )\n\n        import subprocess\n\n        subprocess.check_call(\n            [sys.executable, 'setup.py', 'bdist_egg'], cwd=str(modules_tmpdir)\n        )\n        (egg_path,) = modules_tmpdir.join('dist/').listdir()\n        monkeypatch.syspath_prepend(str(egg_path))\n        return egg_path\n\n    return inner,type='function_definition'\nline_star:156,line_end:188|char_star:0,char_end:16";
"install_egg,type='identifier'\nline_star:156,line_end:156|char_star:4,char_end:15"[shape="point",fillcolor="#121013",style=filled];
"def install_egg(modules_tmpdir, monkeypatch):\n    '''Generate egg from package name inside base and put the egg into\n    sys.path.'''\n\n    def inner(name, base=modules_tmpdir):\n        base.join(name).ensure_dir()\n        base.join(name).join('__init__.py').ensure()\n\n        egg_setup = base.join('setup.py')\n        egg_setup.write(\n            textwrap.dedent(\n                f'''\n                from setuptools import setup\n                setup(\n                    name='{name}',\n                    version='1.0',\n                    packages=['site_egg'],\n                    zip_safe=True,\n                )\n                '''\n            )\n        )\n\n        import subprocess\n\n        subprocess.check_call(\n            [sys.executable, 'setup.py', 'bdist_egg'], cwd=str(modules_tmpdir)\n        )\n        (egg_path,) = modules_tmpdir.join('dist/').listdir()\n        monkeypatch.syspath_prepend(str(egg_path))\n        return egg_path\n\n    return inner,type='function_definition'\nline_star:156,line_end:188|char_star:0,char_end:16"->"install_egg,type='identifier'\nline_star:156,line_end:156|char_star:4,char_end:15";
"(modules_tmpdir, monkeypatch),type='parameters'\nline_star:156,line_end:156|char_star:15,char_end:44"[shape="box",fillcolor="white",style=filled];
"def install_egg(modules_tmpdir, monkeypatch):\n    '''Generate egg from package name inside base and put the egg into\n    sys.path.'''\n\n    def inner(name, base=modules_tmpdir):\n        base.join(name).ensure_dir()\n        base.join(name).join('__init__.py').ensure()\n\n        egg_setup = base.join('setup.py')\n        egg_setup.write(\n            textwrap.dedent(\n                f'''\n                from setuptools import setup\n                setup(\n                    name='{name}',\n                    version='1.0',\n                    packages=['site_egg'],\n                    zip_safe=True,\n                )\n                '''\n            )\n        )\n\n        import subprocess\n\n        subprocess.check_call(\n            [sys.executable, 'setup.py', 'bdist_egg'], cwd=str(modules_tmpdir)\n        )\n        (egg_path,) = modules_tmpdir.join('dist/').listdir()\n        monkeypatch.syspath_prepend(str(egg_path))\n        return egg_path\n\n    return inner,type='function_definition'\nline_star:156,line_end:188|char_star:0,char_end:16"->"(modules_tmpdir, monkeypatch),type='parameters'\nline_star:156,line_end:156|char_star:15,char_end:44";
"modules_tmpdir,type='identifier'\nline_star:156,line_end:156|char_star:16,char_end:30"[shape="point",fillcolor="#121013",style=filled];
"(modules_tmpdir, monkeypatch),type='parameters'\nline_star:156,line_end:156|char_star:15,char_end:44"->"modules_tmpdir,type='identifier'\nline_star:156,line_end:156|char_star:16,char_end:30";
"monkeypatch,type='identifier'\nline_star:156,line_end:156|char_star:32,char_end:43"[shape="point",fillcolor="#121013",style=filled];
"(modules_tmpdir, monkeypatch),type='parameters'\nline_star:156,line_end:156|char_star:15,char_end:44"->"monkeypatch,type='identifier'\nline_star:156,line_end:156|char_star:32,char_end:43";
"type='INFORMATION BLOCK'\nline_star:157,line_end:188|char_star:4,char_end:16"[shape="point",fillcolor="#121013",style=filled];
"def install_egg(modules_tmpdir, monkeypatch):\n    '''Generate egg from package name inside base and put the egg into\n    sys.path.'''\n\n    def inner(name, base=modules_tmpdir):\n        base.join(name).ensure_dir()\n        base.join(name).join('__init__.py').ensure()\n\n        egg_setup = base.join('setup.py')\n        egg_setup.write(\n            textwrap.dedent(\n                f'''\n                from setuptools import setup\n                setup(\n                    name='{name}',\n                    version='1.0',\n                    packages=['site_egg'],\n                    zip_safe=True,\n                )\n                '''\n            )\n        )\n\n        import subprocess\n\n        subprocess.check_call(\n            [sys.executable, 'setup.py', 'bdist_egg'], cwd=str(modules_tmpdir)\n        )\n        (egg_path,) = modules_tmpdir.join('dist/').listdir()\n        monkeypatch.syspath_prepend(str(egg_path))\n        return egg_path\n\n    return inner,type='function_definition'\nline_star:156,line_end:188|char_star:0,char_end:16"->"type='INFORMATION BLOCK'\nline_star:157,line_end:188|char_star:4,char_end:16";
"def inner(name, base=modules_tmpdir):\n        base.join(name).ensure_dir()\n        base.join(name).join('__init__.py').ensure()\n\n        egg_setup = base.join('setup.py')\n        egg_setup.write(\n            textwrap.dedent(\n                f'''\n                from setuptools import setup\n                setup(\n                    name='{name}',\n                    version='1.0',\n                    packages=['site_egg'],\n                    zip_safe=True,\n                )\n                '''\n            )\n        )\n\n        import subprocess\n\n        subprocess.check_call(\n            [sys.executable, 'setup.py', 'bdist_egg'], cwd=str(modules_tmpdir)\n        )\n        (egg_path,) = modules_tmpdir.join('dist/').listdir()\n        monkeypatch.syspath_prepend(str(egg_path))\n        return egg_path,type='function_definition'\nline_star:160,line_end:186|char_star:4,char_end:23"[shape="box",fillcolor="#cee6b4",style=filled];
"type='INFORMATION BLOCK'\nline_star:157,line_end:188|char_star:4,char_end:16"->"def inner(name, base=modules_tmpdir):\n        base.join(name).ensure_dir()\n        base.join(name).join('__init__.py').ensure()\n\n        egg_setup = base.join('setup.py')\n        egg_setup.write(\n            textwrap.dedent(\n                f'''\n                from setuptools import setup\n                setup(\n                    name='{name}',\n                    version='1.0',\n                    packages=['site_egg'],\n                    zip_safe=True,\n                )\n                '''\n            )\n        )\n\n        import subprocess\n\n        subprocess.check_call(\n            [sys.executable, 'setup.py', 'bdist_egg'], cwd=str(modules_tmpdir)\n        )\n        (egg_path,) = modules_tmpdir.join('dist/').listdir()\n        monkeypatch.syspath_prepend(str(egg_path))\n        return egg_path,type='function_definition'\nline_star:160,line_end:186|char_star:4,char_end:23";
"inner,type='identifier'\nline_star:160,line_end:160|char_star:8,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"def inner(name, base=modules_tmpdir):\n        base.join(name).ensure_dir()\n        base.join(name).join('__init__.py').ensure()\n\n        egg_setup = base.join('setup.py')\n        egg_setup.write(\n            textwrap.dedent(\n                f'''\n                from setuptools import setup\n                setup(\n                    name='{name}',\n                    version='1.0',\n                    packages=['site_egg'],\n                    zip_safe=True,\n                )\n                '''\n            )\n        )\n\n        import subprocess\n\n        subprocess.check_call(\n            [sys.executable, 'setup.py', 'bdist_egg'], cwd=str(modules_tmpdir)\n        )\n        (egg_path,) = modules_tmpdir.join('dist/').listdir()\n        monkeypatch.syspath_prepend(str(egg_path))\n        return egg_path,type='function_definition'\nline_star:160,line_end:186|char_star:4,char_end:23"->"inner,type='identifier'\nline_star:160,line_end:160|char_star:8,char_end:13";
"(name, base=modules_tmpdir),type='parameters'\nline_star:160,line_end:160|char_star:13,char_end:40"[shape="box",fillcolor="white",style=filled];
"def inner(name, base=modules_tmpdir):\n        base.join(name).ensure_dir()\n        base.join(name).join('__init__.py').ensure()\n\n        egg_setup = base.join('setup.py')\n        egg_setup.write(\n            textwrap.dedent(\n                f'''\n                from setuptools import setup\n                setup(\n                    name='{name}',\n                    version='1.0',\n                    packages=['site_egg'],\n                    zip_safe=True,\n                )\n                '''\n            )\n        )\n\n        import subprocess\n\n        subprocess.check_call(\n            [sys.executable, 'setup.py', 'bdist_egg'], cwd=str(modules_tmpdir)\n        )\n        (egg_path,) = modules_tmpdir.join('dist/').listdir()\n        monkeypatch.syspath_prepend(str(egg_path))\n        return egg_path,type='function_definition'\nline_star:160,line_end:186|char_star:4,char_end:23"->"(name, base=modules_tmpdir),type='parameters'\nline_star:160,line_end:160|char_star:13,char_end:40";
"name,type='identifier'\nline_star:160,line_end:160|char_star:14,char_end:18"[shape="point",fillcolor="#121013",style=filled];
"(name, base=modules_tmpdir),type='parameters'\nline_star:160,line_end:160|char_star:13,char_end:40"->"name,type='identifier'\nline_star:160,line_end:160|char_star:14,char_end:18";
"base=modules_tmpdir,type='default_parameter'\nline_star:160,line_end:160|char_star:20,char_end:39"[shape="box",fillcolor="white",style=filled];
"(name, base=modules_tmpdir),type='parameters'\nline_star:160,line_end:160|char_star:13,char_end:40"->"base=modules_tmpdir,type='default_parameter'\nline_star:160,line_end:160|char_star:20,char_end:39";
"base,type='identifier'\nline_star:160,line_end:160|char_star:20,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"base=modules_tmpdir,type='default_parameter'\nline_star:160,line_end:160|char_star:20,char_end:39"->"base,type='identifier'\nline_star:160,line_end:160|char_star:20,char_end:24";
"modules_tmpdir,type='identifier'\nline_star:160,line_end:160|char_star:25,char_end:39"[shape="point",fillcolor="#121013",style=filled];
"base=modules_tmpdir,type='default_parameter'\nline_star:160,line_end:160|char_star:20,char_end:39"->"modules_tmpdir,type='identifier'\nline_star:160,line_end:160|char_star:25,char_end:39";
"type='INFORMATION BLOCK'\nline_star:161,line_end:186|char_star:8,char_end:23"[shape="point",fillcolor="#121013",style=filled];
"def inner(name, base=modules_tmpdir):\n        base.join(name).ensure_dir()\n        base.join(name).join('__init__.py').ensure()\n\n        egg_setup = base.join('setup.py')\n        egg_setup.write(\n            textwrap.dedent(\n                f'''\n                from setuptools import setup\n                setup(\n                    name='{name}',\n                    version='1.0',\n                    packages=['site_egg'],\n                    zip_safe=True,\n                )\n                '''\n            )\n        )\n\n        import subprocess\n\n        subprocess.check_call(\n            [sys.executable, 'setup.py', 'bdist_egg'], cwd=str(modules_tmpdir)\n        )\n        (egg_path,) = modules_tmpdir.join('dist/').listdir()\n        monkeypatch.syspath_prepend(str(egg_path))\n        return egg_path,type='function_definition'\nline_star:160,line_end:186|char_star:4,char_end:23"->"type='INFORMATION BLOCK'\nline_star:161,line_end:186|char_star:8,char_end:23";
"import subprocess,type='import_statement'\nline_star:179,line_end:179|char_star:8,char_end:25"[shape="box",fillcolor="#f48b29",style=filled];
"type='INFORMATION BLOCK'\nline_star:161,line_end:186|char_star:8,char_end:23"->"import subprocess,type='import_statement'\nline_star:179,line_end:179|char_star:8,char_end:25";
"return egg_path,type='return_statement'\nline_star:186,line_end:186|char_star:8,char_end:23"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:161,line_end:186|char_star:8,char_end:23"->"return egg_path,type='return_statement'\nline_star:186,line_end:186|char_star:8,char_end:23";
"return inner,type='return_statement'\nline_star:188,line_end:188|char_star:4,char_end:16"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:157,line_end:188|char_star:4,char_end:16"->"return inner,type='return_statement'\nline_star:188,line_end:188|char_star:4,char_end:16";
"@pytest.fixture\ndef purge_module(request):\n    def inner(name):\n        request.addfinalizer(lambda: sys.modules.pop(name, None))\n\n    return inner,type='decorated_definition'\nline_star:191,line_end:196|char_star:0,char_end:16"[shape="box",fillcolor="#c8c6a7",style=filled];
"MODULE"->"@pytest.fixture\ndef purge_module(request):\n    def inner(name):\n        request.addfinalizer(lambda: sys.modules.pop(name, None))\n\n    return inner,type='decorated_definition'\nline_star:191,line_end:196|char_star:0,char_end:16";
"@pytest.fixture,type='decorator'\nline_star:191,line_end:191|char_star:0,char_end:15"[shape="box",fillcolor="white",style=filled];
"@pytest.fixture\ndef purge_module(request):\n    def inner(name):\n        request.addfinalizer(lambda: sys.modules.pop(name, None))\n\n    return inner,type='decorated_definition'\nline_star:191,line_end:196|char_star:0,char_end:16"->"@pytest.fixture,type='decorator'\nline_star:191,line_end:191|char_star:0,char_end:15";
"def purge_module(request):\n    def inner(name):\n        request.addfinalizer(lambda: sys.modules.pop(name, None))\n\n    return inner,type='function_definition'\nline_star:192,line_end:196|char_star:0,char_end:16"[shape="box",fillcolor="#cee6b4",style=filled];
"@pytest.fixture\ndef purge_module(request):\n    def inner(name):\n        request.addfinalizer(lambda: sys.modules.pop(name, None))\n\n    return inner,type='decorated_definition'\nline_star:191,line_end:196|char_star:0,char_end:16"->"def purge_module(request):\n    def inner(name):\n        request.addfinalizer(lambda: sys.modules.pop(name, None))\n\n    return inner,type='function_definition'\nline_star:192,line_end:196|char_star:0,char_end:16";
"purge_module,type='identifier'\nline_star:192,line_end:192|char_star:4,char_end:16"[shape="point",fillcolor="#121013",style=filled];
"def purge_module(request):\n    def inner(name):\n        request.addfinalizer(lambda: sys.modules.pop(name, None))\n\n    return inner,type='function_definition'\nline_star:192,line_end:196|char_star:0,char_end:16"->"purge_module,type='identifier'\nline_star:192,line_end:192|char_star:4,char_end:16";
"(request),type='parameters'\nline_star:192,line_end:192|char_star:16,char_end:25"[shape="box",fillcolor="white",style=filled];
"def purge_module(request):\n    def inner(name):\n        request.addfinalizer(lambda: sys.modules.pop(name, None))\n\n    return inner,type='function_definition'\nline_star:192,line_end:196|char_star:0,char_end:16"->"(request),type='parameters'\nline_star:192,line_end:192|char_star:16,char_end:25";
"request,type='identifier'\nline_star:192,line_end:192|char_star:17,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"(request),type='parameters'\nline_star:192,line_end:192|char_star:16,char_end:25"->"request,type='identifier'\nline_star:192,line_end:192|char_star:17,char_end:24";
"type='INFORMATION BLOCK'\nline_star:193,line_end:196|char_star:4,char_end:16"[shape="point",fillcolor="#121013",style=filled];
"def purge_module(request):\n    def inner(name):\n        request.addfinalizer(lambda: sys.modules.pop(name, None))\n\n    return inner,type='function_definition'\nline_star:192,line_end:196|char_star:0,char_end:16"->"type='INFORMATION BLOCK'\nline_star:193,line_end:196|char_star:4,char_end:16";
"def inner(name):\n        request.addfinalizer(lambda: sys.modules.pop(name, None)),type='function_definition'\nline_star:193,line_end:194|char_star:4,char_end:65"[shape="box",fillcolor="#cee6b4",style=filled];
"type='INFORMATION BLOCK'\nline_star:193,line_end:196|char_star:4,char_end:16"->"def inner(name):\n        request.addfinalizer(lambda: sys.modules.pop(name, None)),type='function_definition'\nline_star:193,line_end:194|char_star:4,char_end:65";
"inner,type='identifier'\nline_star:193,line_end:193|char_star:8,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"def inner(name):\n        request.addfinalizer(lambda: sys.modules.pop(name, None)),type='function_definition'\nline_star:193,line_end:194|char_star:4,char_end:65"->"inner,type='identifier'\nline_star:193,line_end:193|char_star:8,char_end:13";
"(name),type='parameters'\nline_star:193,line_end:193|char_star:13,char_end:19"[shape="box",fillcolor="white",style=filled];
"def inner(name):\n        request.addfinalizer(lambda: sys.modules.pop(name, None)),type='function_definition'\nline_star:193,line_end:194|char_star:4,char_end:65"->"(name),type='parameters'\nline_star:193,line_end:193|char_star:13,char_end:19";
"name,type='identifier'\nline_star:193,line_end:193|char_star:14,char_end:18"[shape="point",fillcolor="#121013",style=filled];
"(name),type='parameters'\nline_star:193,line_end:193|char_star:13,char_end:19"->"name,type='identifier'\nline_star:193,line_end:193|char_star:14,char_end:18";
"type='INFORMATION BLOCK'\nline_star:194,line_end:194|char_star:8,char_end:65"[shape="point",fillcolor="#121013",style=filled];
"def inner(name):\n        request.addfinalizer(lambda: sys.modules.pop(name, None)),type='function_definition'\nline_star:193,line_end:194|char_star:4,char_end:65"->"type='INFORMATION BLOCK'\nline_star:194,line_end:194|char_star:8,char_end:65";
"return inner,type='return_statement'\nline_star:196,line_end:196|char_star:4,char_end:16"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:193,line_end:196|char_star:4,char_end:16"->"return inner,type='return_statement'\nline_star:196,line_end:196|char_star:4,char_end:16";
"import os\nimport pkgutil\nimport sys\nimport textwrap\nimport pytest\nfrom _pytest import monkeypatch\nimport flask\nfrom flask import Flask as _Flask\nimport subproces"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"import os\nimport pkgutil\nimport sys\nimport textwrap\nimport pytest\nfrom _pytest import monkeypatch\nimport flask\nfrom flask import Flask as _Flask\nimport subproces"
}
