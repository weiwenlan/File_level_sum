digraph G{
rankdir="LR";
"MODULE"[shape="box",fillcolor="white",style=filled];
"import json,type='import_statement'\nline_star:0,line_end:0|char_star:0,char_end:11"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"import json,type='import_statement'\nline_star:0,line_end:0|char_star:0,char_end:11";
"import os,type='import_statement'\nline_star:1,line_end:1|char_star:0,char_end:9"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"import os,type='import_statement'\nline_star:1,line_end:1|char_star:0,char_end:9";
"import textwrap,type='import_statement'\nline_star:2,line_end:2|char_star:0,char_end:15"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"import textwrap,type='import_statement'\nline_star:2,line_end:2|char_star:0,char_end:15";
"from datetime import timedelta,type='import_from_statement'\nline_star:3,line_end:3|char_star:0,char_end:30"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"from datetime import timedelta,type='import_from_statement'\nline_star:3,line_end:3|char_star:0,char_end:30";
"import pytest,type='import_statement'\nline_star:5,line_end:5|char_star:0,char_end:13"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"import pytest,type='import_statement'\nline_star:5,line_end:5|char_star:0,char_end:13";
"import flask,type='import_statement'\nline_star:7,line_end:7|char_star:0,char_end:12"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"import flask,type='import_statement'\nline_star:7,line_end:7|char_star:0,char_end:12";
"# config keys used for the TestConfig,type='comment'\nline_star:10,line_end:10|char_star:0,char_end:37"[shape="box",fillcolor="#f0c929",style=filled];
"MODULE"->"# config keys used for the TestConfig,type='comment'\nline_star:10,line_end:10|char_star:0,char_end:37";
"def common_object_test(app):\n    assert app.secret_key == 'config'\n    assert app.config['TEST_KEY'] == 'foo'\n    assert 'TestConfig' not in app.config,type='function_definition'\nline_star:15,line_end:18|char_star:0,char_end:41"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def common_object_test(app):\n    assert app.secret_key == 'config'\n    assert app.config['TEST_KEY'] == 'foo'\n    assert 'TestConfig' not in app.config,type='function_definition'\nline_star:15,line_end:18|char_star:0,char_end:41";
"common_object_test,type='identifier'\nline_star:15,line_end:15|char_star:4,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"def common_object_test(app):\n    assert app.secret_key == 'config'\n    assert app.config['TEST_KEY'] == 'foo'\n    assert 'TestConfig' not in app.config,type='function_definition'\nline_star:15,line_end:18|char_star:0,char_end:41"->"common_object_test,type='identifier'\nline_star:15,line_end:15|char_star:4,char_end:22";
"(app),type='parameters'\nline_star:15,line_end:15|char_star:22,char_end:27"[shape="box",fillcolor="white",style=filled];
"def common_object_test(app):\n    assert app.secret_key == 'config'\n    assert app.config['TEST_KEY'] == 'foo'\n    assert 'TestConfig' not in app.config,type='function_definition'\nline_star:15,line_end:18|char_star:0,char_end:41"->"(app),type='parameters'\nline_star:15,line_end:15|char_star:22,char_end:27";
"app,type='identifier'\nline_star:15,line_end:15|char_star:23,char_end:26"[shape="point",fillcolor="#121013",style=filled];
"(app),type='parameters'\nline_star:15,line_end:15|char_star:22,char_end:27"->"app,type='identifier'\nline_star:15,line_end:15|char_star:23,char_end:26";
"type='INFORMATION BLOCK'\nline_star:16,line_end:18|char_star:4,char_end:41"[shape="point",fillcolor="#121013",style=filled];
"def common_object_test(app):\n    assert app.secret_key == 'config'\n    assert app.config['TEST_KEY'] == 'foo'\n    assert 'TestConfig' not in app.config,type='function_definition'\nline_star:15,line_end:18|char_star:0,char_end:41"->"type='INFORMATION BLOCK'\nline_star:16,line_end:18|char_star:4,char_end:41";
"assert app.secret_key == 'config',type='assert_statement'\nline_star:16,line_end:16|char_star:4,char_end:37"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:16,line_end:18|char_star:4,char_end:41"->"assert app.secret_key == 'config',type='assert_statement'\nline_star:16,line_end:16|char_star:4,char_end:37";
"app.secret_key == 'config',type='comparison_operator'\nline_star:16,line_end:16|char_star:11,char_end:37"[shape="box",fillcolor="white",style=filled];
"assert app.secret_key == 'config',type='assert_statement'\nline_star:16,line_end:16|char_star:4,char_end:37"->"app.secret_key == 'config',type='comparison_operator'\nline_star:16,line_end:16|char_star:11,char_end:37";
"app.secret_key,type='attribute'\nline_star:16,line_end:16|char_star:11,char_end:25"[shape="box",fillcolor="white",style=filled];
"app.secret_key == 'config',type='comparison_operator'\nline_star:16,line_end:16|char_star:11,char_end:37"->"app.secret_key,type='attribute'\nline_star:16,line_end:16|char_star:11,char_end:25";
"app,type='identifier'\nline_star:16,line_end:16|char_star:11,char_end:14"[shape="point",fillcolor="#121013",style=filled];
"app.secret_key,type='attribute'\nline_star:16,line_end:16|char_star:11,char_end:25"->"app,type='identifier'\nline_star:16,line_end:16|char_star:11,char_end:14";
"secret_key,type='identifier'\nline_star:16,line_end:16|char_star:15,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"app.secret_key,type='attribute'\nline_star:16,line_end:16|char_star:11,char_end:25"->"secret_key,type='identifier'\nline_star:16,line_end:16|char_star:15,char_end:25";
"assert app.config['TEST_KEY'] == 'foo',type='assert_statement'\nline_star:17,line_end:17|char_star:4,char_end:42"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:16,line_end:18|char_star:4,char_end:41"->"assert app.config['TEST_KEY'] == 'foo',type='assert_statement'\nline_star:17,line_end:17|char_star:4,char_end:42";
"app.config['TEST_KEY'] == 'foo',type='comparison_operator'\nline_star:17,line_end:17|char_star:11,char_end:42"[shape="box",fillcolor="white",style=filled];
"assert app.config['TEST_KEY'] == 'foo',type='assert_statement'\nline_star:17,line_end:17|char_star:4,char_end:42"->"app.config['TEST_KEY'] == 'foo',type='comparison_operator'\nline_star:17,line_end:17|char_star:11,char_end:42";
"app.config['TEST_KEY'],type='subscript'\nline_star:17,line_end:17|char_star:11,char_end:33"[shape="box",fillcolor="white",style=filled];
"app.config['TEST_KEY'] == 'foo',type='comparison_operator'\nline_star:17,line_end:17|char_star:11,char_end:42"->"app.config['TEST_KEY'],type='subscript'\nline_star:17,line_end:17|char_star:11,char_end:33";
"app.config,type='attribute'\nline_star:17,line_end:17|char_star:11,char_end:21"[shape="box",fillcolor="white",style=filled];
"app.config['TEST_KEY'],type='subscript'\nline_star:17,line_end:17|char_star:11,char_end:33"->"app.config,type='attribute'\nline_star:17,line_end:17|char_star:11,char_end:21";
"app,type='identifier'\nline_star:17,line_end:17|char_star:11,char_end:14"[shape="point",fillcolor="#121013",style=filled];
"app.config,type='attribute'\nline_star:17,line_end:17|char_star:11,char_end:21"->"app,type='identifier'\nline_star:17,line_end:17|char_star:11,char_end:14";
"config,type='identifier'\nline_star:17,line_end:17|char_star:15,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"app.config,type='attribute'\nline_star:17,line_end:17|char_star:11,char_end:21"->"config,type='identifier'\nline_star:17,line_end:17|char_star:15,char_end:21";
"assert 'TestConfig' not in app.config,type='assert_statement'\nline_star:18,line_end:18|char_star:4,char_end:41"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:16,line_end:18|char_star:4,char_end:41"->"assert 'TestConfig' not in app.config,type='assert_statement'\nline_star:18,line_end:18|char_star:4,char_end:41";
"'TestConfig' not in app.config,type='comparison_operator'\nline_star:18,line_end:18|char_star:11,char_end:41"[shape="box",fillcolor="white",style=filled];
"assert 'TestConfig' not in app.config,type='assert_statement'\nline_star:18,line_end:18|char_star:4,char_end:41"->"'TestConfig' not in app.config,type='comparison_operator'\nline_star:18,line_end:18|char_star:11,char_end:41";
"app.config,type='attribute'\nline_star:18,line_end:18|char_star:31,char_end:41"[shape="box",fillcolor="white",style=filled];
"'TestConfig' not in app.config,type='comparison_operator'\nline_star:18,line_end:18|char_star:11,char_end:41"->"app.config,type='attribute'\nline_star:18,line_end:18|char_star:31,char_end:41";
"app,type='identifier'\nline_star:18,line_end:18|char_star:31,char_end:34"[shape="point",fillcolor="#121013",style=filled];
"app.config,type='attribute'\nline_star:18,line_end:18|char_star:31,char_end:41"->"app,type='identifier'\nline_star:18,line_end:18|char_star:31,char_end:34";
"config,type='identifier'\nline_star:18,line_end:18|char_star:35,char_end:41"[shape="point",fillcolor="#121013",style=filled];
"app.config,type='attribute'\nline_star:18,line_end:18|char_star:31,char_end:41"->"config,type='identifier'\nline_star:18,line_end:18|char_star:35,char_end:41";
"def test_config_from_pyfile():\n    app = flask.Flask(__name__)\n    app.config.from_pyfile(f'{__file__.rsplit('.', 1)[0]}.py')\n    common_object_test(app),type='function_definition'\nline_star:21,line_end:24|char_star:0,char_end:27"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_config_from_pyfile():\n    app = flask.Flask(__name__)\n    app.config.from_pyfile(f'{__file__.rsplit('.', 1)[0]}.py')\n    common_object_test(app),type='function_definition'\nline_star:21,line_end:24|char_star:0,char_end:27";
"test_config_from_pyfile,type='identifier'\nline_star:21,line_end:21|char_star:4,char_end:27"[shape="point",fillcolor="#121013",style=filled];
"def test_config_from_pyfile():\n    app = flask.Flask(__name__)\n    app.config.from_pyfile(f'{__file__.rsplit('.', 1)[0]}.py')\n    common_object_test(app),type='function_definition'\nline_star:21,line_end:24|char_star:0,char_end:27"->"test_config_from_pyfile,type='identifier'\nline_star:21,line_end:21|char_star:4,char_end:27";
"type='INFORMATION BLOCK'\nline_star:22,line_end:24|char_star:4,char_end:27"[shape="point",fillcolor="#121013",style=filled];
"def test_config_from_pyfile():\n    app = flask.Flask(__name__)\n    app.config.from_pyfile(f'{__file__.rsplit('.', 1)[0]}.py')\n    common_object_test(app),type='function_definition'\nline_star:21,line_end:24|char_star:0,char_end:27"->"type='INFORMATION BLOCK'\nline_star:22,line_end:24|char_star:4,char_end:27";
"def test_config_from_object():\n    app = flask.Flask(__name__)\n    app.config.from_object(__name__)\n    common_object_test(app),type='function_definition'\nline_star:27,line_end:30|char_star:0,char_end:27"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_config_from_object():\n    app = flask.Flask(__name__)\n    app.config.from_object(__name__)\n    common_object_test(app),type='function_definition'\nline_star:27,line_end:30|char_star:0,char_end:27";
"test_config_from_object,type='identifier'\nline_star:27,line_end:27|char_star:4,char_end:27"[shape="point",fillcolor="#121013",style=filled];
"def test_config_from_object():\n    app = flask.Flask(__name__)\n    app.config.from_object(__name__)\n    common_object_test(app),type='function_definition'\nline_star:27,line_end:30|char_star:0,char_end:27"->"test_config_from_object,type='identifier'\nline_star:27,line_end:27|char_star:4,char_end:27";
"type='INFORMATION BLOCK'\nline_star:28,line_end:30|char_star:4,char_end:27"[shape="point",fillcolor="#121013",style=filled];
"def test_config_from_object():\n    app = flask.Flask(__name__)\n    app.config.from_object(__name__)\n    common_object_test(app),type='function_definition'\nline_star:27,line_end:30|char_star:0,char_end:27"->"type='INFORMATION BLOCK'\nline_star:28,line_end:30|char_star:4,char_end:27";
"def test_config_from_file():\n    app = flask.Flask(__name__)\n    current_dir = os.path.dirname(os.path.abspath(__file__))\n    app.config.from_file(os.path.join(current_dir, 'static', 'config.json'), json.load)\n    common_object_test(app),type='function_definition'\nline_star:33,line_end:37|char_star:0,char_end:27"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_config_from_file():\n    app = flask.Flask(__name__)\n    current_dir = os.path.dirname(os.path.abspath(__file__))\n    app.config.from_file(os.path.join(current_dir, 'static', 'config.json'), json.load)\n    common_object_test(app),type='function_definition'\nline_star:33,line_end:37|char_star:0,char_end:27";
"test_config_from_file,type='identifier'\nline_star:33,line_end:33|char_star:4,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"def test_config_from_file():\n    app = flask.Flask(__name__)\n    current_dir = os.path.dirname(os.path.abspath(__file__))\n    app.config.from_file(os.path.join(current_dir, 'static', 'config.json'), json.load)\n    common_object_test(app),type='function_definition'\nline_star:33,line_end:37|char_star:0,char_end:27"->"test_config_from_file,type='identifier'\nline_star:33,line_end:33|char_star:4,char_end:25";
"type='INFORMATION BLOCK'\nline_star:34,line_end:37|char_star:4,char_end:27"[shape="point",fillcolor="#121013",style=filled];
"def test_config_from_file():\n    app = flask.Flask(__name__)\n    current_dir = os.path.dirname(os.path.abspath(__file__))\n    app.config.from_file(os.path.join(current_dir, 'static', 'config.json'), json.load)\n    common_object_test(app),type='function_definition'\nline_star:33,line_end:37|char_star:0,char_end:27"->"type='INFORMATION BLOCK'\nline_star:34,line_end:37|char_star:4,char_end:27";
"def test_config_from_mapping():\n    app = flask.Flask(__name__)\n    app.config.from_mapping({'SECRET_KEY': 'config', 'TEST_KEY': 'foo'})\n    common_object_test(app)\n\n    app = flask.Flask(__name__)\n    app.config.from_mapping([('SECRET_KEY', 'config'), ('TEST_KEY', 'foo')])\n    common_object_test(app)\n\n    app = flask.Flask(__name__)\n    app.config.from_mapping(SECRET_KEY='config', TEST_KEY='foo')\n    common_object_test(app)\n\n    app = flask.Flask(__name__)\n    with pytest.raises(TypeError):\n        app.config.from_mapping({}, {}),type='function_definition'\nline_star:40,line_end:55|char_star:0,char_end:39"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_config_from_mapping():\n    app = flask.Flask(__name__)\n    app.config.from_mapping({'SECRET_KEY': 'config', 'TEST_KEY': 'foo'})\n    common_object_test(app)\n\n    app = flask.Flask(__name__)\n    app.config.from_mapping([('SECRET_KEY', 'config'), ('TEST_KEY', 'foo')])\n    common_object_test(app)\n\n    app = flask.Flask(__name__)\n    app.config.from_mapping(SECRET_KEY='config', TEST_KEY='foo')\n    common_object_test(app)\n\n    app = flask.Flask(__name__)\n    with pytest.raises(TypeError):\n        app.config.from_mapping({}, {}),type='function_definition'\nline_star:40,line_end:55|char_star:0,char_end:39";
"test_config_from_mapping,type='identifier'\nline_star:40,line_end:40|char_star:4,char_end:28"[shape="point",fillcolor="#121013",style=filled];
"def test_config_from_mapping():\n    app = flask.Flask(__name__)\n    app.config.from_mapping({'SECRET_KEY': 'config', 'TEST_KEY': 'foo'})\n    common_object_test(app)\n\n    app = flask.Flask(__name__)\n    app.config.from_mapping([('SECRET_KEY', 'config'), ('TEST_KEY', 'foo')])\n    common_object_test(app)\n\n    app = flask.Flask(__name__)\n    app.config.from_mapping(SECRET_KEY='config', TEST_KEY='foo')\n    common_object_test(app)\n\n    app = flask.Flask(__name__)\n    with pytest.raises(TypeError):\n        app.config.from_mapping({}, {}),type='function_definition'\nline_star:40,line_end:55|char_star:0,char_end:39"->"test_config_from_mapping,type='identifier'\nline_star:40,line_end:40|char_star:4,char_end:28";
"type='INFORMATION BLOCK'\nline_star:41,line_end:55|char_star:4,char_end:39"[shape="point",fillcolor="#121013",style=filled];
"def test_config_from_mapping():\n    app = flask.Flask(__name__)\n    app.config.from_mapping({'SECRET_KEY': 'config', 'TEST_KEY': 'foo'})\n    common_object_test(app)\n\n    app = flask.Flask(__name__)\n    app.config.from_mapping([('SECRET_KEY', 'config'), ('TEST_KEY', 'foo')])\n    common_object_test(app)\n\n    app = flask.Flask(__name__)\n    app.config.from_mapping(SECRET_KEY='config', TEST_KEY='foo')\n    common_object_test(app)\n\n    app = flask.Flask(__name__)\n    with pytest.raises(TypeError):\n        app.config.from_mapping({}, {}),type='function_definition'\nline_star:40,line_end:55|char_star:0,char_end:39"->"type='INFORMATION BLOCK'\nline_star:41,line_end:55|char_star:4,char_end:39";
"with pytest.raises(TypeError):\n        app.config.from_mapping({}, {}),type='with_statement'\nline_star:54,line_end:55|char_star:4,char_end:39"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:41,line_end:55|char_star:4,char_end:39"->"with pytest.raises(TypeError):\n        app.config.from_mapping({}, {}),type='with_statement'\nline_star:54,line_end:55|char_star:4,char_end:39";
"pytest.raises(TypeError),type='with_clause'\nline_star:54,line_end:54|char_star:9,char_end:33"[shape="box",fillcolor="white",style=filled];
"with pytest.raises(TypeError):\n        app.config.from_mapping({}, {}),type='with_statement'\nline_star:54,line_end:55|char_star:4,char_end:39"->"pytest.raises(TypeError),type='with_clause'\nline_star:54,line_end:54|char_star:9,char_end:33";
"type='INFORMATION BLOCK'\nline_star:55,line_end:55|char_star:8,char_end:39"[shape="point",fillcolor="#121013",style=filled];
"with pytest.raises(TypeError):\n        app.config.from_mapping({}, {}),type='with_statement'\nline_star:54,line_end:55|char_star:4,char_end:39"->"type='INFORMATION BLOCK'\nline_star:55,line_end:55|char_star:8,char_end:39";
"def test_config_from_class():\n    class Base:\n        TEST_KEY = 'foo'\n\n    class Test(Base):\n        SECRET_KEY = 'config'\n\n    app = flask.Flask(__name__)\n    app.config.from_object(Test)\n    common_object_test(app),type='function_definition'\nline_star:58,line_end:67|char_star:0,char_end:27"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_config_from_class():\n    class Base:\n        TEST_KEY = 'foo'\n\n    class Test(Base):\n        SECRET_KEY = 'config'\n\n    app = flask.Flask(__name__)\n    app.config.from_object(Test)\n    common_object_test(app),type='function_definition'\nline_star:58,line_end:67|char_star:0,char_end:27";
"test_config_from_class,type='identifier'\nline_star:58,line_end:58|char_star:4,char_end:26"[shape="point",fillcolor="#121013",style=filled];
"def test_config_from_class():\n    class Base:\n        TEST_KEY = 'foo'\n\n    class Test(Base):\n        SECRET_KEY = 'config'\n\n    app = flask.Flask(__name__)\n    app.config.from_object(Test)\n    common_object_test(app),type='function_definition'\nline_star:58,line_end:67|char_star:0,char_end:27"->"test_config_from_class,type='identifier'\nline_star:58,line_end:58|char_star:4,char_end:26";
"type='INFORMATION BLOCK'\nline_star:59,line_end:67|char_star:4,char_end:27"[shape="point",fillcolor="#121013",style=filled];
"def test_config_from_class():\n    class Base:\n        TEST_KEY = 'foo'\n\n    class Test(Base):\n        SECRET_KEY = 'config'\n\n    app = flask.Flask(__name__)\n    app.config.from_object(Test)\n    common_object_test(app),type='function_definition'\nline_star:58,line_end:67|char_star:0,char_end:27"->"type='INFORMATION BLOCK'\nline_star:59,line_end:67|char_star:4,char_end:27";
"class Base:\n        TEST_KEY = 'foo',type='class_definition'\nline_star:59,line_end:60|char_star:4,char_end:24"[shape="box",fillcolor="#ffdf91",style=filled];
"type='INFORMATION BLOCK'\nline_star:59,line_end:67|char_star:4,char_end:27"->"class Base:\n        TEST_KEY = 'foo',type='class_definition'\nline_star:59,line_end:60|char_star:4,char_end:24";
"Base,type='identifier'\nline_star:59,line_end:59|char_star:10,char_end:14"[shape="point",fillcolor="#121013",style=filled];
"class Base:\n        TEST_KEY = 'foo',type='class_definition'\nline_star:59,line_end:60|char_star:4,char_end:24"->"Base,type='identifier'\nline_star:59,line_end:59|char_star:10,char_end:14";
"type='INFORMATION BLOCK'\nline_star:60,line_end:60|char_star:8,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"class Base:\n        TEST_KEY = 'foo',type='class_definition'\nline_star:59,line_end:60|char_star:4,char_end:24"->"type='INFORMATION BLOCK'\nline_star:60,line_end:60|char_star:8,char_end:24";
"class Test(Base):\n        SECRET_KEY = 'config',type='class_definition'\nline_star:62,line_end:63|char_star:4,char_end:29"[shape="box",fillcolor="#ffdf91",style=filled];
"type='INFORMATION BLOCK'\nline_star:59,line_end:67|char_star:4,char_end:27"->"class Test(Base):\n        SECRET_KEY = 'config',type='class_definition'\nline_star:62,line_end:63|char_star:4,char_end:29";
"Test,type='identifier'\nline_star:62,line_end:62|char_star:10,char_end:14"[shape="point",fillcolor="#121013",style=filled];
"class Test(Base):\n        SECRET_KEY = 'config',type='class_definition'\nline_star:62,line_end:63|char_star:4,char_end:29"->"Test,type='identifier'\nline_star:62,line_end:62|char_star:10,char_end:14";
"(Base),type='argument_list'\nline_star:62,line_end:62|char_star:14,char_end:20"[shape="box",fillcolor="white",style=filled];
"class Test(Base):\n        SECRET_KEY = 'config',type='class_definition'\nline_star:62,line_end:63|char_star:4,char_end:29"->"(Base),type='argument_list'\nline_star:62,line_end:62|char_star:14,char_end:20";
"Base,type='identifier'\nline_star:62,line_end:62|char_star:15,char_end:19"[shape="point",fillcolor="#121013",style=filled];
"(Base),type='argument_list'\nline_star:62,line_end:62|char_star:14,char_end:20"->"Base,type='identifier'\nline_star:62,line_end:62|char_star:15,char_end:19";
"type='INFORMATION BLOCK'\nline_star:63,line_end:63|char_star:8,char_end:29"[shape="point",fillcolor="#121013",style=filled];
"class Test(Base):\n        SECRET_KEY = 'config',type='class_definition'\nline_star:62,line_end:63|char_star:4,char_end:29"->"type='INFORMATION BLOCK'\nline_star:63,line_end:63|char_star:8,char_end:29";
"def test_config_from_envvar(monkeypatch):\n    monkeypatch.setattr('os.environ', {})\n    app = flask.Flask(__name__)\n    with pytest.raises(RuntimeError) as e:\n        app.config.from_envvar('FOO_SETTINGS')\n        assert ''FOO_SETTINGS' is not set' in str(e.value)\n    assert not app.config.from_envvar('FOO_SETTINGS', silent=True)\n\n    monkeypatch.setattr(\n        'os.environ', {'FOO_SETTINGS': f'{__file__.rsplit('.', 1)[0]}.py'}\n    )\n    assert app.config.from_envvar('FOO_SETTINGS')\n    common_object_test(app),type='function_definition'\nline_star:70,line_end:82|char_star:0,char_end:27"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_config_from_envvar(monkeypatch):\n    monkeypatch.setattr('os.environ', {})\n    app = flask.Flask(__name__)\n    with pytest.raises(RuntimeError) as e:\n        app.config.from_envvar('FOO_SETTINGS')\n        assert ''FOO_SETTINGS' is not set' in str(e.value)\n    assert not app.config.from_envvar('FOO_SETTINGS', silent=True)\n\n    monkeypatch.setattr(\n        'os.environ', {'FOO_SETTINGS': f'{__file__.rsplit('.', 1)[0]}.py'}\n    )\n    assert app.config.from_envvar('FOO_SETTINGS')\n    common_object_test(app),type='function_definition'\nline_star:70,line_end:82|char_star:0,char_end:27";
"test_config_from_envvar,type='identifier'\nline_star:70,line_end:70|char_star:4,char_end:27"[shape="point",fillcolor="#121013",style=filled];
"def test_config_from_envvar(monkeypatch):\n    monkeypatch.setattr('os.environ', {})\n    app = flask.Flask(__name__)\n    with pytest.raises(RuntimeError) as e:\n        app.config.from_envvar('FOO_SETTINGS')\n        assert ''FOO_SETTINGS' is not set' in str(e.value)\n    assert not app.config.from_envvar('FOO_SETTINGS', silent=True)\n\n    monkeypatch.setattr(\n        'os.environ', {'FOO_SETTINGS': f'{__file__.rsplit('.', 1)[0]}.py'}\n    )\n    assert app.config.from_envvar('FOO_SETTINGS')\n    common_object_test(app),type='function_definition'\nline_star:70,line_end:82|char_star:0,char_end:27"->"test_config_from_envvar,type='identifier'\nline_star:70,line_end:70|char_star:4,char_end:27";
"(monkeypatch),type='parameters'\nline_star:70,line_end:70|char_star:27,char_end:40"[shape="box",fillcolor="white",style=filled];
"def test_config_from_envvar(monkeypatch):\n    monkeypatch.setattr('os.environ', {})\n    app = flask.Flask(__name__)\n    with pytest.raises(RuntimeError) as e:\n        app.config.from_envvar('FOO_SETTINGS')\n        assert ''FOO_SETTINGS' is not set' in str(e.value)\n    assert not app.config.from_envvar('FOO_SETTINGS', silent=True)\n\n    monkeypatch.setattr(\n        'os.environ', {'FOO_SETTINGS': f'{__file__.rsplit('.', 1)[0]}.py'}\n    )\n    assert app.config.from_envvar('FOO_SETTINGS')\n    common_object_test(app),type='function_definition'\nline_star:70,line_end:82|char_star:0,char_end:27"->"(monkeypatch),type='parameters'\nline_star:70,line_end:70|char_star:27,char_end:40";
"monkeypatch,type='identifier'\nline_star:70,line_end:70|char_star:28,char_end:39"[shape="point",fillcolor="#121013",style=filled];
"(monkeypatch),type='parameters'\nline_star:70,line_end:70|char_star:27,char_end:40"->"monkeypatch,type='identifier'\nline_star:70,line_end:70|char_star:28,char_end:39";
"type='INFORMATION BLOCK'\nline_star:71,line_end:82|char_star:4,char_end:27"[shape="point",fillcolor="#121013",style=filled];
"def test_config_from_envvar(monkeypatch):\n    monkeypatch.setattr('os.environ', {})\n    app = flask.Flask(__name__)\n    with pytest.raises(RuntimeError) as e:\n        app.config.from_envvar('FOO_SETTINGS')\n        assert ''FOO_SETTINGS' is not set' in str(e.value)\n    assert not app.config.from_envvar('FOO_SETTINGS', silent=True)\n\n    monkeypatch.setattr(\n        'os.environ', {'FOO_SETTINGS': f'{__file__.rsplit('.', 1)[0]}.py'}\n    )\n    assert app.config.from_envvar('FOO_SETTINGS')\n    common_object_test(app),type='function_definition'\nline_star:70,line_end:82|char_star:0,char_end:27"->"type='INFORMATION BLOCK'\nline_star:71,line_end:82|char_star:4,char_end:27";
"with pytest.raises(RuntimeError) as e:\n        app.config.from_envvar('FOO_SETTINGS')\n        assert ''FOO_SETTINGS' is not set' in str(e.value),type='with_statement'\nline_star:73,line_end:75|char_star:4,char_end:58"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:71,line_end:82|char_star:4,char_end:27"->"with pytest.raises(RuntimeError) as e:\n        app.config.from_envvar('FOO_SETTINGS')\n        assert ''FOO_SETTINGS' is not set' in str(e.value),type='with_statement'\nline_star:73,line_end:75|char_star:4,char_end:58";
"pytest.raises(RuntimeError) as e,type='with_clause'\nline_star:73,line_end:73|char_star:9,char_end:41"[shape="box",fillcolor="white",style=filled];
"with pytest.raises(RuntimeError) as e:\n        app.config.from_envvar('FOO_SETTINGS')\n        assert ''FOO_SETTINGS' is not set' in str(e.value),type='with_statement'\nline_star:73,line_end:75|char_star:4,char_end:58"->"pytest.raises(RuntimeError) as e,type='with_clause'\nline_star:73,line_end:73|char_star:9,char_end:41";
"type='INFORMATION BLOCK'\nline_star:74,line_end:75|char_star:8,char_end:58"[shape="point",fillcolor="#121013",style=filled];
"with pytest.raises(RuntimeError) as e:\n        app.config.from_envvar('FOO_SETTINGS')\n        assert ''FOO_SETTINGS' is not set' in str(e.value),type='with_statement'\nline_star:73,line_end:75|char_star:4,char_end:58"->"type='INFORMATION BLOCK'\nline_star:74,line_end:75|char_star:8,char_end:58";
"assert ''FOO_SETTINGS' is not set' in str(e.value),type='assert_statement'\nline_star:75,line_end:75|char_star:8,char_end:58"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:74,line_end:75|char_star:8,char_end:58"->"assert ''FOO_SETTINGS' is not set' in str(e.value),type='assert_statement'\nline_star:75,line_end:75|char_star:8,char_end:58";
"''FOO_SETTINGS' is not set' in str(e.value),type='comparison_operator'\nline_star:75,line_end:75|char_star:15,char_end:58"[shape="box",fillcolor="white",style=filled];
"assert ''FOO_SETTINGS' is not set' in str(e.value),type='assert_statement'\nline_star:75,line_end:75|char_star:8,char_end:58"->"''FOO_SETTINGS' is not set' in str(e.value),type='comparison_operator'\nline_star:75,line_end:75|char_star:15,char_end:58";
"str(e.value),type='call'\nline_star:75,line_end:75|char_star:46,char_end:58"[shape="box",fillcolor="white",style=filled];
"''FOO_SETTINGS' is not set' in str(e.value),type='comparison_operator'\nline_star:75,line_end:75|char_star:15,char_end:58"->"str(e.value),type='call'\nline_star:75,line_end:75|char_star:46,char_end:58";
"str,type='identifier'\nline_star:75,line_end:75|char_star:46,char_end:49"[shape="point",fillcolor="#121013",style=filled];
"str(e.value),type='call'\nline_star:75,line_end:75|char_star:46,char_end:58"->"str,type='identifier'\nline_star:75,line_end:75|char_star:46,char_end:49";
"(e.value),type='argument_list'\nline_star:75,line_end:75|char_star:49,char_end:58"[shape="box",fillcolor="white",style=filled];
"str(e.value),type='call'\nline_star:75,line_end:75|char_star:46,char_end:58"->"(e.value),type='argument_list'\nline_star:75,line_end:75|char_star:49,char_end:58";
"e.value,type='attribute'\nline_star:75,line_end:75|char_star:50,char_end:57"[shape="box",fillcolor="white",style=filled];
"(e.value),type='argument_list'\nline_star:75,line_end:75|char_star:49,char_end:58"->"e.value,type='attribute'\nline_star:75,line_end:75|char_star:50,char_end:57";
"e,type='identifier'\nline_star:75,line_end:75|char_star:50,char_end:51"[shape="point",fillcolor="#121013",style=filled];
"e.value,type='attribute'\nline_star:75,line_end:75|char_star:50,char_end:57"->"e,type='identifier'\nline_star:75,line_end:75|char_star:50,char_end:51";
"value,type='identifier'\nline_star:75,line_end:75|char_star:52,char_end:57"[shape="point",fillcolor="#121013",style=filled];
"e.value,type='attribute'\nline_star:75,line_end:75|char_star:50,char_end:57"->"value,type='identifier'\nline_star:75,line_end:75|char_star:52,char_end:57";
"assert not app.config.from_envvar('FOO_SETTINGS', silent=True),type='assert_statement'\nline_star:76,line_end:76|char_star:4,char_end:66"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:71,line_end:82|char_star:4,char_end:27"->"assert not app.config.from_envvar('FOO_SETTINGS', silent=True),type='assert_statement'\nline_star:76,line_end:76|char_star:4,char_end:66";
"not app.config.from_envvar('FOO_SETTINGS', silent=True),type='not_operator'\nline_star:76,line_end:76|char_star:11,char_end:66"[shape="box",fillcolor="white",style=filled];
"assert not app.config.from_envvar('FOO_SETTINGS', silent=True),type='assert_statement'\nline_star:76,line_end:76|char_star:4,char_end:66"->"not app.config.from_envvar('FOO_SETTINGS', silent=True),type='not_operator'\nline_star:76,line_end:76|char_star:11,char_end:66";
"app.config.from_envvar('FOO_SETTINGS', silent=True),type='call'\nline_star:76,line_end:76|char_star:15,char_end:66"[shape="box",fillcolor="white",style=filled];
"not app.config.from_envvar('FOO_SETTINGS', silent=True),type='not_operator'\nline_star:76,line_end:76|char_star:11,char_end:66"->"app.config.from_envvar('FOO_SETTINGS', silent=True),type='call'\nline_star:76,line_end:76|char_star:15,char_end:66";
"app.config.from_envvar,type='attribute'\nline_star:76,line_end:76|char_star:15,char_end:37"[shape="box",fillcolor="white",style=filled];
"app.config.from_envvar('FOO_SETTINGS', silent=True),type='call'\nline_star:76,line_end:76|char_star:15,char_end:66"->"app.config.from_envvar,type='attribute'\nline_star:76,line_end:76|char_star:15,char_end:37";
"app.config,type='attribute'\nline_star:76,line_end:76|char_star:15,char_end:25"[shape="box",fillcolor="white",style=filled];
"app.config.from_envvar,type='attribute'\nline_star:76,line_end:76|char_star:15,char_end:37"->"app.config,type='attribute'\nline_star:76,line_end:76|char_star:15,char_end:25";
"app,type='identifier'\nline_star:76,line_end:76|char_star:15,char_end:18"[shape="point",fillcolor="#121013",style=filled];
"app.config,type='attribute'\nline_star:76,line_end:76|char_star:15,char_end:25"->"app,type='identifier'\nline_star:76,line_end:76|char_star:15,char_end:18";
"config,type='identifier'\nline_star:76,line_end:76|char_star:19,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"app.config,type='attribute'\nline_star:76,line_end:76|char_star:15,char_end:25"->"config,type='identifier'\nline_star:76,line_end:76|char_star:19,char_end:25";
"from_envvar,type='identifier'\nline_star:76,line_end:76|char_star:26,char_end:37"[shape="point",fillcolor="#121013",style=filled];
"app.config.from_envvar,type='attribute'\nline_star:76,line_end:76|char_star:15,char_end:37"->"from_envvar,type='identifier'\nline_star:76,line_end:76|char_star:26,char_end:37";
"('FOO_SETTINGS', silent=True),type='argument_list'\nline_star:76,line_end:76|char_star:37,char_end:66"[shape="box",fillcolor="white",style=filled];
"app.config.from_envvar('FOO_SETTINGS', silent=True),type='call'\nline_star:76,line_end:76|char_star:15,char_end:66"->"('FOO_SETTINGS', silent=True),type='argument_list'\nline_star:76,line_end:76|char_star:37,char_end:66";
"silent=True,type='keyword_argument'\nline_star:76,line_end:76|char_star:54,char_end:65"[shape="box",fillcolor="white",style=filled];
"('FOO_SETTINGS', silent=True),type='argument_list'\nline_star:76,line_end:76|char_star:37,char_end:66"->"silent=True,type='keyword_argument'\nline_star:76,line_end:76|char_star:54,char_end:65";
"silent,type='identifier'\nline_star:76,line_end:76|char_star:54,char_end:60"[shape="point",fillcolor="#121013",style=filled];
"silent=True,type='keyword_argument'\nline_star:76,line_end:76|char_star:54,char_end:65"->"silent,type='identifier'\nline_star:76,line_end:76|char_star:54,char_end:60";
"assert app.config.from_envvar('FOO_SETTINGS'),type='assert_statement'\nline_star:81,line_end:81|char_star:4,char_end:49"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:71,line_end:82|char_star:4,char_end:27"->"assert app.config.from_envvar('FOO_SETTINGS'),type='assert_statement'\nline_star:81,line_end:81|char_star:4,char_end:49";
"app.config.from_envvar('FOO_SETTINGS'),type='call'\nline_star:81,line_end:81|char_star:11,char_end:49"[shape="box",fillcolor="white",style=filled];
"assert app.config.from_envvar('FOO_SETTINGS'),type='assert_statement'\nline_star:81,line_end:81|char_star:4,char_end:49"->"app.config.from_envvar('FOO_SETTINGS'),type='call'\nline_star:81,line_end:81|char_star:11,char_end:49";
"app.config.from_envvar,type='attribute'\nline_star:81,line_end:81|char_star:11,char_end:33"[shape="box",fillcolor="white",style=filled];
"app.config.from_envvar('FOO_SETTINGS'),type='call'\nline_star:81,line_end:81|char_star:11,char_end:49"->"app.config.from_envvar,type='attribute'\nline_star:81,line_end:81|char_star:11,char_end:33";
"app.config,type='attribute'\nline_star:81,line_end:81|char_star:11,char_end:21"[shape="box",fillcolor="white",style=filled];
"app.config.from_envvar,type='attribute'\nline_star:81,line_end:81|char_star:11,char_end:33"->"app.config,type='attribute'\nline_star:81,line_end:81|char_star:11,char_end:21";
"app,type='identifier'\nline_star:81,line_end:81|char_star:11,char_end:14"[shape="point",fillcolor="#121013",style=filled];
"app.config,type='attribute'\nline_star:81,line_end:81|char_star:11,char_end:21"->"app,type='identifier'\nline_star:81,line_end:81|char_star:11,char_end:14";
"config,type='identifier'\nline_star:81,line_end:81|char_star:15,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"app.config,type='attribute'\nline_star:81,line_end:81|char_star:11,char_end:21"->"config,type='identifier'\nline_star:81,line_end:81|char_star:15,char_end:21";
"from_envvar,type='identifier'\nline_star:81,line_end:81|char_star:22,char_end:33"[shape="point",fillcolor="#121013",style=filled];
"app.config.from_envvar,type='attribute'\nline_star:81,line_end:81|char_star:11,char_end:33"->"from_envvar,type='identifier'\nline_star:81,line_end:81|char_star:22,char_end:33";
"('FOO_SETTINGS'),type='argument_list'\nline_star:81,line_end:81|char_star:33,char_end:49"[shape="box",fillcolor="white",style=filled];
"app.config.from_envvar('FOO_SETTINGS'),type='call'\nline_star:81,line_end:81|char_star:11,char_end:49"->"('FOO_SETTINGS'),type='argument_list'\nline_star:81,line_end:81|char_star:33,char_end:49";
"def test_config_from_envvar_missing(monkeypatch):\n    monkeypatch.setattr('os.environ', {'FOO_SETTINGS': 'missing.cfg'})\n    with pytest.raises(IOError) as e:\n        app = flask.Flask(__name__)\n        app.config.from_envvar('FOO_SETTINGS')\n    msg = str(e.value)\n    assert msg.startswith(\n        '[Errno 2] Unable to load configuration file (No such file or directory):'\n    )\n    assert msg.endswith('missing.cfg'')\n    assert not app.config.from_envvar('FOO_SETTINGS', silent=True),type='function_definition'\nline_star:85,line_end:95|char_star:0,char_end:66"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_config_from_envvar_missing(monkeypatch):\n    monkeypatch.setattr('os.environ', {'FOO_SETTINGS': 'missing.cfg'})\n    with pytest.raises(IOError) as e:\n        app = flask.Flask(__name__)\n        app.config.from_envvar('FOO_SETTINGS')\n    msg = str(e.value)\n    assert msg.startswith(\n        '[Errno 2] Unable to load configuration file (No such file or directory):'\n    )\n    assert msg.endswith('missing.cfg'')\n    assert not app.config.from_envvar('FOO_SETTINGS', silent=True),type='function_definition'\nline_star:85,line_end:95|char_star:0,char_end:66";
"test_config_from_envvar_missing,type='identifier'\nline_star:85,line_end:85|char_star:4,char_end:35"[shape="point",fillcolor="#121013",style=filled];
"def test_config_from_envvar_missing(monkeypatch):\n    monkeypatch.setattr('os.environ', {'FOO_SETTINGS': 'missing.cfg'})\n    with pytest.raises(IOError) as e:\n        app = flask.Flask(__name__)\n        app.config.from_envvar('FOO_SETTINGS')\n    msg = str(e.value)\n    assert msg.startswith(\n        '[Errno 2] Unable to load configuration file (No such file or directory):'\n    )\n    assert msg.endswith('missing.cfg'')\n    assert not app.config.from_envvar('FOO_SETTINGS', silent=True),type='function_definition'\nline_star:85,line_end:95|char_star:0,char_end:66"->"test_config_from_envvar_missing,type='identifier'\nline_star:85,line_end:85|char_star:4,char_end:35";
"(monkeypatch),type='parameters'\nline_star:85,line_end:85|char_star:35,char_end:48"[shape="box",fillcolor="white",style=filled];
"def test_config_from_envvar_missing(monkeypatch):\n    monkeypatch.setattr('os.environ', {'FOO_SETTINGS': 'missing.cfg'})\n    with pytest.raises(IOError) as e:\n        app = flask.Flask(__name__)\n        app.config.from_envvar('FOO_SETTINGS')\n    msg = str(e.value)\n    assert msg.startswith(\n        '[Errno 2] Unable to load configuration file (No such file or directory):'\n    )\n    assert msg.endswith('missing.cfg'')\n    assert not app.config.from_envvar('FOO_SETTINGS', silent=True),type='function_definition'\nline_star:85,line_end:95|char_star:0,char_end:66"->"(monkeypatch),type='parameters'\nline_star:85,line_end:85|char_star:35,char_end:48";
"monkeypatch,type='identifier'\nline_star:85,line_end:85|char_star:36,char_end:47"[shape="point",fillcolor="#121013",style=filled];
"(monkeypatch),type='parameters'\nline_star:85,line_end:85|char_star:35,char_end:48"->"monkeypatch,type='identifier'\nline_star:85,line_end:85|char_star:36,char_end:47";
"type='INFORMATION BLOCK'\nline_star:86,line_end:95|char_star:4,char_end:66"[shape="point",fillcolor="#121013",style=filled];
"def test_config_from_envvar_missing(monkeypatch):\n    monkeypatch.setattr('os.environ', {'FOO_SETTINGS': 'missing.cfg'})\n    with pytest.raises(IOError) as e:\n        app = flask.Flask(__name__)\n        app.config.from_envvar('FOO_SETTINGS')\n    msg = str(e.value)\n    assert msg.startswith(\n        '[Errno 2] Unable to load configuration file (No such file or directory):'\n    )\n    assert msg.endswith('missing.cfg'')\n    assert not app.config.from_envvar('FOO_SETTINGS', silent=True),type='function_definition'\nline_star:85,line_end:95|char_star:0,char_end:66"->"type='INFORMATION BLOCK'\nline_star:86,line_end:95|char_star:4,char_end:66";
"with pytest.raises(IOError) as e:\n        app = flask.Flask(__name__)\n        app.config.from_envvar('FOO_SETTINGS'),type='with_statement'\nline_star:87,line_end:89|char_star:4,char_end:46"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:86,line_end:95|char_star:4,char_end:66"->"with pytest.raises(IOError) as e:\n        app = flask.Flask(__name__)\n        app.config.from_envvar('FOO_SETTINGS'),type='with_statement'\nline_star:87,line_end:89|char_star:4,char_end:46";
"pytest.raises(IOError) as e,type='with_clause'\nline_star:87,line_end:87|char_star:9,char_end:36"[shape="box",fillcolor="white",style=filled];
"with pytest.raises(IOError) as e:\n        app = flask.Flask(__name__)\n        app.config.from_envvar('FOO_SETTINGS'),type='with_statement'\nline_star:87,line_end:89|char_star:4,char_end:46"->"pytest.raises(IOError) as e,type='with_clause'\nline_star:87,line_end:87|char_star:9,char_end:36";
"type='INFORMATION BLOCK'\nline_star:88,line_end:89|char_star:8,char_end:46"[shape="point",fillcolor="#121013",style=filled];
"with pytest.raises(IOError) as e:\n        app = flask.Flask(__name__)\n        app.config.from_envvar('FOO_SETTINGS'),type='with_statement'\nline_star:87,line_end:89|char_star:4,char_end:46"->"type='INFORMATION BLOCK'\nline_star:88,line_end:89|char_star:8,char_end:46";
"assert msg.startswith(\n        '[Errno 2] Unable to load configuration file (No such file or directory):'\n    ),type='assert_statement'\nline_star:91,line_end:93|char_star:4,char_end:5"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:86,line_end:95|char_star:4,char_end:66"->"assert msg.startswith(\n        '[Errno 2] Unable to load configuration file (No such file or directory):'\n    ),type='assert_statement'\nline_star:91,line_end:93|char_star:4,char_end:5";
"msg.startswith(\n        '[Errno 2] Unable to load configuration file (No such file or directory):'\n    ),type='call'\nline_star:91,line_end:93|char_star:11,char_end:5"[shape="box",fillcolor="white",style=filled];
"assert msg.startswith(\n        '[Errno 2] Unable to load configuration file (No such file or directory):'\n    ),type='assert_statement'\nline_star:91,line_end:93|char_star:4,char_end:5"->"msg.startswith(\n        '[Errno 2] Unable to load configuration file (No such file or directory):'\n    ),type='call'\nline_star:91,line_end:93|char_star:11,char_end:5";
"msg.startswith,type='attribute'\nline_star:91,line_end:91|char_star:11,char_end:25"[shape="box",fillcolor="white",style=filled];
"msg.startswith(\n        '[Errno 2] Unable to load configuration file (No such file or directory):'\n    ),type='call'\nline_star:91,line_end:93|char_star:11,char_end:5"->"msg.startswith,type='attribute'\nline_star:91,line_end:91|char_star:11,char_end:25";
"msg,type='identifier'\nline_star:91,line_end:91|char_star:11,char_end:14"[shape="point",fillcolor="#121013",style=filled];
"msg.startswith,type='attribute'\nline_star:91,line_end:91|char_star:11,char_end:25"->"msg,type='identifier'\nline_star:91,line_end:91|char_star:11,char_end:14";
"startswith,type='identifier'\nline_star:91,line_end:91|char_star:15,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"msg.startswith,type='attribute'\nline_star:91,line_end:91|char_star:11,char_end:25"->"startswith,type='identifier'\nline_star:91,line_end:91|char_star:15,char_end:25";
"(\n        '[Errno 2] Unable to load configuration file (No such file or directory):'\n    ),type='argument_list'\nline_star:91,line_end:93|char_star:25,char_end:5"[shape="box",fillcolor="white",style=filled];
"msg.startswith(\n        '[Errno 2] Unable to load configuration file (No such file or directory):'\n    ),type='call'\nline_star:91,line_end:93|char_star:11,char_end:5"->"(\n        '[Errno 2] Unable to load configuration file (No such file or directory):'\n    ),type='argument_list'\nline_star:91,line_end:93|char_star:25,char_end:5";
"assert msg.endswith('missing.cfg''),type='assert_statement'\nline_star:94,line_end:94|char_star:4,char_end:39"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:86,line_end:95|char_star:4,char_end:66"->"assert msg.endswith('missing.cfg''),type='assert_statement'\nline_star:94,line_end:94|char_star:4,char_end:39";
"msg.endswith('missing.cfg''),type='call'\nline_star:94,line_end:94|char_star:11,char_end:39"[shape="box",fillcolor="white",style=filled];
"assert msg.endswith('missing.cfg''),type='assert_statement'\nline_star:94,line_end:94|char_star:4,char_end:39"->"msg.endswith('missing.cfg''),type='call'\nline_star:94,line_end:94|char_star:11,char_end:39";
"msg.endswith,type='attribute'\nline_star:94,line_end:94|char_star:11,char_end:23"[shape="box",fillcolor="white",style=filled];
"msg.endswith('missing.cfg''),type='call'\nline_star:94,line_end:94|char_star:11,char_end:39"->"msg.endswith,type='attribute'\nline_star:94,line_end:94|char_star:11,char_end:23";
"msg,type='identifier'\nline_star:94,line_end:94|char_star:11,char_end:14"[shape="point",fillcolor="#121013",style=filled];
"msg.endswith,type='attribute'\nline_star:94,line_end:94|char_star:11,char_end:23"->"msg,type='identifier'\nline_star:94,line_end:94|char_star:11,char_end:14";
"endswith,type='identifier'\nline_star:94,line_end:94|char_star:15,char_end:23"[shape="point",fillcolor="#121013",style=filled];
"msg.endswith,type='attribute'\nline_star:94,line_end:94|char_star:11,char_end:23"->"endswith,type='identifier'\nline_star:94,line_end:94|char_star:15,char_end:23";
"('missing.cfg''),type='argument_list'\nline_star:94,line_end:94|char_star:23,char_end:39"[shape="box",fillcolor="white",style=filled];
"msg.endswith('missing.cfg''),type='call'\nline_star:94,line_end:94|char_star:11,char_end:39"->"('missing.cfg''),type='argument_list'\nline_star:94,line_end:94|char_star:23,char_end:39";
"assert not app.config.from_envvar('FOO_SETTINGS', silent=True),type='assert_statement'\nline_star:95,line_end:95|char_star:4,char_end:66"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:86,line_end:95|char_star:4,char_end:66"->"assert not app.config.from_envvar('FOO_SETTINGS', silent=True),type='assert_statement'\nline_star:95,line_end:95|char_star:4,char_end:66";
"not app.config.from_envvar('FOO_SETTINGS', silent=True),type='not_operator'\nline_star:95,line_end:95|char_star:11,char_end:66"[shape="box",fillcolor="white",style=filled];
"assert not app.config.from_envvar('FOO_SETTINGS', silent=True),type='assert_statement'\nline_star:95,line_end:95|char_star:4,char_end:66"->"not app.config.from_envvar('FOO_SETTINGS', silent=True),type='not_operator'\nline_star:95,line_end:95|char_star:11,char_end:66";
"app.config.from_envvar('FOO_SETTINGS', silent=True),type='call'\nline_star:95,line_end:95|char_star:15,char_end:66"[shape="box",fillcolor="white",style=filled];
"not app.config.from_envvar('FOO_SETTINGS', silent=True),type='not_operator'\nline_star:95,line_end:95|char_star:11,char_end:66"->"app.config.from_envvar('FOO_SETTINGS', silent=True),type='call'\nline_star:95,line_end:95|char_star:15,char_end:66";
"app.config.from_envvar,type='attribute'\nline_star:95,line_end:95|char_star:15,char_end:37"[shape="box",fillcolor="white",style=filled];
"app.config.from_envvar('FOO_SETTINGS', silent=True),type='call'\nline_star:95,line_end:95|char_star:15,char_end:66"->"app.config.from_envvar,type='attribute'\nline_star:95,line_end:95|char_star:15,char_end:37";
"app.config,type='attribute'\nline_star:95,line_end:95|char_star:15,char_end:25"[shape="box",fillcolor="white",style=filled];
"app.config.from_envvar,type='attribute'\nline_star:95,line_end:95|char_star:15,char_end:37"->"app.config,type='attribute'\nline_star:95,line_end:95|char_star:15,char_end:25";
"app,type='identifier'\nline_star:95,line_end:95|char_star:15,char_end:18"[shape="point",fillcolor="#121013",style=filled];
"app.config,type='attribute'\nline_star:95,line_end:95|char_star:15,char_end:25"->"app,type='identifier'\nline_star:95,line_end:95|char_star:15,char_end:18";
"config,type='identifier'\nline_star:95,line_end:95|char_star:19,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"app.config,type='attribute'\nline_star:95,line_end:95|char_star:15,char_end:25"->"config,type='identifier'\nline_star:95,line_end:95|char_star:19,char_end:25";
"from_envvar,type='identifier'\nline_star:95,line_end:95|char_star:26,char_end:37"[shape="point",fillcolor="#121013",style=filled];
"app.config.from_envvar,type='attribute'\nline_star:95,line_end:95|char_star:15,char_end:37"->"from_envvar,type='identifier'\nline_star:95,line_end:95|char_star:26,char_end:37";
"('FOO_SETTINGS', silent=True),type='argument_list'\nline_star:95,line_end:95|char_star:37,char_end:66"[shape="box",fillcolor="white",style=filled];
"app.config.from_envvar('FOO_SETTINGS', silent=True),type='call'\nline_star:95,line_end:95|char_star:15,char_end:66"->"('FOO_SETTINGS', silent=True),type='argument_list'\nline_star:95,line_end:95|char_star:37,char_end:66";
"silent=True,type='keyword_argument'\nline_star:95,line_end:95|char_star:54,char_end:65"[shape="box",fillcolor="white",style=filled];
"('FOO_SETTINGS', silent=True),type='argument_list'\nline_star:95,line_end:95|char_star:37,char_end:66"->"silent=True,type='keyword_argument'\nline_star:95,line_end:95|char_star:54,char_end:65";
"silent,type='identifier'\nline_star:95,line_end:95|char_star:54,char_end:60"[shape="point",fillcolor="#121013",style=filled];
"silent=True,type='keyword_argument'\nline_star:95,line_end:95|char_star:54,char_end:65"->"silent,type='identifier'\nline_star:95,line_end:95|char_star:54,char_end:60";
"def test_config_missing():\n    app = flask.Flask(__name__)\n    with pytest.raises(IOError) as e:\n        app.config.from_pyfile('missing.cfg')\n    msg = str(e.value)\n    assert msg.startswith(\n        '[Errno 2] Unable to load configuration file (No such file or directory):'\n    )\n    assert msg.endswith('missing.cfg'')\n    assert not app.config.from_pyfile('missing.cfg', silent=True),type='function_definition'\nline_star:98,line_end:107|char_star:0,char_end:65"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_config_missing():\n    app = flask.Flask(__name__)\n    with pytest.raises(IOError) as e:\n        app.config.from_pyfile('missing.cfg')\n    msg = str(e.value)\n    assert msg.startswith(\n        '[Errno 2] Unable to load configuration file (No such file or directory):'\n    )\n    assert msg.endswith('missing.cfg'')\n    assert not app.config.from_pyfile('missing.cfg', silent=True),type='function_definition'\nline_star:98,line_end:107|char_star:0,char_end:65";
"test_config_missing,type='identifier'\nline_star:98,line_end:98|char_star:4,char_end:23"[shape="point",fillcolor="#121013",style=filled];
"def test_config_missing():\n    app = flask.Flask(__name__)\n    with pytest.raises(IOError) as e:\n        app.config.from_pyfile('missing.cfg')\n    msg = str(e.value)\n    assert msg.startswith(\n        '[Errno 2] Unable to load configuration file (No such file or directory):'\n    )\n    assert msg.endswith('missing.cfg'')\n    assert not app.config.from_pyfile('missing.cfg', silent=True),type='function_definition'\nline_star:98,line_end:107|char_star:0,char_end:65"->"test_config_missing,type='identifier'\nline_star:98,line_end:98|char_star:4,char_end:23";
"type='INFORMATION BLOCK'\nline_star:99,line_end:107|char_star:4,char_end:65"[shape="point",fillcolor="#121013",style=filled];
"def test_config_missing():\n    app = flask.Flask(__name__)\n    with pytest.raises(IOError) as e:\n        app.config.from_pyfile('missing.cfg')\n    msg = str(e.value)\n    assert msg.startswith(\n        '[Errno 2] Unable to load configuration file (No such file or directory):'\n    )\n    assert msg.endswith('missing.cfg'')\n    assert not app.config.from_pyfile('missing.cfg', silent=True),type='function_definition'\nline_star:98,line_end:107|char_star:0,char_end:65"->"type='INFORMATION BLOCK'\nline_star:99,line_end:107|char_star:4,char_end:65";
"with pytest.raises(IOError) as e:\n        app.config.from_pyfile('missing.cfg'),type='with_statement'\nline_star:100,line_end:101|char_star:4,char_end:45"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:99,line_end:107|char_star:4,char_end:65"->"with pytest.raises(IOError) as e:\n        app.config.from_pyfile('missing.cfg'),type='with_statement'\nline_star:100,line_end:101|char_star:4,char_end:45";
"pytest.raises(IOError) as e,type='with_clause'\nline_star:100,line_end:100|char_star:9,char_end:36"[shape="box",fillcolor="white",style=filled];
"with pytest.raises(IOError) as e:\n        app.config.from_pyfile('missing.cfg'),type='with_statement'\nline_star:100,line_end:101|char_star:4,char_end:45"->"pytest.raises(IOError) as e,type='with_clause'\nline_star:100,line_end:100|char_star:9,char_end:36";
"type='INFORMATION BLOCK'\nline_star:101,line_end:101|char_star:8,char_end:45"[shape="point",fillcolor="#121013",style=filled];
"with pytest.raises(IOError) as e:\n        app.config.from_pyfile('missing.cfg'),type='with_statement'\nline_star:100,line_end:101|char_star:4,char_end:45"->"type='INFORMATION BLOCK'\nline_star:101,line_end:101|char_star:8,char_end:45";
"assert msg.startswith(\n        '[Errno 2] Unable to load configuration file (No such file or directory):'\n    ),type='assert_statement'\nline_star:103,line_end:105|char_star:4,char_end:5"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:99,line_end:107|char_star:4,char_end:65"->"assert msg.startswith(\n        '[Errno 2] Unable to load configuration file (No such file or directory):'\n    ),type='assert_statement'\nline_star:103,line_end:105|char_star:4,char_end:5";
"msg.startswith(\n        '[Errno 2] Unable to load configuration file (No such file or directory):'\n    ),type='call'\nline_star:103,line_end:105|char_star:11,char_end:5"[shape="box",fillcolor="white",style=filled];
"assert msg.startswith(\n        '[Errno 2] Unable to load configuration file (No such file or directory):'\n    ),type='assert_statement'\nline_star:103,line_end:105|char_star:4,char_end:5"->"msg.startswith(\n        '[Errno 2] Unable to load configuration file (No such file or directory):'\n    ),type='call'\nline_star:103,line_end:105|char_star:11,char_end:5";
"msg.startswith,type='attribute'\nline_star:103,line_end:103|char_star:11,char_end:25"[shape="box",fillcolor="white",style=filled];
"msg.startswith(\n        '[Errno 2] Unable to load configuration file (No such file or directory):'\n    ),type='call'\nline_star:103,line_end:105|char_star:11,char_end:5"->"msg.startswith,type='attribute'\nline_star:103,line_end:103|char_star:11,char_end:25";
"msg,type='identifier'\nline_star:103,line_end:103|char_star:11,char_end:14"[shape="point",fillcolor="#121013",style=filled];
"msg.startswith,type='attribute'\nline_star:103,line_end:103|char_star:11,char_end:25"->"msg,type='identifier'\nline_star:103,line_end:103|char_star:11,char_end:14";
"startswith,type='identifier'\nline_star:103,line_end:103|char_star:15,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"msg.startswith,type='attribute'\nline_star:103,line_end:103|char_star:11,char_end:25"->"startswith,type='identifier'\nline_star:103,line_end:103|char_star:15,char_end:25";
"(\n        '[Errno 2] Unable to load configuration file (No such file or directory):'\n    ),type='argument_list'\nline_star:103,line_end:105|char_star:25,char_end:5"[shape="box",fillcolor="white",style=filled];
"msg.startswith(\n        '[Errno 2] Unable to load configuration file (No such file or directory):'\n    ),type='call'\nline_star:103,line_end:105|char_star:11,char_end:5"->"(\n        '[Errno 2] Unable to load configuration file (No such file or directory):'\n    ),type='argument_list'\nline_star:103,line_end:105|char_star:25,char_end:5";
"assert msg.endswith('missing.cfg''),type='assert_statement'\nline_star:106,line_end:106|char_star:4,char_end:39"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:99,line_end:107|char_star:4,char_end:65"->"assert msg.endswith('missing.cfg''),type='assert_statement'\nline_star:106,line_end:106|char_star:4,char_end:39";
"msg.endswith('missing.cfg''),type='call'\nline_star:106,line_end:106|char_star:11,char_end:39"[shape="box",fillcolor="white",style=filled];
"assert msg.endswith('missing.cfg''),type='assert_statement'\nline_star:106,line_end:106|char_star:4,char_end:39"->"msg.endswith('missing.cfg''),type='call'\nline_star:106,line_end:106|char_star:11,char_end:39";
"msg.endswith,type='attribute'\nline_star:106,line_end:106|char_star:11,char_end:23"[shape="box",fillcolor="white",style=filled];
"msg.endswith('missing.cfg''),type='call'\nline_star:106,line_end:106|char_star:11,char_end:39"->"msg.endswith,type='attribute'\nline_star:106,line_end:106|char_star:11,char_end:23";
"msg,type='identifier'\nline_star:106,line_end:106|char_star:11,char_end:14"[shape="point",fillcolor="#121013",style=filled];
"msg.endswith,type='attribute'\nline_star:106,line_end:106|char_star:11,char_end:23"->"msg,type='identifier'\nline_star:106,line_end:106|char_star:11,char_end:14";
"endswith,type='identifier'\nline_star:106,line_end:106|char_star:15,char_end:23"[shape="point",fillcolor="#121013",style=filled];
"msg.endswith,type='attribute'\nline_star:106,line_end:106|char_star:11,char_end:23"->"endswith,type='identifier'\nline_star:106,line_end:106|char_star:15,char_end:23";
"('missing.cfg''),type='argument_list'\nline_star:106,line_end:106|char_star:23,char_end:39"[shape="box",fillcolor="white",style=filled];
"msg.endswith('missing.cfg''),type='call'\nline_star:106,line_end:106|char_star:11,char_end:39"->"('missing.cfg''),type='argument_list'\nline_star:106,line_end:106|char_star:23,char_end:39";
"assert not app.config.from_pyfile('missing.cfg', silent=True),type='assert_statement'\nline_star:107,line_end:107|char_star:4,char_end:65"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:99,line_end:107|char_star:4,char_end:65"->"assert not app.config.from_pyfile('missing.cfg', silent=True),type='assert_statement'\nline_star:107,line_end:107|char_star:4,char_end:65";
"not app.config.from_pyfile('missing.cfg', silent=True),type='not_operator'\nline_star:107,line_end:107|char_star:11,char_end:65"[shape="box",fillcolor="white",style=filled];
"assert not app.config.from_pyfile('missing.cfg', silent=True),type='assert_statement'\nline_star:107,line_end:107|char_star:4,char_end:65"->"not app.config.from_pyfile('missing.cfg', silent=True),type='not_operator'\nline_star:107,line_end:107|char_star:11,char_end:65";
"app.config.from_pyfile('missing.cfg', silent=True),type='call'\nline_star:107,line_end:107|char_star:15,char_end:65"[shape="box",fillcolor="white",style=filled];
"not app.config.from_pyfile('missing.cfg', silent=True),type='not_operator'\nline_star:107,line_end:107|char_star:11,char_end:65"->"app.config.from_pyfile('missing.cfg', silent=True),type='call'\nline_star:107,line_end:107|char_star:15,char_end:65";
"app.config.from_pyfile,type='attribute'\nline_star:107,line_end:107|char_star:15,char_end:37"[shape="box",fillcolor="white",style=filled];
"app.config.from_pyfile('missing.cfg', silent=True),type='call'\nline_star:107,line_end:107|char_star:15,char_end:65"->"app.config.from_pyfile,type='attribute'\nline_star:107,line_end:107|char_star:15,char_end:37";
"app.config,type='attribute'\nline_star:107,line_end:107|char_star:15,char_end:25"[shape="box",fillcolor="white",style=filled];
"app.config.from_pyfile,type='attribute'\nline_star:107,line_end:107|char_star:15,char_end:37"->"app.config,type='attribute'\nline_star:107,line_end:107|char_star:15,char_end:25";
"app,type='identifier'\nline_star:107,line_end:107|char_star:15,char_end:18"[shape="point",fillcolor="#121013",style=filled];
"app.config,type='attribute'\nline_star:107,line_end:107|char_star:15,char_end:25"->"app,type='identifier'\nline_star:107,line_end:107|char_star:15,char_end:18";
"config,type='identifier'\nline_star:107,line_end:107|char_star:19,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"app.config,type='attribute'\nline_star:107,line_end:107|char_star:15,char_end:25"->"config,type='identifier'\nline_star:107,line_end:107|char_star:19,char_end:25";
"from_pyfile,type='identifier'\nline_star:107,line_end:107|char_star:26,char_end:37"[shape="point",fillcolor="#121013",style=filled];
"app.config.from_pyfile,type='attribute'\nline_star:107,line_end:107|char_star:15,char_end:37"->"from_pyfile,type='identifier'\nline_star:107,line_end:107|char_star:26,char_end:37";
"('missing.cfg', silent=True),type='argument_list'\nline_star:107,line_end:107|char_star:37,char_end:65"[shape="box",fillcolor="white",style=filled];
"app.config.from_pyfile('missing.cfg', silent=True),type='call'\nline_star:107,line_end:107|char_star:15,char_end:65"->"('missing.cfg', silent=True),type='argument_list'\nline_star:107,line_end:107|char_star:37,char_end:65";
"silent=True,type='keyword_argument'\nline_star:107,line_end:107|char_star:53,char_end:64"[shape="box",fillcolor="white",style=filled];
"('missing.cfg', silent=True),type='argument_list'\nline_star:107,line_end:107|char_star:37,char_end:65"->"silent=True,type='keyword_argument'\nline_star:107,line_end:107|char_star:53,char_end:64";
"silent,type='identifier'\nline_star:107,line_end:107|char_star:53,char_end:59"[shape="point",fillcolor="#121013",style=filled];
"silent=True,type='keyword_argument'\nline_star:107,line_end:107|char_star:53,char_end:64"->"silent,type='identifier'\nline_star:107,line_end:107|char_star:53,char_end:59";
"def test_config_missing_file():\n    app = flask.Flask(__name__)\n    with pytest.raises(IOError) as e:\n        app.config.from_file('missing.json', load=json.load)\n    msg = str(e.value)\n    assert msg.startswith(\n        '[Errno 2] Unable to load configuration file (No such file or directory):'\n    )\n    assert msg.endswith('missing.json'')\n    assert not app.config.from_file('missing.json', load=json.load, silent=True),type='function_definition'\nline_star:110,line_end:119|char_star:0,char_end:80"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_config_missing_file():\n    app = flask.Flask(__name__)\n    with pytest.raises(IOError) as e:\n        app.config.from_file('missing.json', load=json.load)\n    msg = str(e.value)\n    assert msg.startswith(\n        '[Errno 2] Unable to load configuration file (No such file or directory):'\n    )\n    assert msg.endswith('missing.json'')\n    assert not app.config.from_file('missing.json', load=json.load, silent=True),type='function_definition'\nline_star:110,line_end:119|char_star:0,char_end:80";
"test_config_missing_file,type='identifier'\nline_star:110,line_end:110|char_star:4,char_end:28"[shape="point",fillcolor="#121013",style=filled];
"def test_config_missing_file():\n    app = flask.Flask(__name__)\n    with pytest.raises(IOError) as e:\n        app.config.from_file('missing.json', load=json.load)\n    msg = str(e.value)\n    assert msg.startswith(\n        '[Errno 2] Unable to load configuration file (No such file or directory):'\n    )\n    assert msg.endswith('missing.json'')\n    assert not app.config.from_file('missing.json', load=json.load, silent=True),type='function_definition'\nline_star:110,line_end:119|char_star:0,char_end:80"->"test_config_missing_file,type='identifier'\nline_star:110,line_end:110|char_star:4,char_end:28";
"type='INFORMATION BLOCK'\nline_star:111,line_end:119|char_star:4,char_end:80"[shape="point",fillcolor="#121013",style=filled];
"def test_config_missing_file():\n    app = flask.Flask(__name__)\n    with pytest.raises(IOError) as e:\n        app.config.from_file('missing.json', load=json.load)\n    msg = str(e.value)\n    assert msg.startswith(\n        '[Errno 2] Unable to load configuration file (No such file or directory):'\n    )\n    assert msg.endswith('missing.json'')\n    assert not app.config.from_file('missing.json', load=json.load, silent=True),type='function_definition'\nline_star:110,line_end:119|char_star:0,char_end:80"->"type='INFORMATION BLOCK'\nline_star:111,line_end:119|char_star:4,char_end:80";
"with pytest.raises(IOError) as e:\n        app.config.from_file('missing.json', load=json.load),type='with_statement'\nline_star:112,line_end:113|char_star:4,char_end:60"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:111,line_end:119|char_star:4,char_end:80"->"with pytest.raises(IOError) as e:\n        app.config.from_file('missing.json', load=json.load),type='with_statement'\nline_star:112,line_end:113|char_star:4,char_end:60";
"pytest.raises(IOError) as e,type='with_clause'\nline_star:112,line_end:112|char_star:9,char_end:36"[shape="box",fillcolor="white",style=filled];
"with pytest.raises(IOError) as e:\n        app.config.from_file('missing.json', load=json.load),type='with_statement'\nline_star:112,line_end:113|char_star:4,char_end:60"->"pytest.raises(IOError) as e,type='with_clause'\nline_star:112,line_end:112|char_star:9,char_end:36";
"type='INFORMATION BLOCK'\nline_star:113,line_end:113|char_star:8,char_end:60"[shape="point",fillcolor="#121013",style=filled];
"with pytest.raises(IOError) as e:\n        app.config.from_file('missing.json', load=json.load),type='with_statement'\nline_star:112,line_end:113|char_star:4,char_end:60"->"type='INFORMATION BLOCK'\nline_star:113,line_end:113|char_star:8,char_end:60";
"assert msg.startswith(\n        '[Errno 2] Unable to load configuration file (No such file or directory):'\n    ),type='assert_statement'\nline_star:115,line_end:117|char_star:4,char_end:5"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:111,line_end:119|char_star:4,char_end:80"->"assert msg.startswith(\n        '[Errno 2] Unable to load configuration file (No such file or directory):'\n    ),type='assert_statement'\nline_star:115,line_end:117|char_star:4,char_end:5";
"msg.startswith(\n        '[Errno 2] Unable to load configuration file (No such file or directory):'\n    ),type='call'\nline_star:115,line_end:117|char_star:11,char_end:5"[shape="box",fillcolor="white",style=filled];
"assert msg.startswith(\n        '[Errno 2] Unable to load configuration file (No such file or directory):'\n    ),type='assert_statement'\nline_star:115,line_end:117|char_star:4,char_end:5"->"msg.startswith(\n        '[Errno 2] Unable to load configuration file (No such file or directory):'\n    ),type='call'\nline_star:115,line_end:117|char_star:11,char_end:5";
"msg.startswith,type='attribute'\nline_star:115,line_end:115|char_star:11,char_end:25"[shape="box",fillcolor="white",style=filled];
"msg.startswith(\n        '[Errno 2] Unable to load configuration file (No such file or directory):'\n    ),type='call'\nline_star:115,line_end:117|char_star:11,char_end:5"->"msg.startswith,type='attribute'\nline_star:115,line_end:115|char_star:11,char_end:25";
"msg,type='identifier'\nline_star:115,line_end:115|char_star:11,char_end:14"[shape="point",fillcolor="#121013",style=filled];
"msg.startswith,type='attribute'\nline_star:115,line_end:115|char_star:11,char_end:25"->"msg,type='identifier'\nline_star:115,line_end:115|char_star:11,char_end:14";
"startswith,type='identifier'\nline_star:115,line_end:115|char_star:15,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"msg.startswith,type='attribute'\nline_star:115,line_end:115|char_star:11,char_end:25"->"startswith,type='identifier'\nline_star:115,line_end:115|char_star:15,char_end:25";
"(\n        '[Errno 2] Unable to load configuration file (No such file or directory):'\n    ),type='argument_list'\nline_star:115,line_end:117|char_star:25,char_end:5"[shape="box",fillcolor="white",style=filled];
"msg.startswith(\n        '[Errno 2] Unable to load configuration file (No such file or directory):'\n    ),type='call'\nline_star:115,line_end:117|char_star:11,char_end:5"->"(\n        '[Errno 2] Unable to load configuration file (No such file or directory):'\n    ),type='argument_list'\nline_star:115,line_end:117|char_star:25,char_end:5";
"assert msg.endswith('missing.json''),type='assert_statement'\nline_star:118,line_end:118|char_star:4,char_end:40"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:111,line_end:119|char_star:4,char_end:80"->"assert msg.endswith('missing.json''),type='assert_statement'\nline_star:118,line_end:118|char_star:4,char_end:40";
"msg.endswith('missing.json''),type='call'\nline_star:118,line_end:118|char_star:11,char_end:40"[shape="box",fillcolor="white",style=filled];
"assert msg.endswith('missing.json''),type='assert_statement'\nline_star:118,line_end:118|char_star:4,char_end:40"->"msg.endswith('missing.json''),type='call'\nline_star:118,line_end:118|char_star:11,char_end:40";
"msg.endswith,type='attribute'\nline_star:118,line_end:118|char_star:11,char_end:23"[shape="box",fillcolor="white",style=filled];
"msg.endswith('missing.json''),type='call'\nline_star:118,line_end:118|char_star:11,char_end:40"->"msg.endswith,type='attribute'\nline_star:118,line_end:118|char_star:11,char_end:23";
"msg,type='identifier'\nline_star:118,line_end:118|char_star:11,char_end:14"[shape="point",fillcolor="#121013",style=filled];
"msg.endswith,type='attribute'\nline_star:118,line_end:118|char_star:11,char_end:23"->"msg,type='identifier'\nline_star:118,line_end:118|char_star:11,char_end:14";
"endswith,type='identifier'\nline_star:118,line_end:118|char_star:15,char_end:23"[shape="point",fillcolor="#121013",style=filled];
"msg.endswith,type='attribute'\nline_star:118,line_end:118|char_star:11,char_end:23"->"endswith,type='identifier'\nline_star:118,line_end:118|char_star:15,char_end:23";
"('missing.json''),type='argument_list'\nline_star:118,line_end:118|char_star:23,char_end:40"[shape="box",fillcolor="white",style=filled];
"msg.endswith('missing.json''),type='call'\nline_star:118,line_end:118|char_star:11,char_end:40"->"('missing.json''),type='argument_list'\nline_star:118,line_end:118|char_star:23,char_end:40";
"assert not app.config.from_file('missing.json', load=json.load, silent=True),type='assert_statement'\nline_star:119,line_end:119|char_star:4,char_end:80"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:111,line_end:119|char_star:4,char_end:80"->"assert not app.config.from_file('missing.json', load=json.load, silent=True),type='assert_statement'\nline_star:119,line_end:119|char_star:4,char_end:80";
"not app.config.from_file('missing.json', load=json.load, silent=True),type='not_operator'\nline_star:119,line_end:119|char_star:11,char_end:80"[shape="box",fillcolor="white",style=filled];
"assert not app.config.from_file('missing.json', load=json.load, silent=True),type='assert_statement'\nline_star:119,line_end:119|char_star:4,char_end:80"->"not app.config.from_file('missing.json', load=json.load, silent=True),type='not_operator'\nline_star:119,line_end:119|char_star:11,char_end:80";
"app.config.from_file('missing.json', load=json.load, silent=True),type='call'\nline_star:119,line_end:119|char_star:15,char_end:80"[shape="box",fillcolor="white",style=filled];
"not app.config.from_file('missing.json', load=json.load, silent=True),type='not_operator'\nline_star:119,line_end:119|char_star:11,char_end:80"->"app.config.from_file('missing.json', load=json.load, silent=True),type='call'\nline_star:119,line_end:119|char_star:15,char_end:80";
"app.config.from_file,type='attribute'\nline_star:119,line_end:119|char_star:15,char_end:35"[shape="box",fillcolor="white",style=filled];
"app.config.from_file('missing.json', load=json.load, silent=True),type='call'\nline_star:119,line_end:119|char_star:15,char_end:80"->"app.config.from_file,type='attribute'\nline_star:119,line_end:119|char_star:15,char_end:35";
"app.config,type='attribute'\nline_star:119,line_end:119|char_star:15,char_end:25"[shape="box",fillcolor="white",style=filled];
"app.config.from_file,type='attribute'\nline_star:119,line_end:119|char_star:15,char_end:35"->"app.config,type='attribute'\nline_star:119,line_end:119|char_star:15,char_end:25";
"app,type='identifier'\nline_star:119,line_end:119|char_star:15,char_end:18"[shape="point",fillcolor="#121013",style=filled];
"app.config,type='attribute'\nline_star:119,line_end:119|char_star:15,char_end:25"->"app,type='identifier'\nline_star:119,line_end:119|char_star:15,char_end:18";
"config,type='identifier'\nline_star:119,line_end:119|char_star:19,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"app.config,type='attribute'\nline_star:119,line_end:119|char_star:15,char_end:25"->"config,type='identifier'\nline_star:119,line_end:119|char_star:19,char_end:25";
"from_file,type='identifier'\nline_star:119,line_end:119|char_star:26,char_end:35"[shape="point",fillcolor="#121013",style=filled];
"app.config.from_file,type='attribute'\nline_star:119,line_end:119|char_star:15,char_end:35"->"from_file,type='identifier'\nline_star:119,line_end:119|char_star:26,char_end:35";
"('missing.json', load=json.load, silent=True),type='argument_list'\nline_star:119,line_end:119|char_star:35,char_end:80"[shape="box",fillcolor="white",style=filled];
"app.config.from_file('missing.json', load=json.load, silent=True),type='call'\nline_star:119,line_end:119|char_star:15,char_end:80"->"('missing.json', load=json.load, silent=True),type='argument_list'\nline_star:119,line_end:119|char_star:35,char_end:80";
"load=json.load,type='keyword_argument'\nline_star:119,line_end:119|char_star:52,char_end:66"[shape="box",fillcolor="white",style=filled];
"('missing.json', load=json.load, silent=True),type='argument_list'\nline_star:119,line_end:119|char_star:35,char_end:80"->"load=json.load,type='keyword_argument'\nline_star:119,line_end:119|char_star:52,char_end:66";
"load,type='identifier'\nline_star:119,line_end:119|char_star:52,char_end:56"[shape="point",fillcolor="#121013",style=filled];
"load=json.load,type='keyword_argument'\nline_star:119,line_end:119|char_star:52,char_end:66"->"load,type='identifier'\nline_star:119,line_end:119|char_star:52,char_end:56";
"json.load,type='attribute'\nline_star:119,line_end:119|char_star:57,char_end:66"[shape="box",fillcolor="white",style=filled];
"load=json.load,type='keyword_argument'\nline_star:119,line_end:119|char_star:52,char_end:66"->"json.load,type='attribute'\nline_star:119,line_end:119|char_star:57,char_end:66";
"json,type='identifier'\nline_star:119,line_end:119|char_star:57,char_end:61"[shape="point",fillcolor="#121013",style=filled];
"json.load,type='attribute'\nline_star:119,line_end:119|char_star:57,char_end:66"->"json,type='identifier'\nline_star:119,line_end:119|char_star:57,char_end:61";
"load,type='identifier'\nline_star:119,line_end:119|char_star:62,char_end:66"[shape="point",fillcolor="#121013",style=filled];
"json.load,type='attribute'\nline_star:119,line_end:119|char_star:57,char_end:66"->"load,type='identifier'\nline_star:119,line_end:119|char_star:62,char_end:66";
"silent=True,type='keyword_argument'\nline_star:119,line_end:119|char_star:68,char_end:79"[shape="box",fillcolor="white",style=filled];
"('missing.json', load=json.load, silent=True),type='argument_list'\nline_star:119,line_end:119|char_star:35,char_end:80"->"silent=True,type='keyword_argument'\nline_star:119,line_end:119|char_star:68,char_end:79";
"silent,type='identifier'\nline_star:119,line_end:119|char_star:68,char_end:74"[shape="point",fillcolor="#121013",style=filled];
"silent=True,type='keyword_argument'\nline_star:119,line_end:119|char_star:68,char_end:79"->"silent,type='identifier'\nline_star:119,line_end:119|char_star:68,char_end:74";
"def test_custom_config_class():\n    class Config(flask.Config):\n        pass\n\n    class Flask(flask.Flask):\n        config_class = Config\n\n    app = Flask(__name__)\n    assert isinstance(app.config, Config)\n    app.config.from_object(__name__)\n    common_object_test(app),type='function_definition'\nline_star:122,line_end:132|char_star:0,char_end:27"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_custom_config_class():\n    class Config(flask.Config):\n        pass\n\n    class Flask(flask.Flask):\n        config_class = Config\n\n    app = Flask(__name__)\n    assert isinstance(app.config, Config)\n    app.config.from_object(__name__)\n    common_object_test(app),type='function_definition'\nline_star:122,line_end:132|char_star:0,char_end:27";
"test_custom_config_class,type='identifier'\nline_star:122,line_end:122|char_star:4,char_end:28"[shape="point",fillcolor="#121013",style=filled];
"def test_custom_config_class():\n    class Config(flask.Config):\n        pass\n\n    class Flask(flask.Flask):\n        config_class = Config\n\n    app = Flask(__name__)\n    assert isinstance(app.config, Config)\n    app.config.from_object(__name__)\n    common_object_test(app),type='function_definition'\nline_star:122,line_end:132|char_star:0,char_end:27"->"test_custom_config_class,type='identifier'\nline_star:122,line_end:122|char_star:4,char_end:28";
"type='INFORMATION BLOCK'\nline_star:123,line_end:132|char_star:4,char_end:27"[shape="point",fillcolor="#121013",style=filled];
"def test_custom_config_class():\n    class Config(flask.Config):\n        pass\n\n    class Flask(flask.Flask):\n        config_class = Config\n\n    app = Flask(__name__)\n    assert isinstance(app.config, Config)\n    app.config.from_object(__name__)\n    common_object_test(app),type='function_definition'\nline_star:122,line_end:132|char_star:0,char_end:27"->"type='INFORMATION BLOCK'\nline_star:123,line_end:132|char_star:4,char_end:27";
"class Config(flask.Config):\n        pass,type='class_definition'\nline_star:123,line_end:124|char_star:4,char_end:12"[shape="box",fillcolor="#ffdf91",style=filled];
"type='INFORMATION BLOCK'\nline_star:123,line_end:132|char_star:4,char_end:27"->"class Config(flask.Config):\n        pass,type='class_definition'\nline_star:123,line_end:124|char_star:4,char_end:12";
"Config,type='identifier'\nline_star:123,line_end:123|char_star:10,char_end:16"[shape="point",fillcolor="#121013",style=filled];
"class Config(flask.Config):\n        pass,type='class_definition'\nline_star:123,line_end:124|char_star:4,char_end:12"->"Config,type='identifier'\nline_star:123,line_end:123|char_star:10,char_end:16";
"(flask.Config),type='argument_list'\nline_star:123,line_end:123|char_star:16,char_end:30"[shape="box",fillcolor="white",style=filled];
"class Config(flask.Config):\n        pass,type='class_definition'\nline_star:123,line_end:124|char_star:4,char_end:12"->"(flask.Config),type='argument_list'\nline_star:123,line_end:123|char_star:16,char_end:30";
"flask.Config,type='attribute'\nline_star:123,line_end:123|char_star:17,char_end:29"[shape="box",fillcolor="white",style=filled];
"(flask.Config),type='argument_list'\nline_star:123,line_end:123|char_star:16,char_end:30"->"flask.Config,type='attribute'\nline_star:123,line_end:123|char_star:17,char_end:29";
"flask,type='identifier'\nline_star:123,line_end:123|char_star:17,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"flask.Config,type='attribute'\nline_star:123,line_end:123|char_star:17,char_end:29"->"flask,type='identifier'\nline_star:123,line_end:123|char_star:17,char_end:22";
"Config,type='identifier'\nline_star:123,line_end:123|char_star:23,char_end:29"[shape="point",fillcolor="#121013",style=filled];
"flask.Config,type='attribute'\nline_star:123,line_end:123|char_star:17,char_end:29"->"Config,type='identifier'\nline_star:123,line_end:123|char_star:23,char_end:29";
"type='INFORMATION BLOCK'\nline_star:124,line_end:124|char_star:8,char_end:12"[shape="point",fillcolor="#121013",style=filled];
"class Config(flask.Config):\n        pass,type='class_definition'\nline_star:123,line_end:124|char_star:4,char_end:12"->"type='INFORMATION BLOCK'\nline_star:124,line_end:124|char_star:8,char_end:12";
"pass,type='pass_statement'\nline_star:124,line_end:124|char_star:8,char_end:12"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:124,line_end:124|char_star:8,char_end:12"->"pass,type='pass_statement'\nline_star:124,line_end:124|char_star:8,char_end:12";
"pass,type='pass'\nline_star:124,line_end:124|char_star:8,char_end:12"[shape="box",fillcolor="white",style=filled];
"pass,type='pass_statement'\nline_star:124,line_end:124|char_star:8,char_end:12"->"pass,type='pass'\nline_star:124,line_end:124|char_star:8,char_end:12";
"class Flask(flask.Flask):\n        config_class = Config,type='class_definition'\nline_star:126,line_end:127|char_star:4,char_end:29"[shape="box",fillcolor="#ffdf91",style=filled];
"type='INFORMATION BLOCK'\nline_star:123,line_end:132|char_star:4,char_end:27"->"class Flask(flask.Flask):\n        config_class = Config,type='class_definition'\nline_star:126,line_end:127|char_star:4,char_end:29";
"Flask,type='identifier'\nline_star:126,line_end:126|char_star:10,char_end:15"[shape="point",fillcolor="#121013",style=filled];
"class Flask(flask.Flask):\n        config_class = Config,type='class_definition'\nline_star:126,line_end:127|char_star:4,char_end:29"->"Flask,type='identifier'\nline_star:126,line_end:126|char_star:10,char_end:15";
"(flask.Flask),type='argument_list'\nline_star:126,line_end:126|char_star:15,char_end:28"[shape="box",fillcolor="white",style=filled];
"class Flask(flask.Flask):\n        config_class = Config,type='class_definition'\nline_star:126,line_end:127|char_star:4,char_end:29"->"(flask.Flask),type='argument_list'\nline_star:126,line_end:126|char_star:15,char_end:28";
"flask.Flask,type='attribute'\nline_star:126,line_end:126|char_star:16,char_end:27"[shape="box",fillcolor="white",style=filled];
"(flask.Flask),type='argument_list'\nline_star:126,line_end:126|char_star:15,char_end:28"->"flask.Flask,type='attribute'\nline_star:126,line_end:126|char_star:16,char_end:27";
"flask,type='identifier'\nline_star:126,line_end:126|char_star:16,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"flask.Flask,type='attribute'\nline_star:126,line_end:126|char_star:16,char_end:27"->"flask,type='identifier'\nline_star:126,line_end:126|char_star:16,char_end:21";
"Flask,type='identifier'\nline_star:126,line_end:126|char_star:22,char_end:27"[shape="point",fillcolor="#121013",style=filled];
"flask.Flask,type='attribute'\nline_star:126,line_end:126|char_star:16,char_end:27"->"Flask,type='identifier'\nline_star:126,line_end:126|char_star:22,char_end:27";
"type='INFORMATION BLOCK'\nline_star:127,line_end:127|char_star:8,char_end:29"[shape="point",fillcolor="#121013",style=filled];
"class Flask(flask.Flask):\n        config_class = Config,type='class_definition'\nline_star:126,line_end:127|char_star:4,char_end:29"->"type='INFORMATION BLOCK'\nline_star:127,line_end:127|char_star:8,char_end:29";
"assert isinstance(app.config, Config),type='assert_statement'\nline_star:130,line_end:130|char_star:4,char_end:41"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:123,line_end:132|char_star:4,char_end:27"->"assert isinstance(app.config, Config),type='assert_statement'\nline_star:130,line_end:130|char_star:4,char_end:41";
"isinstance(app.config, Config),type='call'\nline_star:130,line_end:130|char_star:11,char_end:41"[shape="box",fillcolor="white",style=filled];
"assert isinstance(app.config, Config),type='assert_statement'\nline_star:130,line_end:130|char_star:4,char_end:41"->"isinstance(app.config, Config),type='call'\nline_star:130,line_end:130|char_star:11,char_end:41";
"isinstance,type='identifier'\nline_star:130,line_end:130|char_star:11,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"isinstance(app.config, Config),type='call'\nline_star:130,line_end:130|char_star:11,char_end:41"->"isinstance,type='identifier'\nline_star:130,line_end:130|char_star:11,char_end:21";
"(app.config, Config),type='argument_list'\nline_star:130,line_end:130|char_star:21,char_end:41"[shape="box",fillcolor="white",style=filled];
"isinstance(app.config, Config),type='call'\nline_star:130,line_end:130|char_star:11,char_end:41"->"(app.config, Config),type='argument_list'\nline_star:130,line_end:130|char_star:21,char_end:41";
"app.config,type='attribute'\nline_star:130,line_end:130|char_star:22,char_end:32"[shape="box",fillcolor="white",style=filled];
"(app.config, Config),type='argument_list'\nline_star:130,line_end:130|char_star:21,char_end:41"->"app.config,type='attribute'\nline_star:130,line_end:130|char_star:22,char_end:32";
"app,type='identifier'\nline_star:130,line_end:130|char_star:22,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"app.config,type='attribute'\nline_star:130,line_end:130|char_star:22,char_end:32"->"app,type='identifier'\nline_star:130,line_end:130|char_star:22,char_end:25";
"config,type='identifier'\nline_star:130,line_end:130|char_star:26,char_end:32"[shape="point",fillcolor="#121013",style=filled];
"app.config,type='attribute'\nline_star:130,line_end:130|char_star:22,char_end:32"->"config,type='identifier'\nline_star:130,line_end:130|char_star:26,char_end:32";
"Config,type='identifier'\nline_star:130,line_end:130|char_star:34,char_end:40"[shape="point",fillcolor="#121013",style=filled];
"(app.config, Config),type='argument_list'\nline_star:130,line_end:130|char_star:21,char_end:41"->"Config,type='identifier'\nline_star:130,line_end:130|char_star:34,char_end:40";
"def test_session_lifetime():\n    app = flask.Flask(__name__)\n    app.config['PERMANENT_SESSION_LIFETIME'] = 42\n    assert app.permanent_session_lifetime.seconds == 42,type='function_definition'\nline_star:135,line_end:138|char_star:0,char_end:55"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_session_lifetime():\n    app = flask.Flask(__name__)\n    app.config['PERMANENT_SESSION_LIFETIME'] = 42\n    assert app.permanent_session_lifetime.seconds == 42,type='function_definition'\nline_star:135,line_end:138|char_star:0,char_end:55";
"test_session_lifetime,type='identifier'\nline_star:135,line_end:135|char_star:4,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"def test_session_lifetime():\n    app = flask.Flask(__name__)\n    app.config['PERMANENT_SESSION_LIFETIME'] = 42\n    assert app.permanent_session_lifetime.seconds == 42,type='function_definition'\nline_star:135,line_end:138|char_star:0,char_end:55"->"test_session_lifetime,type='identifier'\nline_star:135,line_end:135|char_star:4,char_end:25";
"type='INFORMATION BLOCK'\nline_star:136,line_end:138|char_star:4,char_end:55"[shape="point",fillcolor="#121013",style=filled];
"def test_session_lifetime():\n    app = flask.Flask(__name__)\n    app.config['PERMANENT_SESSION_LIFETIME'] = 42\n    assert app.permanent_session_lifetime.seconds == 42,type='function_definition'\nline_star:135,line_end:138|char_star:0,char_end:55"->"type='INFORMATION BLOCK'\nline_star:136,line_end:138|char_star:4,char_end:55";
"assert app.permanent_session_lifetime.seconds == 42,type='assert_statement'\nline_star:138,line_end:138|char_star:4,char_end:55"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:136,line_end:138|char_star:4,char_end:55"->"assert app.permanent_session_lifetime.seconds == 42,type='assert_statement'\nline_star:138,line_end:138|char_star:4,char_end:55";
"app.permanent_session_lifetime.seconds == 42,type='comparison_operator'\nline_star:138,line_end:138|char_star:11,char_end:55"[shape="box",fillcolor="white",style=filled];
"assert app.permanent_session_lifetime.seconds == 42,type='assert_statement'\nline_star:138,line_end:138|char_star:4,char_end:55"->"app.permanent_session_lifetime.seconds == 42,type='comparison_operator'\nline_star:138,line_end:138|char_star:11,char_end:55";
"app.permanent_session_lifetime.seconds,type='attribute'\nline_star:138,line_end:138|char_star:11,char_end:49"[shape="box",fillcolor="white",style=filled];
"app.permanent_session_lifetime.seconds == 42,type='comparison_operator'\nline_star:138,line_end:138|char_star:11,char_end:55"->"app.permanent_session_lifetime.seconds,type='attribute'\nline_star:138,line_end:138|char_star:11,char_end:49";
"app.permanent_session_lifetime,type='attribute'\nline_star:138,line_end:138|char_star:11,char_end:41"[shape="box",fillcolor="white",style=filled];
"app.permanent_session_lifetime.seconds,type='attribute'\nline_star:138,line_end:138|char_star:11,char_end:49"->"app.permanent_session_lifetime,type='attribute'\nline_star:138,line_end:138|char_star:11,char_end:41";
"app,type='identifier'\nline_star:138,line_end:138|char_star:11,char_end:14"[shape="point",fillcolor="#121013",style=filled];
"app.permanent_session_lifetime,type='attribute'\nline_star:138,line_end:138|char_star:11,char_end:41"->"app,type='identifier'\nline_star:138,line_end:138|char_star:11,char_end:14";
"permanent_session_lifetime,type='identifier'\nline_star:138,line_end:138|char_star:15,char_end:41"[shape="point",fillcolor="#121013",style=filled];
"app.permanent_session_lifetime,type='attribute'\nline_star:138,line_end:138|char_star:11,char_end:41"->"permanent_session_lifetime,type='identifier'\nline_star:138,line_end:138|char_star:15,char_end:41";
"seconds,type='identifier'\nline_star:138,line_end:138|char_star:42,char_end:49"[shape="point",fillcolor="#121013",style=filled];
"app.permanent_session_lifetime.seconds,type='attribute'\nline_star:138,line_end:138|char_star:11,char_end:49"->"seconds,type='identifier'\nline_star:138,line_end:138|char_star:42,char_end:49";
"def test_send_file_max_age():\n    app = flask.Flask(__name__)\n    app.config['SEND_FILE_MAX_AGE_DEFAULT'] = 3600\n    assert app.send_file_max_age_default.seconds == 3600\n    app.config['SEND_FILE_MAX_AGE_DEFAULT'] = timedelta(hours=2)\n    assert app.send_file_max_age_default.seconds == 7200,type='function_definition'\nline_star:141,line_end:146|char_star:0,char_end:56"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_send_file_max_age():\n    app = flask.Flask(__name__)\n    app.config['SEND_FILE_MAX_AGE_DEFAULT'] = 3600\n    assert app.send_file_max_age_default.seconds == 3600\n    app.config['SEND_FILE_MAX_AGE_DEFAULT'] = timedelta(hours=2)\n    assert app.send_file_max_age_default.seconds == 7200,type='function_definition'\nline_star:141,line_end:146|char_star:0,char_end:56";
"test_send_file_max_age,type='identifier'\nline_star:141,line_end:141|char_star:4,char_end:26"[shape="point",fillcolor="#121013",style=filled];
"def test_send_file_max_age():\n    app = flask.Flask(__name__)\n    app.config['SEND_FILE_MAX_AGE_DEFAULT'] = 3600\n    assert app.send_file_max_age_default.seconds == 3600\n    app.config['SEND_FILE_MAX_AGE_DEFAULT'] = timedelta(hours=2)\n    assert app.send_file_max_age_default.seconds == 7200,type='function_definition'\nline_star:141,line_end:146|char_star:0,char_end:56"->"test_send_file_max_age,type='identifier'\nline_star:141,line_end:141|char_star:4,char_end:26";
"type='INFORMATION BLOCK'\nline_star:142,line_end:146|char_star:4,char_end:56"[shape="point",fillcolor="#121013",style=filled];
"def test_send_file_max_age():\n    app = flask.Flask(__name__)\n    app.config['SEND_FILE_MAX_AGE_DEFAULT'] = 3600\n    assert app.send_file_max_age_default.seconds == 3600\n    app.config['SEND_FILE_MAX_AGE_DEFAULT'] = timedelta(hours=2)\n    assert app.send_file_max_age_default.seconds == 7200,type='function_definition'\nline_star:141,line_end:146|char_star:0,char_end:56"->"type='INFORMATION BLOCK'\nline_star:142,line_end:146|char_star:4,char_end:56";
"assert app.send_file_max_age_default.seconds == 3600,type='assert_statement'\nline_star:144,line_end:144|char_star:4,char_end:56"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:142,line_end:146|char_star:4,char_end:56"->"assert app.send_file_max_age_default.seconds == 3600,type='assert_statement'\nline_star:144,line_end:144|char_star:4,char_end:56";
"app.send_file_max_age_default.seconds == 3600,type='comparison_operator'\nline_star:144,line_end:144|char_star:11,char_end:56"[shape="box",fillcolor="white",style=filled];
"assert app.send_file_max_age_default.seconds == 3600,type='assert_statement'\nline_star:144,line_end:144|char_star:4,char_end:56"->"app.send_file_max_age_default.seconds == 3600,type='comparison_operator'\nline_star:144,line_end:144|char_star:11,char_end:56";
"app.send_file_max_age_default.seconds,type='attribute'\nline_star:144,line_end:144|char_star:11,char_end:48"[shape="box",fillcolor="white",style=filled];
"app.send_file_max_age_default.seconds == 3600,type='comparison_operator'\nline_star:144,line_end:144|char_star:11,char_end:56"->"app.send_file_max_age_default.seconds,type='attribute'\nline_star:144,line_end:144|char_star:11,char_end:48";
"app.send_file_max_age_default,type='attribute'\nline_star:144,line_end:144|char_star:11,char_end:40"[shape="box",fillcolor="white",style=filled];
"app.send_file_max_age_default.seconds,type='attribute'\nline_star:144,line_end:144|char_star:11,char_end:48"->"app.send_file_max_age_default,type='attribute'\nline_star:144,line_end:144|char_star:11,char_end:40";
"app,type='identifier'\nline_star:144,line_end:144|char_star:11,char_end:14"[shape="point",fillcolor="#121013",style=filled];
"app.send_file_max_age_default,type='attribute'\nline_star:144,line_end:144|char_star:11,char_end:40"->"app,type='identifier'\nline_star:144,line_end:144|char_star:11,char_end:14";
"send_file_max_age_default,type='identifier'\nline_star:144,line_end:144|char_star:15,char_end:40"[shape="point",fillcolor="#121013",style=filled];
"app.send_file_max_age_default,type='attribute'\nline_star:144,line_end:144|char_star:11,char_end:40"->"send_file_max_age_default,type='identifier'\nline_star:144,line_end:144|char_star:15,char_end:40";
"seconds,type='identifier'\nline_star:144,line_end:144|char_star:41,char_end:48"[shape="point",fillcolor="#121013",style=filled];
"app.send_file_max_age_default.seconds,type='attribute'\nline_star:144,line_end:144|char_star:11,char_end:48"->"seconds,type='identifier'\nline_star:144,line_end:144|char_star:41,char_end:48";
"assert app.send_file_max_age_default.seconds == 7200,type='assert_statement'\nline_star:146,line_end:146|char_star:4,char_end:56"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:142,line_end:146|char_star:4,char_end:56"->"assert app.send_file_max_age_default.seconds == 7200,type='assert_statement'\nline_star:146,line_end:146|char_star:4,char_end:56";
"app.send_file_max_age_default.seconds == 7200,type='comparison_operator'\nline_star:146,line_end:146|char_star:11,char_end:56"[shape="box",fillcolor="white",style=filled];
"assert app.send_file_max_age_default.seconds == 7200,type='assert_statement'\nline_star:146,line_end:146|char_star:4,char_end:56"->"app.send_file_max_age_default.seconds == 7200,type='comparison_operator'\nline_star:146,line_end:146|char_star:11,char_end:56";
"app.send_file_max_age_default.seconds,type='attribute'\nline_star:146,line_end:146|char_star:11,char_end:48"[shape="box",fillcolor="white",style=filled];
"app.send_file_max_age_default.seconds == 7200,type='comparison_operator'\nline_star:146,line_end:146|char_star:11,char_end:56"->"app.send_file_max_age_default.seconds,type='attribute'\nline_star:146,line_end:146|char_star:11,char_end:48";
"app.send_file_max_age_default,type='attribute'\nline_star:146,line_end:146|char_star:11,char_end:40"[shape="box",fillcolor="white",style=filled];
"app.send_file_max_age_default.seconds,type='attribute'\nline_star:146,line_end:146|char_star:11,char_end:48"->"app.send_file_max_age_default,type='attribute'\nline_star:146,line_end:146|char_star:11,char_end:40";
"app,type='identifier'\nline_star:146,line_end:146|char_star:11,char_end:14"[shape="point",fillcolor="#121013",style=filled];
"app.send_file_max_age_default,type='attribute'\nline_star:146,line_end:146|char_star:11,char_end:40"->"app,type='identifier'\nline_star:146,line_end:146|char_star:11,char_end:14";
"send_file_max_age_default,type='identifier'\nline_star:146,line_end:146|char_star:15,char_end:40"[shape="point",fillcolor="#121013",style=filled];
"app.send_file_max_age_default,type='attribute'\nline_star:146,line_end:146|char_star:11,char_end:40"->"send_file_max_age_default,type='identifier'\nline_star:146,line_end:146|char_star:15,char_end:40";
"seconds,type='identifier'\nline_star:146,line_end:146|char_star:41,char_end:48"[shape="point",fillcolor="#121013",style=filled];
"app.send_file_max_age_default.seconds,type='attribute'\nline_star:146,line_end:146|char_star:11,char_end:48"->"seconds,type='identifier'\nline_star:146,line_end:146|char_star:41,char_end:48";
"def test_get_namespace():\n    app = flask.Flask(__name__)\n    app.config['FOO_OPTION_1'] = 'foo option 1'\n    app.config['FOO_OPTION_2'] = 'foo option 2'\n    app.config['BAR_STUFF_1'] = 'bar stuff 1'\n    app.config['BAR_STUFF_2'] = 'bar stuff 2'\n    foo_options = app.config.get_namespace('FOO_')\n    assert 2 == len(foo_options)\n    assert 'foo option 1' == foo_options['option_1']\n    assert 'foo option 2' == foo_options['option_2']\n    bar_options = app.config.get_namespace('BAR_', lowercase=False)\n    assert 2 == len(bar_options)\n    assert 'bar stuff 1' == bar_options['STUFF_1']\n    assert 'bar stuff 2' == bar_options['STUFF_2']\n    foo_options = app.config.get_namespace('FOO_', trim_namespace=False)\n    assert 2 == len(foo_options)\n    assert 'foo option 1' == foo_options['foo_option_1']\n    assert 'foo option 2' == foo_options['foo_option_2']\n    bar_options = app.config.get_namespace(\n        'BAR_', lowercase=False, trim_namespace=False\n    )\n    assert 2 == len(bar_options)\n    assert 'bar stuff 1' == bar_options['BAR_STUFF_1']\n    assert 'bar stuff 2' == bar_options['BAR_STUFF_2'],type='function_definition'\nline_star:149,line_end:172|char_star:0,char_end:54"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_get_namespace():\n    app = flask.Flask(__name__)\n    app.config['FOO_OPTION_1'] = 'foo option 1'\n    app.config['FOO_OPTION_2'] = 'foo option 2'\n    app.config['BAR_STUFF_1'] = 'bar stuff 1'\n    app.config['BAR_STUFF_2'] = 'bar stuff 2'\n    foo_options = app.config.get_namespace('FOO_')\n    assert 2 == len(foo_options)\n    assert 'foo option 1' == foo_options['option_1']\n    assert 'foo option 2' == foo_options['option_2']\n    bar_options = app.config.get_namespace('BAR_', lowercase=False)\n    assert 2 == len(bar_options)\n    assert 'bar stuff 1' == bar_options['STUFF_1']\n    assert 'bar stuff 2' == bar_options['STUFF_2']\n    foo_options = app.config.get_namespace('FOO_', trim_namespace=False)\n    assert 2 == len(foo_options)\n    assert 'foo option 1' == foo_options['foo_option_1']\n    assert 'foo option 2' == foo_options['foo_option_2']\n    bar_options = app.config.get_namespace(\n        'BAR_', lowercase=False, trim_namespace=False\n    )\n    assert 2 == len(bar_options)\n    assert 'bar stuff 1' == bar_options['BAR_STUFF_1']\n    assert 'bar stuff 2' == bar_options['BAR_STUFF_2'],type='function_definition'\nline_star:149,line_end:172|char_star:0,char_end:54";
"test_get_namespace,type='identifier'\nline_star:149,line_end:149|char_star:4,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"def test_get_namespace():\n    app = flask.Flask(__name__)\n    app.config['FOO_OPTION_1'] = 'foo option 1'\n    app.config['FOO_OPTION_2'] = 'foo option 2'\n    app.config['BAR_STUFF_1'] = 'bar stuff 1'\n    app.config['BAR_STUFF_2'] = 'bar stuff 2'\n    foo_options = app.config.get_namespace('FOO_')\n    assert 2 == len(foo_options)\n    assert 'foo option 1' == foo_options['option_1']\n    assert 'foo option 2' == foo_options['option_2']\n    bar_options = app.config.get_namespace('BAR_', lowercase=False)\n    assert 2 == len(bar_options)\n    assert 'bar stuff 1' == bar_options['STUFF_1']\n    assert 'bar stuff 2' == bar_options['STUFF_2']\n    foo_options = app.config.get_namespace('FOO_', trim_namespace=False)\n    assert 2 == len(foo_options)\n    assert 'foo option 1' == foo_options['foo_option_1']\n    assert 'foo option 2' == foo_options['foo_option_2']\n    bar_options = app.config.get_namespace(\n        'BAR_', lowercase=False, trim_namespace=False\n    )\n    assert 2 == len(bar_options)\n    assert 'bar stuff 1' == bar_options['BAR_STUFF_1']\n    assert 'bar stuff 2' == bar_options['BAR_STUFF_2'],type='function_definition'\nline_star:149,line_end:172|char_star:0,char_end:54"->"test_get_namespace,type='identifier'\nline_star:149,line_end:149|char_star:4,char_end:22";
"type='INFORMATION BLOCK'\nline_star:150,line_end:172|char_star:4,char_end:54"[shape="point",fillcolor="#121013",style=filled];
"def test_get_namespace():\n    app = flask.Flask(__name__)\n    app.config['FOO_OPTION_1'] = 'foo option 1'\n    app.config['FOO_OPTION_2'] = 'foo option 2'\n    app.config['BAR_STUFF_1'] = 'bar stuff 1'\n    app.config['BAR_STUFF_2'] = 'bar stuff 2'\n    foo_options = app.config.get_namespace('FOO_')\n    assert 2 == len(foo_options)\n    assert 'foo option 1' == foo_options['option_1']\n    assert 'foo option 2' == foo_options['option_2']\n    bar_options = app.config.get_namespace('BAR_', lowercase=False)\n    assert 2 == len(bar_options)\n    assert 'bar stuff 1' == bar_options['STUFF_1']\n    assert 'bar stuff 2' == bar_options['STUFF_2']\n    foo_options = app.config.get_namespace('FOO_', trim_namespace=False)\n    assert 2 == len(foo_options)\n    assert 'foo option 1' == foo_options['foo_option_1']\n    assert 'foo option 2' == foo_options['foo_option_2']\n    bar_options = app.config.get_namespace(\n        'BAR_', lowercase=False, trim_namespace=False\n    )\n    assert 2 == len(bar_options)\n    assert 'bar stuff 1' == bar_options['BAR_STUFF_1']\n    assert 'bar stuff 2' == bar_options['BAR_STUFF_2'],type='function_definition'\nline_star:149,line_end:172|char_star:0,char_end:54"->"type='INFORMATION BLOCK'\nline_star:150,line_end:172|char_star:4,char_end:54";
"assert 2 == len(foo_options),type='assert_statement'\nline_star:156,line_end:156|char_star:4,char_end:32"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:150,line_end:172|char_star:4,char_end:54"->"assert 2 == len(foo_options),type='assert_statement'\nline_star:156,line_end:156|char_star:4,char_end:32";
"2 == len(foo_options),type='comparison_operator'\nline_star:156,line_end:156|char_star:11,char_end:32"[shape="box",fillcolor="white",style=filled];
"assert 2 == len(foo_options),type='assert_statement'\nline_star:156,line_end:156|char_star:4,char_end:32"->"2 == len(foo_options),type='comparison_operator'\nline_star:156,line_end:156|char_star:11,char_end:32";
"len(foo_options),type='call'\nline_star:156,line_end:156|char_star:16,char_end:32"[shape="box",fillcolor="white",style=filled];
"2 == len(foo_options),type='comparison_operator'\nline_star:156,line_end:156|char_star:11,char_end:32"->"len(foo_options),type='call'\nline_star:156,line_end:156|char_star:16,char_end:32";
"len,type='identifier'\nline_star:156,line_end:156|char_star:16,char_end:19"[shape="point",fillcolor="#121013",style=filled];
"len(foo_options),type='call'\nline_star:156,line_end:156|char_star:16,char_end:32"->"len,type='identifier'\nline_star:156,line_end:156|char_star:16,char_end:19";
"(foo_options),type='argument_list'\nline_star:156,line_end:156|char_star:19,char_end:32"[shape="box",fillcolor="white",style=filled];
"len(foo_options),type='call'\nline_star:156,line_end:156|char_star:16,char_end:32"->"(foo_options),type='argument_list'\nline_star:156,line_end:156|char_star:19,char_end:32";
"foo_options,type='identifier'\nline_star:156,line_end:156|char_star:20,char_end:31"[shape="point",fillcolor="#121013",style=filled];
"(foo_options),type='argument_list'\nline_star:156,line_end:156|char_star:19,char_end:32"->"foo_options,type='identifier'\nline_star:156,line_end:156|char_star:20,char_end:31";
"assert 'foo option 1' == foo_options['option_1'],type='assert_statement'\nline_star:157,line_end:157|char_star:4,char_end:52"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:150,line_end:172|char_star:4,char_end:54"->"assert 'foo option 1' == foo_options['option_1'],type='assert_statement'\nline_star:157,line_end:157|char_star:4,char_end:52";
"'foo option 1' == foo_options['option_1'],type='comparison_operator'\nline_star:157,line_end:157|char_star:11,char_end:52"[shape="box",fillcolor="white",style=filled];
"assert 'foo option 1' == foo_options['option_1'],type='assert_statement'\nline_star:157,line_end:157|char_star:4,char_end:52"->"'foo option 1' == foo_options['option_1'],type='comparison_operator'\nline_star:157,line_end:157|char_star:11,char_end:52";
"foo_options['option_1'],type='subscript'\nline_star:157,line_end:157|char_star:29,char_end:52"[shape="box",fillcolor="white",style=filled];
"'foo option 1' == foo_options['option_1'],type='comparison_operator'\nline_star:157,line_end:157|char_star:11,char_end:52"->"foo_options['option_1'],type='subscript'\nline_star:157,line_end:157|char_star:29,char_end:52";
"foo_options,type='identifier'\nline_star:157,line_end:157|char_star:29,char_end:40"[shape="point",fillcolor="#121013",style=filled];
"foo_options['option_1'],type='subscript'\nline_star:157,line_end:157|char_star:29,char_end:52"->"foo_options,type='identifier'\nline_star:157,line_end:157|char_star:29,char_end:40";
"assert 'foo option 2' == foo_options['option_2'],type='assert_statement'\nline_star:158,line_end:158|char_star:4,char_end:52"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:150,line_end:172|char_star:4,char_end:54"->"assert 'foo option 2' == foo_options['option_2'],type='assert_statement'\nline_star:158,line_end:158|char_star:4,char_end:52";
"'foo option 2' == foo_options['option_2'],type='comparison_operator'\nline_star:158,line_end:158|char_star:11,char_end:52"[shape="box",fillcolor="white",style=filled];
"assert 'foo option 2' == foo_options['option_2'],type='assert_statement'\nline_star:158,line_end:158|char_star:4,char_end:52"->"'foo option 2' == foo_options['option_2'],type='comparison_operator'\nline_star:158,line_end:158|char_star:11,char_end:52";
"foo_options['option_2'],type='subscript'\nline_star:158,line_end:158|char_star:29,char_end:52"[shape="box",fillcolor="white",style=filled];
"'foo option 2' == foo_options['option_2'],type='comparison_operator'\nline_star:158,line_end:158|char_star:11,char_end:52"->"foo_options['option_2'],type='subscript'\nline_star:158,line_end:158|char_star:29,char_end:52";
"foo_options,type='identifier'\nline_star:158,line_end:158|char_star:29,char_end:40"[shape="point",fillcolor="#121013",style=filled];
"foo_options['option_2'],type='subscript'\nline_star:158,line_end:158|char_star:29,char_end:52"->"foo_options,type='identifier'\nline_star:158,line_end:158|char_star:29,char_end:40";
"assert 2 == len(bar_options),type='assert_statement'\nline_star:160,line_end:160|char_star:4,char_end:32"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:150,line_end:172|char_star:4,char_end:54"->"assert 2 == len(bar_options),type='assert_statement'\nline_star:160,line_end:160|char_star:4,char_end:32";
"2 == len(bar_options),type='comparison_operator'\nline_star:160,line_end:160|char_star:11,char_end:32"[shape="box",fillcolor="white",style=filled];
"assert 2 == len(bar_options),type='assert_statement'\nline_star:160,line_end:160|char_star:4,char_end:32"->"2 == len(bar_options),type='comparison_operator'\nline_star:160,line_end:160|char_star:11,char_end:32";
"len(bar_options),type='call'\nline_star:160,line_end:160|char_star:16,char_end:32"[shape="box",fillcolor="white",style=filled];
"2 == len(bar_options),type='comparison_operator'\nline_star:160,line_end:160|char_star:11,char_end:32"->"len(bar_options),type='call'\nline_star:160,line_end:160|char_star:16,char_end:32";
"len,type='identifier'\nline_star:160,line_end:160|char_star:16,char_end:19"[shape="point",fillcolor="#121013",style=filled];
"len(bar_options),type='call'\nline_star:160,line_end:160|char_star:16,char_end:32"->"len,type='identifier'\nline_star:160,line_end:160|char_star:16,char_end:19";
"(bar_options),type='argument_list'\nline_star:160,line_end:160|char_star:19,char_end:32"[shape="box",fillcolor="white",style=filled];
"len(bar_options),type='call'\nline_star:160,line_end:160|char_star:16,char_end:32"->"(bar_options),type='argument_list'\nline_star:160,line_end:160|char_star:19,char_end:32";
"bar_options,type='identifier'\nline_star:160,line_end:160|char_star:20,char_end:31"[shape="point",fillcolor="#121013",style=filled];
"(bar_options),type='argument_list'\nline_star:160,line_end:160|char_star:19,char_end:32"->"bar_options,type='identifier'\nline_star:160,line_end:160|char_star:20,char_end:31";
"assert 'bar stuff 1' == bar_options['STUFF_1'],type='assert_statement'\nline_star:161,line_end:161|char_star:4,char_end:50"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:150,line_end:172|char_star:4,char_end:54"->"assert 'bar stuff 1' == bar_options['STUFF_1'],type='assert_statement'\nline_star:161,line_end:161|char_star:4,char_end:50";
"'bar stuff 1' == bar_options['STUFF_1'],type='comparison_operator'\nline_star:161,line_end:161|char_star:11,char_end:50"[shape="box",fillcolor="white",style=filled];
"assert 'bar stuff 1' == bar_options['STUFF_1'],type='assert_statement'\nline_star:161,line_end:161|char_star:4,char_end:50"->"'bar stuff 1' == bar_options['STUFF_1'],type='comparison_operator'\nline_star:161,line_end:161|char_star:11,char_end:50";
"bar_options['STUFF_1'],type='subscript'\nline_star:161,line_end:161|char_star:28,char_end:50"[shape="box",fillcolor="white",style=filled];
"'bar stuff 1' == bar_options['STUFF_1'],type='comparison_operator'\nline_star:161,line_end:161|char_star:11,char_end:50"->"bar_options['STUFF_1'],type='subscript'\nline_star:161,line_end:161|char_star:28,char_end:50";
"bar_options,type='identifier'\nline_star:161,line_end:161|char_star:28,char_end:39"[shape="point",fillcolor="#121013",style=filled];
"bar_options['STUFF_1'],type='subscript'\nline_star:161,line_end:161|char_star:28,char_end:50"->"bar_options,type='identifier'\nline_star:161,line_end:161|char_star:28,char_end:39";
"assert 'bar stuff 2' == bar_options['STUFF_2'],type='assert_statement'\nline_star:162,line_end:162|char_star:4,char_end:50"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:150,line_end:172|char_star:4,char_end:54"->"assert 'bar stuff 2' == bar_options['STUFF_2'],type='assert_statement'\nline_star:162,line_end:162|char_star:4,char_end:50";
"'bar stuff 2' == bar_options['STUFF_2'],type='comparison_operator'\nline_star:162,line_end:162|char_star:11,char_end:50"[shape="box",fillcolor="white",style=filled];
"assert 'bar stuff 2' == bar_options['STUFF_2'],type='assert_statement'\nline_star:162,line_end:162|char_star:4,char_end:50"->"'bar stuff 2' == bar_options['STUFF_2'],type='comparison_operator'\nline_star:162,line_end:162|char_star:11,char_end:50";
"bar_options['STUFF_2'],type='subscript'\nline_star:162,line_end:162|char_star:28,char_end:50"[shape="box",fillcolor="white",style=filled];
"'bar stuff 2' == bar_options['STUFF_2'],type='comparison_operator'\nline_star:162,line_end:162|char_star:11,char_end:50"->"bar_options['STUFF_2'],type='subscript'\nline_star:162,line_end:162|char_star:28,char_end:50";
"bar_options,type='identifier'\nline_star:162,line_end:162|char_star:28,char_end:39"[shape="point",fillcolor="#121013",style=filled];
"bar_options['STUFF_2'],type='subscript'\nline_star:162,line_end:162|char_star:28,char_end:50"->"bar_options,type='identifier'\nline_star:162,line_end:162|char_star:28,char_end:39";
"assert 2 == len(foo_options),type='assert_statement'\nline_star:164,line_end:164|char_star:4,char_end:32"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:150,line_end:172|char_star:4,char_end:54"->"assert 2 == len(foo_options),type='assert_statement'\nline_star:164,line_end:164|char_star:4,char_end:32";
"2 == len(foo_options),type='comparison_operator'\nline_star:164,line_end:164|char_star:11,char_end:32"[shape="box",fillcolor="white",style=filled];
"assert 2 == len(foo_options),type='assert_statement'\nline_star:164,line_end:164|char_star:4,char_end:32"->"2 == len(foo_options),type='comparison_operator'\nline_star:164,line_end:164|char_star:11,char_end:32";
"len(foo_options),type='call'\nline_star:164,line_end:164|char_star:16,char_end:32"[shape="box",fillcolor="white",style=filled];
"2 == len(foo_options),type='comparison_operator'\nline_star:164,line_end:164|char_star:11,char_end:32"->"len(foo_options),type='call'\nline_star:164,line_end:164|char_star:16,char_end:32";
"len,type='identifier'\nline_star:164,line_end:164|char_star:16,char_end:19"[shape="point",fillcolor="#121013",style=filled];
"len(foo_options),type='call'\nline_star:164,line_end:164|char_star:16,char_end:32"->"len,type='identifier'\nline_star:164,line_end:164|char_star:16,char_end:19";
"(foo_options),type='argument_list'\nline_star:164,line_end:164|char_star:19,char_end:32"[shape="box",fillcolor="white",style=filled];
"len(foo_options),type='call'\nline_star:164,line_end:164|char_star:16,char_end:32"->"(foo_options),type='argument_list'\nline_star:164,line_end:164|char_star:19,char_end:32";
"foo_options,type='identifier'\nline_star:164,line_end:164|char_star:20,char_end:31"[shape="point",fillcolor="#121013",style=filled];
"(foo_options),type='argument_list'\nline_star:164,line_end:164|char_star:19,char_end:32"->"foo_options,type='identifier'\nline_star:164,line_end:164|char_star:20,char_end:31";
"assert 'foo option 1' == foo_options['foo_option_1'],type='assert_statement'\nline_star:165,line_end:165|char_star:4,char_end:56"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:150,line_end:172|char_star:4,char_end:54"->"assert 'foo option 1' == foo_options['foo_option_1'],type='assert_statement'\nline_star:165,line_end:165|char_star:4,char_end:56";
"'foo option 1' == foo_options['foo_option_1'],type='comparison_operator'\nline_star:165,line_end:165|char_star:11,char_end:56"[shape="box",fillcolor="white",style=filled];
"assert 'foo option 1' == foo_options['foo_option_1'],type='assert_statement'\nline_star:165,line_end:165|char_star:4,char_end:56"->"'foo option 1' == foo_options['foo_option_1'],type='comparison_operator'\nline_star:165,line_end:165|char_star:11,char_end:56";
"foo_options['foo_option_1'],type='subscript'\nline_star:165,line_end:165|char_star:29,char_end:56"[shape="box",fillcolor="white",style=filled];
"'foo option 1' == foo_options['foo_option_1'],type='comparison_operator'\nline_star:165,line_end:165|char_star:11,char_end:56"->"foo_options['foo_option_1'],type='subscript'\nline_star:165,line_end:165|char_star:29,char_end:56";
"foo_options,type='identifier'\nline_star:165,line_end:165|char_star:29,char_end:40"[shape="point",fillcolor="#121013",style=filled];
"foo_options['foo_option_1'],type='subscript'\nline_star:165,line_end:165|char_star:29,char_end:56"->"foo_options,type='identifier'\nline_star:165,line_end:165|char_star:29,char_end:40";
"assert 'foo option 2' == foo_options['foo_option_2'],type='assert_statement'\nline_star:166,line_end:166|char_star:4,char_end:56"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:150,line_end:172|char_star:4,char_end:54"->"assert 'foo option 2' == foo_options['foo_option_2'],type='assert_statement'\nline_star:166,line_end:166|char_star:4,char_end:56";
"'foo option 2' == foo_options['foo_option_2'],type='comparison_operator'\nline_star:166,line_end:166|char_star:11,char_end:56"[shape="box",fillcolor="white",style=filled];
"assert 'foo option 2' == foo_options['foo_option_2'],type='assert_statement'\nline_star:166,line_end:166|char_star:4,char_end:56"->"'foo option 2' == foo_options['foo_option_2'],type='comparison_operator'\nline_star:166,line_end:166|char_star:11,char_end:56";
"foo_options['foo_option_2'],type='subscript'\nline_star:166,line_end:166|char_star:29,char_end:56"[shape="box",fillcolor="white",style=filled];
"'foo option 2' == foo_options['foo_option_2'],type='comparison_operator'\nline_star:166,line_end:166|char_star:11,char_end:56"->"foo_options['foo_option_2'],type='subscript'\nline_star:166,line_end:166|char_star:29,char_end:56";
"foo_options,type='identifier'\nline_star:166,line_end:166|char_star:29,char_end:40"[shape="point",fillcolor="#121013",style=filled];
"foo_options['foo_option_2'],type='subscript'\nline_star:166,line_end:166|char_star:29,char_end:56"->"foo_options,type='identifier'\nline_star:166,line_end:166|char_star:29,char_end:40";
"assert 2 == len(bar_options),type='assert_statement'\nline_star:170,line_end:170|char_star:4,char_end:32"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:150,line_end:172|char_star:4,char_end:54"->"assert 2 == len(bar_options),type='assert_statement'\nline_star:170,line_end:170|char_star:4,char_end:32";
"2 == len(bar_options),type='comparison_operator'\nline_star:170,line_end:170|char_star:11,char_end:32"[shape="box",fillcolor="white",style=filled];
"assert 2 == len(bar_options),type='assert_statement'\nline_star:170,line_end:170|char_star:4,char_end:32"->"2 == len(bar_options),type='comparison_operator'\nline_star:170,line_end:170|char_star:11,char_end:32";
"len(bar_options),type='call'\nline_star:170,line_end:170|char_star:16,char_end:32"[shape="box",fillcolor="white",style=filled];
"2 == len(bar_options),type='comparison_operator'\nline_star:170,line_end:170|char_star:11,char_end:32"->"len(bar_options),type='call'\nline_star:170,line_end:170|char_star:16,char_end:32";
"len,type='identifier'\nline_star:170,line_end:170|char_star:16,char_end:19"[shape="point",fillcolor="#121013",style=filled];
"len(bar_options),type='call'\nline_star:170,line_end:170|char_star:16,char_end:32"->"len,type='identifier'\nline_star:170,line_end:170|char_star:16,char_end:19";
"(bar_options),type='argument_list'\nline_star:170,line_end:170|char_star:19,char_end:32"[shape="box",fillcolor="white",style=filled];
"len(bar_options),type='call'\nline_star:170,line_end:170|char_star:16,char_end:32"->"(bar_options),type='argument_list'\nline_star:170,line_end:170|char_star:19,char_end:32";
"bar_options,type='identifier'\nline_star:170,line_end:170|char_star:20,char_end:31"[shape="point",fillcolor="#121013",style=filled];
"(bar_options),type='argument_list'\nline_star:170,line_end:170|char_star:19,char_end:32"->"bar_options,type='identifier'\nline_star:170,line_end:170|char_star:20,char_end:31";
"assert 'bar stuff 1' == bar_options['BAR_STUFF_1'],type='assert_statement'\nline_star:171,line_end:171|char_star:4,char_end:54"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:150,line_end:172|char_star:4,char_end:54"->"assert 'bar stuff 1' == bar_options['BAR_STUFF_1'],type='assert_statement'\nline_star:171,line_end:171|char_star:4,char_end:54";
"'bar stuff 1' == bar_options['BAR_STUFF_1'],type='comparison_operator'\nline_star:171,line_end:171|char_star:11,char_end:54"[shape="box",fillcolor="white",style=filled];
"assert 'bar stuff 1' == bar_options['BAR_STUFF_1'],type='assert_statement'\nline_star:171,line_end:171|char_star:4,char_end:54"->"'bar stuff 1' == bar_options['BAR_STUFF_1'],type='comparison_operator'\nline_star:171,line_end:171|char_star:11,char_end:54";
"bar_options['BAR_STUFF_1'],type='subscript'\nline_star:171,line_end:171|char_star:28,char_end:54"[shape="box",fillcolor="white",style=filled];
"'bar stuff 1' == bar_options['BAR_STUFF_1'],type='comparison_operator'\nline_star:171,line_end:171|char_star:11,char_end:54"->"bar_options['BAR_STUFF_1'],type='subscript'\nline_star:171,line_end:171|char_star:28,char_end:54";
"bar_options,type='identifier'\nline_star:171,line_end:171|char_star:28,char_end:39"[shape="point",fillcolor="#121013",style=filled];
"bar_options['BAR_STUFF_1'],type='subscript'\nline_star:171,line_end:171|char_star:28,char_end:54"->"bar_options,type='identifier'\nline_star:171,line_end:171|char_star:28,char_end:39";
"assert 'bar stuff 2' == bar_options['BAR_STUFF_2'],type='assert_statement'\nline_star:172,line_end:172|char_star:4,char_end:54"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:150,line_end:172|char_star:4,char_end:54"->"assert 'bar stuff 2' == bar_options['BAR_STUFF_2'],type='assert_statement'\nline_star:172,line_end:172|char_star:4,char_end:54";
"'bar stuff 2' == bar_options['BAR_STUFF_2'],type='comparison_operator'\nline_star:172,line_end:172|char_star:11,char_end:54"[shape="box",fillcolor="white",style=filled];
"assert 'bar stuff 2' == bar_options['BAR_STUFF_2'],type='assert_statement'\nline_star:172,line_end:172|char_star:4,char_end:54"->"'bar stuff 2' == bar_options['BAR_STUFF_2'],type='comparison_operator'\nline_star:172,line_end:172|char_star:11,char_end:54";
"bar_options['BAR_STUFF_2'],type='subscript'\nline_star:172,line_end:172|char_star:28,char_end:54"[shape="box",fillcolor="white",style=filled];
"'bar stuff 2' == bar_options['BAR_STUFF_2'],type='comparison_operator'\nline_star:172,line_end:172|char_star:11,char_end:54"->"bar_options['BAR_STUFF_2'],type='subscript'\nline_star:172,line_end:172|char_star:28,char_end:54";
"bar_options,type='identifier'\nline_star:172,line_end:172|char_star:28,char_end:39"[shape="point",fillcolor="#121013",style=filled];
"bar_options['BAR_STUFF_2'],type='subscript'\nline_star:172,line_end:172|char_star:28,char_end:54"->"bar_options,type='identifier'\nline_star:172,line_end:172|char_star:28,char_end:39";
"@pytest.mark.parametrize('encoding', ['utf-8', 'iso-8859-15', 'latin-1'])\ndef test_from_pyfile_weird_encoding(tmpdir, encoding):\n    f = tmpdir.join('my_config.py')\n    f.write_binary(\n        textwrap.dedent(\n            f'''\n            # -*- coding: {encoding} -*-\n            TEST_VALUE = 'föö'\n            '''\n        ).encode(encoding)\n    )\n    app = flask.Flask(__name__)\n    app.config.from_pyfile(str(f))\n    value = app.config['TEST_VALUE']\n    assert value == 'föö',type='decorated_definition'\nline_star:175,line_end:189|char_star:0,char_end:27"[shape="box",fillcolor="#c8c6a7",style=filled];
"MODULE"->"@pytest.mark.parametrize('encoding', ['utf-8', 'iso-8859-15', 'latin-1'])\ndef test_from_pyfile_weird_encoding(tmpdir, encoding):\n    f = tmpdir.join('my_config.py')\n    f.write_binary(\n        textwrap.dedent(\n            f'''\n            # -*- coding: {encoding} -*-\n            TEST_VALUE = 'föö'\n            '''\n        ).encode(encoding)\n    )\n    app = flask.Flask(__name__)\n    app.config.from_pyfile(str(f))\n    value = app.config['TEST_VALUE']\n    assert value == 'föö',type='decorated_definition'\nline_star:175,line_end:189|char_star:0,char_end:27";
"@pytest.mark.parametrize('encoding', ['utf-8', 'iso-8859-15', 'latin-1']),type='decorator'\nline_star:175,line_end:175|char_star:0,char_end:73"[shape="box",fillcolor="white",style=filled];
"@pytest.mark.parametrize('encoding', ['utf-8', 'iso-8859-15', 'latin-1'])\ndef test_from_pyfile_weird_encoding(tmpdir, encoding):\n    f = tmpdir.join('my_config.py')\n    f.write_binary(\n        textwrap.dedent(\n            f'''\n            # -*- coding: {encoding} -*-\n            TEST_VALUE = 'föö'\n            '''\n        ).encode(encoding)\n    )\n    app = flask.Flask(__name__)\n    app.config.from_pyfile(str(f))\n    value = app.config['TEST_VALUE']\n    assert value == 'föö',type='decorated_definition'\nline_star:175,line_end:189|char_star:0,char_end:27"->"@pytest.mark.parametrize('encoding', ['utf-8', 'iso-8859-15', 'latin-1']),type='decorator'\nline_star:175,line_end:175|char_star:0,char_end:73";
"def test_from_pyfile_weird_encoding(tmpdir, encoding):\n    f = tmpdir.join('my_config.py')\n    f.write_binary(\n        textwrap.dedent(\n            f'''\n            # -*- coding: {encoding} -*-\n            TEST_VALUE = 'föö'\n            '''\n        ).encode(encoding)\n    )\n    app = flask.Flask(__name__)\n    app.config.from_pyfile(str(f))\n    value = app.config['TEST_VALUE']\n    assert value == 'föö',type='function_definition'\nline_star:176,line_end:189|char_star:0,char_end:27"[shape="box",fillcolor="#cee6b4",style=filled];
"@pytest.mark.parametrize('encoding', ['utf-8', 'iso-8859-15', 'latin-1'])\ndef test_from_pyfile_weird_encoding(tmpdir, encoding):\n    f = tmpdir.join('my_config.py')\n    f.write_binary(\n        textwrap.dedent(\n            f'''\n            # -*- coding: {encoding} -*-\n            TEST_VALUE = 'föö'\n            '''\n        ).encode(encoding)\n    )\n    app = flask.Flask(__name__)\n    app.config.from_pyfile(str(f))\n    value = app.config['TEST_VALUE']\n    assert value == 'föö',type='decorated_definition'\nline_star:175,line_end:189|char_star:0,char_end:27"->"def test_from_pyfile_weird_encoding(tmpdir, encoding):\n    f = tmpdir.join('my_config.py')\n    f.write_binary(\n        textwrap.dedent(\n            f'''\n            # -*- coding: {encoding} -*-\n            TEST_VALUE = 'föö'\n            '''\n        ).encode(encoding)\n    )\n    app = flask.Flask(__name__)\n    app.config.from_pyfile(str(f))\n    value = app.config['TEST_VALUE']\n    assert value == 'föö',type='function_definition'\nline_star:176,line_end:189|char_star:0,char_end:27";
"test_from_pyfile_weird_encoding,type='identifier'\nline_star:176,line_end:176|char_star:4,char_end:35"[shape="point",fillcolor="#121013",style=filled];
"def test_from_pyfile_weird_encoding(tmpdir, encoding):\n    f = tmpdir.join('my_config.py')\n    f.write_binary(\n        textwrap.dedent(\n            f'''\n            # -*- coding: {encoding} -*-\n            TEST_VALUE = 'föö'\n            '''\n        ).encode(encoding)\n    )\n    app = flask.Flask(__name__)\n    app.config.from_pyfile(str(f))\n    value = app.config['TEST_VALUE']\n    assert value == 'föö',type='function_definition'\nline_star:176,line_end:189|char_star:0,char_end:27"->"test_from_pyfile_weird_encoding,type='identifier'\nline_star:176,line_end:176|char_star:4,char_end:35";
"(tmpdir, encoding),type='parameters'\nline_star:176,line_end:176|char_star:35,char_end:53"[shape="box",fillcolor="white",style=filled];
"def test_from_pyfile_weird_encoding(tmpdir, encoding):\n    f = tmpdir.join('my_config.py')\n    f.write_binary(\n        textwrap.dedent(\n            f'''\n            # -*- coding: {encoding} -*-\n            TEST_VALUE = 'föö'\n            '''\n        ).encode(encoding)\n    )\n    app = flask.Flask(__name__)\n    app.config.from_pyfile(str(f))\n    value = app.config['TEST_VALUE']\n    assert value == 'föö',type='function_definition'\nline_star:176,line_end:189|char_star:0,char_end:27"->"(tmpdir, encoding),type='parameters'\nline_star:176,line_end:176|char_star:35,char_end:53";
"tmpdir,type='identifier'\nline_star:176,line_end:176|char_star:36,char_end:42"[shape="point",fillcolor="#121013",style=filled];
"(tmpdir, encoding),type='parameters'\nline_star:176,line_end:176|char_star:35,char_end:53"->"tmpdir,type='identifier'\nline_star:176,line_end:176|char_star:36,char_end:42";
"encoding,type='identifier'\nline_star:176,line_end:176|char_star:44,char_end:52"[shape="point",fillcolor="#121013",style=filled];
"(tmpdir, encoding),type='parameters'\nline_star:176,line_end:176|char_star:35,char_end:53"->"encoding,type='identifier'\nline_star:176,line_end:176|char_star:44,char_end:52";
"type='INFORMATION BLOCK'\nline_star:177,line_end:189|char_star:4,char_end:27"[shape="point",fillcolor="#121013",style=filled];
"def test_from_pyfile_weird_encoding(tmpdir, encoding):\n    f = tmpdir.join('my_config.py')\n    f.write_binary(\n        textwrap.dedent(\n            f'''\n            # -*- coding: {encoding} -*-\n            TEST_VALUE = 'föö'\n            '''\n        ).encode(encoding)\n    )\n    app = flask.Flask(__name__)\n    app.config.from_pyfile(str(f))\n    value = app.config['TEST_VALUE']\n    assert value == 'föö',type='function_definition'\nline_star:176,line_end:189|char_star:0,char_end:27"->"type='INFORMATION BLOCK'\nline_star:177,line_end:189|char_star:4,char_end:27";
"assert value == 'föö',type='assert_statement'\nline_star:189,line_end:189|char_star:4,char_end:27"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:177,line_end:189|char_star:4,char_end:27"->"assert value == 'föö',type='assert_statement'\nline_star:189,line_end:189|char_star:4,char_end:27";
"value == 'föö',type='comparison_operator'\nline_star:189,line_end:189|char_star:11,char_end:27"[shape="box",fillcolor="white",style=filled];
"assert value == 'föö',type='assert_statement'\nline_star:189,line_end:189|char_star:4,char_end:27"->"value == 'föö',type='comparison_operator'\nline_star:189,line_end:189|char_star:11,char_end:27";
"value,type='identifier'\nline_star:189,line_end:189|char_star:11,char_end:16"[shape="point",fillcolor="#121013",style=filled];
"value == 'föö',type='comparison_operator'\nline_star:189,line_end:189|char_star:11,char_end:27"->"value,type='identifier'\nline_star:189,line_end:189|char_star:11,char_end:16";
"import json\nimport os\nimport textwrap\nfrom datetime import timedelta\nimport pytest\nimport flas"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"import json\nimport os\nimport textwrap\nfrom datetime import timedelta\nimport pytest\nimport flas"
}
