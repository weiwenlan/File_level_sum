digraph G{
rankdir="LR";
"MODULE"[shape="box",fillcolor="white",style=filled];
"from datetime import datetime,type='import_from_statement'\nline_star:0,line_end:0|char_star:0,char_end:29"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"from datetime import datetime,type='import_from_statement'\nline_star:0,line_end:0|char_star:0,char_end:29";
"from uuid import uuid4,type='import_from_statement'\nline_star:1,line_end:1|char_star:0,char_end:22"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"from uuid import uuid4,type='import_from_statement'\nline_star:1,line_end:1|char_star:0,char_end:22";
"import pytest,type='import_statement'\nline_star:3,line_end:3|char_star:0,char_end:13"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"import pytest,type='import_statement'\nline_star:3,line_end:3|char_star:0,char_end:13";
"from flask import Markup,type='import_from_statement'\nline_star:5,line_end:5|char_star:0,char_end:24"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"from flask import Markup,type='import_from_statement'\nline_star:5,line_end:5|char_star:0,char_end:24";
"from flask.json.tag import JSONTag,type='import_from_statement'\nline_star:6,line_end:6|char_star:0,char_end:34"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"from flask.json.tag import JSONTag,type='import_from_statement'\nline_star:6,line_end:6|char_star:0,char_end:34";
"from flask.json.tag import TaggedJSONSerializer,type='import_from_statement'\nline_star:7,line_end:7|char_star:0,char_end:47"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"from flask.json.tag import TaggedJSONSerializer,type='import_from_statement'\nline_star:7,line_end:7|char_star:0,char_end:47";
"@pytest.mark.parametrize(\n    'data',\n    (\n        {' t': (1, 2, 3)},\n        {' t__': b'a'},\n        {' di': ' di'},\n        {'x': (1, 2, 3), 'y': 4},\n        (1, 2, 3),\n        [(1, 2, 3)],\n        b'\xff',\n        Markup('<html>'),\n        uuid4(),\n        datetime.utcnow().replace(microsecond=0),\n    ),\n)\ndef test_dump_load_unchanged(data):\n    s = TaggedJSONSerializer()\n    assert s.loads(s.dumps(data)) == data,type='decorated_definition'\nline_star:10,line_end:27|char_star:0,char_end:41"[shape="box",fillcolor="#c8c6a7",style=filled];
"MODULE"->"@pytest.mark.parametrize(\n    'data',\n    (\n        {' t': (1, 2, 3)},\n        {' t__': b'a'},\n        {' di': ' di'},\n        {'x': (1, 2, 3), 'y': 4},\n        (1, 2, 3),\n        [(1, 2, 3)],\n        b'\xff',\n        Markup('<html>'),\n        uuid4(),\n        datetime.utcnow().replace(microsecond=0),\n    ),\n)\ndef test_dump_load_unchanged(data):\n    s = TaggedJSONSerializer()\n    assert s.loads(s.dumps(data)) == data,type='decorated_definition'\nline_star:10,line_end:27|char_star:0,char_end:41";
"@pytest.mark.parametrize(\n    'data',\n    (\n        {' t': (1, 2, 3)},\n        {' t__': b'a'},\n        {' di': ' di'},\n        {'x': (1, 2, 3), 'y': 4},\n        (1, 2, 3),\n        [(1, 2, 3)],\n        b'\xff',\n        Markup('<html>'),\n        uuid4(),\n        datetime.utcnow().replace(microsecond=0),\n    ),\n),type='decorator'\nline_star:10,line_end:24|char_star:0,char_end:1"[shape="box",fillcolor="white",style=filled];
"@pytest.mark.parametrize(\n    'data',\n    (\n        {' t': (1, 2, 3)},\n        {' t__': b'a'},\n        {' di': ' di'},\n        {'x': (1, 2, 3), 'y': 4},\n        (1, 2, 3),\n        [(1, 2, 3)],\n        b'\xff',\n        Markup('<html>'),\n        uuid4(),\n        datetime.utcnow().replace(microsecond=0),\n    ),\n)\ndef test_dump_load_unchanged(data):\n    s = TaggedJSONSerializer()\n    assert s.loads(s.dumps(data)) == data,type='decorated_definition'\nline_star:10,line_end:27|char_star:0,char_end:41"->"@pytest.mark.parametrize(\n    'data',\n    (\n        {' t': (1, 2, 3)},\n        {' t__': b'a'},\n        {' di': ' di'},\n        {'x': (1, 2, 3), 'y': 4},\n        (1, 2, 3),\n        [(1, 2, 3)],\n        b'\xff',\n        Markup('<html>'),\n        uuid4(),\n        datetime.utcnow().replace(microsecond=0),\n    ),\n),type='decorator'\nline_star:10,line_end:24|char_star:0,char_end:1";
"def test_dump_load_unchanged(data):\n    s = TaggedJSONSerializer()\n    assert s.loads(s.dumps(data)) == data,type='function_definition'\nline_star:25,line_end:27|char_star:0,char_end:41"[shape="box",fillcolor="#cee6b4",style=filled];
"@pytest.mark.parametrize(\n    'data',\n    (\n        {' t': (1, 2, 3)},\n        {' t__': b'a'},\n        {' di': ' di'},\n        {'x': (1, 2, 3), 'y': 4},\n        (1, 2, 3),\n        [(1, 2, 3)],\n        b'\xff',\n        Markup('<html>'),\n        uuid4(),\n        datetime.utcnow().replace(microsecond=0),\n    ),\n)\ndef test_dump_load_unchanged(data):\n    s = TaggedJSONSerializer()\n    assert s.loads(s.dumps(data)) == data,type='decorated_definition'\nline_star:10,line_end:27|char_star:0,char_end:41"->"def test_dump_load_unchanged(data):\n    s = TaggedJSONSerializer()\n    assert s.loads(s.dumps(data)) == data,type='function_definition'\nline_star:25,line_end:27|char_star:0,char_end:41";
"test_dump_load_unchanged,type='identifier'\nline_star:25,line_end:25|char_star:4,char_end:28"[shape="point",fillcolor="#121013",style=filled];
"def test_dump_load_unchanged(data):\n    s = TaggedJSONSerializer()\n    assert s.loads(s.dumps(data)) == data,type='function_definition'\nline_star:25,line_end:27|char_star:0,char_end:41"->"test_dump_load_unchanged,type='identifier'\nline_star:25,line_end:25|char_star:4,char_end:28";
"(data),type='parameters'\nline_star:25,line_end:25|char_star:28,char_end:34"[shape="box",fillcolor="white",style=filled];
"def test_dump_load_unchanged(data):\n    s = TaggedJSONSerializer()\n    assert s.loads(s.dumps(data)) == data,type='function_definition'\nline_star:25,line_end:27|char_star:0,char_end:41"->"(data),type='parameters'\nline_star:25,line_end:25|char_star:28,char_end:34";
"data,type='identifier'\nline_star:25,line_end:25|char_star:29,char_end:33"[shape="point",fillcolor="#121013",style=filled];
"(data),type='parameters'\nline_star:25,line_end:25|char_star:28,char_end:34"->"data,type='identifier'\nline_star:25,line_end:25|char_star:29,char_end:33";
"type='INFORMATION BLOCK'\nline_star:26,line_end:27|char_star:4,char_end:41"[shape="point",fillcolor="#121013",style=filled];
"def test_dump_load_unchanged(data):\n    s = TaggedJSONSerializer()\n    assert s.loads(s.dumps(data)) == data,type='function_definition'\nline_star:25,line_end:27|char_star:0,char_end:41"->"type='INFORMATION BLOCK'\nline_star:26,line_end:27|char_star:4,char_end:41";
"assert s.loads(s.dumps(data)) == data,type='assert_statement'\nline_star:27,line_end:27|char_star:4,char_end:41"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:26,line_end:27|char_star:4,char_end:41"->"assert s.loads(s.dumps(data)) == data,type='assert_statement'\nline_star:27,line_end:27|char_star:4,char_end:41";
"s.loads(s.dumps(data)) == data,type='comparison_operator'\nline_star:27,line_end:27|char_star:11,char_end:41"[shape="box",fillcolor="white",style=filled];
"assert s.loads(s.dumps(data)) == data,type='assert_statement'\nline_star:27,line_end:27|char_star:4,char_end:41"->"s.loads(s.dumps(data)) == data,type='comparison_operator'\nline_star:27,line_end:27|char_star:11,char_end:41";
"s.loads(s.dumps(data)),type='call'\nline_star:27,line_end:27|char_star:11,char_end:33"[shape="box",fillcolor="white",style=filled];
"s.loads(s.dumps(data)) == data,type='comparison_operator'\nline_star:27,line_end:27|char_star:11,char_end:41"->"s.loads(s.dumps(data)),type='call'\nline_star:27,line_end:27|char_star:11,char_end:33";
"s.loads,type='attribute'\nline_star:27,line_end:27|char_star:11,char_end:18"[shape="box",fillcolor="white",style=filled];
"s.loads(s.dumps(data)),type='call'\nline_star:27,line_end:27|char_star:11,char_end:33"->"s.loads,type='attribute'\nline_star:27,line_end:27|char_star:11,char_end:18";
"s,type='identifier'\nline_star:27,line_end:27|char_star:11,char_end:12"[shape="point",fillcolor="#121013",style=filled];
"s.loads,type='attribute'\nline_star:27,line_end:27|char_star:11,char_end:18"->"s,type='identifier'\nline_star:27,line_end:27|char_star:11,char_end:12";
"loads,type='identifier'\nline_star:27,line_end:27|char_star:13,char_end:18"[shape="point",fillcolor="#121013",style=filled];
"s.loads,type='attribute'\nline_star:27,line_end:27|char_star:11,char_end:18"->"loads,type='identifier'\nline_star:27,line_end:27|char_star:13,char_end:18";
"(s.dumps(data)),type='argument_list'\nline_star:27,line_end:27|char_star:18,char_end:33"[shape="box",fillcolor="white",style=filled];
"s.loads(s.dumps(data)),type='call'\nline_star:27,line_end:27|char_star:11,char_end:33"->"(s.dumps(data)),type='argument_list'\nline_star:27,line_end:27|char_star:18,char_end:33";
"s.dumps(data),type='call'\nline_star:27,line_end:27|char_star:19,char_end:32"[shape="box",fillcolor="white",style=filled];
"(s.dumps(data)),type='argument_list'\nline_star:27,line_end:27|char_star:18,char_end:33"->"s.dumps(data),type='call'\nline_star:27,line_end:27|char_star:19,char_end:32";
"s.dumps,type='attribute'\nline_star:27,line_end:27|char_star:19,char_end:26"[shape="box",fillcolor="white",style=filled];
"s.dumps(data),type='call'\nline_star:27,line_end:27|char_star:19,char_end:32"->"s.dumps,type='attribute'\nline_star:27,line_end:27|char_star:19,char_end:26";
"s,type='identifier'\nline_star:27,line_end:27|char_star:19,char_end:20"[shape="point",fillcolor="#121013",style=filled];
"s.dumps,type='attribute'\nline_star:27,line_end:27|char_star:19,char_end:26"->"s,type='identifier'\nline_star:27,line_end:27|char_star:19,char_end:20";
"dumps,type='identifier'\nline_star:27,line_end:27|char_star:21,char_end:26"[shape="point",fillcolor="#121013",style=filled];
"s.dumps,type='attribute'\nline_star:27,line_end:27|char_star:19,char_end:26"->"dumps,type='identifier'\nline_star:27,line_end:27|char_star:21,char_end:26";
"(data),type='argument_list'\nline_star:27,line_end:27|char_star:26,char_end:32"[shape="box",fillcolor="white",style=filled];
"s.dumps(data),type='call'\nline_star:27,line_end:27|char_star:19,char_end:32"->"(data),type='argument_list'\nline_star:27,line_end:27|char_star:26,char_end:32";
"data,type='identifier'\nline_star:27,line_end:27|char_star:27,char_end:31"[shape="point",fillcolor="#121013",style=filled];
"(data),type='argument_list'\nline_star:27,line_end:27|char_star:26,char_end:32"->"data,type='identifier'\nline_star:27,line_end:27|char_star:27,char_end:31";
"data,type='identifier'\nline_star:27,line_end:27|char_star:37,char_end:41"[shape="point",fillcolor="#121013",style=filled];
"s.loads(s.dumps(data)) == data,type='comparison_operator'\nline_star:27,line_end:27|char_star:11,char_end:41"->"data,type='identifier'\nline_star:27,line_end:27|char_star:37,char_end:41";
"def test_duplicate_tag():\n    class TagDict(JSONTag):\n        key = ' d'\n\n    s = TaggedJSONSerializer()\n    pytest.raises(KeyError, s.register, TagDict)\n    s.register(TagDict, force=True, index=0)\n    assert isinstance(s.tags[' d'], TagDict)\n    assert isinstance(s.order[0], TagDict),type='function_definition'\nline_star:30,line_end:38|char_star:0,char_end:42"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_duplicate_tag():\n    class TagDict(JSONTag):\n        key = ' d'\n\n    s = TaggedJSONSerializer()\n    pytest.raises(KeyError, s.register, TagDict)\n    s.register(TagDict, force=True, index=0)\n    assert isinstance(s.tags[' d'], TagDict)\n    assert isinstance(s.order[0], TagDict),type='function_definition'\nline_star:30,line_end:38|char_star:0,char_end:42";
"test_duplicate_tag,type='identifier'\nline_star:30,line_end:30|char_star:4,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"def test_duplicate_tag():\n    class TagDict(JSONTag):\n        key = ' d'\n\n    s = TaggedJSONSerializer()\n    pytest.raises(KeyError, s.register, TagDict)\n    s.register(TagDict, force=True, index=0)\n    assert isinstance(s.tags[' d'], TagDict)\n    assert isinstance(s.order[0], TagDict),type='function_definition'\nline_star:30,line_end:38|char_star:0,char_end:42"->"test_duplicate_tag,type='identifier'\nline_star:30,line_end:30|char_star:4,char_end:22";
"type='INFORMATION BLOCK'\nline_star:31,line_end:38|char_star:4,char_end:42"[shape="point",fillcolor="#121013",style=filled];
"def test_duplicate_tag():\n    class TagDict(JSONTag):\n        key = ' d'\n\n    s = TaggedJSONSerializer()\n    pytest.raises(KeyError, s.register, TagDict)\n    s.register(TagDict, force=True, index=0)\n    assert isinstance(s.tags[' d'], TagDict)\n    assert isinstance(s.order[0], TagDict),type='function_definition'\nline_star:30,line_end:38|char_star:0,char_end:42"->"type='INFORMATION BLOCK'\nline_star:31,line_end:38|char_star:4,char_end:42";
"class TagDict(JSONTag):\n        key = ' d',type='class_definition'\nline_star:31,line_end:32|char_star:4,char_end:18"[shape="box",fillcolor="#ffdf91",style=filled];
"type='INFORMATION BLOCK'\nline_star:31,line_end:38|char_star:4,char_end:42"->"class TagDict(JSONTag):\n        key = ' d',type='class_definition'\nline_star:31,line_end:32|char_star:4,char_end:18";
"TagDict,type='identifier'\nline_star:31,line_end:31|char_star:10,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"class TagDict(JSONTag):\n        key = ' d',type='class_definition'\nline_star:31,line_end:32|char_star:4,char_end:18"->"TagDict,type='identifier'\nline_star:31,line_end:31|char_star:10,char_end:17";
"(JSONTag),type='argument_list'\nline_star:31,line_end:31|char_star:17,char_end:26"[shape="box",fillcolor="white",style=filled];
"class TagDict(JSONTag):\n        key = ' d',type='class_definition'\nline_star:31,line_end:32|char_star:4,char_end:18"->"(JSONTag),type='argument_list'\nline_star:31,line_end:31|char_star:17,char_end:26";
"JSONTag,type='identifier'\nline_star:31,line_end:31|char_star:18,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"(JSONTag),type='argument_list'\nline_star:31,line_end:31|char_star:17,char_end:26"->"JSONTag,type='identifier'\nline_star:31,line_end:31|char_star:18,char_end:25";
"type='INFORMATION BLOCK'\nline_star:32,line_end:32|char_star:8,char_end:18"[shape="point",fillcolor="#121013",style=filled];
"class TagDict(JSONTag):\n        key = ' d',type='class_definition'\nline_star:31,line_end:32|char_star:4,char_end:18"->"type='INFORMATION BLOCK'\nline_star:32,line_end:32|char_star:8,char_end:18";
"assert isinstance(s.tags[' d'], TagDict),type='assert_statement'\nline_star:37,line_end:37|char_star:4,char_end:44"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:31,line_end:38|char_star:4,char_end:42"->"assert isinstance(s.tags[' d'], TagDict),type='assert_statement'\nline_star:37,line_end:37|char_star:4,char_end:44";
"isinstance(s.tags[' d'], TagDict),type='call'\nline_star:37,line_end:37|char_star:11,char_end:44"[shape="box",fillcolor="white",style=filled];
"assert isinstance(s.tags[' d'], TagDict),type='assert_statement'\nline_star:37,line_end:37|char_star:4,char_end:44"->"isinstance(s.tags[' d'], TagDict),type='call'\nline_star:37,line_end:37|char_star:11,char_end:44";
"isinstance,type='identifier'\nline_star:37,line_end:37|char_star:11,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"isinstance(s.tags[' d'], TagDict),type='call'\nline_star:37,line_end:37|char_star:11,char_end:44"->"isinstance,type='identifier'\nline_star:37,line_end:37|char_star:11,char_end:21";
"(s.tags[' d'], TagDict),type='argument_list'\nline_star:37,line_end:37|char_star:21,char_end:44"[shape="box",fillcolor="white",style=filled];
"isinstance(s.tags[' d'], TagDict),type='call'\nline_star:37,line_end:37|char_star:11,char_end:44"->"(s.tags[' d'], TagDict),type='argument_list'\nline_star:37,line_end:37|char_star:21,char_end:44";
"s.tags[' d'],type='subscript'\nline_star:37,line_end:37|char_star:22,char_end:34"[shape="box",fillcolor="white",style=filled];
"(s.tags[' d'], TagDict),type='argument_list'\nline_star:37,line_end:37|char_star:21,char_end:44"->"s.tags[' d'],type='subscript'\nline_star:37,line_end:37|char_star:22,char_end:34";
"s.tags,type='attribute'\nline_star:37,line_end:37|char_star:22,char_end:28"[shape="box",fillcolor="white",style=filled];
"s.tags[' d'],type='subscript'\nline_star:37,line_end:37|char_star:22,char_end:34"->"s.tags,type='attribute'\nline_star:37,line_end:37|char_star:22,char_end:28";
"s,type='identifier'\nline_star:37,line_end:37|char_star:22,char_end:23"[shape="point",fillcolor="#121013",style=filled];
"s.tags,type='attribute'\nline_star:37,line_end:37|char_star:22,char_end:28"->"s,type='identifier'\nline_star:37,line_end:37|char_star:22,char_end:23";
"tags,type='identifier'\nline_star:37,line_end:37|char_star:24,char_end:28"[shape="point",fillcolor="#121013",style=filled];
"s.tags,type='attribute'\nline_star:37,line_end:37|char_star:22,char_end:28"->"tags,type='identifier'\nline_star:37,line_end:37|char_star:24,char_end:28";
"TagDict,type='identifier'\nline_star:37,line_end:37|char_star:36,char_end:43"[shape="point",fillcolor="#121013",style=filled];
"(s.tags[' d'], TagDict),type='argument_list'\nline_star:37,line_end:37|char_star:21,char_end:44"->"TagDict,type='identifier'\nline_star:37,line_end:37|char_star:36,char_end:43";
"assert isinstance(s.order[0], TagDict),type='assert_statement'\nline_star:38,line_end:38|char_star:4,char_end:42"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:31,line_end:38|char_star:4,char_end:42"->"assert isinstance(s.order[0], TagDict),type='assert_statement'\nline_star:38,line_end:38|char_star:4,char_end:42";
"isinstance(s.order[0], TagDict),type='call'\nline_star:38,line_end:38|char_star:11,char_end:42"[shape="box",fillcolor="white",style=filled];
"assert isinstance(s.order[0], TagDict),type='assert_statement'\nline_star:38,line_end:38|char_star:4,char_end:42"->"isinstance(s.order[0], TagDict),type='call'\nline_star:38,line_end:38|char_star:11,char_end:42";
"isinstance,type='identifier'\nline_star:38,line_end:38|char_star:11,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"isinstance(s.order[0], TagDict),type='call'\nline_star:38,line_end:38|char_star:11,char_end:42"->"isinstance,type='identifier'\nline_star:38,line_end:38|char_star:11,char_end:21";
"(s.order[0], TagDict),type='argument_list'\nline_star:38,line_end:38|char_star:21,char_end:42"[shape="box",fillcolor="white",style=filled];
"isinstance(s.order[0], TagDict),type='call'\nline_star:38,line_end:38|char_star:11,char_end:42"->"(s.order[0], TagDict),type='argument_list'\nline_star:38,line_end:38|char_star:21,char_end:42";
"s.order[0],type='subscript'\nline_star:38,line_end:38|char_star:22,char_end:32"[shape="box",fillcolor="white",style=filled];
"(s.order[0], TagDict),type='argument_list'\nline_star:38,line_end:38|char_star:21,char_end:42"->"s.order[0],type='subscript'\nline_star:38,line_end:38|char_star:22,char_end:32";
"s.order,type='attribute'\nline_star:38,line_end:38|char_star:22,char_end:29"[shape="box",fillcolor="white",style=filled];
"s.order[0],type='subscript'\nline_star:38,line_end:38|char_star:22,char_end:32"->"s.order,type='attribute'\nline_star:38,line_end:38|char_star:22,char_end:29";
"s,type='identifier'\nline_star:38,line_end:38|char_star:22,char_end:23"[shape="point",fillcolor="#121013",style=filled];
"s.order,type='attribute'\nline_star:38,line_end:38|char_star:22,char_end:29"->"s,type='identifier'\nline_star:38,line_end:38|char_star:22,char_end:23";
"order,type='identifier'\nline_star:38,line_end:38|char_star:24,char_end:29"[shape="point",fillcolor="#121013",style=filled];
"s.order,type='attribute'\nline_star:38,line_end:38|char_star:22,char_end:29"->"order,type='identifier'\nline_star:38,line_end:38|char_star:24,char_end:29";
"TagDict,type='identifier'\nline_star:38,line_end:38|char_star:34,char_end:41"[shape="point",fillcolor="#121013",style=filled];
"(s.order[0], TagDict),type='argument_list'\nline_star:38,line_end:38|char_star:21,char_end:42"->"TagDict,type='identifier'\nline_star:38,line_end:38|char_star:34,char_end:41";
"def test_custom_tag():\n    class Foo:  # noqa: B903, for Python2 compatibility\n        def __init__(self, data):\n            self.data = data\n\n    class TagFoo(JSONTag):\n        __slots__ = ()\n        key = ' f'\n\n        def check(self, value):\n            return isinstance(value, Foo)\n\n        def to_json(self, value):\n            return self.serializer.tag(value.data)\n\n        def to_python(self, value):\n            return Foo(value)\n\n    s = TaggedJSONSerializer()\n    s.register(TagFoo)\n    assert s.loads(s.dumps(Foo('bar'))).data == 'bar',type='function_definition'\nline_star:41,line_end:61|char_star:0,char_end:53"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_custom_tag():\n    class Foo:  # noqa: B903, for Python2 compatibility\n        def __init__(self, data):\n            self.data = data\n\n    class TagFoo(JSONTag):\n        __slots__ = ()\n        key = ' f'\n\n        def check(self, value):\n            return isinstance(value, Foo)\n\n        def to_json(self, value):\n            return self.serializer.tag(value.data)\n\n        def to_python(self, value):\n            return Foo(value)\n\n    s = TaggedJSONSerializer()\n    s.register(TagFoo)\n    assert s.loads(s.dumps(Foo('bar'))).data == 'bar',type='function_definition'\nline_star:41,line_end:61|char_star:0,char_end:53";
"test_custom_tag,type='identifier'\nline_star:41,line_end:41|char_star:4,char_end:19"[shape="point",fillcolor="#121013",style=filled];
"def test_custom_tag():\n    class Foo:  # noqa: B903, for Python2 compatibility\n        def __init__(self, data):\n            self.data = data\n\n    class TagFoo(JSONTag):\n        __slots__ = ()\n        key = ' f'\n\n        def check(self, value):\n            return isinstance(value, Foo)\n\n        def to_json(self, value):\n            return self.serializer.tag(value.data)\n\n        def to_python(self, value):\n            return Foo(value)\n\n    s = TaggedJSONSerializer()\n    s.register(TagFoo)\n    assert s.loads(s.dumps(Foo('bar'))).data == 'bar',type='function_definition'\nline_star:41,line_end:61|char_star:0,char_end:53"->"test_custom_tag,type='identifier'\nline_star:41,line_end:41|char_star:4,char_end:19";
"type='INFORMATION BLOCK'\nline_star:42,line_end:61|char_star:4,char_end:53"[shape="point",fillcolor="#121013",style=filled];
"def test_custom_tag():\n    class Foo:  # noqa: B903, for Python2 compatibility\n        def __init__(self, data):\n            self.data = data\n\n    class TagFoo(JSONTag):\n        __slots__ = ()\n        key = ' f'\n\n        def check(self, value):\n            return isinstance(value, Foo)\n\n        def to_json(self, value):\n            return self.serializer.tag(value.data)\n\n        def to_python(self, value):\n            return Foo(value)\n\n    s = TaggedJSONSerializer()\n    s.register(TagFoo)\n    assert s.loads(s.dumps(Foo('bar'))).data == 'bar',type='function_definition'\nline_star:41,line_end:61|char_star:0,char_end:53"->"type='INFORMATION BLOCK'\nline_star:42,line_end:61|char_star:4,char_end:53";
"class Foo:  # noqa: B903, for Python2 compatibility\n        def __init__(self, data):\n            self.data = data,type='class_definition'\nline_star:42,line_end:44|char_star:4,char_end:28"[shape="box",fillcolor="#ffdf91",style=filled];
"type='INFORMATION BLOCK'\nline_star:42,line_end:61|char_star:4,char_end:53"->"class Foo:  # noqa: B903, for Python2 compatibility\n        def __init__(self, data):\n            self.data = data,type='class_definition'\nline_star:42,line_end:44|char_star:4,char_end:28";
"Foo,type='identifier'\nline_star:42,line_end:42|char_star:10,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"class Foo:  # noqa: B903, for Python2 compatibility\n        def __init__(self, data):\n            self.data = data,type='class_definition'\nline_star:42,line_end:44|char_star:4,char_end:28"->"Foo,type='identifier'\nline_star:42,line_end:42|char_star:10,char_end:13";
"# noqa: B903, for Python2 compatibility,type='comment'\nline_star:42,line_end:42|char_star:16,char_end:55"[shape="box",fillcolor="#f0c929",style=filled];
"class Foo:  # noqa: B903, for Python2 compatibility\n        def __init__(self, data):\n            self.data = data,type='class_definition'\nline_star:42,line_end:44|char_star:4,char_end:28"->"# noqa: B903, for Python2 compatibility,type='comment'\nline_star:42,line_end:42|char_star:16,char_end:55";
"type='INFORMATION BLOCK'\nline_star:43,line_end:44|char_star:8,char_end:28"[shape="point",fillcolor="#121013",style=filled];
"class Foo:  # noqa: B903, for Python2 compatibility\n        def __init__(self, data):\n            self.data = data,type='class_definition'\nline_star:42,line_end:44|char_star:4,char_end:28"->"type='INFORMATION BLOCK'\nline_star:43,line_end:44|char_star:8,char_end:28";
"def __init__(self, data):\n            self.data = data,type='function_definition'\nline_star:43,line_end:44|char_star:8,char_end:28"[shape="box",fillcolor="#cee6b4",style=filled];
"type='INFORMATION BLOCK'\nline_star:43,line_end:44|char_star:8,char_end:28"->"def __init__(self, data):\n            self.data = data,type='function_definition'\nline_star:43,line_end:44|char_star:8,char_end:28";
"__init__,type='identifier'\nline_star:43,line_end:43|char_star:12,char_end:20"[shape="point",fillcolor="#121013",style=filled];
"def __init__(self, data):\n            self.data = data,type='function_definition'\nline_star:43,line_end:44|char_star:8,char_end:28"->"__init__,type='identifier'\nline_star:43,line_end:43|char_star:12,char_end:20";
"(self, data),type='parameters'\nline_star:43,line_end:43|char_star:20,char_end:32"[shape="box",fillcolor="white",style=filled];
"def __init__(self, data):\n            self.data = data,type='function_definition'\nline_star:43,line_end:44|char_star:8,char_end:28"->"(self, data),type='parameters'\nline_star:43,line_end:43|char_star:20,char_end:32";
"self,type='identifier'\nline_star:43,line_end:43|char_star:21,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"(self, data),type='parameters'\nline_star:43,line_end:43|char_star:20,char_end:32"->"self,type='identifier'\nline_star:43,line_end:43|char_star:21,char_end:25";
"data,type='identifier'\nline_star:43,line_end:43|char_star:27,char_end:31"[shape="point",fillcolor="#121013",style=filled];
"(self, data),type='parameters'\nline_star:43,line_end:43|char_star:20,char_end:32"->"data,type='identifier'\nline_star:43,line_end:43|char_star:27,char_end:31";
"type='INFORMATION BLOCK'\nline_star:44,line_end:44|char_star:12,char_end:28"[shape="point",fillcolor="#121013",style=filled];
"def __init__(self, data):\n            self.data = data,type='function_definition'\nline_star:43,line_end:44|char_star:8,char_end:28"->"type='INFORMATION BLOCK'\nline_star:44,line_end:44|char_star:12,char_end:28";
"class TagFoo(JSONTag):\n        __slots__ = ()\n        key = ' f'\n\n        def check(self, value):\n            return isinstance(value, Foo)\n\n        def to_json(self, value):\n            return self.serializer.tag(value.data)\n\n        def to_python(self, value):\n            return Foo(value),type='class_definition'\nline_star:46,line_end:57|char_star:4,char_end:29"[shape="box",fillcolor="#ffdf91",style=filled];
"type='INFORMATION BLOCK'\nline_star:42,line_end:61|char_star:4,char_end:53"->"class TagFoo(JSONTag):\n        __slots__ = ()\n        key = ' f'\n\n        def check(self, value):\n            return isinstance(value, Foo)\n\n        def to_json(self, value):\n            return self.serializer.tag(value.data)\n\n        def to_python(self, value):\n            return Foo(value),type='class_definition'\nline_star:46,line_end:57|char_star:4,char_end:29";
"TagFoo,type='identifier'\nline_star:46,line_end:46|char_star:10,char_end:16"[shape="point",fillcolor="#121013",style=filled];
"class TagFoo(JSONTag):\n        __slots__ = ()\n        key = ' f'\n\n        def check(self, value):\n            return isinstance(value, Foo)\n\n        def to_json(self, value):\n            return self.serializer.tag(value.data)\n\n        def to_python(self, value):\n            return Foo(value),type='class_definition'\nline_star:46,line_end:57|char_star:4,char_end:29"->"TagFoo,type='identifier'\nline_star:46,line_end:46|char_star:10,char_end:16";
"(JSONTag),type='argument_list'\nline_star:46,line_end:46|char_star:16,char_end:25"[shape="box",fillcolor="white",style=filled];
"class TagFoo(JSONTag):\n        __slots__ = ()\n        key = ' f'\n\n        def check(self, value):\n            return isinstance(value, Foo)\n\n        def to_json(self, value):\n            return self.serializer.tag(value.data)\n\n        def to_python(self, value):\n            return Foo(value),type='class_definition'\nline_star:46,line_end:57|char_star:4,char_end:29"->"(JSONTag),type='argument_list'\nline_star:46,line_end:46|char_star:16,char_end:25";
"JSONTag,type='identifier'\nline_star:46,line_end:46|char_star:17,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"(JSONTag),type='argument_list'\nline_star:46,line_end:46|char_star:16,char_end:25"->"JSONTag,type='identifier'\nline_star:46,line_end:46|char_star:17,char_end:24";
"type='INFORMATION BLOCK'\nline_star:47,line_end:57|char_star:8,char_end:29"[shape="point",fillcolor="#121013",style=filled];
"class TagFoo(JSONTag):\n        __slots__ = ()\n        key = ' f'\n\n        def check(self, value):\n            return isinstance(value, Foo)\n\n        def to_json(self, value):\n            return self.serializer.tag(value.data)\n\n        def to_python(self, value):\n            return Foo(value),type='class_definition'\nline_star:46,line_end:57|char_star:4,char_end:29"->"type='INFORMATION BLOCK'\nline_star:47,line_end:57|char_star:8,char_end:29";
"def check(self, value):\n            return isinstance(value, Foo),type='function_definition'\nline_star:50,line_end:51|char_star:8,char_end:41"[shape="box",fillcolor="#cee6b4",style=filled];
"type='INFORMATION BLOCK'\nline_star:47,line_end:57|char_star:8,char_end:29"->"def check(self, value):\n            return isinstance(value, Foo),type='function_definition'\nline_star:50,line_end:51|char_star:8,char_end:41";
"check,type='identifier'\nline_star:50,line_end:50|char_star:12,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"def check(self, value):\n            return isinstance(value, Foo),type='function_definition'\nline_star:50,line_end:51|char_star:8,char_end:41"->"check,type='identifier'\nline_star:50,line_end:50|char_star:12,char_end:17";
"(self, value),type='parameters'\nline_star:50,line_end:50|char_star:17,char_end:30"[shape="box",fillcolor="white",style=filled];
"def check(self, value):\n            return isinstance(value, Foo),type='function_definition'\nline_star:50,line_end:51|char_star:8,char_end:41"->"(self, value),type='parameters'\nline_star:50,line_end:50|char_star:17,char_end:30";
"self,type='identifier'\nline_star:50,line_end:50|char_star:18,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"(self, value),type='parameters'\nline_star:50,line_end:50|char_star:17,char_end:30"->"self,type='identifier'\nline_star:50,line_end:50|char_star:18,char_end:22";
"value,type='identifier'\nline_star:50,line_end:50|char_star:24,char_end:29"[shape="point",fillcolor="#121013",style=filled];
"(self, value),type='parameters'\nline_star:50,line_end:50|char_star:17,char_end:30"->"value,type='identifier'\nline_star:50,line_end:50|char_star:24,char_end:29";
"type='INFORMATION BLOCK'\nline_star:51,line_end:51|char_star:12,char_end:41"[shape="point",fillcolor="#121013",style=filled];
"def check(self, value):\n            return isinstance(value, Foo),type='function_definition'\nline_star:50,line_end:51|char_star:8,char_end:41"->"type='INFORMATION BLOCK'\nline_star:51,line_end:51|char_star:12,char_end:41";
"return isinstance(value, Foo),type='return_statement'\nline_star:51,line_end:51|char_star:12,char_end:41"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:51,line_end:51|char_star:12,char_end:41"->"return isinstance(value, Foo),type='return_statement'\nline_star:51,line_end:51|char_star:12,char_end:41";
"def to_json(self, value):\n            return self.serializer.tag(value.data),type='function_definition'\nline_star:53,line_end:54|char_star:8,char_end:50"[shape="box",fillcolor="#cee6b4",style=filled];
"type='INFORMATION BLOCK'\nline_star:47,line_end:57|char_star:8,char_end:29"->"def to_json(self, value):\n            return self.serializer.tag(value.data),type='function_definition'\nline_star:53,line_end:54|char_star:8,char_end:50";
"to_json,type='identifier'\nline_star:53,line_end:53|char_star:12,char_end:19"[shape="point",fillcolor="#121013",style=filled];
"def to_json(self, value):\n            return self.serializer.tag(value.data),type='function_definition'\nline_star:53,line_end:54|char_star:8,char_end:50"->"to_json,type='identifier'\nline_star:53,line_end:53|char_star:12,char_end:19";
"(self, value),type='parameters'\nline_star:53,line_end:53|char_star:19,char_end:32"[shape="box",fillcolor="white",style=filled];
"def to_json(self, value):\n            return self.serializer.tag(value.data),type='function_definition'\nline_star:53,line_end:54|char_star:8,char_end:50"->"(self, value),type='parameters'\nline_star:53,line_end:53|char_star:19,char_end:32";
"self,type='identifier'\nline_star:53,line_end:53|char_star:20,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"(self, value),type='parameters'\nline_star:53,line_end:53|char_star:19,char_end:32"->"self,type='identifier'\nline_star:53,line_end:53|char_star:20,char_end:24";
"value,type='identifier'\nline_star:53,line_end:53|char_star:26,char_end:31"[shape="point",fillcolor="#121013",style=filled];
"(self, value),type='parameters'\nline_star:53,line_end:53|char_star:19,char_end:32"->"value,type='identifier'\nline_star:53,line_end:53|char_star:26,char_end:31";
"type='INFORMATION BLOCK'\nline_star:54,line_end:54|char_star:12,char_end:50"[shape="point",fillcolor="#121013",style=filled];
"def to_json(self, value):\n            return self.serializer.tag(value.data),type='function_definition'\nline_star:53,line_end:54|char_star:8,char_end:50"->"type='INFORMATION BLOCK'\nline_star:54,line_end:54|char_star:12,char_end:50";
"return self.serializer.tag(value.data),type='return_statement'\nline_star:54,line_end:54|char_star:12,char_end:50"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:54,line_end:54|char_star:12,char_end:50"->"return self.serializer.tag(value.data),type='return_statement'\nline_star:54,line_end:54|char_star:12,char_end:50";
"def to_python(self, value):\n            return Foo(value),type='function_definition'\nline_star:56,line_end:57|char_star:8,char_end:29"[shape="box",fillcolor="#cee6b4",style=filled];
"type='INFORMATION BLOCK'\nline_star:47,line_end:57|char_star:8,char_end:29"->"def to_python(self, value):\n            return Foo(value),type='function_definition'\nline_star:56,line_end:57|char_star:8,char_end:29";
"to_python,type='identifier'\nline_star:56,line_end:56|char_star:12,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"def to_python(self, value):\n            return Foo(value),type='function_definition'\nline_star:56,line_end:57|char_star:8,char_end:29"->"to_python,type='identifier'\nline_star:56,line_end:56|char_star:12,char_end:21";
"(self, value),type='parameters'\nline_star:56,line_end:56|char_star:21,char_end:34"[shape="box",fillcolor="white",style=filled];
"def to_python(self, value):\n            return Foo(value),type='function_definition'\nline_star:56,line_end:57|char_star:8,char_end:29"->"(self, value),type='parameters'\nline_star:56,line_end:56|char_star:21,char_end:34";
"self,type='identifier'\nline_star:56,line_end:56|char_star:22,char_end:26"[shape="point",fillcolor="#121013",style=filled];
"(self, value),type='parameters'\nline_star:56,line_end:56|char_star:21,char_end:34"->"self,type='identifier'\nline_star:56,line_end:56|char_star:22,char_end:26";
"value,type='identifier'\nline_star:56,line_end:56|char_star:28,char_end:33"[shape="point",fillcolor="#121013",style=filled];
"(self, value),type='parameters'\nline_star:56,line_end:56|char_star:21,char_end:34"->"value,type='identifier'\nline_star:56,line_end:56|char_star:28,char_end:33";
"type='INFORMATION BLOCK'\nline_star:57,line_end:57|char_star:12,char_end:29"[shape="point",fillcolor="#121013",style=filled];
"def to_python(self, value):\n            return Foo(value),type='function_definition'\nline_star:56,line_end:57|char_star:8,char_end:29"->"type='INFORMATION BLOCK'\nline_star:57,line_end:57|char_star:12,char_end:29";
"return Foo(value),type='return_statement'\nline_star:57,line_end:57|char_star:12,char_end:29"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:57,line_end:57|char_star:12,char_end:29"->"return Foo(value),type='return_statement'\nline_star:57,line_end:57|char_star:12,char_end:29";
"assert s.loads(s.dumps(Foo('bar'))).data == 'bar',type='assert_statement'\nline_star:61,line_end:61|char_star:4,char_end:53"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:42,line_end:61|char_star:4,char_end:53"->"assert s.loads(s.dumps(Foo('bar'))).data == 'bar',type='assert_statement'\nline_star:61,line_end:61|char_star:4,char_end:53";
"s.loads(s.dumps(Foo('bar'))).data == 'bar',type='comparison_operator'\nline_star:61,line_end:61|char_star:11,char_end:53"[shape="box",fillcolor="white",style=filled];
"assert s.loads(s.dumps(Foo('bar'))).data == 'bar',type='assert_statement'\nline_star:61,line_end:61|char_star:4,char_end:53"->"s.loads(s.dumps(Foo('bar'))).data == 'bar',type='comparison_operator'\nline_star:61,line_end:61|char_star:11,char_end:53";
"s.loads(s.dumps(Foo('bar'))).data,type='attribute'\nline_star:61,line_end:61|char_star:11,char_end:44"[shape="box",fillcolor="white",style=filled];
"s.loads(s.dumps(Foo('bar'))).data == 'bar',type='comparison_operator'\nline_star:61,line_end:61|char_star:11,char_end:53"->"s.loads(s.dumps(Foo('bar'))).data,type='attribute'\nline_star:61,line_end:61|char_star:11,char_end:44";
"s.loads(s.dumps(Foo('bar'))),type='call'\nline_star:61,line_end:61|char_star:11,char_end:39"[shape="box",fillcolor="white",style=filled];
"s.loads(s.dumps(Foo('bar'))).data,type='attribute'\nline_star:61,line_end:61|char_star:11,char_end:44"->"s.loads(s.dumps(Foo('bar'))),type='call'\nline_star:61,line_end:61|char_star:11,char_end:39";
"s.loads,type='attribute'\nline_star:61,line_end:61|char_star:11,char_end:18"[shape="box",fillcolor="white",style=filled];
"s.loads(s.dumps(Foo('bar'))),type='call'\nline_star:61,line_end:61|char_star:11,char_end:39"->"s.loads,type='attribute'\nline_star:61,line_end:61|char_star:11,char_end:18";
"s,type='identifier'\nline_star:61,line_end:61|char_star:11,char_end:12"[shape="point",fillcolor="#121013",style=filled];
"s.loads,type='attribute'\nline_star:61,line_end:61|char_star:11,char_end:18"->"s,type='identifier'\nline_star:61,line_end:61|char_star:11,char_end:12";
"loads,type='identifier'\nline_star:61,line_end:61|char_star:13,char_end:18"[shape="point",fillcolor="#121013",style=filled];
"s.loads,type='attribute'\nline_star:61,line_end:61|char_star:11,char_end:18"->"loads,type='identifier'\nline_star:61,line_end:61|char_star:13,char_end:18";
"(s.dumps(Foo('bar'))),type='argument_list'\nline_star:61,line_end:61|char_star:18,char_end:39"[shape="box",fillcolor="white",style=filled];
"s.loads(s.dumps(Foo('bar'))),type='call'\nline_star:61,line_end:61|char_star:11,char_end:39"->"(s.dumps(Foo('bar'))),type='argument_list'\nline_star:61,line_end:61|char_star:18,char_end:39";
"s.dumps(Foo('bar')),type='call'\nline_star:61,line_end:61|char_star:19,char_end:38"[shape="box",fillcolor="white",style=filled];
"(s.dumps(Foo('bar'))),type='argument_list'\nline_star:61,line_end:61|char_star:18,char_end:39"->"s.dumps(Foo('bar')),type='call'\nline_star:61,line_end:61|char_star:19,char_end:38";
"s.dumps,type='attribute'\nline_star:61,line_end:61|char_star:19,char_end:26"[shape="box",fillcolor="white",style=filled];
"s.dumps(Foo('bar')),type='call'\nline_star:61,line_end:61|char_star:19,char_end:38"->"s.dumps,type='attribute'\nline_star:61,line_end:61|char_star:19,char_end:26";
"s,type='identifier'\nline_star:61,line_end:61|char_star:19,char_end:20"[shape="point",fillcolor="#121013",style=filled];
"s.dumps,type='attribute'\nline_star:61,line_end:61|char_star:19,char_end:26"->"s,type='identifier'\nline_star:61,line_end:61|char_star:19,char_end:20";
"dumps,type='identifier'\nline_star:61,line_end:61|char_star:21,char_end:26"[shape="point",fillcolor="#121013",style=filled];
"s.dumps,type='attribute'\nline_star:61,line_end:61|char_star:19,char_end:26"->"dumps,type='identifier'\nline_star:61,line_end:61|char_star:21,char_end:26";
"(Foo('bar')),type='argument_list'\nline_star:61,line_end:61|char_star:26,char_end:38"[shape="box",fillcolor="white",style=filled];
"s.dumps(Foo('bar')),type='call'\nline_star:61,line_end:61|char_star:19,char_end:38"->"(Foo('bar')),type='argument_list'\nline_star:61,line_end:61|char_star:26,char_end:38";
"Foo('bar'),type='call'\nline_star:61,line_end:61|char_star:27,char_end:37"[shape="box",fillcolor="white",style=filled];
"(Foo('bar')),type='argument_list'\nline_star:61,line_end:61|char_star:26,char_end:38"->"Foo('bar'),type='call'\nline_star:61,line_end:61|char_star:27,char_end:37";
"Foo,type='identifier'\nline_star:61,line_end:61|char_star:27,char_end:30"[shape="point",fillcolor="#121013",style=filled];
"Foo('bar'),type='call'\nline_star:61,line_end:61|char_star:27,char_end:37"->"Foo,type='identifier'\nline_star:61,line_end:61|char_star:27,char_end:30";
"('bar'),type='argument_list'\nline_star:61,line_end:61|char_star:30,char_end:37"[shape="box",fillcolor="white",style=filled];
"Foo('bar'),type='call'\nline_star:61,line_end:61|char_star:27,char_end:37"->"('bar'),type='argument_list'\nline_star:61,line_end:61|char_star:30,char_end:37";
"data,type='identifier'\nline_star:61,line_end:61|char_star:40,char_end:44"[shape="point",fillcolor="#121013",style=filled];
"s.loads(s.dumps(Foo('bar'))).data,type='attribute'\nline_star:61,line_end:61|char_star:11,char_end:44"->"data,type='identifier'\nline_star:61,line_end:61|char_star:40,char_end:44";
"def test_tag_interface():\n    t = JSONTag(None)\n    pytest.raises(NotImplementedError, t.check, None)\n    pytest.raises(NotImplementedError, t.to_json, None)\n    pytest.raises(NotImplementedError, t.to_python, None),type='function_definition'\nline_star:64,line_end:68|char_star:0,char_end:57"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_tag_interface():\n    t = JSONTag(None)\n    pytest.raises(NotImplementedError, t.check, None)\n    pytest.raises(NotImplementedError, t.to_json, None)\n    pytest.raises(NotImplementedError, t.to_python, None),type='function_definition'\nline_star:64,line_end:68|char_star:0,char_end:57";
"test_tag_interface,type='identifier'\nline_star:64,line_end:64|char_star:4,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"def test_tag_interface():\n    t = JSONTag(None)\n    pytest.raises(NotImplementedError, t.check, None)\n    pytest.raises(NotImplementedError, t.to_json, None)\n    pytest.raises(NotImplementedError, t.to_python, None),type='function_definition'\nline_star:64,line_end:68|char_star:0,char_end:57"->"test_tag_interface,type='identifier'\nline_star:64,line_end:64|char_star:4,char_end:22";
"type='INFORMATION BLOCK'\nline_star:65,line_end:68|char_star:4,char_end:57"[shape="point",fillcolor="#121013",style=filled];
"def test_tag_interface():\n    t = JSONTag(None)\n    pytest.raises(NotImplementedError, t.check, None)\n    pytest.raises(NotImplementedError, t.to_json, None)\n    pytest.raises(NotImplementedError, t.to_python, None),type='function_definition'\nline_star:64,line_end:68|char_star:0,char_end:57"->"type='INFORMATION BLOCK'\nline_star:65,line_end:68|char_star:4,char_end:57";
"def test_tag_order():\n    class Tag1(JSONTag):\n        key = ' 1'\n\n    class Tag2(JSONTag):\n        key = ' 2'\n\n    s = TaggedJSONSerializer()\n\n    s.register(Tag1, index=-1)\n    assert isinstance(s.order[-2], Tag1)\n\n    s.register(Tag2, index=None)\n    assert isinstance(s.order[-1], Tag2),type='function_definition'\nline_star:71,line_end:84|char_star:0,char_end:40"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_tag_order():\n    class Tag1(JSONTag):\n        key = ' 1'\n\n    class Tag2(JSONTag):\n        key = ' 2'\n\n    s = TaggedJSONSerializer()\n\n    s.register(Tag1, index=-1)\n    assert isinstance(s.order[-2], Tag1)\n\n    s.register(Tag2, index=None)\n    assert isinstance(s.order[-1], Tag2),type='function_definition'\nline_star:71,line_end:84|char_star:0,char_end:40";
"test_tag_order,type='identifier'\nline_star:71,line_end:71|char_star:4,char_end:18"[shape="point",fillcolor="#121013",style=filled];
"def test_tag_order():\n    class Tag1(JSONTag):\n        key = ' 1'\n\n    class Tag2(JSONTag):\n        key = ' 2'\n\n    s = TaggedJSONSerializer()\n\n    s.register(Tag1, index=-1)\n    assert isinstance(s.order[-2], Tag1)\n\n    s.register(Tag2, index=None)\n    assert isinstance(s.order[-1], Tag2),type='function_definition'\nline_star:71,line_end:84|char_star:0,char_end:40"->"test_tag_order,type='identifier'\nline_star:71,line_end:71|char_star:4,char_end:18";
"type='INFORMATION BLOCK'\nline_star:72,line_end:84|char_star:4,char_end:40"[shape="point",fillcolor="#121013",style=filled];
"def test_tag_order():\n    class Tag1(JSONTag):\n        key = ' 1'\n\n    class Tag2(JSONTag):\n        key = ' 2'\n\n    s = TaggedJSONSerializer()\n\n    s.register(Tag1, index=-1)\n    assert isinstance(s.order[-2], Tag1)\n\n    s.register(Tag2, index=None)\n    assert isinstance(s.order[-1], Tag2),type='function_definition'\nline_star:71,line_end:84|char_star:0,char_end:40"->"type='INFORMATION BLOCK'\nline_star:72,line_end:84|char_star:4,char_end:40";
"class Tag1(JSONTag):\n        key = ' 1',type='class_definition'\nline_star:72,line_end:73|char_star:4,char_end:18"[shape="box",fillcolor="#ffdf91",style=filled];
"type='INFORMATION BLOCK'\nline_star:72,line_end:84|char_star:4,char_end:40"->"class Tag1(JSONTag):\n        key = ' 1',type='class_definition'\nline_star:72,line_end:73|char_star:4,char_end:18";
"Tag1,type='identifier'\nline_star:72,line_end:72|char_star:10,char_end:14"[shape="point",fillcolor="#121013",style=filled];
"class Tag1(JSONTag):\n        key = ' 1',type='class_definition'\nline_star:72,line_end:73|char_star:4,char_end:18"->"Tag1,type='identifier'\nline_star:72,line_end:72|char_star:10,char_end:14";
"(JSONTag),type='argument_list'\nline_star:72,line_end:72|char_star:14,char_end:23"[shape="box",fillcolor="white",style=filled];
"class Tag1(JSONTag):\n        key = ' 1',type='class_definition'\nline_star:72,line_end:73|char_star:4,char_end:18"->"(JSONTag),type='argument_list'\nline_star:72,line_end:72|char_star:14,char_end:23";
"JSONTag,type='identifier'\nline_star:72,line_end:72|char_star:15,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"(JSONTag),type='argument_list'\nline_star:72,line_end:72|char_star:14,char_end:23"->"JSONTag,type='identifier'\nline_star:72,line_end:72|char_star:15,char_end:22";
"type='INFORMATION BLOCK'\nline_star:73,line_end:73|char_star:8,char_end:18"[shape="point",fillcolor="#121013",style=filled];
"class Tag1(JSONTag):\n        key = ' 1',type='class_definition'\nline_star:72,line_end:73|char_star:4,char_end:18"->"type='INFORMATION BLOCK'\nline_star:73,line_end:73|char_star:8,char_end:18";
"class Tag2(JSONTag):\n        key = ' 2',type='class_definition'\nline_star:75,line_end:76|char_star:4,char_end:18"[shape="box",fillcolor="#ffdf91",style=filled];
"type='INFORMATION BLOCK'\nline_star:72,line_end:84|char_star:4,char_end:40"->"class Tag2(JSONTag):\n        key = ' 2',type='class_definition'\nline_star:75,line_end:76|char_star:4,char_end:18";
"Tag2,type='identifier'\nline_star:75,line_end:75|char_star:10,char_end:14"[shape="point",fillcolor="#121013",style=filled];
"class Tag2(JSONTag):\n        key = ' 2',type='class_definition'\nline_star:75,line_end:76|char_star:4,char_end:18"->"Tag2,type='identifier'\nline_star:75,line_end:75|char_star:10,char_end:14";
"(JSONTag),type='argument_list'\nline_star:75,line_end:75|char_star:14,char_end:23"[shape="box",fillcolor="white",style=filled];
"class Tag2(JSONTag):\n        key = ' 2',type='class_definition'\nline_star:75,line_end:76|char_star:4,char_end:18"->"(JSONTag),type='argument_list'\nline_star:75,line_end:75|char_star:14,char_end:23";
"JSONTag,type='identifier'\nline_star:75,line_end:75|char_star:15,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"(JSONTag),type='argument_list'\nline_star:75,line_end:75|char_star:14,char_end:23"->"JSONTag,type='identifier'\nline_star:75,line_end:75|char_star:15,char_end:22";
"type='INFORMATION BLOCK'\nline_star:76,line_end:76|char_star:8,char_end:18"[shape="point",fillcolor="#121013",style=filled];
"class Tag2(JSONTag):\n        key = ' 2',type='class_definition'\nline_star:75,line_end:76|char_star:4,char_end:18"->"type='INFORMATION BLOCK'\nline_star:76,line_end:76|char_star:8,char_end:18";
"assert isinstance(s.order[-2], Tag1),type='assert_statement'\nline_star:81,line_end:81|char_star:4,char_end:40"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:72,line_end:84|char_star:4,char_end:40"->"assert isinstance(s.order[-2], Tag1),type='assert_statement'\nline_star:81,line_end:81|char_star:4,char_end:40";
"isinstance(s.order[-2], Tag1),type='call'\nline_star:81,line_end:81|char_star:11,char_end:40"[shape="box",fillcolor="white",style=filled];
"assert isinstance(s.order[-2], Tag1),type='assert_statement'\nline_star:81,line_end:81|char_star:4,char_end:40"->"isinstance(s.order[-2], Tag1),type='call'\nline_star:81,line_end:81|char_star:11,char_end:40";
"isinstance,type='identifier'\nline_star:81,line_end:81|char_star:11,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"isinstance(s.order[-2], Tag1),type='call'\nline_star:81,line_end:81|char_star:11,char_end:40"->"isinstance,type='identifier'\nline_star:81,line_end:81|char_star:11,char_end:21";
"(s.order[-2], Tag1),type='argument_list'\nline_star:81,line_end:81|char_star:21,char_end:40"[shape="box",fillcolor="white",style=filled];
"isinstance(s.order[-2], Tag1),type='call'\nline_star:81,line_end:81|char_star:11,char_end:40"->"(s.order[-2], Tag1),type='argument_list'\nline_star:81,line_end:81|char_star:21,char_end:40";
"s.order[-2],type='subscript'\nline_star:81,line_end:81|char_star:22,char_end:33"[shape="box",fillcolor="white",style=filled];
"(s.order[-2], Tag1),type='argument_list'\nline_star:81,line_end:81|char_star:21,char_end:40"->"s.order[-2],type='subscript'\nline_star:81,line_end:81|char_star:22,char_end:33";
"s.order,type='attribute'\nline_star:81,line_end:81|char_star:22,char_end:29"[shape="box",fillcolor="white",style=filled];
"s.order[-2],type='subscript'\nline_star:81,line_end:81|char_star:22,char_end:33"->"s.order,type='attribute'\nline_star:81,line_end:81|char_star:22,char_end:29";
"s,type='identifier'\nline_star:81,line_end:81|char_star:22,char_end:23"[shape="point",fillcolor="#121013",style=filled];
"s.order,type='attribute'\nline_star:81,line_end:81|char_star:22,char_end:29"->"s,type='identifier'\nline_star:81,line_end:81|char_star:22,char_end:23";
"order,type='identifier'\nline_star:81,line_end:81|char_star:24,char_end:29"[shape="point",fillcolor="#121013",style=filled];
"s.order,type='attribute'\nline_star:81,line_end:81|char_star:22,char_end:29"->"order,type='identifier'\nline_star:81,line_end:81|char_star:24,char_end:29";
"-2,type='unary_operator'\nline_star:81,line_end:81|char_star:30,char_end:32"[shape="box",fillcolor="white",style=filled];
"s.order[-2],type='subscript'\nline_star:81,line_end:81|char_star:22,char_end:33"->"-2,type='unary_operator'\nline_star:81,line_end:81|char_star:30,char_end:32";
"-,type='-'\nline_star:81,line_end:81|char_star:30,char_end:31"[shape="box",fillcolor="white",style=filled];
"-2,type='unary_operator'\nline_star:81,line_end:81|char_star:30,char_end:32"->"-,type='-'\nline_star:81,line_end:81|char_star:30,char_end:31";
"Tag1,type='identifier'\nline_star:81,line_end:81|char_star:35,char_end:39"[shape="point",fillcolor="#121013",style=filled];
"(s.order[-2], Tag1),type='argument_list'\nline_star:81,line_end:81|char_star:21,char_end:40"->"Tag1,type='identifier'\nline_star:81,line_end:81|char_star:35,char_end:39";
"assert isinstance(s.order[-1], Tag2),type='assert_statement'\nline_star:84,line_end:84|char_star:4,char_end:40"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:72,line_end:84|char_star:4,char_end:40"->"assert isinstance(s.order[-1], Tag2),type='assert_statement'\nline_star:84,line_end:84|char_star:4,char_end:40";
"isinstance(s.order[-1], Tag2),type='call'\nline_star:84,line_end:84|char_star:11,char_end:40"[shape="box",fillcolor="white",style=filled];
"assert isinstance(s.order[-1], Tag2),type='assert_statement'\nline_star:84,line_end:84|char_star:4,char_end:40"->"isinstance(s.order[-1], Tag2),type='call'\nline_star:84,line_end:84|char_star:11,char_end:40";
"isinstance,type='identifier'\nline_star:84,line_end:84|char_star:11,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"isinstance(s.order[-1], Tag2),type='call'\nline_star:84,line_end:84|char_star:11,char_end:40"->"isinstance,type='identifier'\nline_star:84,line_end:84|char_star:11,char_end:21";
"(s.order[-1], Tag2),type='argument_list'\nline_star:84,line_end:84|char_star:21,char_end:40"[shape="box",fillcolor="white",style=filled];
"isinstance(s.order[-1], Tag2),type='call'\nline_star:84,line_end:84|char_star:11,char_end:40"->"(s.order[-1], Tag2),type='argument_list'\nline_star:84,line_end:84|char_star:21,char_end:40";
"s.order[-1],type='subscript'\nline_star:84,line_end:84|char_star:22,char_end:33"[shape="box",fillcolor="white",style=filled];
"(s.order[-1], Tag2),type='argument_list'\nline_star:84,line_end:84|char_star:21,char_end:40"->"s.order[-1],type='subscript'\nline_star:84,line_end:84|char_star:22,char_end:33";
"s.order,type='attribute'\nline_star:84,line_end:84|char_star:22,char_end:29"[shape="box",fillcolor="white",style=filled];
"s.order[-1],type='subscript'\nline_star:84,line_end:84|char_star:22,char_end:33"->"s.order,type='attribute'\nline_star:84,line_end:84|char_star:22,char_end:29";
"s,type='identifier'\nline_star:84,line_end:84|char_star:22,char_end:23"[shape="point",fillcolor="#121013",style=filled];
"s.order,type='attribute'\nline_star:84,line_end:84|char_star:22,char_end:29"->"s,type='identifier'\nline_star:84,line_end:84|char_star:22,char_end:23";
"order,type='identifier'\nline_star:84,line_end:84|char_star:24,char_end:29"[shape="point",fillcolor="#121013",style=filled];
"s.order,type='attribute'\nline_star:84,line_end:84|char_star:22,char_end:29"->"order,type='identifier'\nline_star:84,line_end:84|char_star:24,char_end:29";
"-1,type='unary_operator'\nline_star:84,line_end:84|char_star:30,char_end:32"[shape="box",fillcolor="white",style=filled];
"s.order[-1],type='subscript'\nline_star:84,line_end:84|char_star:22,char_end:33"->"-1,type='unary_operator'\nline_star:84,line_end:84|char_star:30,char_end:32";
"-,type='-'\nline_star:84,line_end:84|char_star:30,char_end:31"[shape="box",fillcolor="white",style=filled];
"-1,type='unary_operator'\nline_star:84,line_end:84|char_star:30,char_end:32"->"-,type='-'\nline_star:84,line_end:84|char_star:30,char_end:31";
"Tag2,type='identifier'\nline_star:84,line_end:84|char_star:35,char_end:39"[shape="point",fillcolor="#121013",style=filled];
"(s.order[-1], Tag2),type='argument_list'\nline_star:84,line_end:84|char_star:21,char_end:40"->"Tag2,type='identifier'\nline_star:84,line_end:84|char_star:35,char_end:39";
"from datetime import datetime\nfrom uuid import uuid4\nimport pytest\nfrom flask import Markup\nfrom flask.json.tag import JSONTag\nfrom flask.json.tag import TaggedJSONSerialize"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"from datetime import datetime\nfrom uuid import uuid4\nimport pytest\nfrom flask import Markup\nfrom flask.json.tag import JSONTag\nfrom flask.json.tag import TaggedJSONSerialize"
}
